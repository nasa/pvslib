(integral
 (integrable_TCC1 0
  (integrable_TCC1-1 nil 3390735612
   ("" (expand "integrable?")
    (("" (lemma "nn_integrable_zero")
      (("" (inst + "lambda x: 0" "lambda x: 0")
        (("" (apply-extensionality 1 :hide? t)
          (("" (expand "-") (("" (propax) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((m formal-const-decl "measure_type" integral nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     nil)
    (measure? const-decl "bool" generalized_measure_def nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (S formal-const-decl "sigma_algebra" integral nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil integral nil)
    (nn_integrable_zero formula-decl nil nn_integral nil)
    (- const-decl "[T -> real]" real_fun_ops reals)
    (nn_integrable nonempty-type-eq-decl nil nn_integral nil)
    (nn_integrable? const-decl "bool" nn_integral nil)
    (integrable? const-decl "bool" integral nil))
   nil (integrable subtype "(LAMBDA x: 0)" "integrable")))
 (nn_integrable_is_integrable 0
  (nn_integrable_is_integrable-1 nil 3391020617
   ("" (skosimp)
    (("" (typepred "x!1")
      (("" (expand "integrable?")
        (("" (inst + "x!1" "lambda x: 0")
          (("1" (apply-extensionality :hide? t)
            (("1" (expand "-") (("1" (propax) nil nil)) nil)
             ("2" (skosimp)
              (("2" (expand "-") (("2" (assert) nil nil)) nil)) nil))
            nil)
           ("2" (rewrite "nn_integrable_zero") nil nil))
          nil))
        nil))
      nil))
    nil)
   ((nn_integrable nonempty-type-eq-decl nil nn_integral nil)
    (nn_integrable? const-decl "bool" nn_integral nil)
    (m formal-const-decl "measure_type" integral nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     nil)
    (measure? const-decl "bool" generalized_measure_def nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (S formal-const-decl "sigma_algebra" integral nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-type-decl nil integral nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (x!1 skolem-const-decl "nn_integrable" integral nil)
    (- const-decl "[T -> real]" real_fun_ops reals)
    (nn_integrable_zero formula-decl nil nn_integral nil)
    (integrable? const-decl "bool" integral nil))
   nil
   (nn_integrable_is_integrable subtype "integral.x" "integrable")))
 (isf_is_integrable 0
  (isf_is_integrable-1 nil 3391430136
   ("" (skosimp)
    (("" (expand "integrable?")
      (("" (inst + "plus(x!1)" "minus(x!1)")
        (("1" (lemma "plus_minus_def" ("f" "x!1"))
          (("1" (propax) nil nil)) nil)
         ("2" (lemma "isf_minus" ("i" "x!1"))
          (("2" (assert)
            (("2" (lemma "nn_isf_is_nn_integrable")
              (("2" (inst - "minus[T](x!1)")
                (("1" (flatten) nil nil)
                 ("2" (expand "nn_isf?")
                  (("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (lemma "isf_plus" ("i" "x!1"))
          (("3" (assert)
            (("3" (lemma "nn_isf_is_nn_integrable")
              (("3" (inst - "plus[T](x!1)")
                (("1" (flatten) nil nil)
                 ("2" (hide 2)
                  (("2" (expand "nn_isf?")
                    (("2" (hide -1) (("2" (grind) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((integrable? const-decl "bool" integral nil)
    (isf_plus judgement-tcc nil isf nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (isf_minus judgement-tcc nil isf nil)
    (nn_isf_is_nn_integrable judgement-tcc nil nn_integral nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nn_isf nonempty-type-eq-decl nil nn_integral nil)
    (nn_isf? const-decl "bool" nn_integral nil)
    (plus_minus_def formula-decl nil real_fun_ops_aux reals)
    (nn_integrable nonempty-type-eq-decl nil nn_integral nil)
    (minus const-decl "[T -> nnreal]" real_fun_ops_aux reals)
    (T formal-type-decl nil integral nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (setof type-eq-decl nil defined_types nil)
    (setofsets type-eq-decl nil sets nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (S formal-const-decl "sigma_algebra" integral nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (measure? const-decl "bool" generalized_measure_def nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     nil)
    (m formal-const-decl "measure_type" integral nil)
    (nn_integrable? const-decl "bool" nn_integral nil)
    (plus const-decl "[T -> nnreal]" real_fun_ops_aux reals)
    (isf? const-decl "bool" isf nil)
    (isf nonempty-type-eq-decl nil isf nil)
    (x!1 skolem-const-decl "isf" integral nil)
    (isf_plus application-judgement "isf" integral nil)
    (isf_minus application-judgement "isf[T, S, m]" integral nil))
   nil (isf_is_integrable subtype "integral.x" "integrable")))
 (integrable_is_measurable 0
  (integrable_is_measurable-1 nil 3395201756
   ("" (skosimp)
    (("" (lemma "nn_integrable_is_measurable")
      (("" (typepred "x!1")
        (("" (expand "integrable?")
          (("" (skosimp)
            (("" (replace -1)
              (("" (inst-cp - "g!1")
                (("" (inst - "h!1")
                  (("" (rewrite "diff_measurable") nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((m formal-const-decl "measure_type" integral nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     nil)
    (measure? const-decl "bool" generalized_measure_def nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (S formal-const-decl "sigma_algebra" integral nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil integral nil)
    (nn_integrable_is_measurable judgement-tcc nil nn_integral nil)
    (diff_measurable judgement-tcc nil measure_space_def nil)
    (measurable_function? const-decl "bool" measure_space_def nil)
    (measurable_function nonempty-type-eq-decl nil measure_space_def
     nil)
    (nn_integrable? const-decl "bool" nn_integral nil)
    (nn_integrable nonempty-type-eq-decl nil nn_integral nil)
    (integrable nonempty-type-eq-decl nil integral nil)
    (integrable? const-decl "bool" integral nil)
    (NOT const-decl "[bool -> bool]" booleans nil))
   nil
   (integrable_is_measurable subtype "integral.x"
    "measurable_function[T, S]")))
 (integrable_equiv 0
  (integrable_equiv-1 nil 3395200583
   ("" (skosimp)
    (("" (lemma "nn_integral_add" ("f1" "g1!1" "f2" "g4!1"))
      (("" (lemma "nn_integral_add" ("f1" "g2!1" "f2" "g3!1"))
        (("" (case-replace "g2!1 + g3!1=g1!1 + g4!1")
          (("1" (assert) nil nil)
           ("2" (apply-extensionality 1 :hide? t)
            (("2"
              (lemma "extensionality_postulate"
               ("f" "g1!1 - g3!1" "g" "g2!1 - g4!1"))
              (("2" (replace -1 -4 rl)
                (("2" (inst -4 "x!1")
                  (("2" (hide-all-but (-4 1)) (("2" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((m formal-const-decl "measure_type" integral nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     nil)
    (measure? const-decl "bool" generalized_measure_def nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (S formal-const-decl "sigma_algebra" integral nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil integral nil)
    (nn_integrable nonempty-type-eq-decl nil nn_integral nil)
    (nn_integrable? const-decl "bool" nn_integral nil)
    (nn_integral_add formula-decl nil nn_integral nil)
    (nn_integrable_add application-judgement "nn_integrable" integral
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (+ const-decl "[T -> real]" real_fun_ops reals)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (diff_measurable application-judgement "measurable_function[T, S]"
     integral nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (extensionality_postulate formula-decl nil functions nil)
    (- const-decl "[T -> real]" real_fun_ops reals))
   shostak))
 (integrable_add 0
  (integrable_add-1 nil 3391020617
   ("" (skosimp)
    (("" (typepred "f1!1")
      (("" (typepred "f2!1")
        (("" (expand "integrable?")
          (("" (skosimp*)
            (("" (inst + "g!1+g!2" "h!1+h!2")
              (("" (apply-extensionality 1 :hide? t)
                (("" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((integrable nonempty-type-eq-decl nil integral nil)
    (integrable? const-decl "bool" integral nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-type-decl nil integral nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nn_integrable_add application-judgement "nn_integrable" integral
     nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (setof type-eq-decl nil defined_types nil)
    (setofsets type-eq-decl nil sets nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (S formal-const-decl "sigma_algebra" integral nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (measure? const-decl "bool" generalized_measure_def nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     nil)
    (m formal-const-decl "measure_type" integral nil)
    (nn_integrable? const-decl "bool" nn_integral nil)
    (nn_integrable nonempty-type-eq-decl nil nn_integral nil)
    (+ const-decl "[T -> real]" real_fun_ops reals)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (diff_measurable application-judgement "measurable_function[T, S]"
     integral nil)
    (sum_measurable application-judgement "measurable_function[T, S]"
     integral nil)
    (- const-decl "[T -> real]" real_fun_ops reals))
   nil
   (integrable_add subtype
    "(real_fun_ops[integral.T].+)(integral.f1, integral.f2)"
    "integrable")))
 (integrable_scal 0
  (integrable_scal-1 nil 3391020617
   ("" (skosimp)
    (("" (typepred "f!1")
      (("" (expand "integrable?")
        (("" (skosimp)
          (("" (case "c!1>=0")
            (("1" (inst + "c!1*g!1" "c!1*h!1")
              (("1" (apply-extensionality :hide? t)
                (("1" (grind) nil nil)) nil)
               ("2" (split)
                (("1" (skosimp)
                  (("1" (expand "*")
                    (("1"
                      (lemma "le_times_le_pos"
                       ("nnx" "0" "y" "c!1" "nnz" "0" "w" "h!1(x1!1)"))
                      (("1" (assert) nil nil)) nil))
                    nil))
                  nil)
                 ("2" (typepred "h!1")
                  (("2"
                    (lemma "nn_integrable_scal" ("c" "c!1" "f" "h!1"))
                    (("1" (flatten) nil nil) ("2" (propax) nil nil))
                    nil))
                  nil))
                nil)
               ("3" (split)
                (("1" (skosimp)
                  (("1"
                    (lemma "nn_integrable_scal" ("c" "c!1" "f" "g!1"))
                    (("1" (flatten) (("1" (inst - "x1!1") nil nil))
                      nil)
                     ("2" (propax) nil nil))
                    nil))
                  nil)
                 ("2"
                  (lemma "nn_integrable_scal" ("c" "c!1" "f" "g!1"))
                  (("1" (flatten) nil nil) ("2" (propax) nil nil))
                  nil))
                nil))
              nil)
             ("2" (inst + "-c!1*h!1" "-c!1*g!1")
              (("1" (replace -1)
                (("1" (hide-all-but 2)
                  (("1" (apply-extensionality :hide? t)
                    (("1" (grind) nil nil)) nil))
                  nil))
                nil)
               ("2" (split)
                (("1" (hide -1)
                  (("1" (skosimp)
                    (("1" (grind)
                      (("1"
                        (lemma "both_sides_times_pos_le1"
                         ("pz" "-c!1" "x" "0" "y" "g!1(x1!1)"))
                        (("1" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2"
                  (lemma "nn_integrable_scal" ("c" "-c!1" "f" "g!1"))
                  (("1" (flatten) nil nil) ("2" (assert) nil nil))
                  nil))
                nil)
               ("3" (split)
                (("1" (skosimp)
                  (("1"
                    (lemma "both_sides_times_pos_le1"
                     ("pz" "-c!1" "x" "0" "y" "h!1(x1!1)"))
                    (("1" (assert) (("1" (grind) nil nil)) nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil)
                 ("2"
                  (lemma "nn_integrable_scal" ("c" "-c!1" "f" "h!1"))
                  (("1" (flatten) nil nil) ("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((integrable nonempty-type-eq-decl nil integral nil)
    (integrable? const-decl "bool" integral nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-type-decl nil integral nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (both_sides_times_pos_le1 formula-decl nil real_props nil)
    (scal_measurable application-judgement "measurable_function[T, S]"
     integral nil)
    (g!1 skolem-const-decl "nn_integrable" integral nil)
    (nn_integrable nonempty-type-eq-decl nil nn_integral nil)
    (nn_integrable? const-decl "bool" nn_integral nil)
    (m formal-const-decl "measure_type" integral nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     nil)
    (measure? const-decl "bool" generalized_measure_def nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (S formal-const-decl "sigma_algebra" integral nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (nnreal type-eq-decl nil real_types nil)
    (c!1 skolem-const-decl "real" integral nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (h!1 skolem-const-decl "nn_integrable" integral nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (diff_measurable application-judgement "measurable_function[T, S]"
     integral nil)
    (- const-decl "[T -> real]" real_fun_ops reals)
    (nn_integrable_scal judgement-tcc nil nn_integral nil)
    (le_times_le_pos formula-decl nil real_props nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (>= const-decl "bool" reals nil))
   nil
   (integrable_scal subtype
    "real_fun_ops[integral.T].*(integral.c, integral.f)"
    "integrable")))
 (integrable_opp 0
  (integrable_opp-1 nil 3391020617
   ("" (skosimp)
    (("" (typepred "f!1")
      (("" (lemma "integrable_scal" ("c" "-1" "f" "f!1"))
        (("" (expand "*")
          (("" (expand "-") (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((integrable nonempty-type-eq-decl nil integral nil)
    (integrable? const-decl "bool" integral nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-type-decl nil integral nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (real_times_real_is_real application-judgement "real" reals nil)
    (- const-decl "[T -> real]" real_fun_ops reals)
    (minus_real_is_real application-judgement "real" reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (integrable_scal judgement-tcc nil integral nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil))
   nil
   (integrable_opp subtype "(real_fun_ops[integral.T].-)(integral.f)"
    "integrable")))
 (integrable_diff 0
  (integrable_diff-1 nil 3391142033
   ("" (skosimp)
    (("" (lemma "integrable_opp" ("f" "f2!1"))
      (("" (lemma "integrable_add" ("f1" "f1!1" "f2" "-f2!1"))
        (("" (case-replace "(+[T])(f1!1, -f2!1)=(-[T])(f1!1, f2!1)")
          (("" (apply-extensionality 1 :hide? t)
            (("" (expand "+")
              (("" (expand "-") (("" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((integrable nonempty-type-eq-decl nil integral nil)
    (integrable? const-decl "bool" integral nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-type-decl nil integral nil)
    (integrable_opp judgement-tcc nil integral nil)
    (- const-decl "[T -> real]" real_fun_ops reals)
    (+ const-decl "[T -> real]" real_fun_ops reals)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (diff_measurable application-judgement "measurable_function[T, S]"
     integral nil)
    (integrable_add application-judgement "integrable" integral nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (integrable_opp application-judgement "integrable" integral nil)
    (integrable_add judgement-tcc nil integral nil)
    (- const-decl "[T -> real]" real_fun_ops reals))
   nil
   (integrable_diff subtype
    "(real_fun_ops[integral.T].-)(integral.f1, integral.f2)"
    "integrable")))
 (integrable_zero 0
  (integrable_zero-1 nil 3391332663
   ("" (rewrite "integrable_TCC1") nil nil)
   ((integrable_TCC1 subtype-tcc nil integral nil)) shostak))
 (nonempty_integrals 0
  (nonempty_integrals-1 nil 3391183431
   ("" (skosimp)
    (("" (typepred "f!1")
      (("" (expand "integrable?")
        (("" (skosimp)
          (("" (expand "integrals")
            (("" (expand "nonempty?")
              (("" (expand "empty?")
                (("" (expand "member")
                  (("" (inst - "nn_integral(g!1)-nn_integral(h!1)")
                    (("" (inst + "g!1" "h!1") nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((integrable nonempty-type-eq-decl nil integral nil)
    (integrable? const-decl "bool" integral nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-type-decl nil integral nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nonempty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (nn_integral const-decl "nnreal" nn_integral nil)
    (nn_integrable nonempty-type-eq-decl nil nn_integral nil)
    (nn_integrable? const-decl "bool" nn_integral nil)
    (m formal-const-decl "measure_type" integral nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     nil)
    (measure? const-decl "bool" generalized_measure_def nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (S formal-const-decl "sigma_algebra" integral nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (empty? const-decl "bool" sets nil)
    (integrals const-decl "set[real]" integral nil))
   shostak))
 (singleton_integrals 0
  (singleton_integrals-1 nil 3391183368
   ("" (skosimp)
    (("" (lemma "nonempty_integrals" ("f" "f!1"))
      (("" (expand "nonempty?")
        (("" (expand "empty?")
          (("" (skosimp)
            (("" (expand "singleton?")
              (("" (inst + "x!1")
                (("1" (skosimp)
                  (("1" (typepred "y!1")
                    (("1" (expand "member")
                      (("1" (expand "integrals")
                        (("1" (skosimp*)
                          (("1" (replace -2)
                            (("1" (replace -4)
                              (("1"
                                (hide -2 -4)
                                (("1"
                                  (lemma
                                   "nn_integrable_add"
                                   ("f1" "g!2" "f2" "h!1"))
                                  (("1"
                                    (lemma
                                     "nn_integrable_add"
                                     ("f1" "g!1" "f2" "h!2"))
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (lemma
                                         "nn_integral_add"
                                         ("f1" "g!2" "f2" "h!1"))
                                        (("1"
                                          (lemma
                                           "nn_integral_add"
                                           ("f1" "g!1" "f2" "h!2"))
                                          (("1"
                                            (assert)
                                            (("1"
                                              (case-replace
                                               "g!1 + h!2=g!2 + h!1")
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (apply-extensionality
                                                 1
                                                 :hide?
                                                 t)
                                                (("2"
                                                  (hide-all-but
                                                   (-7 -8 1))
                                                  (("2"
                                                    (lemma
                                                     "extensionality_postulate"
                                                     ("f"
                                                      "f!1"
                                                      "g"
                                                      "g!1-h!1"))
                                                    (("2"
                                                      (lemma
                                                       "extensionality_postulate"
                                                       ("f"
                                                        "f!1"
                                                        "g"
                                                        "g!2-h!2"))
                                                      (("2"
                                                        (flatten)
                                                        (("2"
                                                          (split -2)
                                                          (("1"
                                                            (split -4)
                                                            (("1"
                                                              (hide
                                                               -3
                                                               -4
                                                               -5
                                                               -6)
                                                              (("1"
                                                                (inst
                                                                 -
                                                                 "x!2")
                                                                (("1"
                                                                  (inst
                                                                   -
                                                                   "x!2")
                                                                  (("1"
                                                                    (expand
                                                                     "+")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (expand
                                                                         "-")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((integrable nonempty-type-eq-decl nil integral nil)
    (integrable? const-decl "bool" integral nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-type-decl nil integral nil)
    (nonempty_integrals formula-decl nil integral nil)
    (empty? const-decl "bool" sets nil)
    (singleton? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (m formal-const-decl "measure_type" integral nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     nil)
    (measure? const-decl "bool" generalized_measure_def nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (S formal-const-decl "sigma_algebra" integral nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (nn_integrable nonempty-type-eq-decl nil nn_integral nil)
    (nn_integrable? const-decl "bool" nn_integral nil)
    (nn_integrable_add judgement-tcc nil nn_integral nil)
    (+ const-decl "[T -> real]" real_fun_ops reals)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (- const-decl "[T -> real]" real_fun_ops reals)
    (extensionality_postulate formula-decl nil functions nil)
    (nn_integrable_add application-judgement "nn_integrable" integral
     nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (integrable_diff application-judgement "integrable" integral nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nn_integral_add formula-decl nil nn_integral nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (integrals const-decl "set[real]" integral nil)
    (f!1 skolem-const-decl "integrable" integral nil)
    (x!1 skolem-const-decl "real" integral nil)
    (nonempty? const-decl "bool" sets nil))
   shostak))
 (integral_TCC1 0
  (integral_TCC1-1 nil 3391183280
   ("" (skosimp)
    (("" (lemma "nonempty_integrals" ("f" "f!1"))
      (("" (propax) nil nil)) nil))
    nil)
   ((integrable nonempty-type-eq-decl nil integral nil)
    (integrable? const-decl "bool" integral nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-type-decl nil integral nil)
    (nonempty_integrals formula-decl nil integral nil))
   nil
   (integral subtype "integral.integrals(integral.f)"
    "(sets[real].nonempty?)")))
 (nn_integrable_is_nn_integrable 0
  (nn_integrable_is_nn_integrable-1 nil 3391225798
   ("" (skosimp)
    (("" (typepred "f!1")
      (("" (expand "integrable?")
        (("" (skosimp)
          (("" (typepred "g!1")
            (("" (typepred "h!1")
              (("" (lemma "nn_integrable_le" ("f" "g!1" "g" "f!1"))
                (("" (split -1)
                  (("1" (flatten) nil nil)
                   ("2" (skosimp)
                    (("2" (replace -3)
                      (("2" (expand "-")
                        (("2" (inst - "x!1") (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((integrable nonempty-type-eq-decl nil integral nil)
    (integrable? const-decl "bool" integral nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-type-decl nil integral nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[T -> real]" real_fun_ops reals)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nn_integrable_le formula-decl nil nn_integral nil)
    (measurable_function? const-decl "bool" measure_space_def nil)
    (measurable_function nonempty-type-eq-decl nil measure_space_def
     nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (setof type-eq-decl nil defined_types nil)
    (setofsets type-eq-decl nil sets nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (S formal-const-decl "sigma_algebra" integral nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (measure? const-decl "bool" generalized_measure_def nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     nil)
    (m formal-const-decl "measure_type" integral nil)
    (nn_integrable? const-decl "bool" nn_integral nil)
    (nn_integrable nonempty-type-eq-decl nil nn_integral nil))
   shostak))
 (integral_nn 0
  (integral_nn-1 nil 3391166946
   ("" (skosimp)
    (("" (typepred "g!1")
      (("" (name "CC" "integral.integral(g!1)")
        (("" (replace -1)
          (("" (expand "integral")
            (("" (typepred "choose[real](integrals(g!1))")
              (("" (replace -2)
                (("" (expand "integrals" -1)
                  (("" (skosimp)
                    ((""
                      (lemma "nn_integral_add" ("f1" "g!1" "f2" "h!1"))
                      (("" (replace -3)
                        (("" (case "g!2=g!1+h!1")
                          (("1" (assert) nil nil)
                           ("2" (hide-all-but (-2 1))
                            (("2" (apply-extensionality :hide? t)
                              (("2"
                                (replace -1)
                                (("2"
                                  (hide -1)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nn_integrable nonempty-type-eq-decl nil nn_integral nil)
    (nn_integrable? const-decl "bool" nn_integral nil)
    (m formal-const-decl "measure_type" integral nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     nil)
    (measure? const-decl "bool" generalized_measure_def nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (S formal-const-decl "sigma_algebra" integral nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-type-decl nil integral nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (choose const-decl "(p)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (integrals const-decl "set[real]" integral nil)
    (set type-eq-decl nil sets nil)
    (nn_integral_add formula-decl nil nn_integral nil)
    (nn_integrable_add application-judgement "nn_integrable" integral
     nil)
    (+ const-decl "[T -> real]" real_fun_ops reals)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (integrable_diff application-judgement "integrable" integral nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (integrable_add application-judgement "integrable" integral nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (- const-decl "[T -> real]" real_fun_ops reals)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (integrable? const-decl "bool" integral nil)
    (integrable nonempty-type-eq-decl nil integral nil)
    (integral const-decl "real" integral nil))
   shostak))
 (integral_zero 0
  (integral_zero-1 nil 3391167424
   ("" (lemma "integrable_zero")
    (("" (lemma "nn_integrable_is_nn_integrable" ("f" "LAMBDA x: 0"))
      (("1" (split -1)
        (("1" (lemma "integral_nn" ("g" "LAMBDA x: 0"))
          (("1" (replace -1)
            (("1" (hide -1 -3)
              (("1" (rewrite "nn_integral_zero") nil nil)) nil))
            nil)
           ("2" (propax) nil nil))
          nil)
         ("2" (skosimp) (("2" (assert) nil nil)) nil))
        nil)
       ("2" (propax) nil nil))
      nil))
    nil)
   ((integrable nonempty-type-eq-decl nil integral nil)
    (integrable? const-decl "bool" integral nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-type-decl nil integral nil)
    (nn_integrable_is_nn_integrable formula-decl nil integral nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nn_integrable nonempty-type-eq-decl nil nn_integral nil)
    (nn_integrable? const-decl "bool" nn_integral nil)
    (m formal-const-decl "measure_type" integral nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     nil)
    (measure? const-decl "bool" generalized_measure_def nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (S formal-const-decl "sigma_algebra" integral nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (integral_nn formula-decl nil integral nil)
    (nn_integral_zero formula-decl nil nn_integral nil)
    (integrable_zero formula-decl nil integral nil))
   shostak))
 (integral_phi_TCC1 0
  (integral_phi_TCC1-1 nil 3391167398
   ("" (skosimp)
    (("" (typepred "F!1")
      (("" (assert)
        (("" (expand "measurable_set?") (("" (propax) nil nil)) nil))
        nil))
      nil))
    nil)
   ((mu_fin? const-decl "bool" measure_props nil)
    (m formal-const-decl "measure_type" integral nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     nil)
    (measure? const-decl "bool" generalized_measure_def nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (measurable_set nonempty-type-eq-decl nil measure_space_def nil)
    (measurable_set? const-decl "bool" measure_space_def nil)
    (S formal-const-decl "sigma_algebra" integral nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (set type-eq-decl nil sets nil)
    (T formal-type-decl nil integral nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil
   (integral_phi subtype "integral.F"
    "{m1: (integral.S) | measure_props[integral.T, integral.S, integral.m].mu_fin?(m1)}")))
 (integral_phi 0
  (integral_phi-1 nil 3391181089
   ("" (skosimp)
    (("" (lemma "nn_integral_phi" ("F" "F!1"))
      (("" (rewrite "integral_nn") nil nil)) nil))
    nil)
   ((m formal-const-decl "measure_type" integral nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     nil)
    (measure? const-decl "bool" generalized_measure_def nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (S formal-const-decl "sigma_algebra" integral nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil integral nil)
    (mu_fin? const-decl "bool" measure_props nil)
    (measurable_set nonempty-type-eq-decl nil measure_space_def nil)
    (measurable_set? const-decl "bool" measure_space_def nil)
    (set type-eq-decl nil sets nil)
    (nn_integral_phi formula-decl nil nn_integral nil)
    (phi const-decl "nat" measure_space nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (nn_integrable nonempty-type-eq-decl nil nn_integral nil)
    (nn_integrable? const-decl "bool" nn_integral nil)
    (integral_nn formula-decl nil integral nil)
    (isf_phi application-judgement "isf" integral nil))
   shostak))
 (integral_add 0
  (integral_add-1 nil 3390735896
   ("" (skosimp)
    (("" (expand "integral")
      (("" (typepred "choose[real](integrals(f1!1 + f2!1))")
        (("" (typepred "choose[real](integrals(f2!1))")
          (("" (typepred "choose[real](integrals(f1!1))")
            ((""
              (name-replace "XY"
               "choose[real](integrals(f1!1 + f2!1))")
              (("" (name-replace "X" "choose[real](integrals(f1!1))")
                (("" (name-replace "Y" "choose[real](integrals(f2!1))")
                  (("" (expand "integrals")
                    (("" (skosimp*)
                      (("" (replace -2)
                        (("" (replace -4)
                          (("" (replace -6)
                            (("" (hide -2 -4 -6)
                              ((""
                                (replace -1)
                                ((""
                                  (replace -2)
                                  ((""
                                    (hide -1 -2)
                                    ((""
                                      (lemma
                                       "nn_integral_add"
                                       ("f1" "g!1" "f2" "g!2"))
                                      ((""
                                        (lemma
                                         "nn_integral_add"
                                         ("f1" "h!1" "f2" "h!2"))
                                        ((""
                                          (case
                                           "(g!1+g!2)+h!3=(h!1+h!2)+g!3")
                                          (("1"
                                            (lemma
                                             "nn_integral_add"
                                             ("f1"
                                              "g!1 + g!2"
                                              "f2"
                                              "h!3"))
                                            (("1"
                                              (lemma
                                               "nn_integral_add"
                                               ("f1"
                                                "h!1 + h!2"
                                                "f2"
                                                "g!3"))
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (lemma
                                             "extensionality_postulate"
                                             ("f"
                                              "g!1 - h!1 + (g!2 - h!2)"
                                              "g"
                                              "g!3 - h!3"))
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (split -2)
                                                (("1"
                                                  (hide-all-but (-1 1))
                                                  (("1"
                                                    (apply-extensionality
                                                     :hide?
                                                     t)
                                                    (("1"
                                                      (inst - "x!1")
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((integral const-decl "real" integral nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (m formal-const-decl "measure_type" integral nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     nil)
    (measure? const-decl "bool" generalized_measure_def nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (S formal-const-decl "sigma_algebra" integral nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (nn_integrable nonempty-type-eq-decl nil nn_integral nil)
    (nn_integrable? const-decl "bool" nn_integral nil)
    (nn_integral_add formula-decl nil nn_integral nil)
    (nn_integrable_add application-judgement "nn_integrable" integral
     nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (integrable_diff application-judgement "integrable" integral nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (- const-decl "[T -> real]" real_fun_ops reals)
    (extensionality_postulate formula-decl nil functions nil)
    (integrable_add application-judgement "integrable" integral nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil integral nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (integrable? const-decl "bool" integral nil)
    (integrable nonempty-type-eq-decl nil integral nil)
    (set type-eq-decl nil sets nil)
    (integrals const-decl "set[real]" integral nil)
    (+ const-decl "[T -> real]" real_fun_ops reals)
    (nonempty? const-decl "bool" sets nil)
    (choose const-decl "(p)" sets nil))
   shostak))
 (integral_scal 0
  (integral_scal-1 nil 3390736302
   ("" (skosimp)
    (("" (expand "integral")
      (("" (typepred "choose[real](integrals(f!1))")
        (("" (typepred "choose[real](integrals(c!1*f!1))")
          (("" (name-replace "X" "choose[real](integrals(f!1))")
            (("" (name-replace "CX" "choose[real](integrals(c!1*f!1))")
              (("" (expand "integrals")
                (("" (skosimp*)
                  (("" (replace -3)
                    (("" (replace -2)
                      (("" (replace -4)
                        (("" (hide-all-but (-1 1))
                          (("" (case "c!1*g!2+h!1 = c!1*h!2+g!1")
                            (("1" (hide -2)
                              (("1"
                                (case "c!1>=0")
                                (("1"
                                  (lemma
                                   "nn_integral_scal"
                                   ("c" "c!1" "f" "g!2"))
                                  (("1"
                                    (lemma
                                     "nn_integral_scal"
                                     ("c" "c!1" "f" "h!2"))
                                    (("1"
                                      (lemma
                                       "nn_integral_add"
                                       ("f1" "c!1 * g!2" "f2" "h!1"))
                                      (("1"
                                        (lemma
                                         "nn_integral_add"
                                         ("f1" "c!1 * h!2" "f2" "g!1"))
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (propax) nil nil))
                                  nil)
                                 ("2"
                                  (case "-c!1*h!2+h!1=-c!1*g!2+g!1")
                                  (("1"
                                    (hide -2)
                                    (("1"
                                      (lemma
                                       "nn_integral_scal"
                                       ("c" "-c!1" "f" "h!2"))
                                      (("1"
                                        (lemma
                                         "nn_integral_scal"
                                         ("c" "-c!1" "f" "g!2"))
                                        (("1"
                                          (lemma
                                           "nn_integral_add"
                                           ("f1"
                                            "-c!1 * g!2"
                                            "f2"
                                            "g!1"))
                                          (("1"
                                            (lemma
                                             "nn_integral_add"
                                             ("f1"
                                              "-c!1 * h!2"
                                              "f2"
                                              "h!1"))
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (lemma
                                     "extensionality_postulate"
                                     ("f"
                                      "c!1 * g!2 + h!1"
                                      "g"
                                      "c!1 * h!2 + g!1"))
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (split -2)
                                        (("1"
                                          (hide-all-but (-1 1))
                                          (("1"
                                            (apply-extensionality
                                             :hide?
                                             t)
                                            (("1"
                                              (inst - "x!1")
                                              (("1" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2"
                              (lemma "extensionality_postulate"
                               ("f"
                                "c!1 * (g!2 - h!2)"
                                "g"
                                "g!1 - h!1"))
                              (("2"
                                (flatten)
                                (("2"
                                  (split -2)
                                  (("1"
                                    (hide-all-but (1 -1))
                                    (("1"
                                      (apply-extensionality 1 :hide? t)
                                      (("1"
                                        (inst - "x!1")
                                        (("1" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((integral const-decl "real" integral nil)
    (integrable_scal application-judgement "integrable" integral nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (integrable_diff application-judgement "integrable" integral nil)
    (- const-decl "[T -> real]" real_fun_ops reals)
    (minus_real_is_real application-judgement "real" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (extensionality_postulate formula-decl nil functions nil)
    (nn_integral_scal formula-decl nil nn_integral nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nn_integral_add formula-decl nil nn_integral nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (integrable_add application-judgement "integrable" integral nil)
    (+ const-decl "[T -> real]" real_fun_ops reals)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (setof type-eq-decl nil defined_types nil)
    (setofsets type-eq-decl nil sets nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (S formal-const-decl "sigma_algebra" integral nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (measure? const-decl "bool" generalized_measure_def nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     nil)
    (m formal-const-decl "measure_type" integral nil)
    (nn_integrable? const-decl "bool" nn_integral nil)
    (nn_integrable nonempty-type-eq-decl nil nn_integral nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil integral nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (integrable? const-decl "bool" integral nil)
    (integrable nonempty-type-eq-decl nil integral nil)
    (set type-eq-decl nil sets nil)
    (integrals const-decl "set[real]" integral nil)
    (nonempty? const-decl "bool" sets nil)
    (choose const-decl "(p)" sets nil))
   shostak))
 (integral_opp 0
  (integral_opp-1 nil 3391186785
   ("" (skosimp)
    (("" (lemma "integral_scal" ("c" "-1" "f" "f!1"))
      (("" (assert)
        (("" (expand "*" -1)
          (("" (assert) (("" (expand "-") (("" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((integrable nonempty-type-eq-decl nil integral nil)
    (integrable? const-decl "bool" integral nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (T formal-type-decl nil integral nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (integral_scal formula-decl nil integral nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (- const-decl "[T -> real]" real_fun_ops reals)
    (integrable_scal application-judgement "integrable" integral nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (integrable_opp application-judgement "integrable" integral nil)
    (minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (integral_diff 0
  (integral_diff-1 nil 3391186839
   ("" (skosimp)
    (("" (lemma "integral_opp" ("f" "f2!1"))
      (("" (lemma "integral_add" ("f1" "f1!1" "f2" "-f2!1"))
        (("" (expand "-" -1 1)
          (("" (expand "+" -1 1)
            (("" (expand "-" 1) (("" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((integrable nonempty-type-eq-decl nil integral nil)
    (integrable? const-decl "bool" integral nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-type-decl nil integral nil)
    (integral_opp formula-decl nil integral nil)
    (- const-decl "[T -> real]" real_fun_ops reals)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (+ const-decl "[T -> real]" real_fun_ops reals)
    (integrable_opp application-judgement "integrable" integral nil)
    (integral_add formula-decl nil integral nil)
    (- const-decl "[T -> real]" real_fun_ops reals))
   shostak))
 (integral_nonneg 0
  (integral_nonneg-1 nil 3390736251
   ("" (skosimp)
    (("" (lemma "nn_integrable_is_nn_integrable" ("f" "f!1"))
      (("" (assert)
        (("" (split -1)
          (("1" (rewrite "integral_nn") (("1" (assert) nil nil)) nil)
           ("2" (propax) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((integrable nonempty-type-eq-decl nil integral nil)
    (integrable? const-decl "bool" integral nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-type-decl nil integral nil)
    (nn_integrable_is_nn_integrable formula-decl nil integral nil)
    (nn_integrable nonempty-type-eq-decl nil nn_integral nil)
    (nn_integrable? const-decl "bool" nn_integral nil)
    (m formal-const-decl "measure_type" integral nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     nil)
    (measure? const-decl "bool" generalized_measure_def nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (S formal-const-decl "sigma_algebra" integral nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (integral_nn formula-decl nil integral nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak))
 (integrable_abs 0
  (integrable_abs-1 nil 3391224442
   ("" (skosimp)
    (("" (typepred "f!1")
      (("" (expand "integrable?")
        (("" (skosimp)
          (("" (typepred "g!1")
            (("" (typepred "h!1")
              (("" (lemma "abs_measurable" ("g" "f!1"))
                (("" (case "forall x: abs(f!1)(x)<= (g!1+h!1)(x)")
                  (("1"
                    (lemma "nn_integrable_add" ("f1" "g!1" "f2" "h!1"))
                    (("1" (flatten)
                      (("1"
                        (lemma "nn_integrable_le"
                         ("f" "g!1+h!1" "g" "abs(f!1)"))
                        (("1" (split -1)
                          (("1" (flatten)
                            (("1" (lemma "nn_integrable_is_integrable")
                              (("1"
                                (inst - "abs(f!1)")
                                (("1"
                                  (expand "integrable?")
                                  (("1" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (skosimp)
                            (("2" (inst -3 "x!1")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide-all-but (-4 1))
                    (("2" (replace -1)
                      (("2" (hide -1) (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((integrable nonempty-type-eq-decl nil integral nil)
    (integrable? const-decl "bool" integral nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-type-decl nil integral nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (+ const-decl "[T -> real]" real_fun_ops reals)
    (abs const-decl "[T -> nonneg_real]" real_fun_ops reals)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (nn_integrable_is_integrable judgement-tcc nil integral nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (integrable_diff application-judgement "integrable" integral nil)
    (nn_integrable_le formula-decl nil nn_integral nil)
    (abs_measurable application-judgement "measurable_function[T, S]"
     integral nil)
    (nn_integrable_add application-judgement "nn_integrable" integral
     nil)
    (nn_integrable_add judgement-tcc nil nn_integral nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (- const-decl "[T -> real]" real_fun_ops reals)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (measurable_function nonempty-type-eq-decl nil measure_space_def
     nil)
    (measurable_function? const-decl "bool" measure_space_def nil)
    (abs_measurable judgement-tcc nil measure_space nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (setof type-eq-decl nil defined_types nil)
    (setofsets type-eq-decl nil sets nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (S formal-const-decl "sigma_algebra" integral nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (measure? const-decl "bool" generalized_measure_def nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     nil)
    (m formal-const-decl "measure_type" integral nil)
    (nn_integrable? const-decl "bool" nn_integral nil)
    (nn_integrable nonempty-type-eq-decl nil nn_integral nil))
   nil
   (integrable_abs subtype "real_fun_ops[integral.T].abs(integral.f)"
    "integrable")))
 (integrable_max 0
  (integrable_max-1 nil 3391224442
   ("" (skosimp)
    (("" (rewrite "max_def") (("" (rewrite "integrable_scal") nil nil))
      nil))
    nil)
   ((max_def formula-decl nil real_fun_ops_aux reals)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (integrable? const-decl "bool" integral nil)
    (integrable nonempty-type-eq-decl nil integral nil)
    (T formal-type-decl nil integral nil)
    (integrable_diff application-judgement "integrable" integral nil)
    (integrable_abs application-judgement "integrable" integral nil)
    (integrable_add application-judgement "integrable" integral nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (integrable_scal application-judgement "integrable" integral nil)
    (- const-decl "[T -> real]" real_fun_ops reals)
    (abs const-decl "[T -> nonneg_real]" real_fun_ops reals)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (+ const-decl "[T -> real]" real_fun_ops reals)
    (integrable_scal judgement-tcc nil integral nil))
   nil
   (integrable_max subtype
    "real_fun_ops_aux[integral.T].max(integral.f1, integral.f2)"
    "integrable")))
 (integrable_min 0
  (integrable_min-1 nil 3391224442
   ("" (skosimp)
    (("" (typepred "f2!1")
      (("" (typepred "f1!1")
        (("" (lemma "integrable_opp" ("f" "f2!1"))
          (("" (lemma "integrable_opp" ("f" "f1!1"))
            (("" (expand "-")
              ((""
                (lemma "integrable_max"
                 ("f1" "LAMBDA (x: T): -f1!1(x)" "f2"
                  "LAMBDA (x: T): -f2!1(x)"))
                (("1" (expand "max")
                  (("1"
                    (lemma "integrable_opp"
                     ("f"
                      "LAMBDA (x_1: T): max(-f1!1(x_1), -f2!1(x_1))"))
                    (("1" (expand "-")
                      (("1" (expand "min")
                        (("1"
                          (case-replace
                           "(LAMBDA (x: T): -max(-f1!1(x), -f2!1(x)))=(LAMBDA (x: T): min(f1!1(x), f2!1(x)))")
                          (("1" (apply-extensionality :hide? t)
                            (("1" (hide-all-but 1)
                              (("1" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (propax) nil nil))
                    nil))
                  nil)
                 ("2" (propax) nil nil) ("3" (propax) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((integrable nonempty-type-eq-decl nil integral nil)
    (integrable? const-decl "bool" integral nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-type-decl nil integral nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (integrable_opp judgement-tcc nil integral nil)
    (- const-decl "[T -> real]" real_fun_ops reals)
    (max const-decl "[T -> real]" real_fun_ops_aux reals)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (<= const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (min const-decl "[T -> real]" real_fun_ops_aux reals)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (>= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (integrable_max judgement-tcc nil integral nil)
    (minus_real_is_real application-judgement "real" reals nil))
   nil
   (integrable_min subtype
    "real_fun_ops_aux[integral.T].min(integral.f1, integral.f2)"
    "integrable")))
 (integrable_plus 0
  (integrable_plus-1 nil 3391224442
   ("" (skosimp)
    (("" (lemma "integrable_max" ("f1" "f!1" "f2" "lambda x: 0"))
      (("1" (expand "max")
        (("1" (expand "plus") (("1" (propax) nil nil)) nil)) nil)
       ("2" (rewrite "integrable_zero") nil nil))
      nil))
    nil)
   ((integrable nonempty-type-eq-decl nil integral nil)
    (integrable? const-decl "bool" integral nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-type-decl nil integral nil)
    (integrable_max judgement-tcc nil integral nil)
    (plus const-decl "[T -> nnreal]" real_fun_ops_aux reals)
    (max const-decl "[T -> real]" real_fun_ops_aux reals)
    (integrable_zero formula-decl nil integral nil))
   nil
   (integrable_plus subtype
    "real_fun_ops_aux[integral.T].plus(integral.f)" "integrable")))
 (integrable_minus 0
  (integrable_minus-1 nil 3391224442
   ("" (skosimp)
    (("" (lemma "integrable_min" ("f1" "f!1" "f2" "lambda x: 0"))
      (("1" (expand "min")
        (("1"
          (lemma "integrable_opp"
           ("f" "LAMBDA (x_1: T): min(f!1(x_1), 0)"))
          (("1" (expand "minus")
            (("1" (expand "-" -1) (("1" (propax) nil nil)) nil)) nil)
           ("2" (propax) nil nil))
          nil))
        nil)
       ("2" (rewrite "integrable_TCC1") nil nil))
      nil))
    nil)
   ((integrable nonempty-type-eq-decl nil integral nil)
    (integrable? const-decl "bool" integral nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-type-decl nil integral nil)
    (integrable_min judgement-tcc nil integral nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (integrable_opp judgement-tcc nil integral nil)
    (- const-decl "[T -> real]" real_fun_ops reals)
    (minus const-decl "[T -> nnreal]" real_fun_ops_aux reals)
    (minus_real_is_real application-judgement "real" reals nil)
    (min const-decl "[T -> real]" real_fun_ops_aux reals)
    (integrable_TCC1 subtype-tcc nil integral nil))
   nil
   (integrable_minus subtype
    "real_fun_ops_aux[integral.T].minus(integral.f)" "integrable")))
 (integral_abs 0
  (integral_abs-2 nil 3722186212
   ("" (skosimp)
    (("" (lemma "integral_nonneg" ("f" "abs(f!1)-f!1"))
      (("" (split -1)
        (("1" (rewrite "integral_diff")
          (("1" (lemma "integral_nonneg" ("f" "f!1+abs(f!1)"))
            (("1" (split -1)
              (("1" (rewrite "integral_add")
                (("1" (name-replace "INTF" "integral.integral(f!1)")
                  (("1"
                    (name-replace "INTA" "integral.integral(abs(f!1))")
                    (("1" (grind) nil nil)) nil))
                  nil))
                nil)
               ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil)
         ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((abs const-decl "[T -> nonneg_real]" real_fun_ops reals)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (- const-decl "[T -> real]" real_fun_ops reals)
    (integrable nonempty-type-eq-decl nil integral nil)
    (integrable? const-decl "bool" integral nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-type-decl nil integral nil)
    (integral_nonneg formula-decl nil integral nil)
    (integrable_diff application-judgement "integrable" integral nil)
    (integrable_abs application-judgement "integrable" integral nil)
    (integral_diff formula-decl nil integral nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (integral const-decl "real" integral nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (integral_add formula-decl nil integral nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (+ const-decl "[T -> real]" real_fun_ops reals)
    (integrable_add application-judgement "integrable" integral nil))
   nil))
 (integrable_pm_def 0
  (integrable_pm_def-1 nil 3395577345
   ("" (skosimp)
    (("" (split)
      (("1" (flatten)
        (("1" (assert)
          (("1" (lemma "integrable_plus" ("f" "f0!1"))
            (("1" (lemma "integrable_minus" ("f" "f0!1"))
              (("1" (assert) nil nil)) nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2"
          (lemma "integrable_diff"
           ("f1" "plus(f0!1)" "f2" "minus(f0!1)"))
          (("1" (rewrite "plus_minus_def" -1 :dir rl) nil nil)
           ("2" (propax) nil nil) ("3" (propax) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((integrable_minus judgement-tcc nil integral nil)
    (integrable_plus judgement-tcc nil integral nil)
    (T formal-type-decl nil integral nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (integrable? const-decl "bool" integral nil)
    (integrable nonempty-type-eq-decl nil integral nil)
    (minus const-decl "[T -> nnreal]" real_fun_ops_aux reals)
    (plus const-decl "[T -> nnreal]" real_fun_ops_aux reals)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (integrable_diff judgement-tcc nil integral nil)
    (plus_minus_def formula-decl nil real_fun_ops_aux reals))
   shostak))
 (integral_pm 0
  (integral_pm-1 nil 3391606213
   ("" (skosimp)
    (("" (lemma "integral_diff" ("f1" "plus(f!1)" "f2" "minus(f!1)"))
      (("" (replace -1 1 rl)
        (("" (hide-all-but 1)
          (("" (case-replace "plus(f!1) - minus(f!1)=f!1")
            (("" (hide 2)
              (("" (apply-extensionality :hide? t)
                (("" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((minus const-decl "[T -> nnreal]" real_fun_ops_aux reals)
    (plus const-decl "[T -> nnreal]" real_fun_ops_aux reals)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (integrable nonempty-type-eq-decl nil integral nil)
    (integrable? const-decl "bool" integral nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-type-decl nil integral nil)
    (integral_diff formula-decl nil integral nil)
    (integrable_minus application-judgement "integrable" integral nil)
    (integrable_plus application-judgement "integrable" integral nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (integrable_diff application-judgement "integrable" integral nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (- const-decl "[T -> real]" real_fun_ops reals))
   shostak))
 (integrable_abs_def 0
  (integrable_abs_def-1 nil 3395577514
   ("" (skosimp)
    (("" (split)
      (("1" (flatten)
        (("1" (rewrite "integrable_pm_def" +)
          (("1" (lemma "plus_measurable" ("g" "h!1"))
            (("1" (lemma "minus_measurable" ("g" "h!1"))
              (("1"
                (case-replace "abs(h!1)=plus[T](h!1)+minus[T](h!1)")
                (("1" (replace -1 -4 rl)
                  (("1"
                    (lemma "nn_integrable_le"
                     ("g" "plus[T](h!1)" "f" "abs(h!1)"))
                    (("1"
                      (lemma "nn_integrable_le"
                       ("g" "minus[T](h!1)" "f" "abs(h!1)"))
                      (("1" (split -1)
                        (("1" (flatten)
                          (("1" (split)
                            (("1" (flatten)
                              (("1"
                                (assert)
                                (("1"
                                  (lemma "nn_integrable_is_integrable")
                                  (("1"
                                    (inst-cp - "plus[T](h!1)")
                                    (("1"
                                      (inst - "minus[T](h!1)")
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but 1)
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (hide-all-but 1) (("2" (grind) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2"
                      (lemma "nn_integrable_is_nn_integrable"
                       ("f" "abs[T](h!1)"))
                      (("1" (split -1)
                        (("1" (propax) nil nil)
                         ("2" (hide-all-but 1) (("2" (grind) nil nil))
                          nil))
                        nil)
                       ("2" (propax) nil nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide-all-but 1)
                  (("2" (apply-extensionality :hide? t)
                    (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten) (("2" (rewrite "integrable_abs") nil nil)) nil))
      nil))
    nil)
   ((integrable_pm_def formula-decl nil integral nil)
    (T formal-type-decl nil integral nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (setof type-eq-decl nil defined_types nil)
    (setofsets type-eq-decl nil sets nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (S formal-const-decl "sigma_algebra" integral nil)
    (measurable_function? const-decl "bool" measure_space_def nil)
    (measurable_function nonempty-type-eq-decl nil measure_space_def
     nil)
    (minus_measurable application-judgement "measurable_function[T, S]"
     integral nil)
    (plus_measurable application-judgement "measurable_function[T, S]"
     integral nil)
    (minus_measurable judgement-tcc nil measure_space nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (h!1 skolem-const-decl "measurable_function[T, S]" integral nil)
    (nn_integrable_is_nn_integrable formula-decl nil integral nil)
    (integrable? const-decl "bool" integral nil)
    (integrable nonempty-type-eq-decl nil integral nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nn_integrable_is_integrable judgement-tcc nil integral nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (m formal-const-decl "measure_type" integral nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     nil)
    (measure? const-decl "bool" generalized_measure_def nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (nn_integrable nonempty-type-eq-decl nil nn_integral nil)
    (nn_integrable? const-decl "bool" nn_integral nil)
    (nn_integrable_le formula-decl nil nn_integral nil)
    (minus const-decl "[T -> nnreal]" real_fun_ops_aux reals)
    (plus const-decl "[T -> nnreal]" real_fun_ops_aux reals)
    (nnreal type-eq-decl nil real_types nil)
    (+ const-decl "[T -> real]" real_fun_ops reals)
    (abs const-decl "[T -> nonneg_real]" real_fun_ops reals)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sum_measurable application-judgement "measurable_function[T, S]"
     integral nil)
    (abs_measurable application-judgement "measurable_function[T, S]"
     integral nil)
    (plus_measurable judgement-tcc nil measure_space nil)
    (integrable_abs judgement-tcc nil integral nil))
   shostak))
 (integrable_nz_finite 0
  (integrable_nz_finite-2 "" 3758904622
   (""
    (case "FORALL (epsilon: posreal, f: nn_integrable):
         measurable_set?({x | f(x) > epsilon}) AND
           mu_fin?({x | f(x) > epsilon})")
    (("1" (skosimp)
      (("1" (inst - "epsilon!1/2" "abs(f!1)")
        (("1" (expand "abs" -1)
          (("1" (flatten)
            (("1" (split)
              (("1" (typepred "f!1")
                (("1" (lemma "measurable_ge" ("f" "abs(f!1)"))
                  (("1" (assert)
                    (("1" (lemma "integrable_abs_def" ("h" "f!1"))
                      (("1" (lemma "integrable_is_measurable")
                        (("1" (inst - "abs(f!1)")
                          (("1" (assert)
                            (("1" (inst - "epsilon!1")
                              (("1"
                                (expand "measurable_set?")
                                (("1"
                                  (expand "abs" -3)
                                  (("1" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2"
                (lemma "m_monotone"
                 ("a" "{x | abs(f!1(x)) >= epsilon!1}" "b"
                  "{x | abs(f!1(x)) > epsilon!1 / 2}"))
                (("1" (split -1)
                  (("1" (expand "x_le")
                    (("1" (expand "mu_fin?") (("1" (assert) nil nil))
                      nil))
                    nil)
                   ("2" (hide-all-but 1)
                    (("2" (expand "subset?")
                      (("2" (expand "member")
                        (("2" (skosimp) (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (propax) nil nil)
                 ("3" (hide-all-but 1)
                  (("3" (lemma "measurable_ge" ("f" "abs(f!1)"))
                    (("3"
                      (lemma "integrable_is_measurable"
                       ("x" "abs(f!1)"))
                      (("3" (assert)
                        (("3" (expand "abs" -2)
                          (("3" (inst - "epsilon!1")
                            (("3" (expand "measurable_set?")
                              (("3" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide 2)
          (("2"
            (lemma "nn_integrable_is_nn_integrable" ("f" "abs(f!1)"))
            (("2" (assert)
              (("2" (hide 2)
                (("2" (expand "abs")
                  (("2" (skosimp) (("2" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (skosimp)
        (("2" (typepred "f!1")
          (("2"
            (case-replace "measurable_set?({x | f!1(x) > epsilon!1})")
            (("1" (expand "nn_integrable?")
              (("1" (skosimp)
                (("1" (typepred "u!1")
                  (("1" (expand "increasing_nn_isf?")
                    (("1"
                      (name "EN"
                            "lambda n: {x | u!1(n)(x) > epsilon!1}")
                      (("1" (hide -1)
                        (("1" (case "forall n: measurable_set?(EN(n))")
                          (("1" (case "forall n: mu_fin?(EN(n))")
                            (("1" (case "increasing?(EN)")
                              (("1"
                                (lemma
                                 "m_increasing_convergence"
                                 ("E" "EN"))
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "convergent?")
                                    (("1"
                                      (skolem - "M")
                                      (("1"
                                        (case "M>=0")
                                        (("1"
                                          (case
                                           "increasing?(isf_integral o u!1)")
                                          (("1"
                                            (case
                                             "forall n: isf_integral(u!1(n)) <= M")
                                            (("1"
                                              (case
                                               "forall n: mu(EN(n))<=M/epsilon!1")
                                              (("1"
                                                (case
                                                 "mu_fin?(IUnion(EN))")
                                                (("1"
                                                  (case-replace
                                                   "{x | f!1(x) > epsilon!1}=IUnion(EN)")
                                                  (("1"
                                                    (apply-extensionality
                                                     1
                                                     :hide?
                                                     t)
                                                    (("1"
                                                      (hide-all-but
                                                       (-12 1 -10))
                                                      (("1"
                                                        (expand
                                                         "IUnion")
                                                        (("1"
                                                          (expand
                                                           "pointwise_convergence?")
                                                          (("1"
                                                            (expand
                                                             "pointwise_increasing?")
                                                            (("1"
                                                              (inst
                                                               -
                                                               "x!1")
                                                              (("1"
                                                                (inst
                                                                 -
                                                                 "x!1")
                                                                (("1"
                                                                  (rewrite
                                                                   "metric_convergence_def")
                                                                  (("1"
                                                                    (expand
                                                                     "metric_converges_to")
                                                                    (("1"
                                                                      (expand
                                                                       "ball")
                                                                      (("1"
                                                                        (expand
                                                                         "member")
                                                                        (("1"
                                                                          (expand
                                                                           "increasing?")
                                                                          (("1"
                                                                            (expand
                                                                             "EN")
                                                                            (("1"
                                                                              (case-replace
                                                                               "f!1(x!1) > epsilon!1")
                                                                              (("1"
                                                                                (inst
                                                                                 -3
                                                                                 "f!1(x!1)-epsilon!1")
                                                                                (("1"
                                                                                  (skosimp)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -3
                                                                                     "n!1")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (inst
                                                                                         +
                                                                                         "n!1")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (skosimp)
                                                                                  (("2"
                                                                                    (inst
                                                                                     -3
                                                                                     "u!1(i!1)(x!1) - epsilon!1")
                                                                                    (("1"
                                                                                      (skosimp)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -
                                                                                         "i!1+n!1")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "abs")
                                                                                          (("1"
                                                                                            (inst
                                                                                             -
                                                                                             "i!1"
                                                                                             "i!1+n!1")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 2)
                                                  (("2"
                                                    (expand
                                                     "x_converges?")
                                                    (("2"
                                                      (expand
                                                       "mu_fin?")
                                                      (("2"
                                                        (replace 1 -5)
                                                        (("2"
                                                          (expand "o ")
                                                          (("2"
                                                            (replace
                                                             -7
                                                             -5)
                                                            (("2"
                                                              (prop)
                                                              (("2"
                                                                (hide
                                                                 2)
                                                                (("2"
                                                                  (lemma
                                                                   "bounded_above_is_convergent"
                                                                   ("u"
                                                                    "LAMBDA (i:nat): m(EN(i))`2"))
                                                                  (("1"
                                                                    (split
                                                                     -1)
                                                                    (("1"
                                                                      (expand
                                                                       "convergent_upto?")
                                                                      (("1"
                                                                        (skosimp)
                                                                        (("1"
                                                                          (expand
                                                                           "converges_upto?")
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (name-replace
                                                                               "DRL1"
                                                                               "LAMBDA (i: nat): m(EN(i))`2")
                                                                              (("1"
                                                                                (hide-all-but
                                                                                 (-1
                                                                                  1))
                                                                                (("1"
                                                                                  (rewrite
                                                                                   "metric_convergence_def")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "metric_converges_to")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "ball")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "convergent?")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "convergence")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "member")
                                                                                            (("1"
                                                                                              (inst
                                                                                               +
                                                                                               "x!1")
                                                                                              (("1"
                                                                                                (skosimp)
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -
                                                                                                   "epsilon!2")
                                                                                                  (("1"
                                                                                                    (skosimp)
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       +
                                                                                                       "n!1")
                                                                                                      (("1"
                                                                                                        (skosimp)
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           -
                                                                                                           "i!1")
                                                                                                          (("1"
                                                                                                            (grind)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide-all-but
                                                                       (-1
                                                                        1))
                                                                      (("2"
                                                                        (expand
                                                                         "mu")
                                                                        (("2"
                                                                          (expand
                                                                           "bounded_above?")
                                                                          (("2"
                                                                            (inst
                                                                             +
                                                                             "M / epsilon!1")
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("3"
                                                                      (hide
                                                                       2
                                                                       -1
                                                                       -2
                                                                       -3)
                                                                      (("3"
                                                                        (expand
                                                                         "increasing?")
                                                                        (("3"
                                                                          (skolem
                                                                           +
                                                                           ("i!1"
                                                                            "j!1"))
                                                                          (("3"
                                                                            (inst
                                                                             -
                                                                             "i!1"
                                                                             "j!1")
                                                                            (("3"
                                                                              (flatten)
                                                                              (("3"
                                                                                (assert)
                                                                                (("3"
                                                                                  (lemma
                                                                                   "m_monotone"
                                                                                   ("a"
                                                                                    "EN(i!1)"
                                                                                    "b"
                                                                                    "EN(j!1)"))
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "x_le")
                                                                                      (("1"
                                                                                        (inst
                                                                                         -
                                                                                         "j!1")
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (inst
                                                                                     -5
                                                                                     "j!1")
                                                                                    nil
                                                                                    nil)
                                                                                   ("3"
                                                                                    (inst
                                                                                     -5
                                                                                     "i!1")
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (skosimp)
                                                                    (("2"
                                                                      (inst
                                                                       -7
                                                                       "i!1")
                                                                      (("2"
                                                                        (expand
                                                                         "measurable_set?")
                                                                        (("2"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (rewrite
                                                   "measurable_IUnion")
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide 2)
                                                (("2"
                                                  (skosimp)
                                                  (("2"
                                                    (inst - "n!1")
                                                    (("2"
                                                      (lemma
                                                       "isf_integral_le"
                                                       ("i1"
                                                        "epsilon!1*phi(EN(n!1))"
                                                        "i2"
                                                        "u!1(n!1)"))
                                                      (("1"
                                                        (split -1)
                                                        (("1"
                                                          (inst
                                                           -7
                                                           "n!1")
                                                          (("1"
                                                            (inst
                                                             -8
                                                             "n!1")
                                                            (("1"
                                                              (lemma
                                                               "isf_phi"
                                                               ("E"
                                                                "EN(n!1)"))
                                                              (("1"
                                                                (lemma
                                                                 "isf_scal"
                                                                 ("c"
                                                                  "epsilon!1"
                                                                  "i"
                                                                  "phi[T, S](EN(n!1))"))
                                                                (("1"
                                                                  (rewrite
                                                                   "isf_integral_scal")
                                                                  (("1"
                                                                    (rewrite
                                                                     "isf_integral_phi")
                                                                    (("1"
                                                                      (lemma
                                                                       "div_mult_pos_le2"
                                                                       ("x"
                                                                        "mu(EN(n!1))"
                                                                        "z"
                                                                        "M"
                                                                        "py"
                                                                        "epsilon!1"))
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (skosimp)
                                                          (("2"
                                                            (expand
                                                             "*")
                                                            (("2"
                                                              (expand
                                                               "phi")
                                                              (("2"
                                                                (expand
                                                                 "EN")
                                                                (("2"
                                                                  (expand
                                                                   "member")
                                                                  (("2"
                                                                    (case-replace
                                                                     "u!1(n!1)(x!1) > epsilon!1")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (typepred
                                                                         "u!1(n!1)")
                                                                        (("2"
                                                                          (expand
                                                                           "nn_isf?")
                                                                          (("2"
                                                                            (inst
                                                                             -
                                                                             "x!1")
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (inst -6 "n!1")
                                                        (("2"
                                                          (inst
                                                           -
                                                           "n!1")
                                                          (("2"
                                                            (rewrite
                                                             "isf_scal")
                                                            (("2"
                                                              (rewrite
                                                               "isf_phi")
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (skosimp)
                                                (("3"
                                                  (inst - "n!1")
                                                  (("3"
                                                    (inst - "n!1")
                                                    (("3"
                                                      (inst - "n!1")
                                                      (("3"
                                                        (expand
                                                         "measurable_set?")
                                                        (("3"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but (1 -1 -10))
                                              (("2"
                                                (skosimp)
                                                (("2"
                                                  (expand "o ")
                                                  (("2"
                                                    (expand
                                                     "increasing?")
                                                    (("2"
                                                      (rewrite
                                                       "metric_convergence_def")
                                                      (("2"
                                                        (expand
                                                         "metric_converges_to")
                                                        (("2"
                                                          (inst
                                                           -
                                                           "isf_integral(u!1(n!1))-M")
                                                          (("1"
                                                            (skosimp)
                                                            (("1"
                                                              (expand
                                                               "ball")
                                                              (("1"
                                                                (expand
                                                                 "member")
                                                                (("1"
                                                                  (inst
                                                                   -
                                                                   "n!1+n!2")
                                                                  (("1"
                                                                    (inst
                                                                     -
                                                                     "n!1"
                                                                     "n!1+n!2")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (expand
                                                                         "abs")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but (1 -6))
                                            (("2"
                                              (expand "o ")
                                              (("2"
                                                (expand
                                                 "pointwise_increasing?")
                                                (("2"
                                                  (expand
                                                   "increasing?")
                                                  (("2"
                                                    (skolem
                                                     +
                                                     ("i!1" "j!1"))
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (lemma
                                                         "isf_integral_le"
                                                         ("i1"
                                                          "u!1(i!1)"
                                                          "i2"
                                                          "u!1(j!1)"))
                                                        (("2"
                                                          (split -1)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (skosimp)
                                                            (("2"
                                                              (inst
                                                               -
                                                               "x!1")
                                                              (("2"
                                                                (inst
                                                                 -
                                                                 "i!1"
                                                                 "j!1")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but (1 -5 -8))
                                          (("2"
                                            (rewrite
                                             "metric_convergence_def")
                                            (("2"
                                              (expand
                                               "metric_converges_to")
                                              (("2"
                                                (expand "o ")
                                                (("2"
                                                  (expand "ball")
                                                  (("2"
                                                    (expand "member")
                                                    (("2"
                                                      (typepred
                                                       "u!1(0)")
                                                      (("2"
                                                        (expand
                                                         "nn_isf?")
                                                        (("2"
                                                          (lemma
                                                           "isf_integral_pos"
                                                           ("i"
                                                            "u!1(0)"))
                                                          (("2"
                                                            (replace
                                                             -3)
                                                            (("2"
                                                              (inst
                                                               -5
                                                               "isf_integral(u!1(0))-M")
                                                              (("1"
                                                                (skosimp)
                                                                (("1"
                                                                  (inst
                                                                   -5
                                                                   "n!1")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (expand
                                                                       "pointwise_increasing?")
                                                                      (("1"
                                                                        (expand
                                                                         "increasing?")
                                                                        (("1"
                                                                          (typepred
                                                                           "u!1(n!1)")
                                                                          (("1"
                                                                            (expand
                                                                             "nn_isf?")
                                                                            (("1"
                                                                              (lemma
                                                                               "isf_integral_pos"
                                                                               ("i"
                                                                                "u!1(n!1)"))
                                                                              (("1"
                                                                                (replace
                                                                                 -3)
                                                                                (("1"
                                                                                  (expand
                                                                                   "abs")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (lemma
                                                                                       "isf_integral_le"
                                                                                       ("i1"
                                                                                        "u!1(0)"
                                                                                        "i2"
                                                                                        "u!1(n!1)"))
                                                                                      (("1"
                                                                                        (split
                                                                                         -1)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil)
                                                                                         ("2"
                                                                                          (skosimp)
                                                                                          (("2"
                                                                                            (inst
                                                                                             -7
                                                                                             "x!1")
                                                                                            (("2"
                                                                                              (inst
                                                                                               -7
                                                                                               "0"
                                                                                               "n!1")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide-all-but (-3 1))
                                (("2"
                                  (expand "pointwise_increasing?")
                                  (("2"
                                    (expand "increasing?")
                                    (("2"
                                      (skolem + ("i!1" "j!1"))
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (expand "subset?")
                                          (("2"
                                            (expand "EN")
                                            (("2"
                                              (expand "member")
                                              (("2"
                                                (skosimp)
                                                (("2"
                                                  (inst - "x!1")
                                                  (("2"
                                                    (inst
                                                     -
                                                     "i!1"
                                                     "j!1")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but (-1 1))
                              (("2"
                                (skosimp)
                                (("2"
                                  (inst - "n!1")
                                  (("2"
                                    (lemma
                                     "m_monotone"
                                     ("a"
                                      "EN(n!1)"
                                      "b"
                                      "nonzero_set?(u!1(n!1))"))
                                    (("1"
                                      (split -1)
                                      (("1"
                                        (typepred "u!1(n!1)")
                                        (("1"
                                          (expand "isf?")
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (expand "x_le")
                                              (("1"
                                                (expand "mu_fin?")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but 1)
                                        (("2"
                                          (expand "nonzero_set?")
                                          (("2"
                                            (expand "EN")
                                            (("2"
                                              (expand "subset?")
                                              (("2"
                                                (expand "member")
                                                (("2"
                                                  (skosimp)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (rewrite "nonzero_measurable")
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (propax) nil nil))
                            nil)
                           ("2" (skosimp)
                            (("2" (hide-all-but 1)
                              (("2"
                                (expand "EN")
                                (("2"
                                  (expand "measurable_set?")
                                  (("2"
                                    (typepred "u!1(n!1)")
                                    (("2"
                                      (expand "isf?")
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (expand "simple?")
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (rewrite "measurable_gt")
                                              (("2"
                                                (inst - "epsilon!1")
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (lemma "nn_integrable_is_measurable")
                (("2" (inst - "f!1")
                  (("2" (rewrite "measurable_gt")
                    (("2" (inst - "epsilon!1")
                      (("2" (expand "measurable_set?")
                        (("2" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nn_integrable_is_measurable judgement-tcc nil nn_integral nil)
    (increasing_nn_isf nonempty-type-eq-decl nil nn_integral nil)
    (increasing_nn_isf? const-decl "bool" nn_integral nil)
    (sequence type-eq-decl nil sequences nil)
    (nn_isf nonempty-type-eq-decl nil nn_integral nil)
    (nn_isf? const-decl "bool" nn_integral nil)
    (isf nonempty-type-eq-decl nil isf nil)
    (isf? const-decl "bool" isf nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nonzero_measurable formula-decl nil isf nil)
    (nonzero_set? const-decl "set[T]" isf nil)
    (total_order_restrict application-judgement "(total_order?[S])"
     restrict_order_props nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (restrict const-decl "R" restrict nil)
    (<= const-decl "bool" reals nil)
    (increasing? const-decl "bool" fun_preds_partial structures)
    (isf_integral_pos formula-decl nil isf nil)
    (increasing? const-decl "bool" real_fun_preds reals)
    (O const-decl "T3" function_props nil)
    (isf_integral const-decl "real" isf nil)
    (n!1 skolem-const-decl "nat" integral nil)
    (M skolem-const-decl "real" integral nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (mu const-decl "nnreal" measure_props nil)
    (measurable_IUnion judgement-tcc nil measure_space_def nil)
    (bounded_above_is_convergent formula-decl nil convergence_aux
     metric_space)
    (bounded_above? const-decl "bool" real_fun_preds reals)
    (convergent_upto? const-decl "bool" convergence_aux metric_space)
    (converges_upto? const-decl "bool" convergence_aux metric_space)
    (convergence const-decl "bool" convergence_sequences analysis)
    (convergent? const-decl "bool" convergence_sequences analysis)
    (x_converges? const-decl "bool" extended_nnreal extended_nnreal)
    (pointwise_convergence? const-decl "bool" pointwise_convergence
     nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (metric_convergence_def formula-decl nil metric_space metric_space)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (ball const-decl "set[T]" metric_space_def metric_space)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (epsilon!1 skolem-const-decl "posreal" integral nil)
    (x!1 skolem-const-decl "T" integral nil)
    (f!1 skolem-const-decl "nn_integrable" integral nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (i!1 skolem-const-decl "nat" integral nil)
    (u!1 skolem-const-decl "increasing_nn_isf[T, S, m]" integral nil)
    (EN skolem-const-decl "[nat -> [T -> bool]]" integral nil)
    (metric_converges_to const-decl "bool" metric_space_def
     metric_space)
    (pointwise_increasing? const-decl "bool" pointwise_convergence nil)
    (IUnion const-decl "set[T]" indexed_sets nil)
    (isf_integral_le formula-decl nil isf nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (phi const-decl "nat" measure_space nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (isf_phi judgement-tcc nil isf nil)
    (isf_integral_scal formula-decl nil isf nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (isf_integral_phi formula-decl nil isf nil)
    (isf_scal judgement-tcc nil isf nil)
    (convergent? const-decl "bool" topological_convergence topology)
    (m_increasing_convergence formula-decl nil measure_props nil)
    (simple? const-decl "bool" measure_space nil)
    (measurable_gt formula-decl nil measure_space_def nil)
    (nn_integrable_is_nn_integrable formula-decl nil integral nil)
    (measurable_ge formula-decl nil measure_space_def nil)
    (integrable_abs_def formula-decl nil integral nil)
    (measurable_function? const-decl "bool" measure_space_def nil)
    (measurable_function nonempty-type-eq-decl nil measure_space_def
     nil)
    (integrable_is_measurable judgement-tcc nil integral nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (x_le const-decl "bool" extended_nnreal extended_nnreal)
    (subset? const-decl "bool" sets nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (member const-decl "bool" sets nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (m_monotone formula-decl nil measure_props nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (f!1 skolem-const-decl "integrable" integral nil)
    (integrable nonempty-type-eq-decl nil integral nil)
    (integrable? const-decl "bool" integral nil)
    (abs const-decl "[T -> nonneg_real]" real_fun_ops reals)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (integrable_abs application-judgement "integrable" integral nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (T formal-type-decl nil integral nil)
    (nnreal type-eq-decl nil real_types nil)
    (setof type-eq-decl nil defined_types nil)
    (setofsets type-eq-decl nil sets nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (S formal-const-decl "sigma_algebra" integral nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (measure? const-decl "bool" generalized_measure_def nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     nil)
    (m formal-const-decl "measure_type" integral nil)
    (nn_integrable? const-decl "bool" nn_integral nil)
    (nn_integrable nonempty-type-eq-decl nil nn_integral nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (measurable_set? const-decl "bool" measure_space_def nil)
    (measurable_set nonempty-type-eq-decl nil measure_space_def nil)
    (mu_fin? const-decl "bool" measure_props nil))
   shostak)
  (integrable_nz_finite-1 nil 3410216774
   (""
    (case "FORALL (epsilon: posreal, f: nn_integrable):
         measurable_set?({x | f(x) > epsilon}) AND
           mu_fin?({x | f(x) > epsilon})")
    (("1" (skosimp)
      (("1" (inst - "epsilon!1/2" "abs(f!1)")
        (("1" (expand "abs" -1)
          (("1" (flatten)
            (("1" (split)
              (("1" (typepred "f!1")
                (("1" (lemma "measurable_ge" ("f" "abs(f!1)"))
                  (("1" (assert)
                    (("1" (lemma "integrable_abs_def" ("h" "f!1"))
                      (("1" (lemma "integrable_is_measurable")
                        (("1" (inst - "abs(f!1)")
                          (("1" (assert)
                            (("1" (inst - "epsilon!1")
                              (("1"
                                (expand "measurable_set?")
                                (("1"
                                  (expand "abs" -3)
                                  (("1" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2"
                (lemma "m_monotone"
                 ("a" "{x | abs(f!1(x)) >= epsilon!1}" "b"
                  "{x | abs(f!1(x)) > epsilon!1 / 2}"))
                (("1" (split -1)
                  (("1" (expand "x_le")
                    (("1" (expand "mu_fin?") (("1" (assert) nil nil))
                      nil))
                    nil)
                   ("2" (hide-all-but 1)
                    (("2" (expand "subset?")
                      (("2" (expand "member")
                        (("2" (skosimp) (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (propax) nil nil)
                 ("3" (hide-all-but 1)
                  (("3" (lemma "measurable_ge" ("f" "abs(f!1)"))
                    (("3"
                      (lemma "integrable_is_measurable"
                       ("x" "abs(f!1)"))
                      (("3" (assert)
                        (("3" (expand "abs" -2)
                          (("3" (inst - "epsilon!1")
                            (("3" (expand "measurable_set?")
                              (("3" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide 2)
          (("2"
            (lemma "nn_integrable_is_nn_integrable" ("f" "abs(f!1)"))
            (("2" (assert)
              (("2" (hide 2)
                (("2" (expand "abs")
                  (("2" (skosimp) (("2" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (skosimp)
        (("2" (typepred "f!1")
          (("2"
            (case-replace "measurable_set?({x | f!1(x) > epsilon!1})")
            (("1" (expand "nn_integrable?")
              (("1" (skosimp)
                (("1" (typepred "u!1")
                  (("1" (expand "increasing_nn_isf?")
                    (("1"
                      (name "EN"
                            "lambda n: {x | u!1(n)(x) > epsilon!1}")
                      (("1" (hide -1)
                        (("1" (case "forall n: measurable_set?(EN(n))")
                          (("1" (case "forall n: mu_fin?(EN(n))")
                            (("1" (case "increasing?(EN)")
                              (("1"
                                (lemma
                                 "m_increasing_convergence"
                                 ("E" "EN"))
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "convergent?")
                                    (("1"
                                      (skolem - "M")
                                      (("1"
                                        (case "M>=0")
                                        (("1"
                                          (case
                                           "increasing?(isf_integral o u!1)")
                                          (("1"
                                            (case
                                             "forall n: isf_integral(u!1(n)) <= M")
                                            (("1"
                                              (case
                                               "forall n: mu(EN(n))<=M/epsilon!1")
                                              (("1"
                                                (case
                                                 "mu_fin?(IUnion(EN))")
                                                (("1"
                                                  (case-replace
                                                   "{x | f!1(x) > epsilon!1}=IUnion(EN)")
                                                  (("1"
                                                    (apply-extensionality
                                                     1
                                                     :hide?
                                                     t)
                                                    (("1"
                                                      (hide-all-but
                                                       (-12 1 -10))
                                                      (("1"
                                                        (expand
                                                         "IUnion")
                                                        (("1"
                                                          (expand
                                                           "pointwise_convergence?")
                                                          (("1"
                                                            (expand
                                                             "pointwise_increasing?")
                                                            (("1"
                                                              (inst
                                                               -
                                                               "x!1")
                                                              (("1"
                                                                (inst
                                                                 -
                                                                 "x!1")
                                                                (("1"
                                                                  (rewrite
                                                                   "metric_convergence_def")
                                                                  (("1"
                                                                    (expand
                                                                     "metric_converges_to")
                                                                    (("1"
                                                                      (expand
                                                                       "ball")
                                                                      (("1"
                                                                        (expand
                                                                         "member")
                                                                        (("1"
                                                                          (expand
                                                                           "increasing?")
                                                                          (("1"
                                                                            (expand
                                                                             "EN")
                                                                            (("1"
                                                                              (case-replace
                                                                               "f!1(x!1) > epsilon!1")
                                                                              (("1"
                                                                                (inst
                                                                                 -3
                                                                                 "f!1(x!1)-epsilon!1")
                                                                                (("1"
                                                                                  (skosimp)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -3
                                                                                     "n!1")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (inst
                                                                                         +
                                                                                         "n!1")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (skosimp)
                                                                                  (("2"
                                                                                    (inst
                                                                                     -3
                                                                                     "u!1(i!1)(x!1) - epsilon!1")
                                                                                    (("1"
                                                                                      (skosimp)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -
                                                                                         "i!1+n!1")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "abs")
                                                                                          (("1"
                                                                                            (inst
                                                                                             -
                                                                                             "i!1"
                                                                                             "i!1+n!1")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 2)
                                                  (("2"
                                                    (expand
                                                     "x_converges?")
                                                    (("2"
                                                      (expand
                                                       "mu_fin?")
                                                      (("2"
                                                        (replace 1 -5)
                                                        (("2"
                                                          (expand "o ")
                                                          (("2"
                                                            (replace
                                                             -7
                                                             -5)
                                                            (("2"
                                                              (prop)
                                                              (("2"
                                                                (hide
                                                                 2)
                                                                (("2"
                                                                  (lemma
                                                                   "bounded_above_is_convergent"
                                                                   ("u"
                                                                    "LAMBDA (i:nat): m(EN(i))`2"))
                                                                  (("1"
                                                                    (split
                                                                     -1)
                                                                    (("1"
                                                                      (expand
                                                                       "convergent_upto?")
                                                                      (("1"
                                                                        (skosimp)
                                                                        (("1"
                                                                          (expand
                                                                           "converges_upto?")
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (name-replace
                                                                               "DRL1"
                                                                               "LAMBDA (i: nat): m(EN(i))`2")
                                                                              (("1"
                                                                                (hide-all-but
                                                                                 (-1
                                                                                  1))
                                                                                (("1"
                                                                                  (rewrite
                                                                                   "metric_convergence_def")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "metric_converges_to")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "ball")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "convergent?")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "convergence")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "member")
                                                                                            (("1"
                                                                                              (inst
                                                                                               +
                                                                                               "x!1")
                                                                                              (("1"
                                                                                                (skosimp)
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -
                                                                                                   "epsilon!2")
                                                                                                  (("1"
                                                                                                    (skosimp)
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       +
                                                                                                       "n!1")
                                                                                                      (("1"
                                                                                                        (skosimp)
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           -
                                                                                                           "i!1")
                                                                                                          (("1"
                                                                                                            (grind)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide-all-but
                                                                       (-1
                                                                        1))
                                                                      (("2"
                                                                        (expand
                                                                         "mu")
                                                                        (("2"
                                                                          (expand
                                                                           "bounded_above?")
                                                                          (("2"
                                                                            (inst
                                                                             +
                                                                             "M / epsilon!1")
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("3"
                                                                      (hide
                                                                       2
                                                                       -1
                                                                       -2
                                                                       -3)
                                                                      (("3"
                                                                        (expand
                                                                         "increasing?")
                                                                        (("3"
                                                                          (skolem
                                                                           +
                                                                           ("i!1"
                                                                            "j!1"))
                                                                          (("3"
                                                                            (inst
                                                                             -
                                                                             "i!1"
                                                                             "j!1")
                                                                            (("3"
                                                                              (flatten)
                                                                              (("3"
                                                                                (assert)
                                                                                (("3"
                                                                                  (lemma
                                                                                   "m_monotone"
                                                                                   ("a"
                                                                                    "EN(i!1)"
                                                                                    "b"
                                                                                    "EN(j!1)"))
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "x_le")
                                                                                      (("1"
                                                                                        (inst
                                                                                         -
                                                                                         "j!1")
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (inst
                                                                                     -5
                                                                                     "j!1")
                                                                                    nil
                                                                                    nil)
                                                                                   ("3"
                                                                                    (inst
                                                                                     -5
                                                                                     "i!1")
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (skosimp)
                                                                    (("2"
                                                                      (inst
                                                                       -7
                                                                       "i!1")
                                                                      (("2"
                                                                        (expand
                                                                         "measurable_set?")
                                                                        (("2"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (rewrite
                                                   "measurable_IUnion")
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide 2)
                                                (("2"
                                                  (skosimp)
                                                  (("2"
                                                    (inst - "n!1")
                                                    (("2"
                                                      (lemma
                                                       "isf_integral_le"
                                                       ("i1"
                                                        "epsilon!1*phi(EN(n!1))"
                                                        "i2"
                                                        "u!1(n!1)"))
                                                      (("1"
                                                        (split -1)
                                                        (("1"
                                                          (inst
                                                           -7
                                                           "n!1")
                                                          (("1"
                                                            (inst
                                                             -8
                                                             "n!1")
                                                            (("1"
                                                              (lemma
                                                               "isf_phi"
                                                               ("E"
                                                                "EN(n!1)"))
                                                              (("1"
                                                                (lemma
                                                                 "isf_scal"
                                                                 ("c"
                                                                  "epsilon!1"
                                                                  "i"
                                                                  "phi[T, S](EN(n!1))"))
                                                                (("1"
                                                                  (rewrite
                                                                   "isf_integral_scal")
                                                                  (("1"
                                                                    (rewrite
                                                                     "isf_integral_phi")
                                                                    (("1"
                                                                      (lemma
                                                                       "div_mult_pos_le2"
                                                                       ("x"
                                                                        "mu(EN(n!1))"
                                                                        "z"
                                                                        "M"
                                                                        "py"
                                                                        "epsilon!1"))
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (skosimp)
                                                          (("2"
                                                            (expand
                                                             "*")
                                                            (("2"
                                                              (expand
                                                               "phi")
                                                              (("2"
                                                                (expand
                                                                 "EN")
                                                                (("2"
                                                                  (expand
                                                                   "member")
                                                                  (("2"
                                                                    (case-replace
                                                                     "u!1(n!1)(x!1) > epsilon!1")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (typepred
                                                                         "u!1(n!1)")
                                                                        (("2"
                                                                          (expand
                                                                           "nn_isf?")
                                                                          (("2"
                                                                            (inst
                                                                             -
                                                                             "x!1")
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (inst -6 "n!1")
                                                        (("2"
                                                          (inst
                                                           -
                                                           "n!1")
                                                          (("2"
                                                            (rewrite
                                                             "isf_scal")
                                                            (("2"
                                                              (rewrite
                                                               "isf_phi")
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (skosimp)
                                                (("3"
                                                  (inst - "n!1")
                                                  (("3"
                                                    (inst - "n!1")
                                                    (("3"
                                                      (inst - "n!1")
                                                      (("3"
                                                        (expand
                                                         "measurable_set?")
                                                        (("3"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but (1 -1 -10))
                                              (("2"
                                                (skosimp)
                                                (("2"
                                                  (expand "o ")
                                                  (("2"
                                                    (expand
                                                     "increasing?")
                                                    (("2"
                                                      (rewrite
                                                       "metric_convergence_def")
                                                      (("2"
                                                        (expand
                                                         "metric_converges_to")
                                                        (("2"
                                                          (inst
                                                           -
                                                           "isf_integral(u!1(n!1))-M")
                                                          (("1"
                                                            (skosimp)
                                                            (("1"
                                                              (expand
                                                               "ball")
                                                              (("1"
                                                                (expand
                                                                 "member")
                                                                (("1"
                                                                  (inst
                                                                   -
                                                                   "n!1+n!2")
                                                                  (("1"
                                                                    (inst
                                                                     -
                                                                     "n!1"
                                                                     "n!1+n!2")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (expand
                                                                         "abs")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but (1 -6))
                                            (("2"
                                              (expand "o ")
                                              (("2"
                                                (expand
                                                 "pointwise_increasing?")
                                                (("2"
                                                  (expand
                                                   "increasing?")
                                                  (("2"
                                                    (skolem
                                                     +
                                                     ("i!1" "j!1"))
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (lemma
                                                         "isf_integral_le"
                                                         ("i1"
                                                          "u!1(i!1)"
                                                          "i2"
                                                          "u!1(j!1)"))
                                                        (("2"
                                                          (split -1)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (skosimp)
                                                            (("2"
                                                              (inst
                                                               -
                                                               "x!1")
                                                              (("2"
                                                                (inst
                                                                 -
                                                                 "i!1"
                                                                 "j!1")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but (1 -5 -8))
                                          (("2"
                                            (rewrite
                                             "metric_convergence_def")
                                            (("2"
                                              (expand
                                               "metric_converges_to")
                                              (("2"
                                                (expand "o ")
                                                (("2"
                                                  (expand "ball")
                                                  (("2"
                                                    (expand "member")
                                                    (("2"
                                                      (typepred
                                                       "u!1(0)")
                                                      (("2"
                                                        (expand
                                                         "nn_isf?")
                                                        (("2"
                                                          (lemma
                                                           "isf_integral_pos"
                                                           ("i"
                                                            "u!1(0)"))
                                                          (("2"
                                                            (replace
                                                             -3)
                                                            (("2"
                                                              (inst
                                                               -5
                                                               "isf_integral(u!1(0))-M")
                                                              (("1"
                                                                (skosimp)
                                                                (("1"
                                                                  (inst
                                                                   -5
                                                                   "n!1")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (expand
                                                                       "pointwise_increasing?")
                                                                      (("1"
                                                                        (expand
                                                                         "increasing?")
                                                                        (("1"
                                                                          (typepred
                                                                           "u!1(n!1)")
                                                                          (("1"
                                                                            (expand
                                                                             "nn_isf?")
                                                                            (("1"
                                                                              (lemma
                                                                               "isf_integral_pos"
                                                                               ("i"
                                                                                "u!1(n!1)"))
                                                                              (("1"
                                                                                (replace
                                                                                 -3)
                                                                                (("1"
                                                                                  (expand
                                                                                   "abs")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (lemma
                                                                                       "isf_integral_le"
                                                                                       ("i1"
                                                                                        "u!1(0)"
                                                                                        "i2"
                                                                                        "u!1(n!1)"))
                                                                                      (("1"
                                                                                        (split
                                                                                         -1)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil)
                                                                                         ("2"
                                                                                          (skosimp)
                                                                                          (("2"
                                                                                            (inst
                                                                                             -7
                                                                                             "x!1")
                                                                                            (("2"
                                                                                              (inst
                                                                                               -7
                                                                                               "0"
                                                                                               "n!1")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide-all-but (-3 1))
                                (("2"
                                  (expand "pointwise_increasing?")
                                  (("2"
                                    (expand "increasing?")
                                    (("2"
                                      (skolem + ("i!1" "j!1"))
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (expand "subset?")
                                          (("2"
                                            (expand "EN")
                                            (("2"
                                              (expand "member")
                                              (("2"
                                                (skosimp)
                                                (("2"
                                                  (inst - "x!1")
                                                  (("2"
                                                    (inst
                                                     -
                                                     "i!1"
                                                     "j!1")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but (-1 1))
                              (("2"
                                (skosimp)
                                (("2"
                                  (inst - "n!1")
                                  (("2"
                                    (lemma
                                     "m_monotone"
                                     ("a"
                                      "EN(n!1)"
                                      "b"
                                      "nonzero_set?(u!1(n!1))"))
                                    (("1"
                                      (split -1)
                                      (("1"
                                        (typepred "u!1(n!1)")
                                        (("1"
                                          (expand "isf?")
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (expand "x_le")
                                              (("1"
                                                (expand "mu_fin?")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but 1)
                                        (("2"
                                          (expand "nonzero_set?")
                                          (("2"
                                            (expand "EN")
                                            (("2"
                                              (expand "subset?")
                                              (("2"
                                                (expand "member")
                                                (("2"
                                                  (skosimp)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (rewrite "nonzero_measurable")
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (propax) nil nil))
                            nil)
                           ("2" (skosimp)
                            (("2" (hide-all-but 1)
                              (("2"
                                (expand "EN")
                                (("2"
                                  (expand "measurable_set?")
                                  (("2"
                                    (typepred "u!1(n!1)")
                                    (("2"
                                      (lemma
                                       "isf_is_simple"
                                       ("x" "u!1(n!1)"))
                                      (("2"
                                        (expand "simple?")
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (rewrite "measurable_gt")
                                            (("2"
                                              (inst - "epsilon!1")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (lemma "nn_integrable_is_measurable")
                (("2" (inst - "f!1")
                  (("2" (rewrite "measurable_gt")
                    (("2" (inst - "epsilon!1")
                      (("2" (expand "measurable_set?")
                        (("2" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((mu_fin? const-decl "bool" measure_props nil)
    (measurable_set nonempty-type-eq-decl nil measure_space_def nil)
    (measurable_set? const-decl "bool" measure_space_def nil)
    (set type-eq-decl nil sets nil)
    (nn_integrable nonempty-type-eq-decl nil nn_integral nil)
    (nn_integrable? const-decl "bool" nn_integral nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     nil)
    (measure? const-decl "bool" generalized_measure_def nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (setofsets type-eq-decl nil sets nil)
    (abs const-decl "[T -> nonneg_real]" real_fun_ops reals)
    (m_monotone formula-decl nil measure_props nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (x_le const-decl "bool" extended_nnreal extended_nnreal)
    (measurable_function nonempty-type-eq-decl nil measure_space_def
     nil)
    (measurable_function? const-decl "bool" measure_space_def nil)
    (measurable_ge formula-decl nil measure_space_def nil)
    (simple? const-decl "bool" measure_space nil)
    (measurable_gt formula-decl nil measure_space_def nil)
    (m_increasing_convergence formula-decl nil measure_props nil)
    (convergent? const-decl "bool" topological_convergence topology)
    (isf_scal judgement-tcc nil isf nil)
    (isf_integral_phi formula-decl nil isf nil)
    (isf_integral_scal formula-decl nil isf nil)
    (isf_phi judgement-tcc nil isf nil)
    (phi const-decl "nat" measure_space nil)
    (isf_integral_le formula-decl nil isf nil)
    (pointwise_increasing? const-decl "bool" pointwise_convergence nil)
    (metric_converges_to const-decl "bool" metric_space_def
     metric_space)
    (ball const-decl "set[T]" metric_space_def metric_space)
    (metric_convergence_def formula-decl nil metric_space metric_space)
    (pointwise_convergence? const-decl "bool" pointwise_convergence
     nil)
    (x_converges? const-decl "bool" extended_nnreal extended_nnreal)
    (metric_zero? const-decl "bool" metric_def metric_space)
    (metric_symmetric? const-decl "bool" metric_def metric_space)
    (metric_triangle? const-decl "bool" metric_def metric_space)
    (convergent? const-decl "bool" convergence_sequences analysis)
    (metric_induced_topology_is_second_countable name-judgement
     "second_countable" real_topology metric_space)
    (convergence const-decl "bool" convergence_sequences analysis)
    (metric? const-decl "bool" metric_def metric_space)
    (converges_upto? const-decl "bool" convergence_aux metric_space)
    (convergent_upto? const-decl "bool" convergence_aux metric_space)
    (bounded_above? const-decl "bool" real_fun_preds reals)
    (bounded_above_is_convergent formula-decl nil convergence_aux
     metric_space)
    (measurable_IUnion judgement-tcc nil measure_space_def nil)
    (mu const-decl "nnreal" measure_props nil)
    (isf_integral const-decl "real" isf nil)
    (increasing? const-decl "bool" real_fun_preds reals)
    (isf_integral_pos formula-decl nil isf nil)
    (increasing? const-decl "bool" fun_preds_partial structures)
    (nonzero_set? const-decl "set[T]" isf nil)
    (nonzero_measurable formula-decl nil isf nil)
    (isf? const-decl "bool" isf nil)
    (isf nonempty-type-eq-decl nil isf nil)
    (nn_isf? const-decl "bool" nn_integral nil)
    (nn_isf nonempty-type-eq-decl nil nn_integral nil)
    (sequence type-eq-decl nil sequences nil)
    (increasing_nn_isf? const-decl "bool" nn_integral nil)
    (increasing_nn_isf nonempty-type-eq-decl nil nn_integral nil)
    (nn_integrable_is_measurable judgement-tcc nil nn_integral nil))
   shostak))
 (isf_integral 0
  (isf_integral-1 nil 3391607536
   ("" (skosimp)
    (("" (rewrite "integral_pm")
      (("" (lemma "integrable_pm_def" ("f0" "i!1"))
        (("" (assert)
          (("" (rewrite "isf_is_integrable")
            (("" (flatten)
              (("" (rewrite "integral_nn")
                (("1" (rewrite "integral_nn")
                  (("1" (rewrite "nn_integral_isf")
                    (("1" (rewrite "nn_integral_isf")
                      (("1"
                        (lemma "isf_integral_diff"
                         ("i1" "plus(i!1)" "i2" "minus(i!1)"))
                        (("1" (rewrite "plus_minus_def" -1 :dir rl)
                          (("1" (assert) nil nil)) nil))
                        nil)
                       ("2" (expand "nn_isf?")
                        (("2" (hide-all-but 1) (("2" (grind) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "nn_isf?")
                      (("2" (hide-all-but 1) (("2" (grind) nil nil))
                        nil))
                      nil))
                    nil)
                   ("2"
                    (lemma "nn_integrable_is_nn_integrable"
                     ("f" "minus[T](i!1)"))
                    (("2" (split -1)
                      (("1" (propax) nil nil)
                       ("2" (hide-all-but 1) (("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2"
                  (lemma "nn_integrable_is_nn_integrable"
                   ("f" "plus[T](i!1)"))
                  (("2" (split -1)
                    (("1" (propax) nil nil)
                     ("2" (hide-all-but 1) (("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((integral_pm formula-decl nil integral nil)
    (T formal-type-decl nil integral nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (integrable? const-decl "bool" integral nil)
    (integrable nonempty-type-eq-decl nil integral nil)
    (setof type-eq-decl nil defined_types nil)
    (setofsets type-eq-decl nil sets nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (S formal-const-decl "sigma_algebra" integral nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (measure? const-decl "bool" generalized_measure_def nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     nil)
    (m formal-const-decl "measure_type" integral nil)
    (isf? const-decl "bool" isf nil)
    (isf nonempty-type-eq-decl nil isf nil)
    (isf_minus application-judgement "isf[T, S, m]" integral nil)
    (isf_plus application-judgement "isf" integral nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (minus const-decl "[T -> nnreal]" real_fun_ops_aux reals)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (plus_minus_def formula-decl nil real_fun_ops_aux reals)
    (isf_integral_diff formula-decl nil isf nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (nn_integral_isf formula-decl nil nn_integral nil)
    (nn_isf? const-decl "bool" nn_integral nil)
    (nn_isf nonempty-type-eq-decl nil nn_integral nil)
    (nn_integrable_is_nn_integrable formula-decl nil integral nil)
    (integral_nn formula-decl nil integral nil)
    (nn_integrable? const-decl "bool" nn_integral nil)
    (nn_integrable nonempty-type-eq-decl nil nn_integral nil)
    (plus const-decl "[T -> nnreal]" real_fun_ops_aux reals)
    (isf_is_integrable judgement-tcc nil integral nil)
    (integrable_pm_def formula-decl nil integral nil))
   shostak))
 (integral_ae_eq 0
  (integral_ae_eq-1 "" 3789904134
   ("" (skosimp)
    (("" (typepred "f!1")
      (("" (name "H" "abs(h!1-f!1)")
        (("" (case "measurable_function?(H)")
          (("1" (case "forall x: 0 <= H(x)")
            (("1" (case "ae_0?(H)")
              (("1" (lemma "nn_measurable_def" ("f" "H"))
                (("1" (replace -3 -1)
                  (("1" (replace -4 -1)
                    (("1" (assert)
                      (("1" (skosimp)
                        (("1" (typepred "w!1")
                          (("1" (case "forall (n:nat): ae_0?(w!1(n))")
                            (("1"
                              (case "forall (n:nat): isf_integral(w!1(n)) = 0")
                              (("1"
                                (case
                                 "pointwise_convergence?(w!1,H) AND convergence?(isf_integral o w!1,0)")
                                (("1"
                                  (flatten)
                                  (("1"
                                    (case "nn_integrable?(H)")
                                    (("1"
                                      (lemma
                                       "integrable_abs_def"
                                       ("h" "h!1 - f!1"))
                                      (("1"
                                        (replace -12)
                                        (("1"
                                          (lemma
                                           "nn_integrable_is_integrable")
                                          (("1"
                                            (inst - "H")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (lemma
                                                 "integrable_add"
                                                 ("f1"
                                                  "h!1 - f!1"
                                                  "f2"
                                                  "f!1"))
                                                (("1"
                                                  (case-replace
                                                   "(+[T])(h!1 - f!1, f!1)=h!1")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (case
                                                       "nn_integral(H)=0")
                                                      (("1"
                                                        (replace
                                                         -16
                                                         -1
                                                         rl)
                                                        (("1"
                                                          (lemma
                                                           "integral_nn"
                                                           ("g"
                                                            "abs(h!1 - f!1)"))
                                                          (("1"
                                                            (replace
                                                             -2)
                                                            (("1"
                                                              (hide -2)
                                                              (("1"
                                                                (lemma
                                                                 "integral_abs"
                                                                 ("f"
                                                                  "h!1-f!1"))
                                                                (("1"
                                                                  (replace
                                                                   -2)
                                                                  (("1"
                                                                    (case-replace
                                                                     "integral.integral(h!1 - f!1)=0")
                                                                    (("1"
                                                                      (rewrite
                                                                       "integral_diff")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (typepred
                                                                       "abs(integral.integral(h!1 - f!1))")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide 2)
                                                        (("2"
                                                          (expand
                                                           "nn_integral")
                                                          (("2"
                                                            (hide
                                                             -1
                                                             -2
                                                             -3
                                                             -4
                                                             -15
                                                             -16
                                                             -17)
                                                            (("2"
                                                              (case
                                                               "nonempty?[increasing_nn_isf[T, S, m]]
                                   ({u: increasing_nn_isf[T, S, m] |
                                       pointwise_convergence?[T](u, H)})")
                                                              (("1"
                                                                (lemma
                                                                 "choose_member"
                                                                 ("a"
                                                                  "{u: increasing_nn_isf[T, S, m] |
                                             pointwise_convergence?(u, H)}"))
                                                                (("1"
                                                                  (split
                                                                   -1)
                                                                  (("1"
                                                                    (name-replace
                                                                     "CU"
                                                                     "choose({u: increasing_nn_isf[T, S, m] |
                                               pointwise_convergence?(u, H)})")
                                                                    (("1"
                                                                      (expand
                                                                       "member")
                                                                      (("1"
                                                                        (hide
                                                                         -2)
                                                                        (("1"
                                                                          (lemma
                                                                           "nn_convergence"
                                                                           ("u1"
                                                                            "w!1"
                                                                            "f"
                                                                            "H"
                                                                            "u2"
                                                                            "CU"))
                                                                          (("1"
                                                                            (replace
                                                                             -2)
                                                                            (("1"
                                                                              (replace
                                                                               -4)
                                                                              (("1"
                                                                                (split
                                                                                 -1)
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -2
                                                                                     1
                                                                                     rl)
                                                                                    (("1"
                                                                                      (rewrite
                                                                                       "limit_def"
                                                                                       1)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide
                                                                                   2)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "convergent?")
                                                                                    (("2"
                                                                                      (inst
                                                                                       +
                                                                                       "0")
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide
                                                                             -1
                                                                             -3
                                                                             -4
                                                                             2
                                                                             -8
                                                                             -9
                                                                             -10)
                                                                            (("2"
                                                                              (split)
                                                                              (("1"
                                                                                (skolem
                                                                                 +
                                                                                 ("n!1"))
                                                                                (("1"
                                                                                  (expand
                                                                                   "nn_isf?")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "isf?")
                                                                                    (("1"
                                                                                      (hide
                                                                                       -1
                                                                                       -2)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -
                                                                                         "n!1")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "increasing_nn_simple?")
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            (("1"
                                                                                              (inst
                                                                                               -
                                                                                               "n!1")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "nn_simple?")
                                                                                                (("1"
                                                                                                  (flatten)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (split)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "ae_0?")
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "pointwise_ae?")
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "ae?")
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "fullset")
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "ae_in?")
                                                                                                                (("1"
                                                                                                                  (skosimp)
                                                                                                                  (("1"
                                                                                                                    (typepred
                                                                                                                     "E!1")
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "negligible_set?")
                                                                                                                      (("1"
                                                                                                                        (skosimp)
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "null_set?")
                                                                                                                          (("1"
                                                                                                                            (flatten)
                                                                                                                            (("1"
                                                                                                                              (lemma
                                                                                                                               "m_monotone"
                                                                                                                               ("a"
                                                                                                                                "nonzero_set?(w!1(n!1))"
                                                                                                                                "b"
                                                                                                                                "X!1"))
                                                                                                                              (("1"
                                                                                                                                (split
                                                                                                                                 -1)
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "mu_fin?")
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "x_le")
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (hide
                                                                                                                                   2
                                                                                                                                   -1
                                                                                                                                   -2
                                                                                                                                   -3
                                                                                                                                   -7
                                                                                                                                   -8
                                                                                                                                   -9)
                                                                                                                                  (("2"
                                                                                                                                    (expand
                                                                                                                                     "nonzero_set?")
                                                                                                                                    (("2"
                                                                                                                                      (expand
                                                                                                                                       "subset?")
                                                                                                                                      (("2"
                                                                                                                                        (expand
                                                                                                                                         "member")
                                                                                                                                        (("2"
                                                                                                                                          (skosimp)
                                                                                                                                          (("2"
                                                                                                                                            (inst
                                                                                                                                             -
                                                                                                                                             "x!1")
                                                                                                                                            (("2"
                                                                                                                                              (inst
                                                                                                                                               -
                                                                                                                                               "x!1")
                                                                                                                                              (("2"
                                                                                                                                                (assert)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (skosimp)
                                                                                                        (("2"
                                                                                                          (inst
                                                                                                           -
                                                                                                           "x!1")
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (expand
                                                                                 "increasing_nn_simple?")
                                                                                (("2"
                                                                                  (expand
                                                                                   "increasing_nn_isf?")
                                                                                  (("2"
                                                                                    (flatten)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (expand
                                                                     "nonempty?")
                                                                    (("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide
                                                                 2)
                                                                (("2"
                                                                  (expand
                                                                   "nonempty?")
                                                                  (("2"
                                                                    (expand
                                                                     "empty?")
                                                                    (("2"
                                                                      (expand
                                                                       "member")
                                                                      (("2"
                                                                        (inst
                                                                         -
                                                                         "w!1")
                                                                        (("2"
                                                                          (split)
                                                                          (("1"
                                                                            (skolem
                                                                             +
                                                                             ("n!1"))
                                                                            (("1"
                                                                              (expand
                                                                               "nn_isf?")
                                                                              (("1"
                                                                                (expand
                                                                                 "isf?")
                                                                                (("1"
                                                                                  (expand
                                                                                   "increasing_nn_simple?")
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -6
                                                                                       "n!1")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "nn_simple?")
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (split)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -5
                                                                                                 "n!1")
                                                                                                (("1"
                                                                                                  (hide
                                                                                                   -1
                                                                                                   -2
                                                                                                   -3
                                                                                                   -4)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "ae_0?"
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "pointwise_ae?")
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "ae?")
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "fullset")
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "ae_in?")
                                                                                                            (("1"
                                                                                                              (skosimp)
                                                                                                              (("1"
                                                                                                                (typepred
                                                                                                                 "E!1")
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "negligible_set?")
                                                                                                                  (("1"
                                                                                                                    (skosimp)
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "null_set?")
                                                                                                                      (("1"
                                                                                                                        (flatten)
                                                                                                                        (("1"
                                                                                                                          (lemma
                                                                                                                           "m_monotone"
                                                                                                                           ("a"
                                                                                                                            "nonzero_set?(w!1(n!1))"
                                                                                                                            "b"
                                                                                                                            "X!1"))
                                                                                                                          (("1"
                                                                                                                            (split
                                                                                                                             -1)
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "x_le")
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "mu_fin?")
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (hide
                                                                                                                               -1
                                                                                                                               -2
                                                                                                                               -3
                                                                                                                               -10
                                                                                                                               2)
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 "nonzero_set?")
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "subset?")
                                                                                                                                  (("2"
                                                                                                                                    (expand
                                                                                                                                     "member")
                                                                                                                                    (("2"
                                                                                                                                      (skosimp)
                                                                                                                                      (("2"
                                                                                                                                        (inst
                                                                                                                                         -
                                                                                                                                         "x!1")
                                                                                                                                        (("2"
                                                                                                                                          (inst
                                                                                                                                           -
                                                                                                                                           "x!1")
                                                                                                                                          (("2"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (skosimp)
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -6
                                                                                                   "x!1")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (expand
                                                                             "increasing_nn_isf?")
                                                                            (("2"
                                                                              (expand
                                                                               "pointwise_converges_upto?")
                                                                              (("2"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but 1)
                                                    (("2"
                                                      (grind)
                                                      (("2"
                                                        (apply-extensionality
                                                         :hide?
                                                         t)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "nn_integrable?")
                                      (("2"
                                        (inst + "w!1")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "convergent?")
                                            (("1"
                                              (inst + "0")
                                              nil
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "increasing_nn_isf?")
                                          (("2"
                                            (expand "nn_isf?")
                                            (("2"
                                              (expand
                                               "increasing_nn_simple?")
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (hide-all-but
                                                     (-4 -5 1))
                                                    (("2"
                                                      (skolem
                                                       +
                                                       ("n!1"))
                                                      (("2"
                                                        (expand "isf?")
                                                        (("2"
                                                          (inst
                                                           -
                                                           "n!1")
                                                          (("2"
                                                            (inst
                                                             -
                                                             "n!1")
                                                            (("2"
                                                              (expand
                                                               "nn_simple?")
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (split)
                                                                    (("1"
                                                                      (hide
                                                                       -3)
                                                                      (("1"
                                                                        (expand
                                                                         "ae_0?")
                                                                        (("1"
                                                                          (expand
                                                                           "pointwise_ae?")
                                                                          (("1"
                                                                            (expand
                                                                             "nonzero_set?")
                                                                            (("1"
                                                                              (expand
                                                                               "ae?")
                                                                              (("1"
                                                                                (expand
                                                                                 "fullset")
                                                                                (("1"
                                                                                  (expand
                                                                                   "ae_in?")
                                                                                  (("1"
                                                                                    (skosimp)
                                                                                    (("1"
                                                                                      (typepred
                                                                                       "E!1")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "negligible_set?")
                                                                                        (("1"
                                                                                          (skosimp)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "null_set?")
                                                                                            (("1"
                                                                                              (flatten)
                                                                                              (("1"
                                                                                                (lemma
                                                                                                 "m_monotone"
                                                                                                 ("a"
                                                                                                  "nonzero_set?(w!1(n!1))"
                                                                                                  "b"
                                                                                                  "X!1"))
                                                                                                (("1"
                                                                                                  (split
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "x_le")
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "mu_fin?")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "nonzero_set?")
                                                                                                          (("1"
                                                                                                            (propax)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (hide
                                                                                                     -1
                                                                                                     -2
                                                                                                     -3
                                                                                                     2)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "nonzero_set?")
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "subset?")
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "member")
                                                                                                          (("2"
                                                                                                            (skosimp)
                                                                                                            (("2"
                                                                                                              (inst
                                                                                                               -
                                                                                                               "x!1")
                                                                                                              (("2"
                                                                                                                (inst
                                                                                                                 -
                                                                                                                 "x!1")
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (typepred
                                                                                                   "w!1(n!1)")
                                                                                                  (("2"
                                                                                                    (rewrite
                                                                                                     "nonzero_measurable")
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (skosimp)
                                                                      (("2"
                                                                        (inst
                                                                         -
                                                                         "x!1")
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide 2)
                                  (("2"
                                    (expand
                                     "pointwise_converges_upto?")
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (case-replace
                                           "isf_integral o w!1 = lambda (n:nat): 0")
                                          (("1"
                                            (expand "convergence?")
                                            (("1"
                                              (skosimp)
                                              (("1"
                                                (inst + "0")
                                                (("1"
                                                  (skosimp)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but (-1 1))
                                            (("2"
                                              (apply-extensionality
                                               :hide?
                                               t)
                                              (("2"
                                                (inst - "x!1")
                                                (("2"
                                                  (expand "o ")
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (skosimp)
                                  (("3"
                                    (hide-all-but (1 -3 -4))
                                    (("3"
                                      (skolem + ("n!1"))
                                      (("3"
                                        (expand
                                         "increasing_nn_simple?")
                                        (("3"
                                          (flatten)
                                          (("3"
                                            (inst - "n!1")
                                            (("3"
                                              (inst - "n!1")
                                              (("3"
                                                (expand "isf?")
                                                (("3"
                                                  (expand "nn_simple?")
                                                  (("3"
                                                    (flatten)
                                                    (("3"
                                                      (assert)
                                                      (("3"
                                                        (hide -3 -4)
                                                        (("3"
                                                          (expand
                                                           "ae_0?")
                                                          (("3"
                                                            (expand
                                                             "pointwise_ae?")
                                                            (("3"
                                                              (expand
                                                               "ae?")
                                                              (("3"
                                                                (expand
                                                                 "fullset")
                                                                (("3"
                                                                  (expand
                                                                   "ae_in?")
                                                                  (("3"
                                                                    (skosimp)
                                                                    (("3"
                                                                      (typepred
                                                                       "E!1")
                                                                      (("3"
                                                                        (expand
                                                                         "negligible_set?")
                                                                        (("3"
                                                                          (skosimp)
                                                                          (("3"
                                                                            (expand
                                                                             "null_set?")
                                                                            (("3"
                                                                              (flatten)
                                                                              (("3"
                                                                                (lemma
                                                                                 "m_monotone"
                                                                                 ("a"
                                                                                  "nonzero_set?(w!1(n!1))"
                                                                                  "b"
                                                                                  "X!1"))
                                                                                (("3"
                                                                                  (split
                                                                                   -1)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "x_le")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "mu_fin?")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide
                                                                                     -1
                                                                                     -2
                                                                                     -3
                                                                                     2)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "nonzero_set?")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "subset?")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "member")
                                                                                          (("2"
                                                                                            (skosimp)
                                                                                            (("2"
                                                                                              (inst
                                                                                               -
                                                                                               "x!1")
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -
                                                                                                 "x!1")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (skosimp)
                                (("2"
                                  (inst - "n!1")
                                  (("2"
                                    (hide 2 -8)
                                    (("2"
                                      (lemma
                                       "isf_ae_0"
                                       ("f" "w!1(n!1)"))
                                      (("2"
                                        (replace -2)
                                        (("2"
                                          (expand
                                           "increasing_nn_simple?")
                                          (("2"
                                            (flatten -3)
                                            (("2"
                                              (expand "nn_simple?")
                                              (("2"
                                                (inst - "n!1")
                                                (("2"
                                                  (flatten -3)
                                                  (("2"
                                                    (replace -4)
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (lemma
                                                         "isf_integral_abs"
                                                         ("i"
                                                          "w!1(n!1)"))
                                                        (("2"
                                                          (replace -3)
                                                          (("2"
                                                            (typepred
                                                             "abs(isf_integral(w!1(n!1)))")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (expand "increasing_nn_simple?")
                                (("3"
                                  (flatten)
                                  (("3"
                                    (skosimp)
                                    (("3"
                                      (inst - "n!1")
                                      (("3"
                                        (inst - "n!1")
                                        (("3"
                                          (expand "isf?")
                                          (("3"
                                            (expand "nn_simple?")
                                            (("3"
                                              (flatten)
                                              (("3"
                                                (assert)
                                                (("3"
                                                  (hide 2 -9 -10 -11)
                                                  (("3"
                                                    (expand "ae_0?" -1)
                                                    (("3"
                                                      (expand
                                                       "pointwise_ae?")
                                                      (("3"
                                                        (expand "ae?")
                                                        (("3"
                                                          (expand
                                                           "fullset")
                                                          (("3"
                                                            (expand
                                                             "ae_in?")
                                                            (("3"
                                                              (skosimp)
                                                              (("3"
                                                                (typepred
                                                                 "E!1")
                                                                (("3"
                                                                  (expand
                                                                   "negligible_set?")
                                                                  (("3"
                                                                    (skosimp)
                                                                    (("3"
                                                                      (expand
                                                                       "null_set?")
                                                                      (("3"
                                                                        (flatten)
                                                                        (("3"
                                                                          (lemma
                                                                           "m_monotone"
                                                                           ("a"
                                                                            "nonzero_set?(w!1(n!1))"
                                                                            "b"
                                                                            "X!1"))
                                                                          (("3"
                                                                            (split
                                                                             -1)
                                                                            (("1"
                                                                              (expand
                                                                               "x_le")
                                                                              (("1"
                                                                                (expand
                                                                                 "mu_fin?")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide
                                                                               2)
                                                                              (("2"
                                                                                (expand
                                                                                 "nonzero_set?")
                                                                                (("2"
                                                                                  (expand
                                                                                   "subset?")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "member")
                                                                                    (("2"
                                                                                      (skosimp)
                                                                                      (("2"
                                                                                        (inst
                                                                                         -5
                                                                                         "x!1")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (inst
                                                                                             -
                                                                                             "x!1")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 2 -7)
                              (("2"
                                (skosimp)
                                (("2"
                                  (expand "pointwise_converges_upto?")
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (case
                                       "FORALL x: w!1(n!1)(x) <= H(x)")
                                      (("1"
                                        (hide -2 -3 -4 -8 -9)
                                        (("1"
                                          (expand "ae_0?")
                                          (("1"
                                            (expand "pointwise_ae?")
                                            (("1"
                                              (expand "ae?")
                                              (("1"
                                                (expand "fullset")
                                                (("1"
                                                  (expand "ae_in?")
                                                  (("1"
                                                    (skosimp*)
                                                    (("1"
                                                      (inst + "E!1")
                                                      (("1"
                                                        (skosimp)
                                                        (("1"
                                                          (inst
                                                           -2
                                                           "x!1")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (inst
                                                               -
                                                               "x!1")
                                                              (("1"
                                                                (inst
                                                                 -
                                                                 "x!1")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (typepred
                                                                     "w!1")
                                                                    (("1"
                                                                      (expand
                                                                       "increasing_nn_simple?")
                                                                      (("1"
                                                                        (expand
                                                                         "nn_simple?")
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (inst
                                                                             -
                                                                             "n!1")
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (inst
                                                                                 -
                                                                                 "x!1")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand
                                         "pointwise_convergence?")
                                        (("2"
                                          (hide-all-but (-2 -3 1 -5))
                                          (("2"
                                            (skosimp)
                                            (("2"
                                              (case
                                               "H(x!1)<w!1(n!1)(x!1)")
                                              (("1"
                                                (hide 1)
                                                (("1"
                                                  (inst - "x!1")
                                                  (("1"
                                                    (rewrite
                                                     "metric_convergence_def"
                                                     *)
                                                    (("1"
                                                      (expand
                                                       "metric_converges_to")
                                                      (("1"
                                                        (inst
                                                         -
                                                         "w!1(n!1)(x!1)-H(x!1)")
                                                        (("1"
                                                          (skosimp)
                                                          (("1"
                                                            (expand
                                                             "ball")
                                                            (("1"
                                                              (expand
                                                               "member")
                                                              (("1"
                                                                (inst
                                                                 -
                                                                 "n!1+n!2")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "pointwise_increasing?")
                                                                    (("1"
                                                                      (inst
                                                                       -
                                                                       "x!1")
                                                                      (("1"
                                                                        (inst
                                                                         -
                                                                         "x!1")
                                                                        (("1"
                                                                          (expand
                                                                           "increasing?")
                                                                          (("1"
                                                                            (inst
                                                                             -
                                                                             "n!1"
                                                                             "n!1+n!2")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide-all-but (-5 1))
                (("2" (expand "ae_0?")
                  (("2" (expand "ae_eq?")
                    (("2" (expand "H")
                      (("2" (expand "abs")
                        (("2" (expand "pointwise_ae?")
                          (("2" (expand "ae?")
                            (("2" (expand "fullset")
                              (("2"
                                (expand "ae_in?")
                                (("2"
                                  (skosimp)
                                  (("2"
                                    (inst + "E!1")
                                    (("2"
                                      (skosimp)
                                      (("2"
                                        (inst - "x!1")
                                        (("2"
                                          (assert)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
            nil)
           ("2" (hide -1 -3 2)
            (("2" (expand "H") (("2" (propax) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((integrable nonempty-type-eq-decl nil integral nil)
    (integrable? const-decl "bool" integral nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-type-decl nil integral nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nnreal type-eq-decl nil real_types nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (measure? const-decl "bool" generalized_measure_def nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     nil)
    (m formal-const-decl "measure_type" integral nil)
    (ae_0? const-decl "bool" measure_theory nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sequence type-eq-decl nil sequences nil)
    (increasing_nn_simple? const-decl "bool" measure_space nil)
    (increasing_nn_simple nonempty-type-eq-decl nil measure_space nil)
    (measurable_fullset name-judgement "measurable_set[T, S]" integral
     nil)
    (subset_algebra_fullset name-judgement "(S)" integral nil)
    (< const-decl "bool" reals nil)
    (metric_converges_to const-decl "bool" metric_space_def
     metric_space)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (increasing? const-decl "bool" real_fun_preds reals)
    (pointwise_increasing? const-decl "bool" pointwise_convergence nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (ball const-decl "set[T]" metric_space_def metric_space)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (x!1 skolem-const-decl "T" integral nil)
    (n!1 skolem-const-decl "nat" integral nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (metric_convergence_def formula-decl nil metric_space metric_space)
    (isf? const-decl "bool" isf nil)
    (isf nonempty-type-eq-decl nil isf nil)
    (isf_integral const-decl "real" isf nil)
    (nonzero_measurable formula-decl nil isf nil)
    (integrable_abs_def formula-decl nil integral nil)
    (nn_integrable_is_integrable judgement-tcc nil integral nil)
    (+ const-decl "[T -> real]" real_fun_ops reals)
    (sum_measurable application-judgement "measurable_function[T, S]"
     integral nil)
    (nn_integral const-decl "nnreal" nn_integral nil)
    (integral_nn formula-decl nil integral nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (integral_diff formula-decl nil integral nil)
    (integral const-decl "real" integral nil)
    (integral_abs formula-decl nil integral nil)
    (nn_isf? const-decl "bool" nn_integral nil)
    (nn_isf nonempty-type-eq-decl nil nn_integral nil)
    (increasing_nn_isf? const-decl "bool" nn_integral nil)
    (increasing_nn_isf nonempty-type-eq-decl nil nn_integral nil)
    (set type-eq-decl nil sets nil)
    (nonempty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (nn_convergence formula-decl nil nn_integral nil)
    (convergent type-eq-decl nil topological_convergence topology)
    (convergent? const-decl "bool" topological_convergence topology)
    (limit_def formula-decl nil hausdorff_convergence topology)
    (pointwise_ae? const-decl "bool" measure_theory nil)
    (fullset const-decl "set" sets nil)
    (null_set? const-decl "bool" measure_theory nil)
    (m_monotone formula-decl nil measure_props nil)
    (measurable_set? const-decl "bool" measure_space_def nil)
    (measurable_set nonempty-type-eq-decl nil measure_space_def nil)
    (nonzero_set? const-decl "set[T]" isf nil)
    (subset? const-decl "bool" sets nil)
    (TRUE const-decl "bool" booleans nil)
    (mu_fin? const-decl "bool" measure_props nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (x_le const-decl "bool" extended_nnreal extended_nnreal)
    (negligible nonempty-type-eq-decl nil measure_theory nil)
    (negligible_set? const-decl "bool" measure_theory nil)
    (ae_in? const-decl "bool" measure_theory nil)
    (ae? const-decl "bool" measure_theory nil)
    (nn_simple? const-decl "bool" measure_space nil)
    (choose const-decl "(p)" sets nil)
    (choose_member formula-decl nil sets_lemmas nil)
    (pointwise_converges_upto? const-decl "bool" pointwise_convergence
     nil)
    (w!1 skolem-const-decl "increasing_nn_simple[T, S]" integral nil)
    (empty? const-decl "bool" sets nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (integrable_add judgement-tcc nil integral nil)
    (nn_integrable nonempty-type-eq-decl nil nn_integral nil)
    (H skolem-const-decl "[T -> nonneg_real]" integral nil)
    (nn_integrable? const-decl "bool" nn_integral nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (O const-decl "T3" function_props nil)
    (convergence? const-decl "bool" topological_convergence topology)
    (metric_induced_topology const-decl "setofsets[T]" metric_space_def
     metric_space)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (pointwise_convergence? const-decl "bool" pointwise_convergence
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (metric_space_is_hausdorff name-judgement "hausdorff"
     convergence_aux metric_space)
    (metric_induced_topology_is_second_countable name-judgement
     "second_countable" real_topology metric_space)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (isf_ae_0 formula-decl nil isf nil)
    (isf_integral_abs formula-decl nil isf nil)
    (nn_measurable_def formula-decl nil measure_space nil)
    (ae_eq? const-decl "bool" measure_theory nil)
    (<= const-decl "bool" reals nil)
    (diff_measurable application-judgement "measurable_function[T, S]"
     integral nil)
    (abs_measurable application-judgement "measurable_function[T, S]"
     integral nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (abs const-decl "[T -> nonneg_real]" real_fun_ops reals)
    (- const-decl "[T -> real]" real_fun_ops reals)
    (setof type-eq-decl nil defined_types nil)
    (setofsets type-eq-decl nil sets nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (S formal-const-decl "sigma_algebra" integral nil)
    (measurable_function? const-decl "bool" measure_space_def nil)
    (measurable_function nonempty-type-eq-decl nil measure_space_def
     nil))
   shostak)
  (integral_ae_eq-2 nil 3722186491
   ("" (skosimp)
    (("" (typepred "f!1")
      (("" (name "H" "abs(h!1-f!1)")
        (("" (case "measurable_function?(H)")
          (("1" (case "forall x: 0 <= H(x)")
            (("1" (case "ae_0?(H)")
              (("1" (lemma "nn_measurable_def" ("f" "H"))
                (("1" (replace -3 -1)
                  (("1" (replace -4 -1)
                    (("1" (assert)
                      (("1" (skosimp)
                        (("1" (typepred "w!1")
                          (("1" (case "forall (n:nat): ae_0?(w!1(n))")
                            (("1"
                              (case "forall (n:nat): isf_integral(w!1(n)) = 0")
                              (("1"
                                (case
                                 "pointwise_convergence?(w!1,H) AND convergence?(isf_integral o w!1,0)")
                                (("1"
                                  (flatten)
                                  (("1"
                                    (case "nn_integrable?(H)")
                                    (("1"
                                      (lemma
                                       "integrable_abs_def"
                                       ("h" "h!1 - f!1"))
                                      (("1"
                                        (replace -12)
                                        (("1"
                                          (lemma
                                           "nn_integrable_is_integrable")
                                          (("1"
                                            (inst - "H")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (lemma
                                                 "integrable_add"
                                                 ("f1"
                                                  "h!1 - f!1"
                                                  "f2"
                                                  "f!1"))
                                                (("1"
                                                  (case-replace
                                                   "(+[T])(h!1 - f!1, f!1)=h!1")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (case
                                                       "nn_integral(H)=0")
                                                      (("1"
                                                        (replace
                                                         -16
                                                         -1
                                                         rl)
                                                        (("1"
                                                          (lemma
                                                           "integral_nn"
                                                           ("g"
                                                            "abs(h!1 - f!1)"))
                                                          (("1"
                                                            (replace
                                                             -2)
                                                            (("1"
                                                              (hide -2)
                                                              (("1"
                                                                (lemma
                                                                 "integral_abs"
                                                                 ("f"
                                                                  "h!1-f!1"))
                                                                (("1"
                                                                  (replace
                                                                   -2)
                                                                  (("1"
                                                                    (case-replace
                                                                     "integral.integral(h!1 - f!1)=0")
                                                                    (("1"
                                                                      (rewrite
                                                                       "integral_diff")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (typepred
                                                                       "abs(integral.integral(h!1 - f!1))")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide 2)
                                                        (("2"
                                                          (expand
                                                           "nn_integral")
                                                          (("2"
                                                            (hide
                                                             -1
                                                             -2
                                                             -3
                                                             -4
                                                             -15
                                                             -16
                                                             -17)
                                                            (("2"
                                                              (case
                                                               "nonempty?[increasing_nn_isf[T, S, m]]
                                   ({u: increasing_nn_isf[T, S, m] |
                                       pointwise_convergence?[T](u, H)})")
                                                              (("1"
                                                                (lemma
                                                                 "choose_member"
                                                                 ("a"
                                                                  "{u: increasing_nn_isf[T, S, m] |
                                             pointwise_convergence?(u, H)}"))
                                                                (("1"
                                                                  (split
                                                                   -1)
                                                                  (("1"
                                                                    (name-replace
                                                                     "CU"
                                                                     "choose({u: increasing_nn_isf[T, S, m] |
                                               pointwise_convergence?(u, H)})")
                                                                    (("1"
                                                                      (expand
                                                                       "member")
                                                                      (("1"
                                                                        (hide
                                                                         -2)
                                                                        (("1"
                                                                          (lemma
                                                                           "nn_convergence"
                                                                           ("u1"
                                                                            "w!1"
                                                                            "f"
                                                                            "H"
                                                                            "u2"
                                                                            "CU"))
                                                                          (("1"
                                                                            (replace
                                                                             -2)
                                                                            (("1"
                                                                              (replace
                                                                               -4)
                                                                              (("1"
                                                                                (split
                                                                                 -1)
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -2
                                                                                     1
                                                                                     rl)
                                                                                    (("1"
                                                                                      (rewrite
                                                                                       "limit_def"
                                                                                       1)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide
                                                                                   2)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "convergent?")
                                                                                    (("2"
                                                                                      (inst
                                                                                       +
                                                                                       "0")
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide
                                                                             -1
                                                                             -3
                                                                             -4
                                                                             2
                                                                             -8
                                                                             -9
                                                                             -10)
                                                                            (("2"
                                                                              (split)
                                                                              (("1"
                                                                                (skolem
                                                                                 +
                                                                                 ("n!1"))
                                                                                (("1"
                                                                                  (expand
                                                                                   "nn_isf?")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "isf?")
                                                                                    (("1"
                                                                                      (hide
                                                                                       -1
                                                                                       -2)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -
                                                                                         "n!1")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "increasing_nn_simple?")
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            (("1"
                                                                                              (inst
                                                                                               -
                                                                                               "n!1")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "nn_simple?")
                                                                                                (("1"
                                                                                                  (flatten)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (split)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "ae_0?")
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "restrict")
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "pointwise_ae?")
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "ae?")
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "fullset")
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "ae_in?")
                                                                                                                  (("1"
                                                                                                                    (skosimp)
                                                                                                                    (("1"
                                                                                                                      (typepred
                                                                                                                       "E!1")
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "negligible_set?")
                                                                                                                        (("1"
                                                                                                                          (skosimp)
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "null_set?")
                                                                                                                            (("1"
                                                                                                                              (flatten)
                                                                                                                              (("1"
                                                                                                                                (lemma
                                                                                                                                 "m_monotone"
                                                                                                                                 ("a"
                                                                                                                                  "nonzero_set?(w!1(n!1))"
                                                                                                                                  "b"
                                                                                                                                  "X!1"))
                                                                                                                                (("1"
                                                                                                                                  (split
                                                                                                                                   -1)
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "mu_fin?")
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "x_le")
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (hide
                                                                                                                                     2
                                                                                                                                     -1
                                                                                                                                     -2
                                                                                                                                     -3
                                                                                                                                     -7
                                                                                                                                     -8
                                                                                                                                     -9)
                                                                                                                                    (("2"
                                                                                                                                      (expand
                                                                                                                                       "nonzero_set?")
                                                                                                                                      (("2"
                                                                                                                                        (expand
                                                                                                                                         "subset?")
                                                                                                                                        (("2"
                                                                                                                                          (expand
                                                                                                                                           "member")
                                                                                                                                          (("2"
                                                                                                                                            (skosimp)
                                                                                                                                            (("2"
                                                                                                                                              (inst
                                                                                                                                               -
                                                                                                                                               "x!1")
                                                                                                                                              (("2"
                                                                                                                                                (inst
                                                                                                                                                 -
                                                                                                                                                 "x!1")
                                                                                                                                                (("2"
                                                                                                                                                  (assert)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (skosimp)
                                                                                                        (("2"
                                                                                                          (inst
                                                                                                           -
                                                                                                           "x!1")
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (expand
                                                                                 "increasing_nn_simple?")
                                                                                (("2"
                                                                                  (expand
                                                                                   "increasing_nn_isf?")
                                                                                  (("2"
                                                                                    (flatten)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (expand
                                                                     "nonempty?")
                                                                    (("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide
                                                                 2)
                                                                (("2"
                                                                  (expand
                                                                   "nonempty?")
                                                                  (("2"
                                                                    (expand
                                                                     "empty?")
                                                                    (("2"
                                                                      (expand
                                                                       "member")
                                                                      (("2"
                                                                        (inst
                                                                         -
                                                                         "w!1")
                                                                        (("2"
                                                                          (split)
                                                                          (("1"
                                                                            (skolem
                                                                             +
                                                                             ("n!1"))
                                                                            (("1"
                                                                              (expand
                                                                               "nn_isf?")
                                                                              (("1"
                                                                                (expand
                                                                                 "isf?")
                                                                                (("1"
                                                                                  (expand
                                                                                   "increasing_nn_simple?")
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -6
                                                                                       "n!1")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "nn_simple?")
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (split)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -5
                                                                                                 "n!1")
                                                                                                (("1"
                                                                                                  (hide
                                                                                                   -1
                                                                                                   -2
                                                                                                   -3
                                                                                                   -4)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "ae_0?"
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "restrict")
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "pointwise_ae?")
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "ae?")
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "fullset")
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "ae_in?")
                                                                                                              (("1"
                                                                                                                (skosimp)
                                                                                                                (("1"
                                                                                                                  (typepred
                                                                                                                   "E!1")
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "negligible_set?")
                                                                                                                    (("1"
                                                                                                                      (skosimp)
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "null_set?")
                                                                                                                        (("1"
                                                                                                                          (flatten)
                                                                                                                          (("1"
                                                                                                                            (lemma
                                                                                                                             "m_monotone"
                                                                                                                             ("a"
                                                                                                                              "nonzero_set?(w!1(n!1))"
                                                                                                                              "b"
                                                                                                                              "X!1"))
                                                                                                                            (("1"
                                                                                                                              (split
                                                                                                                               -1)
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "x_le")
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "mu_fin?")
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (hide
                                                                                                                                 -1
                                                                                                                                 -2
                                                                                                                                 -3
                                                                                                                                 -10
                                                                                                                                 2)
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "nonzero_set?")
                                                                                                                                  (("2"
                                                                                                                                    (expand
                                                                                                                                     "subset?")
                                                                                                                                    (("2"
                                                                                                                                      (expand
                                                                                                                                       "member")
                                                                                                                                      (("2"
                                                                                                                                        (skosimp)
                                                                                                                                        (("2"
                                                                                                                                          (inst
                                                                                                                                           -
                                                                                                                                           "x!1")
                                                                                                                                          (("2"
                                                                                                                                            (inst
                                                                                                                                             -
                                                                                                                                             "x!1")
                                                                                                                                            (("2"
                                                                                                                                              (assert)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (skosimp)
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -6
                                                                                                   "x!1")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (expand
                                                                             "increasing_nn_isf?")
                                                                            (("2"
                                                                              (expand
                                                                               "pointwise_converges_upto?")
                                                                              (("2"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but 1)
                                                    (("2"
                                                      (grind)
                                                      (("2"
                                                        (apply-extensionality
                                                         :hide?
                                                         t)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "nn_integrable?")
                                      (("2"
                                        (inst + "w!1")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "convergent?")
                                            (("1"
                                              (inst + "0")
                                              nil
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "increasing_nn_isf?")
                                          (("2"
                                            (expand "nn_isf?")
                                            (("2"
                                              (expand
                                               "increasing_nn_simple?")
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (hide-all-but
                                                     (-4 -5 1))
                                                    (("2"
                                                      (skolem
                                                       +
                                                       ("n!1"))
                                                      (("2"
                                                        (expand "isf?")
                                                        (("2"
                                                          (inst
                                                           -
                                                           "n!1")
                                                          (("2"
                                                            (inst
                                                             -
                                                             "n!1")
                                                            (("2"
                                                              (expand
                                                               "nn_simple?")
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (split)
                                                                    (("1"
                                                                      (hide
                                                                       -3)
                                                                      (("1"
                                                                        (expand
                                                                         "ae_0?")
                                                                        (("1"
                                                                          (expand
                                                                           "restrict")
                                                                          (("1"
                                                                            (expand
                                                                             "pointwise_ae?")
                                                                            (("1"
                                                                              (expand
                                                                               "nonzero_set?")
                                                                              (("1"
                                                                                (expand
                                                                                 "ae?")
                                                                                (("1"
                                                                                  (expand
                                                                                   "fullset")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "ae_in?")
                                                                                    (("1"
                                                                                      (skosimp)
                                                                                      (("1"
                                                                                        (typepred
                                                                                         "E!1")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "negligible_set?")
                                                                                          (("1"
                                                                                            (skosimp)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "null_set?")
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (lemma
                                                                                                   "m_monotone"
                                                                                                   ("a"
                                                                                                    "nonzero_set?(w!1(n!1))"
                                                                                                    "b"
                                                                                                    "X!1"))
                                                                                                  (("1"
                                                                                                    (split
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "x_le")
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "mu_fin?")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "nonzero_set?")
                                                                                                            (("1"
                                                                                                              (propax)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (hide
                                                                                                       -1
                                                                                                       -2
                                                                                                       -3
                                                                                                       2)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "nonzero_set?")
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "subset?")
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "member")
                                                                                                            (("2"
                                                                                                              (skosimp)
                                                                                                              (("2"
                                                                                                                (inst
                                                                                                                 -
                                                                                                                 "x!1")
                                                                                                                (("2"
                                                                                                                  (inst
                                                                                                                   -
                                                                                                                   "x!1")
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (typepred
                                                                                                     "w!1(n!1)")
                                                                                                    (("2"
                                                                                                      (rewrite
                                                                                                       "nonzero_measurable")
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (skosimp)
                                                                      (("2"
                                                                        (inst
                                                                         -
                                                                         "x!1")
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide 2)
                                  (("2"
                                    (expand
                                     "pointwise_converges_upto?")
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (case-replace
                                           "isf_integral o w!1 = lambda (n:nat): 0")
                                          (("1"
                                            (expand "convergence?")
                                            (("1"
                                              (skosimp)
                                              (("1"
                                                (inst + "0")
                                                (("1"
                                                  (skosimp)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but (-1 1))
                                            (("2"
                                              (apply-extensionality
                                               :hide?
                                               t)
                                              (("2"
                                                (inst - "x!1")
                                                (("2"
                                                  (expand "o ")
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (skosimp)
                                  (("3"
                                    (hide-all-but (1 -3 -4))
                                    (("3"
                                      (skolem + ("n!1"))
                                      (("3"
                                        (expand
                                         "increasing_nn_simple?")
                                        (("3"
                                          (flatten)
                                          (("3"
                                            (inst - "n!1")
                                            (("3"
                                              (inst - "n!1")
                                              (("3"
                                                (expand "isf?")
                                                (("3"
                                                  (expand "nn_simple?")
                                                  (("3"
                                                    (flatten)
                                                    (("3"
                                                      (assert)
                                                      (("3"
                                                        (hide -3 -4)
                                                        (("3"
                                                          (expand
                                                           "ae_0?")
                                                          (("3"
                                                            (expand
                                                             "restrict")
                                                            (("3"
                                                              (expand
                                                               "pointwise_ae?")
                                                              (("3"
                                                                (expand
                                                                 "ae?")
                                                                (("3"
                                                                  (expand
                                                                   "fullset")
                                                                  (("3"
                                                                    (expand
                                                                     "ae_in?")
                                                                    (("3"
                                                                      (skosimp)
                                                                      (("3"
                                                                        (typepred
                                                                         "E!1")
                                                                        (("3"
                                                                          (expand
                                                                           "negligible_set?")
                                                                          (("3"
                                                                            (skosimp)
                                                                            (("3"
                                                                              (expand
                                                                               "null_set?")
                                                                              (("3"
                                                                                (flatten)
                                                                                (("3"
                                                                                  (lemma
                                                                                   "m_monotone"
                                                                                   ("a"
                                                                                    "nonzero_set?(w!1(n!1))"
                                                                                    "b"
                                                                                    "X!1"))
                                                                                  (("3"
                                                                                    (split
                                                                                     -1)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "x_le")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "mu_fin?")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide
                                                                                       -1
                                                                                       -2
                                                                                       -3
                                                                                       2)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "nonzero_set?")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "subset?")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "member")
                                                                                            (("2"
                                                                                              (skosimp)
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -
                                                                                                 "x!1")
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -
                                                                                                   "x!1")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (skosimp)
                                (("2"
                                  (inst - "n!1")
                                  (("2"
                                    (hide 2 -8)
                                    (("2"
                                      (lemma
                                       "isf_ae_0"
                                       ("f" "w!1(n!1)"))
                                      (("2"
                                        (replace -2)
                                        (("2"
                                          (expand
                                           "increasing_nn_simple?")
                                          (("2"
                                            (flatten -3)
                                            (("2"
                                              (expand "nn_simple?")
                                              (("2"
                                                (inst - "n!1")
                                                (("2"
                                                  (flatten -3)
                                                  (("2"
                                                    (replace -4)
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (lemma
                                                         "isf_integral_abs"
                                                         ("i"
                                                          "w!1(n!1)"))
                                                        (("2"
                                                          (replace -3)
                                                          (("2"
                                                            (typepred
                                                             "abs(isf_integral(w!1(n!1)))")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (expand "increasing_nn_simple?")
                                (("3"
                                  (flatten)
                                  (("3"
                                    (skosimp)
                                    (("3"
                                      (inst - "n!1")
                                      (("3"
                                        (inst - "n!1")
                                        (("3"
                                          (expand "isf?")
                                          (("3"
                                            (expand "nn_simple?")
                                            (("3"
                                              (flatten)
                                              (("3"
                                                (assert)
                                                (("3"
                                                  (hide 2 -9 -10 -11)
                                                  (("3"
                                                    (expand "ae_0?" -1)
                                                    (("3"
                                                      (expand
                                                       "restrict")
                                                      (("3"
                                                        (expand
                                                         "pointwise_ae?")
                                                        (("3"
                                                          (expand
                                                           "ae?")
                                                          (("3"
                                                            (expand
                                                             "fullset")
                                                            (("3"
                                                              (expand
                                                               "ae_in?")
                                                              (("3"
                                                                (skosimp)
                                                                (("3"
                                                                  (typepred
                                                                   "E!1")
                                                                  (("3"
                                                                    (expand
                                                                     "negligible_set?")
                                                                    (("3"
                                                                      (skosimp)
                                                                      (("3"
                                                                        (expand
                                                                         "null_set?")
                                                                        (("3"
                                                                          (flatten)
                                                                          (("3"
                                                                            (lemma
                                                                             "m_monotone"
                                                                             ("a"
                                                                              "nonzero_set?(w!1(n!1))"
                                                                              "b"
                                                                              "X!1"))
                                                                            (("3"
                                                                              (split
                                                                               -1)
                                                                              (("1"
                                                                                (expand
                                                                                 "x_le")
                                                                                (("1"
                                                                                  (expand
                                                                                   "mu_fin?")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide
                                                                                 2)
                                                                                (("2"
                                                                                  (expand
                                                                                   "nonzero_set?")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "subset?")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "member")
                                                                                      (("2"
                                                                                        (skosimp)
                                                                                        (("2"
                                                                                          (inst
                                                                                           -5
                                                                                           "x!1")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (inst
                                                                                               -
                                                                                               "x!1")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 2 -7)
                              (("2"
                                (skosimp)
                                (("2"
                                  (expand "pointwise_converges_upto?")
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (case
                                       "FORALL x: w!1(n!1)(x) <= H(x)")
                                      (("1"
                                        (hide -2 -3 -4 -8 -9)
                                        (("1"
                                          (expand "ae_0?")
                                          (("1"
                                            (expand "restrict")
                                            (("1"
                                              (expand "pointwise_ae?")
                                              (("1"
                                                (expand "ae?")
                                                (("1"
                                                  (expand "fullset")
                                                  (("1"
                                                    (expand "ae_in?")
                                                    (("1"
                                                      (skosimp*)
                                                      (("1"
                                                        (inst + "E!1")
                                                        (("1"
                                                          (skosimp)
                                                          (("1"
                                                            (inst
                                                             -2
                                                             "x!1")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (inst
                                                                 -
                                                                 "x!1")
                                                                (("1"
                                                                  (inst
                                                                   -
                                                                   "x!1")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (typepred
                                                                       "w!1")
                                                                      (("1"
                                                                        (expand
                                                                         "increasing_nn_simple?")
                                                                        (("1"
                                                                          (expand
                                                                           "nn_simple?")
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (inst
                                                                               -
                                                                               "n!1")
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (inst
                                                                                   -
                                                                                   "x!1")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand
                                         "pointwise_convergence?")
                                        (("2"
                                          (hide-all-but (-2 -3 1 -5))
                                          (("2"
                                            (skosimp)
                                            (("2"
                                              (case
                                               "H(x!1)<w!1(n!1)(x!1)")
                                              (("1"
                                                (hide 1)
                                                (("1"
                                                  (inst - "x!1")
                                                  (("1"
                                                    (rewrite
                                                     "metric_convergence_def"
                                                     *)
                                                    (("1"
                                                      (expand
                                                       "metric_converges_to")
                                                      (("1"
                                                        (inst
                                                         -
                                                         "w!1(n!1)(x!1)-H(x!1)")
                                                        (("1"
                                                          (skosimp)
                                                          (("1"
                                                            (expand
                                                             "ball")
                                                            (("1"
                                                              (expand
                                                               "member")
                                                              (("1"
                                                                (inst
                                                                 -
                                                                 "n!1+n!2")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "pointwise_increasing?")
                                                                    (("1"
                                                                      (inst
                                                                       -
                                                                       "x!1")
                                                                      (("1"
                                                                        (inst
                                                                         -
                                                                         "x!1")
                                                                        (("1"
                                                                          (expand
                                                                           "increasing?")
                                                                          (("1"
                                                                            (inst
                                                                             -
                                                                             "n!1"
                                                                             "n!1+n!2")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide-all-but (-5 1))
                (("2" (expand "ae_0?")
                  (("2" (expand "ae_eq?")
                    (("2" (expand "H")
                      (("2" (expand "abs")
                        (("2" (expand "restrict")
                          (("2" (expand "pointwise_ae?")
                            (("2" (expand "ae?")
                              (("2"
                                (expand "fullset")
                                (("2"
                                  (expand "ae_in?")
                                  (("2"
                                    (skosimp)
                                    (("2"
                                      (inst + "E!1")
                                      (("2"
                                        (skosimp)
                                        (("2"
                                          (inst - "x!1")
                                          (("2"
                                            (assert)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
            nil)
           ("2" (hide -1 -3 2)
            (("2" (expand "H") (("2" (propax) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (measure? const-decl "bool" generalized_measure_def nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     nil)
    (ae_0? const-decl "bool" measure_theory nil)
    (sequence type-eq-decl nil sequences nil)
    (increasing_nn_simple? const-decl "bool" measure_space nil)
    (increasing_nn_simple nonempty-type-eq-decl nil measure_space nil)
    (metric_converges_to const-decl "bool" metric_space_def
     metric_space)
    (increasing? const-decl "bool" real_fun_preds reals)
    (pointwise_increasing? const-decl "bool" pointwise_convergence nil)
    (ball const-decl "set[T]" metric_space_def metric_space)
    (metric_convergence_def formula-decl nil metric_space metric_space)
    (isf? const-decl "bool" isf nil)
    (isf nonempty-type-eq-decl nil isf nil)
    (isf_integral const-decl "real" isf nil)
    (nonzero_measurable formula-decl nil isf nil)
    (nn_integral const-decl "nnreal" nn_integral nil)
    (nn_isf? const-decl "bool" nn_integral nil)
    (nn_isf nonempty-type-eq-decl nil nn_integral nil)
    (increasing_nn_isf? const-decl "bool" nn_integral nil)
    (increasing_nn_isf nonempty-type-eq-decl nil nn_integral nil)
    (set type-eq-decl nil sets nil)
    (nonempty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (nn_convergence formula-decl nil nn_integral nil)
    (convergent type-eq-decl nil topological_convergence topology)
    (convergent? const-decl "bool" topological_convergence topology)
    (limit_def formula-decl nil hausdorff_convergence topology)
    (pointwise_ae? const-decl "bool" measure_theory nil)
    (fullset const-decl "set" sets nil)
    (null_set? const-decl "bool" measure_theory nil)
    (m_monotone formula-decl nil measure_props nil)
    (measurable_set? const-decl "bool" measure_space_def nil)
    (measurable_set nonempty-type-eq-decl nil measure_space_def nil)
    (nonzero_set? const-decl "set[T]" isf nil)
    (subset? const-decl "bool" sets nil)
    (mu_fin? const-decl "bool" measure_props nil)
    (x_le const-decl "bool" extended_nnreal extended_nnreal)
    (negligible nonempty-type-eq-decl nil measure_theory nil)
    (negligible_set? const-decl "bool" measure_theory nil)
    (ae_in? const-decl "bool" measure_theory nil)
    (nn_simple? const-decl "bool" measure_space nil)
    (choose const-decl "(p)" sets nil)
    (pointwise_converges_upto? const-decl "bool" pointwise_convergence
     nil)
    (empty? const-decl "bool" sets nil)
    (nn_integrable nonempty-type-eq-decl nil nn_integral nil)
    (nn_integrable? const-decl "bool" nn_integral nil)
    (convergence? const-decl "bool" topological_convergence topology)
    (metric_induced_topology const-decl "setofsets[T]" metric_space_def
     metric_space)
    (pointwise_convergence? const-decl "bool" pointwise_convergence
     nil)
    (metric_induced_topology_is_second_countable name-judgement
     "second_countable" real_topology metric_space)
    (isf_ae_0 formula-decl nil isf nil)
    (isf_integral_abs formula-decl nil isf nil)
    (nn_measurable_def formula-decl nil measure_space nil)
    (ae_eq? const-decl "bool" measure_theory nil)
    (abs const-decl "[T -> nonneg_real]" real_fun_ops reals)
    (setofsets type-eq-decl nil sets nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (measurable_function? const-decl "bool" measure_space_def nil)
    (measurable_function nonempty-type-eq-decl nil measure_space_def
     nil))
   nil))
 (integral_prod_TCC1 0
  (integral_prod_TCC1-1 nil 3395585459
   ("" (skosimp) (("" (rewrite "integrable_abs") nil nil)) nil)
   ((prod_measurable application-judgement "measurable_function[T, S]"
     integral nil)
    (integrable_abs judgement-tcc nil integral nil)
    (T formal-type-decl nil integral nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (integrable? const-decl "bool" integral nil)
    (integrable nonempty-type-eq-decl nil integral nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (setof type-eq-decl nil defined_types nil)
    (setofsets type-eq-decl nil sets nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (S formal-const-decl "sigma_algebra" integral nil)
    (measurable_function? const-decl "bool" measure_space_def nil)
    (measurable_function nonempty-type-eq-decl nil measure_space_def
     nil))
   nil
   (integral_prod subtype
    "real_fun_ops[integral.T].abs(real_fun_ops[integral.T].*(integral.f, integral.h))"
    "integrable")))
 (integral_prod 0
  (integral_prod-2 nil 3722186289
   ("" (skosimp)
    (("" (expand "ae_le?")
      (("" (expand "pointwise_ae?")
        (("" (expand "ae?")
          (("" (expand "fullset")
            (("" (expand "ae_in?")
              (("" (skosimp)
                (("" (typepred "E!1")
                  (("" (expand "negligible_set?")
                    (("" (skosimp)
                      (("" (lemma "measurable_complement" ("a" "X!1"))
                        (("1"
                          (case "measurable_function?(phi(complement[T](X!1)))")
                          (("1"
                            (case "forall x: (phi(complement[T](X!1))*abs(f!1 * h!1))(x) <= (phi(complement[T](X!1))* (nnc!1*abs(f!1)))(x) & (phi(complement[T](X!1))* (nnc!1*abs(f!1)))(x) <= (nnc!1*abs(f!1))(x)")
                            (("1"
                              (lemma "nn_integrable_le"
                               ("f"
                                "nnc!1 * abs(f!1)"
                                "g"
                                "phi(complement[T](X!1)) * abs(f!1 * h!1)"))
                              (("1"
                                (split -)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (hide -3)
                                    (("1"
                                      (lemma
                                       "nn_integrable_is_integrable")
                                      (("1"
                                        (inst
                                         -
                                         "phi(complement[T](X!1)) * abs(f!1 * h!1)")
                                        (("1"
                                          (lemma
                                           "integral_ae_eq"
                                           ("f"
                                            "phi(complement[T](X!1)) * abs(f!1 * h!1)"
                                            "h"
                                            "abs(f!1 * h!1)"))
                                          (("1"
                                            (split -1)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (lemma
                                                 "integrable_abs_def"
                                                 ("h" "f!1*h!1"))
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (name-replace
                                                     "I_0"
                                                     "integral.integral(abs(f!1 * h!1))")
                                                    (("1"
                                                      (rewrite
                                                       "integral_nn"
                                                       *
                                                       :dir
                                                       rl)
                                                      (("1"
                                                        (replace -3)
                                                        (("1"
                                                          (rewrite
                                                           "integral_nn"
                                                           *
                                                           :dir
                                                           rl)
                                                          (("1"
                                                            (rewrite
                                                             "integral_scal"
                                                             -)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but
                                               (-5 -6 -7 -8 1))
                                              (("2"
                                                (expand "ae_eq?")
                                                (("2"
                                                  (expand
                                                   "pointwise_ae?")
                                                  (("2"
                                                    (expand "ae?")
                                                    (("2"
                                                      (expand
                                                       "fullset")
                                                      (("2"
                                                        (expand
                                                         "ae_in?")
                                                        (("2"
                                                          (inst
                                                           +
                                                           "X!1")
                                                          (("1"
                                                            (skosimp)
                                                            (("1"
                                                              (expand
                                                               "*")
                                                              (("1"
                                                                (expand
                                                                 "abs")
                                                                (("1"
                                                                  (expand
                                                                   "complement")
                                                                  (("1"
                                                                    (expand
                                                                     "phi")
                                                                    (("1"
                                                                      (expand
                                                                       "member")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (expand
                                                             "negligible_set?")
                                                            (("2"
                                                              (inst
                                                               +
                                                               "X!1")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "subset?")
                                                                  (("2"
                                                                    (skosimp)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (skosimp)
                                  (("2"
                                    (inst - "x!1")
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (hide-all-but 1)
                                          (("2"
                                            (expand "*")
                                            (("2"
                                              (expand "abs")
                                              (("2"
                                                (expand "complement")
                                                (("2"
                                                  (expand "phi")
                                                  (("2"
                                                    (expand "member")
                                                    (("2"
                                                      (case-replace
                                                       "X!1(x!1)")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (typepred
                                                         "abs(f!1(x!1) * h!1(x!1))")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 2)
                                (("2"
                                  (rewrite "prod_measurable")
                                  nil
                                  nil))
                                nil)
                               ("3"
                                (split)
                                (("1"
                                  (hide-all-but 1)
                                  (("1"
                                    (skolem + ("x!1"))
                                    (("1"
                                      (expand "*")
                                      (("1"
                                        (case-replace "nnc!1=0")
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (lemma
                                           "both_sides_times_pos_le1"
                                           ("pz"
                                            "nnc!1"
                                            "x"
                                            "0"
                                            "y"
                                            "abs[T](f!1)(x!1)"))
                                          (("1"
                                            (expand "abs")
                                            (("1" (assert) nil nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (lemma "integrable_abs" ("f" "f!1"))
                                  (("2"
                                    (lemma
                                     "integrable_scal"
                                     ("f" "abs[T](f!1)" "c" "nnc!1"))
                                    (("2"
                                      (lemma
                                       "nn_integrable_is_nn_integrable"
                                       ("f"
                                        "*[T](nnc!1, abs[T](f!1))"))
                                      (("2"
                                        (assert)
                                        (("2"
                                          (hide-all-but 1)
                                          (("2"
                                            (skosimp)
                                            (("2"
                                              (expand "*")
                                              (("2"
                                                (expand "abs")
                                                (("2"
                                                  (case-replace
                                                   "nnc!1=0")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (lemma
                                                     "both_sides_times_pos_le1"
                                                     ("pz"
                                                      "nnc!1"
                                                      "x"
                                                      "0"
                                                      "y"
                                                      "abs(f!1(x!1))"))
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 2)
                              (("2"
                                (skosimp)
                                (("2"
                                  (split)
                                  (("1"
                                    (expand "*")
                                    (("1"
                                      (expand "abs")
                                      (("1"
                                        (expand "complement")
                                        (("1"
                                          (expand "phi")
                                          (("1"
                                            (expand "member")
                                            (("1"
                                              (case-replace "X!1(x!1)")
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (assert)
                                                (("2"
                                                  (inst - "x!1")
                                                  (("2"
                                                    (expand "subset?")
                                                    (("2"
                                                      (inst - "x!1")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (rewrite
                                                           "abs_mult"
                                                           2)
                                                          (("2"
                                                            (case-replace
                                                             "abs(f!1(x!1))=0")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (lemma
                                                               "both_sides_times_pos_le1"
                                                               ("pz"
                                                                "abs(f!1(x!1))"
                                                                "x"
                                                                "abs(h!1(x!1))"
                                                                "y"
                                                                "nnc!1"))
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand "*")
                                    (("2"
                                      (expand "complement")
                                      (("2"
                                        (expand "phi")
                                        (("2"
                                          (expand "member")
                                          (("2"
                                            (case-replace "X!1(x!1)")
                                            (("1" (assert) nil nil)
                                             ("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide-all-but (-1 1))
                            (("2"
                              (lemma "phi_is_simple"
                               ("X" "complement[T](X!1)"))
                              (("1"
                                (expand "simple?")
                                (("1" (flatten) nil nil))
                                nil)
                               ("2"
                                (expand "measurable_set?")
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "null_set?")
                          (("2" (flatten) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ae_le? const-decl "bool" measure_theory nil)
    (ae? const-decl "bool" measure_theory nil)
    (ae_in? const-decl "bool" measure_theory nil)
    (negligible nonempty-type-eq-decl nil measure_theory nil)
    (negligible_set? const-decl "bool" measure_theory nil)
    (m formal-const-decl "measure_type" integral nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     nil)
    (measure? const-decl "bool" generalized_measure_def nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (S formal-const-decl "sigma_algebra" integral nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (set type-eq-decl nil sets nil)
    (T formal-type-decl nil integral nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (null_set? const-decl "bool" measure_theory nil)
    (measurable_function? const-decl "bool" measure_space_def nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (phi const-decl "nat" measure_space nil)
    (complement const-decl "set" sets nil)
    (TRUE const-decl "bool" booleans nil)
    (abs_mult formula-decl nil real_props nil)
    (nn_integrable_le formula-decl nil nn_integral nil)
    (nn_integrable? const-decl "bool" nn_integral nil)
    (nn_integrable nonempty-type-eq-decl nil nn_integral nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nn_integrable_is_integrable judgement-tcc nil integral nil)
    (integral_ae_eq formula-decl nil integral nil)
    (X!1 skolem-const-decl "set[T]" integral nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (subset? const-decl "bool" sets nil)
    (subset_algebra_fullset name-judgement "(S)" integral nil)
    (measurable_fullset name-judgement "measurable_set[T, S]" integral
     nil)
    (ae_eq? const-decl "bool" measure_theory nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (member const-decl "bool" sets nil)
    (integral_nn formula-decl nil integral nil)
    (integral_scal formula-decl nil integral nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (integral const-decl "real" integral nil)
    (integrable_abs_def formula-decl nil integral nil)
    (prod_measurable judgement-tcc nil measure_space nil)
    (integrable_abs judgement-tcc nil integral nil)
    (nn_integrable_is_nn_integrable formula-decl nil integral nil)
    (integrable_scal judgement-tcc nil integral nil)
    (both_sides_times_pos_le1 formula-decl nil real_props nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (measurable_function nonempty-type-eq-decl nil measure_space_def
     nil)
    (integrable nonempty-type-eq-decl nil integral nil)
    (integrable? const-decl "bool" integral nil)
    (abs const-decl "[T -> nonneg_real]" real_fun_ops reals)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (integrable_scal application-judgement "integrable" integral nil)
    (integrable_abs application-judgement "integrable" integral nil)
    (abs_measurable application-judgement "measurable_function[T, S]"
     integral nil)
    (prod_measurable application-judgement "measurable_function[T, S]"
     integral nil)
    (phi_is_simple judgement-tcc nil measure_space nil)
    (simple? const-decl "bool" measure_space nil)
    (measurable_set nonempty-type-eq-decl nil measure_space_def nil)
    (measurable_set? const-decl "bool" measure_space_def nil)
    (measurable_complement judgement-tcc nil measure_space_def nil)
    (fullset const-decl "set" sets nil)
    (pointwise_ae? const-decl "bool" measure_theory nil))
   nil))
 (indefinite_integrable 0
  (indefinite_integrable-1 nil 3395576297
   ("" (skosimp)
    (("" (lemma "integral_prod" ("h" "phi(E!1)" "nnc" "1" "f" "f!1"))
      (("1" (case-replace "f!1 * phi(E!1)=phi(E!1) * f!1")
        (("1" (hide -1)
          (("1" (assert)
            (("1" (hide 2)
              (("1" (expand "phi")
                (("1" (expand "abs")
                  (("1" (expand "member")
                    (("1" (expand "abs")
                      (("1" (expand "ae_le?")
                        (("1" (expand "pointwise_ae?")
                          (("1" (expand "ae?")
                            (("1" (expand "fullset")
                              (("1"
                                (expand "ae_in?")
                                (("1"
                                  (inst + "emptyset[T]")
                                  (("1"
                                    (skosimp)
                                    (("1"
                                      (hide 1)
                                      (("1" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide-all-but 1)
          (("2" (apply-extensionality :hide? t)
            (("2" (expand "*") (("2" (assert) nil nil)) nil)) nil))
          nil))
        nil)
       ("2" (lemma "phi_is_simple" ("X" "E!1"))
        (("1" (expand "simple?") (("1" (flatten) nil nil)) nil)
         ("2" (typepred "E!1")
          (("2" (expand "measurable_set?") (("2" (propax) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnreal type-eq-decl nil real_types nil)
    (measurable_set nonempty-type-eq-decl nil measure_space_def nil)
    (measurable_set? const-decl "bool" measure_space_def nil)
    (phi const-decl "nat" measure_space nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (set type-eq-decl nil sets nil)
    (measurable_function nonempty-type-eq-decl nil measure_space_def
     nil)
    (measurable_function? const-decl "bool" measure_space_def nil)
    (S formal-const-decl "sigma_algebra" integral nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (integrable nonempty-type-eq-decl nil integral nil)
    (integrable? const-decl "bool" integral nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-type-decl nil integral nil)
    (integral_prod formula-decl nil integral nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (abs const-decl "[T -> nonneg_real]" real_fun_ops reals)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (pointwise_ae? const-decl "bool" measure_theory nil)
    (fullset const-decl "set" sets nil)
    (subset_algebra_emptyset name-judgement "(S)" integral nil)
    (null_emptyset name-judgement "null_set" integral nil)
    (finite_emptyset name-judgement "finite_set" sigma_countable
     sigma_set)
    (finite_emptyset name-judgement "finite_set" countable_setofsets
     sets_aux)
    (finite_emptyset name-judgement "finite_set" countable_props
     sets_aux)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (emptyset const-decl "set" sets nil)
    (negligible nonempty-type-eq-decl nil measure_theory nil)
    (negligible_set? const-decl "bool" measure_theory nil)
    (m formal-const-decl "measure_type" integral nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     nil)
    (measure? const-decl "bool" generalized_measure_def nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (ae_in? const-decl "bool" measure_theory nil)
    (ae? const-decl "bool" measure_theory nil)
    (subset_algebra_fullset name-judgement "(S)" integral nil)
    (measurable_fullset name-judgement "measurable_set[T, S]" integral
     nil)
    (ae_le? const-decl "bool" measure_theory nil)
    (member const-decl "bool" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (simple? const-decl "bool" measure_space nil)
    (phi_is_simple judgement-tcc nil measure_space nil))
   shostak))
 (integral_ae_le 0
  (integral_ae_le-1 nil 3391188035
   ("" (skosimp)
    (("" (assert)
      (("" (expand "ae_le?")
        (("" (expand "pointwise_ae?")
          (("" (expand "ae?")
            (("" (expand "fullset")
              (("" (expand "ae_in?")
                (("" (skosimp)
                  (("" (typepred "E!1")
                    (("" (expand "negligible_set?")
                      (("" (skosimp)
                        (("" (expand "null_set?")
                          (("" (flatten)
                            ((""
                              (lemma "integral_ae_eq"
                               ("f"
                                "f1!1"
                                "h"
                                "phi(complement(X!1))*f1!1"))
                              (("1"
                                (lemma
                                 "integral_ae_eq"
                                 ("f"
                                  "f2!1"
                                  "h"
                                  "phi(complement(X!1))*f2!1"))
                                (("1"
                                  (split)
                                  (("1"
                                    (split)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (replace -2)
                                        (("1"
                                          (replace -4)
                                          (("1"
                                            (hide -2 -4)
                                            (("1"
                                              (lemma
                                               "integrable_diff"
                                               ("f1"
                                                "phi(complement(X!1)) * f2!1"
                                                "f2"
                                                "phi(complement(X!1)) * f1!1"))
                                              (("1"
                                                (lemma
                                                 "integral_diff"
                                                 ("f1"
                                                  "phi(complement(X!1)) * f2!1"
                                                  "f2"
                                                  "phi(complement(X!1)) * f1!1"))
                                                (("1"
                                                  (lemma
                                                   "integral_nonneg"
                                                   ("f"
                                                    "phi(complement(X!1)) * f2!1 - phi(complement(X!1)) * f1!1"))
                                                  (("1"
                                                    (split -1)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (hide-all-but
                                                       (-8 -9 1))
                                                      (("2"
                                                        (skosimp)
                                                        (("2"
                                                          (expand
                                                           "subset?")
                                                          (("2"
                                                            (inst
                                                             -
                                                             "x!1")
                                                            (("2"
                                                              (inst
                                                               -
                                                               "x!1")
                                                              (("2"
                                                                (expand
                                                                 "member")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide -1 2)
                                      (("2"
                                        (expand "ae_eq?")
                                        (("2"
                                          (expand "pointwise_ae?")
                                          (("2"
                                            (expand "*")
                                            (("2"
                                              (expand "ae?")
                                              (("2"
                                                (expand "fullset")
                                                (("2"
                                                  (expand "ae_in?")
                                                  (("2"
                                                    (inst + "X!1")
                                                    (("1"
                                                      (skosimp)
                                                      (("1"
                                                        (expand
                                                         "complement")
                                                        (("1"
                                                          (expand
                                                           "phi")
                                                          (("1"
                                                            (expand
                                                             "member")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       "negligible_set?")
                                                      (("2"
                                                        (inst + "X!1")
                                                        (("2"
                                                          (expand
                                                           "null_set?")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (expand
                                                               "subset?")
                                                              (("2"
                                                                (expand
                                                                 "member")
                                                                (("2"
                                                                  (skosimp)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide -1 2)
                                    (("2"
                                      (expand "ae_eq?")
                                      (("2"
                                        (expand "pointwise_ae?")
                                        (("2"
                                          (expand "ae?")
                                          (("2"
                                            (expand "fullset")
                                            (("2"
                                              (expand "ae_in?")
                                              (("2"
                                                (inst + "X!1")
                                                (("1"
                                                  (skosimp)
                                                  (("1"
                                                    (expand
                                                     "complement")
                                                    (("1"
                                                      (expand "phi")
                                                      (("1"
                                                        (expand
                                                         "member")
                                                        (("1"
                                                          (expand "*")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand
                                                   "negligible_set?")
                                                  (("2"
                                                    (inst + "X!1")
                                                    (("2"
                                                      (expand
                                                       "null_set?")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (expand
                                                           "subset?")
                                                          (("2"
                                                            (skosimp)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (rewrite "prod_measurable")
                                  (("2"
                                    (lemma
                                     "phi_is_simple"
                                     ("X" "complement[T](X!1)"))
                                    (("1"
                                      (expand "simple?")
                                      (("1" (propax) nil nil))
                                      nil)
                                     ("2"
                                      (lemma
                                       "measurable_complement"
                                       ("a" "X!1"))
                                      (("2"
                                        (expand "measurable_set?")
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (lemma
                                 "measurable_complement"
                                 ("a" "X!1"))
                                (("2"
                                  (rewrite "prod_measurable")
                                  (("2"
                                    (lemma
                                     "phi_is_simple"
                                     ("X" "complement[T](X!1)"))
                                    (("1"
                                      (expand "simple?")
                                      (("1" (propax) nil nil))
                                      nil)
                                     ("2"
                                      (expand "measurable_set?")
                                      (("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (pointwise_ae? const-decl "bool" measure_theory nil)
    (fullset const-decl "set" sets nil)
    (null_set? const-decl "bool" measure_theory nil)
    (integral_ae_eq formula-decl nil integral nil)
    (integrable? const-decl "bool" integral nil)
    (integrable nonempty-type-eq-decl nil integral nil)
    (measurable_function? const-decl "bool" measure_space_def nil)
    (measurable_function nonempty-type-eq-decl nil measure_space_def
     nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (phi const-decl "nat" measure_space nil)
    (complement const-decl "set" sets nil)
    (prod_measurable judgement-tcc nil measure_space nil)
    (measurable_complement judgement-tcc nil measure_space_def nil)
    (measurable_set? const-decl "bool" measure_space_def nil)
    (measurable_set nonempty-type-eq-decl nil measure_space_def nil)
    (simple? const-decl "bool" measure_space nil)
    (phi_is_simple judgement-tcc nil measure_space nil)
    (measurable_fullset name-judgement "measurable_set[T, S]" integral
     nil)
    (subset_algebra_fullset name-judgement "(S)" integral nil)
    (X!1 skolem-const-decl "set[T]" integral nil)
    (ae_eq? const-decl "bool" measure_theory nil)
    (integrable_diff judgement-tcc nil integral nil)
    (integral_nonneg formula-decl nil integral nil)
    (- const-decl "[T -> real]" real_fun_ops reals)
    (subset? const-decl "bool" sets nil)
    (TRUE const-decl "bool" booleans nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (member const-decl "bool" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (integral_diff formula-decl nil integral nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil integral nil)
    (set type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (setofsets type-eq-decl nil sets nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (S formal-const-decl "sigma_algebra" integral nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (measure? const-decl "bool" generalized_measure_def nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     nil)
    (m formal-const-decl "measure_type" integral nil)
    (negligible_set? const-decl "bool" measure_theory nil)
    (negligible nonempty-type-eq-decl nil measure_theory nil)
    (ae_in? const-decl "bool" measure_theory nil)
    (ae? const-decl "bool" measure_theory nil)
    (ae_le? const-decl "bool" measure_theory nil))
   shostak))
 (integral_ae_abs 0
  (integral_ae_abs-2 nil 3722186343
   ("" (skosimp)
    (("" (lemma "integrable_abs" ("f" "f!1"))
      (("" (copy -2)
        (("" (expand "ae_le?" -1)
          (("" (expand "pointwise_ae?")
            (("" (expand "ae?")
              (("" (expand "fullset")
                (("" (expand "ae_in?")
                  (("" (skosimp)
                    (("" (typepred "E!1")
                      (("" (expand "negligible_set?")
                        (("" (skosimp)
                          ((""
                            (case " measurable_set?[T, S](complement[T](X!1))")
                            (("1"
                              (lemma "indefinite_integrable"
                               ("f" "abs(f!1)" "E" "complement(X!1)"))
                              (("1"
                                (lemma
                                 "nn_integrable_le"
                                 ("g"
                                  "phi(complement(X!1))*abs(h!1)"
                                  "f"
                                  "phi(complement(X!1)) * abs(f!1)"))
                                (("1"
                                  (split -1)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (lemma
                                       "nn_integrable_is_integrable")
                                      (("1"
                                        (inst
                                         -
                                         "phi(complement(X!1)) * abs(h!1)")
                                        (("1"
                                          (rewrite
                                           "integral_nn"
                                           *
                                           :dir
                                           rl)
                                          (("1"
                                            (rewrite
                                             "integral_nn"
                                             *
                                             :dir
                                             rl)
                                            (("1"
                                              (lemma
                                               "integrable_abs_def"
                                               ("h"
                                                "phi(complement(X!1)) * h!1"))
                                              (("1"
                                                (case-replace
                                                 "abs(phi(complement(X!1)) * h!1)=phi(complement(X!1)) * abs(h!1)")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (hide -1)
                                                    (("1"
                                                      (lemma
                                                       "integral_ae_eq"
                                                       ("f"
                                                        "phi(complement(X!1)) * h!1"
                                                        "h"
                                                        "h!1"))
                                                      (("1"
                                                        (split -1)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (lemma
                                                               "integral_abs"
                                                               ("f"
                                                                "phi(complement(X!1)) * h!1"))
                                                              (("1"
                                                                (replace
                                                                 -3)
                                                                (("1"
                                                                  (case-replace
                                                                   "phi(complement(X!1)) * abs(h!1)=abs(phi(complement(X!1)) * h!1)")
                                                                  (("1"
                                                                    (hide
                                                                     -1)
                                                                    (("1"
                                                                      (name-replace
                                                                       "I_0"
                                                                       "abs(integral.integral(h!1))")
                                                                      (("1"
                                                                        (name-replace
                                                                         "I_1"
                                                                         "integral.integral(abs(phi(complement(X!1)) * h!1))")
                                                                        (("1"
                                                                          (lemma
                                                                           "integral_ae_eq"
                                                                           ("f"
                                                                            "abs(f!1)"
                                                                            "h"
                                                                            "phi(complement(X!1)) * abs(f!1)"))
                                                                          (("1"
                                                                            (split
                                                                             -1)
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (expand
                                                                               "ae_eq?")
                                                                              (("2"
                                                                                (expand
                                                                                 "pointwise_ae?")
                                                                                (("2"
                                                                                  (expand
                                                                                   "ae?")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "fullset")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "ae_in?")
                                                                                      (("2"
                                                                                        (inst
                                                                                         +
                                                                                         "X!1")
                                                                                        (("1"
                                                                                          (skosimp)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "*")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "complement")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "member")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "phi")
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "member")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (expand
                                                                                           "negligible_set?")
                                                                                          (("2"
                                                                                            (inst
                                                                                             +
                                                                                             "X!1")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "subset?")
                                                                                                (("2"
                                                                                                  (skosimp)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide-all-but
                                                                             (-9
                                                                              1
                                                                              -13))
                                                                            (("2"
                                                                              (rewrite
                                                                               "prod_measurable")
                                                                              (("2"
                                                                                (lemma
                                                                                 "phi_is_simple")
                                                                                (("2"
                                                                                  (expand
                                                                                   "measurable_set?")
                                                                                  (("2"
                                                                                    (inst?)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "simple?")
                                                                                      (("2"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     1)
                                                                    (("2"
                                                                      (apply-extensionality
                                                                       :hide?
                                                                       t)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide 2)
                                                          (("2"
                                                            (expand
                                                             "ae_eq?")
                                                            (("2"
                                                              (expand
                                                               "pointwise_ae?")
                                                              (("2"
                                                                (expand
                                                                 "ae?")
                                                                (("2"
                                                                  (expand
                                                                   "fullset")
                                                                  (("2"
                                                                    (expand
                                                                     "ae_in?")
                                                                    (("2"
                                                                      (inst
                                                                       +
                                                                       "X!1")
                                                                      (("1"
                                                                        (skosimp)
                                                                        (("1"
                                                                          (expand
                                                                           "*")
                                                                          (("1"
                                                                            (expand
                                                                             "complement")
                                                                            (("1"
                                                                              (expand
                                                                               "member")
                                                                              (("1"
                                                                                (expand
                                                                                 "phi")
                                                                                (("1"
                                                                                  (expand
                                                                                   "member")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         "negligible_set?")
                                                                        (("2"
                                                                          (inst
                                                                           +
                                                                           "X!1")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (expand
                                                                               "subset?")
                                                                              (("2"
                                                                                (skosimp)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but 1)
                                                  (("2"
                                                    (apply-extensionality
                                                     :hide?
                                                     t)
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (rewrite
                                                 "prod_measurable")
                                                (("2"
                                                  (hide-all-but (1 -5))
                                                  (("2"
                                                    (use
                                                     "phi_is_simple")
                                                    (("1"
                                                      (expand
                                                       "simple?")
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       "measurable_set?")
                                                      (("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide-all-but (1 -4 -5))
                                    (("2"
                                      (skosimp)
                                      (("2"
                                        (expand "subset?")
                                        (("2"
                                          (inst - "x!1")
                                          (("2"
                                            (inst - "x!1")
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (rewrite "prod_measurable")
                                  (("2"
                                    (lemma
                                     "phi_is_simple"
                                     ("X" "complement[T](X!1)"))
                                    (("1"
                                      (expand "simple?")
                                      (("1" (propax) nil nil))
                                      nil)
                                     ("2"
                                      (expand "measurable_set?")
                                      (("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (hide 2)
                                  (("3"
                                    (split)
                                    (("1"
                                      (hide-all-but 1)
                                      (("1" (grind) nil nil))
                                      nil)
                                     ("2"
                                      (lemma
                                       "nn_integrable_is_nn_integrable"
                                       ("f"
                                        "phi(complement(X!1)) * abs(f!1)"))
                                      (("1"
                                        (split -1)
                                        (("1" (propax) nil nil)
                                         ("2"
                                          (hide-all-but 1)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil)
                                       ("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (propax) nil nil))
                              nil)
                             ("2" (expand "null_set?")
                              (("2"
                                (flatten)
                                (("2"
                                  (rewrite "measurable_complement")
                                  nil
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((integrable nonempty-type-eq-decl nil integral nil)
    (integrable? const-decl "bool" integral nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-type-decl nil integral nil)
    (integrable_abs judgement-tcc nil integral nil)
    (ae_le? const-decl "bool" measure_theory nil)
    (ae? const-decl "bool" measure_theory nil)
    (ae_in? const-decl "bool" measure_theory nil)
    (negligible nonempty-type-eq-decl nil measure_theory nil)
    (negligible_set? const-decl "bool" measure_theory nil)
    (m formal-const-decl "measure_type" integral nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     nil)
    (measure? const-decl "bool" generalized_measure_def nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (S formal-const-decl "sigma_algebra" integral nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (set type-eq-decl nil sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (null_set? const-decl "bool" measure_theory nil)
    (measurable_complement judgement-tcc nil measure_space_def nil)
    (integrable_abs application-judgement "integrable" integral nil)
    (indefinite_integrable formula-decl nil integral nil)
    (measurable_set nonempty-type-eq-decl nil measure_space_def nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (abs const-decl "[T -> nonneg_real]" real_fun_ops reals)
    (nn_integrable_is_nn_integrable formula-decl nil integral nil)
    (nn_integrable_is_integrable judgement-tcc nil integral nil)
    (integral_nn formula-decl nil integral nil)
    (integrable_abs_def formula-decl nil integral nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (h!1 skolem-const-decl "measurable_function[T, S]" integral nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (member const-decl "bool" sets nil)
    (integral_ae_eq formula-decl nil integral nil)
    (integral_abs formula-decl nil integral nil)
    (integral const-decl "real" integral nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (ae_eq? const-decl "bool" measure_theory nil)
    (measurable_fullset name-judgement "measurable_set[T, S]" integral
     nil)
    (subset_algebra_fullset name-judgement "(S)" integral nil)
    (subset? const-decl "bool" sets nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (X!1 skolem-const-decl "set[T]" integral nil)
    (prod_measurable judgement-tcc nil measure_space nil)
    (simple? const-decl "bool" measure_space nil)
    (phi_is_simple judgement-tcc nil measure_space nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (measurable_function nonempty-type-eq-decl nil measure_space_def
     nil)
    (measurable_function? const-decl "bool" measure_space_def nil)
    (phi const-decl "nat" measure_space nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (nn_integrable nonempty-type-eq-decl nil nn_integral nil)
    (nn_integrable? const-decl "bool" nn_integral nil)
    (nn_integrable_le formula-decl nil nn_integral nil)
    (abs_measurable application-judgement "measurable_function[T, S]"
     integral nil)
    (complement const-decl "set" sets nil)
    (measurable_set? const-decl "bool" measure_space_def nil)
    (fullset const-decl "set" sets nil)
    (pointwise_ae? const-decl "bool" measure_theory nil))
   nil))
 (bounded_is_indefinite_integrable 0
  (bounded_is_indefinite_integrable-2 "" 3789904155
   ("" (skosimp)
    (("" (lemma "sup_norm_prop" ("f" "phi(F!1) * h!1"))
      (("1" (flatten)
        (("1" (name-replace "K" "sup_norm(phi(F!1) * h!1)")
          (("1" (case "nonempty?(fullset[T])")
            (("1" (case "K>=0")
              (("1" (lemma "isf_is_integrable")
                (("1" (inst - "K*phi(F!1)")
                  (("1"
                    (lemma "integral_ae_abs"
                     ("h" "phi(F!1) * h!1" "f" "K * phi(F!1)"))
                    (("1" (case-replace "abs(K * phi(F!1))=K*phi(F!1)")
                      (("1" (hide -1)
                        (("1" (rewrite "integral_scal" -1)
                          (("1" (rewrite "integral_phi" -1)
                            (("1" (assert)
                              (("1"
                                (split -1)
                                (("1"
                                  (flatten)
                                  (("1" (assert) nil nil))
                                  nil)
                                 ("2"
                                  (hide 2 -1)
                                  (("2"
                                    (expand "ae_le?")
                                    (("2"
                                      (expand "pointwise_ae?")
                                      (("2"
                                        (expand "ae?")
                                        (("2"
                                          (expand "fullset")
                                          (("2"
                                            (expand "ae_in?")
                                            (("2"
                                              (inst + "emptyset[T]")
                                              (("2"
                                                (skosimp)
                                                (("2"
                                                  (expand "*")
                                                  (("2"
                                                    (inst - "x!1")
                                                    (("2"
                                                      (expand
                                                       "abs"
                                                       (-2 2))
                                                      (("2"
                                                        (expand "phi")
                                                        (("2"
                                                          (expand
                                                           "member")
                                                          (("2"
                                                            (case-replace
                                                             "F!1(x!1)")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide-all-but (-3 1))
                        (("2" (apply-extensionality :hide? t)
                          (("1" (grind) nil nil) ("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide-all-but (-1 -2 1))
                (("2" (expand "fullset")
                  (("2" (expand "nonempty?")
                    (("2" (expand "empty?")
                      (("2" (skosimp)
                        (("2" (expand "member")
                          (("2" (inst - "x!1") (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "nonempty?")
              (("2" (case-replace "F!1=emptyset[T]")
                (("1" (hide -3 -4 -5)
                  (("1"
                    (case-replace
                     "phi(emptyset[T]) * h!1 = lambda x: 0")
                    (("1" (rewrite "integral_zero")
                      (("1" (expand "mu")
                        (("1" (typepred "m")
                          (("1" (expand "measure?")
                            (("1" (flatten)
                              (("1"
                                (expand "measure_empty?")
                                (("1"
                                  (replace -1)
                                  (("1"
                                    (expand "abs")
                                    (("1"
                                      (lemma "nn_integrable_zero")
                                      (("1"
                                        (rewrite
                                         "nn_integrable_is_integrable")
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 2)
                      (("2" (apply-extensionality :hide? t)
                        (("2" (expand "*")
                          (("2" (expand "phi")
                            (("2" (expand "member")
                              (("2"
                                (expand "emptyset")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 2 -3 -4 -2)
                  (("2" (apply-extensionality :hide? t)
                    (("2" (expand "emptyset")
                      (("2" (expand "fullset")
                        (("2" (expand "empty?")
                          (("2" (inst - "x!1")
                            (("2" (expand "member")
                              (("2" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (propax) nil nil))
      nil))
    nil)
   ((T formal-type-decl nil integral nil)
    (measurable_function nonempty-type-eq-decl nil measure_space_def
     nil)
    (measurable_function? const-decl "bool" measure_space_def nil)
    (mu_fin? const-decl "bool" measure_props nil)
    (m formal-const-decl "measure_type" integral nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     nil)
    (measure? const-decl "bool" generalized_measure_def nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (nnreal type-eq-decl nil real_types nil)
    (measurable_set nonempty-type-eq-decl nil measure_space_def nil)
    (measurable_set? const-decl "bool" measure_space_def nil)
    (phi const-decl "nat" measure_space nil)
    (S formal-const-decl "sigma_algebra" integral nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (set type-eq-decl nil sets nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (bounded nonempty-type-eq-decl nil sup_norm nil)
    (bounded? const-decl "bool" sup_norm nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (sup_norm_prop formula-decl nil sup_norm nil)
    (prod_measurable application-judgement "measurable_function[T, S]"
     integral nil)
    (isf_phi application-judgement "isf" integral nil)
    (sup_norm const-decl "nnreal" sup_norm nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (integral_zero formula-decl nil integral nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nn_integrable_zero formula-decl nil nn_integral nil)
    (nn_integrable_is_integrable judgement-tcc nil integral nil)
    (nn_integrable? const-decl "bool" nn_integral nil)
    (nn_integrable nonempty-type-eq-decl nil nn_integral nil)
    (measure_empty? const-decl "bool" generalized_measure_def nil)
    (mu const-decl "nnreal" measure_props nil)
    (isf_scal application-judgement "isf" integral nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (isf nonempty-type-eq-decl nil isf nil)
    (isf? const-decl "bool" isf nil)
    (abs const-decl "[T -> nonneg_real]" real_fun_ops reals)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (isf_abs application-judgement "isf" integral nil)
    (integral_scal formula-decl nil integral nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (abs_measurable application-judgement "measurable_function[T, S]"
     integral nil)
    (subset_algebra_fullset name-judgement "(S)" integral nil)
    (measurable_fullset name-judgement "measurable_set[T, S]" integral
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (pointwise_ae? const-decl "bool" measure_theory nil)
    (subset_algebra_emptyset name-judgement "(S)" integral nil)
    (null_emptyset name-judgement "null_set" integral nil)
    (finite_emptyset name-judgement "finite_set" sigma_countable
     sigma_set)
    (finite_emptyset name-judgement "finite_set" countable_setofsets
     sets_aux)
    (finite_emptyset name-judgement "finite_set" countable_props
     sets_aux)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (emptyset const-decl "set" sets nil)
    (negligible nonempty-type-eq-decl nil measure_theory nil)
    (negligible_set? const-decl "bool" measure_theory nil)
    (member const-decl "bool" sets nil)
    (abs_nat formula-decl nil abs_lems reals)
    (TRUE const-decl "bool" booleans nil)
    (ae_in? const-decl "bool" measure_theory nil)
    (ae? const-decl "bool" measure_theory nil)
    (ae_le? const-decl "bool" measure_theory nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (integral_phi formula-decl nil integral nil)
    (F!1 skolem-const-decl "(mu_fin?)" integral nil)
    (K skolem-const-decl "nnreal" integral nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (integrable nonempty-type-eq-decl nil integral nil)
    (integrable? const-decl "bool" integral nil)
    (integral_ae_abs formula-decl nil integral nil)
    (isf_is_integrable judgement-tcc nil integral nil)
    (empty? const-decl "bool" sets nil)
    (fullset const-decl "set" sets nil)
    (nonempty? const-decl "bool" sets nil))
   shostak)
  (bounded_is_indefinite_integrable-1 nil 3452145726
   ("" (skosimp)
    (("" (lemma "sup_norm_prop" ("f" "phi(F!1) * h!1"))
      (("1" (flatten)
        (("1" (name-replace "K" "sup_norm(phi(F!1) * h!1)")
          (("1" (case "nonempty?(fullset[T])")
            (("1" (case "K>=0")
              (("1" (lemma "isf_is_integrable")
                (("1" (inst - "K*phi(F!1)")
                  (("1"
                    (lemma "integral_ae_abs"
                     ("h" "phi(F!1) * h!1" "f" "K * phi(F!1)"))
                    (("1" (case-replace "abs(K * phi(F!1))=K*phi(F!1)")
                      (("1" (hide -1)
                        (("1" (rewrite "integral_scal" -1)
                          (("1" (rewrite "integral_phi" -1)
                            (("1" (assert)
                              (("1"
                                (split -1)
                                (("1"
                                  (flatten)
                                  (("1" (assert) nil nil))
                                  nil)
                                 ("2"
                                  (hide 2 -1)
                                  (("2"
                                    (expand "ae_le?")
                                    (("2"
                                      (expand "pointwise_ae?")
                                      (("2"
                                        (expand "ae?")
                                        (("2"
                                          (expand "fullset")
                                          (("2"
                                            (expand "ae_in?")
                                            (("2"
                                              (inst + "emptyset[T]")
                                              (("2"
                                                (skosimp)
                                                (("2"
                                                  (expand "*")
                                                  (("2"
                                                    (inst - "x!1")
                                                    (("2"
                                                      (expand
                                                       "abs"
                                                       (-2 2))
                                                      (("2"
                                                        (expand "phi")
                                                        (("2"
                                                          (expand
                                                           "member")
                                                          (("2"
                                                            (case-replace
                                                             "F!1(x!1)")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              (("2"
                                                                (rewrite
                                                                 "abs_mult")
                                                                (("2"
                                                                  (expand
                                                                   "abs"
                                                                   3
                                                                   1)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide-all-but (-3 1))
                        (("2" (apply-extensionality :hide? t)
                          (("1" (grind) nil nil) ("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide-all-but (-1 -2 1))
                (("2" (expand "fullset")
                  (("2" (expand "nonempty?")
                    (("2" (expand "empty?")
                      (("2" (skosimp)
                        (("2" (expand "member")
                          (("2" (inst - "x!1") (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "nonempty?")
              (("2" (case-replace "F!1=emptyset[T]")
                (("1" (hide -3 -4 -5)
                  (("1"
                    (case-replace
                     "phi(emptyset[T]) * h!1 = lambda x: 0")
                    (("1" (rewrite "integral_zero")
                      (("1" (expand "mu")
                        (("1" (typepred "m")
                          (("1" (expand "measure?")
                            (("1" (flatten)
                              (("1"
                                (expand "measure_empty?")
                                (("1"
                                  (replace -1)
                                  (("1"
                                    (expand "abs")
                                    (("1"
                                      (lemma "nn_integrable_zero")
                                      (("1"
                                        (rewrite
                                         "nn_integrable_is_integrable")
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 2)
                      (("2" (apply-extensionality :hide? t)
                        (("2" (expand "*")
                          (("2" (expand "phi")
                            (("2" (expand "member")
                              (("2"
                                (expand "emptyset")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 2 -3 -4 -2)
                  (("2" (apply-extensionality :hide? t)
                    (("2" (expand "emptyset")
                      (("2" (expand "fullset")
                        (("2" (expand "empty?")
                          (("2" (inst - "x!1")
                            (("2" (expand "member")
                              (("2" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (propax) nil nil))
      nil))
    nil)
   ((measurable_function nonempty-type-eq-decl nil measure_space_def
     nil)
    (measurable_function? const-decl "bool" measure_space_def nil)
    (mu_fin? const-decl "bool" measure_props nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     nil)
    (measure? const-decl "bool" generalized_measure_def nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (measurable_set nonempty-type-eq-decl nil measure_space_def nil)
    (measurable_set? const-decl "bool" measure_space_def nil)
    (phi const-decl "nat" measure_space nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (setofsets type-eq-decl nil sets nil)
    (set type-eq-decl nil sets nil)
    (bounded nonempty-type-eq-decl nil sup_norm nil)
    (bounded? const-decl "bool" sup_norm nil)
    (sup_norm_prop formula-decl nil sup_norm nil)
    (sup_norm const-decl "nnreal" sup_norm nil)
    (nn_integrable_zero formula-decl nil nn_integral nil)
    (nn_integrable? const-decl "bool" nn_integral nil)
    (nn_integrable nonempty-type-eq-decl nil nn_integral nil)
    (measure_empty? const-decl "bool" generalized_measure_def nil)
    (mu const-decl "nnreal" measure_props nil)
    (isf nonempty-type-eq-decl nil isf nil)
    (isf? const-decl "bool" isf nil)
    (abs const-decl "[T -> nonneg_real]" real_fun_ops reals)
    (pointwise_ae? const-decl "bool" measure_theory nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (emptyset const-decl "set" sets nil)
    (negligible nonempty-type-eq-decl nil measure_theory nil)
    (negligible_set? const-decl "bool" measure_theory nil)
    (member const-decl "bool" sets nil)
    (abs_nat formula-decl nil abs_lems reals)
    (ae_in? const-decl "bool" measure_theory nil)
    (ae_le? const-decl "bool" measure_theory nil)
    (empty? const-decl "bool" sets nil)
    (fullset const-decl "set" sets nil)
    (nonempty? const-decl "bool" sets nil))
   shostak))
 (integral_abs_0 0
  (integral_abs_0-2 "" 3789904158
   ("" (skosimp)
    (("" (lemma "nn_integrable_is_nn_integrable" ("f" "abs(f!1)"))
      (("" (split -1)
        (("1" (expand "nn_integrable?")
          (("1" (skosimp)
            (("1" (typepred "u!1")
              (("1" (case "forall (n:nat): ae_0?(u!1(n))")
                (("1" (expand "pointwise_convergence?")
                  (("1" (expand "convergent?")
                    (("1" (skosimp)
                      (("1"
                        (lemma "ae_eq_convergence"
                         ("F" "u!1" "G" "lambda (n:nat): lambda x: 0"
                          "f" "abs(f!1)"))
                        (("1" (split)
                          (("1" (hide-all-but (-1 1))
                            (("1" (expand "ae_convergence?")
                              (("1"
                                (expand "ae_0?")
                                (("1"
                                  (expand "pointwise_ae?")
                                  (("1"
                                    (expand "ae?")
                                    (("1"
                                      (expand "fullset")
                                      (("1"
                                        (expand "ae_convergence_in?")
                                        (("1"
                                          (expand "ae_in?")
                                          (("1"
                                            (skosimp)
                                            (("1"
                                              (typepred "E!1")
                                              (("1"
                                                (expand
                                                 "negligible_set?")
                                                (("1"
                                                  (skosimp)
                                                  (("1"
                                                    (inst + "X!1")
                                                    (("1"
                                                      (skosimp)
                                                      (("1"
                                                        (expand
                                                         "subset?")
                                                        (("1"
                                                          (inst
                                                           -
                                                           "x!1")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (inst
                                                               -
                                                               "x!1")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (lemma
                                                                   "hausdorff_convergence.unique_limit"
                                                                   ("l1"
                                                                    "abs(f!1)(x!1)"
                                                                    "l2"
                                                                    "0"
                                                                    "u"
                                                                    "LAMBDA (n:nat): 0"))
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (split
                                                                       -1)
                                                                      (("1"
                                                                        (expand
                                                                         "abs")
                                                                        (("1"
                                                                          (hide-all-but
                                                                           (-1
                                                                            3))
                                                                          (("1"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide-all-but
                                                                         1)
                                                                        (("2"
                                                                          (expand
                                                                           "convergence?")
                                                                          (("2"
                                                                            (skosimp)
                                                                            (("2"
                                                                              (inst
                                                                               +
                                                                               "0")
                                                                              (("2"
                                                                                (skosimp)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      (("2"
                                                        (expand
                                                         "negligible_set?")
                                                        (("2"
                                                          (inst
                                                           +
                                                           "X!1")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (expand
                                                               "subset?")
                                                              (("2"
                                                                (skosimp)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide-all-but (-3 1))
                            (("2" (expand "ae_convergence?")
                              (("2"
                                (expand "fullset")
                                (("2"
                                  (expand "ae_convergence_in?")
                                  (("2"
                                    (expand "ae_in?")
                                    (("2"
                                      (inst + "emptyset[T]")
                                      (("2"
                                        (expand "emptyset")
                                        (("2"
                                          (skosimp)
                                          (("2"
                                            (expand "member")
                                            (("2"
                                              (inst - "x!1")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (hide-all-but (-1 1))
                            (("3" (skosimp)
                              (("3"
                                (inst - "n!1")
                                (("3"
                                  (expand "ae_0?")
                                  (("3"
                                    (expand "pointwise_ae?")
                                    (("3"
                                      (expand "ae_eq?")
                                      (("3"
                                        (expand "pointwise_ae?")
                                        (("3" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (skosimp)
                  (("2" (hide 2)
                    (("2" (lemma "isf_ae_ge_0" ("i" "u!1(n!1)"))
                      (("2" (assert)
                        (("2" (hide 2)
                          (("2" (split)
                            (("1" (expand "ae_nonneg?")
                              (("1"
                                (expand "pointwise_ae?")
                                (("1"
                                  (expand "ae?")
                                  (("1"
                                    (expand "fullset")
                                    (("1"
                                      (expand "ae_in?")
                                      (("1"
                                        (inst + "emptyset[T]")
                                        (("1"
                                          (skosimp)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand
                                               "increasing_nn_isf?")
                                              (("1"
                                                (typepred "u!1(n!1)")
                                                (("1"
                                                  (expand "nn_isf?")
                                                  (("1"
                                                    (inst - "x!1")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2"
                              (lemma "integral_nn" ("g" "abs(f!1)"))
                              (("1"
                                (replace -1)
                                (("1"
                                  (hide -1)
                                  (("1"
                                    (expand "nn_integral")
                                    (("1"
                                      (rewrite "limit_def")
                                      (("1"
                                        (lemma
                                         "nn_convergence"
                                         ("u1"
                                          "u!1"
                                          "f"
                                          "abs(f!1)"
                                          "u2"
                                          "choose({u: increasing_nn_isf[T, S, m] |
                              pointwise_convergence?(u, abs(f!1))})"))
                                        (("1"
                                          (assert)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (hide -1)
                                              (("1"
                                                (lemma
                                                 "hausdorff_convergence.limit_def"
                                                 ("v"
                                                  "(isf_integral o
             choose({u: increasing_nn_isf[T, S, m] |
                       pointwise_convergence?(u, abs(f!1))}))"
                                                  "l"
                                                  "0"))
                                                (("1"
                                                  (replace -1 -6 rl)
                                                  (("1"
                                                    (replace -6)
                                                    (("1"
                                                      (hide -1 -6)
                                                      (("1"
                                                        (rewrite
                                                         "limit_def"
                                                         -1)
                                                        (("1"
                                                          (hide -4)
                                                          (("1"
                                                            (rewrite
                                                             "metric_convergence_def"
                                                             -)
                                                            (("1"
                                                              (expand
                                                               "metric_converges_to")
                                                              (("1"
                                                                (lemma
                                                                 "isf_integral_pos"
                                                                 ("i"
                                                                  "u!1(n!1)"))
                                                                (("1"
                                                                  (split
                                                                   -1)
                                                                  (("1"
                                                                    (case
                                                                     "isf_integral(u!1(n!1)) > 0")
                                                                    (("1"
                                                                      (hide
                                                                       -2
                                                                       1)
                                                                      (("1"
                                                                        (inst
                                                                         -
                                                                         "isf_integral(u!1(n!1))")
                                                                        (("1"
                                                                          (skosimp)
                                                                          (("1"
                                                                            (inst
                                                                             -
                                                                             "n!1+n!2")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (expand
                                                                                 "ball")
                                                                                (("1"
                                                                                  (expand
                                                                                   "o ")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "increasing_nn_isf?")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "pointwise_increasing?")
                                                                                      (("1"
                                                                                        (lemma
                                                                                         "isf_integral_le"
                                                                                         ("i1"
                                                                                          "u!1(n!1)"
                                                                                          "i2"
                                                                                          "u!1(n!1+n!2)"))
                                                                                        (("1"
                                                                                          (split
                                                                                           -1)
                                                                                          (("1"
                                                                                            (name-replace
                                                                                             "I_0"
                                                                                             "isf_integral(u!1(n!1))")
                                                                                            (("1"
                                                                                              (name-replace
                                                                                               "I_1"
                                                                                               "isf_integral(u!1(n!1+n!2))")
                                                                                              (("1"
                                                                                                (hide
                                                                                                 -4
                                                                                                 -5)
                                                                                                (("1"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (skosimp)
                                                                                            (("2"
                                                                                              (inst
                                                                                               -
                                                                                               "x!1")
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "increasing?")
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -
                                                                                                   "n!1"
                                                                                                   "n!1+n!2")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (skosimp)
                                                                    (("2"
                                                                      (expand
                                                                       "increasing_nn_isf?")
                                                                      (("2"
                                                                        (expand
                                                                         "pointwise_increasing?")
                                                                        (("2"
                                                                          (typepred
                                                                           "u!1(n!1)")
                                                                          (("2"
                                                                            (expand
                                                                             "nn_isf?")
                                                                            (("2"
                                                                              (inst
                                                                               -
                                                                               "x!1")
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "nonempty?")
                                          (("2"
                                            (expand "empty?")
                                            (("2"
                                              (expand "member")
                                              (("2"
                                                (inst - "u!1")
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "nonempty?")
                                        (("2"
                                          (expand "empty?")
                                          (("2"
                                            (inst - "u!1")
                                            (("2"
                                              (expand "member")
                                              (("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (lemma
                                 "nn_integrable_is_nn_integrable"
                                 ("f" "abs(f!1)"))
                                (("2"
                                  (split -1)
                                  (("1" (propax) nil nil)
                                   ("2"
                                    (hide-all-but 1)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((abs const-decl "[T -> nonneg_real]" real_fun_ops reals)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (integrable nonempty-type-eq-decl nil integral nil)
    (integrable? const-decl "bool" integral nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-type-decl nil integral nil)
    (nn_integrable_is_nn_integrable formula-decl nil integral nil)
    (integrable_abs application-judgement "integrable" integral nil)
    (nn_integrable? const-decl "bool" nn_integral nil)
    (increasing_nn_isf nonempty-type-eq-decl nil nn_integral nil)
    (increasing_nn_isf? const-decl "bool" nn_integral nil)
    (sequence type-eq-decl nil sequences nil)
    (nn_isf nonempty-type-eq-decl nil nn_integral nil)
    (nn_isf? const-decl "bool" nn_integral nil)
    (isf nonempty-type-eq-decl nil isf nil)
    (isf? const-decl "bool" isf nil)
    (m formal-const-decl "measure_type" integral nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     nil)
    (measure? const-decl "bool" generalized_measure_def nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (nnreal type-eq-decl nil real_types nil)
    (S formal-const-decl "sigma_algebra" integral nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (isf_ae_ge_0 formula-decl nil isf nil)
    (integral_nn formula-decl nil integral nil)
    (nn_integrable nonempty-type-eq-decl nil nn_integral nil)
    (limit_def formula-decl nil hausdorff_convergence topology)
    (convergent type-eq-decl nil topological_convergence topology)
    (O const-decl "T3" function_props nil)
    (isf_integral const-decl "real" isf nil)
    (nonempty? const-decl "bool" sets nil)
    (choose const-decl "(p)" sets nil)
    (empty? const-decl "bool" sets nil)
    (metric_converges_to const-decl "bool" metric_space_def
     metric_space)
    (pointwise_increasing? const-decl "bool" pointwise_convergence nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (increasing? const-decl "bool" real_fun_preds reals)
    (isf_integral_le formula-decl nil isf nil)
    (ball const-decl "set[T]" metric_space_def metric_space)
    (real_times_real_is_real application-judgement "real" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (n!1 skolem-const-decl "nat" integral nil)
    (u!1 skolem-const-decl "increasing_nn_isf[T, S, m]" integral nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (> const-decl "bool" reals nil)
    (isf_integral_pos formula-decl nil isf nil)
    (metric_convergence_def formula-decl nil metric_space metric_space)
    (nn_convergence formula-decl nil nn_integral nil)
    (nn_integral const-decl "nnreal" nn_integral nil)
    (ae_nonneg? const-decl "bool" measure_theory nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (pointwise_convergence? const-decl "bool" pointwise_convergence
     nil)
    (ae_convergence? const-decl "bool" measure_theory nil)
    (pointwise_ae? const-decl "bool" measure_theory nil)
    (fullset const-decl "set" sets nil)
    (ae_in? const-decl "bool" measure_theory nil)
    (set type-eq-decl nil sets nil)
    (negligible_set? const-decl "bool" measure_theory nil)
    (negligible nonempty-type-eq-decl nil measure_theory nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (TRUE const-decl "bool" booleans nil)
    (unique_limit formula-decl nil hausdorff_convergence topology)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (metric_induced_topology const-decl "setofsets[T]" metric_space_def
     metric_space)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (convergence? const-decl "bool" topological_convergence topology)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (X!1 skolem-const-decl "set[T]" integral nil)
    (ae_convergence_in? const-decl "bool" measure_theory nil)
    (ae? const-decl "bool" measure_theory nil)
    (subset_algebra_fullset name-judgement "(S)" integral nil)
    (measurable_fullset name-judgement "measurable_set[T, S]" integral
     nil)
    (subset_algebra_emptyset name-judgement "(S)" integral nil)
    (null_emptyset name-judgement "null_set" integral nil)
    (finite_emptyset name-judgement "finite_set" sigma_countable
     sigma_set)
    (finite_emptyset name-judgement "finite_set" countable_setofsets
     sets_aux)
    (finite_emptyset name-judgement "finite_set" countable_props
     sets_aux)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (emptyset const-decl "set" sets nil)
    (ae_eq? const-decl "bool" measure_theory nil)
    (ae_eq_convergence formula-decl nil measure_theory nil)
    (convergent? const-decl "bool" topological_convergence topology)
    (ae_0? const-decl "bool" measure_theory nil))
   shostak)
  (integral_abs_0-1 nil 3395602959
   ("" (skosimp)
    (("" (lemma "nn_integrable_is_nn_integrable" ("f" "abs(f!1)"))
      (("" (split -1)
        (("1" (expand "nn_integrable?")
          (("1" (skosimp)
            (("1" (typepred "u!1")
              (("1" (case "forall (n:nat): ae_0?(u!1(n))")
                (("1" (expand "pointwise_convergence?")
                  (("1" (expand "convergent?")
                    (("1" (skosimp)
                      (("1"
                        (lemma "ae_eq_convergence"
                         ("F" "u!1" "G" "lambda (n:nat): lambda x: 0"
                          "f" "abs(f!1)"))
                        (("1" (split)
                          (("1" (hide-all-but (-1 1))
                            (("1" (expand "ae_convergence?")
                              (("1"
                                (expand "ae_0?")
                                (("1"
                                  (expand "restrict")
                                  (("1"
                                    (expand "pointwise_ae?")
                                    (("1"
                                      (expand "ae?")
                                      (("1"
                                        (expand "fullset")
                                        (("1"
                                          (expand "ae_convergence_in?")
                                          (("1"
                                            (expand "ae_in?")
                                            (("1"
                                              (skosimp)
                                              (("1"
                                                (typepred "E!1")
                                                (("1"
                                                  (expand
                                                   "negligible_set?")
                                                  (("1"
                                                    (skosimp)
                                                    (("1"
                                                      (inst + "X!1")
                                                      (("1"
                                                        (skosimp)
                                                        (("1"
                                                          (expand
                                                           "subset?")
                                                          (("1"
                                                            (inst
                                                             -
                                                             "x!1")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (inst
                                                                 -
                                                                 "x!1")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (lemma
                                                                     "hausdorff_convergence.unique_limit"
                                                                     ("l1"
                                                                      "abs(f!1)(x!1)"
                                                                      "l2"
                                                                      "0"
                                                                      "u"
                                                                      "LAMBDA (n:nat): 0"))
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (split
                                                                         -1)
                                                                        (("1"
                                                                          (expand
                                                                           "abs")
                                                                          (("1"
                                                                            (hide-all-but
                                                                             (-1
                                                                              3))
                                                                            (("1"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide-all-but
                                                                           1)
                                                                          (("2"
                                                                            (expand
                                                                             "convergence?")
                                                                            (("2"
                                                                              (skosimp)
                                                                              (("2"
                                                                                (inst
                                                                                 +
                                                                                 "0")
                                                                                (("2"
                                                                                  (skosimp)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        (("2"
                                                          (expand
                                                           "negligible_set?")
                                                          (("2"
                                                            (inst
                                                             +
                                                             "X!1")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (expand
                                                                 "subset?")
                                                                (("2"
                                                                  (skosimp)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide-all-but (-3 1))
                            (("2" (expand "ae_convergence?")
                              (("2"
                                (expand "fullset")
                                (("2"
                                  (expand "ae_convergence_in?")
                                  (("2"
                                    (expand "ae_in?")
                                    (("2"
                                      (inst + "emptyset[T]")
                                      (("2"
                                        (expand "emptyset")
                                        (("2"
                                          (skosimp)
                                          (("2"
                                            (expand "member")
                                            (("2"
                                              (inst - "x!1")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (hide-all-but (-1 1))
                            (("3" (skosimp)
                              (("3"
                                (inst - "n!1")
                                (("3"
                                  (expand "ae_0?")
                                  (("3"
                                    (expand "restrict")
                                    (("3"
                                      (expand "pointwise_ae?")
                                      (("3"
                                        (expand "ae_eq?")
                                        (("3"
                                          (expand "restrict")
                                          (("3"
                                            (expand "pointwise_ae?")
                                            (("3" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (skosimp)
                  (("2" (hide 2)
                    (("2" (lemma "isf_ae_ge_0" ("i" "u!1(n!1)"))
                      (("2" (assert)
                        (("2" (hide 2)
                          (("2" (split)
                            (("1" (expand "ae_nonneg?")
                              (("1"
                                (expand "pointwise_ae?")
                                (("1"
                                  (expand "ae?")
                                  (("1"
                                    (expand "fullset")
                                    (("1"
                                      (expand "ae_in?")
                                      (("1"
                                        (inst + "emptyset[T]")
                                        (("1"
                                          (skosimp)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand
                                               "increasing_nn_isf?")
                                              (("1"
                                                (typepred "u!1(n!1)")
                                                (("1"
                                                  (expand "nn_isf?")
                                                  (("1"
                                                    (inst - "x!1")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2"
                              (lemma "integral_nn" ("g" "abs(f!1)"))
                              (("1"
                                (replace -1)
                                (("1"
                                  (hide -1)
                                  (("1"
                                    (expand "nn_integral")
                                    (("1"
                                      (rewrite "limit_def")
                                      (("1"
                                        (lemma
                                         "nn_convergence"
                                         ("u1"
                                          "u!1"
                                          "f"
                                          "abs(f!1)"
                                          "u2"
                                          "choose({u: increasing_nn_isf[T, S, m] |
                              pointwise_convergence?(u, abs(f!1))})"))
                                        (("1"
                                          (assert)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (hide -1)
                                              (("1"
                                                (lemma
                                                 "hausdorff_convergence.limit_def"
                                                 ("v"
                                                  "(isf_integral o
             choose({u: increasing_nn_isf[T, S, m] |
                       pointwise_convergence?(u, abs(f!1))}))"
                                                  "l"
                                                  "0"))
                                                (("1"
                                                  (replace -1 -6 rl)
                                                  (("1"
                                                    (replace -6)
                                                    (("1"
                                                      (hide -1 -6)
                                                      (("1"
                                                        (rewrite
                                                         "limit_def"
                                                         -1)
                                                        (("1"
                                                          (hide -4)
                                                          (("1"
                                                            (rewrite
                                                             "metric_convergence_def"
                                                             -)
                                                            (("1"
                                                              (expand
                                                               "metric_converges_to")
                                                              (("1"
                                                                (lemma
                                                                 "isf_integral_pos"
                                                                 ("i"
                                                                  "u!1(n!1)"))
                                                                (("1"
                                                                  (split
                                                                   -1)
                                                                  (("1"
                                                                    (case
                                                                     "isf_integral(u!1(n!1)) > 0")
                                                                    (("1"
                                                                      (hide
                                                                       -2
                                                                       1)
                                                                      (("1"
                                                                        (inst
                                                                         -
                                                                         "isf_integral(u!1(n!1))")
                                                                        (("1"
                                                                          (skosimp)
                                                                          (("1"
                                                                            (inst
                                                                             -
                                                                             "n!1+n!2")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (expand
                                                                                 "ball")
                                                                                (("1"
                                                                                  (expand
                                                                                   "o ")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "increasing_nn_isf?")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "pointwise_increasing?")
                                                                                      (("1"
                                                                                        (lemma
                                                                                         "isf_integral_le"
                                                                                         ("i1"
                                                                                          "u!1(n!1)"
                                                                                          "i2"
                                                                                          "u!1(n!1+n!2)"))
                                                                                        (("1"
                                                                                          (split
                                                                                           -1)
                                                                                          (("1"
                                                                                            (name-replace
                                                                                             "I_0"
                                                                                             "isf_integral(u!1(n!1))")
                                                                                            (("1"
                                                                                              (name-replace
                                                                                               "I_1"
                                                                                               "isf_integral(u!1(n!1+n!2))")
                                                                                              (("1"
                                                                                                (hide
                                                                                                 -4
                                                                                                 -5)
                                                                                                (("1"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (skosimp)
                                                                                            (("2"
                                                                                              (inst
                                                                                               -
                                                                                               "x!1")
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "increasing?")
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -
                                                                                                   "n!1"
                                                                                                   "n!1+n!2")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (skosimp)
                                                                    (("2"
                                                                      (expand
                                                                       "increasing_nn_isf?")
                                                                      (("2"
                                                                        (expand
                                                                         "pointwise_increasing?")
                                                                        (("2"
                                                                          (typepred
                                                                           "u!1(n!1)")
                                                                          (("2"
                                                                            (expand
                                                                             "nn_isf?")
                                                                            (("2"
                                                                              (inst
                                                                               -
                                                                               "x!1")
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "nonempty?")
                                          (("2"
                                            (expand "empty?")
                                            (("2"
                                              (expand "member")
                                              (("2"
                                                (inst - "u!1")
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "nonempty?")
                                        (("2"
                                          (expand "empty?")
                                          (("2"
                                            (inst - "u!1")
                                            (("2"
                                              (expand "member")
                                              (("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (lemma
                                 "nn_integrable_is_nn_integrable"
                                 ("f" "abs(f!1)"))
                                (("2"
                                  (split -1)
                                  (("1" (propax) nil nil)
                                   ("2"
                                    (hide-all-but 1)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((abs const-decl "[T -> nonneg_real]" real_fun_ops reals)
    (nn_integrable? const-decl "bool" nn_integral nil)
    (increasing_nn_isf nonempty-type-eq-decl nil nn_integral nil)
    (increasing_nn_isf? const-decl "bool" nn_integral nil)
    (sequence type-eq-decl nil sequences nil)
    (nn_isf nonempty-type-eq-decl nil nn_integral nil)
    (nn_isf? const-decl "bool" nn_integral nil)
    (isf nonempty-type-eq-decl nil isf nil)
    (isf? const-decl "bool" isf nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     nil)
    (measure? const-decl "bool" generalized_measure_def nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (setofsets type-eq-decl nil sets nil)
    (isf_ae_ge_0 formula-decl nil isf nil)
    (nn_integrable nonempty-type-eq-decl nil nn_integral nil)
    (limit_def formula-decl nil hausdorff_convergence topology)
    (convergent type-eq-decl nil topological_convergence topology)
    (isf_integral const-decl "real" isf nil)
    (nonempty? const-decl "bool" sets nil)
    (choose const-decl "(p)" sets nil)
    (empty? const-decl "bool" sets nil)
    (metric_converges_to const-decl "bool" metric_space_def
     metric_space)
    (pointwise_increasing? const-decl "bool" pointwise_convergence nil)
    (increasing? const-decl "bool" real_fun_preds reals)
    (isf_integral_le formula-decl nil isf nil)
    (ball const-decl "set[T]" metric_space_def metric_space)
    (isf_integral_pos formula-decl nil isf nil)
    (metric_convergence_def formula-decl nil metric_space metric_space)
    (nn_convergence formula-decl nil nn_integral nil)
    (nn_integral const-decl "nnreal" nn_integral nil)
    (ae_nonneg? const-decl "bool" measure_theory nil)
    (pointwise_convergence? const-decl "bool" pointwise_convergence
     nil)
    (ae_convergence? const-decl "bool" measure_theory nil)
    (pointwise_ae? const-decl "bool" measure_theory nil)
    (fullset const-decl "set" sets nil)
    (ae_in? const-decl "bool" measure_theory nil)
    (set type-eq-decl nil sets nil)
    (negligible_set? const-decl "bool" measure_theory nil)
    (negligible nonempty-type-eq-decl nil measure_theory nil)
    (unique_limit formula-decl nil hausdorff_convergence topology)
    (metric_induced_topology const-decl "setofsets[T]" metric_space_def
     metric_space)
    (convergence? const-decl "bool" topological_convergence topology)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (ae_convergence_in? const-decl "bool" measure_theory nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (emptyset const-decl "set" sets nil)
    (ae_eq? const-decl "bool" measure_theory nil)
    (ae_eq_convergence formula-decl nil measure_theory nil)
    (convergent? const-decl "bool" topological_convergence topology)
    (ae_0? const-decl "bool" measure_theory nil))
   shostak))
 (measurable_ae_0 0
  (measurable_ae_0-2 "" 3789904158
   ("" (skosimp)
    (("" (lemma "integral_ae_eq" ("f" "lambda x: 0" "h" "h!1"))
      (("1" (split -1)
        (("1" (flatten)
          (("1" (rewrite "integral_zero") (("1" (assert) nil nil))
            nil))
          nil)
         ("2" (hide 2)
          (("2" (expand "ae_0?")
            (("2" (expand "ae_eq?")
              (("2" (expand "pointwise_ae?")
                (("2" (expand "ae?")
                  (("2" (expand "fullset")
                    (("2" (expand "ae_in?")
                      (("2" (skosimp)
                        (("2" (inst + "E!1")
                          (("2" (skosimp)
                            (("2" (inst - "x!1")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (rewrite "integrable_zero") nil nil))
      nil))
    nil)
   ((measurable_function nonempty-type-eq-decl nil measure_space_def
     nil)
    (measurable_function? const-decl "bool" measure_space_def nil)
    (S formal-const-decl "sigma_algebra" integral nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (integrable nonempty-type-eq-decl nil integral nil)
    (integrable? const-decl "bool" integral nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-type-decl nil integral nil)
    (integral_ae_eq formula-decl nil integral nil)
    (ae_eq? const-decl "bool" measure_theory nil)
    (measurable_fullset name-judgement "measurable_set[T, S]" integral
     nil)
    (subset_algebra_fullset name-judgement "(S)" integral nil)
    (ae? const-decl "bool" measure_theory nil)
    (ae_in? const-decl "bool" measure_theory nil)
    (negligible nonempty-type-eq-decl nil measure_theory nil)
    (negligible_set? const-decl "bool" measure_theory nil)
    (m formal-const-decl "measure_type" integral nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     nil)
    (measure? const-decl "bool" generalized_measure_def nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil) (set type-eq-decl nil sets nil)
    (TRUE const-decl "bool" booleans nil)
    (member const-decl "bool" sets nil)
    (fullset const-decl "set" sets nil)
    (pointwise_ae? const-decl "bool" measure_theory nil)
    (ae_0? const-decl "bool" measure_theory nil)
    (integral_zero formula-decl nil integral nil)
    (integrable_zero formula-decl nil integral nil))
   shostak)
  (measurable_ae_0-1 nil 3395603530
   ("" (skosimp)
    (("" (lemma "integral_ae_eq" ("f" "lambda x: 0" "h" "h!1"))
      (("1" (split -1)
        (("1" (flatten)
          (("1" (rewrite "integral_zero") (("1" (assert) nil nil))
            nil))
          nil)
         ("2" (hide 2)
          (("2" (expand "ae_0?")
            (("2" (expand "ae_eq?")
              (("2" (expand "restrict")
                (("2" (expand "pointwise_ae?")
                  (("2" (expand "ae?")
                    (("2" (expand "fullset")
                      (("2" (expand "ae_in?")
                        (("2" (skosimp)
                          (("2" (inst + "E!1")
                            (("2" (skosimp)
                              (("2"
                                (inst - "x!1")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (rewrite "integrable_zero") nil nil))
      nil))
    nil)
   ((measurable_function nonempty-type-eq-decl nil measure_space_def
     nil)
    (measurable_function? const-decl "bool" measure_space_def nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (setofsets type-eq-decl nil sets nil)
    (ae_eq? const-decl "bool" measure_theory nil)
    (ae_in? const-decl "bool" measure_theory nil)
    (negligible nonempty-type-eq-decl nil measure_theory nil)
    (negligible_set? const-decl "bool" measure_theory nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     nil)
    (measure? const-decl "bool" generalized_measure_def nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (set type-eq-decl nil sets nil) (member const-decl "bool" sets nil)
    (fullset const-decl "set" sets nil)
    (pointwise_ae? const-decl "bool" measure_theory nil)
    (ae_0? const-decl "bool" measure_theory nil))
   shostak))
 (integral_ae_ge_0 0
  (integral_ae_ge_0-2 "" 3789904159
   ("" (skosimp)
    (("" (lemma "integral_ae_eq" ("f" "f!1" "h" "abs(f!1)"))
      (("" (split -1)
        (("1" (flatten)
          (("1" (lemma "integral_abs_0" ("f" "f!1"))
            (("1" (assert) nil nil)) nil))
          nil)
         ("2" (hide -2 2)
          (("2" (expand "ae_nonneg?")
            (("2" (expand "ae_eq?")
              (("2" (expand "pointwise_ae?")
                (("2" (expand "ae?")
                  (("2" (expand "fullset")
                    (("2" (expand "ae_in?")
                      (("2" (skosimp)
                        (("2" (inst + "E!1")
                          (("2" (skosimp)
                            (("2" (inst - "x!1")
                              (("2"
                                (assert)
                                (("2"
                                  (expand "abs")
                                  (("2"
                                    (expand "abs")
                                    (("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((abs const-decl "[T -> nonneg_real]" real_fun_ops reals)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (measurable_function nonempty-type-eq-decl nil measure_space_def
     nil)
    (measurable_function? const-decl "bool" measure_space_def nil)
    (S formal-const-decl "sigma_algebra" integral nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (integrable nonempty-type-eq-decl nil integral nil)
    (integrable? const-decl "bool" integral nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-type-decl nil integral nil)
    (integral_ae_eq formula-decl nil integral nil)
    (integrable_abs application-judgement "integrable" integral nil)
    (ae_eq? const-decl "bool" measure_theory nil)
    (measurable_fullset name-judgement "measurable_set[T, S]" integral
     nil)
    (subset_algebra_fullset name-judgement "(S)" integral nil)
    (ae? const-decl "bool" measure_theory nil)
    (ae_in? const-decl "bool" measure_theory nil)
    (negligible nonempty-type-eq-decl nil measure_theory nil)
    (negligible_set? const-decl "bool" measure_theory nil)
    (m formal-const-decl "measure_type" integral nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     nil)
    (measure? const-decl "bool" generalized_measure_def nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (nnreal type-eq-decl nil real_types nil)
    (set type-eq-decl nil sets nil)
    (TRUE const-decl "bool" booleans nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (member const-decl "bool" sets nil)
    (fullset const-decl "set" sets nil)
    (pointwise_ae? const-decl "bool" measure_theory nil)
    (ae_nonneg? const-decl "bool" measure_theory nil)
    (integral_abs_0 formula-decl nil integral nil))
   shostak)
  (integral_ae_ge_0-1 nil 3391334061
   ("" (skosimp)
    (("" (lemma "integral_ae_eq" ("f" "f!1" "h" "abs(f!1)"))
      (("" (split -1)
        (("1" (flatten)
          (("1" (lemma "integral_abs_0" ("f" "f!1"))
            (("1" (assert) nil nil)) nil))
          nil)
         ("2" (hide -2 2)
          (("2" (expand "ae_nonneg?")
            (("2" (expand "ae_eq?")
              (("2" (expand "restrict")
                (("2" (expand "pointwise_ae?")
                  (("2" (expand "ae?")
                    (("2" (expand "fullset")
                      (("2" (expand "ae_in?")
                        (("2" (skosimp)
                          (("2" (inst + "E!1")
                            (("2" (skosimp)
                              (("2"
                                (inst - "x!1")
                                (("2"
                                  (assert)
                                  (("2"
                                    (expand "abs")
                                    (("2"
                                      (expand "abs")
                                      (("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((abs const-decl "[T -> nonneg_real]" real_fun_ops reals)
    (measurable_function nonempty-type-eq-decl nil measure_space_def
     nil)
    (measurable_function? const-decl "bool" measure_space_def nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (setofsets type-eq-decl nil sets nil)
    (ae_eq? const-decl "bool" measure_theory nil)
    (ae_in? const-decl "bool" measure_theory nil)
    (negligible nonempty-type-eq-decl nil measure_theory nil)
    (negligible_set? const-decl "bool" measure_theory nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     nil)
    (measure? const-decl "bool" generalized_measure_def nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (set type-eq-decl nil sets nil) (member const-decl "bool" sets nil)
    (fullset const-decl "set" sets nil)
    (pointwise_ae? const-decl "bool" measure_theory nil)
    (ae_nonneg? const-decl "bool" measure_theory nil))
   shostak))
 (integrable_maximum 0
  (integrable_maximum-1 nil 3409639019
   ("" (induct "n")
    (("1" (skosimp)
      (("1" (assert)
        (("1" (expand "maximum") (("1" (propax) nil nil)) nil)) nil))
      nil)
     ("2" (skosimp*)
      (("2" (inst - "w!1")
        (("2" (expand "maximum" 1)
          (("2" (rewrite "integrable_max") nil nil)) nil))
        nil))
      nil))
    nil)
   ((max_measurable application-judgement "measurable_function[T, S]"
     integral nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (integrable_max judgement-tcc nil integral nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (maximum_measurable application-judgement
     "measurable_function[T, S]" integral nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (maximum def-decl "[T -> real]" real_fun_ops_aux reals)
    (sequence type-eq-decl nil sequences nil)
    (integrable nonempty-type-eq-decl nil integral nil)
    (integrable? const-decl "bool" integral nil)
    (T formal-type-decl nil integral nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil
   (integrable_maximum subtype
    "real_fun_ops_aux[integral.T].maximum(integral.w, integral.n)"
    "integrable")))
 (integrable_minimum 0
  (integrable_minimum-1 nil 3409639019
   ("" (induct "n")
    (("1" (skosimp)
      (("1" (expand "minimum") (("1" (propax) nil nil)) nil)) nil)
     ("2" (skosimp*)
      (("2" (inst - "w!1")
        (("2" (expand "minimum" 1)
          (("2" (rewrite "integrable_min") nil nil)) nil))
        nil))
      nil))
    nil)
   ((min_measurable application-judgement "measurable_function[T, S]"
     integral nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (minimum_measurable application-judgement
     "measurable_function[T, S]" integral nil)
    (integrable_min judgement-tcc nil integral nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (minimum def-decl "[T -> real]" real_fun_ops_aux reals)
    (sequence type-eq-decl nil sequences nil)
    (integrable nonempty-type-eq-decl nil integral nil)
    (integrable? const-decl "bool" integral nil)
    (T formal-type-decl nil integral nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil
   (integrable_minimum subtype
    "real_fun_ops_aux[integral.T].minimum(integral.w, integral.n)"
    "integrable")))
 (integrable_split 0
  (integrable_split-1 nil 3452508415
   ("" (skosimp)
    (("" (split)
      (("1" (flatten)
        (("1" (rewrite "indefinite_integrable")
          (("1" (rewrite "indefinite_integrable") nil nil)) nil))
        nil)
       ("2" (flatten)
        (("2"
          (lemma "integrable_add"
           ("f1" "phi(E!1) * h!1" "f2" "phi(complement(E!1)) * h!1"))
          (("1" (expand "*")
            (("1" (expand "+")
              (("1" (expand "phi")
                (("1" (expand "complement")
                  (("1" (expand "member")
                    (("1"
                      (case-replace "(LAMBDA (x_1: T):
                    IF NOT E!1(x_1) THEN 1 ELSE 0 ENDIF * h!1(x_1) +
                     IF E!1(x_1) THEN 1 ELSE 0 ENDIF * h!1(x_1))=h!1")
                      (("1" (apply-extensionality :hide? t)
                        (("1" (case-replace "E!1(x!1)")
                          (("1" (assert) nil nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (propax) nil nil) ("3" (propax) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((indefinite_integrable formula-decl nil integral nil)
    (T formal-type-decl nil integral nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (setofsets type-eq-decl nil sets nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (S formal-const-decl "sigma_algebra" integral nil)
    (measurable_set? const-decl "bool" measure_space_def nil)
    (measurable_set nonempty-type-eq-decl nil measure_space_def nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (integrable? const-decl "bool" integral nil)
    (integrable nonempty-type-eq-decl nil integral nil)
    (complement const-decl "set" sets nil)
    (measurable_complement application-judgement "measurable_set"
     integral nil)
    (phi const-decl "nat" measure_space nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (integrable_add judgement-tcc nil integral nil)
    (+ const-decl "[T -> real]" real_fun_ops reals)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (member const-decl "bool" sets nil))
   shostak))
 (integral_split_TCC1 0
  (integral_split_TCC1-1 nil 3452508415
   ("" (skosimp) (("" (rewrite "indefinite_integrable") nil nil)) nil)
   ((indefinite_integrable formula-decl nil integral nil)
    (T formal-type-decl nil integral nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (setofsets type-eq-decl nil sets nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (S formal-const-decl "sigma_algebra" integral nil)
    (measurable_set? const-decl "bool" measure_space_def nil)
    (measurable_set nonempty-type-eq-decl nil measure_space_def nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (integrable? const-decl "bool" integral nil)
    (integrable nonempty-type-eq-decl nil integral nil))
   nil
   (integral_split subtype
    "real_fun_ops[integral.T].*(measure_space[integral.T, integral.S].phi(integral.E), integral.f)"
    "integrable")))
 (integral_split_TCC2 0
  (integral_split_TCC2-1 nil 3452508415
   ("" (skosimp) (("" (rewrite "indefinite_integrable") nil nil)) nil)
   ((measurable_complement application-judgement "measurable_set"
     integral nil)
    (indefinite_integrable formula-decl nil integral nil)
    (T formal-type-decl nil integral nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (setofsets type-eq-decl nil sets nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (S formal-const-decl "sigma_algebra" integral nil)
    (measurable_set? const-decl "bool" measure_space_def nil)
    (measurable_set nonempty-type-eq-decl nil measure_space_def nil)
    (complement const-decl "set" sets nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (integrable? const-decl "bool" integral nil)
    (integrable nonempty-type-eq-decl nil integral nil))
   nil
   (integral_split subtype
    "real_fun_ops[integral.T].*(measure_space[integral.T, integral.S].phi(sets[integral.T].complement(integral.E)), integral.f)"
    "integrable")))
 (integral_split 0
  (integral_split-1 nil 3452508680
   ("" (skosimp)
    ((""
      (lemma "integral_add"
       ("f1" "phi(E!1) * f!1" "f2" "phi(complement(E!1)) * f!1"))
      (("" (replace -1 1 rl)
        (("" (hide -1)
          (("" (expand "phi")
            (("" (expand "complement")
              (("" (expand "member")
                (("" (expand "+")
                  (("" (expand "*")
                    ((""
                      (case-replace "(LAMBDA (x_1: T):
                  IF NOT E!1(x_1) THEN 1 ELSE 0 ENDIF * f!1(x_1) +
                   IF E!1(x_1) THEN 1 ELSE 0 ENDIF * f!1(x_1))=f!1")
                      (("" (apply-extensionality :hide? t)
                        (("" (case-replace "E!1(x!1)")
                          (("1" (assert) nil nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((complement const-decl "set" sets nil)
    (measurable_set nonempty-type-eq-decl nil measure_space_def nil)
    (measurable_set? const-decl "bool" measure_space_def nil)
    (phi const-decl "nat" measure_space nil)
    (S formal-const-decl "sigma_algebra" integral nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (set type-eq-decl nil sets nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (integrable nonempty-type-eq-decl nil integral nil)
    (integrable? const-decl "bool" integral nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-type-decl nil integral nil)
    (integral_add formula-decl nil integral nil)
    (+ const-decl "[T -> real]" real_fun_ops reals)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (member const-decl "bool" sets nil))
   shostak)))

