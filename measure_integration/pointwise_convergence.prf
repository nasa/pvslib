(pointwise_convergence
 (pointwise_bounded_def 0
  (pointwise_bounded_def-1 nil 3391993987
   ("" (skosimp)
    (("" (expand "pointwise_bounded?")
      (("" (expand "pointwise_bounded_above?")
        (("" (expand "pointwise_bounded_below?")
          (("" (expand "pointwise?")
            (("" (split)
              (("1" (flatten)
                (("1" (split)
                  (("1" (skosimp)
                    (("1" (inst - "x!1")
                      (("1" (rewrite "bounded_seq_def")
                        (("1" (flatten) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (skosimp)
                    (("2" (inst - "x!1")
                      (("2" (rewrite "bounded_seq_def")
                        (("2" (flatten) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (skosimp*)
                (("2" (inst - "x!1")
                  (("2" (inst - "x!1")
                    (("2" (rewrite "bounded_seq_def")
                      (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pointwise_bounded? const-decl "bool" pointwise_convergence nil)
    (pointwise_bounded_below? const-decl "bool" pointwise_convergence
     nil)
    (T formal-type-decl nil pointwise_convergence nil)
    (sequence type-eq-decl nil sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (bounded_seq_def formula-decl nil convergence_aux metric_space)
    (pointwise? const-decl "bool" pointwise_convergence nil)
    (pointwise_bounded_above? const-decl "bool" pointwise_convergence
     nil))
   shostak))
 (pointwise_bounded_above_TCC1 0
  (pointwise_bounded_above_TCC1-2 "" 3789903462
   ("" (expand "zero_seq")
    (("" (expand "pointwise_bounded_above?")
      (("" (expand "bounded_above?")
        (("" (expand "pointwise?")
          (("" (skosimp*)
            (("" (inst + "0") (("" (grind) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((pointwise_bounded_above? const-decl "bool" pointwise_convergence
     nil)
    (pointwise? const-decl "bool" pointwise_convergence nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bounded_above? const-decl "bool" real_fun_preds reals)
    (zero_seq const-decl "real" pointwise_convergence nil))
   shostak
   (pointwise_bounded_above subtype "pointwise_convergence.zero_seq"
    "pointwise_bounded_above"))
  (pointwise_bounded_above_TCC1-1 nil 3391989427
   ("" (expand "zero_seq")
    (("" (expand "pointwise_bounded_above?")
      (("" (expand "bounded_above?")
        (("" (expand "pointwise?")
          (("" (expand "bounded_above?")
            (("" (expand "fullset")
              (("" (expand "image")
                (("" (expand "upper_bound?")
                  (("" (skosimp*)
                    (("" (inst + "0") (("" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((bounded_above? const-decl "bool" real_fun_preds reals)) nil
   (pointwise_bounded_above subtype "pointwise_convergence.zero_seq"
    "pointwise_bounded_above")))
 (pointwise_bounded_below_TCC1 0
  (pointwise_bounded_below_TCC1-2 "" 3789903462
   ("" (expand "pointwise_bounded_below?")
    (("" (expand "pointwise?")
      (("" (expand "bounded_below?")
        (("" (skosimp) (("" (inst + "0") (("" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((pointwise? const-decl "bool" pointwise_convergence nil)
    (zero_seq const-decl "real" pointwise_convergence nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (bounded_below? const-decl "bool" real_fun_preds reals)
    (pointwise_bounded_below? const-decl "bool" pointwise_convergence
     nil))
   shostak
   (pointwise_bounded_below subtype "pointwise_convergence.zero_seq"
    "pointwise_bounded_below"))
  (pointwise_bounded_below_TCC1-1 nil 3391989427
   ("" (expand "pointwise_bounded_below?")
    (("" (expand "pointwise?")
      (("" (expand "bounded_below?")
        (("" (expand "bounded_below?")
          (("" (skosimp) (("" (inst + "0") (("" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((bounded_below? const-decl "bool" real_fun_preds reals)) nil
   (pointwise_bounded_below subtype "pointwise_convergence.zero_seq"
    "pointwise_bounded_below")))
 (pointwise_bounded_TCC1 0
  (pointwise_bounded_TCC1-1 nil 3391989427
   ("" (expand "pointwise_bounded?")
    (("" (expand "pointwise?")
      (("" (expand "bounded_seq?")
        (("" (expand "bounded?")
          (("" (skosimp)
            (("" (inst + "0" "1") (("" (grind) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((pointwise? const-decl "bool" pointwise_convergence nil)
    (bounded? const-decl "bool" metric_space_def metric_space)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil) (fullset const-decl "set" sets nil)
    (zero_seq const-decl "real" pointwise_convergence nil)
    (image const-decl "set[R]" function_image nil)
    (member const-decl "bool" sets nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (ball const-decl "set[T]" metric_space_def metric_space)
    (subset? const-decl "bool" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (ball_is_metric_open application-judgement "metric_open"
     convergence_aux metric_space)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (bounded_seq? const-decl "bool" convergence_aux metric_space)
    (pointwise_bounded? const-decl "bool" pointwise_convergence nil))
   nil
   (pointwise_bounded subtype "pointwise_convergence.zero_seq"
    "pointwise_bounded")))
 (pointwise_bounded_is_bounded_above 0
  (pointwise_bounded_is_bounded_above-1 nil 3391989427
   ("" (skosimp)
    (("" (typepred "x!1")
      (("" (rewrite "pointwise_bounded_def") (("" (flatten) nil nil))
        nil))
      nil))
    nil)
   ((pointwise_bounded nonempty-type-eq-decl nil pointwise_convergence
     nil)
    (pointwise_bounded? const-decl "bool" pointwise_convergence nil)
    (sequence type-eq-decl nil sequences nil)
    (T formal-type-decl nil pointwise_convergence nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (pointwise_bounded_def formula-decl nil pointwise_convergence nil))
   nil
   (pointwise_bounded_is_bounded_above subtype
    "pointwise_convergence.x" "pointwise_bounded_above")))
 (pointwise_bounded_is_bounded_below 0
  (pointwise_bounded_is_bounded_below-1 nil 3391989427
   ("" (skosimp)
    (("" (typepred "x!1")
      (("" (rewrite "pointwise_bounded_def") (("" (flatten) nil nil))
        nil))
      nil))
    nil)
   ((pointwise_bounded nonempty-type-eq-decl nil pointwise_convergence
     nil)
    (pointwise_bounded? const-decl "bool" pointwise_convergence nil)
    (sequence type-eq-decl nil sequences nil)
    (T formal-type-decl nil pointwise_convergence nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (pointwise_bounded_def formula-decl nil pointwise_convergence nil))
   nil
   (pointwise_bounded_is_bounded_below subtype
    "pointwise_convergence.x" "pointwise_bounded_below")))
 (pointwise_convergent_TCC1 0
  (pointwise_convergent_TCC1-1 nil 3391989427
   ("" (expand "pointwise_convergent?")
    (("" (inst + "lambda x: 0")
      (("" (expand "pointwise_convergence?")
        (("" (skosimp)
          (("" (rewrite "metric_convergence_def" *)
            (("" (expand "metric_converges_to")
              (("" (skosimp)
                (("" (inst + "0") (("" (grind) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((T formal-type-decl nil pointwise_convergence nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (metric_converges_to const-decl "bool" metric_space_def
     metric_space)
    (member const-decl "bool" sets nil)
    (ball const-decl "set[T]" metric_space_def metric_space)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (zero_seq const-decl "real" pointwise_convergence nil)
    (sequence type-eq-decl nil sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (metric_convergence_def formula-decl nil metric_space metric_space)
    (pointwise_convergence? const-decl "bool" pointwise_convergence
     nil)
    (pointwise_convergent? const-decl "bool" pointwise_convergence
     nil))
   nil
   (pointwise_convergent subtype "pointwise_convergence.zero_seq"
    "pointwise_convergent")))
 (pointwise_convergence_sum 0
  (pointwise_convergence_sum-2 "" 3789903464
   ("" (skosimp*)
    (("" (expand "pointwise_convergence?")
      (("" (skosimp)
        (("" (inst - "x!1")
          (("" (inst - "x!1")
            (("" (rewrite "metric_convergence_def" *)
              (("" (rewrite "metric_convergence_def" *)
                (("" (rewrite "metric_convergence_def" *)
                  (("" (expand "metric_converges_to")
                    (("" (skosimp)
                      (("" (inst - "r!1/2")
                        (("" (inst - "r!1/2")
                          (("" (skosimp*)
                            (("" (inst + "max(n!1,n!2)")
                              ((""
                                (skosimp)
                                ((""
                                  (inst - "i!1")
                                  ((""
                                    (inst - "i!1")
                                    ((""
                                      (assert)
                                      ((""
                                        (expand "ball")
                                        ((""
                                          (hide -3)
                                          (("" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pointwise_convergence? const-decl "bool" pointwise_convergence
     nil)
    (T formal-type-decl nil pointwise_convergence nil)
    (metric_convergence_def formula-decl nil metric_space metric_space)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sequence type-eq-decl nil sequences nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "sequence[[T -> real]]" pointwise_convergence nil)
    (+ const-decl "[T -> real]" real_fun_ops reals)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (ball_is_metric_open application-judgement "metric_open"
     convergence_aux metric_space)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (member const-decl "bool" sets nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (ball const-decl "set[T]" metric_space_def metric_space)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (metric_converges_to const-decl "bool" metric_space_def
     metric_space))
   shostak)
  (pointwise_convergence_sum-1 nil 3392121345
   ("" (skosimp*)
    (("" (expand "pointwise_convergence?")
      (("" (skosimp)
        (("" (inst - "x!1")
          (("" (inst - "x!1")
            (("" (rewrite "metric_convergence_def" *)
              (("" (rewrite "metric_convergence_def" *)
                (("1" (rewrite "metric_convergence_def" *)
                  (("1" (expand "metric_converges_to")
                    (("1" (skosimp)
                      (("1" (inst - "r!1/2")
                        (("1" (inst - "r!1/2")
                          (("1" (skosimp*)
                            (("1" (inst + "max(n!1,n!2)")
                              (("1"
                                (skosimp)
                                (("1"
                                  (inst - "i!1")
                                  (("1"
                                    (inst - "i!1")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "ball")
                                        (("1"
                                          (hide -3)
                                          (("1" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
                  nil)
                 ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((metric_convergence_def formula-decl nil metric_space metric_space)
    (sequence type-eq-decl nil sequences nil)
    (member const-decl "bool" sets nil)
    (ball const-decl "set[T]" metric_space_def metric_space)
    (metric_converges_to const-decl "bool" metric_space_def
     metric_space))
   shostak))
 (pointwise_convergence_scal 0
  (pointwise_convergence_scal-3 "" 3789903465
   ("" (skosimp)
    (("" (expand "pointwise_convergence?")
      (("" (skosimp)
        (("" (inst - "x!1")
          (("" (rewrite "metric_convergence_def" *)
            (("" (rewrite "metric_convergence_def" *)
              (("" (expand "metric_converges_to")
                (("" (skosimp)
                  (("" (expand "ball")
                    (("" (expand "member")
                      (("" (case-replace "c!1=0")
                        (("1" (expand "*")
                          (("1" (expand "*")
                            (("1" (expand "abs")
                              (("1" (propax) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (inst - "r!1/abs(c!1)")
                          (("1" (skosimp)
                            (("1" (inst + "n!1")
                              (("1"
                                (skosimp)
                                (("1"
                                  (inst - "i!1")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "*")
                                      (("1"
                                        (expand "*")
                                        (("1"
                                          (rewrite
                                           "div_mult_pos_lt2"
                                           -1)
                                          (("1"
                                            (rewrite
                                             "abs_mult"
                                             -1
                                             :dir
                                             rl)
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert)
                            (("2"
                              (lemma "posreal_div_posreal_is_posreal"
                               ("px" "r!1" "py" "abs(c!1)"))
                              (("2" (assert) nil nil)) nil))
                            nil)
                           ("3" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pointwise_convergence? const-decl "bool" pointwise_convergence
     nil)
    (T formal-type-decl nil pointwise_convergence nil)
    (* const-decl "sequence[[T -> real]]" pointwise_convergence nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (member const-decl "bool" sets nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (/= const-decl "boolean" notequal nil)
    (c!1 skolem-const-decl "real" pointwise_convergence nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (r!1 skolem-const-decl "posreal" pointwise_convergence nil)
    (div_mult_pos_lt2 formula-decl nil real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (abs_mult formula-decl nil real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal_div_posreal_is_posreal judgement-tcc nil real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ball const-decl "set[T]" metric_space_def metric_space)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (metric_converges_to const-decl "bool" metric_space_def
     metric_space)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (sequence type-eq-decl nil sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (metric_convergence_def formula-decl nil metric_space
     metric_space))
   shostak)
  (pointwise_convergence_scal-2 "" 3758920338
   ("" (skosimp)
    (("" (expand "pointwise_convergence?")
      (("" (skosimp)
        (("" (inst - "x!1")
          (("" (rewrite "metric_convergence_def" *)
            (("" (rewrite "metric_convergence_def" *)
              (("1" (expand "metric_converges_to")
                (("1" (skosimp)
                  (("1" (expand "ball")
                    (("1" (expand "member")
                      (("1" (case-replace "c!1=0")
                        (("1" (expand "*")
                          (("1" (expand "*")
                            (("1" (expand "abs")
                              (("1" (propax) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (inst - "r!1/abs(c!1)")
                          (("1" (skosimp)
                            (("1" (inst + "n!1")
                              (("1"
                                (skosimp)
                                (("1"
                                  (inst - "i!1")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "*")
                                      (("1"
                                        (expand "*")
                                        (("1"
                                          (rewrite
                                           "div_mult_pos_lt2"
                                           -1)
                                          (("1"
                                            (rewrite
                                             "abs_mult"
                                             -1
                                             :dir
                                             rl)
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert)
                            (("2"
                              (lemma "posreal_div_posreal_is_posreal"
                               ("px" "r!1" "py" "abs(c!1)"))
                              (("2" (assert) nil nil)) nil))
                            nil)
                           ("3" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((member const-decl "bool" sets nil)
    (ball const-decl "set[T]" metric_space_def metric_space)
    (metric_converges_to const-decl "bool" metric_space_def
     metric_space)
    (sequence type-eq-decl nil sequences nil)
    (metric_convergence_def formula-decl nil metric_space
     metric_space))
   shostak)
  (pointwise_convergence_scal-1 nil 3392121446
   ("" (skosimp)
    (("" (expand "pointwise_convergence?")
      (("" (skosimp)
        (("" (inst - "x!1")
          (("" (rewrite "metric_convergence_def" *)
            (("" (rewrite "metric_convergence_def" *)
              (("" (expand "metric_converges_to")
                (("" (skosimp)
                  (("" (expand "ball")
                    (("" (expand "member")
                      (("" (case-replace "c!1=0")
                        (("1" (expand "*")
                          (("1" (expand "*")
                            (("1" (expand "abs")
                              (("1" (propax) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (inst - "r!1/abs(c!1)")
                          (("1" (skosimp)
                            (("1" (inst + "n!1")
                              (("1"
                                (skosimp)
                                (("1"
                                  (inst - "i!1")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "*")
                                      (("1"
                                        (expand "*")
                                        (("1"
                                          (rewrite
                                           "div_mult_pos_lt2"
                                           -1)
                                          (("1"
                                            (rewrite
                                             "abs_mult"
                                             -1
                                             :dir
                                             rl)
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert)
                            (("2"
                              (lemma "posreal_div_posreal_is_posreal"
                               ("px" "r!1" "py" "abs(c!1)"))
                              (("2" (assert) nil nil)) nil))
                            nil)
                           ("3" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((metric_convergence_def formula-decl nil metric_space metric_space)
    (sequence type-eq-decl nil sequences nil)
    (metric_triangle? const-decl "bool" metric_def metric_space)
    (metric_symmetric? const-decl "bool" metric_def metric_space)
    (metric_zero? const-decl "bool" metric_def metric_space)
    (metric_converges_to const-decl "bool" metric_space_def
     metric_space)
    (ball const-decl "set[T]" metric_space_def metric_space)
    (member const-decl "bool" sets nil)
    (metric? const-decl "bool" metric_def metric_space))
   shostak))
 (pointwise_convergence_opp 0
  (pointwise_convergence_opp-1 nil 3392115698
   ("" (skosimp)
    ((""
      (lemma "pointwise_convergence_scal"
       ("u" "u!1" "f" "f!1" "c" "-1"))
      (("" (assert)
        (("" (expand "*")
          (("" (expand "-")
            (("" (expand "-" 1)
              (("" (expand "*" -1) (("" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sequence type-eq-decl nil sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (T formal-type-decl nil pointwise_convergence nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (pointwise_convergence_scal formula-decl nil pointwise_convergence
     nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (* const-decl "sequence[[T -> real]]" pointwise_convergence nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (- const-decl "sequence[[T -> real]]" pointwise_convergence nil)
    (- const-decl "[T -> real]" real_fun_ops reals))
   shostak))
 (pointwise_convergence_diff 0
  (pointwise_convergence_diff-1 nil 3392115828
   ("" (skosimp)
    (("" (lemma "pointwise_convergence_opp" ("u" "v!1" "f" "f1!1"))
      (("" (assert)
        ((""
          (lemma "pointwise_convergence_sum"
           ("u" "u!1" "f0" "f0!1" "v" "-v!1" "f1" "-f1!1"))
          (("" (assert)
            (("" (expand "+")
              (("" (expand "-")
                (("" (expand "-")
                  (("" (expand "+") (("" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sequence type-eq-decl nil sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-type-decl nil pointwise_convergence nil)
    (pointwise_convergence_opp formula-decl nil pointwise_convergence
     nil)
    (- const-decl "sequence[[T -> real]]" pointwise_convergence nil)
    (- const-decl "[T -> real]" real_fun_ops reals)
    (pointwise_convergence_sum formula-decl nil pointwise_convergence
     nil)
    (+ const-decl "[T -> real]" real_fun_ops reals)
    (+ const-decl "sequence[[T -> real]]" pointwise_convergence nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (- const-decl "sequence[[T -> real]]" pointwise_convergence nil)
    (- const-decl "[T -> real]" real_fun_ops reals))
   shostak))
 (pointwise_convergent_sum 0
  (pointwise_convergent_sum-1 nil 3392115342
   ("" (skosimp)
    (("" (typepred "w0!1")
      (("" (typepred "w1!1")
        (("" (expand "pointwise_convergent?")
          (("" (skosimp*)
            (("" (inst + "f!2+f!1")
              ((""
                (lemma "pointwise_convergence_sum"
                 ("u" "w0!1" "v" "w1!1" "f0" "f!2" "f1" "f!1"))
                (("" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pointwise_convergent nonempty-type-eq-decl nil
     pointwise_convergence nil)
    (pointwise_convergent? const-decl "bool" pointwise_convergence nil)
    (sequence type-eq-decl nil sequences nil)
    (T formal-type-decl nil pointwise_convergence nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (+ const-decl "[T -> real]" real_fun_ops reals)
    (pointwise_convergence_sum formula-decl nil pointwise_convergence
     nil))
   nil
   (pointwise_convergent_sum subtype
    "(pointwise_convergence.+)(pointwise_convergence.w0, pointwise_convergence.w1)"
    "pointwise_convergent")))
 (pointwise_convergent_scal 0
  (pointwise_convergent_scal-1 nil 3392115342
   ("" (skosimp)
    (("" (typepred "w!1")
      (("" (expand "pointwise_convergent?")
        (("" (skosimp)
          (("" (inst + "c!1*f!1")
            ((""
              (lemma "pointwise_convergence_scal"
               ("u" "w!1" "f" "f!1" "c" "c!1"))
              (("" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pointwise_convergent nonempty-type-eq-decl nil
     pointwise_convergence nil)
    (pointwise_convergent? const-decl "bool" pointwise_convergence nil)
    (sequence type-eq-decl nil sequences nil)
    (T formal-type-decl nil pointwise_convergence nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (pointwise_convergence_scal formula-decl nil pointwise_convergence
     nil)
    (* const-decl "[T -> real]" real_fun_ops reals))
   nil
   (pointwise_convergent_scal subtype
    "pointwise_convergence.*(pointwise_convergence.c, pointwise_convergence.w)"
    "pointwise_convergent")))
 (pointwise_convergent_opp 0
  (pointwise_convergent_opp-1 nil 3392115342
   ("" (skosimp)
    (("" (typepred "w!1")
      (("" (expand "pointwise_convergent?")
        (("" (skosimp)
          (("" (inst + "-f!1")
            ((""
              (lemma "pointwise_convergence_opp" ("u" "w!1" "f" "f!1"))
              (("" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pointwise_convergent nonempty-type-eq-decl nil
     pointwise_convergence nil)
    (pointwise_convergent? const-decl "bool" pointwise_convergence nil)
    (sequence type-eq-decl nil sequences nil)
    (T formal-type-decl nil pointwise_convergence nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (pointwise_convergence_opp formula-decl nil pointwise_convergence
     nil)
    (- const-decl "[T -> real]" real_fun_ops reals))
   nil
   (pointwise_convergent_opp subtype
    "(pointwise_convergence.-)(pointwise_convergence.w)"
    "pointwise_convergent")))
 (pointwise_convergent_diff 0
  (pointwise_convergent_diff-1 nil 3392115342
   ("" (skosimp)
    (("" (typepred "w0!1")
      (("" (typepred "w1!1")
        (("" (expand "pointwise_convergent?")
          (("" (skosimp*)
            (("" (inst + "f!2-f!1")
              ((""
                (lemma "pointwise_convergence_diff"
                 ("u" "w0!1" "v" "w1!1" "f0" "f!2" "f1" "f!1"))
                (("" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pointwise_convergent nonempty-type-eq-decl nil
     pointwise_convergence nil)
    (pointwise_convergent? const-decl "bool" pointwise_convergence nil)
    (sequence type-eq-decl nil sequences nil)
    (T formal-type-decl nil pointwise_convergence nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (- const-decl "[T -> real]" real_fun_ops reals)
    (pointwise_convergence_diff formula-decl nil pointwise_convergence
     nil))
   nil
   (pointwise_convergent_diff subtype
    "(pointwise_convergence.-)(pointwise_convergence.w0, pointwise_convergence.w1)"
    "pointwise_convergent")))
 (pointwise_convergent_is_pointwise_bounded 0
  (pointwise_convergent_is_pointwise_bounded-1 nil 3391989427
   ("" (skolem + ("u!1"))
    (("" (expand "pointwise_bounded?")
      (("" (expand "pointwise?")
        (("" (skosimp)
          (("" (rewrite "bounded_seq_def")
            (("" (typepred "u!1")
              (("" (expand "pointwise_convergent?")
                (("" (skosimp)
                  (("" (expand "pointwise_convergence?")
                    (("" (inst - "x!1")
                      (("" (rewrite "metric_convergence_def" *)
                        (("" (expand "metric_converges_to")
                          (("" (expand "ball")
                            (("" (expand "member")
                              ((""
                                (split)
                                (("1"
                                  (inst - "1")
                                  (("1"
                                    (skosimp)
                                    (("1"
                                      (expand "bounded_above?")
                                      (("1"
                                        (case-replace "n!1=0")
                                        (("1"
                                          (inst + "f!1(x!1)+1")
                                          (("1"
                                            (skosimp)
                                            (("1"
                                              (inst - "x!2")
                                              (("1" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (case
                                           "forall (i:posnat): nonempty?[real]
          (image[nat, real](LAMBDA (n: nat): u!1(n)(x!1), {n | n < i}))
       AND
       above_bounded[real]
           (image[nat, real](LAMBDA (n: nat): u!1(n)(x!1), {n | n < i}))")
                                          (("1"
                                            (inst - "n!1")
                                            (("1"
                                              (inst
                                               +
                                               "max(lub(image[nat, real](LAMBDA (n: nat): u!1(n)(x!1), {n | n < n!1})),f!1(x!1)+1)")
                                              (("1"
                                                (typepred
                                                 "lub(image[nat, real]
                               (LAMBDA (n: nat): u!1(n)(x!1),
                                {n | n < n!1}))")
                                                (("1"
                                                  (expand
                                                   "least_upper_bound?")
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (expand
                                                       "upper_bound?")
                                                      (("1"
                                                        (skosimp)
                                                        (("1"
                                                          (case
                                                           "x!2<n!1")
                                                          (("1"
                                                            (inst
                                                             -
                                                             "u!1(x!2)(x!1)")
                                                            (("1"
                                                              (hide-all-but
                                                               (-2 2))
                                                              (("1"
                                                                (name-replace
                                                                 "LUB"
                                                                 "lub(image[nat, real](LAMBDA (n: nat): u!1(n)(x!1), {n | n < n!1}))")
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "image")
                                                              (("2"
                                                                (inst
                                                                 +
                                                                 "x!2")
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (inst
                                                             -5
                                                             "x!2")
                                                            (("2"
                                                              (name-replace
                                                               "LUB"
                                                               "lub(image[nat, real]
                   (LAMBDA (n: nat): u!1(n)(x!1), {n | n < n!1}))")
                                                              (("2"
                                                                (hide-all-but
                                                                 (-5
                                                                  3
                                                                  1))
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (replace -1)
                                                    (("2"
                                                      (expand
                                                       "bounded_above?")
                                                      (("2"
                                                        (expand
                                                         "above_bounded")
                                                        (("2"
                                                          (skosimp)
                                                          (("2"
                                                            (inst
                                                             +
                                                             "n!2")
                                                            (("2"
                                                              (expand
                                                               "upper_bound?")
                                                              (("2"
                                                                (expand
                                                                 "upper_bound")
                                                                (("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (assert)
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (expand
                                                       "above_bounded")
                                                      (("2"
                                                        (expand
                                                         "bounded_above?")
                                                        (("2"
                                                          (skosimp)
                                                          (("2"
                                                            (inst
                                                             +
                                                             "n!2")
                                                            (("2"
                                                              (expand
                                                               "upper_bound?")
                                                              (("2"
                                                                (expand
                                                                 "upper_bound")
                                                                (("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (assert) nil nil))
                                            nil)
                                           ("2"
                                            (hide-all-but 1)
                                            (("2"
                                              (induct "i")
                                              (("1" (assert) nil nil)
                                               ("2" (assert) nil nil)
                                               ("3" (assert) nil nil)
                                               ("4"
                                                (skosimp*)
                                                (("4"
                                                  (case-replace
                                                   "j!1=0")
                                                  (("1"
                                                    (hide-all-but 1)
                                                    (("1"
                                                      (split)
                                                      (("1"
                                                        (expand
                                                         "image")
                                                        (("1"
                                                          (expand
                                                           "nonempty?")
                                                          (("1"
                                                            (expand
                                                             "empty?")
                                                            (("1"
                                                              (expand
                                                               "member")
                                                              (("1"
                                                                (inst
                                                                 -
                                                                 "u!1(0)(x!1)")
                                                                (("1"
                                                                  (inst
                                                                   +
                                                                   "0")
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (expand
                                                         "image")
                                                        (("2"
                                                          (expand
                                                           "above_bounded")
                                                          (("2"
                                                            (expand
                                                             "upper_bound")
                                                            (("2"
                                                              (inst
                                                               +
                                                               "u!1(0)(x!1)")
                                                              (("2"
                                                                (skosimp)
                                                                (("2"
                                                                  (typepred
                                                                   "z!1")
                                                                  (("2"
                                                                    (skosimp)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (case-replace
                                                         "j!1>0")
                                                        (("1"
                                                          (hide -4 1)
                                                          (("1"
                                                            (split)
                                                            (("1"
                                                              (expand
                                                               "nonempty?")
                                                              (("1"
                                                                (expand
                                                                 "empty?")
                                                                (("1"
                                                                  (expand
                                                                   "image")
                                                                  (("1"
                                                                    (expand
                                                                     "member")
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "u!1(0)(x!1)")
                                                                      (("1"
                                                                        (inst
                                                                         +
                                                                         "0")
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "above_bounded")
                                                              (("2"
                                                                (skosimp)
                                                                (("2"
                                                                  (inst
                                                                   +
                                                                   "max(n!2,u!1(j!1)(x!1))")
                                                                  (("2"
                                                                    (expand
                                                                     "image")
                                                                    (("2"
                                                                      (expand
                                                                       "upper_bound")
                                                                      (("2"
                                                                        (skosimp)
                                                                        (("2"
                                                                          (typepred
                                                                           "z!1")
                                                                          (("2"
                                                                            (skosimp)
                                                                            (("2"
                                                                              (typepred
                                                                               "x!2")
                                                                              (("2"
                                                                                (case-replace
                                                                                 "x!2=j!1")
                                                                                (("1"
                                                                                  (hide-all-but
                                                                                   (-3
                                                                                    1))
                                                                                  (("1"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (inst
                                                                                   -
                                                                                   "z!1")
                                                                                  (("1"
                                                                                    (hide
                                                                                     -4)
                                                                                    (("1"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (inst
                                                                                     +
                                                                                     "x!2")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (inst - "1")
                                  (("2"
                                    (skosimp)
                                    (("2"
                                      (case-replace "n!1>0")
                                      (("1"
                                        (case
                                         "forall (i:posnat): nonempty?[real]
          (image[nat, real](LAMBDA (n: nat): u!1(n)(x!1), {n | n < i}))
       AND
       below_bounded[real]
           (image[nat, real](LAMBDA (n: nat): u!1(n)(x!1), {n | n < i}))")
                                        (("1"
                                          (inst - "n!1")
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (expand "bounded_below?")
                                              (("1"
                                                (typepred
                                                 "glb(image[nat, real]
                               (LAMBDA (n: nat): u!1(n)(x!1),
                                {n | n < n!1}))")
                                                (("1"
                                                  (name-replace
                                                   "GLB"
                                                   "glb(image[nat, real]
                                    (LAMBDA (n: nat): u!1(n)(x!1),
                                     {n | n < n!1}))")
                                                  (("1"
                                                    (inst
                                                     +
                                                     "min(GLB,f!1(x!1)-1)")
                                                    (("1"
                                                      (expand
                                                       "greatest_lower_bound?")
                                                      (("1"
                                                        (expand
                                                         "lower_bound?")
                                                        (("1"
                                                          (skosimp)
                                                          (("1"
                                                            (case
                                                             "x!2<n!1")
                                                            (("1"
                                                              (inst
                                                               -
                                                               "u!1(x!2)(x!1)")
                                                              (("1"
                                                                (hide
                                                                 -3
                                                                 -4
                                                                 -5)
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "image")
                                                                (("2"
                                                                  (inst
                                                                   +
                                                                   "x!2")
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (inst
                                                               -6
                                                               "x!2")
                                                              (("2"
                                                                (hide-all-but
                                                                 (-6
                                                                  1
                                                                  2))
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but
                                                   (-1 -2 1))
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (expand
                                                       "below_bounded")
                                                      (("2"
                                                        (expand
                                                         "bounded_below?")
                                                        (("2"
                                                          (expand
                                                           "lower_bound?")
                                                          (("2"
                                                            (expand
                                                             "lower_bound")
                                                            (("2"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but 1)
                                          (("2"
                                            (induct "i")
                                            (("1" (assert) nil nil)
                                             ("2" (assert) nil nil)
                                             ("3" (assert) nil nil)
                                             ("4"
                                              (skosimp*)
                                              (("4"
                                                (case-replace "j!1=0")
                                                (("1"
                                                  (expand "image")
                                                  (("1"
                                                    (expand
                                                     "nonempty?")
                                                    (("1"
                                                      (expand "empty?")
                                                      (("1"
                                                        (expand
                                                         "member")
                                                        (("1"
                                                          (expand
                                                           "below_bounded")
                                                          (("1"
                                                            (hide-all-but
                                                             1)
                                                            (("1"
                                                              (split)
                                                              (("1"
                                                                (inst
                                                                 -
                                                                 "u!1(0)(x!1)")
                                                                (("1"
                                                                  (inst
                                                                   +
                                                                   "0")
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (inst
                                                                 +
                                                                 "u!1(0)(x!1)")
                                                                (("2"
                                                                  (expand
                                                                   "lower_bound")
                                                                  (("2"
                                                                    (skosimp)
                                                                    (("2"
                                                                      (typepred
                                                                       "z!1")
                                                                      (("2"
                                                                        (skosimp)
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (case "j!1>0")
                                                      (("1"
                                                        (hide -4 1 -2)
                                                        (("1"
                                                          (split)
                                                          (("1"
                                                            (expand
                                                             "nonempty?")
                                                            (("1"
                                                              (expand
                                                               "empty?")
                                                              (("1"
                                                                (inst
                                                                 -
                                                                 "u!1(0)(x!1)")
                                                                (("1"
                                                                  (expand
                                                                   "image")
                                                                  (("1"
                                                                    (expand
                                                                     "member")
                                                                    (("1"
                                                                      (inst
                                                                       +
                                                                       "0")
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (expand
                                                             "image")
                                                            (("2"
                                                              (expand
                                                               "below_bounded")
                                                              (("2"
                                                                (skosimp)
                                                                (("2"
                                                                  (inst
                                                                   +
                                                                   "min(n!2,u!1(j!1)(x!1))")
                                                                  (("2"
                                                                    (expand
                                                                     "lower_bound")
                                                                    (("2"
                                                                      (skosimp)
                                                                      (("2"
                                                                        (typepred
                                                                         "z!1")
                                                                        (("2"
                                                                          (skosimp)
                                                                          (("2"
                                                                            (case-replace
                                                                             "x!2=j!1")
                                                                            (("1"
                                                                              (hide
                                                                               -4)
                                                                              (("1"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (inst
                                                                               -
                                                                               "z!1")
                                                                              (("1"
                                                                                (grind)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (inst
                                                                                 +
                                                                                 "x!2")
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "bounded_below?")
                                        (("2"
                                          (inst + "f!1(x!1)-1")
                                          (("2"
                                            (skosimp)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (inst - "x!2")
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pointwise_bounded? const-decl "bool" pointwise_convergence nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (metric_converges_to const-decl "bool" metric_space_def
     metric_space)
    (member const-decl "bool" sets nil)
    (j!1 skolem-const-decl "nat" pointwise_convergence nil)
    (z!1 skolem-const-decl
     "({y: real | EXISTS (x: ({n | n < 1 + j!1})): y = u!1(x)(x!1)})"
     pointwise_convergence nil)
    (x!2 skolem-const-decl "({n | n < 1 + j!1})" pointwise_convergence
     nil)
    (n!1 skolem-const-decl "nat" pointwise_convergence nil)
    (bounded_below? const-decl "bool" real_fun_preds reals)
    (lower_bound const-decl "bool" bound_defs reals)
    (x!2 skolem-const-decl "nat" pointwise_convergence nil)
    (lower_bound? const-decl "bool" bounded_real_defs nil)
    (<= const-decl "bool" reals nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (glb const-decl "{x | greatest_lower_bound?(x, SB)}"
     bounded_real_defs nil)
    (bounded_below? const-decl "bool" bounded_real_defs nil)
    (greatest_lower_bound? const-decl "bool" bounded_real_defs nil)
    (below_bounded const-decl "bool" bounded_reals reals)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (bounded_above? const-decl "bool" real_fun_preds reals)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (set type-eq-decl nil sets nil)
    (nonempty? const-decl "bool" sets nil)
    (image const-decl "set[R]" function_image nil)
    (< const-decl "bool" reals nil)
    (setof type-eq-decl nil defined_types nil)
    (above_bounded const-decl "bool" bounded_reals reals)
    (u!1 skolem-const-decl "pointwise_convergent" pointwise_convergence
     nil)
    (x!1 skolem-const-decl "T" pointwise_convergence nil)
    (bounded_above? const-decl "bool" bounded_real_defs nil)
    (lub const-decl "{x | least_upper_bound?(x, SA)}" bounded_real_defs
     nil)
    (least_upper_bound? const-decl "bool" bounded_real_defs nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (upper_bound const-decl "bool" bound_defs reals)
    (upper_bound? const-decl "bool" bounded_real_defs nil)
    (x!2 skolem-const-decl "nat" pointwise_convergence nil)
    (n!1 skolem-const-decl "nat" pointwise_convergence nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (empty? const-decl "bool" sets nil)
    (j!1 skolem-const-decl "nat" pointwise_convergence nil)
    (z!1 skolem-const-decl
     "({y: real | EXISTS (x: ({n | n < 1 + j!1})): y = u!1(x)(x!1)})"
     pointwise_convergence nil)
    (x!2 skolem-const-decl "({n | n < 1 + j!1})" pointwise_convergence
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ball const-decl "set[T]" metric_space_def metric_space)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (metric_convergence_def formula-decl nil metric_space metric_space)
    (pointwise_convergence? const-decl "bool" pointwise_convergence
     nil)
    (pointwise_convergent nonempty-type-eq-decl nil
     pointwise_convergence nil)
    (pointwise_convergent? const-decl "bool" pointwise_convergence nil)
    (T formal-type-decl nil pointwise_convergence nil)
    (sequence type-eq-decl nil sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (bounded_seq_def formula-decl nil convergence_aux metric_space)
    (pointwise? const-decl "bool" pointwise_convergence nil))
   nil
   (pointwise_convergent_is_pointwise_bounded subtype
    "pointwise_convergence.x" "pointwise_bounded")))
 (plus_minus_pointwise_convergence 0
  (plus_minus_pointwise_convergence-3 "" 3789903475
   ("" (skosimp)
    (("" (split)
      (("1" (flatten)
        (("1"
          (case-replace "pointwise_convergence?(plus(u!1), plus(f!1))")
          (("1"
            (lemma "pointwise_convergence_diff"
             ("u" "plus(u!1)" "f0" "plus(f!1)" "v" "u!1" "f1" "f!1"))
            (("1" (assert)
              (("1" (hide -2 -3)
                (("1" (case-replace " plus(f!1) - f!1=minus(f!1)")
                  (("1" (case-replace "plus(u!1) - u!1=minus(u!1)")
                    (("1" (hide-all-but 1)
                      (("1" (apply-extensionality :hide? t)
                        (("1" (expand "-")
                          (("1" (expand "plus")
                            (("1" (expand "minus")
                              (("1"
                                (apply-extensionality :hide? t)
                                (("1" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide-all-but 1)
                    (("2" (apply-extensionality :hide? t)
                      (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide 2)
            (("2" (expand "pointwise_convergence?")
              (("2" (skosimp)
                (("2" (inst - "x!1")
                  (("2" (expand "plus")
                    (("2" (expand "plus")
                      (("2" (rewrite "metric_convergence_def" *)
                        (("2" (rewrite "metric_convergence_def" *)
                          (("2" (expand "metric_converges_to")
                            (("2" (skosimp)
                              (("2"
                                (expand "ball")
                                (("2"
                                  (expand "member")
                                  (("2"
                                    (lemma
                                     "trichotomy"
                                     ("x" "f!1(x!1)"))
                                    (("2"
                                      (split -1)
                                      (("1"
                                        (case-replace
                                         "max(f!1(x!1), 0)=f!1(x!1)")
                                        (("1"
                                          (hide -1)
                                          (("1"
                                            (inst
                                             -
                                             "min(r!1,abs(f!1(x!1)))")
                                            (("1"
                                              (skosimp)
                                              (("1"
                                                (inst + "n!1")
                                                (("1"
                                                  (skosimp)
                                                  (("1"
                                                    (inst - "i!1")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand "max")
                                                        (("1"
                                                          (case-replace
                                                           "u!1(i!1)(x!1) < 0")
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 2)
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but (-1 1))
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (replace -1)
                                        (("2"
                                          (expand "max" 1 1)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (inst - "r!1")
                                              (("2"
                                                (skosimp)
                                                (("2"
                                                  (inst + "n!1")
                                                  (("2"
                                                    (skosimp)
                                                    (("2"
                                                      (inst - "i!1")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (rewrite
                                                           "abs_mult"
                                                           -3)
                                                          (("2"
                                                            (rewrite
                                                             "abs_mult"
                                                             1)
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (case-replace
                                         "max(f!1(x!1), 0)=0")
                                        (("1"
                                          (hide -1)
                                          (("1"
                                            (inst
                                             -
                                             "min(r!1, abs(f!1(x!1)))")
                                            (("1"
                                              (skosimp)
                                              (("1"
                                                (inst + "n!1")
                                                (("1"
                                                  (skosimp)
                                                  (("1"
                                                    (inst - "i!1")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 2)
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but (-1 1))
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2"
          (lemma "pointwise_convergence_diff"
           ("u" "plus(u!1)" "f0" "plus(f!1)" "v" "minus(u!1)" "f1"
            "minus(f!1)"))
          (("2" (assert)
            (("2" (hide -2 -3)
              (("2" (lemma "plus_minus_def" ("f" "f!1"))
                (("2" (replace -1 -2 rl)
                  (("2" (hide -1)
                    (("2" (case-replace "plus(u!1) - minus(u!1)=u!1")
                      (("2" (hide-all-but 1)
                        (("2" (apply-extensionality :hide? t)
                          (("2" (expand "-")
                            (("2" (expand "plus")
                              (("2"
                                (expand "minus")
                                (("2"
                                  (lemma
                                   "plus_minus_def"
                                   ("f" "u!1(x!1)"))
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil pointwise_convergence nil)
    (sequence type-eq-decl nil sequences nil)
    (pointwise_convergence? const-decl "bool" pointwise_convergence
     nil)
    (nnreal type-eq-decl nil real_types nil)
    (plus const-decl "sequence[[T -> nnreal]]" pointwise_convergence
     nil)
    (plus const-decl "[T -> nnreal]" real_fun_ops_aux reals)
    (minus const-decl "[T -> nnreal]" real_fun_ops_aux reals)
    (- const-decl "[T -> real]" real_fun_ops reals)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (- const-decl "sequence[[T -> real]]" pointwise_convergence nil)
    (minus const-decl "sequence[[T -> nnreal]]" pointwise_convergence
     nil)
    (pointwise_convergence_diff formula-decl nil pointwise_convergence
     nil)
    (member const-decl "bool" sets nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (< const-decl "bool" reals nil)
    (x!1 skolem-const-decl "T" pointwise_convergence nil)
    (f!1 skolem-const-decl "[T -> real]" pointwise_convergence nil)
    (r!1 skolem-const-decl "posreal" pointwise_convergence nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (nonneg_real_min application-judgement
     "{z: nonneg_real | z <= x AND z <= y}" real_defs nil)
    (abs_mult formula-decl nil real_props nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (trichotomy formula-decl nil real_axioms nil)
    (ball const-decl "set[T]" metric_space_def metric_space)
    (metric_converges_to const-decl "bool" metric_space_def
     metric_space)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (metric_convergence_def formula-decl nil metric_space metric_space)
    (plus_minus_def formula-decl nil real_fun_ops_aux reals))
   shostak)
  (plus_minus_pointwise_convergence-2 "" 3758920360
   ("" (skosimp)
    (("" (split)
      (("1" (flatten)
        (("1"
          (case-replace "pointwise_convergence?(plus(u!1), plus(f!1))")
          (("1"
            (lemma "pointwise_convergence_diff"
             ("u" "plus(u!1)" "f0" "plus(f!1)" "v" "u!1" "f1" "f!1"))
            (("1" (assert)
              (("1" (hide -2 -3)
                (("1" (case-replace " plus(f!1) - f!1=minus(f!1)")
                  (("1" (case-replace "plus(u!1) - u!1=minus(u!1)")
                    (("1" (hide-all-but 1)
                      (("1" (apply-extensionality :hide? t)
                        (("1" (expand "-")
                          (("1" (expand "plus")
                            (("1" (expand "minus")
                              (("1"
                                (apply-extensionality :hide? t)
                                (("1" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide-all-but 1)
                    (("2" (apply-extensionality :hide? t)
                      (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide 2)
            (("2" (expand "pointwise_convergence?")
              (("2" (skosimp)
                (("2" (inst - "x!1")
                  (("2" (expand "plus")
                    (("2" (expand "plus")
                      (("2" (rewrite "metric_convergence_def" *)
                        (("2" (rewrite "metric_convergence_def" *)
                          (("1" (expand "metric_converges_to")
                            (("1" (skosimp)
                              (("1"
                                (expand "ball")
                                (("1"
                                  (expand "member")
                                  (("1"
                                    (lemma
                                     "trichotomy"
                                     ("x" "f!1(x!1)"))
                                    (("1"
                                      (split -1)
                                      (("1"
                                        (case-replace
                                         "max(f!1(x!1), 0)=f!1(x!1)")
                                        (("1"
                                          (hide -1)
                                          (("1"
                                            (inst
                                             -
                                             "min(r!1,abs(f!1(x!1)))")
                                            (("1"
                                              (skosimp)
                                              (("1"
                                                (inst + "n!1")
                                                (("1"
                                                  (skosimp)
                                                  (("1"
                                                    (inst - "i!1")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand "max")
                                                        (("1"
                                                          (case-replace
                                                           "u!1(i!1)(x!1) < 0")
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 2)
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but (-1 1))
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (replace -1)
                                        (("2"
                                          (expand "max" 1 1)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (inst - "r!1")
                                              (("2"
                                                (skosimp)
                                                (("2"
                                                  (inst + "n!1")
                                                  (("2"
                                                    (skosimp)
                                                    (("2"
                                                      (inst - "i!1")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (rewrite
                                                           "abs_mult"
                                                           -3)
                                                          (("2"
                                                            (rewrite
                                                             "abs_mult"
                                                             1)
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (case-replace
                                         "max(f!1(x!1), 0)=0")
                                        (("1"
                                          (hide -1)
                                          (("1"
                                            (inst
                                             -
                                             "min(r!1, abs(f!1(x!1)))")
                                            (("1"
                                              (skosimp)
                                              (("1"
                                                (inst + "n!1")
                                                (("1"
                                                  (skosimp)
                                                  (("1"
                                                    (inst - "i!1")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 2)
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but (-1 1))
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide-all-but 1)
                            (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2"
          (lemma "pointwise_convergence_diff"
           ("u" "plus(u!1)" "f0" "plus(f!1)" "v" "minus(u!1)" "f1"
            "minus(f!1)"))
          (("2" (assert)
            (("2" (hide -2 -3)
              (("2" (lemma "plus_minus_def" ("f" "f!1"))
                (("2" (replace -1 -2 rl)
                  (("2" (hide -1)
                    (("2" (case-replace "plus(u!1) - minus(u!1)=u!1")
                      (("2" (hide-all-but 1)
                        (("2" (apply-extensionality :hide? t)
                          (("2" (expand "-")
                            (("2" (expand "plus")
                              (("2"
                                (expand "minus")
                                (("2"
                                  (lemma
                                   "plus_minus_def"
                                   ("f" "u!1(x!1)"))
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sequence type-eq-decl nil sequences nil)
    (plus const-decl "[T -> nnreal]" real_fun_ops_aux reals)
    (minus const-decl "[T -> nnreal]" real_fun_ops_aux reals)
    (member const-decl "bool" sets nil)
    (ball const-decl "set[T]" metric_space_def metric_space)
    (metric_converges_to const-decl "bool" metric_space_def
     metric_space)
    (metric_convergence_def formula-decl nil metric_space metric_space)
    (plus_minus_def formula-decl nil real_fun_ops_aux reals))
   shostak)
  (plus_minus_pointwise_convergence-1 nil 3392116096
   ("" (skosimp)
    (("" (split)
      (("1" (flatten)
        (("1"
          (case-replace "pointwise_convergence?(plus(u!1), plus(f!1))")
          (("1"
            (lemma "pointwise_convergence_diff"
             ("u" "plus(u!1)" "f0" "plus(f!1)" "v" "u!1" "f1" "f!1"))
            (("1" (assert)
              (("1" (hide -2 -3)
                (("1" (case-replace " plus(f!1) - f!1=minus(f!1)")
                  (("1" (case-replace "plus(u!1) - u!1=minus(u!1)")
                    (("1" (hide-all-but 1)
                      (("1" (apply-extensionality :hide? t)
                        (("1" (expand "-")
                          (("1" (expand "plus")
                            (("1" (expand "minus")
                              (("1"
                                (apply-extensionality :hide? t)
                                (("1" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide-all-but 1)
                    (("2" (apply-extensionality :hide? t)
                      (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide 2)
            (("2" (expand "pointwise_convergence?")
              (("2" (skosimp)
                (("2" (inst - "x!1")
                  (("2" (expand "plus")
                    (("2" (expand "plus")
                      (("2" (rewrite "metric_convergence_def" *)
                        (("2" (rewrite "metric_convergence_def" *)
                          (("2" (expand "metric_converges_to")
                            (("2" (skosimp)
                              (("2"
                                (expand "ball")
                                (("2"
                                  (expand "member")
                                  (("2"
                                    (lemma
                                     "trichotomy"
                                     ("x" "f!1(x!1)"))
                                    (("2"
                                      (split -1)
                                      (("1"
                                        (case-replace
                                         "max(f!1(x!1), 0)=f!1(x!1)")
                                        (("1"
                                          (hide -1)
                                          (("1"
                                            (inst
                                             -
                                             "min(r!1,abs(f!1(x!1)))")
                                            (("1"
                                              (skosimp)
                                              (("1"
                                                (inst + "n!1")
                                                (("1"
                                                  (skosimp)
                                                  (("1"
                                                    (inst - "i!1")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand "max")
                                                        (("1"
                                                          (case-replace
                                                           "u!1(i!1)(x!1) < 0")
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 2)
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but (-1 1))
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (replace -1)
                                        (("2"
                                          (expand "max" 1 1)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (inst - "r!1")
                                              (("2"
                                                (skosimp)
                                                (("2"
                                                  (inst + "n!1")
                                                  (("2"
                                                    (skosimp)
                                                    (("2"
                                                      (inst - "i!1")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (rewrite
                                                           "abs_mult"
                                                           -3)
                                                          (("2"
                                                            (rewrite
                                                             "abs_mult"
                                                             1)
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (case-replace
                                         "max(f!1(x!1), 0)=0")
                                        (("1"
                                          (hide -1)
                                          (("1"
                                            (inst
                                             -
                                             "min(r!1, abs(f!1(x!1)))")
                                            (("1"
                                              (skosimp)
                                              (("1"
                                                (inst + "n!1")
                                                (("1"
                                                  (skosimp)
                                                  (("1"
                                                    (inst - "i!1")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 2)
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but (-1 1))
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2"
          (lemma "pointwise_convergence_diff"
           ("u" "plus(u!1)" "f0" "plus(f!1)" "v" "minus(u!1)" "f1"
            "minus(f!1)"))
          (("2" (assert)
            (("2" (hide -2 -3)
              (("2" (lemma "plus_minus_def" ("f" "f!1"))
                (("2" (replace -1 -2 rl)
                  (("2" (hide -1)
                    (("2" (case-replace "plus(u!1) - minus(u!1)=u!1")
                      (("2" (hide-all-but 1)
                        (("2" (apply-extensionality :hide? t)
                          (("2" (expand "-")
                            (("2" (expand "plus")
                              (("2"
                                (expand "minus")
                                (("2"
                                  (lemma
                                   "plus_minus_def"
                                   ("f" "u!1(x!1)"))
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((plus_minus_def formula-decl nil real_fun_ops_aux reals)
    (metric_convergence_def formula-decl nil metric_space metric_space)
    (metric_triangle? const-decl "bool" metric_def metric_space)
    (metric_symmetric? const-decl "bool" metric_def metric_space)
    (metric_zero? const-decl "bool" metric_def metric_space)
    (metric_converges_to const-decl "bool" metric_space_def
     metric_space)
    (ball const-decl "set[T]" metric_space_def metric_space)
    (member const-decl "bool" sets nil)
    (metric? const-decl "bool" metric_def metric_space)
    (minus const-decl "[T -> nnreal]" real_fun_ops_aux reals)
    (plus const-decl "[T -> nnreal]" real_fun_ops_aux reals)
    (sequence type-eq-decl nil sequences nil))
   shostak))
 (inf_TCC1 0
  (inf_TCC1-1 nil 3392257085
   ("" (skosimp)
    (("" (split)
      (("1" (expand "image")
        (("1" (expand "nonempty?")
          (("1" (expand "empty?")
            (("1" (expand "member")
              (("1" (inst - "p!1(n!1)(x!1)")
                (("1" (inst + "n!1") nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (typepred "p!1")
        (("2" (expand "pointwise_bounded_below?")
          (("2" (expand "pointwise?")
            (("2" (inst - "x!1")
              (("2" (expand "bounded_below?")
                (("2" (expand "below_bounded")
                  (("2" (expand "lower_bound")
                    (("2" (skosimp)
                      (("2" (inst + "a!1")
                        (("2" (skosimp)
                          (("2" (typepred "z!1")
                            (("2" (expand "image")
                              (("2"
                                (skosimp)
                                (("2"
                                  (typepred "x!2")
                                  (("2"
                                    (inst - "x!2")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nonempty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (pointwise_bounded_below nonempty-type-eq-decl nil
     pointwise_convergence nil)
    (pointwise_bounded_below? const-decl "bool" pointwise_convergence
     nil)
    (sequence type-eq-decl nil sequences nil)
    (T formal-type-decl nil pointwise_convergence nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (empty? const-decl "bool" sets nil)
    (image const-decl "set[R]" function_image nil)
    (below_bounded const-decl "bool" bounded_reals reals)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (set type-eq-decl nil sets nil)
    (lower_bound const-decl "bool" bound_defs reals)
    (bounded_below? const-decl "bool" real_fun_preds reals)
    (pointwise? const-decl "bool" pointwise_convergence nil)
    (NOT const-decl "[bool -> bool]" booleans nil))
   nil
   (inf subtype
        "function_image[nat, real].image(LAMBDA m: pointwise_convergence.p(pointwise_convergence.m)(pointwise_convergence.x), {m | reals.>=(pointwise_convergence.m, pointwise_convergence.n)})"
        "inf_set[real]")))
 (limsup_TCC1 0
  (limsup_TCC1-1 nil 3392257085
   ("" (skosimp)
    (("" (split)
      (("1" (expand "fullset")
        (("1" (expand "image")
          (("1" (expand "nonempty?")
            (("1" (expand "empty?")
              (("1" (expand "member")
                (("1" (inst - "inf(b!1)(0)(x!1)")
                  (("1" (inst + "0") nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (typepred "b!1")
        (("2" (lemma "pointwise_bounded_is_bounded_above" ("x" "b!1"))
          (("2" (hide -2)
            (("2" (expand "pointwise_bounded_above?")
              (("2" (expand "pointwise?")
                (("2" (inst - "x!1")
                  (("2" (expand "bounded_above?")
                    (("2" (expand "fullset")
                      (("2" (expand "image")
                        (("2" (expand "above_bounded")
                          (("2" (skosimp)
                            (("2" (expand "upper_bound")
                              (("2"
                                (inst + "a!1")
                                (("2"
                                  (skosimp)
                                  (("2"
                                    (typepred "z!1")
                                    (("2"
                                      (skosimp)
                                      (("2"
                                        (expand "inf")
                                        (("2"
                                          (typepred
                                           "inf(image[nat, real](LAMBDA (m:nat): b!1(m)(x!1), {m:nat | m >= x!2}))")
                                          (("2"
                                            (replace -2 * rl)
                                            (("2"
                                              (expand
                                               "greatest_lower_bound")
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (expand
                                                   "lower_bound")
                                                  (("2"
                                                    (inst
                                                     -
                                                     "b!1(x!2)(x!1)")
                                                    (("1"
                                                      (inst -4 "x!2")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand "image")
                                                      (("2"
                                                        (inst + "x!2")
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((image const-decl "set[R]" function_image nil)
    (empty? const-decl "bool" sets nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil pointwise_convergence nil)
    (sequence type-eq-decl nil sequences nil)
    (pointwise_bounded_below? const-decl "bool" pointwise_convergence
     nil)
    (pointwise_bounded_below nonempty-type-eq-decl nil
     pointwise_convergence nil)
    (inf const-decl "real" pointwise_convergence nil)
    (pointwise_bounded? const-decl "bool" pointwise_convergence nil)
    (pointwise_bounded nonempty-type-eq-decl nil pointwise_convergence
     nil)
    (TRUE const-decl "bool" booleans nil)
    (member const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (fullset const-decl "set" sets nil)
    (pointwise_bounded_is_bounded_above judgement-tcc nil
     pointwise_convergence nil)
    (pointwise_bounded_above? const-decl "bool" pointwise_convergence
     nil)
    (above_bounded const-decl "bool" bounded_reals reals)
    (upper_bound const-decl "bool" bound_defs reals)
    (pred type-eq-decl nil defined_types nil)
    (greatest_lower_bound const-decl "bool" bound_defs reals)
    (<= const-decl "bool" reals nil)
    (inf_set type-eq-decl nil bounded_reals reals)
    (set type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (below_bounded const-decl "bool" bounded_reals reals)
    (inf const-decl "{x | greatest_lower_bound(<=)(x, Sl)}"
         bounded_reals reals)
    (lower_bound const-decl "bool" bound_defs reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (x!2 skolem-const-decl "nat" pointwise_convergence nil)
    (x!1 skolem-const-decl "T" pointwise_convergence nil)
    (b!1 skolem-const-decl "pointwise_bounded" pointwise_convergence
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bounded_above? const-decl "bool" real_fun_preds reals)
    (pointwise? const-decl "bool" pointwise_convergence nil)
    (NOT const-decl "[bool -> bool]" booleans nil))
   nil
   (limsup subtype
    "function_image[nat, real].image(LAMBDA m: pointwise_convergence.inf(pointwise_convergence.b)(pointwise_convergence.m)(pointwise_convergence.x), sets[nat].fullset)"
    "sup_set[real]")))
 (sup_TCC1 0
  (sup_TCC1-1 nil 3392091014
   ("" (skosimp)
    (("" (split)
      (("1" (expand "image")
        (("1" (expand "nonempty?")
          (("1" (expand "empty?")
            (("1" (expand "member")
              (("1" (inst - "a!1(n!1)(x!1)")
                (("1" (inst + "n!1") nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (typepred "a!1")
        (("2" (expand "pointwise_bounded_above?")
          (("2" (expand "pointwise?")
            (("2" (inst - "x!1")
              (("2" (expand "bounded_above?")
                (("2" (expand "image")
                  (("2" (expand "above_bounded")
                    (("2" (expand "upper_bound")
                      (("2" (skosimp)
                        (("2" (inst + "a!2")
                          (("2" (skosimp)
                            (("2" (typepred "z!1")
                              (("2"
                                (skosimp)
                                (("2"
                                  (inst - "x!2")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nonempty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (pointwise_bounded_above nonempty-type-eq-decl nil
     pointwise_convergence nil)
    (pointwise_bounded_above? const-decl "bool" pointwise_convergence
     nil)
    (sequence type-eq-decl nil sequences nil)
    (T formal-type-decl nil pointwise_convergence nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (empty? const-decl "bool" sets nil)
    (image const-decl "set[R]" function_image nil)
    (upper_bound const-decl "bool" bound_defs reals)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (above_bounded const-decl "bool" bounded_reals reals)
    (bounded_above? const-decl "bool" real_fun_preds reals)
    (pointwise? const-decl "bool" pointwise_convergence nil)
    (NOT const-decl "[bool -> bool]" booleans nil))
   nil
   (sup subtype
        "function_image[nat, real].image(LAMBDA m: pointwise_convergence.a(pointwise_convergence.m)(pointwise_convergence.x), {m | reals.>=(pointwise_convergence.m, pointwise_convergence.n)})"
        "sup_set[real]")))
 (liminf_TCC1 0
  (liminf_TCC1-1 nil 3392306597
   ("" (skosimp)
    (("" (split)
      (("1" (expand "fullset")
        (("1" (expand "image")
          (("1" (expand "nonempty?")
            (("1" (expand "empty?")
              (("1" (expand "member")
                (("1" (inst - "sup(b!1)(0)(x!1)")
                  (("1" (inst + "0") nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (typepred "b!1")
        (("2" (rewrite "pointwise_bounded_def")
          (("2" (flatten)
            (("2" (expand "pointwise_bounded_below?")
              (("2" (expand "pointwise?")
                (("2" (inst - "x!1")
                  (("2" (hide -1)
                    (("2" (expand "bounded_below?")
                      (("2" (expand "fullset")
                        (("2" (expand "image")
                          (("2" (expand "below_bounded")
                            (("2" (expand "lower_bound")
                              (("2"
                                (skosimp)
                                (("2"
                                  (inst + "a!1")
                                  (("2"
                                    (skosimp)
                                    (("2"
                                      (typepred "z!1")
                                      (("2"
                                        (skosimp)
                                        (("2"
                                          (expand "sup")
                                          (("2"
                                            (typepred
                                             "sup(image[nat, real](LAMBDA (m:nat): b!1(m)(x!1), {m:nat | m >= x!2}))")
                                            (("2"
                                              (replace -2 * rl)
                                              (("2"
                                                (hide -2)
                                                (("2"
                                                  (expand
                                                   "least_upper_bound")
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (expand
                                                       "upper_bound")
                                                      (("2"
                                                        (inst
                                                         -
                                                         "b!1(x!2)(x!1)")
                                                        (("1"
                                                          (inst
                                                           -3
                                                           "x!2")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           "image")
                                                          (("2"
                                                            (inst
                                                             +
                                                             "x!2")
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((image const-decl "set[R]" function_image nil)
    (empty? const-decl "bool" sets nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil pointwise_convergence nil)
    (sequence type-eq-decl nil sequences nil)
    (pointwise_bounded_above? const-decl "bool" pointwise_convergence
     nil)
    (pointwise_bounded_above nonempty-type-eq-decl nil
     pointwise_convergence nil)
    (sup const-decl "real" pointwise_convergence nil)
    (pointwise_bounded? const-decl "bool" pointwise_convergence nil)
    (pointwise_bounded nonempty-type-eq-decl nil pointwise_convergence
     nil)
    (TRUE const-decl "bool" booleans nil)
    (member const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (fullset const-decl "set" sets nil)
    (pointwise_bounded_def formula-decl nil pointwise_convergence nil)
    (pointwise_bounded_below? const-decl "bool" pointwise_convergence
     nil)
    (bounded_below? const-decl "bool" real_fun_preds reals)
    (lower_bound const-decl "bool" bound_defs reals)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (upper_bound const-decl "bool" bound_defs reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (x!2 skolem-const-decl "nat" pointwise_convergence nil)
    (x!1 skolem-const-decl "T" pointwise_convergence nil)
    (b!1 skolem-const-decl "pointwise_bounded" pointwise_convergence
     nil)
    (sup const-decl "{x | least_upper_bound(<=)(x, Su)}" bounded_reals
         reals)
    (above_bounded const-decl "bool" bounded_reals reals)
    (setof type-eq-decl nil defined_types nil)
    (set type-eq-decl nil sets nil)
    (sup_set type-eq-decl nil bounded_reals reals)
    (<= const-decl "bool" reals nil)
    (least_upper_bound const-decl "bool" bound_defs reals)
    (pred type-eq-decl nil defined_types nil)
    (below_bounded const-decl "bool" bounded_reals reals)
    (pointwise? const-decl "bool" pointwise_convergence nil)
    (NOT const-decl "[bool -> bool]" booleans nil))
   nil
   (liminf subtype
    "function_image[nat, real].image(LAMBDA m: pointwise_convergence.sup(pointwise_convergence.b)(pointwise_convergence.m)(pointwise_convergence.x), sets[nat].fullset)"
    "inf_set[real]")))
 (sup_inf_def_TCC1 0
  (sup_inf_def_TCC1-1 nil 3392306597
   ("" (skosimp)
    (("" (typepred "a!1")
      (("" (expand "pointwise_bounded_above?")
        (("" (expand "pointwise_bounded_below?")
          (("" (expand "pointwise?")
            (("" (skosimp)
              (("" (inst - "x!1")
                (("" (expand "bounded_below?")
                  (("" (expand "bounded_above?")
                    (("" (skosimp)
                      (("" (assert)
                        (("" (expand "-")
                          (("" (expand "-")
                            (("" (inst + "-a!2")
                              ((""
                                (skosimp)
                                ((""
                                  (inst - "x!2")
                                  (("" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pointwise_bounded_above nonempty-type-eq-decl nil
     pointwise_convergence nil)
    (pointwise_bounded_above? const-decl "bool" pointwise_convergence
     nil)
    (sequence type-eq-decl nil sequences nil)
    (T formal-type-decl nil pointwise_convergence nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (pointwise_bounded_below? const-decl "bool" pointwise_convergence
     nil)
    (bounded_below? const-decl "bool" real_fun_preds reals)
    (- const-decl "sequence[[T -> real]]" pointwise_convergence nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[T -> real]" real_fun_ops reals)
    (bounded_above? const-decl "bool" real_fun_preds reals)
    (pointwise? const-decl "bool" pointwise_convergence nil))
   nil
   (sup_inf_def subtype
    "(pointwise_convergence.-)(pointwise_convergence.a)"
    "pointwise_bounded_below")))
 (sup_inf_def 0
  (sup_inf_def-1 nil 3392306598
   ("" (skosimp)
    (("" (apply-extensionality :hide? t)
      (("" (apply-extensionality :hide? t)
        (("" (expand "inf")
          (("" (expand "-")
            (("" (expand "-")
              (("" (expand "sup")
                ((""
                  (typepred
                   "sup(image[nat, real](LAMBDA m: a!1(m)(x!2), {m | m >= x!1}))")
                  ((""
                    (name-replace "SUP"
                     "sup(image[nat, real](LAMBDA m: a!1(m)(x!2), {m | m >= x!1}))")
                    ((""
                      (typepred "inf(image[nat, real]
                (LAMBDA (m_1: nat): -a!1(m_1)(x!2),
                 {m_1: nat | m_1 >= x!1}))")
                      ((""
                        (name-replace "INF" "inf(image[nat, real]
                (LAMBDA (m_1: nat): -a!1(m_1)(x!2),
                 {m_1: nat | m_1 >= x!1}))")
                        (("" (expand "image")
                          (("" (expand "greatest_lower_bound")
                            (("" (expand "least_upper_bound")
                              ((""
                                (expand "upper_bound")
                                ((""
                                  (expand "lower_bound")
                                  ((""
                                    (flatten)
                                    ((""
                                      (inst -4 "-INF")
                                      ((""
                                        (split -4)
                                        (("1"
                                          (inst -3 "-SUP")
                                          (("1"
                                            (split -3)
                                            (("1" (assert) nil nil)
                                             ("2" (assert) nil nil)
                                             ("3"
                                              (skosimp)
                                              (("3"
                                                (typepred "z!1")
                                                (("3"
                                                  (skosimp)
                                                  (("3"
                                                    (inst -4 "-z!1")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (inst + "x!3")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (propax) nil nil)
                                         ("3"
                                          (skosimp)
                                          (("3"
                                            (typepred "z!1")
                                            (("3"
                                              (skosimp)
                                              (("3"
                                                (inst -2 "-z!1")
                                                (("1"
                                                  (lemma
                                                   "both_sides_times_neg_le1"
                                                   ("nz" "-1"))
                                                  (("1"
                                                    (inst
                                                     -
                                                     "-z!1"
                                                     "INF")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (inst + "x!3")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil pointwise_convergence nil)
    (inf const-decl "real" pointwise_convergence nil)
    (pointwise_bounded_below nonempty-type-eq-decl nil
     pointwise_convergence nil)
    (pointwise_bounded_below? const-decl "bool" pointwise_convergence
     nil)
    (- const-decl "sequence[[T -> real]]" pointwise_convergence nil)
    (sup const-decl "real" pointwise_convergence nil)
    (pointwise_bounded_above nonempty-type-eq-decl nil
     pointwise_convergence nil)
    (pointwise_bounded_above? const-decl "bool" pointwise_convergence
     nil)
    (sequence type-eq-decl nil sequences nil)
    (- const-decl "[T -> real]" real_fun_ops reals)
    (image const-decl "set[R]" function_image nil)
    (sup const-decl "{x | least_upper_bound(<=)(x, Su)}" bounded_reals
         reals)
    (above_bounded const-decl "bool" bounded_reals reals)
    (setof type-eq-decl nil defined_types nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (sup_set type-eq-decl nil bounded_reals reals)
    (<= const-decl "bool" reals nil)
    (least_upper_bound const-decl "bool" bound_defs reals)
    (pred type-eq-decl nil defined_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (greatest_lower_bound const-decl "bool" bound_defs reals)
    (inf_set type-eq-decl nil bounded_reals reals)
    (below_bounded const-decl "bool" bounded_reals reals)
    (inf const-decl "{x | greatest_lower_bound(<=)(x, Sl)}"
         bounded_reals reals)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (lower_bound const-decl "bool" bound_defs reals)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (both_sides_times_neg_le1 formula-decl nil real_props nil)
    (nonpos_real nonempty-type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (negreal nonempty-type-eq-decl nil real_types nil)
    (z!1 skolem-const-decl
     "({y: real | EXISTS (x: ({m | m >= x!1})): y = a!1(x)(x!2)})"
     pointwise_convergence nil)
    (z!1 skolem-const-decl
     "({y: real | EXISTS (x: ({m_1: nat | m_1 >= x!1})): y = -a!1(x)(x!2)})"
     pointwise_convergence nil)
    (x!2 skolem-const-decl "T" pointwise_convergence nil)
    (a!1 skolem-const-decl "pointwise_bounded_above"
     pointwise_convergence nil)
    (x!1 skolem-const-decl "nat" pointwise_convergence nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (upper_bound const-decl "bool" bound_defs reals)
    (= const-decl "[T, T -> boolean]" equalities nil))
   shostak))
 (liminf_limsup_def_TCC1 0
  (liminf_limsup_def_TCC1-1 nil 3392306597
   ("" (skosimp)
    (("" (typepred "b!1")
      (("" (rewrite "pointwise_bounded_def")
        (("" (rewrite "pointwise_bounded_def")
          (("" (flatten)
            (("" (expand "pointwise_bounded_above?")
              (("" (expand "pointwise_bounded_below?")
                (("" (expand "pointwise?")
                  (("" (split)
                    (("1" (skosimp)
                      (("1" (hide -1)
                        (("1" (inst - "x!1")
                          (("1" (expand "bounded_below?")
                            (("1" (expand "bounded_above?")
                              (("1"
                                (skosimp)
                                (("1"
                                  (assert)
                                  (("1"
                                    (inst + "-a!1")
                                    (("1"
                                      (skosimp)
                                      (("1"
                                        (inst - "x!2")
                                        (("1" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (skosimp)
                      (("2" (inst - "x!1")
                        (("2" (hide -2)
                          (("2" (expand "bounded_above?")
                            (("2" (expand "bounded_below?")
                              (("2"
                                (skosimp)
                                (("2"
                                  (assert)
                                  (("2"
                                    (inst + "-a!1")
                                    (("2"
                                      (skosimp)
                                      (("2"
                                        (inst - "x!2")
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pointwise_bounded nonempty-type-eq-decl nil pointwise_convergence
     nil)
    (pointwise_bounded? const-decl "bool" pointwise_convergence nil)
    (sequence type-eq-decl nil sequences nil)
    (T formal-type-decl nil pointwise_convergence nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (- const-decl "sequence[[T -> real]]" pointwise_convergence nil)
    (pointwise_bounded_above? const-decl "bool" pointwise_convergence
     nil)
    (pointwise? const-decl "bool" pointwise_convergence nil)
    (bounded_above? const-decl "bool" real_fun_preds reals)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (- const-decl "[T -> real]" real_fun_ops reals)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (bounded_below? const-decl "bool" real_fun_preds reals)
    (pointwise_bounded_below? const-decl "bool" pointwise_convergence
     nil)
    (pointwise_bounded_def formula-decl nil pointwise_convergence nil))
   nil
   (liminf_limsup_def subtype
    "(pointwise_convergence.-)(pointwise_convergence.b)"
    "pointwise_bounded")))
 (liminf_limsup_def 0
  (liminf_limsup_def-1 nil 3392307047
   ("" (skosimp)
    (("" (apply-extensionality :hide? t)
      (("" (expand "liminf")
        (("" (expand "limsup")
          (("" (expand "-")
            (("" (expand "-")
              ((""
                (typepred
                 "inf(image[nat, real](LAMBDA m: sup(b!1)(m)(x!1), fullset[nat]))")
                ((""
                  (name-replace "INF" "inf(image[nat, real]
                                   (LAMBDA m: sup(b!1)(m)(x!1),
                                    fullset[nat]))")
                  ((""
                    (typepred "sup(image[nat, real]
                (LAMBDA (m_1: nat):
                   inf(LAMBDA n: LAMBDA (x: T): -b!1(n)(x))(m_1)(x!1),
                 fullset[nat]))")
                    (("1"
                      (name-replace "SUP" "sup(image[nat, real]
                (LAMBDA (m_1: nat):
                   inf(LAMBDA n: LAMBDA (x: T): -b!1(n)(x))(m_1)(x!1),
                 fullset[nat]))")
                      (("1" (expand "fullset")
                        (("1" (expand "image")
                          (("1" (expand "least_upper_bound")
                            (("1" (expand "greatest_lower_bound")
                              (("1"
                                (expand "lower_bound")
                                (("1"
                                  (expand "upper_bound")
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (inst -2 "-INF")
                                      (("1"
                                        (inst -4 "-SUP")
                                        (("1"
                                          (split -4)
                                          (("1"
                                            (split -3)
                                            (("1" (assert) nil nil)
                                             ("2" (assert) nil nil)
                                             ("3"
                                              (assert)
                                              (("3"
                                                (skosimp)
                                                (("3"
                                                  (typepred "z!1")
                                                  (("3"
                                                    (skosimp)
                                                    (("3"
                                                      (inst -4 "-z!1")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        (("2"
                                                          (rewrite
                                                           "sup_inf_def"
                                                           1)
                                                          (("2"
                                                            (expand
                                                             "-")
                                                            (("2"
                                                              (expand
                                                               "-")
                                                              (("2"
                                                                (inst
                                                                 +
                                                                 "x!2")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (propax) nil nil)
                                           ("3"
                                            (skosimp)
                                            (("3"
                                              (typepred "z!1")
                                              (("3"
                                                (skosimp)
                                                (("3"
                                                  (inst -2 "-z!1")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (inst + "x!2")
                                                    (("2"
                                                      (replace -1)
                                                      (("2"
                                                        (rewrite
                                                         "sup_inf_def"
                                                         1)
                                                        (("2"
                                                          (expand "-")
                                                          (("2"
                                                            (expand
                                                             "-")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (typepred "b!1")
                      (("2" (rewrite "pointwise_bounded_def")
                        (("2" (flatten)
                          (("2" (hide-all-but (-1 1))
                            (("2" (expand "pointwise_bounded_above?")
                              (("2"
                                (expand "pointwise_bounded_below?")
                                (("2"
                                  (expand "pointwise?")
                                  (("2"
                                    (skosimp)
                                    (("2"
                                      (inst - "x!2")
                                      (("2"
                                        (expand "bounded_below?")
                                        (("2"
                                          (expand "bounded_above?")
                                          (("2"
                                            (skosimp)
                                            (("2"
                                              (inst + "-a!1")
                                              (("2"
                                                (skosimp)
                                                (("2"
                                                  (inst - "x!3")
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((T formal-type-decl nil pointwise_convergence nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (- const-decl "sequence[[T -> real]]" pointwise_convergence nil)
    (limsup const-decl "real" pointwise_convergence nil)
    (- const-decl "[T -> real]" real_fun_ops reals)
    (liminf const-decl "real" pointwise_convergence nil)
    (pointwise_bounded nonempty-type-eq-decl nil pointwise_convergence
     nil)
    (pointwise_bounded? const-decl "bool" pointwise_convergence nil)
    (sequence type-eq-decl nil sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (pointwise? const-decl "bool" pointwise_convergence nil)
    (bounded_above? const-decl "bool" real_fun_preds reals)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (bounded_below? const-decl "bool" real_fun_preds reals)
    (pointwise_bounded_def formula-decl nil pointwise_convergence nil)
    (upper_bound const-decl "bool" bound_defs reals)
    (TRUE const-decl "bool" booleans nil)
    (b!1 skolem-const-decl "pointwise_bounded" pointwise_convergence
     nil)
    (x!1 skolem-const-decl "T" pointwise_convergence nil)
    (z!1 skolem-const-decl "({y: real |
    EXISTS (x_1: nat):
      y = inf(LAMBDA n: LAMBDA (x: T): -b!1(n)(x))(x_1)(x!1)})"
     pointwise_convergence nil)
    (sup_inf_def formula-decl nil pointwise_convergence nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (z!1 skolem-const-decl
     "({y: real | EXISTS (x_1: nat): y = sup(b!1)(x_1)(x!1)})"
     pointwise_convergence nil)
    (lower_bound const-decl "bool" bound_defs reals)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (inf const-decl "real" pointwise_convergence nil)
    (pointwise_bounded_below nonempty-type-eq-decl nil
     pointwise_convergence nil)
    (pointwise_bounded_below? const-decl "bool" pointwise_convergence
     nil)
    (sup const-decl "{x | least_upper_bound(<=)(x, Su)}" bounded_reals
         reals)
    (above_bounded const-decl "bool" bounded_reals reals)
    (sup_set type-eq-decl nil bounded_reals reals)
    (least_upper_bound const-decl "bool" bound_defs reals)
    (minus_real_is_real application-judgement "real" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (greatest_lower_bound const-decl "bool" bound_defs reals)
    (<= const-decl "bool" reals nil)
    (inf_set type-eq-decl nil bounded_reals reals)
    (set type-eq-decl nil sets nil)
    (nonempty? const-decl "bool" sets nil)
    (setof type-eq-decl nil defined_types nil)
    (below_bounded const-decl "bool" bounded_reals reals)
    (inf const-decl "{x | greatest_lower_bound(<=)(x, Sl)}"
         bounded_reals reals)
    (image const-decl "set[R]" function_image nil)
    (pointwise_bounded_above? const-decl "bool" pointwise_convergence
     nil)
    (pointwise_bounded_above nonempty-type-eq-decl nil
     pointwise_convergence nil)
    (sup const-decl "real" pointwise_convergence nil)
    (fullset const-decl "set" sets nil))
   shostak))
 (inf_pointwise_increasing 0
  (inf_pointwise_increasing-1 nil 3392295604
   ("" (skosimp)
    (("" (expand "pointwise_increasing?")
      (("" (skosimp)
        (("" (expand "increasing?")
          (("" (skosimp)
            (("" (expand "inf" 1 2)
              ((""
                (typepred
                 "inf(image[nat, real](LAMBDA m: p!1(m)(x!1), {m | m >= y!1}))")
                ((""
                  (name-replace "INF" "inf(image[nat, real]
                                   (LAMBDA m: p!1(m)(x!1),
                                    {m | m >= y!1}))")
                  (("" (expand "greatest_lower_bound")
                    (("" (flatten)
                      (("" (expand "image")
                        (("" (expand "lower_bound")
                          (("" (inst -2 "inf(p!1)(x!2)(x!1)")
                            (("" (split -2)
                              (("1" (propax) nil nil)
                               ("2" (assert) nil nil)
                               ("3"
                                (skosimp)
                                (("3"
                                  (typepred "z!1")
                                  (("3"
                                    (skosimp)
                                    (("3"
                                      (typepred "x!3")
                                      (("3"
                                        (hide -3 2)
                                        (("3"
                                          (expand "inf")
                                          (("3"
                                            (typepred
                                             "inf(image[nat, real](LAMBDA m: p!1(m)(x!1), {m | m >= x!2}))")
                                            (("3"
                                              (name-replace
                                               "LHS"
                                               "inf(image[nat, real](LAMBDA m: p!1(m)(x!1), {m | m >= x!2}))")
                                              (("3"
                                                (expand "image")
                                                (("3"
                                                  (expand
                                                   "greatest_lower_bound")
                                                  (("3"
                                                    (flatten)
                                                    (("3"
                                                      (expand
                                                       "lower_bound")
                                                      (("3"
                                                        (inst - "z!1")
                                                        (("3"
                                                          (inst
                                                           +
                                                           "x!3")
                                                          (("3"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pointwise_increasing? const-decl "bool" pointwise_convergence nil)
    (increasing? const-decl "bool" real_fun_preds reals)
    (inf const-decl "real" pointwise_convergence nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (lower_bound const-decl "bool" bound_defs reals)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (x!3 skolem-const-decl "({m | m >= y!1})" pointwise_convergence
     nil)
    (z!1 skolem-const-decl
     "({y: real | EXISTS (x: ({m | m >= y!1})): y = p!1(x)(x!1)})"
     pointwise_convergence nil)
    (x!1 skolem-const-decl "T" pointwise_convergence nil)
    (p!1 skolem-const-decl "pointwise_bounded_below"
     pointwise_convergence nil)
    (y!1 skolem-const-decl "nat" pointwise_convergence nil)
    (x!2 skolem-const-decl "nat" pointwise_convergence nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (pred type-eq-decl nil defined_types nil)
    (greatest_lower_bound const-decl "bool" bound_defs reals)
    (<= const-decl "bool" reals nil)
    (inf_set type-eq-decl nil bounded_reals reals)
    (set type-eq-decl nil sets nil)
    (nonempty? const-decl "bool" sets nil)
    (setof type-eq-decl nil defined_types nil)
    (below_bounded const-decl "bool" bounded_reals reals)
    (inf const-decl "{x | greatest_lower_bound(<=)(x, Sl)}"
         bounded_reals reals)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (image const-decl "set[R]" function_image nil)
    (T formal-type-decl nil pointwise_convergence nil)
    (sequence type-eq-decl nil sequences nil)
    (pointwise_bounded_below? const-decl "bool" pointwise_convergence
     nil)
    (pointwise_bounded_below nonempty-type-eq-decl nil
     pointwise_convergence nil))
   shostak))
 (inf_le 0
  (inf_le-1 nil 3392296131
   ("" (skosimp)
    (("" (expand "inf")
      ((""
        (typepred
         "inf(image[nat, real](LAMBDA m: p!1(m)(x!1), {m | m >= n!1}))")
        ((""
          (name-replace "INF"
           "inf(image[nat, real](LAMBDA m: p!1(m)(x!1), {m | m >= n!1}))")
          (("" (expand "image")
            (("" (expand "greatest_lower_bound")
              (("" (flatten)
                (("" (expand "lower_bound")
                  (("" (inst - "p!1(n!1)(x!1)")
                    (("" (inst + "n!1") nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((inf const-decl "real" pointwise_convergence nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (lower_bound const-decl "bool" bound_defs reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (x!1 skolem-const-decl "T" pointwise_convergence nil)
    (p!1 skolem-const-decl "pointwise_bounded_below"
     pointwise_convergence nil)
    (n!1 skolem-const-decl "nat" pointwise_convergence nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (pred type-eq-decl nil defined_types nil)
    (greatest_lower_bound const-decl "bool" bound_defs reals)
    (<= const-decl "bool" reals nil)
    (inf_set type-eq-decl nil bounded_reals reals)
    (set type-eq-decl nil sets nil)
    (nonempty? const-decl "bool" sets nil)
    (setof type-eq-decl nil defined_types nil)
    (below_bounded const-decl "bool" bounded_reals reals)
    (inf const-decl "{x | greatest_lower_bound(<=)(x, Sl)}"
         bounded_reals reals)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (image const-decl "set[R]" function_image nil)
    (T formal-type-decl nil pointwise_convergence nil)
    (sequence type-eq-decl nil sequences nil)
    (pointwise_bounded_below? const-decl "bool" pointwise_convergence
     nil)
    (pointwise_bounded_below nonempty-type-eq-decl nil
     pointwise_convergence nil))
   shostak))
 (inf_pointwise_le 0
  (inf_pointwise_le-1 nil 3392296352
   ("" (skosimp*)
    (("" (expand "pointwise_convergence?")
      (("" (inst - "x!1")
        (("" (lemma "inf_pointwise_increasing" ("p" "p!1"))
          (("" (expand "pointwise_increasing?")
            (("" (inst - "x!1")
              (("" (rewrite "metric_convergence_def" *)
                (("" (case "inf(p!1)(n!1)(x!1)>f!1(x!1)")
                  (("1" (hide 1)
                    (("1" (expand "metric_converges_to")
                      (("1" (expand "ball")
                        (("1" (expand "member")
                          (("1" (inst - "inf(p!1)(n!1)(x!1)-f!1(x!1)")
                            (("1" (skosimp)
                              (("1"
                                (inst - "max(n!1,n!2)")
                                (("1"
                                  (assert)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "increasing?")
                                      (("1"
                                        (inst - "n!1" "max(n!1,n!2)")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (name-replace
                                             "INF1"
                                             "inf(p!1)(n!1)(x!1)")
                                            (("1"
                                              (lemma
                                               "inf_le"
                                               ("p"
                                                "p!1"
                                                "n"
                                                "max(n!1, n!2)"
                                                "x"
                                                "x!1"))
                                              (("1"
                                                (name-replace
                                                 "INF2"
                                                 "inf(p!1)(max(n!1, n!2))(x!1)")
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pointwise_convergence? const-decl "bool" pointwise_convergence
     nil)
    (pointwise_bounded_below nonempty-type-eq-decl nil
     pointwise_convergence nil)
    (pointwise_bounded_below? const-decl "bool" pointwise_convergence
     nil)
    (sequence type-eq-decl nil sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (inf_pointwise_increasing formula-decl nil pointwise_convergence
     nil)
    (> const-decl "bool" reals nil)
    (inf const-decl "real" pointwise_convergence nil)
    (metric_converges_to const-decl "bool" metric_space_def
     metric_space)
    (member const-decl "bool" sets nil)
    (increasing? const-decl "bool" real_fun_preds reals)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (inf_le formula-decl nil pointwise_convergence nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (f!1 skolem-const-decl "[T -> real]" pointwise_convergence nil)
    (x!1 skolem-const-decl "T" pointwise_convergence nil)
    (n!1 skolem-const-decl "nat" pointwise_convergence nil)
    (p!1 skolem-const-decl "pointwise_bounded_below"
     pointwise_convergence nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (ball const-decl "set[T]" metric_space_def metric_space)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (metric_convergence_def formula-decl nil metric_space metric_space)
    (pointwise_increasing? const-decl "bool" pointwise_convergence nil)
    (T formal-type-decl nil pointwise_convergence nil))
   shostak))
 (limsup_pointwise_convergence 0
  (limsup_pointwise_convergence-1 nil 3392258310
   ("" (skosimp)
    (("" (expand "pointwise_convergence?")
      (("" (skosimp)
        (("" (lemma "inf_pointwise_increasing" ("p" "b!1"))
          (("" (expand "pointwise_increasing?")
            (("" (inst - "x!1")
              (("" (rewrite "metric_convergence_def" *)
                (("" (expand "metric_converges_to")
                  (("" (skosimp)
                    (("" (expand "ball")
                      (("" (expand "member")
                        (("" (expand "limsup")
                          ((""
                            (typepred "sup(image[nat, real]
                       (LAMBDA m: inf(b!1)(m)(x!1), fullset[nat]))")
                            (("1"
                              (name-replace "LIMSUP"
                               "sup(image[nat, real]
                       (LAMBDA m: inf(b!1)(m)(x!1), fullset[nat]))")
                              (("1"
                                (expand "least_upper_bound")
                                (("1"
                                  (flatten)
                                  (("1"
                                    (expand "upper_bound")
                                    (("1"
                                      (case
                                       "EXISTS (n_1: nat):
        FORALL (i:nat): i >= n_1 IMPLIES LIMSUP - inf(b!1)(i)(x!1) < r!1")
                                      (("1"
                                        (skosimp)
                                        (("1"
                                          (inst + "n!1")
                                          (("1"
                                            (skosimp)
                                            (("1"
                                              (inst - "i!1")
                                              (("1"
                                                (inst
                                                 -
                                                 "inf(b!1)(i!1)(x!1)")
                                                (("1"
                                                  (expand "abs")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand "fullset")
                                                  (("2"
                                                    (expand "image")
                                                    (("2"
                                                      (inst + "i!1")
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (inst -2 "LIMSUP-r!1")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (skosimp)
                                              (("2"
                                                (typepred "z!1")
                                                (("2"
                                                  (expand "fullset")
                                                  (("2"
                                                    (expand "image")
                                                    (("2"
                                                      (skolem
                                                       -
                                                       ("n!1"))
                                                      (("2"
                                                        (case
                                                         "inf(b!1)(n!1)(x!1)>LIMSUP - r!1")
                                                        (("1"
                                                          (hide 2)
                                                          (("1"
                                                            (inst
                                                             +
                                                             "n!1")
                                                            (("1"
                                                              (skosimp)
                                                              (("1"
                                                                (expand
                                                                 "increasing?")
                                                                (("1"
                                                                  (inst
                                                                   -5
                                                                   "n!1"
                                                                   "i!1")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but 1)
                              (("2"
                                (split)
                                (("1"
                                  (expand "fullset")
                                  (("1"
                                    (expand "image")
                                    (("1"
                                      (expand "nonempty?")
                                      (("1"
                                        (expand "empty?")
                                        (("1"
                                          (expand "member")
                                          (("1"
                                            (inst - "inf(b!1)(0)(x!1)")
                                            (("1"
                                              (inst + "0")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (typepred "b!1")
                                  (("2"
                                    (lemma
                                     "pointwise_bounded_is_bounded_above"
                                     ("x" "b!1"))
                                    (("2"
                                      (hide -2)
                                      (("2"
                                        (expand
                                         "pointwise_bounded_above?")
                                        (("2"
                                          (expand "pointwise?")
                                          (("2"
                                            (inst - "x!1")
                                            (("2"
                                              (expand "bounded_above?")
                                              (("2"
                                                (expand
                                                 "above_bounded")
                                                (("2"
                                                  (expand "fullset")
                                                  (("2"
                                                    (expand "image")
                                                    (("2"
                                                      (expand
                                                       "upper_bound")
                                                      (("2"
                                                        (skosimp)
                                                        (("2"
                                                          (inst
                                                           +
                                                           "a!1")
                                                          (("2"
                                                            (skosimp)
                                                            (("2"
                                                              (typepred
                                                               "z!1")
                                                              (("2"
                                                                (skosimp)
                                                                (("2"
                                                                  (inst
                                                                   -
                                                                   "x!2")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (expand
                                                                       "inf")
                                                                      (("2"
                                                                        (typepred
                                                                         "inf(image[nat, real](LAMBDA (m:nat): b!1(m)(x!1), {m:nat | m >= x!2}))")
                                                                        (("2"
                                                                          (replace
                                                                           -2
                                                                           *
                                                                           rl)
                                                                          (("2"
                                                                            (expand
                                                                             "greatest_lower_bound")
                                                                            (("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (expand
                                                                                 "lower_bound")
                                                                                (("2"
                                                                                  (hide
                                                                                   -2
                                                                                   -3)
                                                                                  (("2"
                                                                                    (inst
                                                                                     -
                                                                                     "b!1(x!2)(x!1)")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (expand
                                                                                       "image")
                                                                                      (("2"
                                                                                        (inst
                                                                                         +
                                                                                         "x!2")
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pointwise_convergence? const-decl "bool" pointwise_convergence
     nil)
    (pointwise_bounded nonempty-type-eq-decl nil pointwise_convergence
     nil)
    (pointwise_bounded? const-decl "bool" pointwise_convergence nil)
    (pointwise_bounded_below nonempty-type-eq-decl nil
     pointwise_convergence nil)
    (pointwise_bounded_below? const-decl "bool" pointwise_convergence
     nil)
    (sequence type-eq-decl nil sequences nil)
    (T formal-type-decl nil pointwise_convergence nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (inf_pointwise_increasing formula-decl nil pointwise_convergence
     nil)
    (metric_converges_to const-decl "bool" metric_space_def
     metric_space)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (ball const-decl "set[T]" metric_space_def metric_space)
    (pointwise? const-decl "bool" pointwise_convergence nil)
    (bounded_above? const-decl "bool" real_fun_preds reals)
    (x!2 skolem-const-decl "nat" pointwise_convergence nil)
    (lower_bound const-decl "bool" bound_defs reals)
    (inf const-decl "{x | greatest_lower_bound(<=)(x, Sl)}"
         bounded_reals reals)
    (below_bounded const-decl "bool" bounded_reals reals)
    (inf_set type-eq-decl nil bounded_reals reals)
    (greatest_lower_bound const-decl "bool" bound_defs reals)
    (pointwise_bounded_above? const-decl "bool" pointwise_convergence
     nil)
    (pointwise_bounded_is_bounded_above judgement-tcc nil
     pointwise_convergence nil)
    (empty? const-decl "bool" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (TRUE const-decl "bool" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (i!1 skolem-const-decl "nat" pointwise_convergence nil)
    (x!1 skolem-const-decl "T" pointwise_convergence nil)
    (b!1 skolem-const-decl "pointwise_bounded" pointwise_convergence
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (increasing? const-decl "bool" real_fun_preds reals)
    (upper_bound const-decl "bool" bound_defs reals)
    (fullset const-decl "set" sets nil)
    (image const-decl "set[R]" function_image nil)
    (sup const-decl "{x | least_upper_bound(<=)(x, Su)}" bounded_reals
         reals)
    (above_bounded const-decl "bool" bounded_reals reals)
    (setof type-eq-decl nil defined_types nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (sup_set type-eq-decl nil bounded_reals reals)
    (<= const-decl "bool" reals nil)
    (least_upper_bound const-decl "bool" bound_defs reals)
    (pred type-eq-decl nil defined_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (member const-decl "bool" sets nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (limsup const-decl "real" pointwise_convergence nil)
    (inf const-decl "real" pointwise_convergence nil)
    (metric_convergence_def formula-decl nil metric_space metric_space)
    (pointwise_increasing? const-decl "bool" pointwise_convergence
     nil))
   shostak))
 (inf_pointwise_convergence_upto 0
  (inf_pointwise_convergence_upto-3 "" 3789903482
   ("" (skosimp)
    ((""
      (lemma "pointwise_convergent_is_pointwise_bounded" ("x" "p!1"))
      (("1" (expand "pointwise_converges_upto?")
        (("1" (lemma "inf_pointwise_increasing" ("p" "p!1"))
          (("1" (lemma "limsup_pointwise_convergence" ("b" "p!1"))
            (("1"
              (lemma "extensionality" ("f" "f!1" "g" "limsup(p!1)"))
              (("1" (split -1)
                (("1" (assert) nil nil)
                 ("2" (hide 2)
                  (("2" (skosimp)
                    (("2"
                      (lemma "inf_pointwise_le" ("p" "p!1" "f" "f!1"))
                      (("2" (assert)
                        (("2" (expand "limsup")
                          (("2"
                            (typepred
                             "sup(image[nat, real](LAMBDA m: inf(p!1)(m)(x!1), fullset[nat]))")
                            (("2" (expand "pointwise_convergence?")
                              (("2"
                                (inst -3 "x!1")
                                (("2"
                                  (inst -6 "x!1")
                                  (("2"
                                    (name-replace
                                     "LIMSUP"
                                     "sup(image[nat, real](LAMBDA m: inf(p!1)(m)(x!1), fullset[nat]))")
                                    (("2"
                                      (expand "least_upper_bound")
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (expand "fullset")
                                          (("2"
                                            (expand "image")
                                            (("2"
                                              (expand "upper_bound")
                                              (("2"
                                                (lemma
                                                 "trich_lt"
                                                 ("x"
                                                  "f!1(x!1)"
                                                  "y"
                                                  "LIMSUP"))
                                                (("2"
                                                  (split -1)
                                                  (("1"
                                                    (inst
                                                     -3
                                                     "f!1(x!1)")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (hide 2)
                                                        (("1"
                                                          (skosimp)
                                                          (("1"
                                                            (typepred
                                                             "z!1")
                                                            (("1"
                                                              (skosimp)
                                                              (("1"
                                                                (inst
                                                                 -4
                                                                 "x!2"
                                                                 "x!1")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (propax)
                                                    nil
                                                    nil)
                                                   ("3"
                                                    (hide 1)
                                                    (("3"
                                                      (rewrite
                                                       "metric_convergence_def"
                                                       *)
                                                      (("3"
                                                        (rewrite
                                                         "metric_convergence_def"
                                                         *)
                                                        (("3"
                                                          (expand
                                                           "metric_converges_to"
                                                           -8)
                                                          (("3"
                                                            (inst
                                                             -8
                                                             "(f!1(x!1)-LIMSUP)/2")
                                                            (("1"
                                                              (skosimp)
                                                              (("1"
                                                                (expand
                                                                 "ball")
                                                                (("1"
                                                                  (expand
                                                                   "member")
                                                                  (("1"
                                                                    (case
                                                                     "forall (i:nat): i >= n!1=> p!1(i)(x!1)>LIMSUP+(f!1(x!1) - LIMSUP) / 2")
                                                                    (("1"
                                                                      (hide
                                                                       -9)
                                                                      (("1"
                                                                        (expand
                                                                         "pointwise_increasing?")
                                                                        (("1"
                                                                          (inst
                                                                           -7
                                                                           "x!1")
                                                                          (("1"
                                                                            (expand
                                                                             "increasing?")
                                                                            (("1"
                                                                              (inst
                                                                               -7
                                                                               "n!1"
                                                                               "_")
                                                                              (("1"
                                                                                (name
                                                                                 "INF"
                                                                                 "inf(p!1)(n!1)(x!1)")
                                                                                (("1"
                                                                                  (replace
                                                                                   -1)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "inf"
                                                                                     -1)
                                                                                    (("1"
                                                                                      (typepred
                                                                                       "inf(image[nat, real](LAMBDA m: p!1(m)(x!1), {m | m >= n!1}))")
                                                                                      (("1"
                                                                                        (replace
                                                                                         -2)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "greatest_lower_bound")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "image"
                                                                                             -1)
                                                                                            (("1"
                                                                                              (flatten)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "lower_bound")
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -2
                                                                                                   "LIMSUP + (f!1(x!1) - LIMSUP) / 2")
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -6
                                                                                                     "INF")
                                                                                                    (("1"
                                                                                                      (split
                                                                                                       -2)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil)
                                                                                                       ("3"
                                                                                                        (skosimp)
                                                                                                        (("3"
                                                                                                          (typepred
                                                                                                           "z!1")
                                                                                                          (("3"
                                                                                                            (skosimp)
                                                                                                            (("3"
                                                                                                              (typepred
                                                                                                               "x!2")
                                                                                                              (("3"
                                                                                                                (inst
                                                                                                                 -5
                                                                                                                 "x!2")
                                                                                                                (("3"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (expand
                                                                                                       "INF")
                                                                                                      (("2"
                                                                                                        (inst
                                                                                                         +
                                                                                                         "n!1")
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (skosimp)
                                                                      (("2"
                                                                        (inst
                                                                         -9
                                                                         "i!1")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (hide-all-but
                                                                             (-9
                                                                              1))
                                                                            (("2"
                                                                              (ground)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (propax) nil nil))
            nil))
          nil))
        nil)
       ("2" (expand "pointwise_convergent?")
        (("2" (inst + "f!1") nil nil)) nil))
      nil))
    nil)
   ((pointwise_bounded_below nonempty-type-eq-decl nil
     pointwise_convergence nil)
    (pointwise_bounded_below? const-decl "bool" pointwise_convergence
     nil)
    (pointwise_convergent nonempty-type-eq-decl nil
     pointwise_convergence nil)
    (pointwise_convergent? const-decl "bool" pointwise_convergence nil)
    (sequence type-eq-decl nil sequences nil)
    (T formal-type-decl nil pointwise_convergence nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (pointwise_convergent_is_pointwise_bounded judgement-tcc nil
     pointwise_convergence nil)
    (inf_pointwise_increasing formula-decl nil pointwise_convergence
     nil)
    (extensionality formula-decl nil functions nil)
    (limsup const-decl "real" pointwise_convergence nil)
    (inf_pointwise_le formula-decl nil pointwise_convergence nil)
    (pointwise_convergence? const-decl "bool" pointwise_convergence
     nil)
    (upper_bound const-decl "bool" bound_defs reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (TRUE const-decl "bool" booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (metric_convergence_def formula-decl nil metric_space metric_space)
    (metric_converges_to const-decl "bool" metric_space_def
     metric_space)
    (member const-decl "bool" sets nil)
    (greatest_lower_bound const-decl "bool" bound_defs reals)
    (inf_set type-eq-decl nil bounded_reals reals)
    (below_bounded const-decl "bool" bounded_reals reals)
    (inf const-decl "{x | greatest_lower_bound(<=)(x, Sl)}"
         bounded_reals reals)
    (INF skolem-const-decl "real" pointwise_convergence nil)
    (lower_bound const-decl "bool" bound_defs reals)
    (increasing? const-decl "bool" real_fun_preds reals)
    (pointwise_increasing? const-decl "bool" pointwise_convergence nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (ball const-decl "set[T]" metric_space_def metric_space)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (LIMSUP skolem-const-decl "{x |
   least_upper_bound(<=)
                    (x,
                     image[nat, real]
                         (LAMBDA m: inf(p!1)(m)(x!1), fullset[nat]))}"
     pointwise_convergence nil)
    (p!1 skolem-const-decl "pointwise_bounded_below"
     pointwise_convergence nil)
    (x!1 skolem-const-decl "T" pointwise_convergence nil)
    (f!1 skolem-const-decl "[T -> real]" pointwise_convergence nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (trich_lt formula-decl nil real_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (least_upper_bound const-decl "bool" bound_defs reals)
    (<= const-decl "bool" reals nil)
    (sup_set type-eq-decl nil bounded_reals reals)
    (set type-eq-decl nil sets nil)
    (nonempty? const-decl "bool" sets nil)
    (setof type-eq-decl nil defined_types nil)
    (above_bounded const-decl "bool" bounded_reals reals)
    (sup const-decl "{x | least_upper_bound(<=)(x, Su)}" bounded_reals
         reals)
    (image const-decl "set[R]" function_image nil)
    (inf const-decl "real" pointwise_convergence nil)
    (fullset const-decl "set" sets nil)
    (pointwise_bounded nonempty-type-eq-decl nil pointwise_convergence
     nil)
    (pointwise_bounded? const-decl "bool" pointwise_convergence nil)
    (limsup_pointwise_convergence formula-decl nil
     pointwise_convergence nil)
    (pointwise_converges_upto? const-decl "bool" pointwise_convergence
     nil))
   shostak)
  (inf_pointwise_convergence_upto-2 "" 3758920375
   ("" (skosimp)
    ((""
      (lemma "pointwise_convergent_is_pointwise_bounded" ("x" "p!1"))
      (("1" (expand "pointwise_converges_upto?")
        (("1" (lemma "inf_pointwise_increasing" ("p" "p!1"))
          (("1" (lemma "limsup_pointwise_convergence" ("b" "p!1"))
            (("1"
              (lemma "extensionality" ("f" "f!1" "g" "limsup(p!1)"))
              (("1" (split -1)
                (("1" (assert) nil nil)
                 ("2" (hide 2)
                  (("2" (skosimp)
                    (("2"
                      (lemma "inf_pointwise_le" ("p" "p!1" "f" "f!1"))
                      (("2" (assert)
                        (("2" (expand "limsup")
                          (("2"
                            (typepred
                             "sup(image[nat, real](LAMBDA m: inf(p!1)(m)(x!1), fullset[nat]))")
                            (("2" (expand "pointwise_convergence?")
                              (("2"
                                (inst -3 "x!1")
                                (("2"
                                  (inst -6 "x!1")
                                  (("2"
                                    (name-replace
                                     "LIMSUP"
                                     "sup(image[nat, real](LAMBDA m: inf(p!1)(m)(x!1), fullset[nat]))")
                                    (("2"
                                      (expand "least_upper_bound")
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (expand "fullset")
                                          (("2"
                                            (expand "image")
                                            (("2"
                                              (expand "upper_bound")
                                              (("2"
                                                (lemma
                                                 "trich_lt"
                                                 ("x"
                                                  "f!1(x!1)"
                                                  "y"
                                                  "LIMSUP"))
                                                (("2"
                                                  (split -1)
                                                  (("1"
                                                    (inst
                                                     -3
                                                     "f!1(x!1)")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (hide 2)
                                                        (("1"
                                                          (skosimp)
                                                          (("1"
                                                            (typepred
                                                             "z!1")
                                                            (("1"
                                                              (skosimp)
                                                              (("1"
                                                                (inst
                                                                 -4
                                                                 "x!2"
                                                                 "x!1")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (propax)
                                                    nil
                                                    nil)
                                                   ("3"
                                                    (hide 1)
                                                    (("3"
                                                      (rewrite
                                                       "metric_convergence_def"
                                                       *)
                                                      (("3"
                                                        (rewrite
                                                         "metric_convergence_def"
                                                         *)
                                                        (("1"
                                                          (expand
                                                           "metric_converges_to"
                                                           -8)
                                                          (("1"
                                                            (inst
                                                             -8
                                                             "(f!1(x!1)-LIMSUP)/2")
                                                            (("1"
                                                              (skosimp)
                                                              (("1"
                                                                (expand
                                                                 "ball")
                                                                (("1"
                                                                  (expand
                                                                   "member")
                                                                  (("1"
                                                                    (case
                                                                     "forall (i:nat): i >= n!1=> p!1(i)(x!1)>LIMSUP+(f!1(x!1) - LIMSUP) / 2")
                                                                    (("1"
                                                                      (hide
                                                                       -9)
                                                                      (("1"
                                                                        (expand
                                                                         "pointwise_increasing?")
                                                                        (("1"
                                                                          (inst
                                                                           -7
                                                                           "x!1")
                                                                          (("1"
                                                                            (expand
                                                                             "increasing?")
                                                                            (("1"
                                                                              (inst
                                                                               -7
                                                                               "n!1"
                                                                               "_")
                                                                              (("1"
                                                                                (name
                                                                                 "INF"
                                                                                 "inf(p!1)(n!1)(x!1)")
                                                                                (("1"
                                                                                  (replace
                                                                                   -1)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "inf"
                                                                                     -1)
                                                                                    (("1"
                                                                                      (typepred
                                                                                       "inf(image[nat, real](LAMBDA m: p!1(m)(x!1), {m | m >= n!1}))")
                                                                                      (("1"
                                                                                        (replace
                                                                                         -2)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "greatest_lower_bound")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "image"
                                                                                             -1)
                                                                                            (("1"
                                                                                              (flatten)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "lower_bound")
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -2
                                                                                                   "LIMSUP + (f!1(x!1) - LIMSUP) / 2")
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -6
                                                                                                     "INF")
                                                                                                    (("1"
                                                                                                      (split
                                                                                                       -2)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil)
                                                                                                       ("3"
                                                                                                        (skosimp)
                                                                                                        (("3"
                                                                                                          (typepred
                                                                                                           "z!1")
                                                                                                          (("3"
                                                                                                            (skosimp)
                                                                                                            (("3"
                                                                                                              (typepred
                                                                                                               "x!2")
                                                                                                              (("3"
                                                                                                                (inst
                                                                                                                 -5
                                                                                                                 "x!2")
                                                                                                                (("3"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (expand
                                                                                                       "INF")
                                                                                                      (("2"
                                                                                                        (inst
                                                                                                         +
                                                                                                         "n!1")
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (skosimp)
                                                                      (("2"
                                                                        (inst
                                                                         -9
                                                                         "i!1")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (hide-all-but
                                                                             (-9
                                                                              1))
                                                                            (("2"
                                                                              (ground)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           1)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (propax) nil nil))
            nil))
          nil))
        nil)
       ("2" (expand "pointwise_convergent?")
        (("2" (inst + "f!1") nil nil)) nil))
      nil))
    nil)
   ((sequence type-eq-decl nil sequences nil)
    (extensionality formula-decl nil functions nil)
    (upper_bound const-decl "bool" bound_defs reals)
    (metric_convergence_def formula-decl nil metric_space metric_space)
    (metric_converges_to const-decl "bool" metric_space_def
     metric_space)
    (member const-decl "bool" sets nil)
    (greatest_lower_bound const-decl "bool" bound_defs reals)
    (inf_set type-eq-decl nil bounded_reals reals)
    (below_bounded const-decl "bool" bounded_reals reals)
    (inf const-decl "{x | greatest_lower_bound(<=)(x, Sl)}"
         bounded_reals reals)
    (lower_bound const-decl "bool" bound_defs reals)
    (increasing? const-decl "bool" real_fun_preds reals)
    (ball const-decl "set[T]" metric_space_def metric_space)
    (least_upper_bound const-decl "bool" bound_defs reals)
    (sup_set type-eq-decl nil bounded_reals reals)
    (set type-eq-decl nil sets nil)
    (nonempty? const-decl "bool" sets nil)
    (above_bounded const-decl "bool" bounded_reals reals)
    (sup const-decl "{x | least_upper_bound(<=)(x, Su)}" bounded_reals
         reals)
    (fullset const-decl "set" sets nil))
   shostak)
  (inf_pointwise_convergence_upto-1 nil 3392259265
   ("" (skosimp)
    ((""
      (lemma "pointwise_convergent_is_pointwise_bounded" ("x" "p!1"))
      (("1" (expand "pointwise_converges_upto?")
        (("1" (lemma "inf_pointwise_increasing" ("p" "p!1"))
          (("1" (lemma "limsup_pointwise_convergence" ("b" "p!1"))
            (("1"
              (lemma "extensionality" ("f" "f!1" "g" "limsup(p!1)"))
              (("1" (split -1)
                (("1" (assert) nil nil)
                 ("2" (hide 2)
                  (("2" (skosimp)
                    (("2"
                      (lemma "inf_pointwise_le" ("p" "p!1" "f" "f!1"))
                      (("2" (assert)
                        (("2" (expand "limsup")
                          (("2"
                            (typepred
                             "sup(image[nat, real](LAMBDA m: inf(p!1)(m)(x!1), fullset[nat]))")
                            (("2" (expand "pointwise_convergence?")
                              (("2"
                                (inst -3 "x!1")
                                (("2"
                                  (inst -6 "x!1")
                                  (("2"
                                    (name-replace
                                     "LIMSUP"
                                     "sup(image[nat, real](LAMBDA m: inf(p!1)(m)(x!1), fullset[nat]))")
                                    (("2"
                                      (expand "least_upper_bound")
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (expand "fullset")
                                          (("2"
                                            (expand "image")
                                            (("2"
                                              (expand "upper_bound")
                                              (("2"
                                                (lemma
                                                 "trich_lt"
                                                 ("x"
                                                  "f!1(x!1)"
                                                  "y"
                                                  "LIMSUP"))
                                                (("2"
                                                  (split -1)
                                                  (("1"
                                                    (inst
                                                     -3
                                                     "f!1(x!1)")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (hide 2)
                                                        (("1"
                                                          (skosimp)
                                                          (("1"
                                                            (typepred
                                                             "z!1")
                                                            (("1"
                                                              (skosimp)
                                                              (("1"
                                                                (inst
                                                                 -4
                                                                 "x!2"
                                                                 "x!1")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (propax)
                                                    nil
                                                    nil)
                                                   ("3"
                                                    (hide 1)
                                                    (("3"
                                                      (rewrite
                                                       "metric_convergence_def"
                                                       *)
                                                      (("3"
                                                        (rewrite
                                                         "metric_convergence_def"
                                                         *)
                                                        (("3"
                                                          (expand
                                                           "metric_converges_to"
                                                           -8)
                                                          (("3"
                                                            (inst
                                                             -8
                                                             "(f!1(x!1)-LIMSUP)/2")
                                                            (("1"
                                                              (skosimp)
                                                              (("1"
                                                                (expand
                                                                 "ball")
                                                                (("1"
                                                                  (expand
                                                                   "member")
                                                                  (("1"
                                                                    (case
                                                                     "forall (i:nat): i >= n!1=> p!1(i)(x!1)>LIMSUP+(f!1(x!1) - LIMSUP) / 2")
                                                                    (("1"
                                                                      (hide
                                                                       -9)
                                                                      (("1"
                                                                        (expand
                                                                         "pointwise_increasing?")
                                                                        (("1"
                                                                          (inst
                                                                           -7
                                                                           "x!1")
                                                                          (("1"
                                                                            (expand
                                                                             "increasing?")
                                                                            (("1"
                                                                              (inst
                                                                               -7
                                                                               "n!1"
                                                                               "_")
                                                                              (("1"
                                                                                (name
                                                                                 "INF"
                                                                                 "inf(p!1)(n!1)(x!1)")
                                                                                (("1"
                                                                                  (replace
                                                                                   -1)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "inf"
                                                                                     -1)
                                                                                    (("1"
                                                                                      (typepred
                                                                                       "inf(image[nat, real](LAMBDA m: p!1(m)(x!1), {m | m >= n!1}))")
                                                                                      (("1"
                                                                                        (replace
                                                                                         -2)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "greatest_lower_bound")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "image"
                                                                                             -1)
                                                                                            (("1"
                                                                                              (flatten)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "lower_bound")
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -2
                                                                                                   "LIMSUP + (f!1(x!1) - LIMSUP) / 2")
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -6
                                                                                                     "INF")
                                                                                                    (("1"
                                                                                                      (split
                                                                                                       -2)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil)
                                                                                                       ("3"
                                                                                                        (skosimp)
                                                                                                        (("3"
                                                                                                          (typepred
                                                                                                           "z!1")
                                                                                                          (("3"
                                                                                                            (skosimp)
                                                                                                            (("3"
                                                                                                              (typepred
                                                                                                               "x!2")
                                                                                                              (("3"
                                                                                                                (inst
                                                                                                                 -5
                                                                                                                 "x!2")
                                                                                                                (("3"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (expand
                                                                                                       "INF")
                                                                                                      (("2"
                                                                                                        (inst
                                                                                                         +
                                                                                                         "n!1")
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (skosimp)
                                                                      (("2"
                                                                        (inst
                                                                         -9
                                                                         "i!1")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (hide-all-but
                                                                             (-9
                                                                              1))
                                                                            (("2"
                                                                              (ground)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (propax) nil nil))
            nil))
          nil))
        nil)
       ("2" (expand "pointwise_convergent?")
        (("2" (inst + "f!1") nil nil)) nil))
      nil))
    nil)
   ((fullset const-decl "set" sets nil)
    (sup const-decl "{x | least_upper_bound(<=)(x, Su)}" bounded_reals
         reals)
    (above_bounded const-decl "bool" bounded_reals reals)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (sup_set type-eq-decl nil bounded_reals reals)
    (least_upper_bound const-decl "bool" bound_defs reals)
    (metric? const-decl "bool" metric_def metric_space)
    (ball const-decl "set[T]" metric_space_def metric_space)
    (increasing? const-decl "bool" real_fun_preds reals)
    (lower_bound const-decl "bool" bound_defs reals)
    (inf const-decl "{x | greatest_lower_bound(<=)(x, Sl)}"
         bounded_reals reals)
    (below_bounded const-decl "bool" bounded_reals reals)
    (inf_set type-eq-decl nil bounded_reals reals)
    (greatest_lower_bound const-decl "bool" bound_defs reals)
    (member const-decl "bool" sets nil)
    (metric_converges_to const-decl "bool" metric_space_def
     metric_space)
    (metric_zero? const-decl "bool" metric_def metric_space)
    (metric_symmetric? const-decl "bool" metric_def metric_space)
    (metric_triangle? const-decl "bool" metric_def metric_space)
    (metric_convergence_def formula-decl nil metric_space metric_space)
    (upper_bound const-decl "bool" bound_defs reals)
    (extensionality formula-decl nil functions nil)
    (sequence type-eq-decl nil sequences nil))
   shostak))
 (pointwise_convergence_plus_minus_def_TCC1 0
  (pointwise_convergence_plus_minus_def_TCC1-1 nil 3392257085
   ("" (skosimp)
    (("" (expand "pointwise_bounded_below?")
      (("" (expand "pointwise?")
        (("" (skosimp)
          (("" (expand "bounded_below?")
            (("" (inst + "0")
              (("" (skosimp)
                (("" (expand "plus")
                  (("" (expand "plus")
                    (("" (hide -1) (("" (grind) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pointwise_bounded_below? const-decl "bool" pointwise_convergence
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (plus const-decl "sequence[[T -> nnreal]]" pointwise_convergence
     nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (plus const-decl "[T -> nnreal]" real_fun_ops_aux reals)
    (bounded_below? const-decl "bool" real_fun_preds reals)
    (pointwise? const-decl "bool" pointwise_convergence nil))
   nil
   (pointwise_convergence_plus_minus_def subtype
    "pointwise_convergence.plus(pointwise_convergence.u)"
    "pointwise_bounded_below")))
 (pointwise_convergence_plus_minus_def_TCC2 0
  (pointwise_convergence_plus_minus_def_TCC2-1 nil 3392257085
   ("" (skosimp)
    (("" (hide -1 -2)
      (("" (expand "pointwise_bounded_below?")
        (("" (expand "pointwise?")
          (("" (expand "bounded_below?")
            (("" (skosimp)
              (("" (inst + "0")
                (("" (skosimp) (("" (grind) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pointwise? const-decl "bool" pointwise_convergence nil)
    (minus const-decl "[T -> nnreal]" real_fun_ops_aux reals)
    (T formal-type-decl nil pointwise_convergence nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (minus const-decl "sequence[[T -> nnreal]]" pointwise_convergence
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (bounded_below? const-decl "bool" real_fun_preds reals)
    (pointwise_bounded_below? const-decl "bool" pointwise_convergence
     nil))
   nil
   (pointwise_convergence_plus_minus_def subtype
    "pointwise_convergence.minus(pointwise_convergence.u)"
    "pointwise_bounded_below")))
 (pointwise_convergence_plus_minus_def 0
  (pointwise_convergence_plus_minus_def-2 "" 3789903483
   ("" (skosimp)
    (("" (rewrite "plus_minus_pointwise_convergence")
      (("" (flatten)
        ((""
          (lemma "inf_pointwise_convergence_upto"
           ("p" "plus(u!1)" "f" "plus(f!1)"))
          (("1"
            (lemma "inf_pointwise_convergence_upto"
             ("p" "minus(u!1)" "f" "minus(f!1)"))
            (("1" (assert) nil nil)
             ("2" (hide-all-but 1)
              (("2" (expand "pointwise_bounded_below?")
                (("2" (expand "pointwise?")
                  (("2" (skosimp)
                    (("2" (expand "bounded_below?")
                      (("2" (inst + "0") (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide-all-but 1)
            (("2" (expand "pointwise_bounded_below?")
              (("2" (expand "pointwise?")
                (("2" (skosimp)
                  (("2" (expand "bounded_below?")
                    (("2" (inst + "0") (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((plus_minus_pointwise_convergence formula-decl nil
     pointwise_convergence nil)
    (T formal-type-decl nil pointwise_convergence nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sequence type-eq-decl nil sequences nil)
    (plus const-decl "sequence[[T -> nnreal]]" pointwise_convergence
     nil)
    (pointwise_bounded_below nonempty-type-eq-decl nil
     pointwise_convergence nil)
    (pointwise_bounded_below? const-decl "bool" pointwise_convergence
     nil)
    (plus const-decl "[T -> nnreal]" real_fun_ops_aux reals)
    (nnreal type-eq-decl nil real_types nil)
    (inf_pointwise_convergence_upto formula-decl nil
     pointwise_convergence nil)
    (pointwise? const-decl "bool" pointwise_convergence nil)
    (bounded_below? const-decl "bool" real_fun_preds reals)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (minus const-decl "sequence[[T -> nnreal]]" pointwise_convergence
     nil)
    (minus const-decl "[T -> nnreal]" real_fun_ops_aux reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil))
   shostak)
  (pointwise_convergence_plus_minus_def-1 nil 3392296765
   ("" (skosimp)
    (("" (rewrite "plus_minus_pointwise_convergence")
      (("" (flatten)
        ((""
          (lemma "inf_pointwise_convergence_upto"
           ("p" "plus(u!1)" "f" "plus(f!1)"))
          (("1"
            (lemma "inf_pointwise_convergence_upto"
             ("p" "minus(u!1)" "f" "minus(f!1)"))
            (("1" (assert) nil nil)
             ("2" (hide-all-but 1)
              (("2" (expand "pointwise_bounded_below?")
                (("2" (expand "pointwise?")
                  (("2" (skosimp)
                    (("2" (expand "bounded_below?")
                      (("2" (expand "bounded_below?")
                        (("2" (inst + "0") (("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide-all-but 1)
            (("2" (expand "pointwise_bounded_below?")
              (("2" (expand "pointwise?")
                (("2" (skosimp)
                  (("2" (expand "bounded_below?")
                    (("2" (expand "bounded_below?")
                      (("2" (inst + "0") (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sequence type-eq-decl nil sequences nil)
    (plus const-decl "[T -> nnreal]" real_fun_ops_aux reals)
    (bounded_below? const-decl "bool" real_fun_preds reals)
    (minus const-decl "[T -> nnreal]" real_fun_ops_aux reals))
   shostak)))

