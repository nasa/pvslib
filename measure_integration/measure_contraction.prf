(measure_contraction
 (contraction_TCC1 0
  (contraction_TCC1-1 nil 3431406180
   ("" (skosimp)
    (("" (assert)
      (("" (lemma "measurable_intersection[T,S]")
        (("" (inst - "A!1" "E!1")
          (("" (expand "measurable_set?") (("" (propax) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((measurable_intersection application-judgement "measurable_set"
     measure_contraction nil)
    (set type-eq-decl nil sets nil)
    (measurable_set? const-decl "bool" measure_space_def nil)
    (measurable_set nonempty-type-eq-decl nil measure_space_def nil)
    (measurable_intersection judgement-tcc nil measure_space_def nil)
    (T formal-type-decl nil measure_contraction nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (setof type-eq-decl nil defined_types nil)
    (setofsets type-eq-decl nil sets nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (S formal-const-decl "sigma_algebra" measure_contraction nil))
   nil
   (contraction subtype
    "sets[measure_contraction.T].intersection(measure_contraction.A, measure_contraction.E)"
    "(measure_contraction.S)")))
 (contraction_TCC2 0
  (contraction_TCC2-1 nil 3431406180
   ("" (expand "measurable_set?") (("" (propax) nil nil)) nil)
   ((measurable_set? const-decl "bool" measure_space_def nil)) nil
   (contraction subtype
    "LAMBDA E: measure_contraction.mu(sets[measure_contraction.T].intersection(measure_contraction.A, measure_contraction.E))"
    "measure_type[T, S]")))
 (contraction_TCC3 0
  (contraction_TCC3-1 nil 3431406180
   ("" (skosimp)
    (("" (typepred "mu!1")
      (("" (expand "measure?")
        (("" (flatten)
          (("" (split)
            (("1" (expand "measure_empty?")
              (("1"
                (case-replace
                 "intersection[T](A!1, emptyset[T])=emptyset[T]")
                (("1" (hide-all-but 1)
                  (("1" (apply-extensionality :hide? t)
                    (("1" (grind) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (expand "measure_countably_additive?")
              (("2" (skosimp)
                (("2"
                  (inst -
                   "lambda (n:nat): intersection[T](A!1, X!1(n))")
                  (("1" (expand "o")
                    (("1"
                      (name-replace "LHS"
                       "x_sum(LAMBDA (x: nat): mu!1(intersection[T](A!1, X!1(x))))")
                      (("1"
                        (case-replace
                         "IUnion(LAMBDA (n: nat): intersection[T](A!1, X!1(n)))=intersection[T](A!1, IUnion(X!1))")
                        (("1" (hide -1)
                          (("1" (assert)
                            (("1" (hide 1 -2)
                              (("1"
                                (lemma
                                 "measurable_intersection[T,S]"
                                 ("a" "A!1" "b" "IUnion(X!1)"))
                                (("1"
                                  (expand "measurable_set?")
                                  (("1"
                                    (case-replace
                                     "IUnion(LAMBDA (n: nat): intersection[T](A!1, X!1(n)))=intersection[T](A!1, IUnion(X!1))")
                                    (("1"
                                      (hide-all-but 1)
                                      (("1"
                                        (apply-extensionality :hide? t)
                                        (("1"
                                          (expand "intersection")
                                          (("1"
                                            (expand "IUnion")
                                            (("1"
                                              (expand "member")
                                              (("1"
                                                (case-replace
                                                 "A!1(x!1)")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "measurable_set?")
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide-all-but 1)
                        (("2" (skosimp)
                          (("2"
                            (lemma "measurable_intersection[T,S]"
                             ("a" "A!1" "b" "X!1(x!1)"))
                            (("1" (expand "measurable_set?")
                              (("1" (propax) nil nil)) nil)
                             ("2" (expand "measurable_set?")
                              (("2" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide-all-but 1)
                    (("2" (typepred "X!1")
                      (("2" (expand "disjoint_indexed_measurable?")
                        (("2" (expand "disjoint?")
                          (("2" (expand "disjoint?")
                            (("2" (expand "intersection")
                              (("2"
                                (expand "empty?")
                                (("2"
                                  (expand "member")
                                  (("2"
                                    (skosimp)
                                    (("2"
                                      (skosimp)
                                      (("2"
                                        (inst - "i!1" "j!1")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (inst - "x!1")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (hide-all-but 1)
                    (("3" (skosimp)
                      (("3"
                        (lemma "measurable_intersection[T,S]"
                         ("a" "A!1" "b" "X!1(n!1)"))
                        (("1" (expand "measurable_set?")
                          (("1" (propax) nil nil)) nil)
                         ("2" (expand "measurable_set?")
                          (("2" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((measure_type nonempty-type-eq-decl nil generalized_measure_def
     nil)
    (measure? const-decl "bool" generalized_measure_def nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (S formal-const-decl "sigma_algebra" measure_contraction nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (T formal-type-decl nil measure_contraction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (sigma_algebra_IUnion_rew application-judgement "(S)"
     measure_contraction nil)
    (measure_countably_additive? const-decl "bool"
     generalized_measure_def nil)
    (X!1 skolem-const-decl "disjoint_indexed_measurable[T, S]"
     measure_contraction nil)
    (disjoint_indexed_measurable nonempty-type-eq-decl nil
     generalized_measure_def nil)
    (disjoint_indexed_measurable? const-decl "bool"
     generalized_measure_def nil)
    (A!1 skolem-const-decl "measurable_set[T, S]" measure_contraction
     nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (x_sum const-decl "extended_nnreal" extended_nnreal
     extended_nnreal)
    (measurable_intersection judgement-tcc nil measure_space_def nil)
    (IUnion const-decl "set[T]" indexed_sets nil)
    (O const-decl "T3" function_props nil)
    (disjoint? const-decl "bool" indexed_sets_aux sets_aux)
    (empty? const-decl "bool" sets nil)
    (disjoint? const-decl "bool" sets nil)
    (subset_algebra_intersection application-judgement "(S)"
     measure_contraction nil)
    (measure_empty? const-decl "bool" generalized_measure_def nil)
    (member const-decl "bool" sets nil)
    (subset_algebra_emptyset name-judgement "(S)" measure_contraction
     nil)
    (measurable_emptyset name-judgement "measurable_set"
     measure_contraction nil)
    (finite_emptyset name-judgement "finite_set" countable_setofsets
     sets_aux)
    (finite_emptyset name-judgement "finite_set" countable_props
     sets_aux)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (finite_intersection1 application-judgement "finite_set[T]"
     countable_setofsets sets_aux)
    (measurable_intersection application-judgement "measurable_set"
     measure_contraction nil)
    (set type-eq-decl nil sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (intersection const-decl "set" sets nil)
    (measurable_set? const-decl "bool" measure_space_def nil)
    (measurable_set nonempty-type-eq-decl nil measure_space_def nil)
    (emptyset const-decl "set" sets nil))
   nil
   (contraction subtype
    "LAMBDA E: measure_contraction.mu(sets[measure_contraction.T].intersection(measure_contraction.A, measure_contraction.E))"
    "measure_type[T, S]")))
 (fm_contraction_TCC1 0
  (fm_contraction_TCC1-1 nil 3456294370 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil measure_contraction nil)
    (set type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (setofsets type-eq-decl nil sets nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (S formal-const-decl "sigma_algebra" measure_contraction nil)
    (measurable_set? const-decl "bool" measure_space_def nil)
    (measurable_set nonempty-type-eq-decl nil measure_space_def nil))
   nil
   (fm_contraction subtype "measure_contraction.E"
    "(measure_contraction.S)")))
 (fm_contraction_TCC2 0
  (fm_contraction_TCC2-1 nil 3456294370
   ("" (skosimp)
    (("" (lemma "contraction_TCC3" ("mu" "mu!1" "A" "A!1"))
      (("" (typepred "A!1")
        (("" (typepred "mu!1")
          (("" (lemma "measure_monotone" ("f" "mu!1" "b" "A!1"))
            (("" (replace -2)
              (("" (expand "x_le")
                (("" (expand "finite_measure?")
                  (("" (expand "measure?" -5)
                    (("" (hide -2)
                      (("" (flatten)
                        (("" (split)
                          (("1" (expand "measure_empty?")
                            (("1" (replace -4) (("1" (assert) nil nil))
                              nil))
                            nil)
                           ("2" (skosimp)
                            (("2" (typepred "X!1")
                              (("2"
                                (expand "measure_countably_additive?")
                                (("2"
                                  (inst -6 "X!1")
                                  (("2"
                                    (expand "o ")
                                    (("2"
                                      (expand "x_eq")
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (hide -5)
                                          (("2"
                                            (inst-cp
                                             -
                                             "intersection[T](A!1, IUnion(X!1))")
                                            (("2"
                                              (split -3)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (replace -1)
                                                  (("1"
                                                    (replace -7)
                                                    (("1"
                                                      (replace -8 1 rl)
                                                      (("1"
                                                        (hide -8)
                                                        (("1"
                                                          (expand
                                                           "x_sum")
                                                          (("1"
                                                            (case-replace
                                                             "FORALL (i:nat): mu!1(intersection[T](A!1, X!1(i)))`1")
                                                            (("1"
                                                              (lift-if
                                                               1)
                                                              (("1"
                                                                (prop)
                                                                (("1"
                                                                  (rewrite
                                                                   "limit_lemma")
                                                                  (("1"
                                                                    (hide-all-but
                                                                     (-6
                                                                      -8
                                                                      1))
                                                                    (("1"
                                                                      (skolem
                                                                       +
                                                                       "i!1")
                                                                      (("1"
                                                                        (lemma
                                                                         "measurable_intersection"
                                                                         ("a"
                                                                          "A!1"
                                                                          "b"
                                                                          "X!1(i!1)"))
                                                                        (("1"
                                                                          (expand
                                                                           "measurable_set?")
                                                                          (("1"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (expand
                                                                           "measurable_set?")
                                                                          (("2"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (replace
                                                               1)
                                                              (("2"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (skosimp)
                                                              (("3"
                                                                (hide-all-but
                                                                 (-5
                                                                  1
                                                                  -3))
                                                                (("3"
                                                                  (expand
                                                                   "disjoint_indexed_measurable?")
                                                                  (("3"
                                                                    (expand
                                                                     "measurable_set?")
                                                                    (("3"
                                                                      (lemma
                                                                       "measurable_intersection"
                                                                       ("a"
                                                                        "A!1"
                                                                        "b"
                                                                        "X!1(i!1)"))
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (expand
                                                                           "measurable_set?")
                                                                          (("1"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         "measurable_set?")
                                                                        (("2"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but 1)
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((measurable_set nonempty-type-eq-decl nil measure_space_def nil)
    (measurable_set? const-decl "bool" measure_space_def nil)
    (set type-eq-decl nil sets nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     nil)
    (measure? const-decl "bool" generalized_measure_def nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (S formal-const-decl "sigma_algebra" measure_contraction nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil measure_contraction nil)
    (contraction_TCC3 subtype-tcc nil measure_contraction nil)
    (sigma_algebra_IUnion_rew application-judgement "(S)"
     measure_contraction nil)
    (finite_measure? const-decl "bool" generalized_measure_def nil)
    (measure_empty? const-decl "bool" generalized_measure_def nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (disjoint_indexed_measurable? const-decl "bool"
     generalized_measure_def nil)
    (disjoint_indexed_measurable nonempty-type-eq-decl nil
     generalized_measure_def nil)
    (x_eq const-decl "bool" extended_nnreal extended_nnreal)
    (x_sum const-decl "extended_nnreal" extended_nnreal
     extended_nnreal)
    (series const-decl "sequence[real]" series series)
    (convergent? const-decl "bool" convergence_sequences analysis)
    (sequence type-eq-decl nil sequences nil)
    (limit_lemma formula-decl nil convergence_sequences analysis)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (measurable_intersection judgement-tcc nil measure_space_def nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (IUnion const-decl "set[T]" indexed_sets nil)
    (O const-decl "T3" function_props nil)
    (measure_countably_additive? const-decl "bool"
     generalized_measure_def nil)
    (x_le const-decl "bool" extended_nnreal extended_nnreal)
    (measure_monotone formula-decl nil measure_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil))
   nil
   (fm_contraction subtype
    "LAMBDA E: measure_contraction.mu(sets[measure_contraction.T].intersection(measure_contraction.A, measure_contraction.E))`2"
    "finite_measure[T, S]")))
 (sigma_finite_contraction_def_TCC1 0
  (sigma_finite_contraction_def_TCC1-1 nil 3457156931
   ("" (skosimp)
    (("" (expand "measurable_set?")
      (("" (lemma "A_of_TCC1" ("f" "nu!1"))
        ((""
          (lemma "choose_member"
           ("a" "{X: disjoint_indexed_measurable[T, S] |
              IUnion[nat, T](X) = fullset[T] AND (FORALL i: nu!1(X(i))`1)}"))
          (("" (split)
            (("1" (expand "member")
              (("1" (flatten)
                (("1" (inst - "i!1")
                  (("1" (expand "A_of") (("1" (propax) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (expand "nonempty?") (("2" (propax) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((measurable_set? const-decl "bool" measure_space_def nil)
    (disjoint_indexed_measurable nonempty-type-eq-decl nil
     generalized_measure_def nil)
    (disjoint_indexed_measurable? const-decl "bool"
     generalized_measure_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (fullset const-decl "set" sets nil)
    (IUnion const-decl "set[T]" indexed_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (choose_member formula-decl nil sets_lemmas nil)
    (sigma_algebra_IUnion_rew application-judgement "(S)"
     measure_contraction nil)
    (nonempty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (A_of const-decl "disjoint_indexed_measurable" measure_def nil)
    (A_of_TCC1 subtype-tcc nil measure_def nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (sigma_finite_measure? const-decl "bool" measure_def nil)
    (sigma_finite_measure nonempty-type-eq-decl nil measure_def nil)
    (T formal-type-decl nil measure_contraction nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (setof type-eq-decl nil defined_types nil)
    (setofsets type-eq-decl nil sets nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (S formal-const-decl "sigma_algebra" measure_contraction nil))
   nil
   (sigma_finite_contraction_def subtype
    "measure_def[measure_contraction.T, measure_contraction.S].A_of(measure_contraction.nu)(measure_contraction.i)"
    "{E | measure_contraction.nu(measure_contraction.E)`1}")))
 (sigma_finite_contraction_def 0
  (sigma_finite_contraction_def-1 nil 3457156932
   ("" (skosimp)
    (("" (typepred "nu!1")
      (("" (expand "sigma_finite_measure?")
        (("" (expand "measure?")
          (("" (flatten)
            (("" (expand "measure_countably_additive?")
              (("" (inst - "lambda i: intersection(A_of(nu!1)(i),E!1)")
                (("1" (name "AA" "A_of(nu!1)")
                  (("1" (replace -1)
                    (("1" (expand "fm_contraction")
                      (("1" (expand "o ")
                        (("1" (expand "A_of")
                          (("1" (lemma "A_of_TCC1" ("f" "nu!1"))
                            (("1"
                              (lemma "choose_member"
                               ("a"
                                "{X: disjoint_indexed_measurable[T, S] |
              IUnion[nat, T](X) = fullset[T] AND (FORALL i: nu!1(X(i))`1)}"))
                              (("1"
                                (split)
                                (("1"
                                  (replace -3)
                                  (("1"
                                    (expand "member")
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (hide -3 -4)
                                        (("1"
                                          (case-replace
                                           "IUnion(LAMBDA i: intersection(AA(i), E!1))=E!1")
                                          (("1"
                                            (hide -1)
                                            (("1"
                                              (lemma
                                               "x_sum_eq"
                                               ("S"
                                                "LAMBDA i: nu!1(intersection(AA(i), E!1))"
                                                "T"
                                                "LAMBDA i: (TRUE, nu!1(intersection(AA(i), E!1))`2)"))
                                              (("1"
                                                (split)
                                                (("1"
                                                  (expand "x_eq")
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (replace -1 * rl)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 2)
                                                  (("2"
                                                    (skosimp)
                                                    (("2"
                                                      (hide -1 -3 -4)
                                                      (("2"
                                                        (inst - "i!1")
                                                        (("2"
                                                          (lemma
                                                           "measure_monotone"
                                                           ("f"
                                                            "nu!1"
                                                            "a"
                                                            "intersection(AA(i!1), E!1)"
                                                            "b"
                                                            "AA(i!1)"))
                                                          (("2"
                                                            (split)
                                                            (("1"
                                                              (expand
                                                               "x_le")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (expand
                                                                     "x_eq")
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              (("2"
                                                                (typepred
                                                                 "nu!1")
                                                                (("2"
                                                                  (expand
                                                                   "sigma_finite_measure?")
                                                                  (("2"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (hide-all-but
                                                               1)
                                                              (("3"
                                                                (expand
                                                                 "intersection")
                                                                (("3"
                                                                  (expand
                                                                   "subset?")
                                                                  (("3"
                                                                    (expand
                                                                     "member")
                                                                    (("3"
                                                                      (skosimp)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (skosimp)
                                                (("2"
                                                  (lemma
                                                   "measurable_intersection"
                                                   ("a"
                                                    "AA(i!1)"
                                                    "b"
                                                    "E!1"))
                                                  (("1"
                                                    (expand
                                                     "measurable_set?")
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand
                                                     "measurable_set?")
                                                    (("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but (-1 1))
                                            (("2"
                                              (apply-extensionality
                                               :hide?
                                               t)
                                              (("2"
                                                (lemma
                                                 "extensionality_postulate"
                                                 ("f"
                                                  "IUnion[nat, T](AA)"
                                                  "g"
                                                  "fullset[T]"))
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (split -2)
                                                    (("1"
                                                      (hide -2 -3)
                                                      (("1"
                                                        (inst - "x!1")
                                                        (("1"
                                                          (expand
                                                           "fullset")
                                                          (("1"
                                                            (expand
                                                             "IUnion")
                                                            (("1"
                                                              (skosimp)
                                                              (("1"
                                                                (case-replace
                                                                 "E!1(x!1)")
                                                                (("1"
                                                                  (expand
                                                                   "intersection")
                                                                  (("1"
                                                                    (expand
                                                                     "member")
                                                                    (("1"
                                                                      (inst
                                                                       +
                                                                       "i!1")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (skosimp)
                                                                    (("2"
                                                                      (expand
                                                                       "intersection")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "nonempty?")
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 2)
                  (("2" (typepred "A_of[T, S](nu!1)")
                    (("2" (expand "disjoint_indexed_measurable?")
                      (("2" (expand "disjoint?")
                        (("2" (skosimp)
                          (("2" (inst - "i!1" "j!1")
                            (("2" (assert)
                              (("2"
                                (expand "disjoint?")
                                (("2"
                                  (expand "intersection")
                                  (("2"
                                    (expand "empty?")
                                    (("2"
                                      (expand "member")
                                      (("2"
                                        (skosimp)
                                        (("2"
                                          (inst - "x!1")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (skosimp)
                  (("3"
                    (lemma "measurable_intersection"
                     ("a" "A_of[T, S](nu!1)(i!1)" "b" "E!1"))
                    (("1" (expand "measurable_set?")
                      (("1" (propax) nil nil)) nil)
                     ("2" (expand "measurable_set?")
                      (("2" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sigma_finite_measure nonempty-type-eq-decl nil measure_def nil)
    (sigma_finite_measure? const-decl "bool" measure_def nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (S formal-const-decl "sigma_algebra" measure_contraction nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (T formal-type-decl nil measure_contraction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (measure? const-decl "bool" generalized_measure_def nil)
    (sigma_algebra_IUnion_rew application-judgement "(S)"
     measure_contraction nil)
    (measure_countably_additive? const-decl "bool"
     generalized_measure_def nil)
    (empty? const-decl "bool" sets nil)
    (disjoint? const-decl "bool" sets nil)
    (disjoint? const-decl "bool" indexed_sets_aux sets_aux)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (fm_contraction const-decl "finite_measure" measure_contraction
     nil)
    (choose_member formula-decl nil sets_lemmas nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IUnion const-decl "set[T]" indexed_sets nil)
    (fullset const-decl "set" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (x_sum_eq formula-decl nil extended_nnreal extended_nnreal)
    (TRUE const-decl "bool" booleans nil)
    (measure_monotone formula-decl nil measure_def nil)
    (subset? const-decl "bool" sets nil)
    (x_le const-decl "bool" extended_nnreal extended_nnreal)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (x_eq const-decl "bool" extended_nnreal extended_nnreal)
    (measurable_fullset name-judgement "measurable_set[T, S]"
     measure_contraction nil)
    (subset_algebra_fullset name-judgement "(S)" measure_contraction
     nil)
    (measurable_intersection judgement-tcc nil measure_space_def nil)
    (extensionality_postulate formula-decl nil functions nil)
    (member const-decl "bool" sets nil)
    (A_of_TCC1 subtype-tcc nil measure_def nil)
    (O const-decl "T3" function_props nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil)
    (intersection const-decl "set" sets nil)
    (disjoint_indexed_measurable? const-decl "bool"
     generalized_measure_def nil)
    (disjoint_indexed_measurable nonempty-type-eq-decl nil
     generalized_measure_def nil)
    (A_of const-decl "disjoint_indexed_measurable" measure_def nil)
    (nu!1 skolem-const-decl "sigma_finite_measure[T, S]"
     measure_contraction nil)
    (measurable_set? const-decl "bool" measure_space_def nil)
    (measurable_set nonempty-type-eq-decl nil measure_space_def nil)
    (E!1 skolem-const-decl "measurable_set[T, S]" measure_contraction
     nil))
   shostak))
 (contraction_is_sigma_finite 0
  (contraction_is_sigma_finite-1 nil 3460361064
   ("" (skosimp)
    (("" (typepred "nu!1")
      (("" (expand "sigma_finite_measure?")
        (("" (flatten)
          (("" (expand "measure_sigma_finite?")
            (("" (skosimp)
              (("" (inst + "X!1")
                (("" (replace -2)
                  (("" (skosimp)
                    (("" (inst - "i!1")
                      (("" (expand "contraction")
                        ((""
                          (lemma "m_monotone[T,S,nu!1]"
                           ("a" "intersection(A!1, X!1(i!1))" "b"
                            "X!1(i!1)"))
                          (("1" (expand "x_le")
                            (("1" (assert)
                              (("1"
                                (hide-all-but 1)
                                (("1"
                                  (expand "intersection")
                                  (("1"
                                    (expand "subset?")
                                    (("1"
                                      (expand "member")
                                      (("1" (skosimp) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "measurable_set?")
                            (("2" (propax) nil nil)) nil)
                           ("3" (expand "measurable_set?")
                            (("3" (typepred "A!1")
                              (("3"
                                (typepred "X!1(i!1)")
                                (("3"
                                  (lemma
                                   "measurable_intersection"
                                   ("a" "A!1" "b" "X!1(i!1)"))
                                  (("1"
                                    (expand "measurable_set?")
                                    (("1" (propax) nil nil))
                                    nil)
                                   ("2"
                                    (expand "measurable_set?")
                                    (("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sigma_finite_measure nonempty-type-eq-decl nil measure_def nil)
    (sigma_finite_measure? const-decl "bool" measure_def nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (S formal-const-decl "sigma_algebra" measure_contraction nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (T formal-type-decl nil measure_contraction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (intersection const-decl "set" sets nil)
    (measurable_set nonempty-type-eq-decl nil measure_space_def nil)
    (measurable_set? const-decl "bool" measure_space_def nil)
    (set type-eq-decl nil sets nil)
    (m_monotone formula-decl nil measure_props nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (subset_algebra_fullset name-judgement "(S)" measure_contraction
     nil)
    (measurable_fullset name-judgement "measurable_set[T, S]"
     measure_contraction nil)
    (sigma_algebra_IUnion_rew application-judgement "(S)"
     measure_contraction nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (x_le const-decl "bool" extended_nnreal extended_nnreal)
    (measurable_intersection judgement-tcc nil measure_space_def nil)
    (contraction const-decl "measure_type" measure_contraction nil)
    (disjoint_indexed_measurable nonempty-type-eq-decl nil
     generalized_measure_def nil)
    (disjoint_indexed_measurable? const-decl "bool"
     generalized_measure_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (measure_sigma_finite? const-decl "bool" measure_def nil))
   nil
   (contraction_is_sigma_finite subtype
    "measure_contraction.contraction(measure_contraction.nu, measure_contraction.A)"
    "sigma_finite_measure[T, S]")))
 (contraction_isf 0
  (contraction_isf-1 nil 3431719231
   ("" (skosimp)
    (("" (split)
      (("1" (flatten)
        (("1" (expand "isf?")
          (("1" (split)
            (("1" (lemma "phi_is_simple[T,S]" ("X" "A!1"))
              (("1" (lemma "simple_times" ("h1" "phi(A!1)" "h2" "f!1"))
                (("1" (propax) nil nil) ("2" (propax) nil nil)) nil)
               ("2" (typepred "A!1")
                (("2" (expand "measurable_set?")
                  (("2" (propax) nil nil)) nil))
                nil))
              nil)
             ("2" (expand "mu_fin?")
              (("2" (expand "contraction")
                (("2" (expand "nonzero_set?")
                  (("2" (expand "intersection")
                    (("2" (expand "phi")
                      (("2" (expand "member")
                        (("2" (expand "*")
                          (("2"
                            (case-replace
                             "{x: T | IF A!1(x) THEN 1 ELSE 0 ENDIF * f!1(x) /= 0}={x_1: T | A!1(x_1) AND f!1(x_1) /= 0}")
                            (("2" (hide -1 2)
                              (("2"
                                (apply-extensionality :hide? t)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (expand "isf?")
          (("2" (flatten)
            (("2" (hide -1)
              (("2" (expand "nonzero_set?")
                (("2" (expand "mu_fin?")
                  (("2" (expand "contraction")
                    (("2" (expand "intersection")
                      (("2" (expand "phi")
                        (("2" (expand "member")
                          (("2" (expand "*")
                            (("2"
                              (case-replace
                               "{x: T | IF A!1(x) THEN 1 ELSE 0 ENDIF * f!1(x) /= 0}={x_1: T | A!1(x_1) AND f!1(x_1) /= 0}")
                              (("2"
                                (hide -1 2)
                                (("2"
                                  (apply-extensionality :hide? t)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((isf? const-decl "bool" isf nil)
    (mu_fin? const-decl "bool" measure_props nil)
    (nonzero_set? const-decl "set[T]" isf nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (member const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (contraction const-decl "measure_type" measure_contraction nil)
    (S formal-const-decl "sigma_algebra" measure_contraction nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil measure_contraction nil)
    (measurable_set nonempty-type-eq-decl nil measure_space_def nil)
    (measurable_set? const-decl "bool" measure_space_def nil)
    (set type-eq-decl nil sets nil)
    (phi_is_simple judgement-tcc nil measure_space nil)
    (simple_times judgement-tcc nil measure_space nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (simple? const-decl "bool" measure_space nil)
    (simple nonempty-type-eq-decl nil measure_space nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (phi const-decl "nat" measure_space nil)
    (NOT const-decl "[bool -> bool]" booleans nil))
   shostak))
 (contraction_isf_integral_TCC1 0
  (contraction_isf_integral_TCC1-2 "" 3789904225
   ("" (skosimp)
    (("" (typepred "f!1") (("" (rewrite "contraction_isf") nil nil))
      nil))
    nil)
   ((isf nonempty-type-eq-decl nil isf nil)
    (isf? const-decl "bool" isf nil)
    (contraction const-decl "measure_type" measure_contraction nil)
    (measurable_set nonempty-type-eq-decl nil measure_space_def nil)
    (measurable_set? const-decl "bool" measure_space_def nil)
    (set type-eq-decl nil sets nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     nil)
    (measure? const-decl "bool" generalized_measure_def nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (S formal-const-decl "sigma_algebra" measure_contraction nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-type-decl nil measure_contraction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (simple nonempty-type-eq-decl nil measure_space nil)
    (simple? const-decl "bool" measure_space nil)
    (contraction_isf formula-decl nil measure_contraction nil))
   shostak
   (contraction_isf_integral subtype
    "((reals@real_fun_ops[measure_contraction.T].*)(measure_space[measure_contraction.T, measure_contraction.S].phi(measure_contraction.A), measure_contraction.f))"
    "isf[T, S, mu]"))
  (contraction_isf_integral_TCC1-1 nil 3431698665
   ("" (skosimp)
    (("" (typepred "f!1")
      (("" (rewrite "contraction_isf")
        (("" (expand "isf?")
          (("" (expand "simple?") (("" (propax) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((isf nonempty-type-eq-decl nil isf nil)
    (isf? const-decl "bool" isf nil)
    (measurable_set nonempty-type-eq-decl nil measure_space_def nil)
    (measurable_set? const-decl "bool" measure_space_def nil)
    (set type-eq-decl nil sets nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     nil)
    (measure? const-decl "bool" generalized_measure_def nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (setofsets type-eq-decl nil sets nil)
    (simple nonempty-type-eq-decl nil measure_space nil)
    (simple? const-decl "bool" measure_space nil))
   nil
   (contraction_isf_integral subtype
    "((reals@real_fun_ops[measure_contraction.T].*)(measure_space[measure_contraction.T, measure_contraction.S].phi(measure_contraction.A), measure_contraction.f))"
    "isf[T, S, mu]")))
 (contraction_isf_integral 0
  (contraction_isf_integral-2 "" 3789904231
   ("" (skosimp)
    (("" (typepred "f!1")
      (("" (lemma "contraction_isf" ("mu" "mu!1" "A" "A!1" "f" "f!1"))
        (("" (assert)
          (("" (expand "isf_integral")
            (("" (expand "mu")
              (("" (expand "contraction")
                ((""
                  (case "FORALL (c: real):
        NOT c = 0 IMPLIES
         S(inverse_image[T, real]
               (((reals@real_fun_ops[T].*)(phi[T, S](A!1), f!1)),
                singleton[real](c)))")
                  (("1"
                    (case-replace "(LAMBDA (c:real):
             IF c = 0 THEN 0
             ELSE c *
                   mu!1(intersection(A!1,
                                    inverse_image[T, real]
                                    (f!1, singleton[real](c))))`2
             ENDIF)=(LAMBDA (c:real):
              IF c = 0 THEN 0
              ELSE c *
                    mu!1(inverse_image[T, real]
                            (((reals@real_fun_ops[T].*)
                                  (phi[T, S](A!1), f!1)),
                             singleton[real](c)))`2
              ENDIF)")
                    (("1" (hide -1)
                      (("1"
                        (name "F" "LAMBDA(c: real):IF c = 0 THEN 0
              ELSE c *
                    mu!1(inverse_image[T, real]
                            (((reals@real_fun_ops[T].*)
                                  (phi[T, S](A!1), f!1)),
                             singleton[real](c)))`2
              ENDIF")
                        (("1" (replace -1)
                          (("1" (expand "isf?")
                            (("1" (expand "simple?")
                              (("1"
                                (flatten)
                                (("1"
                                  (hide -2 -3 -5 -6 -8)
                                  (("1"
                                    (lemma
                                     "sigma_add[real]"
                                     ("f"
                                      "F"
                                      "X"
                                      "image[T, real](f!1, fullset[T])"
                                      "t"
                                      "0"))
                                    (("1"
                                      (expand "F" -1 3)
                                      (("1"
                                        (replace -1 1 rl)
                                        (("1"
                                          (case
                                           "subset?[real](image[T, real]
                (((reals@real_fun_ops[T].*)(phi[T, S](A!1), f!1)),
                 fullset[T]),add[real](0, image[T, real](f!1, fullset[T])))")
                                          (("1"
                                            (lemma
                                             "sigma_subset[real]"
                                             ("X"
                                              "image[T, real]
               (((reals@real_fun_ops[T].*)(phi[T, S](A!1), f!1)),
                fullset[T])"
                                              "Y"
                                              "add[real](0, image[T, real](f!1, fullset[T]))"
                                              "f"
                                              "F"))
                                            (("1"
                                              (replace -2)
                                              (("1"
                                                (replace -1)
                                                (("1"
                                                  (hide -1 -3)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (lemma
                                                       "sigma_eq[real]"
                                                       ("X"
                                                        "difference[real](add[real](0, image[T, real](f!1, fullset[T])),
                       image[T, real]
                           (((reals@real_fun_ops[T].*)
                                 (phi[T, S](A!1), f!1)),
                            fullset[T]))"))
                                                      (("1"
                                                        (inst
                                                         -
                                                         "F"
                                                         "lambda (c:real): 0")
                                                        (("1"
                                                          (split -1)
                                                          (("1"
                                                            (replace
                                                             -1)
                                                            (("1"
                                                              (rewrite
                                                               "sigma_zero[real]"
                                                               1)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide 2)
                                                            (("2"
                                                              (skosimp)
                                                              (("2"
                                                                (typepred
                                                                 "t!1")
                                                                (("2"
                                                                  (hide
                                                                   -2
                                                                   -3
                                                                   -4
                                                                   -5)
                                                                  (("2"
                                                                    (expand
                                                                     "difference")
                                                                    (("2"
                                                                      (expand
                                                                       "member")
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (expand
                                                                           "add")
                                                                          (("2"
                                                                            (expand
                                                                             "F")
                                                                            (("2"
                                                                              (expand
                                                                               "inverse_image")
                                                                              (("2"
                                                                                (expand
                                                                                 "member")
                                                                                (("2"
                                                                                  (expand
                                                                                   "singleton")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "*")
                                                                                    (("2"
                                                                                      (split
                                                                                       -1)
                                                                                      (("1"
                                                                                        (replace
                                                                                         -1
                                                                                         *
                                                                                         rl)
                                                                                        (("1"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (case-replace
                                                                                         "t!1=0")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (case-replace
                                                                                             "{x: T | phi[T, S](A!1)(x) * f!1(x) = t!1}=emptyset[T]")
                                                                                            (("1"
                                                                                              (typepred
                                                                                               "mu!1")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "measure?")
                                                                                                (("1"
                                                                                                  (flatten)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "measure_empty?")
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (hide
                                                                                               4)
                                                                                              (("2"
                                                                                                (apply-extensionality
                                                                                                 1
                                                                                                 :hide?
                                                                                                 t)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "emptyset")
                                                                                                  (("2"
                                                                                                    (hide
                                                                                                     -2)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "fullset")
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "image")
                                                                                                        (("2"
                                                                                                          (inst
                                                                                                           +
                                                                                                           "x!1")
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide 2)
                                                          (("2"
                                                            (expand
                                                             "convergent?")
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (hide
                                                                 2)
                                                                (("2"
                                                                  (rewrite
                                                                   "finite_difference")
                                                                  (("2"
                                                                    (rewrite
                                                                     "finite_add")
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but 1)
                                            (("2"
                                              (expand "subset?")
                                              (("2"
                                                (expand "add")
                                                (("2"
                                                  (expand "fullset")
                                                  (("2"
                                                    (expand "*")
                                                    (("2"
                                                      (expand "phi")
                                                      (("2"
                                                        (expand
                                                         "image")
                                                        (("2"
                                                          (expand
                                                           "member")
                                                          (("2"
                                                            (skosimp*)
                                                            (("2"
                                                              (case-replace
                                                               "A!1(x!2)")
                                                              (("1"
                                                                (inst
                                                                 +
                                                                 "x!2")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (propax) nil nil))
                        nil))
                      nil)
                     ("2" (hide 2)
                      (("2" (apply-extensionality :hide? t)
                        (("1" (case-replace "x!1=0")
                          (("1" (assert)
                            (("1"
                              (case-replace "inverse_image[T, real]
            (((reals@real_fun_ops[T].*)(phi[T, S](A!1), f!1)),
             singleton[real](x!1))=intersection[T]
            (A!1, inverse_image[T, real](f!1, singleton[real](x!1)))")
                              (("1"
                                (hide-all-but (1 2))
                                (("1"
                                  (apply-extensionality :hide? t)
                                  (("1" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (skosimp)
                          (("2" (inst - "c!1")
                            (("2" (assert)
                              (("2"
                                (case-replace
                                 "inverse_image[T, real]
            (((reals@real_fun_ops[T].*)(phi[T, S](A!1), f!1)),
             singleton[real](c!1))=intersection[T]
            (A!1, inverse_image[T, real](f!1, singleton[real](c!1)))")
                                (("2"
                                  (hide 3 -1 -2 -3)
                                  (("2"
                                    (apply-extensionality :hide? t)
                                    (("2"
                                      (expand "inverse_image")
                                      (("2"
                                        (expand "intersection")
                                        (("2"
                                          (expand "phi")
                                          (("2"
                                            (expand "*")
                                            (("2"
                                              (expand "member")
                                              (("2"
                                                (expand "singleton")
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (hide 2)
                      (("3" (skosimp)
                        (("3" (inst - "c!1")
                          (("3" (assert)
                            (("3"
                              (case-replace "inverse_image[T, real]
            (((reals@real_fun_ops[T].*)(phi[T, S](A!1), f!1)),
             singleton[real](c!1))=intersection[T]
            (A!1, inverse_image[T, real](f!1, singleton[real](c!1)))")
                              (("3"
                                (hide -1 -2 -3 3)
                                (("3"
                                  (apply-extensionality :hide? t)
                                  (("3" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (skosimp)
                      (("2"
                        (lemma "prod_measurable[T,S]"
                         ("g1" "phi[T, S](A!1)" "g2" "f!1"))
                        (("1" (expand "measurable_function?")
                          (("1" (inst - "singleton[real](c!1)")
                            (("1" (expand "measurable_set?")
                              (("1" (propax) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (lemma "phi_is_simple[T,S]" ("X" "A!1"))
                          (("1" (expand "simple?")
                            (("1" (flatten) nil nil)) nil)
                           ("2" (typepred "A!1")
                            (("2" (expand "measurable_set?")
                              (("2" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((isf nonempty-type-eq-decl nil isf nil)
    (isf? const-decl "bool" isf nil)
    (contraction const-decl "measure_type" measure_contraction nil)
    (measurable_set nonempty-type-eq-decl nil measure_space_def nil)
    (measurable_set? const-decl "bool" measure_space_def nil)
    (set type-eq-decl nil sets nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     nil)
    (measure? const-decl "bool" generalized_measure_def nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (S formal-const-decl "sigma_algebra" measure_contraction nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-type-decl nil measure_contraction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (mu const-decl "nnreal" measure_props nil)
    (singleton const-decl "(singleton?)" sets nil)
    (singleton? const-decl "bool" sets nil)
    (phi const-decl "nat" measure_space nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (inverse_image const-decl "set[D]" function_image nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (singleton_is_compact application-judgement "compact"
     convergence_aux metric_space)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set[real]" integral_def analysis)
    (singleton_is_closed application-judgement
     "closed[real, (metric_induced_topology)]" convergence_aux
     metric_space)
    (F skolem-const-decl "[real -> real]" measure_contraction nil)
    (subset? const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (add const-decl "(nonempty?)" sets nil)
    (sigma_eq formula-decl nil sigma_countable sigma_set)
    (difference const-decl "set" sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_difference judgement-tcc nil finite_sets nil)
    (finite_add formula-decl nil finite_sets nil)
    (sigma_zero formula-decl nil sigma_countable sigma_set)
    (member const-decl "bool" sets nil)
    (TRUE const-decl "bool" booleans nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (finite_emptyset name-judgement "finite_set" countable_props
     sets_aux)
    (finite_emptyset name-judgement "finite_set" countable_setofsets
     sets_aux)
    (finite_emptyset name-judgement "finite_set" sigma_countable
     sigma_set)
    (measurable_emptyset name-judgement "measurable_set"
     measure_contraction nil)
    (subset_algebra_emptyset name-judgement "(S)" measure_contraction
     nil)
    (measure_empty? const-decl "bool" generalized_measure_def nil)
    (emptyset const-decl "set" sets nil)
    (f!1 skolem-const-decl "isf[T, S, contraction(mu!1, A!1)]"
     measure_contraction nil)
    (A!1 skolem-const-decl "measurable_set[T, S]" measure_contraction
     nil)
    (mu!1 skolem-const-decl "measure_type[T, S]" measure_contraction
     nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (measurable_fullset name-judgement "measurable_set[T, S]"
     measure_contraction nil)
    (subset_algebra_fullset name-judgement "(S)" measure_contraction
     nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (sigma_subset formula-decl nil sigma_countable sigma_set)
    (convergent? const-decl "bool" countable_convergence sigma_set)
    (fullset const-decl "set" sets nil)
    (image const-decl "set[R]" function_image nil)
    (countable_set nonempty-type-eq-decl nil countability sets_aux)
    (is_countable const-decl "bool" countability sets_aux)
    (sigma_add formula-decl nil sigma_countable sigma_set)
    (real_times_real_is_real application-judgement "real" reals nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (intersection const-decl "set" sets nil)
    (phi_is_simple judgement-tcc nil measure_space nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (metric_induced_topology const-decl "setofsets[T]" metric_space_def
     metric_space)
    (borel? const-decl "sigma_algebra" borel nil)
    (borel nonempty-type-eq-decl nil borel nil)
    (measurable_function nonempty-type-eq-decl nil measure_space_def
     nil)
    (measurable_function? const-decl "bool" measure_space_def nil)
    (prod_measurable judgement-tcc nil measure_space nil)
    (isf_integral const-decl "real" isf nil)
    (contraction_isf formula-decl nil measure_contraction nil)
    (simple? const-decl "bool" measure_space nil)
    (simple nonempty-type-eq-decl nil measure_space nil))
   shostak)
  (contraction_isf_integral-1 nil 3431720982
   ("" (skosimp)
    (("" (typepred "f!1")
      (("" (lemma "contraction_isf" ("mu" "mu!1" "A" "A!1" "f" "f!1"))
        (("" (assert)
          (("" (expand "isf_integral")
            (("" (expand "mu")
              (("" (expand "contraction")
                ((""
                  (case "FORALL (c: real):
        NOT c = 0 IMPLIES
         S(inverse_image[T, real]
               (((reals@real_fun_ops[T].*)(phi[T, S](A!1), f!1)),
                singleton[real](c)))")
                  (("1"
                    (case-replace "(LAMBDA (c:real):
             IF c = 0 THEN 0
             ELSE c *
                   mu!1(intersection(A!1,
                                    inverse_image[T, real]
                                    (f!1, singleton[real](c))))`2
             ENDIF)=(LAMBDA (c:real):
              IF c = 0 THEN 0
              ELSE c *
                    mu!1(inverse_image[T, real]
                            (((reals@real_fun_ops[T].*)
                                  (phi[T, S](A!1), f!1)),
                             singleton[real](c)))`2
              ENDIF)")
                    (("1" (hide -1)
                      (("1"
                        (name "F" "LAMBDA(c: real):IF c = 0 THEN 0
              ELSE c *
                    mu!1(inverse_image[T, real]
                            (((reals@real_fun_ops[T].*)
                                  (phi[T, S](A!1), f!1)),
                             singleton[real](c)))`2
              ENDIF")
                        (("1" (replace -1)
                          (("1" (expand "isf?")
                            (("1" (expand "simple?")
                              (("1"
                                (flatten)
                                (("1"
                                  (hide -2 -3 -5 -6 -8)
                                  (("1"
                                    (lemma
                                     "sigma_add[real]"
                                     ("f"
                                      "F"
                                      "X"
                                      "image[T, real](f!1, fullset[T])"
                                      "t"
                                      "0"))
                                    (("1"
                                      (expand "F" -1 3)
                                      (("1"
                                        (replace -1 1 rl)
                                        (("1"
                                          (case
                                           "subset?[real](image[T, real]
                (((reals@real_fun_ops[T].*)(phi[T, S](A!1), f!1)),
                 fullset[T]),add[real](0, image[T, real](f!1, fullset[T])))")
                                          (("1"
                                            (lemma
                                             "sigma_subset[real]"
                                             ("X"
                                              "image[T, real]
               (((reals@real_fun_ops[T].*)(phi[T, S](A!1), f!1)),
                fullset[T])"
                                              "Y"
                                              "add[real](0, image[T, real](f!1, fullset[T]))"
                                              "f"
                                              "F"))
                                            (("1"
                                              (replace -2)
                                              (("1"
                                                (replace -1)
                                                (("1"
                                                  (hide -1 -3)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (lemma
                                                       "sigma_eq[real]"
                                                       ("X"
                                                        "difference[real](add[real](0, image[T, real](f!1, fullset[T])),
                       image[T, real]
                           (((reals@real_fun_ops[T].*)
                                 (phi[T, S](A!1), f!1)),
                            fullset[T]))"))
                                                      (("1"
                                                        (inst
                                                         -
                                                         "F"
                                                         "lambda (c:real): 0")
                                                        (("1"
                                                          (split -1)
                                                          (("1"
                                                            (replace
                                                             -1)
                                                            (("1"
                                                              (rewrite
                                                               "sigma_zero[real]"
                                                               1)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide 2)
                                                            (("2"
                                                              (skosimp)
                                                              (("2"
                                                                (typepred
                                                                 "t!1")
                                                                (("2"
                                                                  (hide
                                                                   -2
                                                                   -3
                                                                   -4
                                                                   -5)
                                                                  (("2"
                                                                    (expand
                                                                     "difference")
                                                                    (("2"
                                                                      (expand
                                                                       "member")
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (expand
                                                                           "add")
                                                                          (("2"
                                                                            (expand
                                                                             "F")
                                                                            (("2"
                                                                              (expand
                                                                               "inverse_image")
                                                                              (("2"
                                                                                (expand
                                                                                 "member")
                                                                                (("2"
                                                                                  (expand
                                                                                   "singleton")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "*")
                                                                                    (("2"
                                                                                      (split
                                                                                       -1)
                                                                                      (("1"
                                                                                        (replace
                                                                                         -1
                                                                                         *
                                                                                         rl)
                                                                                        (("1"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (case-replace
                                                                                         "t!1=0")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (case-replace
                                                                                             "{x: T | phi[T, S](A!1)(x) * f!1(x) = t!1}=emptyset[T]")
                                                                                            (("1"
                                                                                              (typepred
                                                                                               "mu!1")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "measure?")
                                                                                                (("1"
                                                                                                  (flatten)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "measure_empty?")
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (hide
                                                                                               4)
                                                                                              (("2"
                                                                                                (apply-extensionality
                                                                                                 1
                                                                                                 :hide?
                                                                                                 t)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "emptyset")
                                                                                                  (("2"
                                                                                                    (hide
                                                                                                     -2)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "fullset")
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "image")
                                                                                                        (("2"
                                                                                                          (inst
                                                                                                           +
                                                                                                           "x!1")
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide 2)
                                                          (("2"
                                                            (expand
                                                             "convergent?")
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (hide
                                                                 2)
                                                                (("2"
                                                                  (rewrite
                                                                   "finite_difference")
                                                                  (("2"
                                                                    (rewrite
                                                                     "finite_add")
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but 1)
                                            (("2"
                                              (expand "subset?")
                                              (("2"
                                                (expand "add")
                                                (("2"
                                                  (expand "fullset")
                                                  (("2"
                                                    (expand "*")
                                                    (("2"
                                                      (expand "phi")
                                                      (("2"
                                                        (expand
                                                         "image")
                                                        (("2"
                                                          (expand
                                                           "member")
                                                          (("2"
                                                            (skosimp*)
                                                            (("2"
                                                              (case-replace
                                                               "A!1(x!2)")
                                                              (("1"
                                                                (inst
                                                                 +
                                                                 "x!2")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (propax) nil nil))
                        nil))
                      nil)
                     ("2" (hide 2)
                      (("2" (apply-extensionality :hide? t)
                        (("1" (case-replace "x!1=0")
                          (("1" (assert)
                            (("1"
                              (case-replace "inverse_image[T, real]
            (((reals@real_fun_ops[T].*)(phi[T, S](A!1), f!1)),
             singleton[real](x!1))=intersection[T]
            (A!1, inverse_image[T, real](f!1, singleton[real](x!1)))")
                              (("1"
                                (hide-all-but (1 2))
                                (("1"
                                  (apply-extensionality :hide? t)
                                  (("1" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (skosimp)
                          (("2" (inst - "c!1")
                            (("2" (assert)
                              (("2"
                                (case-replace
                                 "inverse_image[T, real]
            (((reals@real_fun_ops[T].*)(phi[T, S](A!1), f!1)),
             singleton[real](c!1))=intersection[T]
            (A!1, inverse_image[T, real](f!1, singleton[real](c!1)))")
                                (("2"
                                  (hide 3 -1 -2 -3)
                                  (("2"
                                    (apply-extensionality :hide? t)
                                    (("2"
                                      (expand "inverse_image")
                                      (("2"
                                        (expand "intersection")
                                        (("2"
                                          (expand "phi")
                                          (("2"
                                            (expand "*")
                                            (("2"
                                              (expand "member")
                                              (("2"
                                                (expand "singleton")
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (hide 2)
                      (("3" (skosimp)
                        (("3" (inst - "c!1")
                          (("3" (assert)
                            (("3"
                              (case-replace "inverse_image[T, real]
            (((reals@real_fun_ops[T].*)(phi[T, S](A!1), f!1)),
             singleton[real](c!1))=intersection[T]
            (A!1, inverse_image[T, real](f!1, singleton[real](c!1)))")
                              (("3"
                                (hide -1 -2 -3 3)
                                (("3"
                                  (apply-extensionality :hide? t)
                                  (("3" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (skosimp)
                      (("2"
                        (lemma "prod_measurable[T,S]"
                         ("g1" "phi[T, S](A!1)" "g2" "f!1"))
                        (("1" (expand "measurable_function?")
                          (("1" (inst - "singleton[real](c!1)")
                            (("1" (expand "measurable_set?")
                              (("1" (propax) nil nil)) nil)
                             ("2" (lemma "singleton_is_borel")
                              (("2" (inst - "c!1") nil nil)) nil))
                            nil))
                          nil)
                         ("2" (lemma "phi_is_simple[T,S]" ("X" "A!1"))
                          (("1" (expand "simple?")
                            (("1" (flatten) nil nil)) nil)
                           ("2" (typepred "A!1")
                            (("2" (expand "measurable_set?")
                              (("2" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((isf nonempty-type-eq-decl nil isf nil)
    (isf? const-decl "bool" isf nil)
    (measurable_set nonempty-type-eq-decl nil measure_space_def nil)
    (measurable_set? const-decl "bool" measure_space_def nil)
    (set type-eq-decl nil sets nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     nil)
    (measure? const-decl "bool" generalized_measure_def nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (setofsets type-eq-decl nil sets nil)
    (mu const-decl "nnreal" measure_props nil)
    (singleton const-decl "(singleton?)" sets nil)
    (singleton? const-decl "bool" sets nil)
    (phi const-decl "nat" measure_space nil)
    (subset? const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (add const-decl "(nonempty?)" sets nil)
    (sigma_eq formula-decl nil sigma_countable sigma_set)
    (difference const-decl "set" sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_difference judgement-tcc nil finite_sets nil)
    (finite_add formula-decl nil finite_sets nil)
    (sigma_zero formula-decl nil sigma_countable sigma_set)
    (member const-decl "bool" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (measure_empty? const-decl "bool" generalized_measure_def nil)
    (emptyset const-decl "set" sets nil)
    (sigma_subset formula-decl nil sigma_countable sigma_set)
    (convergent? const-decl "bool" countable_convergence sigma_set)
    (fullset const-decl "set" sets nil)
    (countable_set nonempty-type-eq-decl nil countability sets_aux)
    (is_countable const-decl "bool" countability sets_aux)
    (sigma_add formula-decl nil sigma_countable sigma_set)
    (intersection const-decl "set" sets nil)
    (phi_is_simple judgement-tcc nil measure_space nil)
    (metric_induced_topology const-decl "setofsets[T]" metric_space_def
     metric_space)
    (borel? const-decl "sigma_algebra" borel nil)
    (borel nonempty-type-eq-decl nil borel nil)
    (measurable_function nonempty-type-eq-decl nil measure_space_def
     nil)
    (measurable_function? const-decl "bool" measure_space_def nil)
    (prod_measurable judgement-tcc nil measure_space nil)
    (isf_integral const-decl "real" isf nil)
    (simple? const-decl "bool" measure_space nil)
    (simple nonempty-type-eq-decl nil measure_space nil))
   shostak))
 (contraction_nn_integrable_TCC1 0
  (contraction_nn_integrable_TCC1-1 nil 3431698665
   ("" (skosimp)
    (("" (skosimp)
      (("" (typepred "f!1")
        (("" (expand "nn_measurable?")
          (("" (flatten)
            (("" (inst - "x1!1") (("" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil measure_contraction nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (setof type-eq-decl nil defined_types nil)
    (setofsets type-eq-decl nil sets nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (S formal-const-decl "sigma_algebra" measure_contraction nil)
    (nn_measurable? const-decl "bool" measure_space nil)
    (nn_measurable nonempty-type-eq-decl nil measure_space nil))
   nil
   (contraction_nn_integrable subtype "measure_contraction.f"
    "[measure_contraction.T -> nnreal]")))
 (contraction_nn_integrable_TCC2 0
  (contraction_nn_integrable_TCC2-1 nil 3431698665
   ("" (skosimp)
    (("" (skosimp)
      (("" (typepred "f!1")
        (("" (expand "nn_measurable?")
          (("" (flatten)
            (("" (inst - "x1!1")
              (("" (hide -1) (("" (grind) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (member const-decl "bool" sets nil)
    (phi const-decl "nat" measure_space nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil measure_contraction nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (setof type-eq-decl nil defined_types nil)
    (setofsets type-eq-decl nil sets nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (S formal-const-decl "sigma_algebra" measure_contraction nil)
    (nn_measurable? const-decl "bool" measure_space nil)
    (nn_measurable nonempty-type-eq-decl nil measure_space nil))
   nil
   (contraction_nn_integrable subtype
    "((reals@real_fun_ops[measure_contraction.T].*)(measure_space[measure_contraction.T, measure_contraction.S].phi(measure_contraction.A), measure_contraction.f))"
    "[measure_contraction.T -> nnreal]")))
 (contraction_nn_integrable 0
  (contraction_nn_integrable-3 "" 3789904245
   ("" (skosimp)
    (("" (split)
      (("1" (flatten)
        (("1" (expand "nn_integrable?")
          (("1" (skosimp)
            (("1"
              (inst + "lambda (n:nat): ((reals@real_fun_ops[T].*)
                                    (phi[T, S](A!1), u!1(n)))")
              (("1" (split)
                (("1" (expand "pointwise_convergence?")
                  (("1" (skosimp)
                    (("1" (inst - "x!1")
                      (("1" (expand "*")
                        (("1" (expand "phi")
                          (("1" (expand "member")
                            (("1" (case-replace "A!1(x!1)")
                              (("1" (assert) nil nil)
                               ("2"
                                (assert)
                                (("2"
                                  (hide -1 -2 1)
                                  (("2"
                                    (expand "convergence?")
                                    (("2"
                                      (skosimp)
                                      (("2"
                                        (inst + "0")
                                        (("2"
                                          (skosimp)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide -1)
                  (("2" (expand "convergent?")
                    (("2" (skosimp)
                      (("2" (inst + "l!1")
                        (("2" (expand "o ")
                          (("2"
                            (case-replace
                             "(LAMBDA (n: nat): isf_integral[T,S,contraction(mu!1,A!1)](u!1(n)))=(LAMBDA (n: nat):
                     isf_integral[T,S,mu!1]((((reals@real_fun_ops[T].*)
                                    (phi[T, S](A!1), u!1(n))))))")
                            (("1" (hide -1 2)
                              (("1"
                                (apply-extensionality :hide? t)
                                (("1"
                                  (rewrite "contraction_isf_integral")
                                  nil
                                  nil)
                                 ("2"
                                  (skosimp)
                                  (("2"
                                    (typepred "u!1(n!1)")
                                    (("2"
                                      (rewrite "contraction_isf")
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide -1 2)
                              (("2"
                                (skosimp)
                                (("2"
                                  (typepred "u!1(n!1)")
                                  (("2"
                                    (hide -2)
                                    (("2"
                                      (rewrite "contraction_isf")
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (typepred "u!1")
                (("2" (hide -2 -3)
                  (("2" (expand "increasing_nn_isf?")
                    (("2" (expand "pointwise_increasing?")
                      (("2" (skosimp)
                        (("2" (inst - "x!1")
                          (("2" (expand "increasing?")
                            (("2" (skolem + ("i!1" "j!1"))
                              (("2"
                                (inst - "i!1" "j!1")
                                (("2"
                                  (flatten)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "*")
                                      (("2"
                                        (expand "phi")
                                        (("2"
                                          (expand "member")
                                          (("2"
                                            (case-replace "A!1(x!1)")
                                            (("1" (assert) nil nil)
                                             ("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (expand "nn_isf?")
                (("3" (skosimp)
                  (("3" (typepred "u!1(n!1)")
                    (("3" (expand "nn_isf?")
                      (("3" (split)
                        (("1" (rewrite "contraction_isf") nil nil)
                         ("2" (skosimp)
                          (("2" (inst - "x!1")
                            (("2" (hide -1 -3 -4)
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (typepred "f!1")
          (("2" (lemma "nn_measurable_def" ("f" "f!1"))
            (("2" (expand "nn_measurable?")
              (("2" (flatten)
                (("2" (replace -2)
                  (("2" (replace -3)
                    (("2" (assert)
                      (("2" (skosimp)
                        (("2" (expand "pointwise_converges_upto?")
                          (("2" (flatten)
                            (("2" (expand "nn_integrable?")
                              (("2"
                                (skosimp)
                                (("2"
                                  (inst
                                   +
                                   "lambda (n:nat): ((reals@real_fun_ops[T].*)
                                  (phi[T, S](A!1), u!1(n)))+((reals@real_fun_ops[T].*)
                                  (phi[T, S](complement(A!1)), w!1(n)))")
                                  (("1"
                                    (split)
                                    (("1"
                                      (expand "pointwise_convergence?")
                                      (("1"
                                        (skosimp)
                                        (("1"
                                          (inst - "x!1")
                                          (("1"
                                            (inst -5 "x!1")
                                            (("1"
                                              (hide-all-but (-1 -5 1))
                                              (("1"
                                                (expand "+")
                                                (("1"
                                                  (expand "*")
                                                  (("1"
                                                    (expand "phi")
                                                    (("1"
                                                      (expand
                                                       "complement")
                                                      (("1"
                                                        (expand
                                                         "member")
                                                        (("1"
                                                          (case-replace
                                                           "A!1(x!1)")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "convergent?")
                                      (("2"
                                        (skosimp)
                                        (("2"
                                          (inst + "l!1")
                                          (("2"
                                            (expand "o ")
                                            (("2"
                                              (case
                                               "FORALL (n: nat):
        isf?[T, S, contraction(mu!1, A!1)]
            ((+[T])
                 ((((reals@real_fun_ops[T].*)
                        (phi[T, S](A!1), u!1(n)))),
                  ((((reals@real_fun_ops[T].*)
                         (phi[T, S](complement[T](A!1)), w!1(n)))))))")
                                              (("1"
                                                (case-replace
                                                 "(LAMBDA (n: nat):
                     isf_integral[T,S,contraction(mu!1,A!1)]((((reals@real_fun_ops[T].*)
                                    (phi[T, S](A!1), u!1(n))))
                                   +
                                   (((reals@real_fun_ops[T].*)
                                     (phi[T, S](complement(A!1)),
                                      w!1(n))))))=(LAMBDA (n: nat): isf_integral[T,S,mu!1](u!1(n)))")
                                                (("1"
                                                  (apply-extensionality
                                                   1
                                                   :hide?
                                                   t)
                                                  (("1"
                                                    (hide 2)
                                                    (("1"
                                                      (inst - "x!1")
                                                      (("1"
                                                        (rewrite
                                                         "isf_integral_add[T, S, contraction(mu!1, A!1)]")
                                                        (("1"
                                                          (case-replace
                                                           "isf_integral[T,S,contraction(mu!1,A!1)](((((reals@real_fun_ops[T].*)
                           (phi[T, S](complement(A!1)), w!1(x!1))))))=0")
                                                          (("1"
                                                            (hide
                                                             -1
                                                             -2)
                                                            (("1"
                                                              (case-replace
                                                               "isf_integral[T, S, mu!1](u!1(x!1))=isf_integral[T, S, mu!1](((reals@real_fun_ops[T].*)
                          (phi[T, S](A!1), u!1(x!1))))")
                                                              (("1"
                                                                (hide
                                                                 -1)
                                                                (("1"
                                                                  (lemma
                                                                   "contraction_isf_integral"
                                                                   ("mu"
                                                                    "mu!1"
                                                                    "A"
                                                                    "A!1"
                                                                    "f"
                                                                    "u!1(x!1)"))
                                                                  (("1"
                                                                    (case-replace
                                                                     "(((reals@real_fun_ops[T].*)(phi[T, S](A!1), u!1(x!1))))=u!1(x!1)")
                                                                    (("1"
                                                                      (typepred
                                                                       "u!1(x!1)")
                                                                      (("1"
                                                                        (lemma
                                                                         "contraction_isf"
                                                                         ("mu"
                                                                          "mu!1"
                                                                          "A"
                                                                          "A!1"
                                                                          "f"
                                                                          "u!1(x!1)"))
                                                                        (("1"
                                                                          (replace
                                                                           -4
                                                                           -1)
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide-all-but
                                                                       (1
                                                                        -6))
                                                                      (("2"
                                                                        (apply-extensionality
                                                                         :hide?
                                                                         t)
                                                                        (("2"
                                                                          (expand
                                                                           "*")
                                                                          (("2"
                                                                            (expand
                                                                             "pointwise_convergence?")
                                                                            (("2"
                                                                              (inst
                                                                               -
                                                                               "x!2")
                                                                              (("2"
                                                                                (expand
                                                                                 "phi")
                                                                                (("2"
                                                                                  (expand
                                                                                   "member")
                                                                                  (("2"
                                                                                    (case-replace
                                                                                     "A!1(x!2)")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (typepred
                                                                                         "u!1(x!1)")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "nn_isf?")
                                                                                          (("2"
                                                                                            (inst
                                                                                             -
                                                                                             "x!2")
                                                                                            (("2"
                                                                                              (expand
                                                                                               ">="
                                                                                               -2)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "<="
                                                                                                 -2)
                                                                                                (("2"
                                                                                                  (hide
                                                                                                   -1)
                                                                                                  (("2"
                                                                                                    (rewrite
                                                                                                     "metric_convergence_def")
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "metric_converges_to")
                                                                                                      (("2"
                                                                                                        (inst
                                                                                                         -
                                                                                                         "u!1(x!1)(x!2)")
                                                                                                        (("1"
                                                                                                          (skosimp)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "ball")
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "member")
                                                                                                              (("1"
                                                                                                                (inst
                                                                                                                 -
                                                                                                                 "max(n!1,x!1)")
                                                                                                                (("1"
                                                                                                                  (split
                                                                                                                   -2)
                                                                                                                  (("1"
                                                                                                                    (typepred
                                                                                                                     "u!1(max(n!1, x!1))")
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "nn_isf?")
                                                                                                                      (("1"
                                                                                                                        (inst
                                                                                                                         -
                                                                                                                         "x!2")
                                                                                                                        (("1"
                                                                                                                          (case-replace
                                                                                                                           "abs(-1 * u!1(max(n!1, x!1))(x!2))=u!1(max(n!1, x!1))(x!2)")
                                                                                                                          (("1"
                                                                                                                            (hide
                                                                                                                             -1
                                                                                                                             -2)
                                                                                                                            (("1"
                                                                                                                              (typepred
                                                                                                                               "u!1")
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "increasing_nn_isf?")
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "pointwise_increasing?")
                                                                                                                                  (("1"
                                                                                                                                    (inst
                                                                                                                                     -
                                                                                                                                     "x!2")
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "increasing?")
                                                                                                                                      (("1"
                                                                                                                                        (inst
                                                                                                                                         -
                                                                                                                                         "x!1"
                                                                                                                                         "max(n!1, x!1)")
                                                                                                                                        (("1"
                                                                                                                                          (split
                                                                                                                                           -1)
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (hide-all-but
                                                                                                                                             1)
                                                                                                                                            (("2"
                                                                                                                                              (grind)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (hide-all-but
                                                                                                                             (-2
                                                                                                                              1))
                                                                                                                            (("2"
                                                                                                                              (grind)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (hide-all-but
                                                                                                                     1)
                                                                                                                    (("2"
                                                                                                                      (grind)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide
                                                                     2)
                                                                    (("2"
                                                                      (typepred
                                                                       "u!1(x!1)")
                                                                      (("2"
                                                                        (expand
                                                                         "isf?")
                                                                        (("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (expand
                                                                               "mu_fin?")
                                                                              (("2"
                                                                                (expand
                                                                                 "contraction")
                                                                                (("2"
                                                                                  (lemma
                                                                                   "m_monotone[T,S,mu!1]"
                                                                                   ("a"
                                                                                    "intersection(A!1, nonzero_set?[T,S,mu!1](u!1(x!1)))"
                                                                                    "b"
                                                                                    "nonzero_set?[T,S,mu!1](u!1(x!1))"))
                                                                                  (("1"
                                                                                    (split
                                                                                     -1)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "x_le")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "nonzero_set?")
                                                                                              (("1"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide-all-but
                                                                                       1)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "subset?")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "intersection")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "nonzero_set?")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "member")
                                                                                              (("2"
                                                                                                (skosimp)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (lemma
                                                                                     "nonzero_measurable[T, S, mu!1]"
                                                                                     ("g"
                                                                                      "u!1(x!1)"))
                                                                                    (("2"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("3"
                                                                                    (hide
                                                                                     2)
                                                                                    (("3"
                                                                                      (rewrite
                                                                                       "measurable_intersection")
                                                                                      (("3"
                                                                                        (lemma
                                                                                         "nonzero_measurable[T, S, mu!1]"
                                                                                         ("g"
                                                                                          "u!1(x!1)"))
                                                                                        (("3"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide
                                                                 2)
                                                                (("2"
                                                                  (case-replace
                                                                   "(((reals@real_fun_ops[T].*)(phi[T, S](A!1), u!1(x!1))))=u!1(x!1)")
                                                                  (("2"
                                                                    (hide
                                                                     2
                                                                     -6)
                                                                    (("2"
                                                                      (expand
                                                                       "*")
                                                                      (("2"
                                                                        (apply-extensionality
                                                                         :hide?
                                                                         t)
                                                                        (("2"
                                                                          (expand
                                                                           "phi")
                                                                          (("2"
                                                                            (expand
                                                                             "member")
                                                                            (("2"
                                                                              (expand
                                                                               "pointwise_convergence?")
                                                                              (("2"
                                                                                (hide
                                                                                 -1
                                                                                 -2)
                                                                                (("2"
                                                                                  (inst
                                                                                   -3
                                                                                   "x!2")
                                                                                  (("2"
                                                                                    (rewrite
                                                                                     "metric_convergence_def")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "metric_converges_to")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "member")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "ball")
                                                                                          (("2"
                                                                                            (case-replace
                                                                                             "A!1(x!2)")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -3
                                                                                                 "u!1(x!1)(x!2)")
                                                                                                (("1"
                                                                                                  (skosimp)
                                                                                                  (("1"
                                                                                                    (typepred
                                                                                                     "u!1")
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "increasing_nn_isf?")
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "pointwise_increasing?")
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           -
                                                                                                           "x!2")
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "increasing?")
                                                                                                            (("1"
                                                                                                              (inst
                                                                                                               -
                                                                                                               "x!1"
                                                                                                               "max(n!1,x!1)")
                                                                                                              (("1"
                                                                                                                (split
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (inst
                                                                                                                   -4
                                                                                                                   "max(n!1, x!1)")
                                                                                                                  (("1"
                                                                                                                    (split
                                                                                                                     -4)
                                                                                                                    (("1"
                                                                                                                      (case-replace
                                                                                                                       "abs(-1 * u!1(max(n!1, x!1))(x!2))=u!1(max(n!1, x!1))(x!2)")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (hide-all-but
                                                                                                                         1)
                                                                                                                        (("2"
                                                                                                                          (typepred
                                                                                                                           "u!1(max(n!1, x!1))")
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             "nn_isf?")
                                                                                                                            (("2"
                                                                                                                              (inst
                                                                                                                               -
                                                                                                                               "x!2")
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 "abs")
                                                                                                                                (("2"
                                                                                                                                  (assert)
                                                                                                                                  (("2"
                                                                                                                                    (hide
                                                                                                                                     -1)
                                                                                                                                    (("2"
                                                                                                                                      (grind)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (hide-all-but
                                                                                                                       1)
                                                                                                                      (("2"
                                                                                                                        (grind)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (hide-all-but
                                                                                                                   1)
                                                                                                                  (("2"
                                                                                                                    (grind)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (typepred
                                                                                                     "u!1(x!1)")
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "nn_isf?")
                                                                                                      (("2"
                                                                                                        (inst
                                                                                                         -
                                                                                                         "x!2")
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           ">="
                                                                                                           -2)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "<="
                                                                                                             -2)
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (hide
                                                                 2)
                                                                (("3"
                                                                  (typepred
                                                                   "u!1(x!1)")
                                                                  (("3"
                                                                    (lemma
                                                                     "isf_times_simple_is_isf[T, S, mu!1]"
                                                                     ("i"
                                                                      "u!1(x!1)"
                                                                      "h"
                                                                      "phi[T, S](A!1)"))
                                                                    (("1"
                                                                      (case-replace
                                                                       "(((reals@real_fun_ops[T].*)(phi[T, S](A!1), u!1(x!1))))=*[T](u!1(x!1), phi[T, S](A!1))")
                                                                      (("1"
                                                                        (apply-extensionality
                                                                         1
                                                                         :hide?
                                                                         t)
                                                                        (("1"
                                                                          (expand
                                                                           "*")
                                                                          (("1"
                                                                            (expand
                                                                             "phi")
                                                                            (("1"
                                                                              (expand
                                                                               "member")
                                                                              (("1"
                                                                                (case-replace
                                                                                 "A!1(x!2)")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (rewrite
                                                                       "phi_is_simple")
                                                                      (("2"
                                                                        (typepred
                                                                         "A!1")
                                                                        (("2"
                                                                          (expand
                                                                           "measurable_set?")
                                                                          (("2"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide 2)
                                                            (("2"
                                                              (expand
                                                               "isf_integral")
                                                              (("2"
                                                                (expand
                                                                 "mu")
                                                                (("2"
                                                                  (expand
                                                                   "contraction")
                                                                  (("2"
                                                                    (expand
                                                                     "intersection")
                                                                    (("2"
                                                                      (expand
                                                                       "complement")
                                                                      (("2"
                                                                        (expand
                                                                         "phi")
                                                                        (("2"
                                                                          (expand
                                                                           "member")
                                                                          (("2"
                                                                            (case-replace
                                                                             "(LAMBDA (c:real):
             IF c = 0 THEN 0
             ELSE c *
                   mu!1({x: T |
                          A!1(x) AND
                           inverse_image[T, real]
                               ((((((reals@real_fun_ops[T].*)
                                    (LAMBDA
                                     (x_1: T):
                                     IF NOT A!1(x_1) THEN 1 ELSE 0 ENDIF,
                                     w!1(x!1)))))),
                                singleton[real](c))
                               (x)})`2
             ENDIF)=(LAMBDA (c:real):0)")
                                                                            (("1"
                                                                              (hide
                                                                               -1)
                                                                              (("1"
                                                                                (rewrite
                                                                                 "sigma_zero"
                                                                                 1)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide-all-but
                                                                               1)
                                                                              (("2"
                                                                                (apply-extensionality
                                                                                 :hide?
                                                                                 t)
                                                                                (("1"
                                                                                  (case-replace
                                                                                   "x!2 = 0")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (case-replace
                                                                                       "{x: T |
              A!1(x) AND
               inverse_image[T, real]
                   ((((((reals@real_fun_ops[T].*)
                            (LAMBDA (x_1: T):
                               IF NOT A!1(x_1) THEN 1 ELSE 0 ENDIF,
                             w!1(x!1)))))),
                    singleton[real](x!2))
                   (x)}=emptyset[T]")
                                                                                      (("1"
                                                                                        (typepred
                                                                                         "mu!1")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "measure?")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "measure_empty?")
                                                                                            (("1"
                                                                                              (flatten)
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide
                                                                                         3)
                                                                                        (("2"
                                                                                          (apply-extensionality
                                                                                           :hide?
                                                                                           t)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "emptyset")
                                                                                            (("2"
                                                                                              (flatten)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "inverse_image")
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "*")
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "member")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "singleton")
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (skosimp)
                                                                                  (("2"
                                                                                    (case-replace
                                                                                     "{x: T |
           A!1(x) AND
            inverse_image[T, real]
                (((((((reals@real_fun_ops[T].*)
                          (LAMBDA (x_1: T):
                             IF NOT A!1(x_1) THEN 1 ELSE 0 ENDIF,
                           w!1(x!1))))))),
                 singleton[real](c!1))
                (x)}=emptyset[T]")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide
                                                                                       3)
                                                                                      (("2"
                                                                                        (apply-extensionality
                                                                                         :hide?
                                                                                         t)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "emptyset")
                                                                                          (("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "inverse_image")
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "member")
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "*")
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "singleton")
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("3"
                                                                              (hide
                                                                               2)
                                                                              (("3"
                                                                                (hide-all-but
                                                                                 1)
                                                                                (("3"
                                                                                  (skosimp)
                                                                                  (("3"
                                                                                    (case-replace
                                                                                     "{x: T |
           A!1(x) AND
            inverse_image[T, real]
                (((((((reals@real_fun_ops[T].*)
                          (LAMBDA (x_1: T):
                             IF NOT A!1(x_1) THEN 1 ELSE 0 ENDIF,
                           w!1(x!1))))))),
                 singleton[real](c!1))
                (x)}=emptyset[T]")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide
                                                                                       3)
                                                                                      (("2"
                                                                                        (apply-extensionality
                                                                                         :hide?
                                                                                         t)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "emptyset")
                                                                                          (("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "inverse_image")
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "member")
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "*")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "singleton")
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide 2)
                                                          (("2"
                                                            (hide -1)
                                                            (("2"
                                                              (expand
                                                               "isf?")
                                                              (("2"
                                                                (split)
                                                                (("1"
                                                                  (typepred
                                                                   "w!1")
                                                                  (("1"
                                                                    (expand
                                                                     "increasing_nn_simple?")
                                                                    (("1"
                                                                      (inst
                                                                       -
                                                                       "x!1")
                                                                      (("1"
                                                                        (expand
                                                                         "nn_simple?")
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (rewrite
                                                                             "simple_times[T,S]"
                                                                             1)
                                                                            (("1"
                                                                              (hide-all-but
                                                                               1)
                                                                              (("1"
                                                                                (rewrite
                                                                                 "phi_is_simple")
                                                                                (("1"
                                                                                  (lemma
                                                                                   "measurable_complement[T,S]"
                                                                                   ("a"
                                                                                    "A!1"))
                                                                                  (("1"
                                                                                    (expand
                                                                                     "measurable_set?")
                                                                                    (("1"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   1)
                                                                  (("2"
                                                                    (expand
                                                                     "nonzero_set?")
                                                                    (("2"
                                                                      (expand
                                                                       "*")
                                                                      (("2"
                                                                        (expand
                                                                         "complement")
                                                                        (("2"
                                                                          (expand
                                                                           "mu_fin?")
                                                                          (("2"
                                                                            (expand
                                                                             "contraction")
                                                                            (("2"
                                                                              (expand
                                                                               "intersection")
                                                                              (("2"
                                                                                (expand
                                                                                 "phi")
                                                                                (("2"
                                                                                  (expand
                                                                                   "member")
                                                                                  (("2"
                                                                                    (case-replace
                                                                                     "{x_1: T |
             A!1(x_1) AND
              IF NOT A!1(x_1) THEN 1 ELSE 0 ENDIF * w!1(x!1)(x_1) /= 0}=emptyset[T]")
                                                                                    (("1"
                                                                                      (typepred
                                                                                       "mu!1")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "measure?")
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "measure_empty?")
                                                                                            (("1"
                                                                                              (replace
                                                                                               -1)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide
                                                                                       2)
                                                                                      (("2"
                                                                                        (apply-extensionality
                                                                                         :hide?
                                                                                         t)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "emptyset")
                                                                                          (("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (hide -1 2)
                                                          (("3"
                                                            (typepred
                                                             "u!1(x!1)")
                                                            (("3"
                                                              (lemma
                                                               "isf_times_simple_is_isf[T, S, contraction(mu!1, A!1)]"
                                                               ("i"
                                                                "u!1(x!1)"
                                                                "h"
                                                                "phi[T, S](A!1)"))
                                                              (("1"
                                                                (case-replace
                                                                 "(*[T](u!1(x!1), phi[T, S](A!1)))=(((((reals@real_fun_ops[T].*)(phi[T, S](A!1), u!1(x!1))))))")
                                                                (("1"
                                                                  (apply-extensionality
                                                                   1
                                                                   :hide?
                                                                   t)
                                                                  (("1"
                                                                    (expand
                                                                     "*")
                                                                    (("1"
                                                                      (expand
                                                                       "phi")
                                                                      (("1"
                                                                        (expand
                                                                         "member")
                                                                        (("1"
                                                                          (case-replace
                                                                           "A!1(x!2)")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide
                                                                 2)
                                                                (("2"
                                                                  (expand
                                                                   "isf?")
                                                                  (("2"
                                                                    (expand
                                                                     "mu_fin?")
                                                                    (("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (expand
                                                                           "contraction")
                                                                          (("2"
                                                                            (lemma
                                                                             "m_monotone[T,S,mu!1]"
                                                                             ("a"
                                                                              "intersection(A!1, nonzero_set?[T,S,mu!1](u!1(x!1)))"
                                                                              "b"
                                                                              "nonzero_set?[T,S,mu!1](u!1(x!1))"))
                                                                            (("1"
                                                                              (split
                                                                               -1)
                                                                              (("1"
                                                                                (expand
                                                                                 "x_le")
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "nonzero_set?")
                                                                                      (("1"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide-all-but
                                                                                 1)
                                                                                (("2"
                                                                                  (expand
                                                                                   "subset?")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "intersection")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "member")
                                                                                      (("2"
                                                                                        (skosimp)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (lemma
                                                                               "nonzero_measurable[T,S,mu!1]"
                                                                               ("g"
                                                                                "u!1(x!1)"))
                                                                              (("2"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("3"
                                                                              (rewrite
                                                                               "measurable_intersection[T,S]"
                                                                               1)
                                                                              (("3"
                                                                                (lemma
                                                                                 "nonzero_measurable[T,S,mu!1]"
                                                                                 ("g"
                                                                                  "u!1(x!1)"))
                                                                                (("3"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (rewrite
                                                                 "phi_is_simple[T, S]")
                                                                (("3"
                                                                  (typepred
                                                                   "A!1")
                                                                  (("3"
                                                                    (expand
                                                                     "measurable_set?")
                                                                    (("3"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide 2)
                                                (("2"
                                                  (skosimp)
                                                  (("2"
                                                    (rewrite
                                                     "isf_add[T, S, contraction(mu!1, A!1)]"
                                                     1)
                                                    (("1"
                                                      (hide 2)
                                                      (("1"
                                                        (expand "isf?")
                                                        (("1"
                                                          (split)
                                                          (("1"
                                                            (rewrite
                                                             "simple_times"
                                                             +)
                                                            (("1"
                                                              (typepred
                                                               "w!1")
                                                              (("1"
                                                                (expand
                                                                 "increasing_nn_simple?")
                                                                (("1"
                                                                  (inst
                                                                   -
                                                                   "n!1")
                                                                  (("1"
                                                                    (expand
                                                                     "nn_simple?")
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (rewrite
                                                               "phi_is_simple"
                                                               1)
                                                              (("2"
                                                                (lemma
                                                                 "measurable_complement[T,S]"
                                                                 ("a"
                                                                  "A!1"))
                                                                (("2"
                                                                  (expand
                                                                   "measurable_set?")
                                                                  (("2"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (expand
                                                             "nonzero_set?")
                                                            (("2"
                                                              (expand
                                                               "/=")
                                                              (("2"
                                                                (expand
                                                                 "mu_fin?")
                                                                (("2"
                                                                  (expand
                                                                   "contraction")
                                                                  (("2"
                                                                    (expand
                                                                     "intersection")
                                                                    (("2"
                                                                      (expand
                                                                       "*")
                                                                      (("2"
                                                                        (expand
                                                                         "complement")
                                                                        (("2"
                                                                          (expand
                                                                           "phi")
                                                                          (("2"
                                                                            (expand
                                                                             "member")
                                                                            (("2"
                                                                              (case-replace
                                                                               "{x_1: T |
             A!1(x_1) AND
              NOT (IF NOT A!1(x_1) THEN 1 ELSE 0 ENDIF * w!1(n!1)(x_1) =
                    0)}=emptyset[T]")
                                                                              (("1"
                                                                                (typepred
                                                                                 "mu!1")
                                                                                (("1"
                                                                                  (expand
                                                                                   "measure?")
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "measure_empty?")
                                                                                      (("1"
                                                                                        (replace
                                                                                         -1)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide-all-but
                                                                                 1)
                                                                                (("2"
                                                                                  (apply-extensionality
                                                                                   :hide?
                                                                                   t)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "emptyset")
                                                                                    (("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide 2)
                                                      (("2"
                                                        (lemma
                                                         "isf_times_simple_is_isf[T, S, contraction(mu!1, A!1)]"
                                                         ("i"
                                                          "u!1(n!1)"
                                                          "h"
                                                          "phi[T, S](A!1)"))
                                                        (("1"
                                                          (case-replace
                                                           "(*[T](u!1(n!1), phi[T, S](A!1)))=(((((reals@real_fun_ops[T].*)(phi[T, S](A!1), u!1(n!1))))))")
                                                          (("1"
                                                            (apply-extensionality
                                                             1
                                                             :hide?
                                                             t)
                                                            (("1"
                                                              (expand
                                                               "*")
                                                              (("1"
                                                                (expand
                                                                 "phi")
                                                                (("1"
                                                                  (expand
                                                                   "member")
                                                                  (("1"
                                                                    (case-replace
                                                                     "A!1(x!1)")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide 2)
                                                          (("2"
                                                            (lemma
                                                             "contraction_isf"
                                                             ("mu"
                                                              "mu!1"
                                                              "A"
                                                              "A!1"
                                                              "f"
                                                              "u!1(n!1)"))
                                                            (("2"
                                                              (replace
                                                               -1)
                                                              (("2"
                                                                (hide
                                                                 -1)
                                                                (("2"
                                                                  (lemma
                                                                   "isf_times_simple_is_isf[T, S, mu!1]"
                                                                   ("i"
                                                                    "u!1(n!1)"
                                                                    "h"
                                                                    "phi[T, S](A!1)"))
                                                                  (("1"
                                                                    (case-replace
                                                                     "(((reals@real_fun_ops[T].*)(phi[T, S](A!1), u!1(n!1))))=(*[T](u!1(n!1), phi[T, S](A!1)))")
                                                                    (("1"
                                                                      (hide-all-but
                                                                       1)
                                                                      (("1"
                                                                        (apply-extensionality
                                                                         :hide?
                                                                         t)
                                                                        (("1"
                                                                          (expand
                                                                           "*")
                                                                          (("1"
                                                                            (expand
                                                                             "phi")
                                                                            (("1"
                                                                              (expand
                                                                               "member")
                                                                              (("1"
                                                                                (case-replace
                                                                                 "A!1(x!1)")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (rewrite
                                                                     "phi_is_simple"
                                                                     1)
                                                                    (("2"
                                                                      (typepred
                                                                       "A!1")
                                                                      (("2"
                                                                        (expand
                                                                         "measurable_set?")
                                                                        (("2"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (rewrite
                                                           "phi_is_simple"
                                                           1)
                                                          (("3"
                                                            (typepred
                                                             "A!1")
                                                            (("3"
                                                              (expand
                                                               "measurable_set?")
                                                              (("3"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (typepred "w!1")
                                    (("2"
                                      (typepred "u!1")
                                      (("2"
                                        (hide-all-but (-1 -2 1))
                                        (("2"
                                          (expand "increasing_nn_isf?")
                                          (("2"
                                            (expand
                                             "increasing_nn_simple?")
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (expand
                                                 "pointwise_increasing?")
                                                (("2"
                                                  (skosimp)
                                                  (("2"
                                                    (hide -2)
                                                    (("2"
                                                      (inst - "x!1")
                                                      (("2"
                                                        (inst - "x!1")
                                                        (("2"
                                                          (expand
                                                           "increasing?")
                                                          (("2"
                                                            (skolem
                                                             +
                                                             ("i!1"
                                                              "j!1"))
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (inst
                                                                 -
                                                                 "i!1"
                                                                 "j!1")
                                                                (("2"
                                                                  (inst
                                                                   -
                                                                   "i!1"
                                                                   "j!1")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (expand
                                                                       "+")
                                                                      (("2"
                                                                        (expand
                                                                         "*")
                                                                        (("2"
                                                                          (expand
                                                                           "complement")
                                                                          (("2"
                                                                            (expand
                                                                             "phi")
                                                                            (("2"
                                                                              (expand
                                                                               "member")
                                                                              (("2"
                                                                                (case-replace
                                                                                 "A!1(x!1)")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (expand "nn_isf?")
                                    (("3"
                                      (skosimp)
                                      (("3"
                                        (split)
                                        (("1"
                                          (rewrite
                                           "isf_add[T, S, contraction(mu!1, A!1)]"
                                           +)
                                          (("1"
                                            (hide 2)
                                            (("1"
                                              (expand "isf?")
                                              (("1"
                                                (split)
                                                (("1"
                                                  (rewrite
                                                   "simple_times")
                                                  (("1"
                                                    (typepred "w!1")
                                                    (("1"
                                                      (expand
                                                       "increasing_nn_simple?")
                                                      (("1"
                                                        (expand
                                                         "nn_simple?")
                                                        (("1"
                                                          (inst
                                                           -
                                                           "n!1")
                                                          (("1"
                                                            (flatten)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (rewrite
                                                     "phi_is_simple")
                                                    (("2"
                                                      (typepred "A!1")
                                                      (("2"
                                                        (lemma
                                                         "measurable_complement"
                                                         ("a" "A!1"))
                                                        (("2"
                                                          (expand
                                                           "measurable_set?")
                                                          (("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand
                                                   "nonzero_set?")
                                                  (("2"
                                                    (expand "*")
                                                    (("2"
                                                      (expand
                                                       "complement")
                                                      (("2"
                                                        (expand "phi")
                                                        (("2"
                                                          (expand
                                                           "member")
                                                          (("2"
                                                            (expand
                                                             "mu_fin?")
                                                            (("2"
                                                              (expand
                                                               "contraction")
                                                              (("2"
                                                                (expand
                                                                 "intersection")
                                                                (("2"
                                                                  (expand
                                                                   "member")
                                                                  (("2"
                                                                    (case-replace
                                                                     "{x_1: T |
             A!1(x_1) AND
              IF NOT A!1(x_1) THEN 1 ELSE 0 ENDIF * w!1(n!1)(x_1) /= 0}=emptyset[T]")
                                                                    (("1"
                                                                      (typepred
                                                                       "mu!1")
                                                                      (("1"
                                                                        (expand
                                                                         "measure?")
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (expand
                                                                             "measure_empty?")
                                                                            (("1"
                                                                              (replace
                                                                               -1)
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide-all-but
                                                                       1)
                                                                      (("2"
                                                                        (apply-extensionality
                                                                         :hide?
                                                                         t)
                                                                        (("2"
                                                                          (expand
                                                                           "emptyset")
                                                                          (("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 2)
                                            (("2"
                                              (typepred "u!1(n!1)")
                                              (("2"
                                                (lemma
                                                 "contraction_isf"
                                                 ("mu"
                                                  "mu!1"
                                                  "A"
                                                  "A!1"
                                                  "f"
                                                  "((reals@real_fun_ops[T].*)(phi[T, S](A!1), u!1(n!1)))"))
                                                (("1"
                                                  (replace -1)
                                                  (("1"
                                                    (hide -1)
                                                    (("1"
                                                      (case-replace
                                                       "(((reals@real_fun_ops[T].*)
                (phi[T, S](A!1),
                 ((reals@real_fun_ops[T].*)
                      (phi[T, S](A!1), u!1(n!1))))))=((reals@real_fun_ops[T].*)
                      (phi[T, S](A!1), u!1(n!1)))")
                                                      (("1"
                                                        (hide -1)
                                                        (("1"
                                                          (lemma
                                                           "isf_times_simple_is_isf[T, S, mu!1]"
                                                           ("i"
                                                            "u!1(n!1)"
                                                            "h"
                                                            "phi[T,S](A!1)"))
                                                          (("1"
                                                            (expand
                                                             "*")
                                                            (("1"
                                                              (expand
                                                               "phi")
                                                              (("1"
                                                                (expand
                                                                 "member")
                                                                (("1"
                                                                  (case-replace
                                                                   "(LAMBDA (x: T): u!1(n!1)(x) * IF A!1(x) THEN 1 ELSE 0 ENDIF)=(LAMBDA (x: T): IF A!1(x) THEN 1 ELSE 0 ENDIF * u!1(n!1)(x))")
                                                                  (("1"
                                                                    (apply-extensionality
                                                                     :hide?
                                                                     t)
                                                                    (("1"
                                                                      (case-replace
                                                                       "A!1(x!1)")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (rewrite
                                                             "phi_is_simple"
                                                             1)
                                                            (("2"
                                                              (typepred
                                                               "A!1")
                                                              (("2"
                                                                (expand
                                                                 "measurable_set?")
                                                                (("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         1)
                                                        (("2"
                                                          (apply-extensionality
                                                           :hide?
                                                           t)
                                                          (("2"
                                                            (expand
                                                             "*")
                                                            (("2"
                                                              (expand
                                                               "phi")
                                                              (("2"
                                                                (expand
                                                                 "member")
                                                                (("2"
                                                                  (case-replace
                                                                   "A!1(x!1)")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand "isf?")
                                                  (("2"
                                                    (hide 2)
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (rewrite
                                                         "simple_times")
                                                        (("2"
                                                          (rewrite
                                                           "phi_is_simple")
                                                          (("2"
                                                            (typepred
                                                             "A!1")
                                                            (("2"
                                                              (expand
                                                               "measurable_set?")
                                                              (("2"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (skosimp)
                                          (("2"
                                            (expand "+")
                                            (("2"
                                              (expand "*")
                                              (("2"
                                                (hide-all-but 1)
                                                (("2"
                                                  (expand "phi")
                                                  (("2"
                                                    (expand
                                                     "complement")
                                                    (("2"
                                                      (expand "member")
                                                      (("2"
                                                        (case-replace
                                                         "A!1(x!1)")
                                                        (("1"
                                                          (typepred
                                                           "u!1(n!1)")
                                                          (("1"
                                                            (expand
                                                             "nn_isf?")
                                                            (("1"
                                                              (inst
                                                               -
                                                               "x!1")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          (("2"
                                                            (typepred
                                                             "w!1")
                                                            (("2"
                                                              (expand
                                                               "increasing_nn_simple?")
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (expand
                                                                   "nn_simple?")
                                                                  (("2"
                                                                    (inst
                                                                     -
                                                                     "n!1")
                                                                    (("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (inst
                                                                         -
                                                                         "x!1")
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nn_integrable? const-decl "bool" nn_integral nil)
    (u!1 skolem-const-decl
     "increasing_nn_isf[T, S, contraction(mu!1, A!1)]"
     measure_contraction nil)
    (increasing_nn_isf nonempty-type-eq-decl nil nn_integral nil)
    (increasing_nn_isf? const-decl "bool" nn_integral nil)
    (sequence type-eq-decl nil sequences nil)
    (nn_isf nonempty-type-eq-decl nil nn_integral nil)
    (nn_isf? const-decl "bool" nn_integral nil)
    (isf nonempty-type-eq-decl nil isf nil)
    (contraction const-decl "measure_type" measure_contraction nil)
    (A!1 skolem-const-decl "measurable_set[T, S]" measure_contraction
     nil)
    (measurable_set nonempty-type-eq-decl nil measure_space_def nil)
    (measurable_set? const-decl "bool" measure_space_def nil)
    (phi const-decl "nat" measure_space nil)
    (set type-eq-decl nil sets nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (isf? const-decl "bool" isf nil)
    (mu!1 skolem-const-decl "measure_type[T, S]" measure_contraction
     nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     nil)
    (measure? const-decl "bool" generalized_measure_def nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (nnreal type-eq-decl nil real_types nil)
    (S formal-const-decl "sigma_algebra" measure_contraction nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (T formal-type-decl nil measure_contraction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (O const-decl "T3" function_props nil)
    (simple nonempty-type-eq-decl nil measure_space nil)
    (simple? const-decl "bool" measure_space nil)
    (contraction_isf formula-decl nil measure_contraction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (contraction_isf_integral formula-decl nil measure_contraction nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (isf_integral const-decl "real" isf nil)
    (convergent? const-decl "bool" topological_convergence topology)
    (pointwise_convergence? const-decl "bool" pointwise_convergence
     nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (convergence? const-decl "bool" topological_convergence topology)
    (member const-decl "bool" sets nil)
    (pointwise_increasing? const-decl "bool" pointwise_convergence nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (increasing? const-decl "bool" real_fun_preds reals)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nn_measurable nonempty-type-eq-decl nil measure_space nil)
    (nn_measurable? const-decl "bool" measure_space nil)
    (pointwise_converges_upto? const-decl "bool" pointwise_convergence
     nil)
    (measurable_complement application-judgement "measurable_set"
     measure_contraction nil)
    (w!1 skolem-const-decl "increasing_nn_simple[T, S]"
     measure_contraction nil)
    (increasing_nn_simple nonempty-type-eq-decl nil measure_space nil)
    (increasing_nn_simple? const-decl "bool" measure_space nil)
    (measurable_function nonempty-type-eq-decl nil measure_space_def
     nil)
    (measurable_function? const-decl "bool" measure_space_def nil)
    (complement const-decl "set" sets nil)
    (u!1 skolem-const-decl "increasing_nn_isf[T, S, mu!1]"
     measure_contraction nil)
    (+ const-decl "[T -> real]" real_fun_ops reals)
    (/= const-decl "boolean" notequal nil)
    (measurable_complement judgement-tcc nil measure_space_def nil)
    (simple_times judgement-tcc nil measure_space nil)
    (nn_simple? const-decl "bool" measure_space nil)
    (metric_converges_to const-decl "bool" metric_space_def
     metric_space)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (ball const-decl "set[T]" metric_space_def metric_space)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (x!2 skolem-const-decl "T" measure_contraction nil)
    (x!1 skolem-const-decl "nat" measure_contraction nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (metric_convergence_def formula-decl nil metric_space metric_space)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (mu_fin? const-decl "bool" measure_props nil)
    (m_monotone formula-decl nil measure_props nil)
    (intersection const-decl "set" sets nil)
    (nonzero_set? const-decl "set[T]" isf nil)
    (subset? const-decl "bool" sets nil)
    (x_le const-decl "bool" extended_nnreal extended_nnreal)
    (nonzero_measurable formula-decl nil isf nil)
    (measurable_intersection judgement-tcc nil measure_space_def nil)
    (x!2 skolem-const-decl "T" measure_contraction nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (phi_is_simple judgement-tcc nil measure_space nil)
    (isf_times_simple_is_isf judgement-tcc nil isf nil)
    (emptyset const-decl "set" sets nil)
    (subset_algebra_emptyset name-judgement "(S)" measure_contraction
     nil)
    (measurable_emptyset name-judgement "measurable_set"
     measure_contraction nil)
    (finite_emptyset name-judgement "finite_set" sigma_countable
     sigma_set)
    (finite_emptyset name-judgement "finite_set" countable_setofsets
     sets_aux)
    (finite_emptyset name-judgement "finite_set" countable_props
     sets_aux)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (measure_empty? const-decl "bool" generalized_measure_def nil)
    (singleton_is_compact application-judgement "compact"
     convergence_aux metric_space)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set[real]" integral_def analysis)
    (singleton_is_closed application-judgement
     "closed[real, (metric_induced_topology)]" convergence_aux
     metric_space)
    (sigma_zero formula-decl nil sigma_countable sigma_set)
    (is_countable const-decl "bool" countability sets_aux)
    (countable_set nonempty-type-eq-decl nil countability sets_aux)
    (image const-decl "set[R]" function_image nil)
    (fullset const-decl "set" sets nil)
    (inverse_image const-decl "set[D]" function_image nil)
    (singleton? const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (mu const-decl "nnreal" measure_props nil)
    (isf_integral_add formula-decl nil isf nil)
    (isf_add judgement-tcc nil isf nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nn_measurable_def formula-decl nil measure_space nil))
   shostak)
  (contraction_nn_integrable-2 "" 3758904370
   ("" (skosimp)
    (("" (split)
      (("1" (flatten)
        (("1" (expand "nn_integrable?")
          (("1" (skosimp)
            (("1"
              (inst + "lambda (n:nat): ((reals@real_fun_ops[T].*)
                                    (phi[T, S](A!1), u!1(n)))")
              (("1" (split)
                (("1" (expand "pointwise_convergence?")
                  (("1" (skosimp)
                    (("1" (inst - "x!1")
                      (("1" (expand "*")
                        (("1" (expand "phi")
                          (("1" (expand "member")
                            (("1" (case-replace "A!1(x!1)")
                              (("1" (assert) nil nil)
                               ("2"
                                (assert)
                                (("2"
                                  (hide -1 -2 1)
                                  (("2"
                                    (expand "convergence?")
                                    (("2"
                                      (skosimp)
                                      (("2"
                                        (inst + "0")
                                        (("2"
                                          (skosimp)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide -1)
                  (("2" (expand "convergent?")
                    (("2" (skosimp)
                      (("2" (inst + "l!1")
                        (("2" (expand "o ")
                          (("2"
                            (case-replace
                             "(LAMBDA (n: nat): isf_integral[T,S,contraction(mu!1,A!1)](u!1(n)))=(LAMBDA (n: nat):
                     isf_integral[T,S,mu!1]((((reals@real_fun_ops[T].*)
                                    (phi[T, S](A!1), u!1(n))))))")
                            (("1" (hide -1 2)
                              (("1"
                                (apply-extensionality :hide? t)
                                (("1"
                                  (rewrite "contraction_isf_integral")
                                  nil
                                  nil)
                                 ("2"
                                  (skosimp)
                                  (("2"
                                    (typepred "u!1(n!1)")
                                    (("2"
                                      (rewrite "contraction_isf")
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide -1 2)
                              (("2"
                                (skosimp)
                                (("2"
                                  (typepred "u!1(n!1)")
                                  (("2"
                                    (hide -2)
                                    (("2"
                                      (rewrite "contraction_isf")
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (typepred "u!1")
                (("2" (hide -2 -3)
                  (("2" (expand "increasing_nn_isf?")
                    (("2" (expand "pointwise_increasing?")
                      (("2" (skosimp)
                        (("2" (inst - "x!1")
                          (("2" (expand "increasing?")
                            (("2" (skolem + ("i!1" "j!1"))
                              (("2"
                                (inst - "i!1" "j!1")
                                (("2"
                                  (flatten)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "*")
                                      (("2"
                                        (expand "phi")
                                        (("2"
                                          (expand "member")
                                          (("2"
                                            (case-replace "A!1(x!1)")
                                            (("1" (assert) nil nil)
                                             ("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (expand "nn_isf?")
                (("3" (skosimp)
                  (("3" (typepred "u!1(n!1)")
                    (("3" (expand "nn_isf?")
                      (("3" (split)
                        (("1" (rewrite "contraction_isf") nil nil)
                         ("2" (skosimp)
                          (("2" (inst - "x!1")
                            (("2" (hide -1 -3 -4)
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (typepred "f!1")
          (("2" (lemma "nn_measurable_def" ("f" "f!1"))
            (("2" (expand "nn_measurable?")
              (("2" (flatten)
                (("2" (replace -2)
                  (("2" (replace -3)
                    (("2" (assert)
                      (("2" (skosimp)
                        (("2" (expand "pointwise_converges_upto?")
                          (("2" (flatten)
                            (("2" (expand "nn_integrable?")
                              (("2"
                                (skosimp)
                                (("2"
                                  (inst
                                   +
                                   "lambda (n:nat): ((reals@real_fun_ops[T].*)
                                  (phi[T, S](A!1), u!1(n)))+((reals@real_fun_ops[T].*)
                                  (phi[T, S](complement(A!1)), w!1(n)))")
                                  (("1"
                                    (split)
                                    (("1"
                                      (expand "pointwise_convergence?")
                                      (("1"
                                        (skosimp)
                                        (("1"
                                          (inst - "x!1")
                                          (("1"
                                            (inst -5 "x!1")
                                            (("1"
                                              (hide-all-but (-1 -5 1))
                                              (("1"
                                                (expand "+")
                                                (("1"
                                                  (expand "*")
                                                  (("1"
                                                    (expand "phi")
                                                    (("1"
                                                      (expand
                                                       "complement")
                                                      (("1"
                                                        (expand
                                                         "member")
                                                        (("1"
                                                          (case-replace
                                                           "A!1(x!1)")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "convergent?")
                                      (("2"
                                        (skosimp)
                                        (("2"
                                          (inst + "l!1")
                                          (("2"
                                            (expand "o ")
                                            (("2"
                                              (case
                                               "FORALL (n: nat):
        isf?[T, S, contraction(mu!1, A!1)]
            ((+[T])
                 ((((reals@real_fun_ops[T].*)
                        (phi[T, S](A!1), u!1(n)))),
                  ((((reals@real_fun_ops[T].*)
                         (phi[T, S](complement[T](A!1)), w!1(n)))))))")
                                              (("1"
                                                (case-replace
                                                 "(LAMBDA (n: nat):
                     isf_integral[T,S,contraction(mu!1,A!1)]((((reals@real_fun_ops[T].*)
                                    (phi[T, S](A!1), u!1(n))))
                                   +
                                   (((reals@real_fun_ops[T].*)
                                     (phi[T, S](complement(A!1)),
                                      w!1(n))))))=(LAMBDA (n: nat): isf_integral[T,S,mu!1](u!1(n)))")
                                                (("1"
                                                  (apply-extensionality
                                                   1
                                                   :hide?
                                                   t)
                                                  (("1"
                                                    (hide 2)
                                                    (("1"
                                                      (inst - "x!1")
                                                      (("1"
                                                        (rewrite
                                                         "isf_integral_add[T, S, contraction(mu!1, A!1)]")
                                                        (("1"
                                                          (case-replace
                                                           "isf_integral[T,S,contraction(mu!1,A!1)](((((reals@real_fun_ops[T].*)
                           (phi[T, S](complement(A!1)), w!1(x!1))))))=0")
                                                          (("1"
                                                            (hide
                                                             -1
                                                             -2)
                                                            (("1"
                                                              (case-replace
                                                               "isf_integral[T, S, mu!1](u!1(x!1))=isf_integral[T, S, mu!1](((reals@real_fun_ops[T].*)
                          (phi[T, S](A!1), u!1(x!1))))")
                                                              (("1"
                                                                (hide
                                                                 -1)
                                                                (("1"
                                                                  (lemma
                                                                   "contraction_isf_integral"
                                                                   ("mu"
                                                                    "mu!1"
                                                                    "A"
                                                                    "A!1"
                                                                    "f"
                                                                    "u!1(x!1)"))
                                                                  (("1"
                                                                    (case-replace
                                                                     "(((reals@real_fun_ops[T].*)(phi[T, S](A!1), u!1(x!1))))=u!1(x!1)")
                                                                    (("1"
                                                                      (typepred
                                                                       "u!1(x!1)")
                                                                      (("1"
                                                                        (lemma
                                                                         "contraction_isf"
                                                                         ("mu"
                                                                          "mu!1"
                                                                          "A"
                                                                          "A!1"
                                                                          "f"
                                                                          "u!1(x!1)"))
                                                                        (("1"
                                                                          (replace
                                                                           -4
                                                                           -1)
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide-all-but
                                                                       (1
                                                                        -6))
                                                                      (("2"
                                                                        (apply-extensionality
                                                                         :hide?
                                                                         t)
                                                                        (("2"
                                                                          (expand
                                                                           "*")
                                                                          (("2"
                                                                            (expand
                                                                             "pointwise_convergence?")
                                                                            (("2"
                                                                              (inst
                                                                               -
                                                                               "x!2")
                                                                              (("2"
                                                                                (expand
                                                                                 "phi")
                                                                                (("2"
                                                                                  (expand
                                                                                   "member")
                                                                                  (("2"
                                                                                    (case-replace
                                                                                     "A!1(x!2)")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (typepred
                                                                                         "u!1(x!1)")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "nn_isf?")
                                                                                          (("2"
                                                                                            (inst
                                                                                             -
                                                                                             "x!2")
                                                                                            (("2"
                                                                                              (expand
                                                                                               ">="
                                                                                               -2)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "<="
                                                                                                 -2)
                                                                                                (("2"
                                                                                                  (hide
                                                                                                   -1)
                                                                                                  (("2"
                                                                                                    (rewrite
                                                                                                     "metric_convergence_def")
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "metric_converges_to")
                                                                                                      (("2"
                                                                                                        (inst
                                                                                                         -
                                                                                                         "u!1(x!1)(x!2)")
                                                                                                        (("1"
                                                                                                          (skosimp)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "ball")
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "member")
                                                                                                              (("1"
                                                                                                                (inst
                                                                                                                 -
                                                                                                                 "max(n!1,x!1)")
                                                                                                                (("1"
                                                                                                                  (split
                                                                                                                   -2)
                                                                                                                  (("1"
                                                                                                                    (typepred
                                                                                                                     "u!1(max(n!1, x!1))")
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "nn_isf?")
                                                                                                                      (("1"
                                                                                                                        (inst
                                                                                                                         -
                                                                                                                         "x!2")
                                                                                                                        (("1"
                                                                                                                          (case-replace
                                                                                                                           "abs(-1 * u!1(max(n!1, x!1))(x!2))=u!1(max(n!1, x!1))(x!2)")
                                                                                                                          (("1"
                                                                                                                            (hide
                                                                                                                             -1
                                                                                                                             -2)
                                                                                                                            (("1"
                                                                                                                              (typepred
                                                                                                                               "u!1")
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "increasing_nn_isf?")
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "pointwise_increasing?")
                                                                                                                                  (("1"
                                                                                                                                    (inst
                                                                                                                                     -
                                                                                                                                     "x!2")
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "increasing?")
                                                                                                                                      (("1"
                                                                                                                                        (inst
                                                                                                                                         -
                                                                                                                                         "x!1"
                                                                                                                                         "max(n!1, x!1)")
                                                                                                                                        (("1"
                                                                                                                                          (split
                                                                                                                                           -1)
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (hide-all-but
                                                                                                                                             1)
                                                                                                                                            (("2"
                                                                                                                                              (grind)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (hide-all-but
                                                                                                                             (-2
                                                                                                                              1))
                                                                                                                            (("2"
                                                                                                                              (grind)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (hide-all-but
                                                                                                                     1)
                                                                                                                    (("2"
                                                                                                                      (grind)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide
                                                                     2)
                                                                    (("2"
                                                                      (typepred
                                                                       "u!1(x!1)")
                                                                      (("2"
                                                                        (expand
                                                                         "isf?")
                                                                        (("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (expand
                                                                               "mu_fin?")
                                                                              (("2"
                                                                                (expand
                                                                                 "contraction")
                                                                                (("2"
                                                                                  (lemma
                                                                                   "m_monotone[T,S,mu!1]"
                                                                                   ("a"
                                                                                    "intersection(A!1, nonzero_set?[T,S,mu!1](u!1(x!1)))"
                                                                                    "b"
                                                                                    "nonzero_set?[T,S,mu!1](u!1(x!1))"))
                                                                                  (("1"
                                                                                    (split
                                                                                     -1)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "x_le")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "nonzero_set?")
                                                                                              (("1"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide-all-but
                                                                                       1)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "subset?")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "intersection")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "nonzero_set?")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "member")
                                                                                              (("2"
                                                                                                (skosimp)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (lemma
                                                                                     "nonzero_measurable[T, S, mu!1]"
                                                                                     ("g"
                                                                                      "u!1(x!1)"))
                                                                                    (("2"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("3"
                                                                                    (hide
                                                                                     2)
                                                                                    (("3"
                                                                                      (rewrite
                                                                                       "measurable_intersection")
                                                                                      (("3"
                                                                                        (lemma
                                                                                         "nonzero_measurable[T, S, mu!1]"
                                                                                         ("g"
                                                                                          "u!1(x!1)"))
                                                                                        (("3"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide
                                                                 2)
                                                                (("2"
                                                                  (case-replace
                                                                   "(((reals@real_fun_ops[T].*)(phi[T, S](A!1), u!1(x!1))))=u!1(x!1)")
                                                                  (("2"
                                                                    (hide
                                                                     2
                                                                     -6)
                                                                    (("2"
                                                                      (expand
                                                                       "*")
                                                                      (("2"
                                                                        (apply-extensionality
                                                                         :hide?
                                                                         t)
                                                                        (("2"
                                                                          (expand
                                                                           "phi")
                                                                          (("2"
                                                                            (expand
                                                                             "member")
                                                                            (("2"
                                                                              (expand
                                                                               "pointwise_convergence?")
                                                                              (("2"
                                                                                (hide
                                                                                 -1
                                                                                 -2)
                                                                                (("2"
                                                                                  (inst
                                                                                   -3
                                                                                   "x!2")
                                                                                  (("2"
                                                                                    (rewrite
                                                                                     "metric_convergence_def")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "metric_converges_to")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "member")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "ball")
                                                                                          (("1"
                                                                                            (case-replace
                                                                                             "A!1(x!2)")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -3
                                                                                                 "u!1(x!1)(x!2)")
                                                                                                (("1"
                                                                                                  (skosimp)
                                                                                                  (("1"
                                                                                                    (typepred
                                                                                                     "u!1")
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "increasing_nn_isf?")
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "pointwise_increasing?")
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           -
                                                                                                           "x!2")
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "increasing?")
                                                                                                            (("1"
                                                                                                              (inst
                                                                                                               -
                                                                                                               "x!1"
                                                                                                               "max(n!1,x!1)")
                                                                                                              (("1"
                                                                                                                (split
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (inst
                                                                                                                   -4
                                                                                                                   "max(n!1, x!1)")
                                                                                                                  (("1"
                                                                                                                    (split
                                                                                                                     -4)
                                                                                                                    (("1"
                                                                                                                      (case-replace
                                                                                                                       "abs(-1 * u!1(max(n!1, x!1))(x!2))=u!1(max(n!1, x!1))(x!2)")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (hide-all-but
                                                                                                                         1)
                                                                                                                        (("2"
                                                                                                                          (typepred
                                                                                                                           "u!1(max(n!1, x!1))")
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             "nn_isf?")
                                                                                                                            (("2"
                                                                                                                              (inst
                                                                                                                               -
                                                                                                                               "x!2")
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 "abs")
                                                                                                                                (("2"
                                                                                                                                  (assert)
                                                                                                                                  (("2"
                                                                                                                                    (hide
                                                                                                                                     -1)
                                                                                                                                    (("2"
                                                                                                                                      (grind)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (hide-all-but
                                                                                                                       1)
                                                                                                                      (("2"
                                                                                                                        (grind)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (hide-all-but
                                                                                                                   1)
                                                                                                                  (("2"
                                                                                                                    (grind)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (typepred
                                                                                                     "u!1(x!1)")
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "nn_isf?")
                                                                                                      (("2"
                                                                                                        (inst
                                                                                                         -
                                                                                                         "x!2")
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           ">="
                                                                                                           -2)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "<="
                                                                                                             -2)
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide-all-but
                                                                                       1)
                                                                                      (("2"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (hide
                                                                 2)
                                                                (("3"
                                                                  (typepred
                                                                   "u!1(x!1)")
                                                                  (("3"
                                                                    (lemma
                                                                     "isf_times_simple_is_isf[T, S, mu!1]"
                                                                     ("i"
                                                                      "u!1(x!1)"
                                                                      "h"
                                                                      "phi[T, S](A!1)"))
                                                                    (("1"
                                                                      (case-replace
                                                                       "(((reals@real_fun_ops[T].*)(phi[T, S](A!1), u!1(x!1))))=*[T](u!1(x!1), phi[T, S](A!1))")
                                                                      (("1"
                                                                        (apply-extensionality
                                                                         1
                                                                         :hide?
                                                                         t)
                                                                        (("1"
                                                                          (expand
                                                                           "*")
                                                                          (("1"
                                                                            (expand
                                                                             "phi")
                                                                            (("1"
                                                                              (expand
                                                                               "member")
                                                                              (("1"
                                                                                (case-replace
                                                                                 "A!1(x!2)")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (rewrite
                                                                       "phi_is_simple")
                                                                      (("2"
                                                                        (typepred
                                                                         "A!1")
                                                                        (("2"
                                                                          (expand
                                                                           "measurable_set?")
                                                                          (("2"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide 2)
                                                            (("2"
                                                              (expand
                                                               "isf_integral")
                                                              (("2"
                                                                (expand
                                                                 "mu")
                                                                (("2"
                                                                  (expand
                                                                   "contraction")
                                                                  (("2"
                                                                    (expand
                                                                     "intersection")
                                                                    (("2"
                                                                      (expand
                                                                       "complement")
                                                                      (("2"
                                                                        (expand
                                                                         "phi")
                                                                        (("2"
                                                                          (expand
                                                                           "member")
                                                                          (("2"
                                                                            (case-replace
                                                                             "(LAMBDA (c:real):
             IF c = 0 THEN 0
             ELSE c *
                   mu!1({x: T |
                          A!1(x) AND
                           inverse_image[T, real]
                               ((((((reals@real_fun_ops[T].*)
                                    (LAMBDA
                                     (x_1: T):
                                     IF NOT A!1(x_1) THEN 1 ELSE 0 ENDIF,
                                     w!1(x!1)))))),
                                singleton[real](c))
                               (x)})`2
             ENDIF)=(LAMBDA (c:real):0)")
                                                                            (("1"
                                                                              (hide
                                                                               -1)
                                                                              (("1"
                                                                                (rewrite
                                                                                 "sigma_zero"
                                                                                 1)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide-all-but
                                                                               1)
                                                                              (("2"
                                                                                (apply-extensionality
                                                                                 :hide?
                                                                                 t)
                                                                                (("1"
                                                                                  (case-replace
                                                                                   "x!2 = 0")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (case-replace
                                                                                       "{x: T |
              A!1(x) AND
               inverse_image[T, real]
                   ((((((reals@real_fun_ops[T].*)
                            (LAMBDA (x_1: T):
                               IF NOT A!1(x_1) THEN 1 ELSE 0 ENDIF,
                             w!1(x!1)))))),
                    singleton[real](x!2))
                   (x)}=emptyset[T]")
                                                                                      (("1"
                                                                                        (typepred
                                                                                         "mu!1")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "measure?")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "measure_empty?")
                                                                                            (("1"
                                                                                              (flatten)
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide
                                                                                         3)
                                                                                        (("2"
                                                                                          (apply-extensionality
                                                                                           :hide?
                                                                                           t)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "emptyset")
                                                                                            (("2"
                                                                                              (flatten)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "inverse_image")
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "*")
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "member")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "singleton")
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (skosimp)
                                                                                  (("2"
                                                                                    (case-replace
                                                                                     "{x: T |
           A!1(x) AND
            inverse_image[T, real]
                (((((((reals@real_fun_ops[T].*)
                          (LAMBDA (x_1: T):
                             IF NOT A!1(x_1) THEN 1 ELSE 0 ENDIF,
                           w!1(x!1))))))),
                 singleton[real](c!1))
                (x)}=emptyset[T]")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide
                                                                                       3)
                                                                                      (("2"
                                                                                        (apply-extensionality
                                                                                         :hide?
                                                                                         t)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "emptyset")
                                                                                          (("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "inverse_image")
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "member")
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "*")
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "singleton")
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("3"
                                                                              (hide
                                                                               2)
                                                                              (("3"
                                                                                (hide-all-but
                                                                                 1)
                                                                                (("3"
                                                                                  (skosimp)
                                                                                  (("3"
                                                                                    (case-replace
                                                                                     "{x: T |
           A!1(x) AND
            inverse_image[T, real]
                (((((((reals@real_fun_ops[T].*)
                          (LAMBDA (x_1: T):
                             IF NOT A!1(x_1) THEN 1 ELSE 0 ENDIF,
                           w!1(x!1))))))),
                 singleton[real](c!1))
                (x)}=emptyset[T]")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide
                                                                                       3)
                                                                                      (("2"
                                                                                        (apply-extensionality
                                                                                         :hide?
                                                                                         t)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "emptyset")
                                                                                          (("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "inverse_image")
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "member")
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "*")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "singleton")
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide 2)
                                                          (("2"
                                                            (hide -1)
                                                            (("2"
                                                              (expand
                                                               "isf?")
                                                              (("2"
                                                                (split)
                                                                (("1"
                                                                  (typepred
                                                                   "w!1")
                                                                  (("1"
                                                                    (expand
                                                                     "increasing_nn_simple?")
                                                                    (("1"
                                                                      (inst
                                                                       -
                                                                       "x!1")
                                                                      (("1"
                                                                        (expand
                                                                         "nn_simple?")
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (rewrite
                                                                             "simple_times[T,S]"
                                                                             1)
                                                                            (("1"
                                                                              (hide-all-but
                                                                               1)
                                                                              (("1"
                                                                                (rewrite
                                                                                 "phi_is_simple")
                                                                                (("1"
                                                                                  (lemma
                                                                                   "measurable_complement[T,S]"
                                                                                   ("a"
                                                                                    "A!1"))
                                                                                  (("1"
                                                                                    (expand
                                                                                     "measurable_set?")
                                                                                    (("1"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   1)
                                                                  (("2"
                                                                    (expand
                                                                     "nonzero_set?")
                                                                    (("2"
                                                                      (expand
                                                                       "*")
                                                                      (("2"
                                                                        (expand
                                                                         "complement")
                                                                        (("2"
                                                                          (expand
                                                                           "mu_fin?")
                                                                          (("2"
                                                                            (expand
                                                                             "contraction")
                                                                            (("2"
                                                                              (expand
                                                                               "intersection")
                                                                              (("2"
                                                                                (expand
                                                                                 "phi")
                                                                                (("2"
                                                                                  (expand
                                                                                   "member")
                                                                                  (("2"
                                                                                    (case-replace
                                                                                     "{x_1: T |
             A!1(x_1) AND
              IF NOT A!1(x_1) THEN 1 ELSE 0 ENDIF * w!1(x!1)(x_1) /= 0}=emptyset[T]")
                                                                                    (("1"
                                                                                      (typepred
                                                                                       "mu!1")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "measure?")
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "measure_empty?")
                                                                                            (("1"
                                                                                              (replace
                                                                                               -1)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide
                                                                                       2)
                                                                                      (("2"
                                                                                        (apply-extensionality
                                                                                         :hide?
                                                                                         t)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "emptyset")
                                                                                          (("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (hide -1 2)
                                                          (("3"
                                                            (typepred
                                                             "u!1(x!1)")
                                                            (("3"
                                                              (lemma
                                                               "isf_times_simple_is_isf[T, S, contraction(mu!1, A!1)]"
                                                               ("i"
                                                                "u!1(x!1)"
                                                                "h"
                                                                "phi[T, S](A!1)"))
                                                              (("1"
                                                                (case-replace
                                                                 "(*[T](u!1(x!1), phi[T, S](A!1)))=(((((reals@real_fun_ops[T].*)(phi[T, S](A!1), u!1(x!1))))))")
                                                                (("1"
                                                                  (apply-extensionality
                                                                   1
                                                                   :hide?
                                                                   t)
                                                                  (("1"
                                                                    (expand
                                                                     "*")
                                                                    (("1"
                                                                      (expand
                                                                       "phi")
                                                                      (("1"
                                                                        (expand
                                                                         "member")
                                                                        (("1"
                                                                          (case-replace
                                                                           "A!1(x!2)")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide
                                                                 2)
                                                                (("2"
                                                                  (expand
                                                                   "isf?")
                                                                  (("2"
                                                                    (expand
                                                                     "mu_fin?")
                                                                    (("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (expand
                                                                           "contraction")
                                                                          (("2"
                                                                            (lemma
                                                                             "m_monotone[T,S,mu!1]"
                                                                             ("a"
                                                                              "intersection(A!1, nonzero_set?[T,S,mu!1](u!1(x!1)))"
                                                                              "b"
                                                                              "nonzero_set?[T,S,mu!1](u!1(x!1))"))
                                                                            (("1"
                                                                              (split
                                                                               -1)
                                                                              (("1"
                                                                                (expand
                                                                                 "x_le")
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "nonzero_set?")
                                                                                      (("1"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide-all-but
                                                                                 1)
                                                                                (("2"
                                                                                  (expand
                                                                                   "subset?")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "intersection")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "member")
                                                                                      (("2"
                                                                                        (skosimp)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (lemma
                                                                               "nonzero_measurable[T,S,mu!1]"
                                                                               ("g"
                                                                                "u!1(x!1)"))
                                                                              (("2"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("3"
                                                                              (rewrite
                                                                               "measurable_intersection[T,S]"
                                                                               1)
                                                                              (("3"
                                                                                (lemma
                                                                                 "nonzero_measurable[T,S,mu!1]"
                                                                                 ("g"
                                                                                  "u!1(x!1)"))
                                                                                (("3"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (rewrite
                                                                 "phi_is_simple[T, S]")
                                                                (("3"
                                                                  (typepred
                                                                   "A!1")
                                                                  (("3"
                                                                    (expand
                                                                     "measurable_set?")
                                                                    (("3"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide 2)
                                                (("2"
                                                  (skosimp)
                                                  (("2"
                                                    (rewrite
                                                     "isf_add[T, S, contraction(mu!1, A!1)]"
                                                     1)
                                                    (("1"
                                                      (hide 2)
                                                      (("1"
                                                        (expand "isf?")
                                                        (("1"
                                                          (split)
                                                          (("1"
                                                            (rewrite
                                                             "simple_times"
                                                             +)
                                                            (("1"
                                                              (typepred
                                                               "w!1")
                                                              (("1"
                                                                (expand
                                                                 "increasing_nn_simple?")
                                                                (("1"
                                                                  (inst
                                                                   -
                                                                   "n!1")
                                                                  (("1"
                                                                    (expand
                                                                     "nn_simple?")
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (rewrite
                                                               "phi_is_simple"
                                                               1)
                                                              (("2"
                                                                (lemma
                                                                 "measurable_complement[T,S]"
                                                                 ("a"
                                                                  "A!1"))
                                                                (("2"
                                                                  (expand
                                                                   "measurable_set?")
                                                                  (("2"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (expand
                                                             "nonzero_set?")
                                                            (("2"
                                                              (expand
                                                               "/=")
                                                              (("2"
                                                                (expand
                                                                 "mu_fin?")
                                                                (("2"
                                                                  (expand
                                                                   "contraction")
                                                                  (("2"
                                                                    (expand
                                                                     "intersection")
                                                                    (("2"
                                                                      (expand
                                                                       "*")
                                                                      (("2"
                                                                        (expand
                                                                         "complement")
                                                                        (("2"
                                                                          (expand
                                                                           "phi")
                                                                          (("2"
                                                                            (expand
                                                                             "member")
                                                                            (("2"
                                                                              (case-replace
                                                                               "{x_1: T |
             A!1(x_1) AND
              NOT (IF NOT A!1(x_1) THEN 1 ELSE 0 ENDIF * w!1(n!1)(x_1) =
                    0)}=emptyset[T]")
                                                                              (("1"
                                                                                (typepred
                                                                                 "mu!1")
                                                                                (("1"
                                                                                  (expand
                                                                                   "measure?")
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "measure_empty?")
                                                                                      (("1"
                                                                                        (replace
                                                                                         -1)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide-all-but
                                                                                 1)
                                                                                (("2"
                                                                                  (apply-extensionality
                                                                                   :hide?
                                                                                   t)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "emptyset")
                                                                                    (("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide 2)
                                                      (("2"
                                                        (lemma
                                                         "isf_times_simple_is_isf[T, S, contraction(mu!1, A!1)]"
                                                         ("i"
                                                          "u!1(n!1)"
                                                          "h"
                                                          "phi[T, S](A!1)"))
                                                        (("1"
                                                          (case-replace
                                                           "(*[T](u!1(n!1), phi[T, S](A!1)))=(((((reals@real_fun_ops[T].*)(phi[T, S](A!1), u!1(n!1))))))")
                                                          (("1"
                                                            (apply-extensionality
                                                             1
                                                             :hide?
                                                             t)
                                                            (("1"
                                                              (expand
                                                               "*")
                                                              (("1"
                                                                (expand
                                                                 "phi")
                                                                (("1"
                                                                  (expand
                                                                   "member")
                                                                  (("1"
                                                                    (case-replace
                                                                     "A!1(x!1)")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide 2)
                                                          (("2"
                                                            (lemma
                                                             "contraction_isf"
                                                             ("mu"
                                                              "mu!1"
                                                              "A"
                                                              "A!1"
                                                              "f"
                                                              "u!1(n!1)"))
                                                            (("2"
                                                              (replace
                                                               -1)
                                                              (("2"
                                                                (hide
                                                                 -1)
                                                                (("2"
                                                                  (lemma
                                                                   "isf_times_simple_is_isf[T, S, mu!1]"
                                                                   ("i"
                                                                    "u!1(n!1)"
                                                                    "h"
                                                                    "phi[T, S](A!1)"))
                                                                  (("1"
                                                                    (case-replace
                                                                     "(((reals@real_fun_ops[T].*)(phi[T, S](A!1), u!1(n!1))))=(*[T](u!1(n!1), phi[T, S](A!1)))")
                                                                    (("1"
                                                                      (hide-all-but
                                                                       1)
                                                                      (("1"
                                                                        (apply-extensionality
                                                                         :hide?
                                                                         t)
                                                                        (("1"
                                                                          (expand
                                                                           "*")
                                                                          (("1"
                                                                            (expand
                                                                             "phi")
                                                                            (("1"
                                                                              (expand
                                                                               "member")
                                                                              (("1"
                                                                                (case-replace
                                                                                 "A!1(x!1)")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (rewrite
                                                                     "phi_is_simple"
                                                                     1)
                                                                    (("2"
                                                                      (typepred
                                                                       "A!1")
                                                                      (("2"
                                                                        (expand
                                                                         "measurable_set?")
                                                                        (("2"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (rewrite
                                                           "phi_is_simple"
                                                           1)
                                                          (("3"
                                                            (typepred
                                                             "A!1")
                                                            (("3"
                                                              (expand
                                                               "measurable_set?")
                                                              (("3"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (typepred "w!1")
                                    (("2"
                                      (typepred "u!1")
                                      (("2"
                                        (hide-all-but (-1 -2 1))
                                        (("2"
                                          (expand "increasing_nn_isf?")
                                          (("2"
                                            (expand
                                             "increasing_nn_simple?")
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (expand
                                                 "pointwise_increasing?")
                                                (("2"
                                                  (skosimp)
                                                  (("2"
                                                    (hide -2)
                                                    (("2"
                                                      (inst - "x!1")
                                                      (("2"
                                                        (inst - "x!1")
                                                        (("2"
                                                          (expand
                                                           "increasing?")
                                                          (("2"
                                                            (skolem
                                                             +
                                                             ("i!1"
                                                              "j!1"))
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (inst
                                                                 -
                                                                 "i!1"
                                                                 "j!1")
                                                                (("2"
                                                                  (inst
                                                                   -
                                                                   "i!1"
                                                                   "j!1")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (expand
                                                                       "+")
                                                                      (("2"
                                                                        (expand
                                                                         "*")
                                                                        (("2"
                                                                          (expand
                                                                           "complement")
                                                                          (("2"
                                                                            (expand
                                                                             "phi")
                                                                            (("2"
                                                                              (expand
                                                                               "member")
                                                                              (("2"
                                                                                (case-replace
                                                                                 "A!1(x!1)")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (expand "nn_isf?")
                                    (("3"
                                      (skosimp)
                                      (("3"
                                        (split)
                                        (("1"
                                          (rewrite
                                           "isf_add[T, S, contraction(mu!1, A!1)]"
                                           +)
                                          (("1"
                                            (hide 2)
                                            (("1"
                                              (expand "isf?")
                                              (("1"
                                                (split)
                                                (("1"
                                                  (rewrite
                                                   "simple_times")
                                                  (("1"
                                                    (typepred "w!1")
                                                    (("1"
                                                      (expand
                                                       "increasing_nn_simple?")
                                                      (("1"
                                                        (expand
                                                         "nn_simple?")
                                                        (("1"
                                                          (inst
                                                           -
                                                           "n!1")
                                                          (("1"
                                                            (flatten)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (rewrite
                                                     "phi_is_simple")
                                                    (("2"
                                                      (typepred "A!1")
                                                      (("2"
                                                        (lemma
                                                         "measurable_complement"
                                                         ("a" "A!1"))
                                                        (("2"
                                                          (expand
                                                           "measurable_set?")
                                                          (("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand
                                                   "nonzero_set?")
                                                  (("2"
                                                    (expand "*")
                                                    (("2"
                                                      (expand
                                                       "complement")
                                                      (("2"
                                                        (expand "phi")
                                                        (("2"
                                                          (expand
                                                           "member")
                                                          (("2"
                                                            (expand
                                                             "mu_fin?")
                                                            (("2"
                                                              (expand
                                                               "contraction")
                                                              (("2"
                                                                (expand
                                                                 "intersection")
                                                                (("2"
                                                                  (expand
                                                                   "member")
                                                                  (("2"
                                                                    (case-replace
                                                                     "{x_1: T |
             A!1(x_1) AND
              IF NOT A!1(x_1) THEN 1 ELSE 0 ENDIF * w!1(n!1)(x_1) /= 0}=emptyset[T]")
                                                                    (("1"
                                                                      (typepred
                                                                       "mu!1")
                                                                      (("1"
                                                                        (expand
                                                                         "measure?")
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (expand
                                                                             "measure_empty?")
                                                                            (("1"
                                                                              (replace
                                                                               -1)
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide-all-but
                                                                       1)
                                                                      (("2"
                                                                        (apply-extensionality
                                                                         :hide?
                                                                         t)
                                                                        (("2"
                                                                          (expand
                                                                           "emptyset")
                                                                          (("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 2)
                                            (("2"
                                              (typepred "u!1(n!1)")
                                              (("2"
                                                (lemma
                                                 "contraction_isf"
                                                 ("mu"
                                                  "mu!1"
                                                  "A"
                                                  "A!1"
                                                  "f"
                                                  "((reals@real_fun_ops[T].*)(phi[T, S](A!1), u!1(n!1)))"))
                                                (("1"
                                                  (replace -1)
                                                  (("1"
                                                    (hide -1)
                                                    (("1"
                                                      (case-replace
                                                       "(((reals@real_fun_ops[T].*)
                (phi[T, S](A!1),
                 ((reals@real_fun_ops[T].*)
                      (phi[T, S](A!1), u!1(n!1))))))=((reals@real_fun_ops[T].*)
                      (phi[T, S](A!1), u!1(n!1)))")
                                                      (("1"
                                                        (hide -1)
                                                        (("1"
                                                          (lemma
                                                           "isf_times_simple_is_isf[T, S, mu!1]"
                                                           ("i"
                                                            "u!1(n!1)"
                                                            "h"
                                                            "phi[T,S](A!1)"))
                                                          (("1"
                                                            (expand
                                                             "*")
                                                            (("1"
                                                              (expand
                                                               "phi")
                                                              (("1"
                                                                (expand
                                                                 "member")
                                                                (("1"
                                                                  (case-replace
                                                                   "(LAMBDA (x: T): u!1(n!1)(x) * IF A!1(x) THEN 1 ELSE 0 ENDIF)=(LAMBDA (x: T): IF A!1(x) THEN 1 ELSE 0 ENDIF * u!1(n!1)(x))")
                                                                  (("1"
                                                                    (apply-extensionality
                                                                     :hide?
                                                                     t)
                                                                    (("1"
                                                                      (case-replace
                                                                       "A!1(x!1)")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (rewrite
                                                             "phi_is_simple"
                                                             1)
                                                            (("2"
                                                              (typepred
                                                               "A!1")
                                                              (("2"
                                                                (expand
                                                                 "measurable_set?")
                                                                (("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         1)
                                                        (("2"
                                                          (apply-extensionality
                                                           :hide?
                                                           t)
                                                          (("2"
                                                            (expand
                                                             "*")
                                                            (("2"
                                                              (expand
                                                               "phi")
                                                              (("2"
                                                                (expand
                                                                 "member")
                                                                (("2"
                                                                  (case-replace
                                                                   "A!1(x!1)")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand "isf?")
                                                  (("2"
                                                    (hide 2)
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (rewrite
                                                         "simple_times")
                                                        (("2"
                                                          (rewrite
                                                           "phi_is_simple")
                                                          (("2"
                                                            (typepred
                                                             "A!1")
                                                            (("2"
                                                              (expand
                                                               "measurable_set?")
                                                              (("2"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (skosimp)
                                          (("2"
                                            (expand "+")
                                            (("2"
                                              (expand "*")
                                              (("2"
                                                (hide-all-but 1)
                                                (("2"
                                                  (expand "phi")
                                                  (("2"
                                                    (expand
                                                     "complement")
                                                    (("2"
                                                      (expand "member")
                                                      (("2"
                                                        (case-replace
                                                         "A!1(x!1)")
                                                        (("1"
                                                          (typepred
                                                           "u!1(n!1)")
                                                          (("1"
                                                            (expand
                                                             "nn_isf?")
                                                            (("1"
                                                              (inst
                                                               -
                                                               "x!1")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          (("2"
                                                            (typepred
                                                             "w!1")
                                                            (("2"
                                                              (expand
                                                               "increasing_nn_simple?")
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (expand
                                                                   "nn_simple?")
                                                                  (("2"
                                                                    (inst
                                                                     -
                                                                     "n!1")
                                                                    (("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (inst
                                                                         -
                                                                         "x!1")
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nn_integrable? const-decl "bool" nn_integral nil)
    (increasing_nn_isf nonempty-type-eq-decl nil nn_integral nil)
    (increasing_nn_isf? const-decl "bool" nn_integral nil)
    (sequence type-eq-decl nil sequences nil)
    (nn_isf nonempty-type-eq-decl nil nn_integral nil)
    (nn_isf? const-decl "bool" nn_integral nil)
    (isf nonempty-type-eq-decl nil isf nil)
    (measurable_set nonempty-type-eq-decl nil measure_space_def nil)
    (measurable_set? const-decl "bool" measure_space_def nil)
    (phi const-decl "nat" measure_space nil)
    (set type-eq-decl nil sets nil) (isf? const-decl "bool" isf nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     nil)
    (measure? const-decl "bool" generalized_measure_def nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (setofsets type-eq-decl nil sets nil)
    (simple nonempty-type-eq-decl nil measure_space nil)
    (simple? const-decl "bool" measure_space nil)
    (isf_integral const-decl "real" isf nil)
    (convergent? const-decl "bool" topological_convergence topology)
    (pointwise_convergence? const-decl "bool" pointwise_convergence
     nil)
    (convergence? const-decl "bool" topological_convergence topology)
    (member const-decl "bool" sets nil)
    (pointwise_increasing? const-decl "bool" pointwise_convergence nil)
    (increasing? const-decl "bool" real_fun_preds reals)
    (nn_measurable nonempty-type-eq-decl nil measure_space nil)
    (nn_measurable? const-decl "bool" measure_space nil)
    (pointwise_converges_upto? const-decl "bool" pointwise_convergence
     nil)
    (increasing_nn_simple nonempty-type-eq-decl nil measure_space nil)
    (increasing_nn_simple? const-decl "bool" measure_space nil)
    (measurable_function nonempty-type-eq-decl nil measure_space_def
     nil)
    (measurable_function? const-decl "bool" measure_space_def nil)
    (complement const-decl "set" sets nil)
    (measurable_complement judgement-tcc nil measure_space_def nil)
    (simple_times judgement-tcc nil measure_space nil)
    (nn_simple? const-decl "bool" measure_space nil)
    (metric_converges_to const-decl "bool" metric_space_def
     metric_space)
    (ball const-decl "set[T]" metric_space_def metric_space)
    (metric_convergence_def formula-decl nil metric_space metric_space)
    (mu_fin? const-decl "bool" measure_props nil)
    (m_monotone formula-decl nil measure_props nil)
    (intersection const-decl "set" sets nil)
    (nonzero_set? const-decl "set[T]" isf nil)
    (subset? const-decl "bool" sets nil)
    (x_le const-decl "bool" extended_nnreal extended_nnreal)
    (nonzero_measurable formula-decl nil isf nil)
    (measurable_intersection judgement-tcc nil measure_space_def nil)
    (phi_is_simple judgement-tcc nil measure_space nil)
    (isf_times_simple_is_isf judgement-tcc nil isf nil)
    (emptyset const-decl "set" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (measure_empty? const-decl "bool" generalized_measure_def nil)
    (sigma_zero formula-decl nil sigma_countable sigma_set)
    (is_countable const-decl "bool" countability sets_aux)
    (countable_set nonempty-type-eq-decl nil countability sets_aux)
    (fullset const-decl "set" sets nil)
    (singleton? const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (mu const-decl "nnreal" measure_props nil)
    (isf_integral_add formula-decl nil isf nil)
    (isf_add judgement-tcc nil isf nil)
    (nn_measurable_def formula-decl nil measure_space nil))
   shostak)
  (contraction_nn_integrable-1 nil 3431698666
   ("" (skosimp)
    (("" (split)
      (("1" (flatten)
        (("1" (expand "nn_integrable?")
          (("1" (skosimp)
            (("1"
              (inst + "lambda (n:nat): ((reals@real_fun_ops[T].*)
                                    (phi[T, S](A!1), u!1(n)))")
              (("1" (split)
                (("1" (expand "pointwise_convergence?")
                  (("1" (skosimp)
                    (("1" (inst - "x!1")
                      (("1" (expand "*")
                        (("1" (expand "phi")
                          (("1" (expand "member")
                            (("1" (case-replace "A!1(x!1)")
                              (("1" (assert) nil nil)
                               ("2"
                                (assert)
                                (("2"
                                  (hide -1 -2 1)
                                  (("2"
                                    (expand "convergence?")
                                    (("2"
                                      (skosimp)
                                      (("2"
                                        (inst + "0")
                                        (("2"
                                          (skosimp)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide -1)
                  (("2" (expand "convergent?")
                    (("2" (skosimp)
                      (("2" (inst + "l!1")
                        (("2" (expand "o ")
                          (("2"
                            (case-replace
                             "(LAMBDA (n: nat): isf_integral[T,S,contraction(mu!1,A!1)](u!1(n)))=(LAMBDA (n: nat):
                     isf_integral[T,S,mu!1]((((reals@real_fun_ops[T].*)
                                    (phi[T, S](A!1), u!1(n))))))")
                            (("1" (hide -1 2)
                              (("1"
                                (apply-extensionality :hide? t)
                                (("1"
                                  (rewrite "contraction_isf_integral")
                                  nil
                                  nil)
                                 ("2"
                                  (skosimp)
                                  (("2"
                                    (typepred "u!1(n!1)")
                                    (("2"
                                      (rewrite "contraction_isf")
                                      (("2"
                                        (expand "isf?")
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide -1 2)
                              (("2"
                                (skosimp)
                                (("2"
                                  (typepred "u!1(n!1)")
                                  (("2"
                                    (hide -2)
                                    (("2"
                                      (rewrite "contraction_isf")
                                      (("2"
                                        (hide 2)
                                        (("2"
                                          (expand "isf?")
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (typepred "u!1")
                (("2" (hide -2 -3)
                  (("2" (expand "increasing_nn_isf?")
                    (("2" (expand "pointwise_increasing?")
                      (("2" (skosimp)
                        (("2" (inst - "x!1")
                          (("2" (expand "increasing?")
                            (("2" (skolem + ("i!1" "j!1"))
                              (("2"
                                (inst - "i!1" "j!1")
                                (("2"
                                  (flatten)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "*")
                                      (("2"
                                        (expand "phi")
                                        (("2"
                                          (expand "member")
                                          (("2"
                                            (case-replace "A!1(x!1)")
                                            (("1" (assert) nil nil)
                                             ("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (expand "nn_isf?")
                (("3" (skosimp)
                  (("3" (typepred "u!1(n!1)")
                    (("3" (expand "nn_isf?")
                      (("3" (split)
                        (("1" (rewrite "contraction_isf")
                          (("1" (expand "isf?")
                            (("1" (propax) nil nil)) nil))
                          nil)
                         ("2" (skosimp)
                          (("2" (inst - "x!1")
                            (("2" (hide -1 -3 -4)
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (typepred "f!1")
          (("2" (lemma "nn_measurable_def" ("f" "f!1"))
            (("2" (expand "nn_measurable?")
              (("2" (flatten)
                (("2" (replace -2)
                  (("2" (replace -3)
                    (("2" (assert)
                      (("2" (skosimp)
                        (("2" (expand "pointwise_converges_upto?")
                          (("2" (flatten)
                            (("2" (expand "nn_integrable?")
                              (("2"
                                (skosimp)
                                (("2"
                                  (inst
                                   +
                                   "lambda (n:nat): ((reals@real_fun_ops[T].*)
                                  (phi[T, S](A!1), u!1(n)))+((reals@real_fun_ops[T].*)
                                  (phi[T, S](complement(A!1)), w!1(n)))")
                                  (("1"
                                    (split)
                                    (("1"
                                      (expand "pointwise_convergence?")
                                      (("1"
                                        (skosimp)
                                        (("1"
                                          (inst - "x!1")
                                          (("1"
                                            (inst -5 "x!1")
                                            (("1"
                                              (hide-all-but (-1 -5 1))
                                              (("1"
                                                (expand "+")
                                                (("1"
                                                  (expand "*")
                                                  (("1"
                                                    (expand "phi")
                                                    (("1"
                                                      (expand
                                                       "complement")
                                                      (("1"
                                                        (expand
                                                         "member")
                                                        (("1"
                                                          (case-replace
                                                           "A!1(x!1)")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "convergent?")
                                      (("2"
                                        (skosimp)
                                        (("2"
                                          (inst + "l!1")
                                          (("2"
                                            (expand "o ")
                                            (("2"
                                              (case
                                               "FORALL (n: nat):
        isf?[T, S, contraction(mu!1, A!1)]
            ((+[T])
                 ((((reals@real_fun_ops[T].*)
                        (phi[T, S](A!1), u!1(n)))),
                  ((((reals@real_fun_ops[T].*)
                         (phi[T, S](complement[T](A!1)), w!1(n)))))))")
                                              (("1"
                                                (case-replace
                                                 "(LAMBDA (n: nat):
                     isf_integral[T,S,contraction(mu!1,A!1)]((((reals@real_fun_ops[T].*)
                                    (phi[T, S](A!1), u!1(n))))
                                   +
                                   (((reals@real_fun_ops[T].*)
                                     (phi[T, S](complement(A!1)),
                                      w!1(n))))))=(LAMBDA (n: nat): isf_integral[T,S,mu!1](u!1(n)))")
                                                (("1"
                                                  (apply-extensionality
                                                   1
                                                   :hide?
                                                   t)
                                                  (("1"
                                                    (hide 2)
                                                    (("1"
                                                      (inst - "x!1")
                                                      (("1"
                                                        (rewrite
                                                         "isf_integral_add[T, S, contraction(mu!1, A!1)]")
                                                        (("1"
                                                          (case-replace
                                                           "isf_integral[T,S,contraction(mu!1,A!1)](((((reals@real_fun_ops[T].*)
                           (phi[T, S](complement(A!1)), w!1(x!1))))))=0")
                                                          (("1"
                                                            (hide
                                                             -1
                                                             -2)
                                                            (("1"
                                                              (case-replace
                                                               "isf_integral[T, S, mu!1](u!1(x!1))=isf_integral[T, S, mu!1](((reals@real_fun_ops[T].*)
                          (phi[T, S](A!1), u!1(x!1))))")
                                                              (("1"
                                                                (hide
                                                                 -1)
                                                                (("1"
                                                                  (lemma
                                                                   "contraction_isf_integral"
                                                                   ("mu"
                                                                    "mu!1"
                                                                    "A"
                                                                    "A!1"
                                                                    "f"
                                                                    "u!1(x!1)"))
                                                                  (("1"
                                                                    (case-replace
                                                                     "(((reals@real_fun_ops[T].*)(phi[T, S](A!1), u!1(x!1))))=u!1(x!1)")
                                                                    (("1"
                                                                      (typepred
                                                                       "u!1(x!1)")
                                                                      (("1"
                                                                        (lemma
                                                                         "contraction_isf"
                                                                         ("mu"
                                                                          "mu!1"
                                                                          "A"
                                                                          "A!1"
                                                                          "f"
                                                                          "u!1(x!1)"))
                                                                        (("1"
                                                                          (replace
                                                                           -4
                                                                           -1)
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (expand
                                                                           "isf?")
                                                                          (("2"
                                                                            (expand
                                                                             "simple?")
                                                                            (("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (hide
                                                                                 2)
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide-all-but
                                                                       (1
                                                                        -6))
                                                                      (("2"
                                                                        (apply-extensionality
                                                                         :hide?
                                                                         t)
                                                                        (("2"
                                                                          (expand
                                                                           "*")
                                                                          (("2"
                                                                            (expand
                                                                             "pointwise_convergence?")
                                                                            (("2"
                                                                              (inst
                                                                               -
                                                                               "x!2")
                                                                              (("2"
                                                                                (expand
                                                                                 "phi")
                                                                                (("2"
                                                                                  (expand
                                                                                   "member")
                                                                                  (("2"
                                                                                    (case-replace
                                                                                     "A!1(x!2)")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (typepred
                                                                                         "u!1(x!1)")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "nn_isf?")
                                                                                          (("2"
                                                                                            (inst
                                                                                             -
                                                                                             "x!2")
                                                                                            (("2"
                                                                                              (expand
                                                                                               ">="
                                                                                               -2)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "<="
                                                                                                 -2)
                                                                                                (("2"
                                                                                                  (hide
                                                                                                   -1)
                                                                                                  (("2"
                                                                                                    (rewrite
                                                                                                     "metric_convergence_def")
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "metric_converges_to")
                                                                                                      (("2"
                                                                                                        (inst
                                                                                                         -
                                                                                                         "u!1(x!1)(x!2)")
                                                                                                        (("1"
                                                                                                          (skosimp)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "ball")
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "member")
                                                                                                              (("1"
                                                                                                                (inst
                                                                                                                 -
                                                                                                                 "max(n!1,x!1)")
                                                                                                                (("1"
                                                                                                                  (split
                                                                                                                   -2)
                                                                                                                  (("1"
                                                                                                                    (typepred
                                                                                                                     "u!1(max(n!1, x!1))")
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "nn_isf?")
                                                                                                                      (("1"
                                                                                                                        (inst
                                                                                                                         -
                                                                                                                         "x!2")
                                                                                                                        (("1"
                                                                                                                          (case-replace
                                                                                                                           "abs(-1 * u!1(max(n!1, x!1))(x!2))=u!1(max(n!1, x!1))(x!2)")
                                                                                                                          (("1"
                                                                                                                            (hide
                                                                                                                             -1
                                                                                                                             -2)
                                                                                                                            (("1"
                                                                                                                              (typepred
                                                                                                                               "u!1")
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "increasing_nn_isf?")
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "pointwise_increasing?")
                                                                                                                                  (("1"
                                                                                                                                    (inst
                                                                                                                                     -
                                                                                                                                     "x!2")
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "increasing?")
                                                                                                                                      (("1"
                                                                                                                                        (inst
                                                                                                                                         -
                                                                                                                                         "x!1"
                                                                                                                                         "max(n!1, x!1)")
                                                                                                                                        (("1"
                                                                                                                                          (split
                                                                                                                                           -1)
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (hide-all-but
                                                                                                                                             1)
                                                                                                                                            (("2"
                                                                                                                                              (grind)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (hide-all-but
                                                                                                                             (-2
                                                                                                                              1))
                                                                                                                            (("2"
                                                                                                                              (grind)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (hide-all-but
                                                                                                                     1)
                                                                                                                    (("2"
                                                                                                                      (grind)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide
                                                                     2)
                                                                    (("2"
                                                                      (typepred
                                                                       "u!1(x!1)")
                                                                      (("2"
                                                                        (expand
                                                                         "isf?")
                                                                        (("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (expand
                                                                               "mu_fin?")
                                                                              (("2"
                                                                                (expand
                                                                                 "contraction")
                                                                                (("2"
                                                                                  (lemma
                                                                                   "m_monotone[T,S,mu!1]"
                                                                                   ("a"
                                                                                    "intersection(A!1, nonzero_set?(u!1(x!1)))"
                                                                                    "b"
                                                                                    "nonzero_set?(u!1(x!1))"))
                                                                                  (("1"
                                                                                    (split
                                                                                     -1)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "x_le")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "nonzero_set?")
                                                                                              (("1"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide-all-but
                                                                                       1)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "subset?")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "intersection")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "nonzero_set?")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "member")
                                                                                              (("2"
                                                                                                (skosimp)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (lemma
                                                                                     "nonzero_measurable[T, S, mu!1]"
                                                                                     ("g"
                                                                                      "u!1(x!1)"))
                                                                                    (("1"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (expand
                                                                                       "simple?")
                                                                                      (("2"
                                                                                        (flatten)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("3"
                                                                                    (hide
                                                                                     2)
                                                                                    (("3"
                                                                                      (rewrite
                                                                                       "measurable_intersection")
                                                                                      (("3"
                                                                                        (lemma
                                                                                         "nonzero_measurable[T, S, mu!1]"
                                                                                         ("g"
                                                                                          "u!1(x!1)"))
                                                                                        (("1"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil)
                                                                                         ("2"
                                                                                          (expand
                                                                                           "simple?")
                                                                                          (("2"
                                                                                            (flatten)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide
                                                                 2)
                                                                (("2"
                                                                  (case-replace
                                                                   "(((reals@real_fun_ops[T].*)(phi[T, S](A!1), u!1(x!1))))=u!1(x!1)")
                                                                  (("2"
                                                                    (hide
                                                                     2
                                                                     -6)
                                                                    (("2"
                                                                      (expand
                                                                       "*")
                                                                      (("2"
                                                                        (apply-extensionality
                                                                         :hide?
                                                                         t)
                                                                        (("2"
                                                                          (expand
                                                                           "phi")
                                                                          (("2"
                                                                            (expand
                                                                             "member")
                                                                            (("2"
                                                                              (expand
                                                                               "pointwise_convergence?")
                                                                              (("2"
                                                                                (hide
                                                                                 -1
                                                                                 -2)
                                                                                (("2"
                                                                                  (inst
                                                                                   -3
                                                                                   "x!2")
                                                                                  (("2"
                                                                                    (rewrite
                                                                                     "metric_convergence_def")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "metric_converges_to")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "member")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "ball")
                                                                                          (("2"
                                                                                            (case-replace
                                                                                             "A!1(x!2)")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -3
                                                                                                 "u!1(x!1)(x!2)")
                                                                                                (("1"
                                                                                                  (skosimp)
                                                                                                  (("1"
                                                                                                    (typepred
                                                                                                     "u!1")
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "increasing_nn_isf?")
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "pointwise_increasing?")
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           -
                                                                                                           "x!2")
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "increasing?")
                                                                                                            (("1"
                                                                                                              (inst
                                                                                                               -
                                                                                                               "x!1"
                                                                                                               "max(n!1,x!1)")
                                                                                                              (("1"
                                                                                                                (split
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (inst
                                                                                                                   -4
                                                                                                                   "max(n!1, x!1)")
                                                                                                                  (("1"
                                                                                                                    (split
                                                                                                                     -4)
                                                                                                                    (("1"
                                                                                                                      (case-replace
                                                                                                                       "abs(-1 * u!1(max(n!1, x!1))(x!2))=u!1(max(n!1, x!1))(x!2)")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (hide-all-but
                                                                                                                         1)
                                                                                                                        (("2"
                                                                                                                          (typepred
                                                                                                                           "u!1(max(n!1, x!1))")
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             "nn_isf?")
                                                                                                                            (("2"
                                                                                                                              (inst
                                                                                                                               -
                                                                                                                               "x!2")
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 "abs")
                                                                                                                                (("2"
                                                                                                                                  (assert)
                                                                                                                                  (("2"
                                                                                                                                    (hide
                                                                                                                                     -1)
                                                                                                                                    (("2"
                                                                                                                                      (grind)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (hide-all-but
                                                                                                                       1)
                                                                                                                      (("2"
                                                                                                                        (grind)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (hide-all-but
                                                                                                                   1)
                                                                                                                  (("2"
                                                                                                                    (grind)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (typepred
                                                                                                     "u!1(x!1)")
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "nn_isf?")
                                                                                                      (("2"
                                                                                                        (inst
                                                                                                         -
                                                                                                         "x!2")
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           ">="
                                                                                                           -2)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "<="
                                                                                                             -2)
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (hide
                                                                 2)
                                                                (("3"
                                                                  (typepred
                                                                   "u!1(x!1)")
                                                                  (("3"
                                                                    (lemma
                                                                     "isf_times_simple_is_isf[T, S, mu!1]"
                                                                     ("i"
                                                                      "u!1(x!1)"
                                                                      "h"
                                                                      "phi[T, S](A!1)"))
                                                                    (("1"
                                                                      (case-replace
                                                                       "(((reals@real_fun_ops[T].*)(phi[T, S](A!1), u!1(x!1))))=*[T](u!1(x!1), phi[T, S](A!1))")
                                                                      (("1"
                                                                        (apply-extensionality
                                                                         1
                                                                         :hide?
                                                                         t)
                                                                        (("1"
                                                                          (expand
                                                                           "*")
                                                                          (("1"
                                                                            (expand
                                                                             "phi")
                                                                            (("1"
                                                                              (expand
                                                                               "member")
                                                                              (("1"
                                                                                (case-replace
                                                                                 "A!1(x!2)")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (rewrite
                                                                       "phi_is_simple")
                                                                      (("2"
                                                                        (typepred
                                                                         "A!1")
                                                                        (("2"
                                                                          (expand
                                                                           "measurable_set?")
                                                                          (("2"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide 2)
                                                            (("2"
                                                              (expand
                                                               "isf_integral")
                                                              (("2"
                                                                (expand
                                                                 "mu")
                                                                (("2"
                                                                  (expand
                                                                   "contraction")
                                                                  (("2"
                                                                    (expand
                                                                     "intersection")
                                                                    (("2"
                                                                      (expand
                                                                       "complement")
                                                                      (("2"
                                                                        (expand
                                                                         "phi")
                                                                        (("2"
                                                                          (expand
                                                                           "member")
                                                                          (("2"
                                                                            (case-replace
                                                                             "(LAMBDA (c:real):
             IF c = 0 THEN 0
             ELSE c *
                   mu!1({x: T |
                          A!1(x) AND
                           inverse_image[T, real]
                               ((((((reals@real_fun_ops[T].*)
                                    (LAMBDA
                                     (x_1: T):
                                     IF NOT A!1(x_1) THEN 1 ELSE 0 ENDIF,
                                     w!1(x!1)))))),
                                singleton[real](c))
                               (x)})`2
             ENDIF)=(LAMBDA (c:real):0)")
                                                                            (("1"
                                                                              (hide
                                                                               -1)
                                                                              (("1"
                                                                                (rewrite
                                                                                 "sigma_zero"
                                                                                 1)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide-all-but
                                                                               1)
                                                                              (("2"
                                                                                (apply-extensionality
                                                                                 :hide?
                                                                                 t)
                                                                                (("1"
                                                                                  (case-replace
                                                                                   "x!2 = 0")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (case-replace
                                                                                       "{x: T |
              A!1(x) AND
               inverse_image[T, real]
                   ((((((reals@real_fun_ops[T].*)
                            (LAMBDA (x_1: T):
                               IF NOT A!1(x_1) THEN 1 ELSE 0 ENDIF,
                             w!1(x!1)))))),
                    singleton[real](x!2))
                   (x)}=emptyset[T]")
                                                                                      (("1"
                                                                                        (typepred
                                                                                         "mu!1")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "measure?")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "measure_empty?")
                                                                                            (("1"
                                                                                              (flatten)
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide
                                                                                         3)
                                                                                        (("2"
                                                                                          (apply-extensionality
                                                                                           :hide?
                                                                                           t)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "emptyset")
                                                                                            (("2"
                                                                                              (flatten)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "inverse_image")
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "*")
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "member")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "singleton")
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (skosimp)
                                                                                  (("2"
                                                                                    (case-replace
                                                                                     "{x: T |
           A!1(x) AND
            inverse_image[T, real]
                (((((((reals@real_fun_ops[T].*)
                          (LAMBDA (x_1: T):
                             IF NOT A!1(x_1) THEN 1 ELSE 0 ENDIF,
                           w!1(x!1))))))),
                 singleton[real](c!1))
                (x)}=emptyset[T]")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide
                                                                                       3)
                                                                                      (("2"
                                                                                        (apply-extensionality
                                                                                         :hide?
                                                                                         t)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "emptyset")
                                                                                          (("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "inverse_image")
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "member")
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "*")
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "singleton")
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("3"
                                                                              (hide
                                                                               2)
                                                                              (("3"
                                                                                (hide-all-but
                                                                                 1)
                                                                                (("3"
                                                                                  (skosimp)
                                                                                  (("3"
                                                                                    (case-replace
                                                                                     "{x: T |
           A!1(x) AND
            inverse_image[T, real]
                (((((((reals@real_fun_ops[T].*)
                          (LAMBDA (x_1: T):
                             IF NOT A!1(x_1) THEN 1 ELSE 0 ENDIF,
                           w!1(x!1))))))),
                 singleton[real](c!1))
                (x)}=emptyset[T]")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide
                                                                                       3)
                                                                                      (("2"
                                                                                        (apply-extensionality
                                                                                         :hide?
                                                                                         t)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "emptyset")
                                                                                          (("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "inverse_image")
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "member")
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "*")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "singleton")
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide 2)
                                                          (("2"
                                                            (hide -1)
                                                            (("2"
                                                              (expand
                                                               "isf?")
                                                              (("2"
                                                                (split)
                                                                (("1"
                                                                  (typepred
                                                                   "w!1")
                                                                  (("1"
                                                                    (expand
                                                                     "increasing_nn_simple?")
                                                                    (("1"
                                                                      (inst
                                                                       -
                                                                       "x!1")
                                                                      (("1"
                                                                        (expand
                                                                         "nn_simple?")
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (rewrite
                                                                             "simple_times[T,S]"
                                                                             1)
                                                                            (("1"
                                                                              (hide-all-but
                                                                               1)
                                                                              (("1"
                                                                                (rewrite
                                                                                 "phi_is_simple")
                                                                                (("1"
                                                                                  (lemma
                                                                                   "measurable_complement[T,S]"
                                                                                   ("a"
                                                                                    "A!1"))
                                                                                  (("1"
                                                                                    (expand
                                                                                     "measurable_set?")
                                                                                    (("1"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   1)
                                                                  (("2"
                                                                    (expand
                                                                     "nonzero_set?")
                                                                    (("2"
                                                                      (expand
                                                                       "*")
                                                                      (("2"
                                                                        (expand
                                                                         "complement")
                                                                        (("2"
                                                                          (expand
                                                                           "mu_fin?")
                                                                          (("2"
                                                                            (expand
                                                                             "contraction")
                                                                            (("2"
                                                                              (expand
                                                                               "intersection")
                                                                              (("2"
                                                                                (expand
                                                                                 "phi")
                                                                                (("2"
                                                                                  (expand
                                                                                   "member")
                                                                                  (("2"
                                                                                    (case-replace
                                                                                     "{x_1: T |
             A!1(x_1) AND
              IF NOT A!1(x_1) THEN 1 ELSE 0 ENDIF * w!1(x!1)(x_1) /= 0}=emptyset[T]")
                                                                                    (("1"
                                                                                      (typepred
                                                                                       "mu!1")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "measure?")
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "measure_empty?")
                                                                                            (("1"
                                                                                              (replace
                                                                                               -1)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide
                                                                                       2)
                                                                                      (("2"
                                                                                        (apply-extensionality
                                                                                         :hide?
                                                                                         t)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "emptyset")
                                                                                          (("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (hide -1 2)
                                                          (("3"
                                                            (typepred
                                                             "u!1(x!1)")
                                                            (("3"
                                                              (lemma
                                                               "isf_times_simple_is_isf[T, S, contraction(mu!1, A!1)]"
                                                               ("i"
                                                                "u!1(x!1)"
                                                                "h"
                                                                "phi[T, S](A!1)"))
                                                              (("1"
                                                                (case-replace
                                                                 "(*[T](u!1(x!1), phi[T, S](A!1)))=(((((reals@real_fun_ops[T].*)(phi[T, S](A!1), u!1(x!1))))))")
                                                                (("1"
                                                                  (apply-extensionality
                                                                   1
                                                                   :hide?
                                                                   t)
                                                                  (("1"
                                                                    (expand
                                                                     "*")
                                                                    (("1"
                                                                      (expand
                                                                       "phi")
                                                                      (("1"
                                                                        (expand
                                                                         "member")
                                                                        (("1"
                                                                          (case-replace
                                                                           "A!1(x!2)")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide
                                                                 2)
                                                                (("2"
                                                                  (expand
                                                                   "isf?")
                                                                  (("2"
                                                                    (expand
                                                                     "mu_fin?")
                                                                    (("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (expand
                                                                           "contraction")
                                                                          (("2"
                                                                            (lemma
                                                                             "m_monotone[T,S,mu!1]"
                                                                             ("a"
                                                                              "intersection(A!1, nonzero_set?(u!1(x!1)))"
                                                                              "b"
                                                                              "nonzero_set?(u!1(x!1))"))
                                                                            (("1"
                                                                              (split
                                                                               -1)
                                                                              (("1"
                                                                                (expand
                                                                                 "x_le")
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "nonzero_set?")
                                                                                      (("1"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide-all-but
                                                                                 1)
                                                                                (("2"
                                                                                  (expand
                                                                                   "subset?")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "intersection")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "member")
                                                                                      (("2"
                                                                                        (skosimp)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (lemma
                                                                               "nonzero_measurable[T,S,mu!1]"
                                                                               ("g"
                                                                                "u!1(x!1)"))
                                                                              (("1"
                                                                                (propax)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (expand
                                                                                 "simple?")
                                                                                (("2"
                                                                                  (flatten)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("3"
                                                                              (rewrite
                                                                               "measurable_intersection[T,S]"
                                                                               1)
                                                                              (("3"
                                                                                (lemma
                                                                                 "nonzero_measurable[T,S,mu!1]"
                                                                                 ("g"
                                                                                  "u!1(x!1)"))
                                                                                (("1"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (expand
                                                                                   "simple?")
                                                                                  (("2"
                                                                                    (flatten)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (rewrite
                                                                 "phi_is_simple[T, S]")
                                                                (("3"
                                                                  (typepred
                                                                   "A!1")
                                                                  (("3"
                                                                    (expand
                                                                     "measurable_set?")
                                                                    (("3"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide 2)
                                                (("2"
                                                  (skosimp)
                                                  (("2"
                                                    (rewrite
                                                     "isf_add[T, S, contraction(mu!1, A!1)]"
                                                     1)
                                                    (("1"
                                                      (hide 2)
                                                      (("1"
                                                        (expand "isf?")
                                                        (("1"
                                                          (split)
                                                          (("1"
                                                            (rewrite
                                                             "simple_times"
                                                             +)
                                                            (("1"
                                                              (typepred
                                                               "w!1")
                                                              (("1"
                                                                (expand
                                                                 "increasing_nn_simple?")
                                                                (("1"
                                                                  (inst
                                                                   -
                                                                   "n!1")
                                                                  (("1"
                                                                    (expand
                                                                     "nn_simple?")
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (rewrite
                                                               "phi_is_simple"
                                                               1)
                                                              (("2"
                                                                (lemma
                                                                 "measurable_complement[T,S]"
                                                                 ("a"
                                                                  "A!1"))
                                                                (("2"
                                                                  (expand
                                                                   "measurable_set?")
                                                                  (("2"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (expand
                                                             "nonzero_set?")
                                                            (("2"
                                                              (expand
                                                               "/=")
                                                              (("2"
                                                                (expand
                                                                 "mu_fin?")
                                                                (("2"
                                                                  (expand
                                                                   "contraction")
                                                                  (("2"
                                                                    (expand
                                                                     "intersection")
                                                                    (("2"
                                                                      (expand
                                                                       "*")
                                                                      (("2"
                                                                        (expand
                                                                         "complement")
                                                                        (("2"
                                                                          (expand
                                                                           "phi")
                                                                          (("2"
                                                                            (expand
                                                                             "member")
                                                                            (("2"
                                                                              (case-replace
                                                                               "{x_1: T |
             A!1(x_1) AND
              NOT (IF NOT A!1(x_1) THEN 1 ELSE 0 ENDIF * w!1(n!1)(x_1) =
                    0)}=emptyset[T]")
                                                                              (("1"
                                                                                (typepred
                                                                                 "mu!1")
                                                                                (("1"
                                                                                  (expand
                                                                                   "measure?")
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "measure_empty?")
                                                                                      (("1"
                                                                                        (replace
                                                                                         -1)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide-all-but
                                                                                 1)
                                                                                (("2"
                                                                                  (apply-extensionality
                                                                                   :hide?
                                                                                   t)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "emptyset")
                                                                                    (("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide 2)
                                                      (("2"
                                                        (lemma
                                                         "isf_times_simple_is_isf[T, S, contraction(mu!1, A!1)]"
                                                         ("i"
                                                          "u!1(n!1)"
                                                          "h"
                                                          "phi[T, S](A!1)"))
                                                        (("1"
                                                          (case-replace
                                                           "(*[T](u!1(n!1), phi[T, S](A!1)))=(((((reals@real_fun_ops[T].*)(phi[T, S](A!1), u!1(n!1))))))")
                                                          (("1"
                                                            (apply-extensionality
                                                             1
                                                             :hide?
                                                             t)
                                                            (("1"
                                                              (expand
                                                               "*")
                                                              (("1"
                                                                (expand
                                                                 "phi")
                                                                (("1"
                                                                  (expand
                                                                   "member")
                                                                  (("1"
                                                                    (case-replace
                                                                     "A!1(x!1)")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide 2)
                                                          (("2"
                                                            (lemma
                                                             "contraction_isf"
                                                             ("mu"
                                                              "mu!1"
                                                              "A"
                                                              "A!1"
                                                              "f"
                                                              "u!1(n!1)"))
                                                            (("1"
                                                              (replace
                                                               -1)
                                                              (("1"
                                                                (hide
                                                                 -1)
                                                                (("1"
                                                                  (lemma
                                                                   "isf_times_simple_is_isf[T, S, mu!1]"
                                                                   ("i"
                                                                    "u!1(n!1)"
                                                                    "h"
                                                                    "phi[T, S](A!1)"))
                                                                  (("1"
                                                                    (case-replace
                                                                     "(((reals@real_fun_ops[T].*)(phi[T, S](A!1), u!1(n!1))))=(*[T](u!1(n!1), phi[T, S](A!1)))")
                                                                    (("1"
                                                                      (hide-all-but
                                                                       1)
                                                                      (("1"
                                                                        (apply-extensionality
                                                                         :hide?
                                                                         t)
                                                                        (("1"
                                                                          (expand
                                                                           "*")
                                                                          (("1"
                                                                            (expand
                                                                             "phi")
                                                                            (("1"
                                                                              (expand
                                                                               "member")
                                                                              (("1"
                                                                                (case-replace
                                                                                 "A!1(x!1)")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (rewrite
                                                                     "phi_is_simple"
                                                                     1)
                                                                    (("2"
                                                                      (typepred
                                                                       "A!1")
                                                                      (("2"
                                                                        (expand
                                                                         "measurable_set?")
                                                                        (("2"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (typepred
                                                               "u!1(n!1)")
                                                              (("2"
                                                                (expand
                                                                 "isf?")
                                                                (("2"
                                                                  (expand
                                                                   "simple?")
                                                                  (("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (hide
                                                                       -9
                                                                       2)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (rewrite
                                                           "phi_is_simple"
                                                           1)
                                                          (("3"
                                                            (typepred
                                                             "A!1")
                                                            (("3"
                                                              (expand
                                                               "measurable_set?")
                                                              (("3"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (typepred "w!1")
                                    (("2"
                                      (typepred "u!1")
                                      (("2"
                                        (hide-all-but (-1 -2 1))
                                        (("2"
                                          (expand "increasing_nn_isf?")
                                          (("2"
                                            (expand
                                             "increasing_nn_simple?")
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (expand
                                                 "pointwise_increasing?")
                                                (("2"
                                                  (skosimp)
                                                  (("2"
                                                    (hide -2)
                                                    (("2"
                                                      (inst - "x!1")
                                                      (("2"
                                                        (inst - "x!1")
                                                        (("2"
                                                          (expand
                                                           "increasing?")
                                                          (("2"
                                                            (skolem
                                                             +
                                                             ("i!1"
                                                              "j!1"))
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (inst
                                                                 -
                                                                 "i!1"
                                                                 "j!1")
                                                                (("2"
                                                                  (inst
                                                                   -
                                                                   "i!1"
                                                                   "j!1")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (expand
                                                                       "+")
                                                                      (("2"
                                                                        (expand
                                                                         "*")
                                                                        (("2"
                                                                          (expand
                                                                           "complement")
                                                                          (("2"
                                                                            (expand
                                                                             "phi")
                                                                            (("2"
                                                                              (expand
                                                                               "member")
                                                                              (("2"
                                                                                (case-replace
                                                                                 "A!1(x!1)")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (expand "nn_isf?")
                                    (("3"
                                      (skosimp)
                                      (("3"
                                        (split)
                                        (("1"
                                          (rewrite
                                           "isf_add[T, S, contraction(mu!1, A!1)]"
                                           +)
                                          (("1"
                                            (hide 2)
                                            (("1"
                                              (expand "isf?")
                                              (("1"
                                                (split)
                                                (("1"
                                                  (rewrite
                                                   "simple_times")
                                                  (("1"
                                                    (typepred "w!1")
                                                    (("1"
                                                      (expand
                                                       "increasing_nn_simple?")
                                                      (("1"
                                                        (expand
                                                         "nn_simple?")
                                                        (("1"
                                                          (inst
                                                           -
                                                           "n!1")
                                                          (("1"
                                                            (flatten)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (rewrite
                                                     "phi_is_simple")
                                                    (("2"
                                                      (typepred "A!1")
                                                      (("2"
                                                        (lemma
                                                         "measurable_complement"
                                                         ("a" "A!1"))
                                                        (("2"
                                                          (expand
                                                           "measurable_set?")
                                                          (("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand
                                                   "nonzero_set?")
                                                  (("2"
                                                    (expand "*")
                                                    (("2"
                                                      (expand
                                                       "complement")
                                                      (("2"
                                                        (expand "phi")
                                                        (("2"
                                                          (expand
                                                           "member")
                                                          (("2"
                                                            (expand
                                                             "mu_fin?")
                                                            (("2"
                                                              (expand
                                                               "contraction")
                                                              (("2"
                                                                (expand
                                                                 "intersection")
                                                                (("2"
                                                                  (expand
                                                                   "member")
                                                                  (("2"
                                                                    (case-replace
                                                                     "{x_1: T |
             A!1(x_1) AND
              IF NOT A!1(x_1) THEN 1 ELSE 0 ENDIF * w!1(n!1)(x_1) /= 0}=emptyset[T]")
                                                                    (("1"
                                                                      (typepred
                                                                       "mu!1")
                                                                      (("1"
                                                                        (expand
                                                                         "measure?")
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (expand
                                                                             "measure_empty?")
                                                                            (("1"
                                                                              (replace
                                                                               -1)
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide-all-but
                                                                       1)
                                                                      (("2"
                                                                        (apply-extensionality
                                                                         :hide?
                                                                         t)
                                                                        (("2"
                                                                          (expand
                                                                           "emptyset")
                                                                          (("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 2)
                                            (("2"
                                              (typepred "u!1(n!1)")
                                              (("2"
                                                (lemma
                                                 "contraction_isf"
                                                 ("mu"
                                                  "mu!1"
                                                  "A"
                                                  "A!1"
                                                  "f"
                                                  "((reals@real_fun_ops[T].*)(phi[T, S](A!1), u!1(n!1)))"))
                                                (("1"
                                                  (replace -1)
                                                  (("1"
                                                    (hide -1)
                                                    (("1"
                                                      (case-replace
                                                       "(((reals@real_fun_ops[T].*)
                (phi[T, S](A!1),
                 ((reals@real_fun_ops[T].*)
                      (phi[T, S](A!1), u!1(n!1))))))=((reals@real_fun_ops[T].*)
                      (phi[T, S](A!1), u!1(n!1)))")
                                                      (("1"
                                                        (hide -1)
                                                        (("1"
                                                          (lemma
                                                           "isf_times_simple_is_isf[T, S, mu!1]"
                                                           ("i"
                                                            "u!1(n!1)"
                                                            "h"
                                                            "phi[T,S](A!1)"))
                                                          (("1"
                                                            (expand
                                                             "*")
                                                            (("1"
                                                              (expand
                                                               "phi")
                                                              (("1"
                                                                (expand
                                                                 "member")
                                                                (("1"
                                                                  (case-replace
                                                                   "(LAMBDA (x: T): u!1(n!1)(x) * IF A!1(x) THEN 1 ELSE 0 ENDIF)=(LAMBDA (x: T): IF A!1(x) THEN 1 ELSE 0 ENDIF * u!1(n!1)(x))")
                                                                  (("1"
                                                                    (apply-extensionality
                                                                     :hide?
                                                                     t)
                                                                    (("1"
                                                                      (case-replace
                                                                       "A!1(x!1)")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (rewrite
                                                             "phi_is_simple"
                                                             1)
                                                            (("2"
                                                              (typepred
                                                               "A!1")
                                                              (("2"
                                                                (expand
                                                                 "measurable_set?")
                                                                (("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         1)
                                                        (("2"
                                                          (apply-extensionality
                                                           :hide?
                                                           t)
                                                          (("2"
                                                            (expand
                                                             "*")
                                                            (("2"
                                                              (expand
                                                               "phi")
                                                              (("2"
                                                                (expand
                                                                 "member")
                                                                (("2"
                                                                  (case-replace
                                                                   "A!1(x!1)")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand "isf?")
                                                  (("2"
                                                    (hide 2)
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (rewrite
                                                         "simple_times")
                                                        (("2"
                                                          (rewrite
                                                           "phi_is_simple")
                                                          (("2"
                                                            (typepred
                                                             "A!1")
                                                            (("2"
                                                              (expand
                                                               "measurable_set?")
                                                              (("2"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (skosimp)
                                          (("2"
                                            (expand "+")
                                            (("2"
                                              (expand "*")
                                              (("2"
                                                (hide-all-but 1)
                                                (("2"
                                                  (expand "phi")
                                                  (("2"
                                                    (expand
                                                     "complement")
                                                    (("2"
                                                      (expand "member")
                                                      (("2"
                                                        (case-replace
                                                         "A!1(x!1)")
                                                        (("1"
                                                          (typepred
                                                           "u!1(n!1)")
                                                          (("1"
                                                            (expand
                                                             "nn_isf?")
                                                            (("1"
                                                              (inst
                                                               -
                                                               "x!1")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          (("2"
                                                            (typepred
                                                             "w!1")
                                                            (("2"
                                                              (expand
                                                               "increasing_nn_simple?")
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (expand
                                                                   "nn_simple?")
                                                                  (("2"
                                                                    (inst
                                                                     -
                                                                     "n!1")
                                                                    (("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (inst
                                                                         -
                                                                         "x!1")
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nn_measurable_def formula-decl nil measure_space nil)
    (isf_add judgement-tcc nil isf nil)
    (isf_integral_add formula-decl nil isf nil)
    (mu const-decl "nnreal" measure_props nil)
    (singleton const-decl "(singleton?)" sets nil)
    (singleton? const-decl "bool" sets nil)
    (fullset const-decl "set" sets nil)
    (countable_set nonempty-type-eq-decl nil countability sets_aux)
    (is_countable const-decl "bool" countability sets_aux)
    (sigma_zero formula-decl nil sigma_countable sigma_set)
    (measure_empty? const-decl "bool" generalized_measure_def nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (emptyset const-decl "set" sets nil)
    (isf_times_simple_is_isf judgement-tcc nil isf nil)
    (phi_is_simple judgement-tcc nil measure_space nil)
    (metric? const-decl "bool" metric_def metric_space)
    (metric_zero? const-decl "bool" metric_def metric_space)
    (metric_symmetric? const-decl "bool" metric_def metric_space)
    (metric_triangle? const-decl "bool" metric_def metric_space)
    (measurable_intersection judgement-tcc nil measure_space_def nil)
    (nonzero_measurable formula-decl nil isf nil)
    (x_le const-decl "bool" extended_nnreal extended_nnreal)
    (subset? const-decl "bool" sets nil)
    (nonzero_set? const-decl "set[T]" isf nil)
    (intersection const-decl "set" sets nil)
    (m_monotone formula-decl nil measure_props nil)
    (mu_fin? const-decl "bool" measure_props nil)
    (metric_convergence_def formula-decl nil metric_space metric_space)
    (ball const-decl "set[T]" metric_space_def metric_space)
    (metric_converges_to const-decl "bool" metric_space_def
     metric_space)
    (nn_simple? const-decl "bool" measure_space nil)
    (simple_times judgement-tcc nil measure_space nil)
    (measurable_complement judgement-tcc nil measure_space_def nil)
    (complement const-decl "set" sets nil)
    (measurable_function? const-decl "bool" measure_space_def nil)
    (measurable_function nonempty-type-eq-decl nil measure_space_def
     nil)
    (increasing_nn_simple? const-decl "bool" measure_space nil)
    (increasing_nn_simple nonempty-type-eq-decl nil measure_space nil)
    (pointwise_converges_upto? const-decl "bool" pointwise_convergence
     nil)
    (nn_measurable? const-decl "bool" measure_space nil)
    (nn_measurable nonempty-type-eq-decl nil measure_space nil)
    (metric_induced_topology_is_second_countable name-judgement
     "second_countable" real_topology metric_space)
    (increasing? const-decl "bool" real_fun_preds reals)
    (pointwise_increasing? const-decl "bool" pointwise_convergence nil)
    (member const-decl "bool" sets nil)
    (convergence? const-decl "bool" topological_convergence topology)
    (pointwise_convergence? const-decl "bool" pointwise_convergence
     nil)
    (convergent? const-decl "bool" topological_convergence topology)
    (isf_integral const-decl "real" isf nil)
    (simple? const-decl "bool" measure_space nil)
    (simple nonempty-type-eq-decl nil measure_space nil)
    (setofsets type-eq-decl nil sets nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (measure? const-decl "bool" generalized_measure_def nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     nil)
    (isf? const-decl "bool" isf nil) (set type-eq-decl nil sets nil)
    (phi const-decl "nat" measure_space nil)
    (measurable_set? const-decl "bool" measure_space_def nil)
    (measurable_set nonempty-type-eq-decl nil measure_space_def nil)
    (isf nonempty-type-eq-decl nil isf nil)
    (nn_isf? const-decl "bool" nn_integral nil)
    (nn_isf nonempty-type-eq-decl nil nn_integral nil)
    (sequence type-eq-decl nil sequences nil)
    (increasing_nn_isf? const-decl "bool" nn_integral nil)
    (increasing_nn_isf nonempty-type-eq-decl nil nn_integral nil)
    (nn_integrable? const-decl "bool" nn_integral nil))
   shostak))
 (contraction_nn_integral_TCC1 0
  (contraction_nn_integral_TCC1-1 nil 3431698665
   ("" (skosimp)
    (("" (split)
      (("1" (grind) nil nil)
       ("2" (typepred "f!1")
        (("2" (rewrite "contraction_nn_integrable")
          (("2" (hide 2)
            (("2" (expand "nn_measurable?")
              (("2" (split)
                (("1"
                  (lemma
                   "nn_integrable_is_measurable[T, S, contraction(mu!1, A!1)]")
                  (("1" (inst - "f!1") nil nil)) nil)
                 ("2" (skosimp)
                  (("2" (hide -1) (("2" (grind) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (member const-decl "bool" sets nil)
    (phi const-decl "nat" measure_space nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (contraction_nn_integrable formula-decl nil measure_contraction
     nil)
    (nn_measurable? const-decl "bool" measure_space nil)
    (nn_measurable nonempty-type-eq-decl nil measure_space nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nn_integrable_is_measurable judgement-tcc nil nn_integral nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil measure_contraction nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (setof type-eq-decl nil defined_types nil)
    (setofsets type-eq-decl nil sets nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (S formal-const-decl "sigma_algebra" measure_contraction nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (measure? const-decl "bool" generalized_measure_def nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     nil)
    (set type-eq-decl nil sets nil)
    (measurable_set? const-decl "bool" measure_space_def nil)
    (measurable_set nonempty-type-eq-decl nil measure_space_def nil)
    (contraction const-decl "measure_type" measure_contraction nil)
    (nn_integrable? const-decl "bool" nn_integral nil)
    (nn_integrable nonempty-type-eq-decl nil nn_integral nil))
   nil
   (contraction_nn_integral subtype
    "((reals@real_fun_ops[measure_contraction.T].*)(measure_space[measure_contraction.T, measure_contraction.S].phi(measure_contraction.A), measure_contraction.f))"
    "nn_integrable[T, S, mu]")))
 (contraction_nn_integral 0
  (contraction_nn_integral-3 "" 3789904254
   ("" (skosimp)
    (("" (typepred "f!1")
      ((""
        (lemma "contraction_nn_integrable"
         ("mu" "mu!1" "A" "A!1" "f" "f!1"))
        (("1" (assert)
          (("1" (expand "nn_integrable?")
            (("1" (skosimp*)
              (("1" (expand "nn_integral")
                (("1" (typepred "u!2")
                  (("1" (typepred "u!1")
                    (("1"
                      (lemma "choose_member"
                       ("a"
                        "{u: increasing_nn_isf[T, S, contraction(mu!1, A!1)] |
                      pointwise_convergence?(u, f!1)}"))
                      (("1"
                        (case "nonempty?[increasing_nn_isf[T, S, contraction(mu!1, A!1)]]
          ({u: increasing_nn_isf[T, S, contraction(mu!1, A!1)] |
              pointwise_convergence?[T](u, f!1)})")
                        (("1"
                          (name-replace "U2"
                           "choose({u: increasing_nn_isf[T, S, contraction(mu!1, A!1)] |
                      pointwise_convergence?(u, f!1)})")
                          (("1" (split -2)
                            (("1" (expand "member")
                              (("1"
                                (hide -2)
                                (("1"
                                  (lemma
                                   "nn_convergence[T,S,contraction(mu!1,A!1)]"
                                   ("u1" "u!2" "u2" "U2" "f" "f!1"))
                                  (("1"
                                    (replace -8)
                                    (("1"
                                      (replace -7)
                                      (("1"
                                        (replace -2)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (typepred "U2")
                                            (("1"
                                              (hide -4 -5 -7 -10 -11)
                                              (("1"
                                                (case
                                                 "nonempty?({u: increasing_nn_isf[T, S, mu!1] |
                       pointwise_convergence?(u,
                                              ((reals@real_fun_ops
                                                [T].*)
                                               (phi[T, S](A!1), f!1)))})")
                                                (("1"
                                                  (lemma
                                                   "choose_member"
                                                   ("a"
                                                    "{u: increasing_nn_isf[T, S, mu!1] |
                       pointwise_convergence?(u,
                                              ((reals@real_fun_ops
                                                [T].*)
                                               (phi[T, S](A!1), f!1)))}"))
                                                  (("1"
                                                    (split -1)
                                                    (("1"
                                                      (name-replace
                                                       "U1"
                                                       "choose({u: increasing_nn_isf[T, S, mu!1] |
                       pointwise_convergence?(u,
                                              ((reals@real_fun_ops
                                                [T].*)
                                               (phi[T, S](A!1), f!1)))})")
                                                      (("1"
                                                        (expand
                                                         "member")
                                                        (("1"
                                                          (hide -2)
                                                          (("1"
                                                            (lemma
                                                             "nn_convergence[T,S,mu!1]"
                                                             ("u1"
                                                              "u!1"
                                                              "u2"
                                                              "U1"
                                                              "f"
                                                              "phi[T, S](A!1)* f!1"))
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (typepred
                                                                   "U1")
                                                                  (("1"
                                                                    (hide
                                                                     -2
                                                                     -4
                                                                     -9
                                                                     -10
                                                                     -11)
                                                                    (("1"
                                                                      (lemma
                                                                       "nn_convergence[T,S,mu!1]"
                                                                       ("f"
                                                                        "phi[T, S](A!1)* f!1"
                                                                        "u1"
                                                                        "U1"
                                                                        "u2"
                                                                        "lambda (n:nat): phi[T, S](A!1)*U2(n)"))
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (split
                                                                           -1)
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (replace
                                                                               -2)
                                                                              (("1"
                                                                                (hide
                                                                                 -1
                                                                                 -2
                                                                                 -3
                                                                                 -4
                                                                                 -5)
                                                                                (("1"
                                                                                  (expand
                                                                                   "o")
                                                                                  (("1"
                                                                                    (case
                                                                                     "FORALL (n: nat):
        isf?[T, S, mu!1]
            (((reals@real_fun_ops[T].*)(phi[T, S](A!1), U2(n))))")
                                                                                    (("1"
                                                                                      (case-replace
                                                                                       "(LAMBDA (x: nat): isf_integral[T,S,contraction(mu!1,A!1)](U2(x)))=(LAMBDA (x: nat):
              isf_integral[T,S,mu!1](((reals@real_fun_ops[T].*)
                                (phi[T, S](A!1), U2(x)))))")
                                                                                      (("1"
                                                                                        (hide
                                                                                         2)
                                                                                        (("1"
                                                                                          (apply-extensionality
                                                                                           :hide?
                                                                                           t)
                                                                                          (("1"
                                                                                            (rewrite
                                                                                             "contraction_isf_integral")
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide
                                                                                       2
                                                                                       -3)
                                                                                      (("2"
                                                                                        (skosimp)
                                                                                        (("2"
                                                                                          (typepred
                                                                                           "U2(n!1)")
                                                                                          (("2"
                                                                                            (lemma
                                                                                             "contraction_isf"
                                                                                             ("mu"
                                                                                              "mu!1"
                                                                                              "A"
                                                                                              "A!1"
                                                                                              "f"
                                                                                              "U2(n!1)"))
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide-all-but
                                                                             (-5
                                                                              1))
                                                                            (("2"
                                                                              (expand
                                                                               "pointwise_convergence?")
                                                                              (("2"
                                                                                (skosimp)
                                                                                (("2"
                                                                                  (inst
                                                                                   -
                                                                                   "x!1")
                                                                                  (("2"
                                                                                    (rewrite
                                                                                     "metric_convergence_def")
                                                                                    (("2"
                                                                                      (rewrite
                                                                                       "metric_convergence_def")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "metric_converges_to")
                                                                                        (("2"
                                                                                          (skosimp)
                                                                                          (("2"
                                                                                            (inst
                                                                                             -
                                                                                             "r!1")
                                                                                            (("2"
                                                                                              (skosimp)
                                                                                              (("2"
                                                                                                (inst
                                                                                                 +
                                                                                                 "n!1")
                                                                                                (("2"
                                                                                                  (skosimp)
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     -
                                                                                                     "i!1")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "ball")
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "*")
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "phi")
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "member")
                                                                                                              (("2"
                                                                                                                (case-replace
                                                                                                                 "A!1(x!1)")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide-all-but
                                                                         (-4
                                                                          1))
                                                                        (("2"
                                                                          (expand
                                                                           "increasing_nn_isf?")
                                                                          (("2"
                                                                            (expand
                                                                             "pointwise_increasing?")
                                                                            (("2"
                                                                              (skosimp)
                                                                              (("2"
                                                                                (inst
                                                                                 -
                                                                                 "x!1")
                                                                                (("2"
                                                                                  (expand
                                                                                   "increasing?")
                                                                                  (("2"
                                                                                    (skolem
                                                                                     +
                                                                                     ("i!1"
                                                                                      "j!1"))
                                                                                    (("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (inst
                                                                                         -
                                                                                         "i!1"
                                                                                         "j!1")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "*")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "phi")
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "member")
                                                                                                (("2"
                                                                                                  (case-replace
                                                                                                   "A!1(x!1)")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("3"
                                                                        (hide-all-but
                                                                         (-4
                                                                          1))
                                                                        (("3"
                                                                          (skosimp)
                                                                          (("3"
                                                                            (expand
                                                                             "nn_isf?")
                                                                            (("3"
                                                                              (split)
                                                                              (("1"
                                                                                (typepred
                                                                                 "U2(n!1)")
                                                                                (("1"
                                                                                  (lemma
                                                                                   "contraction_isf"
                                                                                   ("mu"
                                                                                    "mu!1"
                                                                                    "A"
                                                                                    "A!1"
                                                                                    "f"
                                                                                    "U2(n!1)"))
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide
                                                                                 -1)
                                                                                (("2"
                                                                                  (typepred
                                                                                   "U2(n!1)")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "nn_isf?")
                                                                                    (("2"
                                                                                      (skosimp)
                                                                                      (("2"
                                                                                        (inst
                                                                                         -
                                                                                         "x!1")
                                                                                        (("2"
                                                                                          (hide
                                                                                           -1)
                                                                                          (("2"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("4"
                                                                        (hide-all-but
                                                                         1)
                                                                        (("4"
                                                                          (skosimp)
                                                                          (("4"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide-all-but
                                                               1)
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       "nonempty?")
                                                      (("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 2)
                                                  (("2"
                                                    (expand
                                                     "nonempty?")
                                                    (("2"
                                                      (expand "empty?")
                                                      (("2"
                                                        (expand
                                                         "member")
                                                        (("2"
                                                          (inst
                                                           -
                                                           "u!1")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "nonempty?")
                              (("2" (propax) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (hide-all-but (-6 -7 1))
                          (("2" (expand "nonempty?")
                            (("2" (expand "empty?")
                              (("2"
                                (inst - "u!2")
                                (("2"
                                  (expand "member")
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "nn_measurable?")
          (("2" (split)
            (("1"
              (lemma
               "nn_integrable_is_measurable[T,S,contraction(mu!1, A!1)]")
              (("1" (inst - "f!1") nil nil)) nil)
             ("2" (skosimp)
              (("2" (typepred "f!1(x!1)") (("2" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nn_integrable nonempty-type-eq-decl nil nn_integral nil)
    (nn_integrable? const-decl "bool" nn_integral nil)
    (contraction const-decl "measure_type" measure_contraction nil)
    (measurable_set nonempty-type-eq-decl nil measure_space_def nil)
    (measurable_set? const-decl "bool" measure_space_def nil)
    (set type-eq-decl nil sets nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     nil)
    (measure? const-decl "bool" generalized_measure_def nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (S formal-const-decl "sigma_algebra" measure_contraction nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-type-decl nil measure_contraction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nn_integrable_is_measurable judgement-tcc nil nn_integral nil)
    (increasing_nn_isf nonempty-type-eq-decl nil nn_integral nil)
    (increasing_nn_isf? const-decl "bool" nn_integral nil)
    (sequence type-eq-decl nil sequences nil)
    (nn_isf nonempty-type-eq-decl nil nn_integral nil)
    (nn_isf? const-decl "bool" nn_integral nil)
    (isf nonempty-type-eq-decl nil isf nil)
    (isf? const-decl "bool" isf nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (choose_member formula-decl nil sets_lemmas nil)
    (pointwise_convergence? const-decl "bool" pointwise_convergence
     nil)
    (choose const-decl "(p)" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (member const-decl "bool" sets nil)
    (nn_convergence formula-decl nil nn_integral nil)
    (empty? const-decl "bool" sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (O const-decl "T3" function_props nil)
    (simple nonempty-type-eq-decl nil measure_space nil)
    (simple? const-decl "bool" measure_space nil)
    (contraction_isf formula-decl nil measure_contraction nil)
    (isf_integral const-decl "real" isf nil)
    (U2 skolem-const-decl
     "({u: increasing_nn_isf[T, S, contraction(mu!1, A!1)] |
    pointwise_convergence?(u, f!1)})" measure_contraction nil)
    (f!1 skolem-const-decl
     "nn_integrable[T, S, contraction(mu!1, A!1)]" measure_contraction
     nil)
    (A!1 skolem-const-decl "measurable_set[T, S]" measure_contraction
     nil)
    (mu!1 skolem-const-decl "measure_type[T, S]" measure_contraction
     nil)
    (contraction_isf_integral formula-decl nil measure_contraction nil)
    (ball_is_metric_open application-judgement "metric_open"
     convergence_aux metric_space)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (abs_nat formula-decl nil abs_lems reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (ball const-decl "set[T]" metric_space_def metric_space)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (metric_converges_to const-decl "bool" metric_space_def
     metric_space)
    (metric_convergence_def formula-decl nil metric_space metric_space)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (increasing? const-decl "bool" real_fun_preds reals)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (pointwise_increasing? const-decl "bool" pointwise_convergence nil)
    (phi const-decl "nat" measure_space nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (nonempty? const-decl "bool" sets nil)
    (nn_integral const-decl "nnreal" nn_integral nil)
    (contraction_nn_integrable formula-decl nil measure_contraction
     nil)
    (nn_measurable? const-decl "bool" measure_space nil)
    (nn_measurable nonempty-type-eq-decl nil measure_space nil))
   shostak)
  (contraction_nn_integral-2 "" 3758904392
   ("" (skosimp)
    (("" (typepred "f!1")
      ((""
        (lemma "contraction_nn_integrable"
         ("mu" "mu!1" "A" "A!1" "f" "f!1"))
        (("1" (assert)
          (("1" (expand "nn_integrable?")
            (("1" (skosimp*)
              (("1" (expand "nn_integral")
                (("1" (typepred "u!2")
                  (("1" (typepred "u!1")
                    (("1"
                      (lemma "choose_member"
                       ("a"
                        "{u: increasing_nn_isf[T, S, contraction(mu!1, A!1)] |
                      pointwise_convergence?(u, f!1)}"))
                      (("1"
                        (case "nonempty?[increasing_nn_isf[T, S, contraction(mu!1, A!1)]]
          ({u: increasing_nn_isf[T, S, contraction(mu!1, A!1)] |
              pointwise_convergence?[T](u, f!1)})")
                        (("1"
                          (name-replace "U2"
                           "choose({u: increasing_nn_isf[T, S, contraction(mu!1, A!1)] |
                      pointwise_convergence?(u, f!1)})")
                          (("1" (split -2)
                            (("1" (expand "member")
                              (("1"
                                (hide -2)
                                (("1"
                                  (lemma
                                   "nn_convergence[T,S,contraction(mu!1,A!1)]"
                                   ("u1" "u!2" "u2" "U2" "f" "f!1"))
                                  (("1"
                                    (replace -8)
                                    (("1"
                                      (replace -7)
                                      (("1"
                                        (replace -2)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (typepred "U2")
                                            (("1"
                                              (hide -4 -5 -7 -10 -11)
                                              (("1"
                                                (case
                                                 "nonempty?({u: increasing_nn_isf[T, S, mu!1] |
                       pointwise_convergence?(u,
                                              ((reals@real_fun_ops
                                                [T].*)
                                               (phi[T, S](A!1), f!1)))})")
                                                (("1"
                                                  (lemma
                                                   "choose_member"
                                                   ("a"
                                                    "{u: increasing_nn_isf[T, S, mu!1] |
                       pointwise_convergence?(u,
                                              ((reals@real_fun_ops
                                                [T].*)
                                               (phi[T, S](A!1), f!1)))}"))
                                                  (("1"
                                                    (split -1)
                                                    (("1"
                                                      (name-replace
                                                       "U1"
                                                       "choose({u: increasing_nn_isf[T, S, mu!1] |
                       pointwise_convergence?(u,
                                              ((reals@real_fun_ops
                                                [T].*)
                                               (phi[T, S](A!1), f!1)))})")
                                                      (("1"
                                                        (expand
                                                         "member")
                                                        (("1"
                                                          (hide -2)
                                                          (("1"
                                                            (lemma
                                                             "nn_convergence[T,S,mu!1]"
                                                             ("u1"
                                                              "u!1"
                                                              "u2"
                                                              "U1"
                                                              "f"
                                                              "phi[T, S](A!1)* f!1"))
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (typepred
                                                                   "U1")
                                                                  (("1"
                                                                    (hide
                                                                     -2
                                                                     -4
                                                                     -9
                                                                     -10
                                                                     -11)
                                                                    (("1"
                                                                      (lemma
                                                                       "nn_convergence[T,S,mu!1]"
                                                                       ("f"
                                                                        "phi[T, S](A!1)* f!1"
                                                                        "u1"
                                                                        "U1"
                                                                        "u2"
                                                                        "lambda (n:nat): phi[T, S](A!1)*U2(n)"))
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (split
                                                                           -1)
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (replace
                                                                               -2)
                                                                              (("1"
                                                                                (hide
                                                                                 -1
                                                                                 -2
                                                                                 -3
                                                                                 -4
                                                                                 -5)
                                                                                (("1"
                                                                                  (expand
                                                                                   "o")
                                                                                  (("1"
                                                                                    (case
                                                                                     "FORALL (n: nat):
        isf?[T, S, mu!1]
            (((reals@real_fun_ops[T].*)(phi[T, S](A!1), U2(n))))")
                                                                                    (("1"
                                                                                      (case-replace
                                                                                       "(LAMBDA (x: nat): isf_integral[T,S,contraction(mu!1,A!1)](U2(x)))=(LAMBDA (x: nat):
              isf_integral[T,S,mu!1](((reals@real_fun_ops[T].*)
                                (phi[T, S](A!1), U2(x)))))")
                                                                                      (("1"
                                                                                        (hide
                                                                                         2)
                                                                                        (("1"
                                                                                          (apply-extensionality
                                                                                           :hide?
                                                                                           t)
                                                                                          (("1"
                                                                                            (rewrite
                                                                                             "contraction_isf_integral")
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide
                                                                                       2
                                                                                       -3)
                                                                                      (("2"
                                                                                        (skosimp)
                                                                                        (("2"
                                                                                          (typepred
                                                                                           "U2(n!1)")
                                                                                          (("2"
                                                                                            (lemma
                                                                                             "contraction_isf"
                                                                                             ("mu"
                                                                                              "mu!1"
                                                                                              "A"
                                                                                              "A!1"
                                                                                              "f"
                                                                                              "U2(n!1)"))
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide-all-but
                                                                             (-5
                                                                              1))
                                                                            (("2"
                                                                              (expand
                                                                               "pointwise_convergence?")
                                                                              (("2"
                                                                                (skosimp)
                                                                                (("2"
                                                                                  (inst
                                                                                   -
                                                                                   "x!1")
                                                                                  (("2"
                                                                                    (rewrite
                                                                                     "metric_convergence_def")
                                                                                    (("2"
                                                                                      (rewrite
                                                                                       "metric_convergence_def")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "metric_converges_to")
                                                                                        (("1"
                                                                                          (skosimp)
                                                                                          (("1"
                                                                                            (inst
                                                                                             -
                                                                                             "r!1")
                                                                                            (("1"
                                                                                              (skosimp)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 +
                                                                                                 "n!1")
                                                                                                (("1"
                                                                                                  (skosimp)
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -
                                                                                                     "i!1")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "ball")
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "*")
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "phi")
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "member")
                                                                                                              (("1"
                                                                                                                (case-replace
                                                                                                                 "A!1(x!1)")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide-all-but
                                                                                         1)
                                                                                        (("2"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide-all-but
                                                                         (-4
                                                                          1))
                                                                        (("2"
                                                                          (expand
                                                                           "increasing_nn_isf?")
                                                                          (("2"
                                                                            (expand
                                                                             "pointwise_increasing?")
                                                                            (("2"
                                                                              (skosimp)
                                                                              (("2"
                                                                                (inst
                                                                                 -
                                                                                 "x!1")
                                                                                (("2"
                                                                                  (expand
                                                                                   "increasing?")
                                                                                  (("2"
                                                                                    (skolem
                                                                                     +
                                                                                     ("i!1"
                                                                                      "j!1"))
                                                                                    (("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (inst
                                                                                         -
                                                                                         "i!1"
                                                                                         "j!1")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "*")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "phi")
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "member")
                                                                                                (("2"
                                                                                                  (case-replace
                                                                                                   "A!1(x!1)")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("3"
                                                                        (hide-all-but
                                                                         (-4
                                                                          1))
                                                                        (("3"
                                                                          (skosimp)
                                                                          (("3"
                                                                            (expand
                                                                             "nn_isf?")
                                                                            (("3"
                                                                              (split)
                                                                              (("1"
                                                                                (typepred
                                                                                 "U2(n!1)")
                                                                                (("1"
                                                                                  (lemma
                                                                                   "contraction_isf"
                                                                                   ("mu"
                                                                                    "mu!1"
                                                                                    "A"
                                                                                    "A!1"
                                                                                    "f"
                                                                                    "U2(n!1)"))
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide
                                                                                 -1)
                                                                                (("2"
                                                                                  (typepred
                                                                                   "U2(n!1)")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "nn_isf?")
                                                                                    (("2"
                                                                                      (skosimp)
                                                                                      (("2"
                                                                                        (inst
                                                                                         -
                                                                                         "x!1")
                                                                                        (("2"
                                                                                          (hide
                                                                                           -1)
                                                                                          (("2"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("4"
                                                                        (hide-all-but
                                                                         1)
                                                                        (("4"
                                                                          (skosimp)
                                                                          (("4"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide-all-but
                                                               1)
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       "nonempty?")
                                                      (("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 2)
                                                  (("2"
                                                    (expand
                                                     "nonempty?")
                                                    (("2"
                                                      (expand "empty?")
                                                      (("2"
                                                        (expand
                                                         "member")
                                                        (("2"
                                                          (inst
                                                           -
                                                           "u!1")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "nonempty?")
                              (("2" (propax) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (hide-all-but (-6 -7 1))
                          (("2" (expand "nonempty?")
                            (("2" (expand "empty?")
                              (("2"
                                (inst - "u!2")
                                (("2"
                                  (expand "member")
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "nn_measurable?")
          (("2" (split)
            (("1"
              (lemma
               "nn_integrable_is_measurable[T,S,contraction(mu!1, A!1)]")
              (("1" (inst - "f!1") nil nil)) nil)
             ("2" (skosimp)
              (("2" (typepred "f!1(x!1)") (("2" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nn_integrable nonempty-type-eq-decl nil nn_integral nil)
    (nn_integrable? const-decl "bool" nn_integral nil)
    (measurable_set nonempty-type-eq-decl nil measure_space_def nil)
    (measurable_set? const-decl "bool" measure_space_def nil)
    (set type-eq-decl nil sets nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     nil)
    (measure? const-decl "bool" generalized_measure_def nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (setofsets type-eq-decl nil sets nil)
    (nn_integrable_is_measurable judgement-tcc nil nn_integral nil)
    (increasing_nn_isf nonempty-type-eq-decl nil nn_integral nil)
    (increasing_nn_isf? const-decl "bool" nn_integral nil)
    (sequence type-eq-decl nil sequences nil)
    (nn_isf nonempty-type-eq-decl nil nn_integral nil)
    (nn_isf? const-decl "bool" nn_integral nil)
    (isf nonempty-type-eq-decl nil isf nil)
    (isf? const-decl "bool" isf nil)
    (pointwise_convergence? const-decl "bool" pointwise_convergence
     nil)
    (choose const-decl "(p)" sets nil)
    (member const-decl "bool" sets nil)
    (nn_convergence formula-decl nil nn_integral nil)
    (empty? const-decl "bool" sets nil)
    (simple nonempty-type-eq-decl nil measure_space nil)
    (simple? const-decl "bool" measure_space nil)
    (isf_integral const-decl "real" isf nil)
    (abs_nat formula-decl nil abs_lems reals)
    (ball const-decl "set[T]" metric_space_def metric_space)
    (metric_converges_to const-decl "bool" metric_space_def
     metric_space)
    (metric_convergence_def formula-decl nil metric_space metric_space)
    (increasing? const-decl "bool" real_fun_preds reals)
    (pointwise_increasing? const-decl "bool" pointwise_convergence nil)
    (phi const-decl "nat" measure_space nil)
    (nonempty? const-decl "bool" sets nil)
    (nn_integral const-decl "nnreal" nn_integral nil)
    (nn_measurable? const-decl "bool" measure_space nil)
    (nn_measurable nonempty-type-eq-decl nil measure_space nil))
   shostak)
  (contraction_nn_integral-1 nil 3431732558
   ("" (skosimp)
    (("" (typepred "f!1")
      ((""
        (lemma "contraction_nn_integrable"
         ("mu" "mu!1" "A" "A!1" "f" "f!1"))
        (("1" (assert)
          (("1" (expand "nn_integrable?")
            (("1" (skosimp*)
              (("1" (expand "nn_integral")
                (("1" (typepred "u!2")
                  (("1" (typepred "u!1")
                    (("1"
                      (lemma "choose_member"
                       ("a"
                        "{u: increasing_nn_isf[T, S, contraction(mu!1, A!1)] |
                      pointwise_convergence?(u, f!1)}"))
                      (("1"
                        (case "nonempty?[increasing_nn_isf[T, S, contraction(mu!1, A!1)]]
          ({u: increasing_nn_isf[T, S, contraction(mu!1, A!1)] |
              pointwise_convergence?[T](u, f!1)})")
                        (("1"
                          (name-replace "U2"
                           "choose({u: increasing_nn_isf[T, S, contraction(mu!1, A!1)] |
                      pointwise_convergence?(u, f!1)})")
                          (("1" (split -2)
                            (("1" (expand "member")
                              (("1"
                                (hide -2)
                                (("1"
                                  (lemma
                                   "nn_convergence[T,S,contraction(mu!1,A!1)]"
                                   ("u1" "u!2" "u2" "U2" "f" "f!1"))
                                  (("1"
                                    (replace -8)
                                    (("1"
                                      (replace -7)
                                      (("1"
                                        (replace -2)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (typepred "U2")
                                            (("1"
                                              (hide -4 -5 -7 -10 -11)
                                              (("1"
                                                (case
                                                 "nonempty?({u: increasing_nn_isf[T, S, mu!1] |
                       pointwise_convergence?(u,
                                              ((reals@real_fun_ops
                                                [T].*)
                                               (phi[T, S](A!1), f!1)))})")
                                                (("1"
                                                  (lemma
                                                   "choose_member"
                                                   ("a"
                                                    "{u: increasing_nn_isf[T, S, mu!1] |
                       pointwise_convergence?(u,
                                              ((reals@real_fun_ops
                                                [T].*)
                                               (phi[T, S](A!1), f!1)))}"))
                                                  (("1"
                                                    (split -1)
                                                    (("1"
                                                      (name-replace
                                                       "U1"
                                                       "choose({u: increasing_nn_isf[T, S, mu!1] |
                       pointwise_convergence?(u,
                                              ((reals@real_fun_ops
                                                [T].*)
                                               (phi[T, S](A!1), f!1)))})")
                                                      (("1"
                                                        (expand
                                                         "member")
                                                        (("1"
                                                          (hide -2)
                                                          (("1"
                                                            (lemma
                                                             "nn_convergence[T,S,mu!1]"
                                                             ("u1"
                                                              "u!1"
                                                              "u2"
                                                              "U1"
                                                              "f"
                                                              "phi[T, S](A!1)* f!1"))
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (typepred
                                                                   "U1")
                                                                  (("1"
                                                                    (hide
                                                                     -2
                                                                     -4
                                                                     -9
                                                                     -10
                                                                     -11)
                                                                    (("1"
                                                                      (lemma
                                                                       "nn_convergence[T,S,mu!1]"
                                                                       ("f"
                                                                        "phi[T, S](A!1)* f!1"
                                                                        "u1"
                                                                        "U1"
                                                                        "u2"
                                                                        "lambda (n:nat): phi[T, S](A!1)*U2(n)"))
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (split
                                                                           -1)
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (replace
                                                                               -2)
                                                                              (("1"
                                                                                (hide
                                                                                 -1
                                                                                 -2
                                                                                 -3
                                                                                 -4
                                                                                 -5)
                                                                                (("1"
                                                                                  (expand
                                                                                   "o")
                                                                                  (("1"
                                                                                    (case
                                                                                     "FORALL (n: nat):
        isf?[T, S, mu!1]
            (((reals@real_fun_ops[T].*)(phi[T, S](A!1), U2(n))))")
                                                                                    (("1"
                                                                                      (case-replace
                                                                                       "(LAMBDA (x: nat): isf_integral[T,S,contraction(mu!1,A!1)](U2(x)))=(LAMBDA (x: nat):
              isf_integral[T,S,mu!1](((reals@real_fun_ops[T].*)
                                (phi[T, S](A!1), U2(x)))))")
                                                                                      (("1"
                                                                                        (hide
                                                                                         2)
                                                                                        (("1"
                                                                                          (apply-extensionality
                                                                                           :hide?
                                                                                           t)
                                                                                          (("1"
                                                                                            (rewrite
                                                                                             "contraction_isf_integral")
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide
                                                                                       2
                                                                                       -3)
                                                                                      (("2"
                                                                                        (skosimp)
                                                                                        (("2"
                                                                                          (typepred
                                                                                           "U2(n!1)")
                                                                                          (("2"
                                                                                            (lemma
                                                                                             "contraction_isf"
                                                                                             ("mu"
                                                                                              "mu!1"
                                                                                              "A"
                                                                                              "A!1"
                                                                                              "f"
                                                                                              "U2(n!1)"))
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide-all-but
                                                                             (-5
                                                                              1))
                                                                            (("2"
                                                                              (expand
                                                                               "pointwise_convergence?")
                                                                              (("2"
                                                                                (skosimp)
                                                                                (("2"
                                                                                  (inst
                                                                                   -
                                                                                   "x!1")
                                                                                  (("2"
                                                                                    (rewrite
                                                                                     "metric_convergence_def")
                                                                                    (("2"
                                                                                      (rewrite
                                                                                       "metric_convergence_def")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "metric_converges_to")
                                                                                        (("2"
                                                                                          (skosimp)
                                                                                          (("2"
                                                                                            (inst
                                                                                             -
                                                                                             "r!1")
                                                                                            (("2"
                                                                                              (skosimp)
                                                                                              (("2"
                                                                                                (inst
                                                                                                 +
                                                                                                 "n!1")
                                                                                                (("2"
                                                                                                  (skosimp)
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     -
                                                                                                     "i!1")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "ball")
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "*")
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "phi")
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "member")
                                                                                                              (("2"
                                                                                                                (case-replace
                                                                                                                 "A!1(x!1)")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (assert)
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "abs")
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide-all-but
                                                                         (-4
                                                                          1))
                                                                        (("2"
                                                                          (expand
                                                                           "increasing_nn_isf?")
                                                                          (("2"
                                                                            (expand
                                                                             "pointwise_increasing?")
                                                                            (("2"
                                                                              (skosimp)
                                                                              (("2"
                                                                                (inst
                                                                                 -
                                                                                 "x!1")
                                                                                (("2"
                                                                                  (expand
                                                                                   "increasing?")
                                                                                  (("2"
                                                                                    (skolem
                                                                                     +
                                                                                     ("i!1"
                                                                                      "j!1"))
                                                                                    (("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (inst
                                                                                         -
                                                                                         "i!1"
                                                                                         "j!1")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "*")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "phi")
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "member")
                                                                                                (("2"
                                                                                                  (case-replace
                                                                                                   "A!1(x!1)")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("3"
                                                                        (hide-all-but
                                                                         (-4
                                                                          1))
                                                                        (("3"
                                                                          (skosimp)
                                                                          (("3"
                                                                            (expand
                                                                             "nn_isf?")
                                                                            (("3"
                                                                              (split)
                                                                              (("1"
                                                                                (typepred
                                                                                 "U2(n!1)")
                                                                                (("1"
                                                                                  (lemma
                                                                                   "contraction_isf"
                                                                                   ("mu"
                                                                                    "mu!1"
                                                                                    "A"
                                                                                    "A!1"
                                                                                    "f"
                                                                                    "U2(n!1)"))
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide
                                                                                 -1)
                                                                                (("2"
                                                                                  (typepred
                                                                                   "U2(n!1)")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "nn_isf?")
                                                                                    (("2"
                                                                                      (skosimp)
                                                                                      (("2"
                                                                                        (inst
                                                                                         -
                                                                                         "x!1")
                                                                                        (("2"
                                                                                          (hide
                                                                                           -1)
                                                                                          (("2"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("4"
                                                                        (hide-all-but
                                                                         1)
                                                                        (("4"
                                                                          (skosimp)
                                                                          (("4"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide-all-but
                                                               1)
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       "nonempty?")
                                                      (("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 2)
                                                  (("2"
                                                    (expand
                                                     "nonempty?")
                                                    (("2"
                                                      (expand "empty?")
                                                      (("2"
                                                        (expand
                                                         "member")
                                                        (("2"
                                                          (inst
                                                           -
                                                           "u!1")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "nonempty?")
                              (("2" (propax) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (hide-all-but (-6 -7 1))
                          (("2" (expand "nonempty?")
                            (("2" (expand "empty?")
                              (("2"
                                (inst - "u!2")
                                (("2"
                                  (expand "member")
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "nn_measurable?")
          (("2" (split)
            (("1"
              (lemma
               "nn_integrable_is_measurable[T,S,contraction(mu!1, A!1)]")
              (("1" (inst - "f!1") nil nil)) nil)
             ("2" (skosimp)
              (("2" (typepred "f!1(x!1)") (("2" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nn_measurable nonempty-type-eq-decl nil measure_space nil)
    (nn_measurable? const-decl "bool" measure_space nil)
    (nn_integral const-decl "nnreal" nn_integral nil)
    (nonempty? const-decl "bool" sets nil)
    (phi const-decl "nat" measure_space nil)
    (pointwise_increasing? const-decl "bool" pointwise_convergence nil)
    (increasing? const-decl "bool" real_fun_preds reals)
    (metric_convergence_def formula-decl nil metric_space metric_space)
    (metric_triangle? const-decl "bool" metric_def metric_space)
    (metric_symmetric? const-decl "bool" metric_def metric_space)
    (metric_zero? const-decl "bool" metric_def metric_space)
    (metric_induced_topology_is_second_countable name-judgement
     "second_countable" real_topology metric_space)
    (metric_converges_to const-decl "bool" metric_space_def
     metric_space)
    (ball const-decl "set[T]" metric_space_def metric_space)
    (abs_nat formula-decl nil abs_lems reals)
    (metric? const-decl "bool" metric_def metric_space)
    (isf_integral const-decl "real" isf nil)
    (simple? const-decl "bool" measure_space nil)
    (simple nonempty-type-eq-decl nil measure_space nil)
    (empty? const-decl "bool" sets nil)
    (nn_convergence formula-decl nil nn_integral nil)
    (member const-decl "bool" sets nil)
    (choose const-decl "(p)" sets nil)
    (pointwise_convergence? const-decl "bool" pointwise_convergence
     nil)
    (isf? const-decl "bool" isf nil)
    (isf nonempty-type-eq-decl nil isf nil)
    (nn_isf? const-decl "bool" nn_integral nil)
    (nn_isf nonempty-type-eq-decl nil nn_integral nil)
    (sequence type-eq-decl nil sequences nil)
    (increasing_nn_isf? const-decl "bool" nn_integral nil)
    (increasing_nn_isf nonempty-type-eq-decl nil nn_integral nil)
    (nn_integrable_is_measurable judgement-tcc nil nn_integral nil)
    (setofsets type-eq-decl nil sets nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (measure? const-decl "bool" generalized_measure_def nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     nil)
    (set type-eq-decl nil sets nil)
    (measurable_set? const-decl "bool" measure_space_def nil)
    (measurable_set nonempty-type-eq-decl nil measure_space_def nil)
    (nn_integrable? const-decl "bool" nn_integral nil)
    (nn_integrable nonempty-type-eq-decl nil nn_integral nil))
   shostak))
 (contraction_integrable 0
  (contraction_integrable-1 nil 3431410319
   ("" (skosimp)
    (("" (rewrite "integrable_pm_def[T, S, contraction(mu!1, A!1)]")
      (("" (rewrite "integrable_pm_def[T, S, mu!1]")
        ((""
          (case-replace "plus(((reals@real_fun_ops[T].*)
                              (phi[T, S](A!1), f!1)))=phi[T, S](A!1)*plus(f!1)")
          (("1" (hide -1)
            (("1"
              (case-replace "minus(((reals@real_fun_ops[T].*)
                              (phi[T, S](A!1), f!1)))=phi[T, S](A!1)*minus(f!1)")
              (("1" (hide -1)
                (("1"
                  (lemma
                   "nn_integrable_is_nn_integrable[T,S,contraction(mu!1,A!1)]")
                  (("1"
                    (lemma "nn_integrable_is_nn_integrable[T,S,mu!1]")
                    (("1" (split)
                      (("1" (flatten)
                        (("1" (inst-cp -4 "plus(f!1)")
                          (("1" (inst -4 "minus(f!1)")
                            (("1" (split -4)
                              (("1"
                                (split -5)
                                (("1"
                                  (hide -3 -4)
                                  (("1"
                                    (lemma
                                     "contraction_nn_integrable"
                                     ("mu" "mu!1" "A" "A!1"))
                                    (("1"
                                      (inst-cp - "minus(f!1)")
                                      (("1"
                                        (inst - "plus(f!1)")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (split)
                                            (("1"
                                              (rewrite
                                               "nn_integrable_is_integrable[T, S, mu!1]")
                                              nil
                                              nil)
                                             ("2"
                                              (rewrite
                                               "nn_integrable_is_integrable[T, S, mu!1]")
                                              nil
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (expand "nn_measurable?")
                                            (("2"
                                              (hide-all-but 1)
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (expand "nn_measurable?")
                                          (("2"
                                            (hide-all-but 1)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but 1)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (hide-all-but 1)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2"
                          (inst-cp -3 "((reals@real_fun_ops[T].*)
                       (phi[T, S](A!1), plus(f!1)))")
                          (("2" (split -4)
                            (("1"
                              (inst -4 "((reals@real_fun_ops[T].*)
                       (phi[T, S](A!1), minus(f!1)))")
                              (("1"
                                (split -4)
                                (("1"
                                  (hide -3 -4)
                                  (("1"
                                    (lemma
                                     "contraction_nn_integrable"
                                     ("mu" "mu!1" "A" "A!1"))
                                    (("1"
                                      (inst-cp - "minus(f!1)")
                                      (("1"
                                        (inst - "plus(f!1)")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (hide -3 -4 -5)
                                            (("1"
                                              (split)
                                              (("1"
                                                (rewrite
                                                 "nn_integrable_is_integrable[T, S, contraction(mu!1, A!1)]")
                                                nil
                                                nil)
                                               ("2"
                                                (rewrite
                                                 "nn_integrable_is_integrable[T, S, contraction(mu!1, A!1)]")
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "nn_measurable?")
                                          (("2"
                                            (hide-all-but 1)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "nn_measurable?")
                                        (("2"
                                          (hide-all-but 1)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but 1)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but 1)
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (apply-extensionality :hide? t)
                  (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2" (hide 2)
            (("2" (apply-extensionality :hide? t)
              (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((integrable_pm_def formula-decl nil integral nil)
    (measurable_function? const-decl "bool" measure_space_def nil)
    (measurable_function nonempty-type-eq-decl nil measure_space_def
     nil)
    (T formal-type-decl nil measure_contraction nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (setof type-eq-decl nil defined_types nil)
    (setofsets type-eq-decl nil sets nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (S formal-const-decl "sigma_algebra" measure_contraction nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (measure? const-decl "bool" generalized_measure_def nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     nil)
    (set type-eq-decl nil sets nil)
    (measurable_set? const-decl "bool" measure_space_def nil)
    (measurable_set nonempty-type-eq-decl nil measure_space_def nil)
    (contraction const-decl "measure_type" measure_contraction nil)
    (minus_measurable application-judgement "measurable_function[T, S]"
     measure_contraction nil)
    (plus_measurable application-judgement "measurable_function[T, S]"
     measure_contraction nil)
    (plus const-decl "[T -> nnreal]" real_fun_ops_aux reals)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (minus const-decl "[T -> nnreal]" real_fun_ops_aux reals)
    (nn_integrable_is_nn_integrable formula-decl nil integral nil)
    (mu!1 skolem-const-decl "measure_type[T, S]" measure_contraction
     nil)
    (A!1 skolem-const-decl "measurable_set[T, S]" measure_contraction
     nil)
    (integrable? const-decl "bool" integral nil)
    (f!1 skolem-const-decl "measurable_function[T, S]"
     measure_contraction nil)
    (integrable nonempty-type-eq-decl nil integral nil)
    (nn_measurable? const-decl "bool" measure_space nil)
    (nn_measurable nonempty-type-eq-decl nil measure_space nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nn_integrable nonempty-type-eq-decl nil nn_integral nil)
    (nn_integrable? const-decl "bool" nn_integral nil)
    (nn_integrable_is_integrable judgement-tcc nil integral nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (contraction_nn_integrable formula-decl nil measure_contraction
     nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (member const-decl "bool" sets nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (phi const-decl "nat" measure_space nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (* const-decl "[T -> real]" real_fun_ops reals))
   shostak))
 (contraction_integral_TCC1 0
  (contraction_integral_TCC1-2 "" 3789904262
   ("" (skosimp)
    (("" (typepred "f!1")
      (("" (rewrite "contraction_integrable") nil nil)) nil))
    nil)
   ((integrable nonempty-type-eq-decl nil integral nil)
    (integrable? const-decl "bool" integral nil)
    (contraction const-decl "measure_type" measure_contraction nil)
    (measurable_set nonempty-type-eq-decl nil measure_space_def nil)
    (measurable_set? const-decl "bool" measure_space_def nil)
    (set type-eq-decl nil sets nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     nil)
    (measure? const-decl "bool" generalized_measure_def nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (S formal-const-decl "sigma_algebra" measure_contraction nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-type-decl nil measure_contraction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (measurable_function nonempty-type-eq-decl nil measure_space_def
     nil)
    (measurable_function? const-decl "bool" measure_space_def nil)
    (contraction_integrable formula-decl nil measure_contraction nil))
   shostak
   (contraction_integral subtype
    "((reals@real_fun_ops[measure_contraction.T].*)(measure_space[measure_contraction.T, measure_contraction.S].phi(measure_contraction.A), measure_contraction.f))"
    "integrable[T, S, mu]"))
  (contraction_integral_TCC1-1 nil 3431409269
   ("" (skosimp)
    (("" (typepred "f!1")
      (("" (rewrite "contraction_integrable")
        (("" (hide 2)
          ((""
            (rewrite
             "integrable_is_measurable[T, S, contraction(mu!1, A!1)]")
            nil nil))
          nil))
        nil))
      nil))
    nil)
   ((integrable nonempty-type-eq-decl nil integral nil)
    (integrable? const-decl "bool" integral nil)
    (measurable_set nonempty-type-eq-decl nil measure_space_def nil)
    (measurable_set? const-decl "bool" measure_space_def nil)
    (set type-eq-decl nil sets nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     nil)
    (measure? const-decl "bool" generalized_measure_def nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (setofsets type-eq-decl nil sets nil)
    (measurable_function nonempty-type-eq-decl nil measure_space_def
     nil)
    (measurable_function? const-decl "bool" measure_space_def nil))
   nil
   (contraction_integral subtype
    "((reals@real_fun_ops[measure_contraction.T].*)(measure_space[measure_contraction.T, measure_contraction.S].phi(measure_contraction.A), measure_contraction.f))"
    "integrable[T, S, mu]")))
 (contraction_integral 0
  (contraction_integral-1 nil 3431766991
   ("" (skosimp)
    (("" (typepred "f!1")
      ((""
        (lemma "contraction_integrable"
         ("mu" "mu!1" "A" "A!1" "f" "f!1"))
        (("" (assert)
          (("" (rewrite "integral_pm[T, S, contraction(mu!1, A!1)]")
            (("" (rewrite "integral_pm[T, S, mu!1]")
              (("" (rewrite "integrable_pm_def[T, S, mu!1]")
                (("" (flatten)
                  ((""
                    (lemma
                     "integrable_pm_def[T, S,contraction(mu!1, A!1)]"
                     ("f0" "f!1"))
                    (("" (replace -4 -1)
                      (("" (flatten -1)
                        (("" (hide -5)
                          ((""
                            (lemma "contraction_nn_integral"
                             ("mu" "mu!1" "A" "A!1"))
                            (("" (rewrite "integral_nn[T, S, mu!1]")
                              (("1"
                                (rewrite "integral_nn[T, S, mu!1]")
                                (("1"
                                  (rewrite
                                   "integral_nn[T, S,contraction(mu!1, A!1)]")
                                  (("1"
                                    (rewrite
                                     "integral_nn[T, S,contraction(mu!1, A!1)]")
                                    (("1"
                                      (lemma
                                       "nn_integrable_is_nn_integrable[T, S, contraction(mu!1, A!1)]"
                                       ("f" "minus(f!1)"))
                                      (("1"
                                        (split -1)
                                        (("1"
                                          (lemma
                                           "nn_integrable_is_nn_integrable[T, S, contraction(mu!1, A!1)]"
                                           ("f" "plus(f!1)"))
                                          (("1"
                                            (split -1)
                                            (("1"
                                              (hide -4 -5)
                                              (("1"
                                                (inst-cp
                                                 -
                                                 "minus(f!1)")
                                                (("1"
                                                  (inst - "plus(f!1)")
                                                  (("1"
                                                    (replace -3)
                                                    (("1"
                                                      (replace -4)
                                                      (("1"
                                                        (hide-all-but
                                                         1)
                                                        (("1"
                                                          (case-replace
                                                           "plus(((reals@real_fun_ops[T].*)
                             (phi[T, S](A!1), f!1)))=phi[T, S](A!1) * plus(f!1)")
                                                          (("1"
                                                            (case-replace
                                                             "minus(((reals@real_fun_ops[T].*)
                             (phi[T, S](A!1), f!1)))=phi[T, S](A!1) * minus(f!1)")
                                                            (("1"
                                                              (hide-all-but
                                                               1)
                                                              (("1"
                                                                (grind)
                                                                (("1"
                                                                  (apply-extensionality
                                                                   :hide?
                                                                   t)
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide 2)
                                                            (("2"
                                                              (apply-extensionality
                                                               :hide?
                                                               t)
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but 1)
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but 1)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide-all-but (-3 1))
                                      (("2"
                                        (lemma
                                         "nn_integrable_is_nn_integrable[T, S, contraction(mu!1, A!1)]"
                                         ("f" "minus(f!1)"))
                                        (("2"
                                          (split)
                                          (("1" (propax) nil nil)
                                           ("2"
                                            (hide-all-but 1)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide-all-but (1 -2))
                                    (("2"
                                      (lemma
                                       "nn_integrable_is_nn_integrable[T, S, contraction(mu!1, A!1)]"
                                       ("f" "plus(f!1)"))
                                      (("2"
                                        (split)
                                        (("1" (propax) nil nil)
                                         ("2"
                                          (hide-all-but 1)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but (-5 1))
                                  (("2"
                                    (lemma
                                     "nn_integrable_is_nn_integrable[T, S, mu!1]"
                                     ("f"
                                      "minus(((reals@real_fun_ops[T].*)
                             (phi[T, S](A!1), f!1)))"))
                                    (("2"
                                      (split)
                                      (("1" (propax) nil nil)
                                       ("2"
                                        (hide-all-but 1)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide-all-but (-4 1))
                                (("2"
                                  (lemma
                                   "nn_integrable_is_nn_integrable[T, S, mu!1]"
                                   ("f"
                                    "plus(((reals@real_fun_ops[T].*)
                             (phi[T, S](A!1), f!1)))"))
                                  (("2"
                                    (split)
                                    (("1" (propax) nil nil)
                                     ("2"
                                      (hide-all-but 1)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((integrable nonempty-type-eq-decl nil integral nil)
    (integrable? const-decl "bool" integral nil)
    (contraction const-decl "measure_type" measure_contraction nil)
    (measurable_set nonempty-type-eq-decl nil measure_space_def nil)
    (measurable_set? const-decl "bool" measure_space_def nil)
    (set type-eq-decl nil sets nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     nil)
    (measure? const-decl "bool" generalized_measure_def nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (S formal-const-decl "sigma_algebra" measure_contraction nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-type-decl nil measure_contraction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (phi const-decl "nat" measure_space nil)
    (plus const-decl "[T -> nnreal]" real_fun_ops_aux reals)
    (nn_integrable nonempty-type-eq-decl nil nn_integral nil)
    (nn_integrable? const-decl "bool" nn_integral nil)
    (integral_nn formula-decl nil integral nil)
    (nn_integrable_is_nn_integrable formula-decl nil integral nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (member const-decl "bool" sets nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (f!1 skolem-const-decl "integrable[T, S, contraction(mu!1, A!1)]"
     measure_contraction nil)
    (mu!1 skolem-const-decl "measure_type[T, S]" measure_contraction
     nil)
    (> const-decl "bool" reals nil)
    (A!1 skolem-const-decl "measurable_set[T, S]" measure_contraction
     nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus const-decl "[T -> nnreal]" real_fun_ops_aux reals)
    (contraction_nn_integral formula-decl nil measure_contraction nil)
    (integrable_pm_def formula-decl nil integral nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (integrable_plus application-judgement "integrable"
     indefinite_integral nil)
    (integrable_minus application-judgement "integrable"
     indefinite_integral nil)
    (integral_pm formula-decl nil integral nil)
    (contraction_integrable formula-decl nil measure_contraction nil)
    (measurable_function? const-decl "bool" measure_space_def nil)
    (measurable_function nonempty-type-eq-decl nil measure_space_def
     nil))
   shostak)))

