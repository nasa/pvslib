(indefinite_integral
 (integral_TCC1 0
  (integral_TCC1-1 nil 3391140825
   ("" (skosimp)
    (("" (typepred "f!1")
      (("" (expand "integrable?" -1) (("" (propax) nil nil)) nil))
      nil))
    nil)
   ((integrable? const-decl "bool" indefinite_integral nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (measurable_set nonempty-type-eq-decl nil measure_space_def nil)
    (measurable_set? const-decl "bool" measure_space_def nil)
    (S formal-const-decl "sigma_algebra" indefinite_integral nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (set type-eq-decl nil sets nil)
    (T formal-type-decl nil indefinite_integral nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil
   (integral subtype
    "real_fun_ops[indefinite_integral.T].*(measure_space[indefinite_integral.T, indefinite_integral.S].phi(indefinite_integral.E), indefinite_integral.f)"
    "integrable[T, S, m]")))
 (indefinite_emptyset_TCC1 0
  (indefinite_emptyset_TCC1-1 nil 3459223617
   ("" (skosimp)
    (("" (expand "integrable?")
      (("" (case-replace "phi(emptyset[T]) * g!1=lambda x: 0")
        (("1" (rewrite "integrable_zero") nil nil)
         ("2" (apply-extensionality :hide? t)
          (("2" (expand "*")
            (("2" (expand "emptyset")
              (("2" (expand "phi")
                (("2" (expand "member") (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((integrable? const-decl "bool" indefinite_integral nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (finite_emptyset name-judgement "finite_set" countable_props
     sets_aux)
    (finite_emptyset name-judgement "finite_set" countable_setofsets
     sets_aux)
    (finite_emptyset name-judgement "finite_set" sigma_countable
     sigma_set)
    (null_emptyset name-judgement "null_set" indefinite_integral nil)
    (subset_algebra_emptyset name-judgement "(S)" indefinite_integral
     nil)
    (member const-decl "bool" sets nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (m formal-const-decl "measure_type" indefinite_integral nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     nil)
    (measure? const-decl "bool" generalized_measure_def nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (nnreal type-eq-decl nil real_types nil)
    (integrable_zero formula-decl nil integral nil)
    (emptyset const-decl "set" sets nil)
    (phi const-decl "nat" measure_space nil)
    (S formal-const-decl "sigma_algebra" indefinite_integral nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-type-decl nil indefinite_integral nil)
    (isf_phi application-judgement "isf" indefinite_integral nil))
   nil
   (indefinite_emptyset subtype "indefinite_integral.g"
    "(indefinite_integral.integrable?(sets[indefinite_integral.T].emptyset))")))
 (indefinite_emptyset 0
  (indefinite_emptyset-1 nil 3459223725
   ("" (skosimp)
    (("" (expand "integral")
      (("" (case-replace "phi(emptyset) * g!1=lambda x: 0")
        (("1" (rewrite "integral_zero") nil nil)
         ("2" (apply-extensionality :hide? t)
          (("2" (hide 2) (("2" (grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((integral const-decl "real" indefinite_integral nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (finite_emptyset name-judgement "finite_set" countable_props
     sets_aux)
    (finite_emptyset name-judgement "finite_set" countable_setofsets
     sets_aux)
    (finite_emptyset name-judgement "finite_set" sigma_countable
     sigma_set)
    (null_emptyset name-judgement "null_set" indefinite_integral nil)
    (subset_algebra_emptyset name-judgement "(S)" indefinite_integral
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (member const-decl "bool" sets nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (m formal-const-decl "measure_type" indefinite_integral nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     nil)
    (measure? const-decl "bool" generalized_measure_def nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (nnreal type-eq-decl nil real_types nil)
    (integral_zero formula-decl nil integral nil)
    (emptyset const-decl "set" sets nil)
    (phi const-decl "nat" measure_space nil)
    (S formal-const-decl "sigma_algebra" indefinite_integral nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-type-decl nil indefinite_integral nil)
    (isf_phi application-judgement "isf" indefinite_integral nil))
   shostak))
 (indefinite_fullset_TCC1 0
  (indefinite_fullset_TCC1-1 nil 3459223617
   ("" (skosimp)
    (("" (expand "integrable?")
      (("" (rewrite "indefinite_integrable") nil nil)) nil))
    nil)
   ((prod_measurable application-judgement "measurable_function[T, S]"
     indefinite_integral nil)
    (integrable? const-decl "bool" indefinite_integral nil)
    (m formal-const-decl "measure_type" indefinite_integral nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     nil)
    (measure? const-decl "bool" generalized_measure_def nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (S formal-const-decl "sigma_algebra" indefinite_integral nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil indefinite_integral nil)
    (integrable nonempty-type-eq-decl nil integral nil)
    (integrable? const-decl "bool" integral nil)
    (fullset const-decl "set" sets nil)
    (measurable_set nonempty-type-eq-decl nil measure_space_def nil)
    (measurable_set? const-decl "bool" measure_space_def nil)
    (set type-eq-decl nil sets nil)
    (indefinite_integrable formula-decl nil integral nil)
    (subset_algebra_fullset name-judgement "(S)" indefinite_integral
     nil)
    (measurable_fullset name-judgement "measurable_set[T, S]"
     indefinite_integral nil))
   nil
   (indefinite_fullset subtype "indefinite_integral.f"
    "(indefinite_integral.integrable?(sets[indefinite_integral.T].fullset))")))
 (indefinite_fullset 0
  (indefinite_fullset-1 nil 3459223764
   ("" (skosimp)
    (("" (expand "integral" 1 1)
      (("" (case-replace "phi(fullset) * f!1=f!1")
        (("" (hide 2)
          (("" (apply-extensionality :hide? t) (("" (grind) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((integral const-decl "real" indefinite_integral nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (member const-decl "bool" sets nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (subset_algebra_fullset name-judgement "(S)" indefinite_integral
     nil)
    (measurable_fullset name-judgement "measurable_set[T, S]"
     indefinite_integral nil)
    (integrable nonempty-type-eq-decl nil integral nil)
    (integrable? const-decl "bool" integral nil)
    (m formal-const-decl "measure_type" indefinite_integral nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     nil)
    (measure? const-decl "bool" generalized_measure_def nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (nnreal type-eq-decl nil real_types nil)
    (fullset const-decl "set" sets nil)
    (phi const-decl "nat" measure_space nil)
    (S formal-const-decl "sigma_algebra" indefinite_integral nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-type-decl nil indefinite_integral nil)
    (prod_measurable application-judgement "measurable_function[T, S]"
     indefinite_integral nil)
    (phi_is_simple application-judgement "simple" indefinite_integral
     nil))
   shostak))
 (indefinite_eq_0_TCC1 0
  (indefinite_eq_0_TCC1-1 nil 3395207138
   ("" (skosimp)
    (("" (typepred "E!1")
      (("" (expand "measurable_set?") (("" (propax) nil nil)) nil))
      nil))
    nil)
   ((measurable_set nonempty-type-eq-decl nil measure_space_def nil)
    (measurable_set? const-decl "bool" measure_space_def nil)
    (S formal-const-decl "sigma_algebra" indefinite_integral nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (set type-eq-decl nil sets nil)
    (T formal-type-decl nil indefinite_integral nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil
   (indefinite_eq_0 subtype "indefinite_integral.E"
    "{m1: (indefinite_integral.S) | measure_props[indefinite_integral.T, indefinite_integral.S, indefinite_integral.m].mu_fin?(m1)}")))
 (indefinite_eq_0 0
  (indefinite_eq_0-1 nil 3395604081
   ("" (skosimp)
    (("" (lemma "integral_ae_ge_0" ("f" "phi(E!1) * f!1"))
      (("" (replace -3)
        (("" (split -1)
          (("1" (hide -3)
            (("1" (expand "ae_in?")
              (("1" (skosimp)
                (("1" (typepred "E!2")
                  (("1" (expand "negligible_set?")
                    (("1" (skosimp)
                      (("1" (expand "ae_0?")
                        (("1" (expand "restrict")
                          (("1" (expand "pointwise_ae?")
                            (("1" (expand "ae?")
                              (("1"
                                (expand "fullset")
                                (("1"
                                  (expand "ae_in?")
                                  (("1"
                                    (skosimp)
                                    (("1"
                                      (typepred "E!3")
                                      (("1"
                                        (expand "negligible_set?")
                                        (("1"
                                          (skosimp)
                                          (("1"
                                            (name-replace "FF" "X!1")
                                            (("1"
                                              (case
                                               "forall x: difference(E!1,FF)(x) => f!1(x)>0")
                                              (("1"
                                                (hide -5 -7)
                                                (("1"
                                                  (name-replace
                                                   "GG"
                                                   "X!2")
                                                  (("1"
                                                    (case
                                                     "FORALL x: difference(E!1, GG)(x) => f!1(x) = 0")
                                                    (("1"
                                                      (hide -4 -6)
                                                      (("1"
                                                        (lemma
                                                         "null_union"
                                                         ("N1"
                                                          "FF"
                                                          "N2"
                                                          "GG"))
                                                        (("1"
                                                          (lemma
                                                           "m_monotone"
                                                           ("a"
                                                            "E!1"
                                                            "b"
                                                            "union(FF,GG)"))
                                                          (("1"
                                                            (split -1)
                                                            (("1"
                                                              (hide-all-but
                                                               (-1
                                                                -2
                                                                1))
                                                              (("1"
                                                                (expand
                                                                 "null_set?")
                                                                (("1"
                                                                  (expand
                                                                   "x_le")
                                                                  (("1"
                                                                    (expand
                                                                     "mu_fin?")
                                                                    (("1"
                                                                      (expand
                                                                       "mu")
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide
                                                               -1
                                                               -4
                                                               -5
                                                               2)
                                                              (("2"
                                                                (expand
                                                                 "subset?")
                                                                (("2"
                                                                  (skosimp)
                                                                  (("2"
                                                                    (expand
                                                                     "member")
                                                                    (("2"
                                                                      (inst
                                                                       -
                                                                       "x!1")
                                                                      (("2"
                                                                        (inst
                                                                         -
                                                                         "x!1")
                                                                        (("2"
                                                                          (expand
                                                                           "union")
                                                                          (("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (expand
                                                                               "member")
                                                                              (("2"
                                                                                (expand
                                                                                 "difference")
                                                                                (("2"
                                                                                  (expand
                                                                                   "member")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (expand
                                                             "null_set?")
                                                            (("2"
                                                              (flatten)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (propax)
                                                          nil
                                                          nil)
                                                         ("3"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide -1 -4 2)
                                                      (("2"
                                                        (skosimp)
                                                        (("2"
                                                          (expand
                                                           "difference")
                                                          (("2"
                                                            (expand
                                                             "member")
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (expand
                                                                 "subset?")
                                                                (("2"
                                                                  (inst
                                                                   -
                                                                   "x!1")
                                                                  (("2"
                                                                    (expand
                                                                     "member")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (inst
                                                                         -
                                                                         "x!1")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (expand
                                                                             "*")
                                                                            (("2"
                                                                              (expand
                                                                               "phi")
                                                                              (("2"
                                                                                (expand
                                                                                 "member")
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (skosimp)
                                                (("2"
                                                  (expand "difference")
                                                  (("2"
                                                    (expand "member")
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (inst -7 "x!1")
                                                        (("2"
                                                          (expand
                                                           "subset?")
                                                          (("2"
                                                            (inst
                                                             -5
                                                             "x!1")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide -2 2)
            (("2" (expand "ae_nonneg?")
              (("2" (expand "pointwise_ae?")
                (("2" (expand "ae?")
                  (("2" (expand "fullset")
                    (("2" (expand "ae_in?")
                      (("2" (skosimp)
                        (("2" (typepred "E!2")
                          (("2" (expand "*")
                            (("2" (inst + "intersection(E!1,E!2)")
                              (("1"
                                (skosimp)
                                (("1"
                                  (expand "intersection")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "phi")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (case-replace "E!1(x!1)")
                                          (("1"
                                            (inst - "x!1")
                                            (("1" (assert) nil nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (lemma
                                 "negligible_subset"
                                 ("E"
                                  "E!2"
                                  "X"
                                  "intersection[T](E!1, E!2)"))
                                (("2"
                                  (split -1)
                                  (("1" (propax) nil nil)
                                   ("2"
                                    (hide-all-but 1)
                                    (("2"
                                      (expand "intersection")
                                      (("2"
                                        (expand "subset?")
                                        (("2"
                                          (expand "member")
                                          (("2" (skosimp*) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((m formal-const-decl "measure_type" indefinite_integral nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     nil)
    (measure? const-decl "bool" generalized_measure_def nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (S formal-const-decl "sigma_algebra" indefinite_integral nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil indefinite_integral nil)
    (integrable? const-decl "bool" indefinite_integral nil)
    (measurable_set nonempty-type-eq-decl nil measure_space_def nil)
    (measurable_set? const-decl "bool" measure_space_def nil)
    (phi const-decl "nat" measure_space nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (set type-eq-decl nil sets nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (integrable nonempty-type-eq-decl nil integral nil)
    (integrable? const-decl "bool" integral nil)
    (integral_ae_ge_0 formula-decl nil integral nil)
    (ae_in? const-decl "bool" measure_theory nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (negligible_set? const-decl "bool" measure_theory nil)
    (negligible nonempty-type-eq-decl nil measure_theory nil)
    (pointwise_ae? const-decl "bool" measure_theory nil)
    (fullset const-decl "set" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (E!1 skolem-const-decl "measurable_set[T, S]" indefinite_integral
     nil)
    (x!1 skolem-const-decl "T" indefinite_integral nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (null_union judgement-tcc nil measure_theory nil)
    (null_set? const-decl "bool" measure_theory nil)
    (null_set nonempty-type-eq-decl nil measure_theory nil)
    (mu_fin? const-decl "bool" measure_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (mu const-decl "nnreal" measure_props nil)
    (x_le const-decl "bool" extended_nnreal extended_nnreal)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (m_monotone formula-decl nil measure_props nil)
    (TRUE const-decl "bool" booleans nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (> const-decl "bool" reals nil)
    (difference const-decl "set" sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (ae? const-decl "bool" measure_theory nil)
    (ae_0? const-decl "bool" measure_theory nil)
    (ae_nonneg? const-decl "bool" measure_theory nil)
    (measurable_fullset name-judgement "measurable_set[T, S]"
     indefinite_integral nil)
    (subset_algebra_fullset name-judgement "(S)" indefinite_integral
     nil)
    (intersection const-decl "set" sets nil)
    (E!2 skolem-const-decl "negligible[T, S, m]" indefinite_integral
     nil)
    (x!1 skolem-const-decl "T" indefinite_integral nil)
    (negligible_subset formula-decl nil measure_theory nil))
   shostak))
 (indefinite_eq_TCC1 0
  (indefinite_eq_TCC1-1 nil 3431893575
   ("" (skosimp)
    (("" (expand "integrable?")
      (("" (rewrite "indefinite_integrable") nil nil)) nil))
    nil)
   ((integrable? const-decl "bool" indefinite_integral nil)
    (m formal-const-decl "measure_type" indefinite_integral nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     nil)
    (measure? const-decl "bool" generalized_measure_def nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (S formal-const-decl "sigma_algebra" indefinite_integral nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil indefinite_integral nil)
    (integrable nonempty-type-eq-decl nil integral nil)
    (integrable? const-decl "bool" integral nil)
    (measurable_set nonempty-type-eq-decl nil measure_space_def nil)
    (measurable_set? const-decl "bool" measure_space_def nil)
    (set type-eq-decl nil sets nil)
    (indefinite_integrable formula-decl nil integral nil))
   nil
   (indefinite_eq subtype "indefinite_integral.f1"
    "(indefinite_integral.integrable?(indefinite_integral.E))")))
 (indefinite_eq 0
  (indefinite_eq-1 nil 3391226280
   ("" (skosimp)
    (("" (expand "integral")
      (("" (name "H" "f1!1-f2!1")
        (("" (lemma "integrable_diff" ("f1" "f1!1" "f2" "f2!1"))
          (("" (replace -2)
            (("" (lemma "integrable_is_measurable" ("x" "H"))
              (("" (lemma "measurable_gt" ("f" "H"))
                (("" (lemma "measurable_lt" ("f" "H"))
                  (("" (assert)
                    (("" (inst - "0")
                      (("" (inst - "0")
                        (("" (inst-cp - "{z: T | H(z) > 0}")
                          (("1" (inst - "{z: T | H(z) < 0}")
                            (("1"
                              (lemma "indefinite_eq_0"
                               ("E" "{z: T | H(z) > 0}" "f" "H"))
                              (("1"
                                (split -1)
                                (("1"
                                  (lemma
                                   "indefinite_eq_0"
                                   ("E" "{z: T | H(z) < 0}" "f" "-H"))
                                  (("1"
                                    (split -1)
                                    (("1"
                                      (skosimp)
                                      (("1"
                                        (hide -10 -11 -8 -9)
                                        (("1"
                                          (lemma
                                           "m_disjoint_union"
                                           ("a"
                                            "{z: T | H(z) < 0}"
                                            "b"
                                            "{z: T | H(z) > 0}"))
                                          (("1"
                                            (split -1)
                                            (("1"
                                              (expand "x_eq")
                                              (("1"
                                                (expand "mu_fin?")
                                                (("1"
                                                  (expand "mu")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (expand
                                                         "x_add")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (replace
                                                             -4)
                                                            (("1"
                                                              (replace
                                                               -6)
                                                              (("1"
                                                                (hide
                                                                 -3
                                                                 -4
                                                                 -5
                                                                 -6)
                                                                (("1"
                                                                  (expand
                                                                   "ae_eq?")
                                                                  (("1"
                                                                    (expand
                                                                     "restrict")
                                                                    (("1"
                                                                      (expand
                                                                       "pointwise_ae?")
                                                                      (("1"
                                                                        (expand
                                                                         "ae?")
                                                                        (("1"
                                                                          (expand
                                                                           "fullset")
                                                                          (("1"
                                                                            (expand
                                                                             "ae_in?")
                                                                            (("1"
                                                                              (inst
                                                                               +
                                                                               "union({z: T | H(z) < 0}, {z: T | H(z) > 0})")
                                                                              (("1"
                                                                                (skosimp)
                                                                                (("1"
                                                                                  (expand
                                                                                   "H")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "union")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "member")
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "-")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (expand
                                                                                 "negligible_set?")
                                                                                (("2"
                                                                                  (inst
                                                                                   +
                                                                                   "union({z: T | H(z) < 0}, {z: T | H(z) > 0})")
                                                                                  (("2"
                                                                                    (split)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "null_set?")
                                                                                      (("1"
                                                                                        (rewrite
                                                                                         "measurable_union")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "mu_fin?")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "mu")
                                                                                            (("1"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (expand
                                                                                       "subset?")
                                                                                      (("2"
                                                                                        (skosimp)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but 1)
                                              (("2"
                                                (expand "disjoint?")
                                                (("2"
                                                  (expand
                                                   "intersection")
                                                  (("2"
                                                    (expand "empty?")
                                                    (("2"
                                                      (skosimp)
                                                      (("2"
                                                        (expand
                                                         "member")
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide 2)
                                      (("2"
                                        (expand "ae_in?")
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (inst
                                             +
                                             "{z: T | H(z) > 0}")
                                            (("1"
                                              (skosimp)
                                              (("1"
                                                (expand "-")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand
                                               "negligible_set?")
                                              (("2"
                                                (inst
                                                 +
                                                 "{z: T | H(z) > 0}")
                                                (("2"
                                                  (split)
                                                  (("1"
                                                    (expand
                                                     "null_set?")
                                                    (("1"
                                                      (expand
                                                       "measurable_set?")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand "subset?")
                                                    (("2"
                                                      (skosimp)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (hide-all-but (-5 -4 1 -7))
                                      (("3"
                                        (expand "H" 1 2)
                                        (("3"
                                          (case-replace
                                           "phi({z: T | H(z) < 0}) * -(f1!1 - f2!1) = phi({z: T | H(z) < 0}) * f2!1-phi({z: T | H(z) < 0}) * f1!1")
                                          (("1"
                                            (rewrite "integral_diff")
                                            (("1" (assert) nil nil))
                                            nil)
                                           ("2"
                                            (hide-all-but 1)
                                            (("2"
                                              (apply-extensionality
                                               :hide?
                                               t)
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand "integrable?")
                                    (("2"
                                      (rewrite "indefinite_integrable")
                                      (("2"
                                        (expand "measurable_set?")
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (expand "measurable_set?")
                                    (("3" (propax) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide 2)
                                  (("2"
                                    (expand "ae_in?")
                                    (("2"
                                      (expand "member")
                                      (("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (hide 2)
                                  (("3"
                                    (expand "H" 1 2)
                                    (("3"
                                      (expand "-" 1)
                                      (("3"
                                        (expand "*" 1)
                                        (("3"
                                          (lemma
                                           "integral_diff"
                                           ("f1"
                                            "phi({z: T | H(z) > 0}) * f1!1"
                                            "f2"
                                            "phi({z: T | H(z) > 0}) * f2!1"))
                                          (("3"
                                            (expand "-" -1)
                                            (("3"
                                              (expand "*" -1)
                                              (("3"
                                                (replace -1 1)
                                                (("3"
                                                  (assert)
                                                  (("3"
                                                    (expand "*" -8)
                                                    (("3"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "integrable?")
                                (("2"
                                  (rewrite "indefinite_integrable")
                                  (("2"
                                    (expand "measurable_set?")
                                    (("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (expand "measurable_set?")
                                (("3" (propax) nil nil))
                                nil))
                              nil)
                             ("2" (expand "measurable_set?")
                              (("2" (propax) nil nil)) nil))
                            nil)
                           ("2" (expand "measurable_set?")
                            (("2" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((integral const-decl "real" indefinite_integral nil)
    (integrable_diff judgement-tcc nil integral nil)
    (integrable_is_measurable judgement-tcc nil integral nil)
    (measurable_lt formula-decl nil measure_space_def nil)
    (set type-eq-decl nil sets nil)
    (measurable_set? const-decl "bool" measure_space_def nil)
    (> const-decl "bool" reals nil)
    (H skolem-const-decl "integrable[T, S, m]" indefinite_integral nil)
    (measurable_set nonempty-type-eq-decl nil measure_space_def nil)
    (indefinite_eq_0 formula-decl nil indefinite_integral nil)
    (integrable? const-decl "bool" indefinite_integral nil)
    (integrable_opp application-judgement "integrable"
     indefinite_integral nil)
    (- const-decl "[T -> real]" real_fun_ops reals)
    (phi const-decl "nat" measure_space nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (integral_diff formula-decl nil integral nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (m_disjoint_union formula-decl nil measure_props nil)
    (intersection const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (disjoint? const-decl "bool" sets nil)
    (x_eq const-decl "bool" extended_nnreal extended_nnreal)
    (mu const-decl "nnreal" measure_props nil)
    (ae_eq? const-decl "bool" measure_theory nil)
    (measurable_fullset name-judgement "measurable_set[T, S]"
     indefinite_integral nil)
    (subset_algebra_fullset name-judgement "(S)" indefinite_integral
     nil)
    (ae? const-decl "bool" measure_theory nil)
    (ae_in? const-decl "bool" measure_theory nil)
    (measurable_union judgement-tcc nil measure_space_def nil)
    (null_set? const-decl "bool" measure_theory nil)
    (subset? const-decl "bool" sets nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (member const-decl "bool" sets nil)
    (negligible nonempty-type-eq-decl nil measure_theory nil)
    (union const-decl "set" sets nil)
    (negligible_set? const-decl "bool" measure_theory nil)
    (fullset const-decl "set" sets nil)
    (pointwise_ae? const-decl "bool" measure_theory nil)
    (x_add const-decl "extended_nnreal" extended_nnreal
     extended_nnreal)
    (mu_fin? const-decl "bool" measure_props nil)
    (indefinite_integrable formula-decl nil integral nil)
    (< const-decl "bool" reals nil)
    (measurable_gt formula-decl nil measure_space_def nil)
    (integrable_diff application-judgement "integrable"
     indefinite_integral nil)
    (T formal-type-decl nil indefinite_integral nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (- const-decl "[T -> real]" real_fun_ops reals)
    (bool nonempty-type-eq-decl nil booleans nil)
    (setof type-eq-decl nil defined_types nil)
    (setofsets type-eq-decl nil sets nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (S formal-const-decl "sigma_algebra" indefinite_integral nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (measure? const-decl "bool" generalized_measure_def nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     nil)
    (m formal-const-decl "measure_type" indefinite_integral nil)
    (integrable? const-decl "bool" integral nil)
    (integrable nonempty-type-eq-decl nil integral nil))
   shostak))
 (indefinite_phi_TCC1 0
  (indefinite_phi_TCC1-1 nil 3391140825
   ("" (skosimp)
    (("" (typepred "F!1")
      (("" (expand "integrable?")
        (("" (lemma "isf_is_integrable")
          (("" (inst - "phi[T, S](intersection(E!1,F!1))")
            (("1" (expand "intersection")
              (("1" (expand "phi")
                (("1" (expand "member")
                  (("1" (expand "*")
                    (("1"
                      (case-replace "(LAMBDA (x_1: T):
                    IF E!1(x_1) THEN 1 ELSE 0 ENDIF *
                     IF F!1(x_1) THEN 1 ELSE 0 ENDIF)=(LAMBDA (x_1: T):
                    IF E!1(x_1) AND F!1(x_1) THEN 1 ELSE 0 ENDIF)")
                      (("1" (apply-extensionality :hide? t)
                        (("1" (hide-all-but 1) (("1" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (rewrite "isf_phi")
                (("2" (hide 2)
                  (("2" (expand "mu_fin?")
                    (("2"
                      (lemma "m_monotone"
                       ("a" "intersection[T](E!1, F!1)" "b" "F!1"))
                      (("2" (split -1)
                        (("1" (expand "x_le") (("1" (assert) nil nil))
                          nil)
                         ("2" (hide-all-but 1) (("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((mu_fin? const-decl "bool" measure_props nil)
    (m formal-const-decl "measure_type" indefinite_integral nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     nil)
    (measure? const-decl "bool" generalized_measure_def nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (measurable_set nonempty-type-eq-decl nil measure_space_def nil)
    (measurable_set? const-decl "bool" measure_space_def nil)
    (S formal-const-decl "sigma_algebra" indefinite_integral nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (set type-eq-decl nil sets nil)
    (T formal-type-decl nil indefinite_integral nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (isf_is_integrable judgement-tcc nil integral nil)
    (m_monotone formula-decl nil measure_props nil)
    (subset? const-decl "bool" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (x_le const-decl "bool" extended_nnreal extended_nnreal)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (isf_phi judgement-tcc nil isf nil)
    (member const-decl "bool" sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (isf nonempty-type-eq-decl nil isf nil)
    (isf? const-decl "bool" isf nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (phi const-decl "nat" measure_space nil)
    (intersection const-decl "set" sets nil)
    (E!1 skolem-const-decl "measurable_set[T, S]" indefinite_integral
     nil)
    (F!1 skolem-const-decl "(mu_fin?)" indefinite_integral nil)
    (measurable_intersection application-judgement "measurable_set"
     indefinite_integral nil)
    (integrable? const-decl "bool" indefinite_integral nil))
   nil
   (indefinite_phi subtype
    "measure_space[indefinite_integral.T, indefinite_integral.S].phi(indefinite_integral.F)"
    "(indefinite_integral.integrable?(indefinite_integral.E))")))
 (indefinite_phi_TCC2 0
  (indefinite_phi_TCC2-1 nil 3431890731
   ("" (skosimp)
    (("" (typepred "F!1")
      (("" (typepred "E!1")
        (("" (lemma "measurable_intersection" ("a" "E!1" "b" "F!1"))
          (("" (expand "measurable_set?")
            (("" (assert)
              (("" (expand "mu_fin?")
                ((""
                  (lemma "m_monotone"
                   ("a" "intersection[T](E!1, F!1)" "b" "F!1"))
                  (("" (split -1)
                    (("1" (expand "x_le") (("1" (assert) nil nil)) nil)
                     ("2" (hide-all-but 1) (("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((mu_fin? const-decl "bool" measure_props nil)
    (m formal-const-decl "measure_type" indefinite_integral nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     nil)
    (measure? const-decl "bool" generalized_measure_def nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (measurable_set nonempty-type-eq-decl nil measure_space_def nil)
    (measurable_set? const-decl "bool" measure_space_def nil)
    (S formal-const-decl "sigma_algebra" indefinite_integral nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (set type-eq-decl nil sets nil)
    (T formal-type-decl nil indefinite_integral nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (measurable_intersection judgement-tcc nil measure_space_def nil)
    (measurable_intersection application-judgement "measurable_set"
     indefinite_integral nil)
    (m_monotone formula-decl nil measure_props nil)
    (intersection const-decl "set" sets nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (x_le const-decl "bool" extended_nnreal extended_nnreal)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (indefinite_phi subtype
    "sets[indefinite_integral.T].intersection(indefinite_integral.E, indefinite_integral.F)"
    "{m1: (indefinite_integral.S) | measure_props[indefinite_integral.T, indefinite_integral.S, indefinite_integral.m].mu_fin?(m1)}")))
 (indefinite_phi 0
  (indefinite_phi-1 nil 3391166738
   ("" (skosimp)
    (("" (expand "integral")
      (("" (lemma "integral_phi" ("F" "intersection(E!1, F!1)"))
        ((""
          (case-replace
           "phi(intersection(E!1, F!1)) = phi(E!1) * phi(F!1)")
          (("" (hide-all-but 1)
            (("" (apply-extensionality :hide? t)
              (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((integral const-decl "real" indefinite_integral nil)
    (isf_phi application-judgement "isf" indefinite_integral nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (phi const-decl "nat" measure_space nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (F!1 skolem-const-decl "(mu_fin?)" indefinite_integral nil)
    (E!1 skolem-const-decl "measurable_set[T, S]" indefinite_integral
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (member const-decl "bool" sets nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (measurable_intersection application-judgement "measurable_set"
     indefinite_integral nil)
    (integral_phi formula-decl nil integral nil)
    (set type-eq-decl nil sets nil)
    (measurable_set? const-decl "bool" measure_space_def nil)
    (measurable_set nonempty-type-eq-decl nil measure_space_def nil)
    (mu_fin? const-decl "bool" measure_props nil)
    (intersection const-decl "set" sets nil)
    (T formal-type-decl nil indefinite_integral nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (setof type-eq-decl nil defined_types nil)
    (setofsets type-eq-decl nil sets nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (S formal-const-decl "sigma_algebra" indefinite_integral nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (measure? const-decl "bool" generalized_measure_def nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     nil)
    (m formal-const-decl "measure_type" indefinite_integral nil))
   shostak))
 (indefinite_add_TCC1 0
  (indefinite_add_TCC1-1 nil 3431890731
   ("" (skosimp)
    (("" (typepred "f1!1")
      (("" (typepred "f2!1")
        (("" (expand "integrable?")
          ((""
            (lemma "integrable_add"
             ("f1" "phi(E!1) * f1!1" "f2" "phi(E!1) * f2!1"))
            (("1"
              (case-replace
               "((+[T])(phi(E!1) * f1!1, phi(E!1) * f2!1))=(phi(E!1) * ((+[T])(f1!1, f2!1)))")
              (("1" (apply-extensionality :hide? t)
                (("1" (hide-all-but 1) (("1" (grind) nil nil)) nil))
                nil))
              nil)
             ("2" (propax) nil nil) ("3" (propax) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((integrable? const-decl "bool" indefinite_integral nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (measurable_set nonempty-type-eq-decl nil measure_space_def nil)
    (measurable_set? const-decl "bool" measure_space_def nil)
    (S formal-const-decl "sigma_algebra" indefinite_integral nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (set type-eq-decl nil sets nil)
    (T formal-type-decl nil indefinite_integral nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (+ const-decl "[T -> real]" real_fun_ops reals)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (member const-decl "bool" sets nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (integrable_add judgement-tcc nil integral nil)
    (integrable? const-decl "bool" integral nil)
    (integrable nonempty-type-eq-decl nil integral nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (phi const-decl "nat" measure_space nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (measure? const-decl "bool" generalized_measure_def nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     nil)
    (m formal-const-decl "measure_type" indefinite_integral nil))
   nil
   (indefinite_add subtype
    "(real_fun_ops[indefinite_integral.T].+)(indefinite_integral.f1, indefinite_integral.f2)"
    "(indefinite_integral.integrable?(indefinite_integral.E))")))
 (indefinite_add 0
  (indefinite_add-1 nil 3391222633
   ("" (skosimp)
    (("" (expand "integral")
      ((""
        (lemma "integral_add"
         ("f1" "phi(E!1) * f1!1" "f2" "phi(E!1) * f2!1"))
        ((""
          (case-replace
           "phi(E!1) * (f1!1 + f2!1)=phi(E!1) * f1!1 + phi(E!1) * f2!1")
          (("" (hide-all-but 1)
            (("" (apply-extensionality :hide? t) (("" (grind) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((integral const-decl "real" indefinite_integral nil)
    (+ const-decl "[T -> real]" real_fun_ops reals)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (member const-decl "bool" sets nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (integral_add formula-decl nil integral nil)
    (integrable? const-decl "bool" integral nil)
    (integrable nonempty-type-eq-decl nil integral nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (set type-eq-decl nil sets nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (phi const-decl "nat" measure_space nil)
    (measurable_set? const-decl "bool" measure_space_def nil)
    (measurable_set nonempty-type-eq-decl nil measure_space_def nil)
    (integrable? const-decl "bool" indefinite_integral nil)
    (T formal-type-decl nil indefinite_integral nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (setof type-eq-decl nil defined_types nil)
    (setofsets type-eq-decl nil sets nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (S formal-const-decl "sigma_algebra" indefinite_integral nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (measure? const-decl "bool" generalized_measure_def nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     nil)
    (m formal-const-decl "measure_type" indefinite_integral nil))
   shostak))
 (indefinite_scal_TCC1 0
  (indefinite_scal_TCC1-1 nil 3431890731
   ("" (skosimp)
    (("" (typepred "f!1")
      (("" (expand "integrable?")
        (("" (lemma "integrable_scal" ("c" "c!1" "f" "phi(E!1) * f!1"))
          (("1"
            (case-replace
             "(*[T](c!1, phi(E!1) * f!1))=(phi(E!1) * (*[T](c!1, f!1)))")
            (("1" (apply-extensionality :hide? t)
              (("1" (hide-all-but 1) (("1" (grind) nil nil)) nil))
              nil))
            nil)
           ("2" (propax) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((integrable? const-decl "bool" indefinite_integral nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (measurable_set nonempty-type-eq-decl nil measure_space_def nil)
    (measurable_set? const-decl "bool" measure_space_def nil)
    (S formal-const-decl "sigma_algebra" indefinite_integral nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (set type-eq-decl nil sets nil)
    (T formal-type-decl nil indefinite_integral nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (m formal-const-decl "measure_type" indefinite_integral nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     nil)
    (measure? const-decl "bool" generalized_measure_def nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (phi const-decl "nat" measure_space nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (integrable nonempty-type-eq-decl nil integral nil)
    (integrable? const-decl "bool" integral nil)
    (integrable_scal judgement-tcc nil integral nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (member const-decl "bool" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (* const-decl "[T -> real]" real_fun_ops reals))
   nil
   (indefinite_scal subtype
    "(real_fun_ops[indefinite_integral.T].*(indefinite_integral.c, indefinite_integral.f))"
    "(indefinite_integral.integrable?(indefinite_integral.E))")))
 (indefinite_scal 0
  (indefinite_scal-1 nil 3391329459
   ("" (skosimp)
    (("" (expand "integral")
      (("" (case-replace "phi(E!1) * (c!1 * f!1) = c!1*(phi(E!1)*f!1)")
        (("1" (rewrite "integral_scal") nil nil)
         ("2" (hide 2)
          (("2" (apply-extensionality :hide? t) (("2" (grind) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((integral const-decl "real" indefinite_integral nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (member const-decl "bool" sets nil)
    (integral_scal formula-decl nil integral nil)
    (integrable? const-decl "bool" integral nil)
    (integrable nonempty-type-eq-decl nil integral nil)
    (nnreal type-eq-decl nil real_types nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (measure? const-decl "bool" generalized_measure_def nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     nil)
    (m formal-const-decl "measure_type" indefinite_integral nil)
    (integrable? const-decl "bool" indefinite_integral nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (measurable_set nonempty-type-eq-decl nil measure_space_def nil)
    (measurable_set? const-decl "bool" measure_space_def nil)
    (phi const-decl "nat" measure_space nil)
    (S formal-const-decl "sigma_algebra" indefinite_integral nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-type-decl nil indefinite_integral nil))
   shostak))
 (indefinite_opp_TCC1 0
  (indefinite_opp_TCC1-1 nil 3431890731
   ("" (skosimp)
    (("" (typepred "f!1")
      (("" (expand "integrable?")
        (("" (lemma "integrable_opp" ("f" "phi(E!1) * f!1"))
          (("1" (case-replace "(-(phi(E!1) * f!1))=(phi(E!1) * -f!1)")
            (("1" (apply-extensionality :hide? t)
              (("1" (hide-all-but 1) (("1" (grind) nil nil)) nil))
              nil))
            nil)
           ("2" (propax) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((integrable? const-decl "bool" indefinite_integral nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (measurable_set nonempty-type-eq-decl nil measure_space_def nil)
    (measurable_set? const-decl "bool" measure_space_def nil)
    (S formal-const-decl "sigma_algebra" indefinite_integral nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (set type-eq-decl nil sets nil)
    (T formal-type-decl nil indefinite_integral nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (m formal-const-decl "measure_type" indefinite_integral nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     nil)
    (measure? const-decl "bool" generalized_measure_def nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (phi const-decl "nat" measure_space nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (integrable nonempty-type-eq-decl nil integral nil)
    (integrable? const-decl "bool" integral nil)
    (integrable_opp judgement-tcc nil integral nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (member const-decl "bool" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (- const-decl "[T -> real]" real_fun_ops reals))
   nil
   (indefinite_opp subtype
    "(real_fun_ops[indefinite_integral.T].-)(indefinite_integral.f)"
    "(indefinite_integral.integrable?(indefinite_integral.E))")))
 (indefinite_opp 0
  (indefinite_opp-1 nil 3391329564
   ("" (skosimp)
    (("" (lemma "indefinite_scal" ("c" "-1" "f" "f!1" "E" "E!1"))
      (("" (case-replace "-1 * f!1=-f!1")
        (("1" (assert) nil nil)
         ("2" (apply-extensionality :hide? t)
          (("2" (hide-all-but 1) (("2" (grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((integrable? const-decl "bool" indefinite_integral nil)
    (measurable_set nonempty-type-eq-decl nil measure_space_def nil)
    (measurable_set? const-decl "bool" measure_space_def nil)
    (S formal-const-decl "sigma_algebra" indefinite_integral nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (T formal-type-decl nil indefinite_integral nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (indefinite_scal formula-decl nil indefinite_integral nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (- const-decl "[T -> real]" real_fun_ops reals)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (= const-decl "[T, T -> boolean]" equalities nil))
   shostak))
 (indefinite_diff_TCC1 0
  (indefinite_diff_TCC1-1 nil 3431890731
   ("" (skosimp)
    (("" (typepred "f1!1")
      (("" (typepred "f2!1")
        (("" (expand "integrable?")
          ((""
            (lemma "integrable_diff"
             ("f1" "phi(E!1) * f1!1" "f2" "phi(E!1) * f2!1"))
            (("1"
              (case-replace
               "((-[T])(phi(E!1) * f1!1, phi(E!1) * f2!1))=(phi(E!1) * ((-[T])(f1!1, f2!1)))")
              (("1" (hide-all-but 1)
                (("1" (apply-extensionality :hide? t)
                  (("1" (grind) nil nil)) nil))
                nil))
              nil)
             ("2" (propax) nil nil) ("3" (propax) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((integrable? const-decl "bool" indefinite_integral nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (measurable_set nonempty-type-eq-decl nil measure_space_def nil)
    (measurable_set? const-decl "bool" measure_space_def nil)
    (S formal-const-decl "sigma_algebra" indefinite_integral nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (set type-eq-decl nil sets nil)
    (T formal-type-decl nil indefinite_integral nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (- const-decl "[T -> real]" real_fun_ops reals)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (member const-decl "bool" sets nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (integrable_diff judgement-tcc nil integral nil)
    (integrable? const-decl "bool" integral nil)
    (integrable nonempty-type-eq-decl nil integral nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (phi const-decl "nat" measure_space nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (measure? const-decl "bool" generalized_measure_def nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     nil)
    (m formal-const-decl "measure_type" indefinite_integral nil))
   nil
   (indefinite_diff subtype
    "(real_fun_ops[indefinite_integral.T].-)(indefinite_integral.f1, indefinite_integral.f2)"
    "(indefinite_integral.integrable?(indefinite_integral.E))")))
 (indefinite_diff 0
  (indefinite_diff-1 nil 3391329626
   ("" (skosimp)
    (("" (lemma "indefinite_opp" ("f" "f2!1" "E" "E!1"))
      ((""
        (lemma "indefinite_add" ("f1" "f1!1" "f2" "-f2!1" "E" "E!1"))
        (("" (case-replace "f1!1 + -f2!1 = f1!1 - f2!1")
          (("1" (assert) nil nil)
           ("2" (hide-all-but 1)
            (("2" (apply-extensionality :hide? t)
              (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((integrable? const-decl "bool" indefinite_integral nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (measurable_set nonempty-type-eq-decl nil measure_space_def nil)
    (measurable_set? const-decl "bool" measure_space_def nil)
    (S formal-const-decl "sigma_algebra" indefinite_integral nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil indefinite_integral nil)
    (indefinite_opp formula-decl nil indefinite_integral nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (+ const-decl "[T -> real]" real_fun_ops reals)
    (- const-decl "[T -> real]" real_fun_ops reals)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (indefinite_add formula-decl nil indefinite_integral nil)
    (- const-decl "[T -> real]" real_fun_ops reals))
   shostak))
 (indefinite_ae_eq 0
  (indefinite_ae_eq-1 nil 3395208470
   ("" (skosimp)
    (("" (split)
      (("1" (flatten)
        (("1" (skosimp)
          (("1" (typepred "f1!1")
            (("1" (typepred "f2!1")
              (("1" (expand "integral")
                (("1" (assert)
                  (("1" (hide -1 -2 2)
                    (("1"
                      (lemma "integral_ae_eq"
                       ("f" "phi(E!1) * f1!1" "h" "phi(E!1) * f2!1"))
                      (("1" (assert)
                        (("1" (hide 2)
                          (("1" (expand "ae_eq?")
                            (("1" (expand "*")
                              (("1"
                                (expand "pointwise_ae?")
                                (("1"
                                  (expand "ae?")
                                  (("1"
                                    (expand "fullset")
                                    (("1"
                                      (expand "ae_in?")
                                      (("1"
                                        (skosimp)
                                        (("1"
                                          (inst + "E!2")
                                          (("1"
                                            (skosimp)
                                            (("1"
                                              (inst - "x!1")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 2)
                        (("2" (rewrite "prod_measurable")
                          (("2" (hide -1 2)
                            (("2" (lemma "phi_is_simple" ("X" "E!1"))
                              (("1" (grind) nil nil)
                               ("2"
                                (typepred "E!1")
                                (("2"
                                  (expand "measurable_set?")
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skosimp)
        (("2" (lemma "indefinite_eq" ("f1" "f1!1" "f2" "f2!1"))
          (("2" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((measurable_function nonempty-type-eq-decl nil measure_space_def
     nil)
    (measurable_function? const-decl "bool" measure_space_def nil)
    (measurable_set nonempty-type-eq-decl nil measure_space_def nil)
    (measurable_set? const-decl "bool" measure_space_def nil)
    (phi const-decl "nat" measure_space nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (set type-eq-decl nil sets nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (integral_ae_eq formula-decl nil integral nil)
    (measurable_fullset name-judgement "measurable_set[T, S]"
     indefinite_integral nil)
    (subset_algebra_fullset name-judgement "(S)" indefinite_integral
     nil)
    (ae? const-decl "bool" measure_theory nil)
    (ae_in? const-decl "bool" measure_theory nil)
    (negligible nonempty-type-eq-decl nil measure_theory nil)
    (negligible_set? const-decl "bool" measure_theory nil)
    (TRUE const-decl "bool" booleans nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (member const-decl "bool" sets nil)
    (fullset const-decl "set" sets nil)
    (pointwise_ae? const-decl "bool" measure_theory nil)
    (ae_eq? const-decl "bool" measure_theory nil)
    (prod_measurable judgement-tcc nil measure_space nil)
    (phi_is_simple judgement-tcc nil measure_space nil)
    (simple? const-decl "bool" measure_space nil)
    (is_finite const-decl "bool" finite_sets nil)
    (injective? const-decl "bool" functions nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (integral const-decl "real" indefinite_integral nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil indefinite_integral nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (setof type-eq-decl nil defined_types nil)
    (setofsets type-eq-decl nil sets nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (S formal-const-decl "sigma_algebra" indefinite_integral nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (measure? const-decl "bool" generalized_measure_def nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     nil)
    (m formal-const-decl "measure_type" indefinite_integral nil)
    (integrable? const-decl "bool" integral nil)
    (integrable nonempty-type-eq-decl nil integral nil)
    (indefinite_eq formula-decl nil indefinite_integral nil))
   shostak))
 (indefinite_0_le 0
  (indefinite_0_le-1 nil 3391331082
   ("" (skosimp)
    (("" (split)
      (("1" (flatten)
        (("1" (skosimp)
          (("1" (expand "integral")
            (("1"
              (lemma "integral_ae_le"
               ("f1" "lambda (x:T): 0" "f2" "phi(E!1) * f!1"))
              (("1" (rewrite "integral_zero")
                (("1" (assert)
                  (("1" (hide 2)
                    (("1" (expand "ae_nonneg?")
                      (("1" (expand "ae_le?")
                        (("1" (expand "pointwise_ae?")
                          (("1" (expand "ae?")
                            (("1" (expand "fullset")
                              (("1"
                                (expand "ae_in?")
                                (("1"
                                  (skosimp)
                                  (("1"
                                    (inst + "E!2")
                                    (("1"
                                      (skosimp)
                                      (("1"
                                        (inst - "x!1")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "*")
                                            (("1"
                                              (expand "phi")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (case-replace
                                                     "E!1(x!1)")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (rewrite "integrable_zero") nil nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (inst - "{x | f!1(x) < 0}")
          (("1" (expand "integral")
            (("1"
              (lemma "integral_nonneg"
               ("f" "-(phi({x | f!1(x) < 0}) * f!1)"))
              (("1" (split -1)
                (("1" (rewrite "integral_opp")
                  (("1"
                    (case-replace
                     "integral(phi({x_1: T | f!1(x_1) < 0}) * f!1)=0")
                    (("1" (hide -2 -3)
                      (("1"
                        (lemma "indefinite_opp"
                         ("f" "f!1" "E" "{x_1: T | f!1(x_1) < 0}"))
                        (("1" (expand "integral" -1)
                          (("1" (replace -2)
                            (("1"
                              (lemma "indefinite_eq_0"
                               ("f"
                                "-f!1"
                                "E"
                                "{x_2: T | f!1(x_2) < 0}"))
                              (("1"
                                (replace -2)
                                (("1"
                                  (assert)
                                  (("1"
                                    (split -1)
                                    (("1"
                                      (hide -2 -3)
                                      (("1"
                                        (expand "ae_nonneg?")
                                        (("1"
                                          (expand "pointwise_ae?")
                                          (("1"
                                            (expand "ae?")
                                            (("1"
                                              (expand "fullset")
                                              (("1"
                                                (expand "ae_in?")
                                                (("1"
                                                  (inst
                                                   +
                                                   "{x_1: T | f!1(x_1) < 0}")
                                                  (("1"
                                                    (skosimp)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand
                                                     "negligible_set?")
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (inst
                                                         +
                                                         "{x_1: T | f!1(x_1) < 0}")
                                                        (("2"
                                                          (expand
                                                           "null_set?")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (split)
                                                              (("1"
                                                                (hide
                                                                 -1
                                                                 -2)
                                                                (("1"
                                                                  (lemma
                                                                   "measurable_lt"
                                                                   ("f"
                                                                    "f!1"))
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (split
                                                                       -1)
                                                                      (("1"
                                                                        (inst
                                                                         -
                                                                         "0")
                                                                        (("1"
                                                                          (expand
                                                                           "measurable_set?")
                                                                          (("1"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (rewrite
                                                                         "integrable_is_measurable")
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "subset?")
                                                                (("2"
                                                                  (expand
                                                                   "member")
                                                                  (("2"
                                                                    (skosimp)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "ae_in?")
                                      (("2"
                                        (inst + "emptyset[T]")
                                        (("2"
                                          (skosimp)
                                          (("2"
                                            (typepred "x!1")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (expand "-")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "integrable?")
                                (("2"
                                  (rewrite "indefinite_integrable")
                                  nil
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide-all-but 1)
                          (("2" (lemma "measurable_lt" ("f" "f!1"))
                            (("2" (flatten)
                              (("2"
                                (split -1)
                                (("1"
                                  (inst - "0")
                                  (("1"
                                    (expand "integrable?")
                                    (("1"
                                      (rewrite "indefinite_integrable")
                                      (("1"
                                        (expand "measurable_set?")
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (rewrite "integrable_is_measurable")
                                  nil
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (typepred "f!1")
                          (("3" (hide -2 2)
                            (("3" (lemma "integrable_is_measurable")
                              (("3"
                                (inst - "f!1")
                                (("3"
                                  (rewrite "measurable_lt")
                                  (("3"
                                    (inst - "0")
                                    (("3"
                                      (expand "measurable_set?")
                                      (("3" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil)
                 ("2" (skosimp)
                  (("2" (expand "-")
                    (("2" (expand "*")
                      (("2" (expand "phi")
                        (("2" (expand "member")
                          (("2" (hide-all-but 1)
                            (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (rewrite "integrable_opp") nil nil))
              nil))
            nil)
           ("2" (typepred "f!1")
            (("2" (lemma "measurable_lt")
              (("2" (inst - "f!1")
                (("2" (assert)
                  (("2" (flatten)
                    (("2" (hide -2)
                      (("2" (split)
                        (("1" (inst - "0")
                          (("1" (expand "measurable_set?")
                            (("1" (propax) nil nil)) nil))
                          nil)
                         ("2" (assert)
                          (("2" (rewrite "integrable_is_measurable")
                            nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((m formal-const-decl "measure_type" indefinite_integral nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     nil)
    (measure? const-decl "bool" generalized_measure_def nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (S formal-const-decl "sigma_algebra" indefinite_integral nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil indefinite_integral nil)
    (measurable_set nonempty-type-eq-decl nil measure_space_def nil)
    (measurable_set? const-decl "bool" measure_space_def nil)
    (phi const-decl "nat" measure_space nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (set type-eq-decl nil sets nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (integrable nonempty-type-eq-decl nil integral nil)
    (integrable? const-decl "bool" integral nil)
    (integral_ae_le formula-decl nil integral nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ae_nonneg? const-decl "bool" measure_theory nil)
    (pointwise_ae? const-decl "bool" measure_theory nil)
    (fullset const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (negligible_set? const-decl "bool" measure_theory nil)
    (negligible nonempty-type-eq-decl nil measure_theory nil)
    (ae_in? const-decl "bool" measure_theory nil)
    (ae? const-decl "bool" measure_theory nil)
    (subset_algebra_fullset name-judgement "(S)" indefinite_integral
     nil)
    (measurable_fullset name-judgement "measurable_set[T, S]"
     indefinite_integral nil)
    (ae_le? const-decl "bool" measure_theory nil)
    (integral_zero formula-decl nil integral nil)
    (integrable_zero formula-decl nil integral nil)
    (integral const-decl "real" indefinite_integral nil)
    (f!1 skolem-const-decl "integrable[T, S, m]" indefinite_integral
     nil)
    (< const-decl "bool" reals nil)
    (- const-decl "[T -> real]" real_fun_ops reals)
    (integral_nonneg formula-decl nil integral nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (integral_opp formula-decl nil integral nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (integrable_opp application-judgement "integrable"
     indefinite_integral nil)
    (indefinite_eq_0 formula-decl nil indefinite_integral nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (emptyset const-decl "set" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (finite_emptyset name-judgement "finite_set" countable_props
     sets_aux)
    (finite_emptyset name-judgement "finite_set" countable_setofsets
     sets_aux)
    (finite_emptyset name-judgement "finite_set" sigma_countable
     sigma_set)
    (null_emptyset name-judgement "null_set" indefinite_integral nil)
    (subset_algebra_emptyset name-judgement "(S)" indefinite_integral
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (null_set? const-decl "bool" measure_theory nil)
    (measurable_lt formula-decl nil measure_space_def nil)
    (integrable_is_measurable judgement-tcc nil integral nil)
    (subset? const-decl "bool" sets nil)
    (indefinite_integrable formula-decl nil integral nil)
    (integrable? const-decl "bool" indefinite_integral nil)
    (indefinite_opp formula-decl nil indefinite_integral nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (integral const-decl "real" integral nil)
    (integrable_opp judgement-tcc nil integral nil))
   shostak))
 (indefinite_le 0
  (indefinite_le-1 nil 3391330005
   ("" (skosimp)
    (("" (lemma "indefinite_0_le" ("f" "f2!1-f1!1"))
      (("" (split)
        (("1" (flatten)
          (("1" (split -2)
            (("1" (hide-all-but (-1 1))
              (("1" (skosimp)
                (("1" (inst - "E!1")
                  (("1" (rewrite "indefinite_diff")
                    (("1" (assert) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (hide-all-but (-1 1)) (("2" (grind) nil nil)) nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (split -3)
            (("1" (hide-all-but (-1 1)) (("1" (grind) nil nil)) nil)
             ("2" (hide-all-but (-1 1))
              (("2" (skosimp)
                (("2" (inst - "E!1")
                  (("2" (rewrite "indefinite_diff")
                    (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((- const-decl "[T -> real]" real_fun_ops reals)
    (integrable nonempty-type-eq-decl nil integral nil)
    (integrable? const-decl "bool" integral nil)
    (m formal-const-decl "measure_type" indefinite_integral nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     nil)
    (measure? const-decl "bool" generalized_measure_def nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (S formal-const-decl "sigma_algebra" indefinite_integral nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-type-decl nil indefinite_integral nil)
    (indefinite_0_le formula-decl nil indefinite_integral nil)
    (integrable_diff application-judgement "integrable"
     indefinite_integral nil)
    (negligible nonempty-type-eq-decl nil measure_theory nil)
    (negligible_set? const-decl "bool" measure_theory nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (fullset const-decl "set" sets nil)
    (subset? const-decl "bool" sets nil)
    (null_set? const-decl "bool" measure_theory nil)
    (mu const-decl "nnreal" measure_props nil)
    (mu_fin? const-decl "bool" measure_props nil)
    (ae_le? const-decl "bool" measure_theory nil)
    (ae_nonneg? const-decl "bool" measure_theory nil)
    (pointwise_ae? const-decl "bool" measure_theory nil)
    (ae? const-decl "bool" measure_theory nil)
    (ae_in? const-decl "bool" measure_theory nil)
    (member const-decl "bool" sets nil)
    (measurable_fullset name-judgement "measurable_set[T, S]"
     indefinite_integral nil)
    (subset_algebra_fullset name-judgement "(S)" indefinite_integral
     nil)
    (measurable_set nonempty-type-eq-decl nil measure_space_def nil)
    (measurable_set? const-decl "bool" measure_space_def nil)
    (set type-eq-decl nil sets nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (indefinite_diff formula-decl nil indefinite_integral nil)
    (integrable? const-decl "bool" indefinite_integral nil))
   shostak))
 (indefinite_pm_TCC1 0
  (indefinite_pm_TCC1-1 nil 3431890731
   ("" (skosimp)
    (("" (typepred "f!1")
      (("" (expand "integrable?")
        (("" (lemma "integrable_plus" ("f" "phi(E!1) * f!1"))
          (("1"
            (case-replace
             "(plus[T](phi(E!1) * f!1))=(phi(E!1) * plus[T](f!1))")
            (("1" (apply-extensionality :hide? t)
              (("1" (hide-all-but 1) (("1" (grind) nil nil)) nil)
               ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
              nil))
            nil)
           ("2" (propax) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((integrable? const-decl "bool" indefinite_integral nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (measurable_set nonempty-type-eq-decl nil measure_space_def nil)
    (measurable_set? const-decl "bool" measure_space_def nil)
    (S formal-const-decl "sigma_algebra" indefinite_integral nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (set type-eq-decl nil sets nil)
    (T formal-type-decl nil indefinite_integral nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (m formal-const-decl "measure_type" indefinite_integral nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     nil)
    (measure? const-decl "bool" generalized_measure_def nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (phi const-decl "nat" measure_space nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (integrable nonempty-type-eq-decl nil integral nil)
    (integrable? const-decl "bool" integral nil)
    (integrable_plus judgement-tcc nil integral nil)
    (f!1 skolem-const-decl "(integrable?(E!1))" indefinite_integral
     nil)
    (E!1 skolem-const-decl "measurable_set[T, S]" indefinite_integral
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (member const-decl "bool" sets nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (plus const-decl "[T -> nnreal]" real_fun_ops_aux reals))
   nil
   (indefinite_pm subtype
    "real_fun_ops_aux[indefinite_integral.T].plus(indefinite_integral.f)"
    "(indefinite_integral.integrable?(indefinite_integral.E))")))
 (indefinite_pm_TCC2 0
  (indefinite_pm_TCC2-1 nil 3431890731
   ("" (skosimp)
    (("" (typepred "f!1")
      (("" (expand "integrable?")
        (("" (lemma "integrable_minus" ("f" "phi(E!1) * f!1"))
          (("1"
            (case-replace
             "(minus[T](phi(E!1) * f!1))=(phi(E!1) * minus[T](f!1))")
            (("1" (apply-extensionality :hide? t)
              (("1" (hide-all-but 1) (("1" (grind) nil nil)) nil)
               ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
              nil))
            nil)
           ("2" (propax) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((integrable? const-decl "bool" indefinite_integral nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (measurable_set nonempty-type-eq-decl nil measure_space_def nil)
    (measurable_set? const-decl "bool" measure_space_def nil)
    (S formal-const-decl "sigma_algebra" indefinite_integral nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (set type-eq-decl nil sets nil)
    (T formal-type-decl nil indefinite_integral nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (m formal-const-decl "measure_type" indefinite_integral nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     nil)
    (measure? const-decl "bool" generalized_measure_def nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (phi const-decl "nat" measure_space nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (integrable nonempty-type-eq-decl nil integral nil)
    (integrable? const-decl "bool" integral nil)
    (integrable_minus judgement-tcc nil integral nil)
    (f!1 skolem-const-decl "(integrable?(E!1))" indefinite_integral
     nil)
    (E!1 skolem-const-decl "measurable_set[T, S]" indefinite_integral
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (member const-decl "bool" sets nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (minus const-decl "[T -> nnreal]" real_fun_ops_aux reals))
   nil
   (indefinite_pm subtype
    "real_fun_ops_aux[indefinite_integral.T].minus(indefinite_integral.f)"
    "(indefinite_integral.integrable?(indefinite_integral.E))")))
 (indefinite_pm 0
  (indefinite_pm-1 nil 3391330468
   ("" (skosimp)
    (("" (expand "integral")
      (("" (lemma "plus_minus_def" ("f" "f!1"))
        (("" (rewrite "integral_diff" 1 :dir rl)
          ((""
            (case-replace
             "phi(E!1) * f!1=phi(E!1) * plus(f!1) - phi(E!1) * minus(f!1)")
            (("" (hide 2)
              (("" (apply-extensionality :hide? t)
                ((""
                  (lemma "extensionality_postulate"
                   ("f" "f!1" "g" "plus(f!1) - minus(f!1)"))
                  (("" (replace -1 -2 rl)
                    (("" (inst - "x!1")
                      (("" (hide -1) (("" (grind) nil nil)) nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((integral const-decl "real" indefinite_integral nil)
    (integral_diff formula-decl nil integral nil)
    (integrable? const-decl "bool" integral nil)
    (integrable nonempty-type-eq-decl nil integral nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (phi const-decl "nat" measure_space nil)
    (plus const-decl "[T -> nnreal]" real_fun_ops_aux reals)
    (minus const-decl "[T -> nnreal]" real_fun_ops_aux reals)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (measure? const-decl "bool" generalized_measure_def nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     nil)
    (m formal-const-decl "measure_type" indefinite_integral nil)
    (extensionality_postulate formula-decl nil functions nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (member const-decl "bool" sets nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (- const-decl "[T -> real]" real_fun_ops reals)
    (plus_minus_def formula-decl nil real_fun_ops_aux reals)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (setofsets type-eq-decl nil sets nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (S formal-const-decl "sigma_algebra" indefinite_integral nil)
    (measurable_set? const-decl "bool" measure_space_def nil)
    (measurable_set nonempty-type-eq-decl nil measure_space_def nil)
    (integrable? const-decl "bool" indefinite_integral nil)
    (T formal-type-decl nil indefinite_integral nil))
   shostak))
 (indefinite_union_TCC1 0
  (indefinite_union_TCC1-1 nil 3431890731
   ("" (skosimp)
    (("" (typepred "f!1")
      (("" (expand "integrable?")
        ((""
          (lemma "indefinite_integrable"
           ("E" "E1!1" "f" "phi(union(E1!1, E2!1)) * f!1"))
          (("1"
            (case-replace
             "(phi(E1!1) * (phi(union(E1!1, E2!1)) * f!1))=(phi(E1!1) * f!1)")
            (("1" (apply-extensionality :hide? t)
              (("1" (hide-all-but 1) (("1" (grind) nil nil)) nil))
              nil))
            nil)
           ("2" (propax) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((union const-decl "set" sets nil)
    (integrable? const-decl "bool" indefinite_integral nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (measurable_set nonempty-type-eq-decl nil measure_space_def nil)
    (measurable_set? const-decl "bool" measure_space_def nil)
    (S formal-const-decl "sigma_algebra" indefinite_integral nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (set type-eq-decl nil sets nil)
    (T formal-type-decl nil indefinite_integral nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (m formal-const-decl "measure_type" indefinite_integral nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     nil)
    (measure? const-decl "bool" generalized_measure_def nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (phi const-decl "nat" measure_space nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (integrable nonempty-type-eq-decl nil integral nil)
    (integrable? const-decl "bool" integral nil)
    (indefinite_integrable formula-decl nil integral nil)
    (measurable_union application-judgement "measurable_set[T, S]"
     indefinite_integral nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (member const-decl "bool" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil))
   nil
   (indefinite_union subtype "indefinite_integral.f"
    "(indefinite_integral.integrable?(indefinite_integral.E1))")))
 (indefinite_union_TCC2 0
  (indefinite_union_TCC2-1 nil 3431890731
   ("" (skosimp)
    (("" (typepred "f!1")
      (("" (expand "integrable?")
        ((""
          (lemma "indefinite_integrable"
           ("E" "E2!1" "f" "phi(union(E1!1, E2!1)) * f!1"))
          (("1"
            (case-replace
             "(phi(E2!1) * (phi(union(E1!1, E2!1)) * f!1))=(phi(E2!1) * f!1)")
            (("1" (apply-extensionality :hide? t)
              (("1" (hide-all-but 1) (("1" (grind) nil nil)) nil))
              nil))
            nil)
           ("2" (propax) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((union const-decl "set" sets nil)
    (integrable? const-decl "bool" indefinite_integral nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (measurable_set nonempty-type-eq-decl nil measure_space_def nil)
    (measurable_set? const-decl "bool" measure_space_def nil)
    (S formal-const-decl "sigma_algebra" indefinite_integral nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (set type-eq-decl nil sets nil)
    (T formal-type-decl nil indefinite_integral nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (m formal-const-decl "measure_type" indefinite_integral nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     nil)
    (measure? const-decl "bool" generalized_measure_def nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (phi const-decl "nat" measure_space nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (integrable nonempty-type-eq-decl nil integral nil)
    (integrable? const-decl "bool" integral nil)
    (indefinite_integrable formula-decl nil integral nil)
    (measurable_union application-judgement "measurable_set[T, S]"
     indefinite_integral nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (member const-decl "bool" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil))
   nil
   (indefinite_union subtype "indefinite_integral.f"
    "(indefinite_integral.integrable?(indefinite_integral.E2))")))
 (indefinite_union 0
  (indefinite_union-1 nil 3391226462
   ("" (skosimp*)
    (("" (expand "integral")
      ((""
        (case-replace "phi(union(E1!1, E2!1)) = phi(E1!1)+phi(E2!1)")
        (("1" (expand "*" 1 1)
          (("1" (expand "+" 1 1)
            (("1"
              (lemma "integral_add"
               ("f1" "phi(E1!1) * f!1" "f2" "phi(E2!1) * f!1"))
              (("1" (expand "+" -1 1)
                (("1" (expand "*" -1 1)
                  (("1" (expand "*" -1 1) (("1" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide 2)
          (("2" (apply-extensionality :hide? t)
            (("1" (expand "disjoint?")
              (("1" (expand "empty?")
                (("1" (inst - "x!1") (("1" (grind) nil nil)) nil))
                nil))
              nil)
             ("2" (hide -1) (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((integral const-decl "real" indefinite_integral nil)
    (disjoint? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (measurable_intersection application-judgement "measurable_set"
     indefinite_integral nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (empty? const-decl "bool" sets nil)
    (measurable_union application-judgement "measurable_set[T, S]"
     indefinite_integral nil)
    (E2!1 skolem-const-decl "measurable_set[T, S]" indefinite_integral
     nil)
    (E1!1 skolem-const-decl "measurable_set[T, S]" indefinite_integral
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (m formal-const-decl "measure_type" indefinite_integral nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     nil)
    (measure? const-decl "bool" generalized_measure_def nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (nnreal type-eq-decl nil real_types nil)
    (integrable? const-decl "bool" indefinite_integral nil)
    (integrable nonempty-type-eq-decl nil integral nil)
    (integrable? const-decl "bool" integral nil)
    (integral_add formula-decl nil integral nil)
    (+ const-decl "[T -> real]" real_fun_ops reals)
    (measurable_set nonempty-type-eq-decl nil measure_space_def nil)
    (measurable_set? const-decl "bool" measure_space_def nil)
    (union const-decl "set" sets nil)
    (phi const-decl "nat" measure_space nil)
    (S formal-const-decl "sigma_algebra" indefinite_integral nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-type-decl nil indefinite_integral nil))
   shostak))
 (indefinite_subset_TCC1 0
  (indefinite_subset_TCC1-1 nil 3431890731
   ("" (skosimp)
    (("" (typepred "f!1")
      (("" (expand "integrable?")
        ((""
          (lemma "indefinite_integrable"
           ("E" "E1!1" "f" "phi(E2!1) * f!1"))
          (("1"
            (case-replace
             "(phi(E1!1) * (phi(E2!1) * f!1))=(phi(E1!1) * f!1)")
            (("1" (hide-all-but (-3 1))
              (("1" (apply-extensionality :hide? t)
                (("1" (expand "subset?")
                  (("1" (inst - "x!1") (("1" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (propax) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((integrable? const-decl "bool" indefinite_integral nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (measurable_set nonempty-type-eq-decl nil measure_space_def nil)
    (measurable_set? const-decl "bool" measure_space_def nil)
    (S formal-const-decl "sigma_algebra" indefinite_integral nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (set type-eq-decl nil sets nil)
    (T formal-type-decl nil indefinite_integral nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (m formal-const-decl "measure_type" indefinite_integral nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     nil)
    (measure? const-decl "bool" generalized_measure_def nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (phi const-decl "nat" measure_space nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (integrable nonempty-type-eq-decl nil integral nil)
    (integrable? const-decl "bool" integral nil)
    (indefinite_integrable formula-decl nil integral nil)
    (subset? const-decl "bool" sets nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (member const-decl "bool" sets nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (= const-decl "[T, T -> boolean]" equalities nil))
   nil
   (indefinite_subset subtype "indefinite_integral.f"
    "(indefinite_integral.integrable?(indefinite_integral.E1))")))
 (indefinite_subset 0
  (indefinite_subset-1 nil 3391226795
   ("" (skosimp)
    ((""
      (lemma "indefinite_union"
       ("f" "f!1" "E1" "E1!1" "E2" "difference(E2!1,E1!1)"))
      (("1" (rewrite "difference_disjoint")
        (("1" (lemma "union_diff_subset" ("a" "E1!1" "b" "E2!1"))
          (("1" (assert)
            (("1" (replace -1)
              (("1" (hide -1 -3)
                (("1" (name-replace "INT1" "integral(E1!1, f!1)")
                  (("1" (name-replace "INT2" "integral(E2!1, f!1)")
                    (("1" (typepred "f!1")
                      (("1" (expand "integrable?")
                        (("1"
                          (lemma "indefinite_integrable"
                           ("E" "difference(E2!1, E1!1)" "f"
                            "phi(E2!1) * f!1"))
                          (("1"
                            (case-replace
                             "phi(difference(E2!1, E1!1)) * (phi(E2!1) * f!1)=phi(difference(E2!1, E1!1))*f!1")
                            (("1" (hide -1)
                              (("1"
                                (expand "integral")
                                (("1"
                                  (lemma
                                   "integral_ae_le"
                                   ("f1"
                                    "lambda x: 0"
                                    "f2"
                                    "phi(difference(E2!1, E1!1)) * f!1"))
                                  (("1"
                                    (split -1)
                                    (("1"
                                      (rewrite "integral_zero")
                                      (("1" (assert) nil nil))
                                      nil)
                                     ("2"
                                      (hide-all-but (-4 1))
                                      (("2"
                                        (expand "ae_nonneg?")
                                        (("2"
                                          (expand "ae_le?")
                                          (("2"
                                            (expand "pointwise_ae?")
                                            (("2"
                                              (expand "ae?")
                                              (("2"
                                                (expand "fullset")
                                                (("2"
                                                  (expand "ae_in?")
                                                  (("2"
                                                    (skosimp)
                                                    (("2"
                                                      (inst + "E!1")
                                                      (("2"
                                                        (skosimp)
                                                        (("2"
                                                          (inst
                                                           -
                                                           "x!1")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (rewrite "integrable_zero")
                                    nil
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but 1)
                              (("2"
                                (apply-extensionality :hide? t)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (typepred "f!1")
        (("2" (hide 2 -3)
          (("2" (expand "integrable?")
            (("2" (lemma "union_diff_subset" ("a" "E1!1" "b" "E2!1"))
              (("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((union const-decl "set" sets nil)
    (integrable? const-decl "bool" indefinite_integral nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (difference const-decl "set" sets nil)
    (measurable_set nonempty-type-eq-decl nil measure_space_def nil)
    (measurable_set? const-decl "bool" measure_space_def nil)
    (S formal-const-decl "sigma_algebra" indefinite_integral nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil indefinite_integral nil)
    (indefinite_union formula-decl nil indefinite_integral nil)
    (measurable_difference application-judgement "measurable_set[T, S]"
     indefinite_integral nil)
    (measurable_union application-judgement "measurable_set[T, S]"
     indefinite_integral nil)
    (union_diff_subset formula-decl nil sets_lemmas nil)
    (integral const-decl "real" indefinite_integral nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (m formal-const-decl "measure_type" indefinite_integral nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     nil)
    (measure? const-decl "bool" generalized_measure_def nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (phi const-decl "nat" measure_space nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (integrable nonempty-type-eq-decl nil integral nil)
    (integrable? const-decl "bool" integral nil)
    (indefinite_integrable formula-decl nil integral nil)
    (integral_ae_le formula-decl nil integral nil)
    (ae_le? const-decl "bool" measure_theory nil)
    (measurable_fullset name-judgement "measurable_set[T, S]"
     indefinite_integral nil)
    (subset_algebra_fullset name-judgement "(S)" indefinite_integral
     nil)
    (ae? const-decl "bool" measure_theory nil)
    (ae_in? const-decl "bool" measure_theory nil)
    (negligible nonempty-type-eq-decl nil measure_theory nil)
    (negligible_set? const-decl "bool" measure_theory nil)
    (TRUE const-decl "bool" booleans nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (member const-decl "bool" sets nil)
    (fullset const-decl "set" sets nil)
    (pointwise_ae? const-decl "bool" measure_theory nil)
    (ae_nonneg? const-decl "bool" measure_theory nil)
    (integral_zero formula-decl nil integral nil)
    (integrable_zero formula-decl nil integral nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (difference_disjoint formula-decl nil sets_lemmas nil))
   shostak))
 (indefinite_null_TCC1 0
  (indefinite_null_TCC1-1 nil 3431890731
   ("" (skosimp)
    (("" (expand "integrable?")
      (("" (typepred "N!1")
        ((""
          (lemma "integral_ae_eq"
           ("f" "lambda x: 0" "h" "phi(N!1) * h!1"))
          (("1" (assert)
            (("1" (hide 2)
              (("1" (expand "ae_eq?")
                (("1" (expand "pointwise_ae?")
                  (("1" (expand "*")
                    (("1" (expand "phi")
                      (("1" (expand "member")
                        (("1" (expand "ae?")
                          (("1" (expand "fullset")
                            (("1" (expand "ae_in?")
                              (("1"
                                (inst + "N!1")
                                (("1"
                                  (skosimp)
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (rewrite "integrable_zero") nil nil))
          nil))
        nil))
      nil))
    nil)
   ((prod_measurable application-judgement "measurable_function[T, S]"
     indefinite_integral nil)
    (integrable? const-decl "bool" indefinite_integral nil)
    (phi const-decl "nat" measure_space nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (measurable_function nonempty-type-eq-decl nil measure_space_def
     nil)
    (measurable_function? const-decl "bool" measure_space_def nil)
    (integrable nonempty-type-eq-decl nil integral nil)
    (integrable? const-decl "bool" integral nil)
    (integral_ae_eq formula-decl nil integral nil)
    (isf_phi application-judgement "isf" indefinite_integral nil)
    (pointwise_ae? const-decl "bool" measure_theory nil)
    (measurable_fullset name-judgement "measurable_set[T, S]"
     indefinite_integral nil)
    (subset_algebra_fullset name-judgement "(S)" indefinite_integral
     nil)
    (ae? const-decl "bool" measure_theory nil)
    (ae_in? const-decl "bool" measure_theory nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (negligible_set? const-decl "bool" measure_theory nil)
    (negligible nonempty-type-eq-decl nil measure_theory nil)
    (fullset const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (ae_eq? const-decl "bool" measure_theory nil)
    (integrable_zero formula-decl nil integral nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil indefinite_integral nil)
    (set type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (setofsets type-eq-decl nil sets nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (S formal-const-decl "sigma_algebra" indefinite_integral nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (measure? const-decl "bool" generalized_measure_def nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     nil)
    (m formal-const-decl "measure_type" indefinite_integral nil)
    (null_set? const-decl "bool" measure_theory nil)
    (null_set nonempty-type-eq-decl nil measure_theory nil))
   nil
   (indefinite_null subtype "indefinite_integral.h"
    "(indefinite_integral.integrable?(indefinite_integral.N))")))
 (indefinite_null 0
  (indefinite_null-1 nil 3391223142
   ("" (skosimp)
    ((""
      (lemma "integral_ae_eq" ("f" "lambda x: 0" "h" "phi(N!1)* h!1"))
      (("1" (rewrite "integral_zero")
        (("1" (expand "integral" +)
          (("1" (assert)
            (("1" (hide 2)
              (("1" (typepred "N!1")
                (("1" (expand "ae_eq?")
                  (("1" (expand "pointwise_ae?")
                    (("1" (expand "ae?")
                      (("1" (expand "fullset")
                        (("1" (expand "ae_in?")
                          (("1" (inst + "N!1")
                            (("1" (skosimp)
                              (("1"
                                (hide -1)
                                (("1" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (rewrite "integrable_zero") nil nil))
      nil))
    nil)
   ((m formal-const-decl "measure_type" indefinite_integral nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     nil)
    (measure? const-decl "bool" generalized_measure_def nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (S formal-const-decl "sigma_algebra" indefinite_integral nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil indefinite_integral nil)
    (null_set nonempty-type-eq-decl nil measure_theory nil)
    (null_set? const-decl "bool" measure_theory nil)
    (phi const-decl "nat" measure_space nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (set type-eq-decl nil sets nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (measurable_function nonempty-type-eq-decl nil measure_space_def
     nil)
    (measurable_function? const-decl "bool" measure_space_def nil)
    (integrable nonempty-type-eq-decl nil integral nil)
    (integrable? const-decl "bool" integral nil)
    (integral_ae_eq formula-decl nil integral nil)
    (prod_measurable application-judgement "measurable_function[T, S]"
     indefinite_integral nil)
    (isf_phi application-judgement "isf" indefinite_integral nil)
    (integral const-decl "real" indefinite_integral nil)
    (ae_eq? const-decl "bool" measure_theory nil)
    (measurable_fullset name-judgement "measurable_set[T, S]"
     indefinite_integral nil)
    (subset_algebra_fullset name-judgement "(S)" indefinite_integral
     nil)
    (ae? const-decl "bool" measure_theory nil)
    (ae_in? const-decl "bool" measure_theory nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (member const-decl "bool" sets nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (negligible_set? const-decl "bool" measure_theory nil)
    (negligible nonempty-type-eq-decl nil measure_theory nil)
    (fullset const-decl "set" sets nil)
    (pointwise_ae? const-decl "bool" measure_theory nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (integral_zero formula-decl nil integral nil)
    (integrable_zero formula-decl nil integral nil))
   shostak))
 (indefinite_countably_additive_TCC1 0
  (indefinite_countably_additive_TCC1-1 nil 3454503117
   ("" (subtype-tcc) nil nil)
   ((S formal-const-decl "sigma_algebra" indefinite_integral nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil indefinite_integral nil)
    (measurable_set? const-decl "bool" measure_space_def nil))
   nil
   (indefinite_countably_additive subtype
    "indefinite_integral.DX(indefinite_integral.n)"
    "measurable_set[T, S]")))
 (indefinite_countably_additive_TCC2 0
  (indefinite_countably_additive_TCC2-1 nil 3454503117
   ("" (skosimp)
    (("" (expand "integrable?")
      (("" (rewrite "indefinite_integrable")
        (("" (expand "measurable_set?") (("" (propax) nil nil)) nil))
        nil))
      nil))
    nil)
   ((prod_measurable application-judgement "measurable_function[T, S]"
     indefinite_integral nil)
    (integrable? const-decl "bool" indefinite_integral nil)
    (phi_is_simple application-judgement "simple" indefinite_integral
     nil)
    (m formal-const-decl "measure_type" indefinite_integral nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     nil)
    (measure? const-decl "bool" generalized_measure_def nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (S formal-const-decl "sigma_algebra" indefinite_integral nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil indefinite_integral nil)
    (integrable nonempty-type-eq-decl nil integral nil)
    (integrable? const-decl "bool" integral nil)
    (disjoint_indexed_measurable nonempty-type-eq-decl nil
     generalized_measure_def nil)
    (disjoint_indexed_measurable? const-decl "bool"
     generalized_measure_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (measurable_set nonempty-type-eq-decl nil measure_space_def nil)
    (measurable_set? const-decl "bool" measure_space_def nil)
    (set type-eq-decl nil sets nil)
    (indefinite_integrable formula-decl nil integral nil))
   nil
   (indefinite_countably_additive subtype "indefinite_integral.f"
    "(indefinite_integral.integrable?(indefinite_integral.DX(indefinite_integral.n)))")))
 (indefinite_countably_additive_TCC3 0
  (indefinite_countably_additive_TCC3-1 nil 3454503117
   ("" (skosimp)
    (("" (typepred "S")
      (("" (rewrite "measurable_IUnion")
        (("" (skolem + "n!1")
          (("" (expand "measurable_set?") (("" (propax) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((S formal-const-decl "sigma_algebra" indefinite_integral nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (T formal-type-decl nil indefinite_integral nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (sigma_algebra_IUnion_rew application-judgement "(S)"
     indefinite_integral nil)
    (disjoint_indexed_measurable nonempty-type-eq-decl nil
     generalized_measure_def nil)
    (disjoint_indexed_measurable? const-decl "bool"
     generalized_measure_def nil)
    (sequence type-eq-decl nil sequences nil)
    (measurable_set nonempty-type-eq-decl nil measure_space_def nil)
    (measurable_set? const-decl "bool" measure_space_def nil)
    (set type-eq-decl nil sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (measurable_IUnion judgement-tcc nil measure_space_def nil))
   nil
   (indefinite_countably_additive subtype
    "indexed_sets[nat, indefinite_integral.T].IUnion(indefinite_integral.DX)"
    "measurable_set[T, S]")))
 (indefinite_countably_additive_TCC4 0
  (indefinite_countably_additive_TCC4-1 nil 3454503117
   ("" (skosimp)
    (("" (lemma "indefinite_countably_additive_TCC3" ("DX" "DX!1"))
      (("" (expand "integrable?")
        (("" (rewrite "indefinite_integrable") nil nil)) nil))
      nil))
    nil)
   ((disjoint_indexed_measurable nonempty-type-eq-decl nil
     generalized_measure_def nil)
    (disjoint_indexed_measurable? const-decl "bool"
     generalized_measure_def nil)
    (S formal-const-decl "sigma_algebra" indefinite_integral nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (T formal-type-decl nil indefinite_integral nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (indefinite_countably_additive_TCC3 subtype-tcc nil
     indefinite_integral nil)
    (sigma_algebra_IUnion_rew application-judgement "(S)"
     indefinite_integral nil)
    (indefinite_integrable formula-decl nil integral nil)
    (set type-eq-decl nil sets nil)
    (measurable_set? const-decl "bool" measure_space_def nil)
    (measurable_set nonempty-type-eq-decl nil measure_space_def nil)
    (IUnion const-decl "set[T]" indexed_sets nil)
    (integrable? const-decl "bool" integral nil)
    (integrable nonempty-type-eq-decl nil integral nil)
    (nnreal type-eq-decl nil real_types nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (measure? const-decl "bool" generalized_measure_def nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     nil)
    (m formal-const-decl "measure_type" indefinite_integral nil)
    (integrable? const-decl "bool" indefinite_integral nil)
    (prod_measurable application-judgement "measurable_function[T, S]"
     indefinite_integral nil))
   nil
   (indefinite_countably_additive subtype "indefinite_integral.f"
    "(indefinite_integral.integrable?(indexed_sets[nat, indefinite_integral.T].IUnion(indefinite_integral.DX)))")))
 (indefinite_countably_additive 0
  (indefinite_countably_additive-2 "" 3758904446
   (""
    (case "FORALL (DX: disjoint_indexed_measurable[T, S],
              f: integrable[T, S, m]):ae_nonneg?(f) =>
        convergence?(series(LAMBDA n: integral(DX(n), f)),
                     integral(IUnion(DX), f))")
    (("1" (skosimp)
      (("1" (inst-cp - "DX!1" "minus(f!1)")
        (("1" (inst - "DX!1" "plus(f!1)")
          (("1" (split)
            (("1" (split)
              (("1"
                (case "forall (u:sequence[real],l:real): convergence?(u,l) iff convergence(u,l)")
                (("1"
                  (inst-cp - "series(LAMBDA n: integral(DX!1(n), f!1))"
                   "integral(IUnion(DX!1), f!1)")
                  (("1"
                    (inst-cp -
                     "series(LAMBDA n: integral(DX!1(n), minus(f!1)))"
                     "integral(IUnion(DX!1), minus(f!1))")
                    (("1"
                      (inst -
                       "series(LAMBDA n: integral(DX!1(n), plus(f!1)))"
                       "integral(IUnion(DX!1), plus(f!1))")
                      (("1" (replace -1)
                        (("1" (replace -2)
                          (("1" (replace -3)
                            (("1" (hide -1 -2 -3)
                              (("1"
                                (lemma
                                 "cnv_seq_diff"
                                 ("s2"
                                  "series(LAMBDA n: integral(DX!1(n), minus(f!1)))"
                                  "l2"
                                  "integral(IUnion(DX!1), minus(f!1))"
                                  "s1"
                                  "series(LAMBDA n: integral(DX!1(n), plus(f!1)))"
                                  "l1"
                                  "integral(IUnion(DX!1), plus(f!1))"))
                                (("1"
                                  (assert)
                                  (("1"
                                    (rewrite "series_diff")
                                    (("1"
                                      (expand "-" -1)
                                      (("1"
                                        (case-replace
                                         "(LAMBDA (x: nat):
                           integral(DX!1(x), plus(f!1)) -
                            integral(DX!1(x), minus(f!1)))=LAMBDA n: integral(DX!1(n), f!1)")
                                        (("1"
                                          (hide -1)
                                          (("1"
                                            (name-replace
                                             "LHS"
                                             "series(LAMBDA n: integral(DX!1(n), f!1))")
                                            (("1"
                                              (hide -2 -3)
                                              (("1"
                                                (rewrite
                                                 "indefinite_diff"
                                                 -1
                                                 :dir
                                                 rl)
                                                (("1"
                                                  (case-replace
                                                   "plus(f!1) - minus(f!1)=f!1")
                                                  (("1"
                                                    (apply-extensionality
                                                     :hide?
                                                     t)
                                                    (("1"
                                                      (hide-all-but 1)
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (skosimp)
                                              (("2"
                                                (expand "integrable?")
                                                (("2"
                                                  (rewrite
                                                   "indefinite_integrable")
                                                  (("2"
                                                    (expand
                                                     "measurable_set?")
                                                    (("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (apply-extensionality
                                           1
                                           :hide?
                                           t)
                                          (("1"
                                            (hide-all-but 1)
                                            (("1"
                                              (lemma
                                               "indefinite_diff"
                                               ("E"
                                                "DX!1(x!1)"
                                                "f1"
                                                "plus(f!1)"
                                                "f2"
                                                "minus(f!1)"))
                                              (("1"
                                                (replace -1 1 rl)
                                                (("1"
                                                  (case-replace
                                                   "plus(f!1) - minus(f!1)=f!1")
                                                  (("1"
                                                    (apply-extensionality
                                                     :hide?
                                                     t)
                                                    (("1"
                                                      (hide-all-but 1)
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (skosimp)
                                            (("2"
                                              (expand "integrable?")
                                              (("2"
                                                (rewrite
                                                 "indefinite_integrable")
                                                (("2"
                                                  (expand
                                                   "measurable_set?")
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (skosimp)
                                            (("3"
                                              (expand "integrable?")
                                              (("3"
                                                (rewrite
                                                 "indefinite_integrable")
                                                (("3"
                                                  (expand
                                                   "measurable_set?")
                                                  (("3"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("4"
                                            (skosimp)
                                            (("4"
                                              (expand "integrable?")
                                              (("4"
                                                (rewrite
                                                 "indefinite_integrable")
                                                (("4"
                                                  (expand
                                                   "measurable_set?")
                                                  (("4"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("5"
                                            (skosimp)
                                            (("5"
                                              (expand
                                               "measurable_set?")
                                              (("5" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (skosimp)
                                          (("3"
                                            (expand "integrable?")
                                            (("3"
                                              (rewrite
                                               "indefinite_integrable")
                                              (("3"
                                                (expand
                                                 "measurable_set?")
                                                (("3"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (skosimp)
                                  (("2"
                                    (expand "integrable?")
                                    (("2"
                                      (rewrite "indefinite_integrable")
                                      (("2"
                                        (expand "measurable_set?")
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (skosimp)
                                  (("3"
                                    (expand "integrable?")
                                    (("3"
                                      (rewrite "indefinite_integrable")
                                      (("3"
                                        (expand "measurable_set?")
                                        (("3" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("4"
                                  (skosimp)
                                  (("4"
                                    (expand "measurable_set?")
                                    (("4" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (skosimp)
                        (("2" (expand "integrable?")
                          (("2" (rewrite "indefinite_integrable")
                            (("2" (expand "measurable_set?")
                              (("2" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("3" (expand "measurable_set?")
                        (("3" (propax) nil nil)) nil))
                      nil)
                     ("2" (skosimp)
                      (("2" (expand "integrable?")
                        (("2" (rewrite "indefinite_integrable")
                          (("2" (expand "measurable_set?")
                            (("2" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("3" (skosimp)
                      (("3" (expand "measurable_set?")
                        (("3" (propax) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (skosimp)
                    (("2" (expand "integrable?")
                      (("2" (rewrite "indefinite_integrable")
                        (("2" (expand "measurable_set?")
                          (("2" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("3" (expand "measurable_set?")
                    (("3" (propax) nil nil)) nil))
                  nil)
                 ("2" (hide-all-but 1)
                  (("2" (skosimp*)
                    (("2" (rewrite "metric_convergence_def")
                      (("2" (expand "metric_converges_to")
                        (("2" (expand "convergence")
                          (("2" (expand "member")
                            (("2" (expand "ball")
                              (("2"
                                (split)
                                (("1"
                                  (skosimp*)
                                  (("1"
                                    (inst - "epsilon!1")
                                    (("1"
                                      (skosimp)
                                      (("1"
                                        (inst + "n!1")
                                        (("1"
                                          (skosimp)
                                          (("1"
                                            (inst - "i!1")
                                            (("1" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (skosimp*)
                                  (("2"
                                    (inst - "r!1")
                                    (("2"
                                      (skosimp)
                                      (("2"
                                        (inst + "n!1")
                                        (("2"
                                          (skosimp)
                                          (("2"
                                            (inst - "i!1")
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide-all-but 1)
                (("2" (expand "ae_nonneg?")
                  (("2" (expand "pointwise_ae?")
                    (("2" (expand "ae?")
                      (("2" (expand "ae_in?")
                        (("2" (inst + "emptyset")
                          (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide-all-but 1)
              (("2" (expand "ae_nonneg?")
                (("2" (expand "pointwise_ae?")
                  (("2" (expand "ae?")
                    (("2" (expand "ae_in?")
                      (("2" (inst + "emptyset") (("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (skosimp)
        (("2" (lemma "increasing_IUnion" ("A" "DX!1"))
          (("2" (skosimp)
            (("2"
              (case "forall n: S(B!1(n)) & measurable_set?(B!1(n)) & B!1(n) = IUnion(n,DX!1)")
              (("1"
                (lemma "monotone_convergence"
                 ("F" "lambda n: phi(B!1(n))*f!1"))
                (("1" (split)
                  (("1" (flatten)
                    (("1" (hide -1 -2)
                      (("1" (inst - "phi(IUnion(DX!1))*f!1")
                        (("1" (split)
                          (("1" (expand "converges_upto?")
                            (("1" (expand "o ")
                              (("1"
                                (flatten)
                                (("1"
                                  (case-replace
                                   "series(LAMBDA n: integral(DX!1(n), f!1))=LAMBDA n: integral(phi(B!1(n)) * f!1)")
                                  (("1"
                                    (expand "integral" 1 2)
                                    (("1" (propax) nil nil))
                                    nil)
                                   ("2"
                                    (hide 2 -1 -2)
                                    (("2"
                                      (rewrite
                                       "extensionality_postulate"
                                       1
                                       :dir
                                       rl)
                                      (("1"
                                        (copy -1)
                                        (("1"
                                          (induct "x")
                                          (("1"
                                            (expand "series")
                                            (("1"
                                              (expand "sigma")
                                              (("1"
                                                (expand "sigma")
                                                (("1"
                                                  (expand
                                                   "integral"
                                                   1
                                                   1)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (skosimp*)
                                            (("2"
                                              (expand "series")
                                              (("2"
                                                (expand "sigma" 1)
                                                (("2"
                                                  (replace -1)
                                                  (("2"
                                                    (hide -1)
                                                    (("2"
                                                      (lemma
                                                       "indefinite_union"
                                                       ("E1"
                                                        "B!1(j!1)"
                                                        "E2"
                                                        "DX!1(1+j!1)"
                                                        "f"
                                                        "f!1"))
                                                      (("1"
                                                        (split -1)
                                                        (("1"
                                                          (inst
                                                           -6
                                                           "j!1")
                                                          (("1"
                                                            (replace
                                                             -6)
                                                            (("1"
                                                              (replace
                                                               -6
                                                               *
                                                               rl)
                                                              (("1"
                                                                (expand
                                                                 "integral"
                                                                 1
                                                                 1)
                                                                (("1"
                                                                  (expand
                                                                   "integral"
                                                                   -1)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           (-1 1))
                                                          (("2"
                                                            (inst
                                                             -
                                                             "j!1")
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (hide
                                                                 -1
                                                                 -2)
                                                                (("2"
                                                                  (replace
                                                                   -1)
                                                                  (("2"
                                                                    (hide
                                                                     -1)
                                                                    (("2"
                                                                      (typepred
                                                                       "DX!1")
                                                                      (("2"
                                                                        (expand
                                                                         "disjoint_indexed_measurable?")
                                                                        (("2"
                                                                          (expand
                                                                           "disjoint?")
                                                                          (("2"
                                                                            (expand
                                                                             "disjoint?")
                                                                            (("2"
                                                                              (expand
                                                                               "intersection")
                                                                              (("2"
                                                                                (expand
                                                                                 "empty?")
                                                                                (("2"
                                                                                  (expand
                                                                                   "member")
                                                                                  (("2"
                                                                                    (skosimp*)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "IUnion")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "image")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "Union")
                                                                                          (("2"
                                                                                            (skosimp)
                                                                                            (("2"
                                                                                              (typepred
                                                                                               "a!1")
                                                                                              (("2"
                                                                                                (skolem
                                                                                                 -
                                                                                                 "n!2")
                                                                                                (("2"
                                                                                                  (replace
                                                                                                   -1)
                                                                                                  (("2"
                                                                                                    (hide
                                                                                                     -1)
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       -
                                                                                                       "n!2"
                                                                                                       "1+j!1")
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (inst
                                                                                                           -
                                                                                                           "x!1")
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (expand
                                                         "integrable?")
                                                        (("2"
                                                          (rewrite
                                                           "indefinite_integrable"
                                                           1)
                                                          (("2"
                                                            (inst
                                                             -5
                                                             "j!1")
                                                            (("2"
                                                              (inst
                                                               -
                                                               "j!1+1")
                                                              (("2"
                                                                (expand
                                                                 "measurable_set?")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (inst - "j!1")
                                                        (("3"
                                                          (flatten)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (skosimp)
                                            (("3"
                                              (inst - "x!2")
                                              (("3"
                                                (flatten)
                                                (("3"
                                                  (rewrite
                                                   "indefinite_integrable")
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("4"
                                            (skosimp)
                                            (("4"
                                              (expand "integrable?")
                                              (("4"
                                                (rewrite
                                                 "indefinite_integrable")
                                                (("4"
                                                  (expand
                                                   "measurable_set?")
                                                  (("4"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("5"
                                            (expand "measurable_set?")
                                            (("5" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (skosimp)
                                        (("2"
                                          (expand "integrable?")
                                          (("2"
                                            (rewrite
                                             "indefinite_integrable")
                                            (("2"
                                              (expand
                                               "measurable_set?")
                                              (("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (expand "measurable_set?")
                                        (("3" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (skosimp)
                                    (("3"
                                      (expand "integrable?")
                                      (("3"
                                        (rewrite
                                         "indefinite_integrable")
                                        (("3"
                                          (expand "measurable_set?")
                                          (("3" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("4"
                                    (skosimp)
                                    (("4"
                                      (expand "measurable_set?")
                                      (("4" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 2)
                            (("2" (replace -5)
                              (("2"
                                (hide -3 -4 -5 -6)
                                (("2"
                                  (expand "ae_convergence?")
                                  (("2"
                                    (expand "fullset")
                                    (("2"
                                      (expand "ae_convergence_in?")
                                      (("2"
                                        (expand "ae_in?")
                                        (("2"
                                          (inst + "emptyset")
                                          (("2"
                                            (expand "member")
                                            (("2"
                                              (skosimp)
                                              (("2"
                                                (hide 1)
                                                (("2"
                                                  (hide -1)
                                                  (("2"
                                                    (expand "*")
                                                    (("2"
                                                      (expand "phi")
                                                      (("2"
                                                        (expand
                                                         "member")
                                                        (("2"
                                                          (rewrite
                                                           "metric_convergence_def")
                                                          (("1"
                                                            (expand
                                                             "metric_converges_to")
                                                            (("1"
                                                              (skosimp)
                                                              (("1"
                                                                (case-replace
                                                                 "IUnion(B!1)(x!1)")
                                                                (("1"
                                                                  (expand
                                                                   "IUnion")
                                                                  (("1"
                                                                    (skosimp)
                                                                    (("1"
                                                                      (inst
                                                                       +
                                                                       "i!1")
                                                                      (("1"
                                                                        (skosimp)
                                                                        (("1"
                                                                          (expand
                                                                           "increasing?")
                                                                          (("1"
                                                                            (inst
                                                                             -
                                                                             "i!1"
                                                                             "i!2")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (expand
                                                                                 "subset?")
                                                                                (("1"
                                                                                  (inst
                                                                                   -
                                                                                   "x!1")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "ball")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "member")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (inst
                                                                     +
                                                                     "0")
                                                                    (("2"
                                                                      (skosimp)
                                                                      (("2"
                                                                        (case-replace
                                                                         "B!1(i!1)(x!1)")
                                                                        (("1"
                                                                          (expand
                                                                           "IUnion")
                                                                          (("1"
                                                                            (inst
                                                                             +
                                                                             "i!1")
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (expand
                                                                             "ball")
                                                                            (("2"
                                                                              (expand
                                                                               "abs")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             1)
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (rewrite "indefinite_integrable") nil
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "ae_increasing?")
                    (("2" (hide 2 -3 -4 -5)
                      (("2" (expand "ae_nonneg?")
                        (("2" (expand "pointwise_ae?")
                          (("2" (expand "ae?")
                            (("2" (expand "fullset")
                              (("2"
                                (expand "ae_in?")
                                (("2"
                                  (skosimp)
                                  (("2"
                                    (inst + "E!1")
                                    (("2"
                                      (skosimp)
                                      (("2"
                                        (expand "member")
                                        (("2"
                                          (inst -3 "x!1")
                                          (("2"
                                            (skosimp)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (expand "*")
                                                (("2"
                                                  (expand
                                                   "increasing?")
                                                  (("2"
                                                    (inst
                                                     -
                                                     "i!1"
                                                     "j!1")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (expand "phi")
                                                        (("2"
                                                          (expand
                                                           "member")
                                                          (("2"
                                                            (case-replace
                                                             "B!1(i!1)(x!1)")
                                                            (("1"
                                                              (expand
                                                               "subset?")
                                                              (("1"
                                                                (inst
                                                                 -4
                                                                 "x!1")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              (("2"
                                                                (lift-if
                                                                 3)
                                                                (("2"
                                                                  (prop)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (skosimp)
                  (("2" (rewrite "indefinite_integrable")
                    (("2" (inst - "n!1") (("2" (flatten) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide -5 2 -4)
                (("2" (induct "n")
                  (("1" (assert) nil nil)
                   ("2" (assert)
                    (("2" (expand "measurable_set?")
                      (("2" (assert) nil nil)) nil))
                    nil)
                   ("3" (rewrite "IUnion_0_def") nil nil)
                   ("4" (skosimp*)
                    (("4" (inst -6 "j!1")
                      (("4" (replace -6)
                        (("4"
                          (lemma "measurable_union"
                           ("a" "B!1(j!1)" "b" "DX!1(j!1+1)"))
                          (("1" (expand "measurable_set?")
                            (("1" (assert)
                              (("1"
                                (rewrite "IUnion_n_def")
                                (("1"
                                  (replace -4 * rl)
                                  (("1" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "measurable_set?")
                            (("2" (propax) nil nil)) nil)
                           ("3" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (skosimp*)
      (("3" (expand "integrable?")
        (("3" (rewrite "indefinite_integrable")
          (("3" (expand "measurable_set?") (("3" (propax) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (skosimp*)
      (("4" (expand "measurable_set?") (("4" (propax) nil nil)) nil))
      nil)
     ("5" (skosimp)
      (("5" (skosimp)
        (("5" (expand "integrable?")
          (("5" (rewrite "indefinite_integrable")
            (("5" (expand "measurable_set?") (("5" (propax) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (expand "measurable_set?") (("6" (propax) nil nil)) nil))
    nil)
   ((increasing_IUnion formula-decl nil nat_indexed_sets sets_aux)
    (IUnion const-decl "set[T]" nat_indexed_sets sets_aux)
    (O const-decl "T3" function_props nil)
    (integral const-decl "real" integral nil)
    (extensionality_postulate formula-decl nil functions nil)
    (B!1 skolem-const-decl "sequence[set[T]]" indefinite_integral nil)
    (pred type-eq-decl nil defined_types nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (sigma def-decl "real" sigma reals)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (indefinite_union formula-decl nil indefinite_integral nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (union const-decl "set" sets nil)
    (disjoint? const-decl "bool" sets nil)
    (disjoint? const-decl "bool" indexed_sets_aux sets_aux)
    (intersection const-decl "set" sets nil)
    (Union const-decl "set" sets nil) (<= const-decl "bool" reals nil)
    (image const-decl "set[R]" function_image nil)
    (empty? const-decl "bool" sets nil)
    (subset_algebra_intersection application-judgement "(S)"
     indefinite_integral nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (converges_upto? const-decl "bool" convergence_aux metric_space)
    (ae_convergence? const-decl "bool" measure_theory nil)
    (ae_convergence_in? const-decl "bool" measure_theory nil)
    (TRUE const-decl "bool" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (increasing? const-decl "bool" fun_preds_partial structures)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ball_is_metric_open application-judgement "metric_open"
     convergence_aux metric_space)
    (abs_nat formula-decl nil abs_lems reals)
    (subset? const-decl "bool" sets nil)
    (f!1 skolem-const-decl "integrable[T, S, m]" indefinite_integral
     nil)
    (DX!1 skolem-const-decl "disjoint_indexed_measurable[T, S]"
     indefinite_integral nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (ae_increasing? const-decl "bool" measure_theory nil)
    (phi const-decl "nat" measure_space nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (monotone_convergence formula-decl nil integral_convergence nil)
    (IUnion_0_def formula-decl nil nat_indexed_sets sets_aux)
    (measurable_union judgement-tcc nil measure_space_def nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers
     nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (IUnion_n_def formula-decl nil nat_indexed_sets sets_aux)
    (integrable_plus application-judgement "integrable"
     indefinite_integral nil)
    (plus const-decl "[T -> nnreal]" real_fun_ops_aux reals)
    (metric_convergence_def formula-decl nil metric_space metric_space)
    (ball const-decl "set[T]" metric_space_def metric_space)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (member const-decl "bool" sets nil)
    (metric_converges_to const-decl "bool" metric_space_def
     metric_space)
    (DX!1 skolem-const-decl "disjoint_indexed_measurable[T, S]"
     indefinite_integral nil)
    (f!1 skolem-const-decl "integrable[T, S, m]" indefinite_integral
     nil)
    (- const-decl "[T -> real]" real_fun_ops reals)
    (indefinite_integrable formula-decl nil integral nil)
    (phi_is_simple application-judgement "simple" indefinite_integral
     nil)
    (prod_measurable application-judgement "measurable_function[T, S]"
     indefinite_integral nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (integrable_diff application-judgement "integrable"
     indefinite_integral nil)
    (indefinite_diff formula-decl nil indefinite_integral nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (series_diff formula-decl nil series series)
    (cnv_seq_diff formula-decl nil convergence_ops analysis)
    (convergence const-decl "bool" convergence_sequences analysis)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (measurable_fullset name-judgement "measurable_set[T, S]"
     indefinite_integral nil)
    (subset_algebra_fullset name-judgement "(S)" indefinite_integral
     nil)
    (ae? const-decl "bool" measure_theory nil)
    (subset_algebra_emptyset name-judgement "(S)" indefinite_integral
     nil)
    (null_emptyset name-judgement "null_set" indefinite_integral nil)
    (finite_emptyset name-judgement "finite_set" sigma_countable
     sigma_set)
    (finite_emptyset name-judgement "finite_set" countable_setofsets
     sets_aux)
    (finite_emptyset name-judgement "finite_set" countable_props
     sets_aux)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (emptyset const-decl "set" sets nil)
    (negligible nonempty-type-eq-decl nil measure_theory nil)
    (negligible_set? const-decl "bool" measure_theory nil)
    (fullset const-decl "set" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ae_in? const-decl "bool" measure_theory nil)
    (pointwise_ae? const-decl "bool" measure_theory nil)
    (minus const-decl "[T -> nnreal]" real_fun_ops_aux reals)
    (integrable_minus application-judgement "integrable"
     indefinite_integral nil)
    (sigma_algebra_IUnion_rew application-judgement "(S)"
     indefinite_integral nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (metric_induced_topology_is_second_countable name-judgement
     "second_countable" real_topology metric_space)
    (metric_space_is_hausdorff name-judgement "hausdorff"
     convergence_aux metric_space)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil indefinite_integral nil)
    (setof type-eq-decl nil defined_types nil)
    (setofsets type-eq-decl nil sets nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (S formal-const-decl "sigma_algebra" indefinite_integral nil)
    (disjoint_indexed_measurable? const-decl "bool"
     generalized_measure_def nil)
    (disjoint_indexed_measurable nonempty-type-eq-decl nil
     generalized_measure_def nil)
    (nnreal type-eq-decl nil real_types nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (measure? const-decl "bool" generalized_measure_def nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     nil)
    (m formal-const-decl "measure_type" indefinite_integral nil)
    (integrable? const-decl "bool" integral nil)
    (integrable nonempty-type-eq-decl nil integral nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (ae_nonneg? const-decl "bool" measure_theory nil)
    (sequence type-eq-decl nil sequences nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (metric_induced_topology const-decl "setofsets[T]" metric_space_def
     metric_space)
    (convergence? const-decl "bool" topological_convergence topology)
    (series const-decl "sequence[real]" series series)
    (measurable_set nonempty-type-eq-decl nil measure_space_def nil)
    (set type-eq-decl nil sets nil)
    (measurable_set? const-decl "bool" measure_space_def nil)
    (integrable? const-decl "bool" indefinite_integral nil)
    (integral const-decl "real" indefinite_integral nil)
    (IUnion const-decl "set[T]" indexed_sets nil))
   shostak)
  (indefinite_countably_additive-1 nil 3454503117
   (""
    (case "FORALL (DX: disjoint_indexed_measurable[T, S],
              f: integrable[T, S, m]):ae_nonneg?(f) =>
        convergence?(series(LAMBDA n: integral(DX(n), f)),
                     integral(IUnion(DX), f))")
    (("1" (skosimp)
      (("1" (inst-cp - "DX!1" "minus(f!1)")
        (("1" (inst - "DX!1" "plus(f!1)")
          (("1" (split)
            (("1" (split)
              (("1"
                (case "forall (u:sequence[real],l:real): convergence?(u,l) iff convergence(u,l)")
                (("1"
                  (inst-cp - "series(LAMBDA n: integral(DX!1(n), f!1))"
                   "integral(IUnion(DX!1), f!1)")
                  (("1"
                    (inst-cp -
                     "series(LAMBDA n: integral(DX!1(n), minus(f!1)))"
                     "integral(IUnion(DX!1), minus(f!1))")
                    (("1"
                      (inst -
                       "series(LAMBDA n: integral(DX!1(n), plus(f!1)))"
                       "integral(IUnion(DX!1), plus(f!1))")
                      (("1" (replace -1)
                        (("1" (replace -2)
                          (("1" (replace -3)
                            (("1" (hide -1 -2 -3)
                              (("1"
                                (lemma
                                 "cnv_seq_diff"
                                 ("s2"
                                  "series(LAMBDA n: integral(DX!1(n), minus(f!1)))"
                                  "l2"
                                  "integral(IUnion(DX!1), minus(f!1))"
                                  "s1"
                                  "series(LAMBDA n: integral(DX!1(n), plus(f!1)))"
                                  "l1"
                                  "integral(IUnion(DX!1), plus(f!1))"))
                                (("1"
                                  (assert)
                                  (("1"
                                    (rewrite "series_diff")
                                    (("1"
                                      (expand "-" -1)
                                      (("1"
                                        (case-replace
                                         "(LAMBDA (x: nat):
                           integral(DX!1(x), plus(f!1)) -
                            integral(DX!1(x), minus(f!1)))=LAMBDA n: integral(DX!1(n), f!1)")
                                        (("1"
                                          (hide -1)
                                          (("1"
                                            (name-replace
                                             "LHS"
                                             "series(LAMBDA n: integral(DX!1(n), f!1))")
                                            (("1"
                                              (hide -2 -3)
                                              (("1"
                                                (rewrite
                                                 "indefinite_diff"
                                                 -1
                                                 :dir
                                                 rl)
                                                (("1"
                                                  (case-replace
                                                   "plus(f!1) - minus(f!1)=f!1")
                                                  (("1"
                                                    (apply-extensionality
                                                     :hide?
                                                     t)
                                                    (("1"
                                                      (hide-all-but 1)
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (skosimp)
                                              (("2"
                                                (expand "integrable?")
                                                (("2"
                                                  (rewrite
                                                   "indefinite_integrable")
                                                  (("2"
                                                    (expand
                                                     "measurable_set?")
                                                    (("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (apply-extensionality
                                           1
                                           :hide?
                                           t)
                                          (("1"
                                            (hide-all-but 1)
                                            (("1"
                                              (lemma
                                               "indefinite_diff"
                                               ("E"
                                                "DX!1(x!1)"
                                                "f1"
                                                "plus(f!1)"
                                                "f2"
                                                "minus(f!1)"))
                                              (("1"
                                                (replace -1 1 rl)
                                                (("1"
                                                  (case-replace
                                                   "plus(f!1) - minus(f!1)=f!1")
                                                  (("1"
                                                    (apply-extensionality
                                                     :hide?
                                                     t)
                                                    (("1"
                                                      (hide-all-but 1)
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (skosimp)
                                            (("2"
                                              (expand "integrable?")
                                              (("2"
                                                (rewrite
                                                 "indefinite_integrable")
                                                (("2"
                                                  (expand
                                                   "measurable_set?")
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (skosimp)
                                            (("3"
                                              (expand "integrable?")
                                              (("3"
                                                (rewrite
                                                 "indefinite_integrable")
                                                (("3"
                                                  (expand
                                                   "measurable_set?")
                                                  (("3"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("4"
                                            (skosimp)
                                            (("4"
                                              (expand "integrable?")
                                              (("4"
                                                (rewrite
                                                 "indefinite_integrable")
                                                (("4"
                                                  (expand
                                                   "measurable_set?")
                                                  (("4"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("5"
                                            (skosimp)
                                            (("5"
                                              (expand
                                               "measurable_set?")
                                              (("5" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (skosimp)
                                          (("3"
                                            (expand "integrable?")
                                            (("3"
                                              (rewrite
                                               "indefinite_integrable")
                                              (("3"
                                                (expand
                                                 "measurable_set?")
                                                (("3"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (skosimp)
                                  (("2"
                                    (expand "integrable?")
                                    (("2"
                                      (rewrite "indefinite_integrable")
                                      (("2"
                                        (expand "measurable_set?")
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (skosimp)
                                  (("3"
                                    (expand "integrable?")
                                    (("3"
                                      (rewrite "indefinite_integrable")
                                      (("3"
                                        (expand "measurable_set?")
                                        (("3" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("4"
                                  (skosimp)
                                  (("4"
                                    (expand "measurable_set?")
                                    (("4" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (skosimp)
                        (("2" (expand "integrable?")
                          (("2" (rewrite "indefinite_integrable")
                            (("2" (expand "measurable_set?")
                              (("2" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("3" (expand "measurable_set?")
                        (("3" (propax) nil nil)) nil))
                      nil)
                     ("2" (skosimp)
                      (("2" (expand "integrable?")
                        (("2" (rewrite "indefinite_integrable")
                          (("2" (expand "measurable_set?")
                            (("2" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("3" (skosimp)
                      (("3" (expand "measurable_set?")
                        (("3" (propax) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (skosimp)
                    (("2" (expand "integrable?")
                      (("2" (rewrite "indefinite_integrable")
                        (("2" (expand "measurable_set?")
                          (("2" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("3" (expand "measurable_set?")
                    (("3" (propax) nil nil)) nil))
                  nil)
                 ("2" (hide-all-but 1)
                  (("2" (skosimp*)
                    (("2" (rewrite "metric_convergence_def")
                      (("2" (expand "metric_converges_to")
                        (("2" (expand "convergence")
                          (("2" (expand "member")
                            (("2" (expand "ball")
                              (("2"
                                (split)
                                (("1"
                                  (skosimp*)
                                  (("1"
                                    (inst - "epsilon!1")
                                    (("1"
                                      (skosimp)
                                      (("1"
                                        (inst + "n!1")
                                        (("1"
                                          (skosimp)
                                          (("1"
                                            (inst - "i!1")
                                            (("1" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (skosimp*)
                                  (("2"
                                    (inst - "r!1")
                                    (("2"
                                      (skosimp)
                                      (("2"
                                        (inst + "n!1")
                                        (("2"
                                          (skosimp)
                                          (("2"
                                            (inst - "i!1")
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide-all-but 1)
                (("2" (expand "ae_nonneg?")
                  (("2" (expand "pointwise_ae?")
                    (("2" (expand "ae?")
                      (("2" (expand "ae_in?")
                        (("2" (inst + "emptyset")
                          (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide-all-but 1)
              (("2" (expand "ae_nonneg?")
                (("2" (expand "pointwise_ae?")
                  (("2" (expand "ae?")
                    (("2" (expand "ae_in?")
                      (("2" (inst + "emptyset") (("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (skosimp)
        (("2" (lemma "increasing_IUnion" ("A" "DX!1"))
          (("2" (skosimp)
            (("2"
              (case "forall n: S(B!1(n)) & measurable_set?(B!1(n)) & B!1(n) = IUnion(n,DX!1)")
              (("1"
                (lemma "monotone_convergence"
                 ("F" "lambda n: phi(B!1(n))*f!1"))
                (("1" (split)
                  (("1" (flatten)
                    (("1" (hide -1 -2)
                      (("1" (inst - "phi(IUnion(DX!1))*f!1")
                        (("1" (split)
                          (("1" (expand "converges_upto?")
                            (("1" (expand "o ")
                              (("1"
                                (flatten)
                                (("1"
                                  (case-replace
                                   "series(LAMBDA n: integral(DX!1(n), f!1))=LAMBDA n: integral(phi(B!1(n)) * f!1)")
                                  (("1"
                                    (expand "integral" 1 2)
                                    (("1" (propax) nil nil))
                                    nil)
                                   ("2"
                                    (hide 2 -1 -2)
                                    (("2"
                                      (rewrite
                                       "extensionality_postulate"
                                       1
                                       :dir
                                       rl)
                                      (("1"
                                        (copy -1)
                                        (("1"
                                          (induct "x")
                                          (("1"
                                            (expand "series")
                                            (("1"
                                              (expand "sigma")
                                              (("1"
                                                (expand "sigma")
                                                (("1"
                                                  (expand
                                                   "integral"
                                                   1
                                                   1)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (skosimp*)
                                            (("2"
                                              (expand "series")
                                              (("2"
                                                (expand "sigma" 1)
                                                (("2"
                                                  (replace -1)
                                                  (("2"
                                                    (hide -1)
                                                    (("2"
                                                      (lemma
                                                       "indefinite_union"
                                                       ("E1"
                                                        "B!1(j!1)"
                                                        "E2"
                                                        "DX!1(1+j!1)"
                                                        "f"
                                                        "f!1"))
                                                      (("1"
                                                        (split -1)
                                                        (("1"
                                                          (inst
                                                           -6
                                                           "j!1")
                                                          (("1"
                                                            (replace
                                                             -6)
                                                            (("1"
                                                              (replace
                                                               -6
                                                               *
                                                               rl)
                                                              (("1"
                                                                (expand
                                                                 "integral"
                                                                 1
                                                                 1)
                                                                (("1"
                                                                  (expand
                                                                   "integral"
                                                                   -1)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           (-1 1))
                                                          (("2"
                                                            (inst
                                                             -
                                                             "j!1")
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (hide
                                                                 -1
                                                                 -2)
                                                                (("2"
                                                                  (replace
                                                                   -1)
                                                                  (("2"
                                                                    (hide
                                                                     -1)
                                                                    (("2"
                                                                      (typepred
                                                                       "DX!1")
                                                                      (("2"
                                                                        (expand
                                                                         "disjoint_indexed_measurable?")
                                                                        (("2"
                                                                          (expand
                                                                           "disjoint?")
                                                                          (("2"
                                                                            (expand
                                                                             "disjoint?")
                                                                            (("2"
                                                                              (expand
                                                                               "intersection")
                                                                              (("2"
                                                                                (expand
                                                                                 "empty?")
                                                                                (("2"
                                                                                  (expand
                                                                                   "member")
                                                                                  (("2"
                                                                                    (skosimp*)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "IUnion")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "image")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "Union")
                                                                                          (("2"
                                                                                            (skosimp)
                                                                                            (("2"
                                                                                              (typepred
                                                                                               "a!1")
                                                                                              (("2"
                                                                                                (skolem
                                                                                                 -
                                                                                                 "n!2")
                                                                                                (("2"
                                                                                                  (replace
                                                                                                   -1)
                                                                                                  (("2"
                                                                                                    (hide
                                                                                                     -1)
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       -
                                                                                                       "n!2"
                                                                                                       "1+j!1")
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (inst
                                                                                                           -
                                                                                                           "x!1")
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (expand
                                                         "integrable?")
                                                        (("2"
                                                          (rewrite
                                                           "indefinite_integrable"
                                                           1)
                                                          (("2"
                                                            (inst
                                                             -5
                                                             "j!1")
                                                            (("2"
                                                              (inst
                                                               -
                                                               "j!1+1")
                                                              (("2"
                                                                (expand
                                                                 "measurable_set?")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (inst - "j!1")
                                                        (("3"
                                                          (flatten)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (skosimp)
                                            (("3"
                                              (inst - "x!2")
                                              (("3"
                                                (flatten)
                                                (("3"
                                                  (rewrite
                                                   "indefinite_integrable")
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("4"
                                            (skosimp)
                                            (("4"
                                              (expand "integrable?")
                                              (("4"
                                                (rewrite
                                                 "indefinite_integrable")
                                                (("4"
                                                  (expand
                                                   "measurable_set?")
                                                  (("4"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("5"
                                            (expand "measurable_set?")
                                            (("5" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (skosimp)
                                        (("2"
                                          (expand "integrable?")
                                          (("2"
                                            (rewrite
                                             "indefinite_integrable")
                                            (("2"
                                              (expand
                                               "measurable_set?")
                                              (("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (expand "measurable_set?")
                                        (("3" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (skosimp)
                                    (("3"
                                      (expand "integrable?")
                                      (("3"
                                        (rewrite
                                         "indefinite_integrable")
                                        (("3"
                                          (expand "measurable_set?")
                                          (("3" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("4"
                                    (skosimp)
                                    (("4"
                                      (expand "measurable_set?")
                                      (("4" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 2)
                            (("2" (replace -5)
                              (("2"
                                (hide -3 -4 -5 -6)
                                (("2"
                                  (expand "ae_convergence?")
                                  (("2"
                                    (expand "fullset")
                                    (("2"
                                      (expand "ae_convergence_in?")
                                      (("2"
                                        (expand "ae_in?")
                                        (("2"
                                          (inst + "emptyset")
                                          (("2"
                                            (expand "member")
                                            (("2"
                                              (skosimp)
                                              (("2"
                                                (hide 1)
                                                (("2"
                                                  (hide -1)
                                                  (("2"
                                                    (expand "*")
                                                    (("2"
                                                      (expand "phi")
                                                      (("2"
                                                        (expand
                                                         "member")
                                                        (("2"
                                                          (rewrite
                                                           "metric_convergence_def")
                                                          (("2"
                                                            (expand
                                                             "metric_converges_to")
                                                            (("2"
                                                              (skosimp)
                                                              (("2"
                                                                (case-replace
                                                                 "IUnion(B!1)(x!1)")
                                                                (("1"
                                                                  (expand
                                                                   "IUnion")
                                                                  (("1"
                                                                    (skosimp)
                                                                    (("1"
                                                                      (inst
                                                                       +
                                                                       "i!1")
                                                                      (("1"
                                                                        (skosimp)
                                                                        (("1"
                                                                          (expand
                                                                           "increasing?")
                                                                          (("1"
                                                                            (inst
                                                                             -
                                                                             "i!1"
                                                                             "i!2")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (expand
                                                                                 "subset?")
                                                                                (("1"
                                                                                  (inst
                                                                                   -
                                                                                   "x!1")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "ball")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "member")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "abs")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (inst
                                                                     +
                                                                     "0")
                                                                    (("2"
                                                                      (skosimp)
                                                                      (("2"
                                                                        (case-replace
                                                                         "B!1(i!1)(x!1)")
                                                                        (("1"
                                                                          (expand
                                                                           "IUnion")
                                                                          (("1"
                                                                            (inst
                                                                             +
                                                                             "i!1")
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (expand
                                                                             "ball")
                                                                            (("2"
                                                                              (expand
                                                                               "abs")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (rewrite "indefinite_integrable") nil
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "ae_increasing?")
                    (("2" (hide 2 -3 -4 -5)
                      (("2" (expand "ae_nonneg?")
                        (("2" (expand "pointwise_ae?")
                          (("2" (expand "ae?")
                            (("2" (expand "fullset")
                              (("2"
                                (expand "ae_in?")
                                (("2"
                                  (skosimp)
                                  (("2"
                                    (inst + "E!1")
                                    (("2"
                                      (skosimp)
                                      (("2"
                                        (expand "member")
                                        (("2"
                                          (inst -3 "x!1")
                                          (("2"
                                            (skosimp)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (expand "*")
                                                (("2"
                                                  (expand
                                                   "increasing?")
                                                  (("2"
                                                    (inst
                                                     -
                                                     "i!1"
                                                     "j!1")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (expand "phi")
                                                        (("2"
                                                          (expand
                                                           "member")
                                                          (("2"
                                                            (case-replace
                                                             "B!1(i!1)(x!1)")
                                                            (("1"
                                                              (expand
                                                               "subset?")
                                                              (("1"
                                                                (inst
                                                                 -4
                                                                 "x!1")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              (("2"
                                                                (lift-if
                                                                 3)
                                                                (("2"
                                                                  (prop)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (skosimp)
                  (("2" (rewrite "indefinite_integrable")
                    (("2" (inst - "n!1") (("2" (flatten) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide -5 2 -4)
                (("2" (induct "n")
                  (("1" (assert) nil nil)
                   ("2" (assert)
                    (("2" (expand "measurable_set?")
                      (("2" (assert) nil nil)) nil))
                    nil)
                   ("3" (rewrite "IUnion_0_def") nil nil)
                   ("4" (skosimp*)
                    (("4" (inst -6 "j!1")
                      (("4" (replace -6)
                        (("4"
                          (lemma "measurable_union"
                           ("a" "B!1(j!1)" "b" "DX!1(j!1+1)"))
                          (("1" (expand "measurable_set?")
                            (("1" (assert)
                              (("1"
                                (rewrite "IUnion_n_def")
                                (("1"
                                  (replace -4 * rl)
                                  (("1" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "measurable_set?")
                            (("2" (propax) nil nil)) nil)
                           ("3" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (skosimp*)
      (("3" (expand "integrable?")
        (("3" (rewrite "indefinite_integrable")
          (("3" (expand "measurable_set?") (("3" (propax) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (skosimp*)
      (("4" (expand "measurable_set?") (("4" (propax) nil nil)) nil))
      nil)
     ("5" (skosimp)
      (("5" (skosimp)
        (("5" (expand "integrable?")
          (("5" (rewrite "indefinite_integrable")
            (("5" (expand "measurable_set?") (("5" (propax) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (expand "measurable_set?") (("6" (propax) nil nil)) nil))
    nil)
   ((measurable_set? const-decl "bool" measure_space_def nil)
    (set type-eq-decl nil sets nil)
    (measurable_set nonempty-type-eq-decl nil measure_space_def nil)
    (convergence? const-decl "bool" topological_convergence topology)
    (metric_induced_topology const-decl "setofsets[T]" metric_space_def
     metric_space)
    (sequence type-eq-decl nil sequences nil)
    (ae_nonneg? const-decl "bool" measure_theory nil)
    (integrable nonempty-type-eq-decl nil integral nil)
    (integrable? const-decl "bool" integral nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     nil)
    (measure? const-decl "bool" generalized_measure_def nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (disjoint_indexed_measurable nonempty-type-eq-decl nil
     generalized_measure_def nil)
    (disjoint_indexed_measurable? const-decl "bool"
     generalized_measure_def nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (setofsets type-eq-decl nil sets nil)
    (metric_induced_topology_is_second_countable name-judgement
     "second_countable" real_topology metric_space)
    (minus const-decl "[T -> nnreal]" real_fun_ops_aux reals)
    (pointwise_ae? const-decl "bool" measure_theory nil)
    (ae_in? const-decl "bool" measure_theory nil)
    (fullset const-decl "set" sets nil)
    (negligible_set? const-decl "bool" measure_theory nil)
    (negligible nonempty-type-eq-decl nil measure_theory nil)
    (emptyset const-decl "set" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (convergence const-decl "bool" convergence_sequences analysis)
    (cnv_seq_diff formula-decl nil convergence_ops analysis)
    (series_diff formula-decl nil series series)
    (indefinite_integrable formula-decl nil integral nil)
    (metric_converges_to const-decl "bool" metric_space_def
     metric_space)
    (member const-decl "bool" sets nil)
    (ball const-decl "set[T]" metric_space_def metric_space)
    (metric_convergence_def formula-decl nil metric_space metric_space)
    (plus const-decl "[T -> nnreal]" real_fun_ops_aux reals)
    (IUnion_n_def formula-decl nil nat_indexed_sets sets_aux)
    (measurable_union judgement-tcc nil measure_space_def nil)
    (IUnion_0_def formula-decl nil nat_indexed_sets sets_aux)
    (monotone_convergence formula-decl nil integral_convergence nil)
    (phi const-decl "nat" measure_space nil)
    (ae_increasing? const-decl "bool" measure_theory nil)
    (metric_triangle? const-decl "bool" metric_def metric_space)
    (metric_symmetric? const-decl "bool" metric_def metric_space)
    (metric_zero? const-decl "bool" metric_def metric_space)
    (subset? const-decl "bool" sets nil)
    (abs_nat formula-decl nil abs_lems reals)
    (increasing? const-decl "bool" fun_preds_partial structures)
    (metric? const-decl "bool" metric_def metric_space)
    (ae_convergence_in? const-decl "bool" measure_theory nil)
    (ae_convergence? const-decl "bool" measure_theory nil)
    (converges_upto? const-decl "bool" convergence_aux metric_space)
    (empty? const-decl "bool" sets nil)
    (Union const-decl "set" sets nil)
    (intersection const-decl "set" sets nil)
    (disjoint? const-decl "bool" indexed_sets_aux sets_aux)
    (disjoint? const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (sigma def-decl "real" sigma reals)
    (extensionality_postulate formula-decl nil functions nil)
    (integral const-decl "real" integral nil)
    (IUnion const-decl "set[T]" nat_indexed_sets sets_aux)
    (increasing_IUnion formula-decl nil nat_indexed_sets sets_aux))
   shostak)))

