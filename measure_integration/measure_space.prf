(|measure_space|
 (|IMP_metric_continuity_TCC1| 0
  (|IMP_metric_continuity_TCC1-1| |nil| 3426480897 ("" (GRIND) NIL NIL)
   ((|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|metric_zero?| CONST-DECL "bool" |metric_def| |metric_space|)
    (|metric_symmetric?| CONST-DECL "bool" |metric_def| |metric_space|)
    (|metric_triangle?| CONST-DECL "bool" |metric_def| |metric_space|)
    (|metric?| CONST-DECL "bool" |metric_def| |metric_space|)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL))
   NIL
   (|IMP_metric_continuity| SUBTYPE
    "(LAMBDA (x, y: reals.real): real_defs.abs((number_fields.-)(x, y)))"
    "metric[real]")))
 (|borel_comp_measurable_is_measurable| 0
  (|borel_comp_measurable_is_measurable-1| |nil| 3358646357
   ("" (SKOSIMP)
    (("" (TYPEPRED "g!1")
      (("" (TYPEPRED "phi!1")
        (("" (EXPAND "measurable_function?")
          (("" (SKOSIMP)
            (("" (EXPAND "borel_function?")
              (("" (INST - "B!1")
                (("" (INST - "inverse_image(phi!1, B!1)")
                  (("" (EXPAND "measurable_set?")
                    ((""
                      (LEMMA "extensionality"
                       ("a" "inverse_image(g!1, inverse_image(phi!1, B!1))" "b"
                        "inverse_image(o[T, real, real](phi!1, g!1), B!1)"))
                      (("" (SPLIT -1)
                        (("1" (ASSERT) NIL NIL)
                         ("2" (HIDE-ALL-BUT 1)
                          (("2" (SKOSIMP*)
                            (("2" (EXPAND "o")
                              (("2" (EXPAND "inverse_image")
                                (("2" (EXPAND "member")
                                  (("2" (PROPAX) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|measurable_function| NONEMPTY-TYPE-EQ-DECL NIL |measure_space_def| NIL)
    (|measurable_function?| CONST-DECL "bool" |measure_space_def| NIL)
    (S FORMAL-CONST-DECL "sigma_algebra" |measure_space| NIL)
    (|sigma_algebra| NONEMPTY-TYPE-EQ-DECL NIL |subset_algebra_def| NIL)
    (|sigma_algebra?| CONST-DECL "bool" |subset_algebra_def| NIL)
    (|setofsets| TYPE-EQ-DECL NIL |sets| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (T FORMAL-TYPE-DECL NIL |measure_space| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL) NIL NIL NIL
    (|extensionality| FORMULA-DECL NIL |sets_lemmas| NIL)
    (O CONST-DECL "T3" |function_props| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|measurable_set?| CONST-DECL "bool" |measure_space_def| NIL)
    (|borel?| CONST-DECL "sigma_algebra" |borel| NIL)
    (|borel| NONEMPTY-TYPE-EQ-DECL NIL |borel| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|metric_induced_topology| CONST-DECL "setofsets[T]" |metric_space_def|
     |metric_space|)
    (|borel_function?| CONST-DECL "bool" |borel_functions| NIL)
    (|borel_function| TYPE-EQ-DECL NIL |borel_functions| NIL))
   SHOSTAK
   (|borel_comp_measurable_is_measurable| SUBTYPE
    "function_props[measure_space.T, real, real].o(measure_space.phi, measure_space.g)"
    "measurable_function[T, S]")))
 (|const_measurable| 0
  (|const_measurable-2| "" 3789903619
   ("" (SKOSIMP)
    (("" (EXPAND "measurable_function?")
      (("" (SKOSIMP)
        (("" (EXPAND "measurable_set?")
          (("" (EXPAND "inverse_image")
            (("" (EXPAND "member")
              (("" (TYPEPRED "S")
                (("" (EXPAND "sigma_algebra?")
                  (("" (FLATTEN)
                    (("" (EXPAND "subset_algebra_empty?")
                      (("" (EXPAND "subset_algebra_complement?")
                        (("" (EXPAND "member")
                          (("" (INST - "emptyset[T]")
                            (("" (REWRITE "complement_emptyset")
                              (("" (CASE-REPLACE "B!1(c!1)")
                                (("1" (ASSERT)
                                  (("1"
                                    (LEMMA "extensionality"
                                     ("a" "fullset[T]" "b" "{x_1: T | TRUE}"))
                                    (("1" (SPLIT -1)
                                      (("1" (ASSERT) NIL NIL)
                                       ("2" (EXPAND "fullset")
                                        (("2" (PROPAX) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (ASSERT)
                                  (("2"
                                    (LEMMA "extensionality"
                                     ("a" "emptyset[T]" "b"
                                      "{x_1: T | FALSE}"))
                                    (("2" (SPLIT -1)
                                      (("1" (ASSERT) NIL NIL)
                                       ("2" (EXPAND "emptyset")
                                        (("2" (PROPAX) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|measurable_function?| CONST-DECL "bool" |measure_space_def| NIL)
    (|measurable_set?| CONST-DECL "bool" |measure_space_def| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|subset_algebra_empty?| CONST-DECL "bool" |subset_algebra_def| NIL) NIL
    (|complement_emptyset| FORMULA-DECL NIL |sets_lemmas| NIL) NIL NIL
    (FALSE CONST-DECL "bool" |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|fullset| CONST-DECL "set" |sets| NIL)
    (|extensionality| FORMULA-DECL NIL |sets_lemmas| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|metric_induced_topology| CONST-DECL "setofsets[T]" |metric_space_def|
     |metric_space|)
    (|borel?| CONST-DECL "sigma_algebra" |borel| NIL)
    (|borel| NONEMPTY-TYPE-EQ-DECL NIL |borel| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|emptyset| CONST-DECL "set" |sets| NIL)
    (|finite_emptyset| NAME-JUDGEMENT "finite_set" |finite_sets| NIL) NIL NIL
    NIL NIL
    (|subset_algebra_complement?| CONST-DECL "bool" |subset_algebra_def| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (T FORMAL-TYPE-DECL NIL |measure_space| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|setofsets| TYPE-EQ-DECL NIL |sets| NIL)
    (|sigma_algebra?| CONST-DECL "bool" |subset_algebra_def| NIL)
    (|sigma_algebra| NONEMPTY-TYPE-EQ-DECL NIL |subset_algebra_def| NIL)
    (S FORMAL-CONST-DECL "sigma_algebra" |measure_space| NIL) NIL)
   SHOSTAK)
  (|const_measurable-1| |nil| 3390270932
   ("" (SKOSIMP)
    (("" (EXPAND "const_fun")
      (("" (EXPAND "measurable_function?")
        (("" (SKOSIMP)
          (("" (EXPAND "measurable_set?")
            (("" (EXPAND "inverse_image")
              (("" (EXPAND "member")
                (("" (TYPEPRED "S")
                  (("" (EXPAND "sigma_algebra?")
                    (("" (FLATTEN)
                      (("" (EXPAND "subset_algebra_empty?")
                        (("" (EXPAND "subset_algebra_complement?")
                          (("" (EXPAND "member")
                            (("" (INST - "emptyset[T]")
                              (("" (REWRITE "complement_emptyset")
                                (("" (CASE-REPLACE "B!1(c!1)")
                                  (("1" (ASSERT)
                                    (("1"
                                      (LEMMA "extensionality"
                                       ("a" "fullset[T]" "b"
                                        "{x_1: T | TRUE}"))
                                      (("1" (SPLIT -1)
                                        (("1" (ASSERT) NIL NIL)
                                         ("2" (EXPAND "fullset")
                                          (("2" (PROPAX) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (ASSERT)
                                    (("2"
                                      (LEMMA "extensionality"
                                       ("a" "emptyset[T]" "b"
                                        "{x_1: T | FALSE}"))
                                      (("2" (SPLIT -1)
                                        (("1" (ASSERT) NIL NIL)
                                         ("2" (EXPAND "emptyset")
                                          (("2" (PROPAX) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|measurable_function?| CONST-DECL "bool" |measure_space_def| NIL)
    (|measurable_set?| CONST-DECL "bool" |measure_space_def| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|subset_algebra_empty?| CONST-DECL "bool" |subset_algebra_def| NIL)
    (|fullset| CONST-DECL "set" |sets| NIL)
    (|metric_induced_topology| CONST-DECL "setofsets[T]" |metric_space_def|
     |metric_space|)
    (|borel?| CONST-DECL "sigma_algebra" |borel| NIL)
    (|borel| NONEMPTY-TYPE-EQ-DECL NIL |borel| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|emptyset| CONST-DECL "set" |sets| NIL)
    (|finite_emptyset| NAME-JUDGEMENT "finite_set" |finite_sets| NIL)
    (|subset_algebra_complement?| CONST-DECL "bool" |subset_algebra_def| NIL)
    (|setofsets| TYPE-EQ-DECL NIL |sets| NIL)
    (|sigma_algebra?| CONST-DECL "bool" |subset_algebra_def| NIL)
    (|sigma_algebra| NONEMPTY-TYPE-EQ-DECL NIL |subset_algebra_def| NIL))
   NIL))
 (|nn_measurable_TCC1| 0
  (|nn_measurable_TCC1-1| |nil| 3431068678
   ("" (EXPAND "nn_measurable?") (("" (REWRITE "const_measurable") NIL NIL))
    NIL)
   ((|const_measurable| FORMULA-DECL NIL |measure_space| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|nn_measurable?| CONST-DECL "bool" |measure_space| NIL))
   NIL (|nn_measurable| SUBTYPE "(LAMBDA x: 0)" "nn_measurable")))
 (|nn_measurable_is_measurable| 0
  (|nn_measurable_is_measurable-1| |nil| 3913444607
   ("" (JUDGEMENT-TCC) NIL NIL)
   ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|nn_measurable?| CONST-DECL "bool" |measure_space| NIL)
    (|nn_measurable| NONEMPTY-TYPE-EQ-DECL NIL |measure_space| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|metric_induced_topology| CONST-DECL "setofsets[T]" |metric_space_def|
     |metric_space|)
    (|borel?| CONST-DECL "sigma_algebra" |borel| NIL)
    (|borel| NONEMPTY-TYPE-EQ-DECL NIL |borel| NIL)
    (|Intersection| CONST-DECL "set" |sets| NIL)
    (|generated_sigma_algebra| CONST-DECL "sigma_algebra" |subset_algebra_def|
     NIL)
    (|open?| CONST-DECL "bool" |topology| |topology|)
    (|metric_open?| CONST-DECL "bool" |metric_space_def| |metric_space|)
    (|subset?| CONST-DECL "bool" |sets| NIL)
    (|ball| CONST-DECL "set[T]" |metric_space_def| |metric_space|)
    (|sigma_algebra_union?| CONST-DECL "bool" |subset_algebra_def| NIL)
    (|is_countable| CONST-DECL "bool" |countability| |sets_aux|)
    (|subset_algebra_complement?| CONST-DECL "bool" |subset_algebra_def| NIL)
    (|subset_algebra_empty?| CONST-DECL "bool" |subset_algebra_def| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|Intersection_surjective| NAME-JUDGEMENT
     "(surjective?[setofsets[T], set[T]])" |sets_lemmas| NIL)
    (|finite_emptyset| NAME-JUDGEMENT "finite_set" |finite_sets| NIL) NIL NIL
    NIL NIL NIL NIL NIL
    (S FORMAL-CONST-DECL "sigma_algebra" |measure_space| NIL)
    (|sigma_algebra| NONEMPTY-TYPE-EQ-DECL NIL |subset_algebra_def| NIL)
    (|sigma_algebra?| CONST-DECL "bool" |subset_algebra_def| NIL)
    (|setofsets| TYPE-EQ-DECL NIL |sets| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (T FORMAL-TYPE-DECL NIL |measure_space| NIL)
    (|measurable_set?| CONST-DECL "bool" |measure_space_def| NIL)
    (|measurable_function?| CONST-DECL "bool" |measure_space_def| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL))
   NIL
   (|nn_measurable_is_measurable_| SUBTYPE "measure_space.nn_measurable"
    "measure_space_def[measure_space.T, measure_space.S].measurable_function")))
 (|abs_measurable| 0
  (|abs_measurable-1| |nil| 3358676725
   ("" (SKOSIMP)
    (("" (TYPEPRED "g!1")
      ((""
        (LEMMA "borel_comp_measurable_is_measurable"
         ("phi" "lambda (x:real): abs(x)" "g" "g!1"))
        (("1" (EXPAND "o")
          (("1" (EXPAND "abs" 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL)
         ("2" (HIDE-ALL-BUT 1)
          (("2" (LEMMA "continuous_is_borel" ("x" "LAMBDA (x: real): abs(x)"))
            (("1" (PROPAX) NIL NIL)
             ("2" (HIDE 2)
              (("2" (REWRITE "metric_continuous_def")
                (("2" (EXPAND "metric_continuous?")
                  (("2" (EXPAND "metric_continuous_at?")
                    (("2" (EXPAND "member")
                      (("2" (EXPAND "ball")
                        (("2" (SKOSIMP*)
                          (("2" (INST + "epsilon!1")
                            (("2" (SKOSIMP) (("2" (GRIND) NIL NIL)) NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|measurable_function| NONEMPTY-TYPE-EQ-DECL NIL |measure_space_def| NIL)
    (|measurable_function?| CONST-DECL "bool" |measure_space_def| NIL)
    (S FORMAL-CONST-DECL "sigma_algebra" |measure_space| NIL)
    (|sigma_algebra| NONEMPTY-TYPE-EQ-DECL NIL |subset_algebra_def| NIL)
    (|sigma_algebra?| CONST-DECL "bool" |subset_algebra_def| NIL)
    (|setofsets| TYPE-EQ-DECL NIL |sets| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (T FORMAL-TYPE-DECL NIL |measure_space| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|metric_continuous?| CONST-DECL "bool" |metric_continuity| |metric_space|)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|ball| CONST-DECL "set[T]" |metric_space_def| |metric_space|)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|metric_continuous_at?| CONST-DECL "bool" |metric_continuity|
     |metric_space|)
    (|metric_continuous_def| FORMULA-DECL NIL |metric_continuity|
     |metric_space|)
    (|continuous| TYPE-EQ-DECL NIL |continuity_def| |topology|)
    (|continuous?| CONST-DECL "bool" |continuity_def| |topology|)
    (|continuous_is_borel| JUDGEMENT-TCC NIL |borel_functions| NIL)
    (O CONST-DECL "T3" |function_props| NIL)
    (|abs| CONST-DECL "[T -> nonneg_real]" |real_fun_ops| |reals|)
    (|borel_comp_measurable_is_measurable| JUDGEMENT-TCC NIL |measure_space|
     NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|metric_induced_topology| CONST-DECL "setofsets[T]" |metric_space_def|
     |metric_space|)
    (|borel_function?| CONST-DECL "bool" |borel_functions| NIL)
    (|borel_function| TYPE-EQ-DECL NIL |borel_functions| NIL))
   NIL
   (|abs_measurable| SUBTYPE
    "real_fun_ops[measure_space.T].abs(measure_space.g)"
    "measurable_function[T, S]")))
 (|expt_nat_measurable| 0
  (|expt_nat_measurable-1| |nil| 3358677209
   ("" (SKOSIMP)
    ((""
      (LEMMA "borel_comp_measurable_is_measurable"
       ("g" "g!1" "phi" "lambda (x:real): expt(x,n!1)"))
      (("1" (EXPAND "o") (("1" (EXPAND "expt" 1) (("1" (PROPAX) NIL NIL)) NIL))
        NIL)
       ("2" (HIDE 2)
        (("2" (LEMMA "continuous_is_borel")
          (("2" (INST - "LAMBDA (x: real): expt(x, n!1)")
            (("2" (HIDE 2)
              (("2"
                (LEMMA "expt_nat_continuous"
                 ("g" "lambda (x:real): x" "n" "n!1"))
                (("1" (EXPAND "expt" -1)
                  (("1" (REWRITE "metric_continuous_def") NIL NIL)) NIL)
                 ("2" (HIDE 2)
                  (("2" (EXPAND "metric_continuous?")
                    (("2" (SKOSIMP)
                      (("2" (EXPAND "metric_continuous_at?")
                        (("2" (SKOSIMP)
                          (("2" (INST + "epsilon!1") (("2" (SKOSIMP) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|expt| DEF-DECL "real" |exponentiation| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|borel_function| TYPE-EQ-DECL NIL |borel_functions| NIL)
    (|borel_function?| CONST-DECL "bool" |borel_functions| NIL)
    (|metric_induced_topology| CONST-DECL "setofsets[T]" |metric_space_def|
     |metric_space|)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|measurable_function| NONEMPTY-TYPE-EQ-DECL NIL |measure_space_def| NIL)
    (|measurable_function?| CONST-DECL "bool" |measure_space_def| NIL)
    (S FORMAL-CONST-DECL "sigma_algebra" |measure_space| NIL)
    (|sigma_algebra| NONEMPTY-TYPE-EQ-DECL NIL |subset_algebra_def| NIL)
    (|sigma_algebra?| CONST-DECL "bool" |subset_algebra_def| NIL)
    (|setofsets| TYPE-EQ-DECL NIL |sets| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (T FORMAL-TYPE-DECL NIL |measure_space| NIL)
    (|borel_comp_measurable_is_measurable| JUDGEMENT-TCC NIL |measure_space|
     NIL)
    (|expt| CONST-DECL "[T -> real]" |real_fun_power| |power|)
    (O CONST-DECL "T3" |function_props| NIL)
    (|continuous_is_borel| JUDGEMENT-TCC NIL |borel_functions| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|metric_continuous_at?| CONST-DECL "bool" |metric_continuity|
     |metric_space|)
    (|metric_continuous_def| FORMULA-DECL NIL |metric_continuity|
     |metric_space|)
    (|metric_continuous| TYPE-EQ-DECL NIL |metric_continuity| |metric_space|)
    (|metric_continuous?| CONST-DECL "bool" |metric_continuity| |metric_space|)
    (|expt_nat_continuous| JUDGEMENT-TCC NIL |real_continuity| |metric_space|)
    NIL (|continuous?| CONST-DECL "bool" |continuity_def| |topology|)
    (|continuous| TYPE-EQ-DECL NIL |continuity_def| |topology|))
   NIL
   (|expt_nat_measurable| SUBTYPE
    "real_fun_power[measure_space.T].expt(measure_space.g, measure_space.n)"
    "measurable_function[T, S]")))
 (|sq_measurable| 0
  (|sq_measurable-1| |nil| 3430584720
   ("" (SKOSIMP)
    (("" (LEMMA "expt_nat_measurable" ("g" "g!1" "n" "2"))
      (("" (EXPAND "expt")
        (("" (EXPAND "sq")
          (("" (EXPAND "sq")
            (("" (EXPAND "expt")
              (("" (EXPAND "expt")
                (("" (EXPAND "expt") (("" (PROPAX) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|measurable_function| NONEMPTY-TYPE-EQ-DECL NIL |measure_space_def| NIL)
    (|measurable_function?| CONST-DECL "bool" |measure_space_def| NIL)
    (S FORMAL-CONST-DECL "sigma_algebra" |measure_space| NIL)
    (|sigma_algebra| NONEMPTY-TYPE-EQ-DECL NIL |subset_algebra_def| NIL)
    (|sigma_algebra?| CONST-DECL "bool" |subset_algebra_def| NIL)
    (|setofsets| TYPE-EQ-DECL NIL |sets| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (T FORMAL-TYPE-DECL NIL |measure_space| NIL)
    (|expt_nat_measurable| JUDGEMENT-TCC NIL |measure_space| NIL)
    (|sq| CONST-DECL "[T -> nnreal]" |real_fun_ops_aux| |reals|)
    (|expt| DEF-DECL "real" |exponentiation| NIL)
    (|sq| CONST-DECL "nonneg_real" |sq| |reals|)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|expt| CONST-DECL "[T -> real]" |real_fun_power| |power|))
   NIL
   (|sq_measurable| SUBTYPE
    "real_fun_ops_aux[measure_space.T].sq(measure_space.g)"
    "measurable_function[T, S]")))
 (|min_measurable| 0
  (|min_measurable-2| "" 3789903621
   ("" (SKOSIMP)
    (("" (LEMMA "sum_measurable" ("g1" "g1!1" "g2" "g2!1"))
      (("" (LEMMA "diff_measurable" ("g1" "g1!1" "g2" "g2!1"))
        (("" (LEMMA "abs_measurable" ("g" "(-[T])(g1!1, g2!1)"))
          (("" (REWRITE "min_def" 1)
            ((""
              (LEMMA "diff_measurable"
               ("g1" "+[T](g1!1, g2!1)" "g2" "abs[T]((-[T])(g1!1, g2!1))"))
              ((""
                (LEMMA "scal_measurable"
                 ("c" "1/2" "g" "(-[T])
                               (+[T](g1!1, g2!1),
                                abs[T]((-[T])(g1!1, g2!1)))"))
                (("" (PROPAX) NIL NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((S FORMAL-CONST-DECL "sigma_algebra" |measure_space| NIL)
    (|sigma_algebra| NONEMPTY-TYPE-EQ-DECL NIL |subset_algebra_def| NIL)
    (|sigma_algebra?| CONST-DECL "bool" |subset_algebra_def| NIL)
    (|setofsets| TYPE-EQ-DECL NIL |sets| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (T FORMAL-TYPE-DECL NIL |measure_space| NIL)
    (|measurable_function| NONEMPTY-TYPE-EQ-DECL NIL |measure_space_def| NIL)
    (|measurable_function?| CONST-DECL "bool" |measure_space_def| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|sum_measurable| JUDGEMENT-TCC NIL |measure_space_def| NIL) NIL
    (|abs_measurable| JUDGEMENT-TCC NIL |measure_space| NIL) NIL NIL
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|abs| CONST-DECL "[T -> nonneg_real]" |real_fun_ops| |reals|)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|scal_measurable| JUDGEMENT-TCC NIL |measure_space_def| NIL) NIL
    (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    NIL
    (|abs_measurable| APPLICATION-JUDGEMENT "measurable_function[T, S]"
     |measure_space| NIL)
    (|min_def| FORMULA-DECL NIL |real_fun_ops_aux| |reals|)
    (|diff_measurable| JUDGEMENT-TCC NIL |measure_space_def| NIL))
   SHOSTAK
   (|min_measurable| SUBTYPE
    "real_fun_ops_aux[measure_space.T].min(measure_space.g1, measure_space.g2)"
    "measurable_function[T, S]"))
  (|min_measurable-1| |nil| 3358676725
   ("" (SKOSIMP)
    (("" (LEMMA "sum_measurable" ("g1" "g1!1" "g2" "g2!1"))
      (("" (LEMMA "diff_measurable" ("g1" "g1!1" "g2" "g2!1"))
        (("" (LEMMA "abs_measurable" ("g" "(-[T])(g1!1, g2!1)"))
          (("" (REWRITE "min_def" 1)
            ((""
              (LEMMA "diff_measurable"
               ("g1" "+[T](g1!1, g2!1)" "g2" "abs[T]((-[T])(g1!1, g2!1))"))
              ((""
                (LEMMA "scal_measurable"
                 ("c" "1/2" "g" "(-[T])
                               (+[T](g1!1, g2!1),
                                abs[T]((-[T])(g1!1, g2!1)))"))
                (("" (ASSERT) NIL NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|sigma_algebra| NONEMPTY-TYPE-EQ-DECL NIL |subset_algebra_def| NIL)
    (|sigma_algebra?| CONST-DECL "bool" |subset_algebra_def| NIL)
    (|setofsets| TYPE-EQ-DECL NIL |sets| NIL)
    (|measurable_function| NONEMPTY-TYPE-EQ-DECL NIL |measure_space_def| NIL)
    (|measurable_function?| CONST-DECL "bool" |measure_space_def| NIL)
    (|sum_measurable| JUDGEMENT-TCC NIL |measure_space_def| NIL)
    (|abs| CONST-DECL "[T -> nonneg_real]" |real_fun_ops| |reals|)
    (|scal_measurable| JUDGEMENT-TCC NIL |measure_space_def| NIL)
    (|min_def| FORMULA-DECL NIL |real_fun_ops_aux| |reals|)
    (|diff_measurable| JUDGEMENT-TCC NIL |measure_space_def| NIL))
   NIL
   (|min_measurable| SUBTYPE
    "real_fun_ops_aux[measure_space.T].min(measure_space.g1, measure_space.g2)"
    "measurable_function[T, S]")))
 (|max_measurable| 0
  (|max_measurable-2| "" 3789903621
   ("" (SKOSIMP)
    (("" (REWRITE "max_def")
      (("" (TYPEPRED "g1!1")
        (("" (TYPEPRED "g2!1")
          (("" (LEMMA "diff_measurable" ("g1" "g1!1" "g2" "g2!1"))
            (("" (LEMMA "sum_measurable" ("g1" "g1!1" "g2" "g2!1"))
              (("" (LEMMA "abs_measurable" ("g" "(-[T])(g1!1, g2!1)"))
                ((""
                  (LEMMA "sum_measurable"
                   ("g1" "+[T](g1!1, g2!1)" "g2" "abs[T]((-[T])(g1!1, g2!1))"))
                  ((""
                    (LEMMA "scal_measurable"
                     ("c" "1/2" "g" "+[T]
                               (+[T](g1!1, g2!1),
                                abs[T]((-[T])(g1!1, g2!1)))"))
                    (("" (PROPAX) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|max_def| FORMULA-DECL NIL |real_fun_ops_aux| |reals|)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|setofsets| TYPE-EQ-DECL NIL |sets| NIL)
    (|sigma_algebra?| CONST-DECL "bool" |subset_algebra_def| NIL)
    (|sigma_algebra| NONEMPTY-TYPE-EQ-DECL NIL |subset_algebra_def| NIL)
    (S FORMAL-CONST-DECL "sigma_algebra" |measure_space| NIL)
    (|measurable_function?| CONST-DECL "bool" |measure_space_def| NIL)
    (|measurable_function| NONEMPTY-TYPE-EQ-DECL NIL |measure_space_def| NIL)
    (T FORMAL-TYPE-DECL NIL |measure_space| NIL) NIL
    (|abs_measurable| APPLICATION-JUDGEMENT "measurable_function[T, S]"
     |measure_space| NIL)
    NIL
    (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    NIL (|sum_measurable| JUDGEMENT-TCC NIL |measure_space_def| NIL) NIL
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|abs| CONST-DECL "[T -> nonneg_real]" |real_fun_ops| |reals|)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|scal_measurable| JUDGEMENT-TCC NIL |measure_space_def| NIL) NIL
    (|abs_measurable| JUDGEMENT-TCC NIL |measure_space| NIL)
    (|diff_measurable| JUDGEMENT-TCC NIL |measure_space_def| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL))
   SHOSTAK
   (|max_measurable| SUBTYPE
    "real_fun_ops_aux[measure_space.T].max(measure_space.g1, measure_space.g2)"
    "measurable_function[T, S]"))
  (|max_measurable-1| |nil| 3358676014
   ("" (SKOSIMP)
    (("" (REWRITE "max_def")
      (("" (TYPEPRED "g1!1")
        (("" (TYPEPRED "g2!1")
          (("" (LEMMA "diff_measurable" ("g1" "g1!1" "g2" "g2!1"))
            (("" (LEMMA "sum_measurable" ("g1" "g1!1" "g2" "g2!1"))
              (("" (LEMMA "abs_measurable" ("g" "(-[T])(g1!1, g2!1)"))
                ((""
                  (LEMMA "sum_measurable"
                   ("g1" "+[T](g1!1, g2!1)" "g2" "abs[T]((-[T])(g1!1, g2!1))"))
                  ((""
                    (LEMMA "scal_measurable"
                     ("c" "1/2" "g" "+[T]
                               (+[T](g1!1, g2!1),
                                abs[T]((-[T])(g1!1, g2!1)))"))
                    (("" (ASSERT) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|max_def| FORMULA-DECL NIL |real_fun_ops_aux| |reals|)
    (|setofsets| TYPE-EQ-DECL NIL |sets| NIL)
    (|sigma_algebra?| CONST-DECL "bool" |subset_algebra_def| NIL)
    (|sigma_algebra| NONEMPTY-TYPE-EQ-DECL NIL |subset_algebra_def| NIL)
    (|measurable_function?| CONST-DECL "bool" |measure_space_def| NIL)
    (|measurable_function| NONEMPTY-TYPE-EQ-DECL NIL |measure_space_def| NIL)
    (|sum_measurable| JUDGEMENT-TCC NIL |measure_space_def| NIL)
    (|abs| CONST-DECL "[T -> nonneg_real]" |real_fun_ops| |reals|)
    (|scal_measurable| JUDGEMENT-TCC NIL |measure_space_def| NIL)
    (|diff_measurable| JUDGEMENT-TCC NIL |measure_space_def| NIL))
   SHOSTAK
   (|max_measurable| SUBTYPE
    "real_fun_ops_aux[measure_space.T].max(measure_space.g1, measure_space.g2)"
    "measurable_function[T, S]")))
 (|minimum_measurable| 0
  (|minimum_measurable-1| |nil| 3409894810
   ("" (INDUCT "n")
    (("1" (SKOSIMP) (("1" (EXPAND "minimum") (("1" (PROPAX) NIL NIL)) NIL))
      NIL)
     ("2" (SKOSIMP)
      (("2" (SKOSIMP)
        (("2" (INST - "u!1")
          (("2" (EXPAND "minimum" 1)
            (("2" (ASSERT) (("2" (REWRITE "min_measurable") NIL NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|min_measurable| JUDGEMENT-TCC NIL |measure_space| NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|minimum| DEF-DECL "[T -> real]" |real_fun_ops_aux| |reals|)
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (|measurable_function| NONEMPTY-TYPE-EQ-DECL NIL |measure_space_def| NIL)
    (|measurable_function?| CONST-DECL "bool" |measure_space_def| NIL)
    (S FORMAL-CONST-DECL "sigma_algebra" |measure_space| NIL)
    (|sigma_algebra| NONEMPTY-TYPE-EQ-DECL NIL |subset_algebra_def| NIL)
    (|sigma_algebra?| CONST-DECL "bool" |subset_algebra_def| NIL)
    (|setofsets| TYPE-EQ-DECL NIL |sets| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (T FORMAL-TYPE-DECL NIL |measure_space| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   NIL
   (|minimum_measurable| SUBTYPE
    "real_fun_ops_aux[measure_space.T].minimum(measure_space.u, measure_space.n)"
    "measurable_function[T, S]")))
 (|maximum_measurable| 0
  (|maximum_measurable-1| |nil| 3409894810
   ("" (INDUCT "n")
    (("1" (SKOSIMP) (("1" (EXPAND "maximum") (("1" (PROPAX) NIL NIL)) NIL))
      NIL)
     ("2" (SKOSIMP)
      (("2" (SKOSIMP)
        (("2" (INST - "u!1")
          (("2" (EXPAND "maximum" 1) (("2" (REWRITE "max_measurable") NIL NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|max_measurable| JUDGEMENT-TCC NIL |measure_space| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|maximum| DEF-DECL "[T -> real]" |real_fun_ops_aux| |reals|)
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (|measurable_function| NONEMPTY-TYPE-EQ-DECL NIL |measure_space_def| NIL)
    (|measurable_function?| CONST-DECL "bool" |measure_space_def| NIL)
    (S FORMAL-CONST-DECL "sigma_algebra" |measure_space| NIL)
    (|sigma_algebra| NONEMPTY-TYPE-EQ-DECL NIL |subset_algebra_def| NIL)
    (|sigma_algebra?| CONST-DECL "bool" |subset_algebra_def| NIL)
    (|setofsets| TYPE-EQ-DECL NIL |sets| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (T FORMAL-TYPE-DECL NIL |measure_space| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   NIL
   (|maximum_measurable| SUBTYPE
    "real_fun_ops_aux[measure_space.T].maximum(measure_space.u, measure_space.n)"
    "measurable_function[T, S]")))
 (|plus_measurable| 0
  (|plus_measurable-1| |nil| 3358680519
   ("" (SKOSIMP)
    (("" (EXPAND "plus")
      (("" (TYPEPRED "g!1")
        (("" (LEMMA "scal_measurable" ("c" "0" "g" "g!1"))
          (("" (LEMMA "max_measurable" ("g1" "g!1" "g2" "*[T](0,g!1)"))
            (("" (EXPAND "max" -1)
              (("" (EXPAND "*" -1)
                ((""
                  (LEMMA "extensionality[T,real]"
                   ("f" "LAMBDA (x: T): max(g!1(x), 0 * g!1(x))" "g"
                    "LAMBDA (x: T): max(g!1(x), 0)"))
                  (("" (SPLIT -1)
                    (("1" (ASSERT) NIL NIL)
                     ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|plus| CONST-DECL "[T -> nnreal]" |real_fun_ops_aux| |reals|)
    (|scal_measurable| JUDGEMENT-TCC NIL |measure_space_def| NIL)
    (|max| CONST-DECL "[T -> real]" |real_fun_ops_aux| |reals|)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|extensionality| FORMULA-DECL NIL |functions| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) NIL
    (|max_measurable| JUDGEMENT-TCC NIL |measure_space| NIL) NIL
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (T FORMAL-TYPE-DECL NIL |measure_space| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|setofsets| TYPE-EQ-DECL NIL |sets| NIL)
    (|sigma_algebra?| CONST-DECL "bool" |subset_algebra_def| NIL)
    (|sigma_algebra| NONEMPTY-TYPE-EQ-DECL NIL |subset_algebra_def| NIL)
    (S FORMAL-CONST-DECL "sigma_algebra" |measure_space| NIL)
    (|measurable_function?| CONST-DECL "bool" |measure_space_def| NIL)
    (|measurable_function| NONEMPTY-TYPE-EQ-DECL NIL |measure_space_def| NIL))
   NIL
   (|plus_measurable| SUBTYPE
    "real_fun_ops_aux[measure_space.T].plus(measure_space.g)"
    "measurable_function[T, S]")))
 (|minus_measurable| 0
  (|minus_measurable-1| |nil| 3358680519
   ("" (SKOSIMP)
    (("" (EXPAND "minus")
      (("" (TYPEPRED "g!1")
        (("" (LEMMA "scal_measurable" ("c" "0" "g" "g!1"))
          (("" (LEMMA "min_measurable" ("g1" "g!1" "g2" "*[T](0, g!1)"))
            (("" (EXPAND "*")
              (("" (EXPAND "min" -1)
                (("" (ASSERT)
                  ((""
                    (LEMMA "opp_measurable"
                     ("g" "LAMBDA (x:T): min(g!1(x),0*g!1(x))"))
                    (("" (EXPAND "-" -1)
                      ((""
                        (LEMMA "extensionality"
                         ("f" "LAMBDA (x_1: T): -min(g!1(x_1), 0 * g!1(x_1))"
                          "g" "LAMBDA (x: T): -min(g!1(x), 0)"))
                        (("" (SPLIT -1)
                          (("1" (ASSERT) NIL NIL)
                           ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|minus| CONST-DECL "[T -> nnreal]" |real_fun_ops_aux| |reals|)
    (|scal_measurable| JUDGEMENT-TCC NIL |measure_space_def| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) NIL
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|extensionality| FORMULA-DECL NIL |functions| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|opp_measurable| JUDGEMENT-TCC NIL |measure_space_def| NIL)
    (|min| CONST-DECL "[T -> real]" |real_fun_ops_aux| |reals|) NIL
    (|min_measurable| JUDGEMENT-TCC NIL |measure_space| NIL) NIL
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (T FORMAL-TYPE-DECL NIL |measure_space| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|setofsets| TYPE-EQ-DECL NIL |sets| NIL)
    (|sigma_algebra?| CONST-DECL "bool" |subset_algebra_def| NIL)
    (|sigma_algebra| NONEMPTY-TYPE-EQ-DECL NIL |subset_algebra_def| NIL)
    (S FORMAL-CONST-DECL "sigma_algebra" |measure_space| NIL)
    (|measurable_function?| CONST-DECL "bool" |measure_space_def| NIL)
    (|measurable_function| NONEMPTY-TYPE-EQ-DECL NIL |measure_space_def| NIL))
   NIL
   (|minus_measurable| SUBTYPE
    "real_fun_ops_aux[measure_space.T].minus(measure_space.g)"
    "measurable_function[T, S]")))
 (|prod_measurable| 0
  (|prod_measurable-1| |nil| 3358679440
   ("" (SKOSIMP)
    (("" (REWRITE "prod_def")
      (("" (LEMMA "sum_measurable" ("g1" "g1!1" "g2" "g2!1"))
        (("" (LEMMA "diff_measurable" ("g1" "g1!1" "g2" "g2!1"))
          (("" (LEMMA "sq_measurable" ("g" "(+[T])(g1!1, g2!1)"))
            (("" (LEMMA "sq_measurable" ("g" "(-[T])(g1!1, g2!1)"))
              ((""
                (LEMMA "diff_measurable"
                 ("g1" "sq[T]((+[T])(g1!1, g2!1))" "g2"
                  "sq[T]((-[T])(g1!1, g2!1))"))
                (("" (REWRITE "scal_measurable") NIL NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|prod_def| FORMULA-DECL NIL |real_fun_ops_aux| |reals|)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|setofsets| TYPE-EQ-DECL NIL |sets| NIL)
    (|sigma_algebra?| CONST-DECL "bool" |subset_algebra_def| NIL)
    (|sigma_algebra| NONEMPTY-TYPE-EQ-DECL NIL |subset_algebra_def| NIL)
    (S FORMAL-CONST-DECL "sigma_algebra" |measure_space| NIL)
    (|measurable_function?| CONST-DECL "bool" |measure_space_def| NIL)
    (|measurable_function| NONEMPTY-TYPE-EQ-DECL NIL |measure_space_def| NIL)
    (T FORMAL-TYPE-DECL NIL |measure_space| NIL) NIL
    (|sq_measurable| APPLICATION-JUDGEMENT "measurable_function[T, S]"
     |measure_space| NIL)
    NIL
    (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    NIL (|diff_measurable| JUDGEMENT-TCC NIL |measure_space_def| NIL) NIL
    (|scal_measurable| JUDGEMENT-TCC NIL |measure_space_def| NIL)
    (|sq| CONST-DECL "[T -> nnreal]" |real_fun_ops_aux| |reals|)
    (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL)
    (>= CONST-DECL "bool" |reals| NIL) NIL
    (|sq_measurable| JUDGEMENT-TCC NIL |measure_space| NIL)
    (|sum_measurable| JUDGEMENT-TCC NIL |measure_space_def| NIL))
   NIL
   (|prod_measurable| SUBTYPE
    "real_fun_ops[measure_space.T].*(measure_space.g1, measure_space.g2)"
    "measurable_function[T, S]")))
 (|expt_measurable_TCC1| 0
  (|expt_measurable_TCC1-1| |nil| 3433774225 ("" (SUBTYPE-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (T FORMAL-TYPE-DECL NIL |measure_space| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|nn_measurable?| CONST-DECL "bool" |measure_space| NIL)
    (|nn_measurable| NONEMPTY-TYPE-EQ-DECL NIL |measure_space| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|measurable_function?| CONST-DECL "bool" |measure_space_def| NIL)
    (|measurable_set?| CONST-DECL "bool" |measure_space_def| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|setofsets| TYPE-EQ-DECL NIL |sets| NIL)
    (|sigma_algebra?| CONST-DECL "bool" |subset_algebra_def| NIL)
    (|sigma_algebra| NONEMPTY-TYPE-EQ-DECL NIL |subset_algebra_def| NIL)
    (S FORMAL-CONST-DECL "sigma_algebra" |measure_space| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL))
   NIL
   (|expt_measurable_| SUBTYPE "measure_space.g"
    "[measure_space.T -> nnreal]")))
 (|expt_measurable| 0
  (|expt_measurable-1| |nil| 3430677297
   ("" (SKOSIMP)
    ((""
      (LEMMA "borel_comp_measurable_is_measurable"
       ("phi" "(abs)^a!1" "g" "g!1"))
      (("1" (EXPAND "o")
        (("1" (EXPAND "^" -1)
          (("1"
            (CASE-REPLACE
             "(LAMBDA (x: T): power@real_expt.^((real_defs.abs)(g!1(x)), a!1))=(power@real_fun_power[T].^(g!1, a!1))")
            (("1" (HIDE-ALL-BUT 1)
              (("1" (APPLY-EXTENSIONALITY :HIDE? T)
                (("1" (EXPAND "^" 1 2)
                  (("1" (TYPEPRED "g!1")
                    (("1" (EXPAND "nn_measurable?")
                      (("1" (FLATTEN)
                        (("1" (INST - "x!1")
                          (("1" (EXPAND "abs") (("1" (ASSERT) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (HIDE 2)
        (("2" (LEMMA "continuous_is_borel")
          (("2" (INST - "(^[real]((abs), a!1))")
            (("2" (HIDE 2)
              (("2" (LEMMA "expt_real_continuous")
                (("2" (INST - "a!1" "abs")
                  (("1" (REWRITE "metric_continuous_def") NIL NIL)
                   ("2" (HIDE 2)
                    (("2" (SPLIT)
                      (("1" (EXPAND "metric_continuous?")
                        (("1" (EXPAND "metric_continuous_at?")
                          (("1" (SKOSIMP*)
                            (("1" (INST + "epsilon!1") (("1" (GRIND) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (GRIND) NIL NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((^ CONST-DECL "[T -> nnreal]" |real_fun_power| |power|)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL)
    (|borel_function| TYPE-EQ-DECL NIL |borel_functions| NIL)
    (|borel_function?| CONST-DECL "bool" |borel_functions| NIL)
    (|metric_induced_topology| CONST-DECL "setofsets[T]" |metric_space_def|
     |metric_space|)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nn_measurable| NONEMPTY-TYPE-EQ-DECL NIL |measure_space| NIL)
    (|nn_measurable?| CONST-DECL "bool" |measure_space| NIL)
    (|measurable_function| NONEMPTY-TYPE-EQ-DECL NIL |measure_space_def| NIL)
    (|measurable_function?| CONST-DECL "bool" |measure_space_def| NIL)
    (S FORMAL-CONST-DECL "sigma_algebra" |measure_space| NIL)
    (|sigma_algebra| NONEMPTY-TYPE-EQ-DECL NIL |subset_algebra_def| NIL)
    (|sigma_algebra?| CONST-DECL "bool" |subset_algebra_def| NIL)
    (|setofsets| TYPE-EQ-DECL NIL |sets| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (T FORMAL-TYPE-DECL NIL |measure_space| NIL)
    (|borel_comp_measurable_is_measurable| JUDGEMENT-TCC NIL |measure_space|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (^ CONST-DECL "nnreal" |real_expt| |power|)
    (O CONST-DECL "T3" |function_props| NIL)
    (|continuous_is_borel| JUDGEMENT-TCC NIL |borel_functions| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|metric_continuous?| CONST-DECL "bool" |metric_continuity| |metric_space|)
    (|metric_continuous| TYPE-EQ-DECL NIL |metric_continuity| |metric_space|)
    (|metric_continuous_def| FORMULA-DECL NIL |metric_continuity|
     |metric_space|)
    (|metric_continuous_at?| CONST-DECL "bool" |metric_continuity|
     |metric_space|)
    (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|ball| CONST-DECL "set[T]" |metric_space_def| |metric_space|)
    (|expt_real_continuous| JUDGEMENT-TCC NIL |real_continuity| |metric_space|)
    NIL (|continuous?| CONST-DECL "bool" |continuity_def| |topology|)
    (|continuous| TYPE-EQ-DECL NIL |continuity_def| |topology|))
   NIL
   (|expt_measurable| SUBTYPE
    "real_fun_power[measure_space.T].^(measure_space.g, measure_space.a)"
    "measurable_function[T, S]")))
 (|measurable_plus_minus| 0
  (|measurable_plus_minus-1| |nil| 3358680295
   ("" (SKOSIMP)
    (("" (SPLIT)
      (("1" (FLATTEN)
        (("1" (ASSERT)
          (("1" (LEMMA "plus_measurable" ("g" "f!1"))
            (("1" (LEMMA "minus_measurable" ("g" "f!1"))
              (("1" (ASSERT) NIL NIL)) NIL))
            NIL))
          NIL))
        NIL)
       ("2" (FLATTEN)
        (("2" (LEMMA "diff_measurable" ("g1" "plus(f!1)" "g2" "minus(f!1)"))
          (("1" (REWRITE "plus_minus_def" -1 :DIR RL) NIL NIL)
           ("2" (PROPAX) NIL NIL) ("3" (PROPAX) NIL NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|minus_measurable| JUDGEMENT-TCC NIL |measure_space| NIL)
    (|plus_measurable| JUDGEMENT-TCC NIL |measure_space| NIL)
    (T FORMAL-TYPE-DECL NIL |measure_space| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|setofsets| TYPE-EQ-DECL NIL |sets| NIL)
    (|sigma_algebra?| CONST-DECL "bool" |subset_algebra_def| NIL)
    (|sigma_algebra| NONEMPTY-TYPE-EQ-DECL NIL |subset_algebra_def| NIL)
    (S FORMAL-CONST-DECL "sigma_algebra" |measure_space| NIL)
    (|measurable_function?| CONST-DECL "bool" |measure_space_def| NIL)
    (|measurable_function| NONEMPTY-TYPE-EQ-DECL NIL |measure_space_def| NIL)
    (|minus| CONST-DECL "[T -> nnreal]" |real_fun_ops_aux| |reals|)
    (|plus| CONST-DECL "[T -> nnreal]" |real_fun_ops_aux| |reals|)
    (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|diff_measurable| JUDGEMENT-TCC NIL |measure_space_def| NIL)
    (|plus_minus_def| FORMULA-DECL NIL |real_fun_ops_aux| |reals|))
   SHOSTAK))
 (|measurable_bounded_above_TCC1| 0
  (|measurable_bounded_above_TCC1-1| |nil| 3391663705
   ("" (EXPAND "measurable_function?")
    (("" (SKOSIMP)
      (("" (EXPAND "inverse_image")
        (("" (EXPAND "member")
          (("" (CASE "B!1(0)")
            (("1" (LEMMA "measurable_fullset")
              (("1" (EXPAND "fullset") (("1" (ASSERT) NIL NIL)) NIL)) NIL)
             ("2" (LEMMA "measurable_emptyset")
              (("2" (EXPAND "emptyset") (("2" (ASSERT) NIL NIL)) NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|member| CONST-DECL "bool" |sets| NIL)
    (|measurable_emptyset| JUDGEMENT-TCC NIL |measure_space_def| NIL)
    (|emptyset| CONST-DECL "set" |sets| NIL)
    (|measurable_fullset| JUDGEMENT-TCC NIL |measure_space_def| NIL)
    (T FORMAL-TYPE-DECL NIL |measure_space| NIL)
    (S FORMAL-CONST-DECL "sigma_algebra" |measure_space| NIL)
    (|fullset| CONST-DECL "set" |sets| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|setofsets| TYPE-EQ-DECL NIL |sets| NIL)
    (|sigma_algebra?| CONST-DECL "bool" |subset_algebra_def| NIL)
    (|sigma_algebra| NONEMPTY-TYPE-EQ-DECL NIL |subset_algebra_def| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|metric_induced_topology| CONST-DECL "setofsets[T]" |metric_space_def|
     |metric_space|)
    (|borel?| CONST-DECL "sigma_algebra" |borel| NIL)
    (|borel| NONEMPTY-TYPE-EQ-DECL NIL |borel| NIL) NIL
    (|measurable_function?| CONST-DECL "bool" |measure_space_def| NIL))
   NIL
   (|measurable_bounded_above| SUBTYPE "LAMBDA x: 0"
    "measurable_function[T, S]")))
 (|measurable_bounded_above_TCC2| 0
  (|measurable_bounded_above_TCC2-1| |nil| 3391663705
   ("" (EXPAND "measurable_bounded_above?")
    (("" (EXPAND "pointwise_bounded_above?")
      (("" (EXPAND "pointwise?")
        (("" (EXPAND "bounded_above?")
          (("" (SKOSIMP) (("" (INST + "0") (("" (GRIND) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|pointwise_bounded_above?| CONST-DECL "bool" |pointwise_convergence| NIL)
    (|bounded_above?| CONST-DECL "bool" |real_fun_preds| |reals|)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|pointwise?| CONST-DECL "bool" |pointwise_convergence| NIL)
    (|measurable_bounded_above?| CONST-DECL "bool" |measure_space| NIL))
   NIL
   (|measurable_bounded_above| SUBTYPE "(LAMBDA n: LAMBDA x: 0)"
    "measurable_bounded_above")))
 (|measurable_bounded_below_TCC1| 0
  (|measurable_bounded_below_TCC1-1| |nil| 3391663705
   ("" (EXPAND "measurable_bounded_below?")
    (("" (EXPAND "pointwise_bounded_below?")
      (("" (EXPAND "pointwise?")
        (("" (SKOSIMP)
          (("" (EXPAND "bounded_below?")
            (("" (INST + "0") (("" (GRIND) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|pointwise_bounded_below?| CONST-DECL "bool" |pointwise_convergence| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|bounded_below?| CONST-DECL "bool" |real_fun_preds| |reals|)
    (|pointwise?| CONST-DECL "bool" |pointwise_convergence| NIL)
    (|measurable_bounded_below?| CONST-DECL "bool" |measure_space| NIL))
   NIL
   (|measurable_bounded_below| SUBTYPE "(LAMBDA n: LAMBDA x: 0)"
    "measurable_bounded_below")))
 (|measurable_bounded_TCC1| 0
  (|measurable_bounded_TCC1-1| |nil| 3391665943
   ("" (EXPAND "measurable_bounded?")
    (("" (REWRITE "measurable_bounded_above_TCC2")
      (("" (REWRITE "measurable_bounded_below_TCC1") NIL NIL)) NIL))
    NIL)
   ((|measurable_bounded_above_TCC2| SUBTYPE-TCC NIL |measure_space| NIL)
    (|measurable_bounded_below_TCC1| SUBTYPE-TCC NIL |measure_space| NIL)
    (|measurable_bounded?| CONST-DECL "bool" |measure_space| NIL))
   NIL
   (|measurable_bounded| SUBTYPE "(LAMBDA n: LAMBDA x: 0)"
    "measurable_bounded")))
 (|measurable_bounded_above_is_bounded_above| 0
  (|measurable_bounded_above_is_bounded_above-1| |nil| 3391663705
   ("" (SKOSIMP)
    (("" (TYPEPRED "x!1")
      (("" (EXPAND "measurable_bounded_above?") (("" (PROPAX) NIL NIL)) NIL))
      NIL))
    NIL)
   ((|measurable_bounded_above| NONEMPTY-TYPE-EQ-DECL NIL |measure_space| NIL)
    (|measurable_bounded_above?| CONST-DECL "bool" |measure_space| NIL)
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (|measurable_function| NONEMPTY-TYPE-EQ-DECL NIL |measure_space_def| NIL)
    (|measurable_function?| CONST-DECL "bool" |measure_space_def| NIL)
    (S FORMAL-CONST-DECL "sigma_algebra" |measure_space| NIL)
    (|sigma_algebra| NONEMPTY-TYPE-EQ-DECL NIL |subset_algebra_def| NIL)
    (|sigma_algebra?| CONST-DECL "bool" |subset_algebra_def| NIL)
    (|setofsets| TYPE-EQ-DECL NIL |sets| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (T FORMAL-TYPE-DECL NIL |measure_space| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|measurable_bounded_above_is_bounded_above| SUBTYPE "measure_space.x"
    "pointwise_bounded_above[T]")))
 (|measurable_bounded_below_is_bounded_below| 0
  (|measurable_bounded_below_is_bounded_below-1| |nil| 3391663705
   ("" (SKOSIMP)
    (("" (TYPEPRED "x!1")
      (("" (EXPAND "measurable_bounded_below?") (("" (PROPAX) NIL NIL)) NIL))
      NIL))
    NIL)
   ((|measurable_bounded_below| NONEMPTY-TYPE-EQ-DECL NIL |measure_space| NIL)
    (|measurable_bounded_below?| CONST-DECL "bool" |measure_space| NIL)
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (|measurable_function| NONEMPTY-TYPE-EQ-DECL NIL |measure_space_def| NIL)
    (|measurable_function?| CONST-DECL "bool" |measure_space_def| NIL)
    (S FORMAL-CONST-DECL "sigma_algebra" |measure_space| NIL)
    (|sigma_algebra| NONEMPTY-TYPE-EQ-DECL NIL |subset_algebra_def| NIL)
    (|sigma_algebra?| CONST-DECL "bool" |subset_algebra_def| NIL)
    (|setofsets| TYPE-EQ-DECL NIL |sets| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (T FORMAL-TYPE-DECL NIL |measure_space| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|measurable_bounded_below_is_bounded_below| SUBTYPE "measure_space.x"
    "pointwise_bounded_below[T]")))
 (|measurable_bounded_is_measurable_bounded_above| 0
  (|measurable_bounded_is_measurable_bounded_above-1| |nil| 3913444607
   ("" (JUDGEMENT-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|setofsets| TYPE-EQ-DECL NIL |sets| NIL)
    (|sigma_algebra?| CONST-DECL "bool" |subset_algebra_def| NIL)
    (|sigma_algebra| NONEMPTY-TYPE-EQ-DECL NIL |subset_algebra_def| NIL)
    (S FORMAL-CONST-DECL "sigma_algebra" |measure_space| NIL)
    (|measurable_function?| CONST-DECL "bool" |measure_space_def| NIL)
    (|measurable_function| NONEMPTY-TYPE-EQ-DECL NIL |measure_space_def| NIL)
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (|measurable_bounded?| CONST-DECL "bool" |measure_space| NIL)
    (|measurable_bounded| NONEMPTY-TYPE-EQ-DECL NIL |measure_space| NIL)
    (|measurable_bounded_below?| CONST-DECL "bool" |measure_space| NIL)
    (|pointwise_bounded_below?| CONST-DECL "bool" |pointwise_convergence| NIL)
    (|bounded_below?| CONST-DECL "bool" |real_fun_preds| |reals|)
    (|bounded_above?| CONST-DECL "bool" |real_fun_preds| |reals|)
    (T FORMAL-TYPE-DECL NIL |measure_space| NIL)
    (|pointwise?| CONST-DECL "bool" |pointwise_convergence| NIL)
    (|pointwise_bounded_above?| CONST-DECL "bool" |pointwise_convergence| NIL)
    (|measurable_bounded_above?| CONST-DECL "bool" |measure_space| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL))
   NIL
   (|measurable_bounded_is_measurable_bounded_above_| SUBTYPE
    "measure_space.measurable_bounded"
    "measure_space.measurable_bounded_above")))
 (|measurable_bounded_is_measurable_bounded_below| 0
  (|measurable_bounded_is_measurable_bounded_below-1| |nil| 3913444607
   ("" (JUDGEMENT-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|setofsets| TYPE-EQ-DECL NIL |sets| NIL)
    (|sigma_algebra?| CONST-DECL "bool" |subset_algebra_def| NIL)
    (|sigma_algebra| NONEMPTY-TYPE-EQ-DECL NIL |subset_algebra_def| NIL)
    (S FORMAL-CONST-DECL "sigma_algebra" |measure_space| NIL)
    (|measurable_function?| CONST-DECL "bool" |measure_space_def| NIL)
    (|measurable_function| NONEMPTY-TYPE-EQ-DECL NIL |measure_space_def| NIL)
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (|measurable_bounded?| CONST-DECL "bool" |measure_space| NIL)
    (|measurable_bounded| NONEMPTY-TYPE-EQ-DECL NIL |measure_space| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|measurable_bounded_above?| CONST-DECL "bool" |measure_space| NIL)
    (|pointwise_bounded_above?| CONST-DECL "bool" |pointwise_convergence| NIL)
    (|bounded_above?| CONST-DECL "bool" |real_fun_preds| |reals|)
    (|bounded_below?| CONST-DECL "bool" |real_fun_preds| |reals|)
    (T FORMAL-TYPE-DECL NIL |measure_space| NIL)
    (|pointwise?| CONST-DECL "bool" |pointwise_convergence| NIL)
    (|pointwise_bounded_below?| CONST-DECL "bool" |pointwise_convergence| NIL)
    (|measurable_bounded_below?| CONST-DECL "bool" |measure_space| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL))
   NIL
   (|measurable_bounded_is_measurable_bounded_below_| SUBTYPE
    "measure_space.measurable_bounded"
    "measure_space.measurable_bounded_below")))
 (|measurable_bounded_is_bounded| 0
  (|measurable_bounded_is_bounded-1| |nil| 3391666175
   ("" (SKOSIMP)
    (("" (TYPEPRED "x!1")
      (("" (EXPAND "measurable_bounded?")
        (("" (FLATTEN)
          (("" (EXPAND "measurable_bounded_above?")
            (("" (EXPAND "measurable_bounded_below?")
              (("" (REWRITE "pointwise_bounded_def") (("" (ASSERT) NIL NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|measurable_bounded| NONEMPTY-TYPE-EQ-DECL NIL |measure_space| NIL)
    (|measurable_bounded?| CONST-DECL "bool" |measure_space| NIL)
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (|measurable_function| NONEMPTY-TYPE-EQ-DECL NIL |measure_space_def| NIL)
    (|measurable_function?| CONST-DECL "bool" |measure_space_def| NIL)
    (S FORMAL-CONST-DECL "sigma_algebra" |measure_space| NIL)
    (|sigma_algebra| NONEMPTY-TYPE-EQ-DECL NIL |subset_algebra_def| NIL)
    (|sigma_algebra?| CONST-DECL "bool" |subset_algebra_def| NIL)
    (|setofsets| TYPE-EQ-DECL NIL |sets| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (T FORMAL-TYPE-DECL NIL |measure_space| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|measurable_bounded_below?| CONST-DECL "bool" |measure_space| NIL)
    (|pointwise_bounded_def| FORMULA-DECL NIL |pointwise_convergence| NIL)
    (|measurable_bounded_above?| CONST-DECL "bool" |measure_space| NIL))
   NIL
   (|measurable_bounded_is_bounded| SUBTYPE "measure_space.x"
    "pointwise_bounded[T]")))
 (|inf_measurable| 0
  (|inf_measurable-1| |nil| 3392299935
   ("" (SKOSIMP)
    (("" (CASE "forall m: measurable_function?[T, S](u!1(m))")
      (("1" (REWRITE "measurable_ge")
        (("1" (SKOSIMP)
          (("1"
            (CASE-REPLACE
             "{z: T | inf(u!1)(n!1)(z) >= c!1}=IIntersection(lambda m: {z: T | u!1(m+n!1)(z) >= c!1})")
            (("1" (HIDE -1)
              (("1"
                (LEMMA "measurable_IIntersection"
                 ("SS" "LAMBDA m: {z: T | u!1(m + n!1)(z) >= c!1}"))
                (("1" (EXPAND "measurable_set?") (("1" (PROPAX) NIL NIL)) NIL)
                 ("2" (HIDE 2)
                  (("2" (SKOSIMP)
                    (("2" (INST - "m!1+n!1")
                      (("2" (REWRITE "measurable_ge")
                        (("2" (INST - "c!1")
                          (("2" (EXPAND "measurable_set?")
                            (("2" (PROPAX) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (HIDE-ALL-BUT 1)
              (("2" (APPLY-EXTENSIONALITY :HIDE? T)
                (("2" (EXPAND "IIntersection")
                  (("2" (EXPAND "inf")
                    (("2"
                      (TYPEPRED
                       "inf(image[nat, real](LAMBDA m: u!1(m)(x!1), {m | m >= n!1}))")
                      (("2"
                        (NAME-REPLACE "INF"
                         "inf(image[nat, real](LAMBDA m: u!1(m)(x!1), {m | m >= n!1}))")
                        (("2" (EXPAND "image")
                          (("2" (EXPAND "greatest_lower_bound")
                            (("2" (FLATTEN)
                              (("2" (EXPAND "lower_bound")
                                (("2"
                                  (CASE-REPLACE
                                   "(FORALL (i: nat): u!1(i + n!1)(x!1) >= c!1)")
                                  (("1" (INST -3 "c!1")
                                    (("1" (SPLIT -3)
                                      (("1" (ASSERT) NIL NIL)
                                       ("2" (ASSERT) NIL NIL)
                                       ("3" (SKOSIMP)
                                        (("3" (TYPEPRED "z!1")
                                          (("3" (SKOSIMP)
                                            (("3" (TYPEPRED "x!2")
                                              (("3" (INST -3 "x!2-n!1")
                                                (("3" (ASSERT) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (REPLACE 1 2)
                                    (("2" (SIMPLIFY 2)
                                      (("2" (SKOSIMP)
                                        (("2" (INST - "u!1(i!1 + n!1)(x!1)")
                                          (("1" (ASSERT) NIL NIL)
                                           ("2" (INST + "i!1+n!1") NIL NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (HIDE 2) (("2" (SKOSIMP) (("2" (GRIND) NIL NIL)) NIL)) NIL))
      NIL))
    NIL)
   ((|measurable_bounded_below| NONEMPTY-TYPE-EQ-DECL NIL |measure_space| NIL)
    (|measurable_bounded_below?| CONST-DECL "bool" |measure_space| NIL)
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (|measurable_function| NONEMPTY-TYPE-EQ-DECL NIL |measure_space_def| NIL)
    (|measurable_function?| CONST-DECL "bool" |measure_space_def| NIL)
    (S FORMAL-CONST-DECL "sigma_algebra" |measure_space| NIL)
    (|sigma_algebra| NONEMPTY-TYPE-EQ-DECL NIL |subset_algebra_def| NIL)
    (|sigma_algebra?| CONST-DECL "bool" |subset_algebra_def| NIL)
    (|setofsets| TYPE-EQ-DECL NIL |sets| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (T FORMAL-TYPE-DECL NIL |measure_space| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|greatest_lower_bound| CONST-DECL "bool" |bound_defs| |reals|)
    (<= CONST-DECL "bool" |reals| NIL)
    (|inf_set| TYPE-EQ-DECL NIL |bounded_reals| |reals|)
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (|below_bounded| CONST-DECL "bool" |bounded_reals| |reals|)
    (|inf| CONST-DECL "{x | greatest_lower_bound(<=)(x, Sl)}" |bounded_reals|
     |reals|)
    NIL
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) NIL NIL
    NIL NIL (|lower_bound| CONST-DECL "bool" |bound_defs| |reals|)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|measurable_set| NONEMPTY-TYPE-EQ-DECL NIL |measure_space_def| NIL)
    (|measurable_set?| CONST-DECL "bool" |measure_space_def| NIL)
    (|measurable_IIntersection| JUDGEMENT-TCC NIL |measure_space_def| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|IIntersection| CONST-DECL "set[T]" |indexed_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|inf| CONST-DECL "real" |pointwise_convergence| NIL)
    (|pointwise_bounded_below| NONEMPTY-TYPE-EQ-DECL NIL
     |pointwise_convergence| NIL)
    (|pointwise_bounded_below?| CONST-DECL "bool" |pointwise_convergence| NIL)
    (|measurable_ge| FORMULA-DECL NIL |measure_space_def| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL))
   SHOSTAK))
 (|sup_measurable| 0
  (|sup_measurable-1| |nil| 3392309178
   ("" (SKOSIMP)
    (("" (REWRITE "sup_inf_def")
      (("" (TYPEPRED "u!1")
        (("" (LEMMA "inf_measurable" ("u" "-u!1" "n" "n!1"))
          (("1" (LEMMA "opp_measurable" ("g" "inf(-u!1)(n!1)"))
            (("1" (EXPAND "-" 1 1) (("1" (PROPAX) NIL NIL)) NIL)
             ("2" (PROPAX) NIL NIL))
            NIL)
           ("2" (SPLIT)
            (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL)
             ("2" (HIDE 2)
              (("2" (EXPAND "measurable_bounded_above?")
                (("2" (EXPAND "measurable_bounded_below?")
                  (("2" (EXPAND "pointwise_bounded_below?")
                    (("2" (EXPAND "pointwise_bounded_above?")
                      (("2" (EXPAND "pointwise?")
                        (("2" (SKOSIMP)
                          (("2" (INST - "x!1")
                            (("2" (EXPAND "bounded_below?")
                              (("2" (EXPAND "bounded_above?")
                                (("2" (SKOSIMP)
                                  (("2" (ASSERT)
                                    (("2" (INST + "-a!1")
                                      (("2" (SKOSIMP)
                                        (("2" (INST - "x!2")
                                          (("2" (GRIND) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|sup_inf_def| FORMULA-DECL NIL |pointwise_convergence| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (|pointwise_bounded_above?| CONST-DECL "bool" |pointwise_convergence| NIL)
    (|pointwise_bounded_above| NONEMPTY-TYPE-EQ-DECL NIL
     |pointwise_convergence| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|setofsets| TYPE-EQ-DECL NIL |sets| NIL)
    (|sigma_algebra?| CONST-DECL "bool" |subset_algebra_def| NIL)
    (|sigma_algebra| NONEMPTY-TYPE-EQ-DECL NIL |subset_algebra_def| NIL)
    (S FORMAL-CONST-DECL "sigma_algebra" |measure_space| NIL)
    (|measurable_function?| CONST-DECL "bool" |measure_space_def| NIL)
    (|measurable_function| NONEMPTY-TYPE-EQ-DECL NIL |measure_space_def| NIL)
    (|measurable_bounded_above?| CONST-DECL "bool" |measure_space| NIL)
    (|measurable_bounded_above| NONEMPTY-TYPE-EQ-DECL NIL |measure_space| NIL)
    (T FORMAL-TYPE-DECL NIL |measure_space| NIL) NIL
    (|measurable_bounded_below| NONEMPTY-TYPE-EQ-DECL NIL |measure_space| NIL)
    (|measurable_bounded_below?| CONST-DECL "bool" |measure_space| NIL)
    (|inf_measurable| FORMULA-DECL NIL |measure_space| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|inf| CONST-DECL "real" |pointwise_convergence| NIL)
    (|pointwise_bounded_below| NONEMPTY-TYPE-EQ-DECL NIL
     |pointwise_convergence| NIL)
    (|pointwise_bounded_below?| CONST-DECL "bool" |pointwise_convergence| NIL)
    (|opp_measurable| JUDGEMENT-TCC NIL |measure_space_def| NIL)
    (|bounded_below?| CONST-DECL "bool" |real_fun_preds| |reals|)
    (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    NIL (|bounded_above?| CONST-DECL "bool" |real_fun_preds| |reals|)
    (|pointwise?| CONST-DECL "bool" |pointwise_convergence| NIL) NIL
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL))
   SHOSTAK))
 (|pointwise_measurable| 0
  (|pointwise_measurable-1| |nil| 3390466718
   ("" (SKOSIMP)
    (("" (LEMMA "pointwise_convergent_is_pointwise_bounded" ("x" "u!1"))
      (("1" (REWRITE "pointwise_bounded_def")
        (("1" (FLATTEN)
          (("1" (LEMMA "inf_pointwise_convergence_upto" ("p" "u!1" "f" "f!1"))
            (("1" (ASSERT)
              (("1" (LEMMA "limsup_pointwise_convergence" ("b" "u!1"))
                (("1" (EXPAND "pointwise_converges_upto?")
                  (("1" (FLATTEN)
                    (("1" (LEMMA "sup_measurable" ("u" "inf(u!1)" "n" "0"))
                      (("1" (CASE-REPLACE "sup(inf(u!1))(0)=f!1")
                        (("1" (APPLY-EXTENSIONALITY 1 :HIDE? T)
                          (("1" (EXPAND "pointwise_convergence?")
                            (("1" (INST - "x!1")
                              (("1" (INST - "x!1")
                                (("1"
                                  (LEMMA "hausdorff_convergence.unique_limit"
                                   ("u" "LAMBDA n: inf(u!1)(n)(x!1)" "l1"
                                    "limsup(u!1)(x!1)" "l2" "f!1(x!1)"))
                                  (("1" (ASSERT)
                                    (("1" (EXPAND "limsup")
                                      (("1" (EXPAND "inf" 1)
                                        (("1" (ASSERT)
                                          (("1" (EXPAND "sup" 1)
                                            (("1" (EXPAND "fullset")
                                              (("1"
                                                (CASE-REPLACE "image[nat, real]
              (LAMBDA (m_1: nat):
                 inf(image[nat, real]
                         (LAMBDA m: u!1(m)(x!1), {m | m >= m_1})),
               {m_1: nat | TRUE})=image[nat, real](LAMBDA m: inf(u!1)(m)(x!1), {x: nat | TRUE})")
                                                (("1" (HIDE 2 3)
                                                  (("1"
                                                    (APPLY-EXTENSIONALITY 1
                                                     :HIDE? T)
                                                    (("1" (EXPAND "image" 1 2)
                                                      (("1" (EXPAND "inf" 1)
                                                        (("1"
                                                          (EXPAND "image" 1 3)
                                                          (("1" (PROPAX) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL)
                                                     ("2" (SKOSIMP)
                                                      (("2" (SPLIT)
                                                        (("1" (HIDE-ALL-BUT 1)
                                                          (("1"
                                                            (EXPAND "image")
                                                            (("1"
                                                              (EXPAND
                                                               "nonempty?")
                                                              (("1"
                                                                (EXPAND
                                                                 "empty?")
                                                                (("1"
                                                                  (EXPAND
                                                                   "member")
                                                                  (("1"
                                                                    (INST -
                                                                     "u!1(m!1)(x!1)")
                                                                    (("1"
                                                                      (INST +
                                                                       "m!1")
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL)
                                                         ("2"
                                                          (EXPAND
                                                           "pointwise_bounded_below?")
                                                          (("2"
                                                            (EXPAND
                                                             "pointwise?")
                                                            (("2"
                                                              (INST -7 "x!1")
                                                              (("2"
                                                                (HIDE-ALL-BUT
                                                                 (-7 1))
                                                                (("2"
                                                                  (EXPAND
                                                                   "bounded_below?")
                                                                  (("2"
                                                                    (EXPAND
                                                                     "image")
                                                                    (("2"
                                                                      (EXPAND
                                                                       "below_bounded")
                                                                      (("2"
                                                                        (SKOSIMP)
                                                                        (("2"
                                                                          (EXPAND
                                                                           "lower_bound")
                                                                          (("2"
                                                                            (INST
                                                                             +
                                                                             "a!1")
                                                                            (("2"
                                                                              (SKOSIMP)
                                                                              (("2"
                                                                                (TYPEPRED
                                                                                 "z!1")
                                                                                (("2"
                                                                                  (SKOSIMP)
                                                                                  (("2"
                                                                                    (INST
                                                                                     -
                                                                                     "x!2")
                                                                                    (("2"
                                                                                      (ASSERT)
                                                                                      NIL
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (SKOSIMP)
                                                  (("2" (SPLIT)
                                                    (("1" (HIDE-ALL-BUT 1)
                                                      (("1" (EXPAND "image")
                                                        (("1"
                                                          (EXPAND "nonempty?")
                                                          (("1"
                                                            (EXPAND "empty?")
                                                            (("1"
                                                              (EXPAND "member")
                                                              (("1"
                                                                (INST -
                                                                 "u!1(m!1)(x!1)")
                                                                (("1"
                                                                  (INST +
                                                                   "m!1")
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL)
                                                     ("2" (HIDE-ALL-BUT (-7 1))
                                                      (("2"
                                                        (EXPAND
                                                         "pointwise_bounded_below?")
                                                        (("2"
                                                          (EXPAND "pointwise?")
                                                          (("2" (INST - "x!1")
                                                            (("2"
                                                              (EXPAND
                                                               "bounded_below?")
                                                              (("2"
                                                                (EXPAND
                                                                 "image")
                                                                (("2"
                                                                  (EXPAND
                                                                   "below_bounded")
                                                                  (("2"
                                                                    (SKOSIMP)
                                                                    (("2"
                                                                      (EXPAND
                                                                       "lower_bound")
                                                                      (("2"
                                                                        (INST +
                                                                         "a!1")
                                                                        (("2"
                                                                          (SKOSIMP)
                                                                          (("2"
                                                                            (TYPEPRED
                                                                             "z!1")
                                                                            (("2"
                                                                              (SKOSIMP)
                                                                              (("2"
                                                                                (INST
                                                                                 -
                                                                                 "x!2")
                                                                                (("2"
                                                                                  (ASSERT)
                                                                                  NIL
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (HIDE 2)
                        (("2" (SPLIT)
                          (("1" (SKOSIMP)
                            (("1"
                              (LEMMA "inf_measurable" ("u" "u!1" "n" "x1!1"))
                              (("1" (PROPAX) NIL NIL)
                               ("2" (HIDE-ALL-BUT (-5 1))
                                (("2" (EXPAND "measurable_bounded_below?")
                                  (("2" (PROPAX) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (EXPAND "measurable_bounded_above?")
                            (("2" (EXPAND "pointwise_bounded_above?")
                              (("2" (EXPAND "pointwise?")
                                (("2" (SKOSIMP)
                                  (("2" (INST - "x!1")
                                    (("2" (EXPAND "bounded_above?")
                                      (("2" (SKOSIMP)
                                        (("2" (INST + "a!1")
                                          (("2" (SKOLEM + ("n!1"))
                                            (("2" (EXPAND "inf" 1)
                                              (("2"
                                                (TYPEPRED
                                                 "inf(image[nat, real](LAMBDA m: u!1(m)(x!1), {m | m >= n!1}))")
                                                (("2"
                                                  (EXPAND
                                                   "greatest_lower_bound")
                                                  (("2" (FLATTEN)
                                                    (("2"
                                                      (EXPAND "lower_bound")
                                                      (("2"
                                                        (INST -
                                                         "u!1(n!1)(x!1)")
                                                        (("1" (INST -6 "n!1")
                                                          (("1" (ASSERT) NIL
                                                            NIL))
                                                          NIL)
                                                         ("2" (EXPAND "image")
                                                          (("2" (INST + "n!1")
                                                            NIL NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (REWRITE "pointwise_bounded_def") NIL NIL))
                NIL))
              NIL)
             ("2" (PROPAX) NIL NIL))
            NIL))
          NIL))
        NIL)
       ("2" (EXPAND "pointwise_convergent?") (("2" (INST + "f!1") NIL NIL))
        NIL))
      NIL))
    NIL)
   ((T FORMAL-TYPE-DECL NIL |measure_space| NIL)
    (|measurable_function| NONEMPTY-TYPE-EQ-DECL NIL |measure_space_def| NIL)
    (|measurable_function?| CONST-DECL "bool" |measure_space_def| NIL)
    (S FORMAL-CONST-DECL "sigma_algebra" |measure_space| NIL)
    (|sigma_algebra| NONEMPTY-TYPE-EQ-DECL NIL |subset_algebra_def| NIL)
    (|sigma_algebra?| CONST-DECL "bool" |subset_algebra_def| NIL)
    (|setofsets| TYPE-EQ-DECL NIL |sets| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|pointwise_convergent| NONEMPTY-TYPE-EQ-DECL NIL |pointwise_convergence|
     NIL)
    (|pointwise_convergent?| CONST-DECL "bool" |pointwise_convergence| NIL)
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|pointwise_convergent_is_pointwise_bounded| JUDGEMENT-TCC NIL
     |pointwise_convergence| NIL)
    (|pointwise_converges_upto?| CONST-DECL "bool" |pointwise_convergence| NIL)
    (|sup_measurable| FORMULA-DECL NIL |measure_space| NIL)
    (|measurable_bounded_above?| CONST-DECL "bool" |measure_space| NIL)
    (|measurable_bounded_above| NONEMPTY-TYPE-EQ-DECL NIL |measure_space| NIL)
    (|inf| CONST-DECL "real" |pointwise_convergence| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|unique_limit| FORMULA-DECL NIL |hausdorff_convergence| |topology|)
    (|limsup| CONST-DECL "real" |pointwise_convergence| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|metric_induced_topology| CONST-DECL "setofsets[T]" |metric_space_def|
     |metric_space|)
    (|fullset| CONST-DECL "set" |sets| NIL)
    (|bounded_below?| CONST-DECL "bool" |real_fun_preds| |reals|)
    (|lower_bound| CONST-DECL "bool" |bound_defs| |reals|)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|pointwise?| CONST-DECL "bool" |pointwise_convergence| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL) NIL NIL
    (|set| TYPE-EQ-DECL NIL |sets| NIL) NIL
    (|inf_set| TYPE-EQ-DECL NIL |bounded_reals| |reals|)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|greatest_lower_bound| CONST-DECL "bool" |bound_defs| |reals|)
    (<= CONST-DECL "bool" |reals| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (|below_bounded| CONST-DECL "bool" |bounded_reals| |reals|)
    (|inf| CONST-DECL "{x | greatest_lower_bound(<=)(x, Sl)}" |bounded_reals|
     |reals|)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|pointwise_convergence?| CONST-DECL "bool" |pointwise_convergence| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|pointwise_bounded_above?| CONST-DECL "bool" |pointwise_convergence| NIL)
    (|pointwise_bounded_above| NONEMPTY-TYPE-EQ-DECL NIL
     |pointwise_convergence| NIL)
    (|sup| CONST-DECL "real" |pointwise_convergence| NIL)
    (|inf_measurable| FORMULA-DECL NIL |measure_space| NIL)
    (|measurable_bounded_below?| CONST-DECL "bool" |measure_space| NIL)
    (|measurable_bounded_below| NONEMPTY-TYPE-EQ-DECL NIL |measure_space| NIL)
    (|bounded_above?| CONST-DECL "bool" |real_fun_preds| |reals|) NIL NIL
    (|pointwise_bounded| NONEMPTY-TYPE-EQ-DECL NIL |pointwise_convergence| NIL)
    (|pointwise_bounded?| CONST-DECL "bool" |pointwise_convergence| NIL)
    (|limsup_pointwise_convergence| FORMULA-DECL NIL |pointwise_convergence|
     NIL)
    (|pointwise_bounded_below| NONEMPTY-TYPE-EQ-DECL NIL
     |pointwise_convergence| NIL)
    (|pointwise_bounded_below?| CONST-DECL "bool" |pointwise_convergence| NIL)
    (|inf_pointwise_convergence_upto| FORMULA-DECL NIL |pointwise_convergence|
     NIL)
    (|pointwise_bounded_def| FORMULA-DECL NIL |pointwise_convergence| NIL))
   SHOSTAK))
 (|simple_TCC1| 0
  (|simple_TCC1-2| "" 3789903631
   ("" (EXPAND "simple?")
    (("" (LEMMA "const_measurable" ("c" "0"))
      (("" (ASSERT)
        (("" (HIDE -1)
          (("" (EXPAND "fullset")
            (("" (EXPAND "image")
              (("" (CASE "exists x: true")
                (("1"
                  (LEMMA "extensionality"
                   ("a"
                    "{y: real | EXISTS (x_1: ({x: T | TRUE})): y = 0}::setof[real]"
                    "b" "singleton(0)::setof[real]"))
                  (("1" (SPLIT -1)
                    (("1" (ASSERT) NIL NIL)
                     ("2" (SKOLEM - ("TT"))
                      (("2" (SKOSIMP)
                        (("2" (EXPAND "singleton")
                          (("2" (EXPAND "member")
                            (("2" (CASE-REPLACE "x!1=0")
                              (("1" (ASSERT) (("1" (INST + "TT") NIL NIL)) NIL)
                               ("2" (ASSERT) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2"
                  (LEMMA "extensionality"
                   ("a" "{y: real | EXISTS (x_1: ({x: T | TRUE})): y = 0}" "b"
                    "emptyset[real]"))
                  (("2" (SPLIT -1)
                    (("1" (ASSERT) NIL NIL)
                     ("2" (SKOSIMP*)
                      (("2" (EXPAND "emptyset")
                        (("2" (EXPAND "member")
                          (("2" (SKOSIMP) (("2" (INST + "x!2") NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|subset_algebra_fullset| NAME-JUDGEMENT "(S)" |measure_space| NIL)
    (|measurable_fullset| NAME-JUDGEMENT "measurable_set[T, S]" |measure_space|
     NIL)
    (|simple?| CONST-DECL "bool" |measure_space| NIL)
    (|fullset| CONST-DECL "set" |sets| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (T FORMAL-TYPE-DECL NIL |measure_space| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|singleton| CONST-DECL "(singleton?)" |sets| NIL)
    (|singleton?| CONST-DECL "bool" |sets| NIL)
    (|even_uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|even?| CONST-DECL "bool" |integers| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|extensionality| FORMULA-DECL NIL |sets_lemmas| NIL)
    (|singleton_is_compact| APPLICATION-JUDGEMENT "compact" |measure_space_def|
     NIL)
    (|singleton_is_closed| APPLICATION-JUDGEMENT
     "closed[real, (metric_induced_topology)]" |measure_space| NIL)
    (|nonempty_singleton_finite| APPLICATION-JUDGEMENT
     "non_empty_finite_set[real]" |integral_def| |analysis|)
    (|nonempty_singleton_finite| APPLICATION-JUDGEMENT
     "non_empty_finite_set[nat]" |countability| |sets_aux|)
    (|nonempty_singleton_finite| APPLICATION-JUDGEMENT
     "non_empty_finite_set[T]" |step_fun_props| |analysis|)
    (|subset_algebra_emptyset| NAME-JUDGEMENT "(S)" |measure_space_def| NIL)
    (|emptyset_is_clopen| NAME-JUDGEMENT "clopen" |real_topology|
     |metric_space|)
    (|emptyset_is_compact| NAME-JUDGEMENT "compact" |real_topology|
     |metric_space|)
    (|finite_emptyset| NAME-JUDGEMENT "finite_set" |integral_def| |analysis|)
    (|finite_emptyset| NAME-JUDGEMENT "finite_set" |step_fun_props| |analysis|)
    (|finite_emptyset| NAME-JUDGEMENT "finite_set" |countable_setofsets|
     |sets_aux|)
    (|finite_emptyset| NAME-JUDGEMENT "finite_set" |countable_props|
     |sets_aux|)
    (|finite_emptyset| NAME-JUDGEMENT "finite_set" |finite_sets| NIL)
    (|emptyset| CONST-DECL "set" |sets| NIL)
    (|image| CONST-DECL "set[R]" |function_image| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|const_measurable| FORMULA-DECL NIL |measure_space| NIL))
   SHOSTAK (|simple| SUBTYPE "(LAMBDA x: 0)" "simple"))
  (|simple_TCC1-1| |nil| 3390205059
   ("" (EXPAND "simple?")
    (("" (LEMMA "const_measurable" ("c" "0"))
      (("" (EXPAND "const_fun")
        (("" (ASSERT)
          (("" (HIDE -1)
            (("" (EXPAND "fullset")
              (("" (EXPAND "image")
                (("" (CASE "exists x: true")
                  (("1"
                    (LEMMA "extensionality"
                     ("a" "{y: real | EXISTS (x_1: ({x: T | TRUE})): y = 0}"
                      "b" "singleton(0)"))
                    (("1" (SPLIT -1)
                      (("1" (ASSERT) NIL NIL)
                       ("2" (SKOLEM - ("TT"))
                        (("2" (SKOSIMP)
                          (("2" (EXPAND "singleton")
                            (("2" (EXPAND "member")
                              (("2" (CASE-REPLACE "x!1=0")
                                (("1" (ASSERT) (("1" (INST + "TT") NIL NIL))
                                  NIL)
                                 ("2" (ASSERT) NIL NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2"
                    (LEMMA "extensionality"
                     ("a" "{y: real | EXISTS (x_1: ({x: T | TRUE})): y = 0}"
                      "b" "emptyset[real]"))
                    (("2" (SPLIT -1)
                      (("1" (ASSERT) NIL NIL)
                       ("2" (SKOSIMP*)
                        (("2" (EXPAND "emptyset")
                          (("2" (EXPAND "member")
                            (("2" (SKOSIMP) (("2" (INST + "x!2") NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|emptyset| CONST-DECL "set" |sets| NIL)
    (|finite_emptyset| NAME-JUDGEMENT "finite_set" |finite_sets| NIL)
    (|singleton| CONST-DECL "(singleton?)" |sets| NIL)
    (|singleton?| CONST-DECL "bool" |sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL)
    (|fullset| CONST-DECL "set" |sets| NIL))
   NIL (|simple| SUBTYPE "(LAMBDA x: 0)" "simple")))
 (|simple_is_measurable| 0
  (|simple_is_measurable-1| |nil| 3913444607 ("" (JUDGEMENT-TCC) NIL NIL)
   ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|simple?| CONST-DECL "bool" |measure_space| NIL)
    (|simple| NONEMPTY-TYPE-EQ-DECL NIL |measure_space| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|metric_induced_topology| CONST-DECL "setofsets[T]" |metric_space_def|
     |metric_space|)
    (|borel?| CONST-DECL "sigma_algebra" |borel| NIL)
    (|borel| NONEMPTY-TYPE-EQ-DECL NIL |borel| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|Intersection| CONST-DECL "set" |sets| NIL)
    (|generated_sigma_algebra| CONST-DECL "sigma_algebra" |subset_algebra_def|
     NIL)
    (|open?| CONST-DECL "bool" |topology| |topology|)
    (|metric_open?| CONST-DECL "bool" |metric_space_def| |metric_space|)
    (|subset?| CONST-DECL "bool" |sets| NIL)
    (|ball| CONST-DECL "set[T]" |metric_space_def| |metric_space|)
    (|sigma_algebra_union?| CONST-DECL "bool" |subset_algebra_def| NIL)
    (|is_countable| CONST-DECL "bool" |countability| |sets_aux|)
    (|subset_algebra_complement?| CONST-DECL "bool" |subset_algebra_def| NIL)
    (|subset_algebra_empty?| CONST-DECL "bool" |subset_algebra_def| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|Intersection_surjective| NAME-JUDGEMENT
     "(surjective?[setofsets[T], set[T]])" |sets_lemmas| NIL)
    (|finite_emptyset| NAME-JUDGEMENT "finite_set" |finite_sets| NIL) NIL NIL
    NIL NIL NIL NIL NIL NIL NIL
    (S FORMAL-CONST-DECL "sigma_algebra" |measure_space| NIL)
    (|sigma_algebra| NONEMPTY-TYPE-EQ-DECL NIL |subset_algebra_def| NIL)
    (|sigma_algebra?| CONST-DECL "bool" |subset_algebra_def| NIL)
    (|setofsets| TYPE-EQ-DECL NIL |sets| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (T FORMAL-TYPE-DECL NIL |measure_space| NIL)
    (|measurable_set?| CONST-DECL "bool" |measure_space_def| NIL)
    (|measurable_function?| CONST-DECL "bool" |measure_space_def| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL))
   NIL
   (|simple_is_measurable_| SUBTYPE "measure_space.simple"
    "measure_space_def[measure_space.T, measure_space.S].measurable_function")))
 (|simple_const| 0
  (|simple_const-2| "" 3789903632
   ("" (EXPAND "simple?")
    (("" (SKOSIMP)
      (("" (EXPAND "fullset")
        (("" (EXPAND "image")
          (("" (CASE "exists x: true")
            (("1"
              (LEMMA "extensionality"
               ("a" "{y: real | EXISTS (x_1: ({x: T | TRUE})): y = c!1}" "b"
                "singleton[real](c!1)"))
              (("1" (SPLIT -1)
                (("1" (REPLACE -1)
                  (("1" (ASSERT)
                    (("1" (LEMMA "const_measurable" ("c" "c!1"))
                      (("1" (PROPAX) NIL NIL)) NIL))
                    NIL))
                  NIL)
                 ("2" (EXPAND "singleton")
                  (("2" (EXPAND "member")
                    (("2" (SKOSIMP)
                      (("2" (CASE-REPLACE "x!1 = c!1")
                        (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2"
              (LEMMA "extensionality"
               ("a" "{y: real | EXISTS (x_1: ({x: T | TRUE})): y = c!1}" "b"
                "emptyset[real]"))
              (("2" (SPLIT -1)
                (("1" (REPLACE -1)
                  (("1" (ASSERT)
                    (("1" (LEMMA "const_measurable" ("c" "c!1"))
                      (("1" (PROPAX) NIL NIL)) NIL))
                    NIL))
                  NIL)
                 ("2" (SKOSIMP*)
                  (("2" (EXPAND "emptyset")
                    (("2" (EXPAND "member")
                      (("2" (SKOLEM - ("TT")) (("2" (INST + "TT") NIL NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   (NIL (|emptyset| CONST-DECL "set" |sets| NIL)
    (|finite_emptyset| NAME-JUDGEMENT "finite_set" |finite_sets| NIL) NIL NIL
    NIL NIL NIL NIL NIL (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|singleton| CONST-DECL "(singleton?)" |sets| NIL)
    (|singleton?| CONST-DECL "bool" |sets| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|extensionality| FORMULA-DECL NIL |sets_lemmas| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|const_measurable| FORMULA-DECL NIL |measure_space| NIL) NIL NIL NIL
    (T FORMAL-TYPE-DECL NIL |measure_space| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|fullset| CONST-DECL "set" |sets| NIL)
    (|simple?| CONST-DECL "bool" |measure_space| NIL))
   SHOSTAK)
  (|simple_const-1| |nil| 3390271219
   ("" (EXPAND "simple?")
    (("" (SKOSIMP)
      (("" (EXPAND "fullset")
        (("" (EXPAND "const_fun")
          (("" (EXPAND "image")
            (("" (CASE "exists x: true")
              (("1"
                (LEMMA "extensionality"
                 ("a" "{y: real | EXISTS (x_1: ({x: T | TRUE})): y = c!1}" "b"
                  "singleton[real](c!1)"))
                (("1" (SPLIT -1)
                  (("1" (REPLACE -1)
                    (("1" (ASSERT)
                      (("1" (LEMMA "const_measurable" ("c" "c!1"))
                        (("1" (EXPAND "const_fun") (("1" (PROPAX) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (EXPAND "singleton")
                    (("2" (EXPAND "member")
                      (("2" (SKOSIMP)
                        (("2" (CASE-REPLACE "x!1 = c!1")
                          (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2"
                (LEMMA "extensionality"
                 ("a" "{y: real | EXISTS (x_1: ({x: T | TRUE})): y = c!1}" "b"
                  "emptyset[real]"))
                (("2" (SPLIT -1)
                  (("1" (REPLACE -1)
                    (("1" (ASSERT)
                      (("1" (LEMMA "const_measurable" ("c" "c!1"))
                        (("1" (EXPAND "const_fun") (("1" (PROPAX) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (SKOSIMP*)
                    (("2" (EXPAND "emptyset")
                      (("2" (EXPAND "member")
                        (("2" (SKOLEM - ("TT")) (("2" (INST + "TT") NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|emptyset| CONST-DECL "set" |sets| NIL)
    (|finite_emptyset| NAME-JUDGEMENT "finite_set" |finite_sets| NIL)
    (|singleton| CONST-DECL "(singleton?)" |sets| NIL)
    (|singleton?| CONST-DECL "bool" |sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL)
    (|fullset| CONST-DECL "set" |sets| NIL))
   NIL))
 (|nn_simple_TCC1| 0
  (|nn_simple_TCC1-2| "" 3789903632
   ("" (EXPAND "nn_simple?")
    (("" (LEMMA "simple_const" ("c" "0")) (("" (PROPAX) NIL NIL)) NIL)) NIL)
   ((|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|simple_const| FORMULA-DECL NIL |measure_space| NIL)
    (|nn_simple?| CONST-DECL "bool" |measure_space| NIL))
   SHOSTAK (|nn_simple| SUBTYPE "(LAMBDA x: 0)" "nn_simple"))
  (|nn_simple_TCC1-1| |nil| 3392524429
   ("" (EXPAND "nn_simple?")
    (("" (LEMMA "simple_const" ("c" "0"))
      (("" (EXPAND "const_fun") (("" (PROPAX) NIL NIL)) NIL)) NIL))
    NIL)
   NIL NIL (|nn_simple| SUBTYPE "(LAMBDA x: 0)" "nn_simple")))
 (|nn_simple_is_simple| 0
  (|nn_simple_is_simple-1| |nil| 3913444607 ("" (JUDGEMENT-TCC) NIL NIL)
   ((|nn_simple| NONEMPTY-TYPE-EQ-DECL NIL |measure_space| NIL)
    (|nn_simple?| CONST-DECL "bool" |measure_space| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) NIL NIL
    (S FORMAL-CONST-DECL "sigma_algebra" |measure_space| NIL)
    (|sigma_algebra| NONEMPTY-TYPE-EQ-DECL NIL |subset_algebra_def| NIL)
    (|sigma_algebra?| CONST-DECL "bool" |subset_algebra_def| NIL)
    (|setofsets| TYPE-EQ-DECL NIL |sets| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (T FORMAL-TYPE-DECL NIL |measure_space| NIL)
    (|measurable_set?| CONST-DECL "bool" |measure_space_def| NIL)
    (|measurable_function?| CONST-DECL "bool" |measure_space_def| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|simple?| CONST-DECL "bool" |measure_space| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL))
   NIL
   (|nn_simple_is_simple_| SUBTYPE "measure_space.nn_simple"
    "measure_space.simple")))
 (|simple_sq| 0
  (|simple_sq-1| |nil| 3390272484
   ("" (SKOSIMP)
    (("" (TYPEPRED "h!1")
      (("" (EXPAND "simple?")
        (("" (FLATTEN)
          (("" (EXPAND "sq")
            (("" (LEMMA "prod_measurable" ("g1" "h!1" "g2" "h!1"))
              (("" (EXPAND "*")
                (("" (EXPAND "sq")
                  (("" (ASSERT)
                    (("" (HIDE -1 -2)
                      ((""
                        (LEMMA "finite_image[real,real]"
                         ("f" "lambda y: y*y" "S" "image(h!1, fullset[T])"))
                        ((""
                          (LEMMA "extensionality"
                           ("a"
                            "image[real, real](LAMBDA y: y * y, image[T,real](h!1, fullset[T]))"
                            "b"
                            "image[T,real](LAMBDA (x: T): h!1(x) * h!1(x), fullset[T])"))
                          (("" (SPLIT -1)
                            (("1" (ASSERT) NIL NIL)
                             ("2" (HIDE-ALL-BUT 1)
                              (("2" (EXPAND "fullset")
                                (("2" (EXPAND "image")
                                  (("2" (EXPAND "member")
                                    (("2" (SKOSIMP*)
                                      (("2" (SPLIT)
                                        (("1" (SKOSIMP*)
                                          (("1" (TYPEPRED "x!2")
                                            (("1" (SKOSIMP)
                                              (("1" (INST + "x!3")
                                                (("1" (ASSERT) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (SKOSIMP*)
                                          (("2" (INST + "h!1(x!2)")
                                            (("2" (INST + "x!2") NIL NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|simple| NONEMPTY-TYPE-EQ-DECL NIL |measure_space| NIL)
    (|simple?| CONST-DECL "bool" |measure_space| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (T FORMAL-TYPE-DECL NIL |measure_space| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|measurable_function| NONEMPTY-TYPE-EQ-DECL NIL |measure_space_def| NIL)
    (|measurable_function?| CONST-DECL "bool" |measure_space_def| NIL)
    (S FORMAL-CONST-DECL "sigma_algebra" |measure_space| NIL)
    (|sigma_algebra| NONEMPTY-TYPE-EQ-DECL NIL |subset_algebra_def| NIL)
    (|sigma_algebra?| CONST-DECL "bool" |subset_algebra_def| NIL)
    (|setofsets| TYPE-EQ-DECL NIL |sets| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|prod_measurable| JUDGEMENT-TCC NIL |measure_space| NIL)
    (|sq| CONST-DECL "nonneg_real" |sq| |reals|)
    (|extensionality| FORMULA-DECL NIL |sets_lemmas| NIL) NIL NIL
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|fullset| CONST-DECL "set" |sets| NIL) NIL
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|finite_image| JUDGEMENT-TCC NIL |function_image_aux| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) NIL
    NIL NIL (|sq| CONST-DECL "[T -> nnreal]" |real_fun_ops_aux| |reals|)
    (|sq_measurable| APPLICATION-JUDGEMENT "measurable_function[T, S]"
     |measure_space| NIL))
   NIL
   (|simple_sq| SUBTYPE "real_fun_ops_aux[measure_space.T].sq(measure_space.h)"
    "simple")))
 (|simple_add| 0
  (|simple_add-1| |nil| 3390205059
   ("" (SKOSIMP)
    (("" (TYPEPRED "h1!1")
      (("" (TYPEPRED "h2!1")
        (("" (EXPAND "simple?")
          (("" (FLATTEN)
            (("" (HIDE -1 -3)
              ((""
                (LEMMA
                 "is_finite_cross[(fullset[(image(h1!1, fullset[T]))]),(fullset[(image(h2!1, fullset[T]))])]")
                (("" (SPLIT -1)
                  (("1"
                    (LEMMA "finite_image[[real,real],real]"
                     ("f" "lambda (x,y:real): x+y" "S"
                      "fullset[[((fullset[(image(h1!1, fullset[T]))])),
            ((fullset[(image(h2!1, fullset[T]))]))]]"))
                    (("1"
                      (CASE
                          "subset?(image((+[T])(h1!1, h2!1), fullset[T]),image[[real, real], real](LAMBDA (x, y: real): x + y,
                extend
                    [[real, real],
                     [((fullset[(image[T, real](h1!1, fullset[T]))])),
                      ((fullset[(image[T, real](h2!1, fullset[T]))]))],
                     bool, FALSE]
                    (fullset
                         [[((fullset[(image(h1!1, fullset[T]))])),
                           ((fullset[(image(h2!1, fullset[T]))]))]])))")
                      (("1"
                        (LEMMA "finite_subset[real]"
                         ("s" "image((+[T])(h1!1, h2!1), fullset[T])" "A"
                          "image[[real, real], real]
                  (LAMBDA (x, y: real): x + y,
                   extend
                       [[real, real],
                        [((fullset[(image[T, real](h1!1, fullset[T]))])),
                         ((fullset[(image[T, real](h2!1, fullset[T]))]))],
                        bool, FALSE]
                       (fullset
                            [[((fullset[(image(h1!1, fullset[T]))])),
                              ((fullset[(image(h2!1, fullset[T]))]))]]))"))
                        (("1" (ASSERT) NIL NIL) ("2" (PROPAX) NIL NIL)) NIL)
                       ("2" (HIDE-ALL-BUT 1)
                        (("2" (GRIND)
                          (("2" (INST + "(h1!1(x!2),h2!1(x!2))")
                            (("2" (PROP)
                              (("1" (INST + "x!2") NIL NIL)
                               ("2" (INST + "x!2") NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (HIDE -2 -3 2)
                      (("2" (EXPAND "extend")
                        (("2" (EXPAND "is_finite")
                          (("2" (EXPAND "is_finite_type")
                            (("2" (SKOSIMP*)
                              (("2" (INST + "N!1" "g!1")
                                (("1" (EXPAND "restrict")
                                  (("1" (EXPAND "injective?")
                                    (("1" (SKOSIMP*)
                                      (("1" (INST - "x1!1" "x2!1")
                                        (("1" (ASSERT) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (SKOSIMP)
                                  (("2" (TYPEPRED "x!1")
                                    (("2" (ASSERT) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (HIDE-ALL-BUT (-2 1))
                    (("2" (EXPAND "is_finite_type")
                      (("2" (EXPAND "is_finite")
                        (("2" (SKOSIMP)
                          (("2" (INST + "N!1" "f!1")
                            (("2" (EXPAND "restrict")
                              (("2" (EXPAND "injective?")
                                (("2" (SKOSIMP*)
                                  (("2" (INST - "x1!1" "x2!1")
                                    (("2" (ASSERT) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("3" (HIDE-ALL-BUT (-1 1))
                    (("3" (EXPAND "is_finite")
                      (("3" (SKOSIMP)
                        (("3" (EXPAND "is_finite_type")
                          (("3" (INST + "N!1" "f!1")
                            (("3" (EXPAND "restrict")
                              (("3" (EXPAND "injective?")
                                (("3" (SKOSIMP*)
                                  (("3" (INST - "x1!1" "x2!1")
                                    (("3" (ASSERT) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|simple| NONEMPTY-TYPE-EQ-DECL NIL |measure_space| NIL)
    (|simple?| CONST-DECL "bool" |measure_space| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (T FORMAL-TYPE-DECL NIL |measure_space| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) NIL
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|is_finite_type| CONST-DECL "bool" |finite_sets| NIL)
    (|subset?| CONST-DECL "bool" |sets| NIL) NIL NIL NIL
    (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])"
     |sets_lemmas| NIL)
    (|finite_subset| FORMULA-DECL NIL |finite_sets| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL) NIL NIL NIL
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|finite_image| JUDGEMENT-TCC NIL |function_image_aux| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (FALSE CONST-DECL "bool" |booleans| NIL)
    (|extend| CONST-DECL "R" |extend| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|is_finite_cross| FORMULA-DECL NIL |finite_cross| |finite_sets|)
    (|set| TYPE-EQ-DECL NIL |sets| NIL) NIL
    (|fullset| CONST-DECL "set" |sets| NIL))
   NIL
   (|simple_add| SUBTYPE
    "(real_fun_ops[measure_space.T].+)(measure_space.h1, measure_space.h2)"
    "simple")))
 (|simple_scal| 0
  (|simple_scal-1| |nil| 3390205059
   ("" (SKOSIMP)
    (("" (TYPEPRED "h!1")
      (("" (EXPAND "simple?")
        (("" (FLATTEN)
          (("" (HIDE -1)
            ((""
              (LEMMA "finite_image[real,real]"
               ("f" "lambda y: c!1*y" "S" "image(h!1, fullset[T])"))
              (("1"
                (LEMMA "extensionality[real]"
                 ("a"
                  "image[real, real](LAMBDA y: c!1 * y, image[T,real](h!1, fullset[T]))"
                  "b" "image[T,real](*[T](c!1, h!1), fullset[T])"))
                (("1" (SPLIT -1)
                  (("1" (ASSERT) NIL NIL)
                   ("2" (HIDE-ALL-BUT 1)
                    (("2" (EXPAND "fullset")
                      (("2" (EXPAND "image")
                        (("2" (EXPAND "member")
                          (("2" (SKOSIMP)
                            (("2" (SPLIT)
                              (("1" (SKOSIMP*)
                                (("1" (TYPEPRED "x!2")
                                  (("1" (SKOSIMP)
                                    (("1" (INST + "x!3")
                                      (("1" (EXPAND "*")
                                        (("1" (ASSERT) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (SKOSIMP*)
                                (("2" (EXPAND "*")
                                  (("2" (INST + "h!1(x!2)")
                                    (("2" (INST + "x!2") NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (PROPAX) NIL NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|simple| NONEMPTY-TYPE-EQ-DECL NIL |measure_space| NIL)
    (|simple?| CONST-DECL "bool" |measure_space| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (T FORMAL-TYPE-DECL NIL |measure_space| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|fullset| CONST-DECL "set" |sets| NIL) NIL
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|finite_image| JUDGEMENT-TCC NIL |function_image_aux| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) NIL
    NIL (|member| CONST-DECL "bool" |sets| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) NIL NIL NIL
    (|extensionality| FORMULA-DECL NIL |sets_lemmas| NIL) NIL)
   NIL
   (|simple_scal| SUBTYPE
    "real_fun_ops[measure_space.T].*(measure_space.c, measure_space.h)"
    "simple")))
 (|simple_neg| 0
  (|simple_neg-1| |nil| 3390205059
   ("" (SKOSIMP)
    (("" (TYPEPRED "h!1")
      (("" (EXPAND "simple?")
        (("" (FLATTEN)
          (("" (HIDE -1)
            (("" (EXPAND "fullset")
              (("" (EXPAND "image")
                (("" (REWRITE "is_finite_surj" -1 :DIR RL)
                  (("" (REWRITE "is_finite_surj" 1 :DIR RL)
                    (("" (SKOSIMP*)
                      (("" (INST + "N!1" "lambda (n:below[N!1]): -f!1(n)")
                        (("1" (EXPAND "surjective?")
                          (("1" (SKOSIMP)
                            (("1" (INST - "-y!1")
                              (("1" (SKOSIMP)
                                (("1" (INST + "x!1") (("1" (ASSERT) NIL NIL))
                                  NIL))
                                NIL)
                               ("2" (TYPEPRED "y!1")
                                (("2" (SKOSIMP)
                                  (("2" (EXPAND "-")
                                    (("2" (INST + "x!1")
                                      (("2" (ASSERT) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (SKOSIMP)
                          (("2" (TYPEPRED "f!1(n!1)")
                            (("2" (SKOSIMP)
                              (("2" (INST + "x!1")
                                (("2" (EXPAND "-") (("2" (ASSERT) NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|simple| NONEMPTY-TYPE-EQ-DECL NIL |measure_space| NIL)
    (|simple?| CONST-DECL "bool" |measure_space| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (T FORMAL-TYPE-DECL NIL |measure_space| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|fullset| CONST-DECL "set" |sets| NIL)
    (|is_finite_surj| FORMULA-DECL NIL |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|surjective?| CONST-DECL "bool" |functions| NIL) NIL
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL) NIL
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) NIL NIL
    (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) NIL NIL
    NIL)
   NIL
   (|simple_neg| SUBTYPE "(real_fun_ops[measure_space.T].-)(measure_space.h)"
    "simple")))
 (|simple_diff| 0
  (|simple_diff-1| |nil| 3390271654
   ("" (SKOSIMP)
    (("" (LEMMA "simple_neg" ("h" "h2!1"))
      (("" (LEMMA "simple_add" ("h1" "h1!1" "h2" "-h2!1"))
        (("" (EXPAND "+") (("" (EXPAND "-") (("" (ASSERT) NIL NIL)) NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|simple| NONEMPTY-TYPE-EQ-DECL NIL |measure_space| NIL)
    (|simple?| CONST-DECL "bool" |measure_space| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (T FORMAL-TYPE-DECL NIL |measure_space| NIL)
    (|simple_neg| JUDGEMENT-TCC NIL |measure_space| NIL) NIL
    (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) NIL
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|simple_neg| APPLICATION-JUDGEMENT "simple" |measure_space| NIL)
    (|simple_add| JUDGEMENT-TCC NIL |measure_space| NIL) NIL)
   NIL
   (|simple_diff| SUBTYPE
    "(real_fun_ops[measure_space.T].-)(measure_space.h1, measure_space.h2)"
    "simple")))
 (|simple_abs| 0
  (|simple_abs-1| |nil| 3390205059
   ("" (SKOSIMP)
    (("" (TYPEPRED "h!1")
      (("" (EXPAND "simple?")
        (("" (FLATTEN)
          (("" (HIDE -1)
            (("" (EXPAND "fullset")
              (("" (EXPAND "image")
                (("" (REWRITE "is_finite_surj" -1 :DIR RL)
                  (("" (REWRITE "is_finite_surj" 1 :DIR RL)
                    (("" (SKOSIMP)
                      (("" (INST + "N!1" "_")
                        (("" (INST + "lambda (n:below[N!1]): abs(f!1(n))")
                          (("1" (EXPAND "surjective?")
                            (("1" (SKOSIMP)
                              (("1" (TYPEPRED "y!1")
                                (("1" (SKOSIMP)
                                  (("1" (EXPAND "abs" -1)
                                    (("1" (REPLACE -1)
                                      (("1" (INST - "h!1(x!1)")
                                        (("1" (SKOSIMP)
                                          (("1" (INST + "x!2")
                                            (("1" (ASSERT) NIL NIL)) NIL))
                                          NIL)
                                         ("2" (INST + "x!1") NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (SKOSIMP)
                            (("2" (TYPEPRED "f!1(n!1)")
                              (("2" (SKOSIMP)
                                (("2" (INST + "x!1")
                                  (("2" (ASSERT)
                                    (("2" (EXPAND "abs" 1 2)
                                      (("2" (ASSERT) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|simple| NONEMPTY-TYPE-EQ-DECL NIL |measure_space| NIL)
    (|simple?| CONST-DECL "bool" |measure_space| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (T FORMAL-TYPE-DECL NIL |measure_space| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|fullset| CONST-DECL "set" |sets| NIL)
    (|is_finite_surj| FORMULA-DECL NIL |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) NIL NIL
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL) NIL
    (< CONST-DECL "bool" |reals| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    NIL (|surjective?| CONST-DECL "bool" |functions| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|abs| CONST-DECL "[T -> nonneg_real]" |real_fun_ops| |reals|) NIL
    (|abs_measurable| APPLICATION-JUDGEMENT "measurable_function[T, S]"
     |measure_space| NIL))
   NIL
   (|simple_abs| SUBTYPE "real_fun_ops[measure_space.T].abs(measure_space.h)"
    "simple")))
 (|simple_min| 0
  (|simple_min-1| |nil| 3390205059
   ("" (SKOSIMP)
    (("" (LEMMA "simple_add" ("h1" "h1!1" "h2" "h2!1"))
      (("" (LEMMA "simple_diff" ("h1" "h1!1" "h2" "h2!1"))
        (("" (LEMMA "simple_abs" ("h" "(-[T])(h1!1, h2!1)"))
          ((""
            (LEMMA "simple_diff"
             ("h1" "(+[T])(h1!1, h2!1)" "h2" "abs((-[T])(h1!1, h2!1))"))
            ((""
              (LEMMA "simple_scal"
               ("c" "1/2" "h"
                "(-[T])((+[T])(h1!1, h2!1), abs((-[T])(h1!1, h2!1)))"))
              (("" (EXPAND "*")
                (("" (EXPAND "-")
                  (("" (EXPAND "+")
                    (("" (EXPAND "abs" -1)
                      (("" (EXPAND "min")
                        ((""
                          (LEMMA "extensionality"
                           ("f" "(LAMBDA (x: T):
                h1!1(x) * (1 / 2) + h2!1(x) * (1 / 2) -
                 abs(h1!1(x) - h2!1(x)) * (1 / 2))"
                            "g" "LAMBDA (x: T): min(h1!1(x), h2!1(x))"))
                          (("" (SPLIT -1)
                            (("1" (ASSERT) NIL NIL)
                             ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|simple| NONEMPTY-TYPE-EQ-DECL NIL |measure_space| NIL)
    (|simple?| CONST-DECL "bool" |measure_space| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (T FORMAL-TYPE-DECL NIL |measure_space| NIL)
    (|simple_add| JUDGEMENT-TCC NIL |measure_space| NIL)
    (|simple_diff| APPLICATION-JUDGEMENT "simple" |measure_space| NIL)
    (|simple_abs| JUDGEMENT-TCC NIL |measure_space| NIL) NIL
    (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|simple_scal| JUDGEMENT-TCC NIL |measure_space| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|extensionality| FORMULA-DECL NIL |functions| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL)
    (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal"
     |real_types| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|min| CONST-DECL "[T -> real]" |real_fun_ops_aux| |reals|) NIL
    (|abs| CONST-DECL "[T -> nonneg_real]" |real_fun_ops| |reals|)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (>= CONST-DECL "bool" |reals| NIL) NIL
    (|simple_abs| APPLICATION-JUDGEMENT "simple" |measure_space| NIL)
    (|simple_add| APPLICATION-JUDGEMENT "simple" |measure_space| NIL)
    (|simple_diff| JUDGEMENT-TCC NIL |measure_space| NIL))
   NIL
   (|simple_min| SUBTYPE
    "real_fun_ops_aux[measure_space.T].min(measure_space.h1, measure_space.h2)"
    "simple")))
 (|simple_max| 0
  (|simple_max-1| |nil| 3390205059
   ("" (SKOSIMP)
    (("" (LEMMA "simple_neg" ("h" "h1!1"))
      (("" (LEMMA "simple_neg" ("h" "h2!1"))
        (("" (LEMMA "simple_min" ("h1" "-h1!1" "h2" "-h2!1"))
          (("" (LEMMA "simple_neg" ("h" "min(-h1!1,-h2!1)"))
            (("" (EXPAND "-")
              (("" (EXPAND "min")
                (("" (EXPAND "max")
                  ((""
                    (CASE-REPLACE
                     "(LAMBDA (x_1: T): -min(-h1!1(x_1), -h2!1(x_1)))=(LAMBDA (x: T): max(h1!1(x), h2!1(x)))")
                    (("" (APPLY-EXTENSIONALITY :HIDE? T)
                      (("" (HIDE-ALL-BUT 1) (("" (GRIND) NIL NIL)) NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|simple| NONEMPTY-TYPE-EQ-DECL NIL |measure_space| NIL)
    (|simple?| CONST-DECL "bool" |measure_space| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (T FORMAL-TYPE-DECL NIL |measure_space| NIL)
    (|simple_neg| JUDGEMENT-TCC NIL |measure_space| NIL) NIL
    (|simple_min| JUDGEMENT-TCC NIL |measure_space| NIL)
    (|simple_neg| APPLICATION-JUDGEMENT "simple" |measure_space| NIL)
    (|max| CONST-DECL "[T -> real]" |real_fun_ops_aux| |reals|)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|min| CONST-DECL "[T -> real]" |real_fun_ops_aux| |reals|)
    (|simple_min| APPLICATION-JUDGEMENT "simple" |measure_space| NIL))
   NIL
   (|simple_max| SUBTYPE
    "real_fun_ops_aux[measure_space.T].max(measure_space.h1, measure_space.h2)"
    "simple")))
 (|simple_maximum| 0
  (|simple_maximum-1| |nil| 3409894810
   ("" (INDUCT "n")
    (("1" (EXPAND "maximum" 1) (("1" (PROPAX) NIL NIL)) NIL)
     ("2" (SKOSIMP*)
      (("2" (EXPAND "maximum" 1)
        (("2" (INST - "v!1") (("2" (REWRITE "simple_max") NIL NIL)) NIL)) NIL))
      NIL))
    NIL)
   ((|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|maximum_measurable| APPLICATION-JUDGEMENT "measurable_function[T, S]"
     |measure_space| NIL)
    (|simple_max| JUDGEMENT-TCC NIL |measure_space| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|max_measurable| APPLICATION-JUDGEMENT "measurable_function[T, S]"
     |measure_space| NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|maximum| DEF-DECL "[T -> real]" |real_fun_ops_aux| |reals|)
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (|simple| NONEMPTY-TYPE-EQ-DECL NIL |measure_space| NIL)
    (|simple?| CONST-DECL "bool" |measure_space| NIL)
    (T FORMAL-TYPE-DECL NIL |measure_space| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   NIL
   (|simple_maximum| SUBTYPE
    "real_fun_ops_aux[measure_space.T].maximum(measure_space.v, measure_space.n)"
    "simple")))
 (|simple_minimum| 0
  (|simple_minimum-1| |nil| 3409894810
   ("" (INDUCT "n")
    (("1" (EXPAND "minimum" 1) (("1" (PROPAX) NIL NIL)) NIL)
     ("2" (SKOSIMP*)
      (("2" (EXPAND "minimum" 1)
        (("2" (INST - "v!1") (("2" (REWRITE "simple_min") NIL NIL)) NIL)) NIL))
      NIL))
    NIL)
   ((|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|minimum_measurable| APPLICATION-JUDGEMENT "measurable_function[T, S]"
     |measure_space| NIL)
    (|simple_min| JUDGEMENT-TCC NIL |measure_space| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|min_measurable| APPLICATION-JUDGEMENT "measurable_function[T, S]"
     |measure_space| NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|minimum| DEF-DECL "[T -> real]" |real_fun_ops_aux| |reals|)
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (|simple| NONEMPTY-TYPE-EQ-DECL NIL |measure_space| NIL)
    (|simple?| CONST-DECL "bool" |measure_space| NIL)
    (T FORMAL-TYPE-DECL NIL |measure_space| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   NIL
   (|simple_minimum| SUBTYPE
    "real_fun_ops_aux[measure_space.T].minimum(measure_space.v, measure_space.n)"
    "simple")))
 (|simple_plus| 0
  (|simple_plus-2| "" 3789903642
   ("" (SKOSIMP)
    (("" (LEMMA "simple_const" ("c" "0"))
      (("" (LEMMA "simple_max" ("h1" "h!1" "h2" "LAMBDA (x: T): 0"))
        (("1" (EXPAND "plus")
          (("1" (EXPAND "max" -) (("1" (PROPAX) NIL NIL)) NIL)) NIL)
         ("2" (PROPAX) NIL NIL))
        NIL))
      NIL))
    NIL)
   ((|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|simple_const| FORMULA-DECL NIL |measure_space| NIL)
    (|plus| CONST-DECL "[T -> nnreal]" |real_fun_ops_aux| |reals|)
    (|max| CONST-DECL "[T -> real]" |real_fun_ops_aux| |reals|)
    (|simple_max| JUDGEMENT-TCC NIL |measure_space| NIL)
    (T FORMAL-TYPE-DECL NIL |measure_space| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|simple?| CONST-DECL "bool" |measure_space| NIL)
    (|simple| NONEMPTY-TYPE-EQ-DECL NIL |measure_space| NIL))
   SHOSTAK
   (|simple_plus| SUBTYPE
    "real_fun_ops_aux[measure_space.T].plus(measure_space.h)" "simple"))
  (|simple_plus-1| |nil| 3390205059
   ("" (SKOSIMP)
    (("" (LEMMA "simple_const" ("c" "0"))
      (("" (EXPAND "const_fun")
        (("" (LEMMA "simple_max" ("h1" "h!1" "h2" "LAMBDA (x: T): 0"))
          (("1" (EXPAND "plus")
            (("1" (EXPAND "max" -) (("1" (PROPAX) NIL NIL)) NIL)) NIL)
           ("2" (PROPAX) NIL NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|plus| CONST-DECL "[T -> nnreal]" |real_fun_ops_aux| |reals|)
    (|max| CONST-DECL "[T -> real]" |real_fun_ops_aux| |reals|))
   NIL
   (|simple_plus| SUBTYPE
    "real_fun_ops_aux[measure_space.T].plus(measure_space.h)" "simple")))
 (|simple_minus| 0
  (|simple_minus-2| "" 3789903642
   ("" (SKOSIMP)
    (("" (LEMMA "simple_const" ("c" "0"))
      (("" (LEMMA "simple_min" ("h1" "h!1" "h2" "LAMBDA (x: T): 0"))
        (("1" (EXPAND "minus")
          (("1" (EXPAND "min" -1)
            (("1"
              (LEMMA "simple_neg" ("h" "LAMBDA (x_1: T): min(h!1(x_1), 0)"))
              (("1" (EXPAND "-") (("1" (PROPAX) NIL NIL)) NIL)
               ("2" (PROPAX) NIL NIL))
              NIL))
            NIL))
          NIL)
         ("2" (PROPAX) NIL NIL))
        NIL))
      NIL))
    NIL)
   ((|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|simple_const| FORMULA-DECL NIL |measure_space| NIL)
    (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|minus| CONST-DECL "[T -> nnreal]" |real_fun_ops_aux| |reals|)
    (|simple_neg| JUDGEMENT-TCC NIL |measure_space| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) NIL
    (|min| CONST-DECL "[T -> real]" |real_fun_ops_aux| |reals|)
    (|simple_min| JUDGEMENT-TCC NIL |measure_space| NIL)
    (T FORMAL-TYPE-DECL NIL |measure_space| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|simple?| CONST-DECL "bool" |measure_space| NIL)
    (|simple| NONEMPTY-TYPE-EQ-DECL NIL |measure_space| NIL))
   SHOSTAK
   (|simple_minus| SUBTYPE
    "real_fun_ops_aux[measure_space.T].minus(measure_space.h)" "simple"))
  (|simple_minus-1| |nil| 3390205059
   ("" (SKOSIMP)
    (("" (LEMMA "simple_const" ("c" "0"))
      (("" (EXPAND "const_fun")
        (("" (LEMMA "simple_min" ("h1" "h!1" "h2" "LAMBDA (x: T): 0"))
          (("1" (EXPAND "minus")
            (("1" (EXPAND "min" -1)
              (("1"
                (LEMMA "simple_neg" ("h" "LAMBDA (x_1: T): min(h!1(x_1), 0)"))
                (("1" (EXPAND "-") (("1" (PROPAX) NIL NIL)) NIL)
                 ("2" (PROPAX) NIL NIL))
                NIL))
              NIL))
            NIL)
           ("2" (PROPAX) NIL NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|minus| CONST-DECL "[T -> nnreal]" |real_fun_ops_aux| |reals|)
    (|min| CONST-DECL "[T -> real]" |real_fun_ops_aux| |reals|))
   NIL
   (|simple_minus| SUBTYPE
    "real_fun_ops_aux[measure_space.T].minus(measure_space.h)" "simple")))
 (|simple_times| 0
  (|simple_times-1| |nil| 3390205059
   ("" (SKOSIMP)
    (("" (LEMMA "simple_add" ("h1" "h1!1" "h2" "h2!1"))
      (("" (LEMMA "simple_diff" ("h1" "h1!1" "h2" "h2!1"))
        (("" (LEMMA "simple_sq" ("h" "(+[T])(h1!1, h2!1)"))
          (("" (LEMMA "simple_sq" ("h" "(-[T])(h1!1, h2!1)"))
            ((""
              (LEMMA "simple_diff"
               ("h1" "sq[T]((+[T])(h1!1, h2!1))" "h2"
                "sq[T]((-[T])(h1!1, h2!1))"))
              ((""
                (LEMMA "simple_scal"
                 ("c" "1/4" "h"
                  "(-[T])(sq[T]((+[T])(h1!1, h2!1)), sq[T]((-[T])(h1!1, h2!1)))"))
                ((""
                  (LEMMA "extensionality"
                   ("f" "*[T]
                  (1 / 4,
                   (-[T])
                       (sq[T]((+[T])(h1!1, h2!1)),
                        sq[T]((-[T])(h1!1, h2!1))))"
                    "g" "*[T](h1!1, h2!1)"))
                  (("" (SPLIT -1)
                    (("1" (ASSERT) NIL NIL)
                     ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|simple| NONEMPTY-TYPE-EQ-DECL NIL |measure_space| NIL)
    (|simple?| CONST-DECL "bool" |measure_space| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (T FORMAL-TYPE-DECL NIL |measure_space| NIL)
    (|simple_add| JUDGEMENT-TCC NIL |measure_space| NIL)
    (|simple_add| APPLICATION-JUDGEMENT "simple" |measure_space| NIL)
    (|simple_sq| JUDGEMENT-TCC NIL |measure_space| NIL) NIL
    (|simple_sq| APPLICATION-JUDGEMENT "simple" |measure_space| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL)
    (|sq| CONST-DECL "[T -> nnreal]" |real_fun_ops_aux| |reals|)
    (|extensionality| FORMULA-DECL NIL |functions| NIL) NIL NIL
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|sq| CONST-DECL "nonneg_real" |sq| |reals|)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|prod_measurable| APPLICATION-JUDGEMENT "measurable_function[T, S]"
     |measure_space| NIL)
    (|simple_scal| APPLICATION-JUDGEMENT "simple" |measure_space| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|simple_scal| JUDGEMENT-TCC NIL |measure_space| NIL)
    (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    NIL (|simple_diff| APPLICATION-JUDGEMENT "simple" |measure_space| NIL)
    (|simple_diff| JUDGEMENT-TCC NIL |measure_space| NIL))
   NIL
   (|simple_times| SUBTYPE
    "real_fun_ops[measure_space.T].*(measure_space.h1, measure_space.h2)"
    "simple")))
 (|simple_expt_nat| 0
  (|simple_expt_nat-1| |nil| 3390205059
   ("" (SKOLEM + ("h!1" "_"))
    (("" (INDUCT "n")
      (("1" (EXPAND "expt")
        (("1" (EXPAND "expt") (("1" (REWRITE "simple_const") NIL NIL)) NIL))
        NIL)
       ("2" (SKOSIMP)
        (("2" (EXPAND "expt" 1)
          (("2" (LEMMA "simple_times" ("h1" "h!1" "h2" "expt[T](h!1, j!1)"))
            (("1" (EXPAND "*" -1)
              (("1" (EXPAND "expt" -1)
                (("1" (EXPAND "expt" 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL))
              NIL)
             ("2" (PROPAX) NIL NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (T FORMAL-TYPE-DECL NIL |measure_space| NIL)
    (|simple?| CONST-DECL "bool" |measure_space| NIL)
    (|expt| CONST-DECL "[T -> real]" |real_fun_power| |power|)
    (|simple| NONEMPTY-TYPE-EQ-DECL NIL |measure_space| NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|expt| DEF-DECL "real" |exponentiation| NIL)
    (|simple_const| FORMULA-DECL NIL |measure_space| NIL) NIL
    (|simple_times| JUDGEMENT-TCC NIL |measure_space| NIL)
    (|expt_nat_measurable| APPLICATION-JUDGEMENT "measurable_function[T, S]"
     |measure_space| NIL))
   NIL
   (|simple_expt_nat| SUBTYPE
    "real_fun_power[measure_space.T].expt(measure_space.h, measure_space.n)"
    "simple")))
 (|simple_expt_TCC1| 0
  (|simple_expt_TCC1-1| |nil| 3433774225 ("" (SUBTYPE-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (T FORMAL-TYPE-DECL NIL |measure_space| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|nn_simple?| CONST-DECL "bool" |measure_space| NIL)
    (|nn_simple| NONEMPTY-TYPE-EQ-DECL NIL |measure_space| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|simple?| CONST-DECL "bool" |measure_space| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|measurable_function?| CONST-DECL "bool" |measure_space_def| NIL)
    (|measurable_set?| CONST-DECL "bool" |measure_space_def| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|setofsets| TYPE-EQ-DECL NIL |sets| NIL)
    (|sigma_algebra?| CONST-DECL "bool" |subset_algebra_def| NIL)
    (|sigma_algebra| NONEMPTY-TYPE-EQ-DECL NIL |subset_algebra_def| NIL)
    (S FORMAL-CONST-DECL "sigma_algebra" |measure_space| NIL) NIL NIL
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL))
   NIL
   (|simple_expt_| SUBTYPE "measure_space.h" "[measure_space.T -> nnreal]")))
 (|simple_expt| 0
  (|simple_expt-1| |nil| 3430677936
   ("" (SKOSIMP)
    (("" (EXPAND "simple?")
      (("" (TYPEPRED "h!1")
        (("" (TYPEPRED "a!1")
          (("" (LEMMA "expt_measurable" ("g" "h!1" "a" "a!1"))
            (("" (HIDE -1)
              (("" (EXPAND "nn_simple?")
                (("" (FLATTEN)
                  (("" (EXPAND "simple?")
                    (("" (FLATTEN)
                      (("" (HIDE -4 -1)
                        (("" (EXPAND "fullset")
                          (("" (EXPAND "image")
                            ((""
                              (LEMMA "finite_image[nnreal,real]"
                               ("f"
                                "lambda (x:nnreal): power@real_expt.^(x,a!1)"
                                "S"
                                "{y: nnreal | EXISTS (x_1: ({x: T | TRUE})): y = h!1(x_1)}"))
                              (("1" (HIDE -4)
                                (("1" (EXPAND "image")
                                  (("1"
                                    (CASE-REPLACE "{y_1: real |
                    EXISTS (x_1:
                              ({y: nnreal |
                                  EXISTS (x_1: ({x: T | TRUE})): y = h!1(x_1)})):
                      y_1 = power@real_expt.^(x_1,a!1)}={y: real |
                         EXISTS (x_1: ({x: T | TRUE})):
                           y = (^[T](h!1, a!1))(x_1)}")
                                    (("1" (HIDE -1 2)
                                      (("1" (APPLY-EXTENSIONALITY :HIDE? T)
                                        (("1"
                                          (CASE-REPLACE
                                           "EXISTS (x_1: ({x: T | TRUE})): x!1 = ^[T](h!1, a!1)(x_1)")
                                          (("1" (SKOSIMP)
                                            (("1" (EXPAND "^" -1)
                                              (("1" (INST + "h!1(x!2)")
                                                (("1" (SPLIT)
                                                  (("1" (INST - "x!2")
                                                    (("1" (ASSERT) NIL NIL))
                                                    NIL)
                                                   ("2" (INST + "x!2") NIL
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("2" (REPLACE 1 2)
                                            (("2" (ASSERT)
                                              (("2" (SKOSIMP)
                                                (("2" (TYPEPRED "x!2")
                                                  (("2" (SKOSIMP)
                                                    (("2" (REPLACE -2)
                                                      (("2" (EXPAND "^" 1)
                                                        (("2" (REPLACE -3)
                                                          (("2" (INST + "x!3")
                                                            NIL NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("3" (HIDE 2)
                                            (("3" (SKOSIMP)
                                              (("3" (SKOSIMP)
                                                (("3" (INST - "x1!1")
                                                  (("3" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (SKOSIMP)
                                          (("2" (SKOSIMP)
                                            (("2" (INST - "x1!1")
                                              (("2" (ASSERT) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (HIDE -1 2)
                                      (("2" (SKOSIMP)
                                        (("2" (SKOSIMP)
                                          (("2" (INST - "x1!1")
                                            (("2" (ASSERT) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (HIDE 2)
                                (("2" (EXPAND "is_finite")
                                  (("2" (SKOSIMP)
                                    (("2" (INST + "N!1" "f!1")
                                      (("2" (EXPAND "restrict")
                                        (("2" (EXPAND "injective?")
                                          (("2" (SKOSIMP)
                                            (("2" (INST - "x1!1" "x2!1")
                                              (("2" (ASSERT) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|expt_measurable| APPLICATION-JUDGEMENT "measurable_function[T, S]"
     |measure_space| NIL)
    (|simple?| CONST-DECL "bool" |measure_space| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|fullset| CONST-DECL "set" |sets| NIL)
    (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL)
    (^ CONST-DECL "nnreal" |real_expt| |power|)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|finite_image| JUDGEMENT-TCC NIL |function_image_aux| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    NIL (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    NIL (^ CONST-DECL "[T -> nnreal]" |real_fun_power| |power|)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL) NIL
    (|expt_measurable| JUDGEMENT-TCC NIL |measure_space| NIL)
    (|nn_measurable?| CONST-DECL "bool" |measure_space| NIL)
    (|nn_measurable| NONEMPTY-TYPE-EQ-DECL NIL |measure_space| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (T FORMAL-TYPE-DECL NIL |measure_space| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|nn_simple?| CONST-DECL "bool" |measure_space| NIL)
    (|nn_simple| NONEMPTY-TYPE-EQ-DECL NIL |measure_space| NIL))
   NIL
   (|simple_expt| SUBTYPE
    "real_fun_power[measure_space.T].^(measure_space.h, measure_space.a)"
    "simple")))
 (|phi_is_simple| 0
  (|phi_is_simple-1| |nil| 3390786084
   ("" (SKOSIMP)
    (("" (EXPAND "simple?")
      (("" (SPLIT)
        (("1" (REWRITE "measurable_def2")
          (("1" (SKOSIMP)
            (("1" (EXPAND "phi")
              (("1" (EXPAND "inverse_image")
                (("1" (EXPAND "member")
                  (("1" (CASE "i!1(0)")
                    (("1" (CASE "i!1(1)")
                      (("1" (ASSERT)
                        (("1" (LEMMA "measurable_fullset")
                          (("1" (EXPAND "fullset")
                            (("1" (EXPAND "measurable_set?")
                              (("1" (PROPAX) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (ASSERT)
                        (("2" (LEMMA "measurable_complement" ("a" "X!1"))
                          (("1"
                            (CASE-REPLACE
                             "{x_1: T | IF X!1(x_1) THEN FALSE ELSE TRUE ENDIF}=complement[T](X!1)")
                            (("1" (EXPAND "measurable_set?")
                              (("1" (PROPAX) NIL NIL)) NIL)
                             ("2" (HIDE-ALL-BUT 1)
                              (("2" (APPLY-EXTENSIONALITY :HIDE? T)
                                (("2" (GRIND) NIL NIL)) NIL))
                              NIL))
                            NIL)
                           ("2" (EXPAND "measurable_set?")
                            (("2" (PROPAX) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (CASE "i!1(1)")
                      (("1"
                        (CASE-REPLACE
                         "{x_1: T | IF X!1(x_1) THEN i!1(1) ELSE i!1(0) ENDIF}= X!1")
                        (("1" (ASSERT) NIL NIL)
                         ("2" (HIDE 3)
                          (("2" (APPLY-EXTENSIONALITY :HIDE? T)
                            (("2" (GRIND) NIL NIL)) NIL))
                          NIL))
                        NIL)
                       ("2" (ASSERT)
                        (("2" (LEMMA "measurable_emptyset")
                          (("2" (EXPAND "emptyset")
                            (("2" (EXPAND "measurable_set?")
                              (("2" (PROPAX) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (LEMMA "finite_subset[real]")
          (("2"
            (INST - "add[real](1,singleton[real](0))"
             "image[T,real](phi(X!1), fullset[T])")
            (("2" (SPLIT -1)
              (("1" (PROPAX) NIL NIL)
               ("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|simple?| CONST-DECL "bool" |measure_space| NIL)
    (|finite_subset| FORMULA-DECL NIL |finite_sets| NIL) NIL NIL NIL NIL NIL
    NIL
    (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])"
     |sets_lemmas| NIL)
    (|subset?| CONST-DECL "bool" |sets| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) NIL
    (|singleton| CONST-DECL "(singleton?)" |sets| NIL)
    (|singleton?| CONST-DECL "bool" |sets| NIL)
    (|add| CONST-DECL "(nonempty?)" |sets| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL) NIL NIL
    (|measurable_def2| FORMULA-DECL NIL |measure_space_def| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|phi| CONST-DECL "nat" |measure_space| NIL)
    (T FORMAL-TYPE-DECL NIL |measure_space| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|setofsets| TYPE-EQ-DECL NIL |sets| NIL)
    (|sigma_algebra?| CONST-DECL "bool" |subset_algebra_def| NIL)
    (|sigma_algebra| NONEMPTY-TYPE-EQ-DECL NIL |subset_algebra_def| NIL)
    (S FORMAL-CONST-DECL "sigma_algebra" |measure_space| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|measurable_emptyset| JUDGEMENT-TCC NIL |measure_space_def| NIL)
    (|emptyset| CONST-DECL "set" |sets| NIL)
    (|measurable_fullset| JUDGEMENT-TCC NIL |measure_space_def| NIL)
    (|measurable_set?| CONST-DECL "bool" |measure_space_def| NIL)
    (|fullset| CONST-DECL "set" |sets| NIL)
    (|measurable_complement| JUDGEMENT-TCC NIL |measure_space_def| NIL)
    (|measurable_set| NONEMPTY-TYPE-EQ-DECL NIL |measure_space_def| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) NIL
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (FALSE CONST-DECL "bool" |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|complement| CONST-DECL "set" |sets| NIL)
    (|open_interval| NONEMPTY-TYPE-EQ-DECL NIL |real_topology| |metric_space|)
    (|ball| CONST-DECL "set[T]" |metric_space_def| |metric_space|)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) NIL)
   NIL
   (|phi_is_simple| SUBTYPE "measure_space.phi(measure_space.X)" "simple")))
 (|simple_def1| 0
  (|simple_def1-2| "" 3789903652
   ("" (EXPAND "simple?")
    (("" (SKOSIMP)
      (("" (CASE-REPLACE "is_finite(image(f!1, fullset[T]))")
        (("1" (SPLIT)
          (("1" (FLATTEN)
            (("1" (SKOSIMP)
              (("1" (TYPEPRED "y!1")
                (("1" (EXPAND "measurable_function?")
                  (("1" (INST - "singleton[real](y!1)")
                    (("1" (EXPAND "singleton")
                      (("1" (EXPAND "inverse_image")
                        (("1" (EXPAND "member")
                          (("1"
                            (LEMMA "extensionality"
                             ("a" "{x: T | f!1(x) = y!1}" "b"
                              "{x | y!1 = f!1(x)}"))
                            (("1" (SPLIT -1)
                              (("1" (ASSERT) NIL NIL)
                               ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (SKOSIMP*)
            (("2" (EXPAND "measurable_function?")
              (("2" (SKOSIMP)
                (("2" (TYPEPRED "B!1")
                  (("2" (NAME-REPLACE "IMAGE" "image(f!1, fullset[T])")
                    (("2" (CASE "borel?[real, metric_induced_topology](IMAGE)")
                      (("1"
                        (LEMMA "intersection_is_borel" ("a" "B!1" "b" "IMAGE"))
                        (("1" (HIDE -2 -3)
                          (("1"
                            (CASE-REPLACE
                             "inverse_image[T,real](f!1, B!1) = Union(image[real,set[T]](lambda y: inverse_image[T,real](f!1,singleton[real](y)),intersection[real](B!1, IMAGE)))")
                            (("1" (HIDE -1)
                              (("1" (TYPEPRED "S")
                                (("1" (EXPAND "sigma_algebra?")
                                  (("1" (FLATTEN)
                                    (("1" (EXPAND "sigma_algebra_union?")
                                      (("1"
                                        (INST - "image[real, set[T]]
                                (LAMBDA y:
                                   inverse_image[T, real]
                                       (f!1, singleton[real](y)),
                                 intersection[real](B!1, IMAGE))")
                                        (("1" (SPLIT -3)
                                          (("1" (EXPAND "measurable_set?")
                                            (("1" (ASSERT) NIL NIL)) NIL)
                                           ("2" (HIDE 2)
                                            (("2"
                                              (LEMMA
                                               "countable_image[real,set[T]]"
                                               ("f" "LAMBDA y:
                          inverse_image[T, real](f!1, singleton[real](y))"
                                                "S"
                                                "intersection[real](B!1, IMAGE)"))
                                              (("2" (SPLIT -1)
                                                (("1"
                                                  (NAME-REPLACE "FF" "LAMBDA y:
                           inverse_image[T, real](f!1, singleton[real](y))")
                                                  (("1"
                                                    (NAME-REPLACE "BB"
                                                     "intersection[real](B!1, IMAGE)")
                                                    (("1" (EXPAND "image" -1)
                                                      (("1" (PROPAX) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (HIDE-ALL-BUT (-5 1))
                                                  (("2"
                                                    (LEMMA "finite_countable"
                                                     ("x"
                                                      "intersection[real](B!1, IMAGE)"))
                                                    (("1" (PROPAX) NIL NIL)
                                                     ("2" (ASSERT)
                                                      (("2"
                                                        (LEMMA
                                                         "finite_intersection1[real]"
                                                         ("s" "B!1" "A"
                                                          "IMAGE"))
                                                        (("2" (PROPAX) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("3" (HIDE 2)
                                            (("3" (SKOSIMP)
                                              (("3" (EXPAND "member")
                                                (("3" (TYPEPRED "x!1")
                                                  (("3" (EXPAND "intersection")
                                                    (("3" (EXPAND "singleton")
                                                      (("3"
                                                        (EXPAND
                                                         "inverse_image")
                                                        (("3" (EXPAND "member")
                                                          (("3"
                                                            (EXPAND "image")
                                                            (("3" (SKOSIMP*)
                                                              (("3"
                                                                (TYPEPRED
                                                                 "x!2")
                                                                (("3"
                                                                  (INST -
                                                                   "x!2")
                                                                  (("1"
                                                                    (EXPAND
                                                                     "measurable_set?")
                                                                    (("1"
                                                                      (LEMMA
                                                                       "extensionality"
                                                                       ("a"
                                                                        "{x_1: T | x!2 = f!1(x_1)}"
                                                                        "b"
                                                                        "{x: T | f!1(x) = x!2}"))
                                                                      (("1"
                                                                        (SPLIT
                                                                         -1)
                                                                        (("1"
                                                                          (ASSERT)
                                                                          NIL
                                                                          NIL)
                                                                         ("2"
                                                                          (HIDE-ALL-BUT
                                                                           1)
                                                                          (("2"
                                                                            (GRIND)
                                                                            NIL
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL)
                                                                   ("2"
                                                                    (EXPAND
                                                                     "IMAGE")
                                                                    (("2"
                                                                      (PROPAX)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (HIDE-ALL-BUT 1)
                              (("2" (APPLY-EXTENSIONALITY :HIDE? T)
                                (("2"
                                  (CASE-REPLACE
                                   "inverse_image[T, real](f!1, B!1)(x!1)")
                                  (("1" (EXPAND "singleton")
                                    (("1" (EXPAND "inverse_image")
                                      (("1" (EXPAND "member")
                                        (("1" (EXPAND "Union")
                                          (("1"
                                            (INST +
                                             "inverse_image[T,real](f!1,singleton[real](f!1(x!1)))")
                                            (("1" (EXPAND "singleton")
                                              (("1" (EXPAND "inverse_image")
                                                (("1" (EXPAND "member")
                                                  (("1" (PROPAX) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2" (EXPAND "singleton")
                                              (("2" (EXPAND "inverse_image")
                                                (("2" (EXPAND "member")
                                                  (("2" (EXPAND "image")
                                                    (("2" (INST + "f!1(x!1)")
                                                      (("2"
                                                        (EXPAND "intersection")
                                                        (("2" (ASSERT)
                                                          (("2"
                                                            (EXPAND "IMAGE")
                                                            (("2"
                                                              (EXPAND
                                                               "fullset")
                                                              (("2"
                                                                (EXPAND
                                                                 "image")
                                                                (("2"
                                                                  (INST +
                                                                   "x!1")
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (ASSERT)
                                    (("2" (EXPAND "Union")
                                      (("2" (SKOSIMP)
                                        (("2" (TYPEPRED "a!1")
                                          (("2" (EXPAND "singleton")
                                            (("2" (EXPAND "inverse_image")
                                              (("2" (EXPAND "member")
                                                (("2" (EXPAND "image")
                                                  (("2" (SKOSIMP)
                                                    (("2" (REPLACE -1)
                                                      (("2" (ASSERT)
                                                        (("2" (HIDE -1)
                                                          (("2"
                                                            (TYPEPRED "x!2")
                                                            (("2" (REPLACE -2)
                                                              (("2"
                                                                (EXPAND
                                                                 "intersection")
                                                                (("2" (FLATTEN)
                                                                  (("2"
                                                                    (ASSERT)
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (PROPAX) NIL NIL))
                        NIL)
                       ("2" (HIDE-ALL-BUT (-3 1))
                        (("2"
                          (CASE
                              "forall Y,n: is_finite(Y) & card(Y) <= n => borel?[real, metric_induced_topology](Y)")
                          (("1" (INST - "IMAGE" "card(IMAGE)")
                            (("1" (ASSERT) NIL NIL)) NIL)
                           ("2" (HIDE-ALL-BUT 1)
                            (("2" (INDUCT "n")
                              (("1" (SKOSIMP*)
                                (("1" (EXPAND "<=")
                                  (("1" (SPLIT)
                                    (("1" (ASSERT) NIL NIL)
                                     ("2" (REWRITE "card_is_0")
                                      (("2" (REPLACE -1)
                                        (("2" (ASSERT) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (SKOSIMP*)
                                (("2" (EXPAND "<=" -3)
                                  (("2" (SPLIT -3)
                                    (("1" (INST - "Y!1")
                                      (("1" (ASSERT) NIL NIL)) NIL)
                                     ("2"
                                      (LEMMA "nonempty_card[real]" ("S" "Y!1"))
                                      (("2" (ASSERT)
                                        (("2"
                                          (LEMMA "card_rest[real]" ("S" "Y!1"))
                                          (("2"
                                            (LEMMA "choose_rest[real]"
                                             ("a" "Y!1"))
                                            (("2" (EXPAND "nonempty?")
                                              (("2" (ASSERT)
                                                (("2" (REPLACE -1 2 RL)
                                                  (("2" (REPLACE -3 -2)
                                                    (("2" (HIDE 1 -1 -3)
                                                      (("2" (ASSERT)
                                                        (("2"
                                                          (INST -
                                                           "rest[real](Y!1)")
                                                          (("2" (SPLIT -2)
                                                            (("1"
                                                              (REWRITE
                                                               "add_as_union")
                                                              (("1"
                                                                (REWRITE
                                                                 "union_is_borel")
                                                                NIL NIL))
                                                              NIL)
                                                             ("2" (ASSERT)
                                                              (("2"
                                                                (LEMMA
                                                                 "finite_rest[real]"
                                                                 ("A" "Y!1"))
                                                                (("2" (PROPAX)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL)
                                                             ("3" (ASSERT) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (ASSERT) NIL NIL))
        NIL))
      NIL))
    NIL)
   ((|measurable_function?| CONST-DECL "bool" |measure_space_def| NIL)
    (|member| CONST-DECL "bool" |sets| NIL) NIL NIL
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|extensionality| FORMULA-DECL NIL |sets_lemmas| NIL) NIL
    (|singleton| CONST-DECL "(singleton?)" |sets| NIL)
    (|singleton?| CONST-DECL "bool" |sets| NIL)
    (|borel| NONEMPTY-TYPE-EQ-DECL NIL |borel| NIL)
    (|borel?| CONST-DECL "sigma_algebra" |borel| NIL)
    (|metric_induced_topology| CONST-DECL "setofsets[T]" |metric_space_def|
     |metric_space|)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|sigma_algebra| NONEMPTY-TYPE-EQ-DECL NIL |subset_algebra_def| NIL)
    (|sigma_algebra?| CONST-DECL "bool" |subset_algebra_def| NIL)
    (|setofsets| TYPE-EQ-DECL NIL |sets| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL) NIL NIL NIL
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|metric_induced_topology_is_second_countable| NAME-JUDGEMENT
     "second_countable" |real_topology| |metric_space|)
    NIL (TRUE CONST-DECL "bool" |booleans| NIL) NIL
    (|sigma_algebra_union?| CONST-DECL "bool" |subset_algebra_def| NIL)
    (|Union_surjective| NAME-JUDGEMENT "(surjective?[setofsets[T], set[T]])"
     |sets_lemmas| NIL)
    (|measurable_set?| CONST-DECL "bool" |measure_space_def| NIL)
    (|countable_image| FORMULA-DECL NIL |countable_image| |sets_aux|)
    (|finite_intersection1| JUDGEMENT-TCC NIL |finite_sets| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|finite_countable| JUDGEMENT-TCC NIL |countable_props| |sets_aux|) NIL NIL
    NIL NIL NIL (S FORMAL-CONST-DECL "sigma_algebra" |measure_space| NIL)
    (|Union| CONST-DECL "set" |sets| NIL)
    (|intersection| CONST-DECL "set" |sets| NIL)
    (|intersection_is_borel| FORMULA-DECL NIL |borel| NIL)
    (|card| CONST-DECL "{n: nat | n = Card(S)}" |finite_sets| NIL)
    (|Card| CONST-DECL "nat" |finite_sets| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|card_is_0| FORMULA-DECL NIL |finite_sets| NIL) NIL NIL NIL NIL NIL NIL
    NIL (|finite_emptyset| NAME-JUDGEMENT "finite_set" |finite_sets| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nonempty_card| FORMULA-DECL NIL |finite_sets| NIL)
    (|card_rest| FORMULA-DECL NIL |finite_sets| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (|rest| CONST-DECL "set" |sets| NIL)
    (|finite_rest| JUDGEMENT-TCC NIL |finite_sets| NIL)
    (|choose| CONST-DECL "(p)" |sets| NIL)
    (|add_as_union| FORMULA-DECL NIL |sets_lemmas| NIL)
    (|nonempty_union2| APPLICATION-JUDGEMENT "(nonempty?)" |sets| NIL)
    (|union_is_borel| FORMULA-DECL NIL |borel| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|choose_rest| FORMULA-DECL NIL |sets_lemmas| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|fullset| CONST-DECL "set" |sets| NIL) NIL
    (T FORMAL-TYPE-DECL NIL |measure_space| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|simple?| CONST-DECL "bool" |measure_space| NIL))
   SHOSTAK)
  (|simple_def1-1| |nil| 3390362095
   ("" (EXPAND "simple?")
    (("" (SKOSIMP)
      (("" (CASE-REPLACE "is_finite(image(f!1, fullset[T]))")
        (("1" (SPLIT)
          (("1" (FLATTEN)
            (("1" (SKOSIMP)
              (("1" (TYPEPRED "y!1")
                (("1" (EXPAND "measurable_function?")
                  (("1" (INST - "singleton[real](y!1)")
                    (("1" (EXPAND "singleton")
                      (("1" (EXPAND "inverse_image")
                        (("1" (EXPAND "member")
                          (("1"
                            (LEMMA "extensionality"
                             ("a" "{x: T | f!1(x) = y!1}" "b"
                              "{x | y!1 = f!1(x)}"))
                            (("1" (SPLIT -1)
                              (("1" (ASSERT) NIL NIL)
                               ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (LEMMA "singleton_is_borel" ("x" "y!1"))
                      (("2" (PROPAX) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (SKOSIMP*)
            (("2" (EXPAND "measurable_function?")
              (("2" (SKOSIMP)
                (("2" (TYPEPRED "B!1")
                  (("2" (NAME-REPLACE "IMAGE" "image(f!1, fullset[T])")
                    (("2" (CASE "borel?[real, metric_induced_topology](IMAGE)")
                      (("1"
                        (LEMMA "intersection_is_borel" ("a" "B!1" "b" "IMAGE"))
                        (("1" (HIDE -2 -3)
                          (("1"
                            (CASE-REPLACE
                             "inverse_image[T,real](f!1, B!1) = Union(image[real,set[T]](lambda y: inverse_image[T,real](f!1,singleton[real](y)),intersection[real](B!1, IMAGE)))")
                            (("1" (HIDE -1)
                              (("1" (TYPEPRED "S")
                                (("1" (EXPAND "sigma_algebra?")
                                  (("1" (FLATTEN)
                                    (("1" (EXPAND "sigma_algebra_union?")
                                      (("1"
                                        (INST - "image[real, set[T]]
                                (LAMBDA y:
                                   inverse_image[T, real]
                                       (f!1, singleton[real](y)),
                                 intersection[real](B!1, IMAGE))")
                                        (("1" (SPLIT -3)
                                          (("1" (EXPAND "measurable_set?")
                                            (("1" (ASSERT) NIL NIL)) NIL)
                                           ("2" (HIDE 2)
                                            (("2"
                                              (LEMMA
                                               "countable_image[real,set[T]]"
                                               ("f" "LAMBDA y:
                          inverse_image[T, real](f!1, singleton[real](y))"
                                                "S"
                                                "intersection[real](B!1, IMAGE)"))
                                              (("2" (SPLIT -1)
                                                (("1"
                                                  (NAME-REPLACE "FF" "LAMBDA y:
                           inverse_image[T, real](f!1, singleton[real](y))")
                                                  (("1"
                                                    (NAME-REPLACE "BB"
                                                     "intersection[real](B!1, IMAGE)")
                                                    (("1" (EXPAND "image" -1)
                                                      (("1" (PROPAX) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (HIDE-ALL-BUT (-5 1))
                                                  (("2"
                                                    (LEMMA "finite_countable"
                                                     ("x"
                                                      "intersection[real](B!1, IMAGE)"))
                                                    (("1" (PROPAX) NIL NIL)
                                                     ("2" (ASSERT)
                                                      (("2"
                                                        (LEMMA
                                                         "finite_intersection1[real]"
                                                         ("s" "B!1" "A"
                                                          "IMAGE"))
                                                        (("2" (PROPAX) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("3" (HIDE 2)
                                            (("3" (SKOSIMP)
                                              (("3" (EXPAND "member")
                                                (("3" (TYPEPRED "x!1")
                                                  (("3" (EXPAND "intersection")
                                                    (("3" (EXPAND "singleton")
                                                      (("3"
                                                        (EXPAND
                                                         "inverse_image")
                                                        (("3" (EXPAND "member")
                                                          (("3"
                                                            (EXPAND "image")
                                                            (("3" (SKOSIMP*)
                                                              (("3"
                                                                (TYPEPRED
                                                                 "x!2")
                                                                (("3"
                                                                  (INST -
                                                                   "x!2")
                                                                  (("1"
                                                                    (EXPAND
                                                                     "measurable_set?")
                                                                    (("1"
                                                                      (LEMMA
                                                                       "extensionality"
                                                                       ("a"
                                                                        "{x_1: T | x!2 = f!1(x_1)}"
                                                                        "b"
                                                                        "{x: T | f!1(x) = x!2}"))
                                                                      (("1"
                                                                        (SPLIT
                                                                         -1)
                                                                        (("1"
                                                                          (ASSERT)
                                                                          NIL
                                                                          NIL)
                                                                         ("2"
                                                                          (HIDE-ALL-BUT
                                                                           1)
                                                                          (("2"
                                                                            (GRIND)
                                                                            NIL
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL)
                                                                   ("2"
                                                                    (EXPAND
                                                                     "IMAGE")
                                                                    (("2"
                                                                      (PROPAX)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (HIDE-ALL-BUT 1)
                              (("2" (APPLY-EXTENSIONALITY :HIDE? T)
                                (("2"
                                  (CASE-REPLACE
                                   "inverse_image[T, real](f!1, B!1)(x!1)")
                                  (("1" (EXPAND "singleton")
                                    (("1" (EXPAND "inverse_image")
                                      (("1" (EXPAND "member")
                                        (("1" (EXPAND "Union")
                                          (("1"
                                            (INST +
                                             "inverse_image[T,real](f!1,singleton[real](f!1(x!1)))")
                                            (("1" (EXPAND "singleton")
                                              (("1" (EXPAND "inverse_image")
                                                (("1" (EXPAND "member")
                                                  (("1" (PROPAX) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2" (EXPAND "singleton")
                                              (("2" (EXPAND "inverse_image")
                                                (("2" (EXPAND "member")
                                                  (("2" (EXPAND "image")
                                                    (("2" (INST + "f!1(x!1)")
                                                      (("2"
                                                        (EXPAND "intersection")
                                                        (("2" (ASSERT)
                                                          (("2"
                                                            (EXPAND "IMAGE")
                                                            (("2"
                                                              (EXPAND
                                                               "fullset")
                                                              (("2"
                                                                (EXPAND
                                                                 "image")
                                                                (("2"
                                                                  (INST +
                                                                   "x!1")
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (ASSERT)
                                    (("2" (EXPAND "Union")
                                      (("2" (SKOSIMP)
                                        (("2" (TYPEPRED "a!1")
                                          (("2" (EXPAND "singleton")
                                            (("2" (EXPAND "inverse_image")
                                              (("2" (EXPAND "member")
                                                (("2" (EXPAND "image")
                                                  (("2" (SKOSIMP)
                                                    (("2" (REPLACE -1)
                                                      (("2" (ASSERT)
                                                        (("2" (HIDE -1)
                                                          (("2"
                                                            (TYPEPRED "x!2")
                                                            (("2" (REPLACE -2)
                                                              (("2"
                                                                (EXPAND
                                                                 "intersection")
                                                                (("2" (FLATTEN)
                                                                  (("2"
                                                                    (ASSERT)
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (PROPAX) NIL NIL))
                        NIL)
                       ("2" (HIDE-ALL-BUT (-3 1))
                        (("2"
                          (CASE
                              "forall Y,n: is_finite(Y) & card(Y) <= n => borel?[real, metric_induced_topology](Y)")
                          (("1" (INST - "IMAGE" "card(IMAGE)")
                            (("1" (ASSERT) NIL NIL)) NIL)
                           ("2" (HIDE-ALL-BUT 1)
                            (("2" (INDUCT "n")
                              (("1" (SKOSIMP*)
                                (("1" (EXPAND "<=")
                                  (("1" (SPLIT)
                                    (("1" (ASSERT) NIL NIL)
                                     ("2" (REWRITE "card_is_0")
                                      (("2" (REPLACE -1)
                                        (("2" (ASSERT) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (SKOSIMP*)
                                (("2" (EXPAND "<=" -3)
                                  (("2" (SPLIT -3)
                                    (("1" (INST - "Y!1")
                                      (("1" (ASSERT) NIL NIL)) NIL)
                                     ("2"
                                      (LEMMA "nonempty_card[real]" ("S" "Y!1"))
                                      (("2" (ASSERT)
                                        (("2"
                                          (LEMMA "card_rest[real]" ("S" "Y!1"))
                                          (("2"
                                            (LEMMA "choose_rest[real]"
                                             ("a" "Y!1"))
                                            (("2" (EXPAND "nonempty?")
                                              (("2" (ASSERT)
                                                (("2" (REPLACE -1 2 RL)
                                                  (("2" (REPLACE -3 -2)
                                                    (("2" (HIDE 1 -1 -3)
                                                      (("2" (ASSERT)
                                                        (("2"
                                                          (INST -
                                                           "rest[real](Y!1)")
                                                          (("2" (SPLIT -2)
                                                            (("1"
                                                              (REWRITE
                                                               "add_as_union")
                                                              (("1"
                                                                (REWRITE
                                                                 "union_is_borel")
                                                                (("1"
                                                                  (HIDE 2 -1)
                                                                  (("1"
                                                                    (REWRITE
                                                                     "singleton_is_borel")
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL)
                                                             ("2" (ASSERT)
                                                              (("2"
                                                                (LEMMA
                                                                 "finite_rest[real]"
                                                                 ("A" "Y!1"))
                                                                (("2" (PROPAX)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL)
                                                             ("3" (ASSERT) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("3" (SKOSIMP)
                                (("3"
                                  (TYPEPRED
                                   "metric_induced_topology[real, (LAMBDA (x, y: real): abs(x - y))]")
                                  (("3" (EXPAND "hausdorff_space?")
                                    (("3" (PROPAX) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("3" (SKOSIMP)
                            (("3"
                              (TYPEPRED
                               "metric_induced_topology[real, (LAMBDA (x, y: real): abs(x - y))]")
                              (("3" (EXPAND "hausdorff_space?")
                                (("3" (PROPAX) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("3"
                        (TYPEPRED
                         "metric_induced_topology[real, (LAMBDA (x, y: real): abs(x - y))]")
                        (("3" (EXPAND "hausdorff_space?")
                          (("3" (PROPAX) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (ASSERT) NIL NIL))
        NIL))
      NIL))
    NIL)
   ((|measurable_function?| CONST-DECL "bool" |measure_space_def| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|singleton| CONST-DECL "(singleton?)" |sets| NIL)
    (|singleton?| CONST-DECL "bool" |sets| NIL)
    (|borel| NONEMPTY-TYPE-EQ-DECL NIL |borel| NIL)
    (|borel?| CONST-DECL "sigma_algebra" |borel| NIL)
    (|metric_induced_topology| CONST-DECL "setofsets[T]" |metric_space_def|
     |metric_space|)
    (|sigma_algebra| NONEMPTY-TYPE-EQ-DECL NIL |subset_algebra_def| NIL)
    (|sigma_algebra?| CONST-DECL "bool" |subset_algebra_def| NIL)
    (|setofsets| TYPE-EQ-DECL NIL |sets| NIL)
    (|metric_induced_topology_is_second_countable| NAME-JUDGEMENT
     "second_countable" |real_topology| |metric_space|)
    (|sigma_algebra_union?| CONST-DECL "bool" |subset_algebra_def| NIL)
    (|measurable_set?| CONST-DECL "bool" |measure_space_def| NIL)
    (|countable_image| FORMULA-DECL NIL |countable_image| |sets_aux|)
    (|finite_intersection1| JUDGEMENT-TCC NIL |finite_sets| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|finite_countable| JUDGEMENT-TCC NIL |countable_props| |sets_aux|)
    (|Union| CONST-DECL "set" |sets| NIL)
    (|intersection| CONST-DECL "set" |sets| NIL)
    (|intersection_is_borel| FORMULA-DECL NIL |borel| NIL)
    (|card| CONST-DECL "{n: nat | n = Card(S)}" |finite_sets| NIL)
    (|Card| CONST-DECL "nat" |finite_sets| NIL)
    (|card_is_0| FORMULA-DECL NIL |finite_sets| NIL)
    (|finite_emptyset| NAME-JUDGEMENT "finite_set" |finite_sets| NIL)
    (|nonempty_card| FORMULA-DECL NIL |finite_sets| NIL)
    (|card_rest| FORMULA-DECL NIL |finite_sets| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (|rest| CONST-DECL "set" |sets| NIL)
    (|finite_rest| JUDGEMENT-TCC NIL |finite_sets| NIL)
    (|choose| CONST-DECL "(p)" |sets| NIL)
    (|nonempty_union2| APPLICATION-JUDGEMENT "(nonempty?)" |sets| NIL)
    (|union_is_borel| FORMULA-DECL NIL |borel| NIL)
    (|fullset| CONST-DECL "set" |sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL))
   SHOSTAK))
 (|simple_def2| 0
  (|simple_def2-2| "" 3789903659
   ("" (SKOSIMP)
    (("" (REWRITE "simple_def1")
      (("" (SPLIT)
        (("1" (SKOSIMP*)
          (("1"
            (NAME "PP"
                  "image[real,set[T]](lambda y: inverse_image[T,real](f!1,singleton[real](y)),image[T,real](f!1, fullset[T]))")
            (("1" (INST + "PP")
              (("1" (SPLIT 1)
                (("1" (EXPAND "measurable_set?")
                  (("1" (EXPAND "every")
                    (("1" (SKOSIMP)
                      (("1" (TYPEPRED "x!1")
                        (("1" (REPLACE -2 -1 RL)
                          (("1" (EXPAND "fullset" -1)
                            (("1" (EXPAND "singleton" -1)
                              (("1" (EXPAND "inverse_image" -1)
                                (("1" (EXPAND "member")
                                  (("1" (EXPAND "image" -1)
                                    (("1" (SKOSIMP)
                                      (("1" (TYPEPRED "x!2")
                                        (("1" (SKOSIMP)
                                          (("1" (REPLACE -1)
                                            (("1" (INST -5 "f!1(x!3)")
                                              (("1"
                                                (LEMMA "extensionality"
                                                 ("a" "{x | f!1(x!3) = f!1(x)}"
                                                  "b"
                                                  "{x: T | f!1(x) = f!1(x!3)}"))
                                                (("1" (SPLIT -1)
                                                  (("1" (ASSERT) NIL NIL)
                                                   ("2" (HIDE-ALL-BUT 1)
                                                    (("2" (GRIND) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (EXPAND "fullset")
                                                (("2" (EXPAND "image")
                                                  (("2" (INST + "x!3") NIL
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (EXPAND "every")
                  (("2" (SKOSIMP)
                    (("2" (TYPEPRED "x!1")
                      (("2" (EXPAND "PP")
                        (("2" (HIDE -2)
                          (("2" (EXPAND "constant_over?")
                            (("2" (EXPAND "fullset")
                              (("2" (EXPAND "singleton")
                                (("2" (EXPAND "inverse_image")
                                  (("2" (EXPAND "member")
                                    (("2" (EXPAND "image")
                                      (("2" (SKOSIMP*)
                                        (("2" (TYPEPRED "x!2")
                                          (("2" (SKOSIMP)
                                            (("2" (INST + "x!2")
                                              (("2" (SKOSIMP)
                                                (("2" (TYPEPRED "x!4")
                                                  (("2" (REPLACE -3)
                                                    (("2" (ASSERT) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2"
                (LEMMA "finite_image[real,set[T]]"
                 ("f"
                  "LAMBDA y: inverse_image[T, real](f!1, singleton[real](y))"
                  "S" "image[T, real](f!1, fullset[T])"))
                (("1" (REPLACE -2)
                  (("1" (EXPAND "finite_partition?")
                    (("1" (ASSERT)
                      (("1" (EXPAND "partition?")
                        (("1" (SPLIT)
                          (("1" (APPLY-EXTENSIONALITY 1 :HIDE? T)
                            (("1" (EXPAND "fullset")
                              (("1" (EXPAND "Union")
                                (("1"
                                  (NAME "FF"
                                        "LAMBDA y: inverse_image[T, real](f!1, singleton[real](y))")
                                  (("1" (REPLACE -1)
                                    (("1" (INST + "FF(f!1(x!1))")
                                      (("1" (EXPAND "FF" 1)
                                        (("1" (EXPAND "singleton")
                                          (("1" (EXPAND "inverse_image")
                                            (("1" (EXPAND "member")
                                              (("1" (PROPAX) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (EXPAND "PP" 1)
                                        (("2" (EXPAND "image")
                                          (("2" (EXPAND "FF" 1)
                                            (("2" (INST + "f!1(x!1)")
                                              (("2" (INST + "x!1")
                                                (("2" (EXPAND "fullset")
                                                  (("2" (PROPAX) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (SKOSIMP*)
                            (("2" (TYPEPRED "x!1")
                              (("2" (TYPEPRED "y!1")
                                (("2" (EXPAND "PP")
                                  (("2" (EXPAND "image" -1 1)
                                    (("2" (EXPAND "image" -2 1)
                                      (("2" (SKOSIMP*)
                                        (("2" (CASE-REPLACE "x!2=x!3")
                                          (("1" (ASSERT) NIL NIL)
                                           ("2" (EXPAND "singleton")
                                            (("2" (EXPAND "inverse_image")
                                              (("2" (EXPAND "member")
                                                (("2" (REPLACE -1)
                                                  (("2" (REPLACE -2)
                                                    (("2" (HIDE 2 -1 -2)
                                                      (("2"
                                                        (EXPAND "disjoint?")
                                                        (("2"
                                                          (EXPAND
                                                           "intersection")
                                                          (("2"
                                                            (EXPAND "member")
                                                            (("2"
                                                              (EXPAND "empty?")
                                                              (("2" (SKOSIMP)
                                                                (("2"
                                                                  (EXPAND
                                                                   "member")
                                                                  (("2"
                                                                    (FLATTEN)
                                                                    (("2"
                                                                      (ASSERT)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (PROPAX) NIL NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (SKOSIMP*)
          (("2" (TYPEPRED "P!1")
            (("2" (SPLIT)
              (("1" (EXPAND "finite_partition?")
                (("1" (FLATTEN)
                  (("1" (EXPAND "partition?")
                    (("1" (FLATTEN)
                      (("1" (CASE "exists x: true")
                        (("1" (NAME "PP" "{X | P!1(X) & nonempty?(X)}")
                          (("1" (CASE "nonempty?(PP) & subset?(PP,P!1)")
                            (("1" (FLATTEN)
                              (("1" (CASE "Union(PP)=fullset[T]")
                                (("1"
                                  (CASE
                                      "forall (X:(PP)): singleton?(image(f!1,X))")
                                  (("1"
                                    (NAME "FF"
                                          "lambda (X:(PP)): choose[real](image[T,real](f!1,X))")
                                    (("1"
                                      (CASE-REPLACE
                                       "image[T,real](f!1,fullset[T]) = image(FF,PP)")
                                      (("1" (HIDE -1)
                                        (("1"
                                          (LEMMA "finite_image[(PP),real]"
                                           ("f" "FF" "S" "PP"))
                                          (("1" (PROPAX) NIL NIL)
                                           ("2" (HIDE-ALL-BUT (-5 -10 1))
                                            (("2"
                                              (LEMMA "finite_subset[set[T]]"
                                               ("s" "PP" "A" "P!1"))
                                              (("2" (ASSERT)
                                                (("2" (HIDE -2 -3)
                                                  (("2" (EXPAND "restrict")
                                                    (("2" (EXPAND "is_finite")
                                                      (("2" (PROPAX) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (HIDE 2)
                                        (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T)
                                          (("2" (REPLACE -3 1 RL)
                                            (("2" (EXPAND "restrict")
                                              (("2" (EXPAND "image")
                                                (("2"
                                                  (CASE-REPLACE
                                                   "EXISTS (x: (Union(PP))): x!1 = f!1(x)")
                                                  (("1" (SKOSIMP)
                                                    (("1" (TYPEPRED "x!2")
                                                      (("1" (EXPAND "Union")
                                                        (("1" (SKOSIMP)
                                                          (("1" (INST + "a!1")
                                                            (("1" (HIDE -3)
                                                              (("1"
                                                                (EXPAND "FF")
                                                                (("1"
                                                                  (TYPEPRED
                                                                   "choose[real](image[T, real](f!1, a!1))")
                                                                  (("1"
                                                                    (NAME-REPLACE
                                                                     "XX"
                                                                     "choose[real](image[T, real](f!1, a!1))")
                                                                    (("1"
                                                                      (EXPAND
                                                                       "image")
                                                                      (("1"
                                                                        (SKOSIMP)
                                                                        (("1"
                                                                          (TYPEPRED
                                                                           "x!3")
                                                                          (("1"
                                                                            (TYPEPRED
                                                                             "a!1")
                                                                            (("1"
                                                                              (EXPAND
                                                                               "subset?")
                                                                              (("1"
                                                                                (INST
                                                                                 -9
                                                                                 "a!1")
                                                                                (("1"
                                                                                  (ASSERT)
                                                                                  (("1"
                                                                                    (EXPAND
                                                                                     "every")
                                                                                    (("1"
                                                                                      (INST
                                                                                       -16
                                                                                       "a!1")
                                                                                      (("1"
                                                                                        (EXPAND
                                                                                         "constant_over?")
                                                                                        (("1"
                                                                                          (SKOSIMP*)
                                                                                          (("1"
                                                                                            (INST-CP
                                                                                             -15
                                                                                             "x!2")
                                                                                            (("1"
                                                                                              (INST
                                                                                               -15
                                                                                               "x!3")
                                                                                              (("1"
                                                                                                (ASSERT)
                                                                                                NIL
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (REPLACE 1 2)
                                                    (("2" (ASSERT)
                                                      (("2" (SKOSIMP*)
                                                        (("2" (TYPEPRED "x!2")
                                                          (("2"
                                                            (EXPAND "subset?")
                                                            (("2"
                                                              (INST -7 "x!2")
                                                              (("2" (ASSERT)
                                                                (("2"
                                                                  (EXPAND
                                                                   "every" -13)
                                                                  (("2"
                                                                    (INST -13
                                                                     "x!2")
                                                                    (("2"
                                                                      (EXPAND
                                                                       "constant_over?")
                                                                      (("2"
                                                                        (SKOSIMP)
                                                                        (("2"
                                                                          (EXPAND
                                                                           "FF")
                                                                          (("2"
                                                                            (HIDE
                                                                             -3)
                                                                            (("2"
                                                                              (TYPEPRED
                                                                               "choose[real](image[T, real](f!1, x!2))")
                                                                              (("2"
                                                                                (REPLACE
                                                                                 -3
                                                                                 *
                                                                                 RL)
                                                                                (("2"
                                                                                  (EXPAND
                                                                                   "image")
                                                                                  (("2"
                                                                                    (SKOSIMP)
                                                                                    (("2"
                                                                                      (INST
                                                                                       +
                                                                                       "x!4")
                                                                                      (("2"
                                                                                        (REPLACE
                                                                                         -5
                                                                                         1)
                                                                                        (("2"
                                                                                          (EXPAND
                                                                                           "fullset")
                                                                                          (("2"
                                                                                            (PROPAX)
                                                                                            NIL
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (SKOSIMP)
                                      (("2" (INST - "X!1")
                                        (("2" (HIDE-ALL-BUT (-1 1))
                                          (("2" (EXPAND "singleton?")
                                            (("2" (SKOSIMP)
                                              (("2" (TYPEPRED "x!1")
                                                (("2" (EXPAND "nonempty?")
                                                  (("2" (EXPAND "empty?")
                                                    (("2" (INST - "x!1")
                                                      (("2" (ASSERT) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (HIDE 2)
                                    (("2" (SKOSIMP)
                                      (("2" (TYPEPRED "X!1")
                                        (("2" (EXPAND "every")
                                          (("2" (EXPAND "subset?")
                                            (("2" (INST -4 "X!1")
                                              (("2" (ASSERT)
                                                (("2" (INST -11 "X!1")
                                                  (("2"
                                                    (EXPAND "constant_over?")
                                                    (("2" (SKOLEM! -11)
                                                      (("2" (EXPAND "image")
                                                        (("2"
                                                          (EXPAND "singleton?")
                                                          (("2" (INST + "y!1")
                                                            (("1" (SKOSIMP)
                                                              (("1"
                                                                (TYPEPRED
                                                                 "y!2")
                                                                (("1" (SKOLEM!)
                                                                  (("1"
                                                                    (TYPEPRED
                                                                     "x!1")
                                                                    (("1"
                                                                      (INST -13
                                                                       "x!1")
                                                                      (("1"
                                                                        (ASSERT)
                                                                        NIL
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL)
                                                             ("2"
                                                              (EXPAND "PP" -1)
                                                              (("2"
                                                                (EXPAND
                                                                 "nonempty?")
                                                                (("2"
                                                                  (EXPAND
                                                                   "empty?" 2)
                                                                  (("2"
                                                                    (SKOLEM! 2)
                                                                    (("2"
                                                                      (INST +
                                                                       "x!1")
                                                                      (("1"
                                                                        (ASSERT)
                                                                        (("1"
                                                                          (INST
                                                                           -10
                                                                           "x!1")
                                                                          NIL
                                                                          NIL))
                                                                        NIL)
                                                                       ("2"
                                                                        (ASSERT)
                                                                        NIL
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (HIDE-ALL-BUT (-5 -1 -2 1))
                                  (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T)
                                    (("2"
                                      (LEMMA "extensionality_postulate"
                                       ("f" "Union(P!1)" "g" "fullset[T]"))
                                      (("2" (REPLACE -1 -4 RL)
                                        (("2" (INST -4 "x!1")
                                          (("2" (EXPAND "fullset")
                                            (("2" (EXPAND "Union")
                                              (("2" (SKOSIMP)
                                                (("2" (HIDE -1 -2)
                                                  (("2" (EXPAND "subset?")
                                                    (("2" (TYPEPRED "a!1")
                                                      (("2" (INST + "a!1")
                                                        (("2" (EXPAND "PP")
                                                          (("2"
                                                            (EXPAND
                                                             "nonempty?")
                                                            (("2"
                                                              (EXPAND "empty?")
                                                              (("2"
                                                                (EXPAND
                                                                 "member")
                                                                (("2" (SKOSIMP)
                                                                  (("2"
                                                                    (INST -
                                                                     "x!1")
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (HIDE-ALL-BUT (-2 -3 1))
                              (("2" (SPLIT)
                                (("1" (EXPAND "nonempty?")
                                  (("1" (EXPAND "empty?")
                                    (("1" (SKOSIMP)
                                      (("1"
                                        (LEMMA "extensionality_postulate"
                                         ("f" "Union(P!1)" "g" "fullset[T]"))
                                        (("1" (REPLACE -1 -3 RL)
                                          (("1" (INST -3 "x!1")
                                            (("1" (EXPAND "fullset")
                                              (("1" (HIDE -1)
                                                (("1" (EXPAND "Union")
                                                  (("1" (SKOSIMP)
                                                    (("1" (TYPEPRED "a!1")
                                                      (("1" (EXPAND "PP")
                                                        (("1" (EXPAND "member")
                                                          (("1" (INST - "a!1")
                                                            (("1" (ASSERT)
                                                              (("1"
                                                                (EXPAND
                                                                 "nonempty?")
                                                                (("1"
                                                                  (EXPAND
                                                                   "empty?")
                                                                  (("1"
                                                                    (INST -
                                                                     "x!1")
                                                                    (("1"
                                                                      (ASSERT)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (EXPAND "PP")
                                  (("2" (EXPAND "subset?")
                                    (("2" (EXPAND "member")
                                      (("2" (SKOSIMP*) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (CASE-REPLACE "fullset[T]=emptyset[T]")
                          (("1"
                            (LEMMA "extensionality"
                             ("a" "image(f!1, emptyset[T])" "b"
                              "emptyset[real]"))
                            (("1" (SPLIT -1)
                              (("1" (REPLACE -1) (("1" (ASSERT) NIL NIL)) NIL)
                               ("2" (SKOSIMP)
                                (("2" (EXPAND "emptyset")
                                  (("2" (EXPAND "member")
                                    (("2" (EXPAND "image")
                                      (("2" (SKOSIMP) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (APPLY-EXTENSIONALITY 1 :HIDE? T)
                            (("2" (EXPAND "emptyset")
                              (("2" (INST + "x!1") NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (SKOSIMP)
                (("2" (EXPAND "every")
                  (("2" (EXPAND "measurable_set?")
                    (("2"
                      (CASE-REPLACE
                       "{x | y!1 = f!1(x)} = Union({X:set[T] | P!1(X) & image[T,real](f!1,X) = singleton[real](y!1)})")
                      (("1" (HIDE -1)
                        (("1"
                          (CASE "subset?({X: set[T] |
                 P!1(X) & image[T, real](f!1, X) = singleton[real](y!1)},P!1)")
                          (("1" (EXPAND "finite_partition?")
                            (("1" (FLATTEN)
                              (("1"
                                (NAME-REPLACE "SS" "{X: set[T] |
                 P!1(X) & image[T, real](f!1, X) = singleton[real](y!1)}")
                                (("1" (TYPEPRED "S")
                                  (("1" (EXPAND "sigma_algebra?")
                                    (("1" (FLATTEN)
                                      (("1" (EXPAND "sigma_algebra_union?")
                                        (("1" (INST - "SS")
                                          (("1" (SPLIT -3)
                                            (("1" (ASSERT) NIL NIL)
                                             ("2"
                                              (LEMMA "finite_subset[set[T]]"
                                               ("s" "SS" "A" "P!1"))
                                              (("2" (ASSERT)
                                                (("2"
                                                  (LEMMA
                                                   "finite_countable[set[T]]"
                                                   ("x" "SS"))
                                                  (("2" (PROPAX) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("3" (SKOSIMP)
                                              (("3" (EXPAND "subset?")
                                                (("3" (INST - "x!1")
                                                  (("3" (INST -6 "x!1")
                                                    (("3" (ASSERT) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (HIDE-ALL-BUT 1)
                            (("2" (EXPAND "subset?")
                              (("2" (EXPAND "member")
                                (("2" (SKOSIMP*) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (APPLY-EXTENSIONALITY 1 :HIDE? T)
                        (("2" (HIDE 2)
                          (("2" (CASE-REPLACE "y!1=f!1(x!1)")
                            (("1" (EXPAND "Union")
                              (("1" (EXPAND "finite_partition?")
                                (("1" (FLATTEN)
                                  (("1" (EXPAND "partition?")
                                    (("1" (FLATTEN)
                                      (("1"
                                        (LEMMA "extensionality_postulate"
                                         ("f" "Union(P!1)" "g" "fullset[T]"))
                                        (("1" (REPLACE -1 -3 RL)
                                          (("1" (HIDE -1)
                                            (("1" (INST -2 "x!1")
                                              (("1" (EXPAND "fullset")
                                                (("1" (EXPAND "Union")
                                                  (("1" (SKOSIMP)
                                                    (("1" (INST + "a!1")
                                                      (("1"
                                                        (EXPAND "singleton")
                                                        (("1" (EXPAND "image")
                                                          (("1"
                                                            (APPLY-EXTENSIONALITY
                                                             1 :HIDE? T)
                                                            (("1"
                                                              (CASE-REPLACE
                                                               "x!2 = f!1(x!1)")
                                                              (("1"
                                                                (INST + "x!1")
                                                                NIL NIL)
                                                               ("2" (ASSERT)
                                                                (("2" (SKOSIMP)
                                                                  (("2"
                                                                    (TYPEPRED
                                                                     "x!3")
                                                                    (("2"
                                                                      (INST -8
                                                                       "a!1")
                                                                      (("2"
                                                                        (EXPAND
                                                                         "constant_over?")
                                                                        (("2"
                                                                          (SKOSIMP)
                                                                          (("2"
                                                                            (INST-CP
                                                                             -8
                                                                             "x!1")
                                                                            (("2"
                                                                              (INST
                                                                               -8
                                                                               "x!3")
                                                                              (("2"
                                                                                (ASSERT)
                                                                                NIL
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (ASSERT)
                              (("2" (EXPAND "Union")
                                (("2" (SKOSIMP)
                                  (("2" (TYPEPRED "a!1")
                                    (("2" (EXPAND "singleton")
                                      (("2"
                                        (LEMMA "extensionality_postulate"
                                         ("f" "image[T, real](f!1, a!1)" "g"
                                          "({y: real | y = y!1})"))
                                        (("2" (REPLACE -1 -3 RL)
                                          (("2" (HIDE -1)
                                            (("2" (INST - "y!1")
                                              (("2" (EXPAND "image")
                                                (("2" (SKOSIMP)
                                                  (("2" (TYPEPRED "x!2")
                                                    (("2" (INST -7 "a!1")
                                                      (("2"
                                                        (EXPAND
                                                         "constant_over?")
                                                        (("2" (SKOSIMP)
                                                          (("2"
                                                            (INST-CP -7 "x!1")
                                                            (("2"
                                                              (INST -7 "x!2")
                                                              (("2" (ASSERT)
                                                                NIL NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|simple_def1| FORMULA-DECL NIL |measure_space| NIL)
    (T FORMAL-TYPE-DECL NIL |measure_space| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) NIL NIL
    (|emptyset| CONST-DECL "set" |sets| NIL) NIL NIL NIL NIL NIL NIL NIL NIL
    NIL (|finite_emptyset| NAME-JUDGEMENT "finite_set" |finite_sets| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (|extensionality_postulate| FORMULA-DECL NIL |functions| NIL) NIL NIL
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (|finite_subset| FORMULA-DECL NIL |finite_sets| NIL)
    (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])"
     |sets_lemmas| NIL)
    NIL NIL NIL NIL (|choose| CONST-DECL "(p)" |sets| NIL) NIL NIL NIL
    (|subset?| CONST-DECL "bool" |sets| NIL)
    (|sigma_algebra?| CONST-DECL "bool" |subset_algebra_def| NIL)
    (|sigma_algebra| NONEMPTY-TYPE-EQ-DECL NIL |subset_algebra_def| NIL)
    (S FORMAL-CONST-DECL "sigma_algebra" |measure_space| NIL)
    (|finite_countable| JUDGEMENT-TCC NIL |countable_props| |sets_aux|)
    (|sigma_algebra_union?| CONST-DECL "bool" |subset_algebra_def| NIL) NIL NIL
    NIL NIL (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|setofsets| TYPE-EQ-DECL NIL |sets| NIL)
    (|finite_partition?| CONST-DECL "bool" |partitions| NIL) NIL
    (|finite_partition| NONEMPTY-TYPE-EQ-DECL NIL |partitions| NIL)
    (|constant_over?| CONST-DECL "bool" |measure_space| NIL)
    (|measurable_set?| CONST-DECL "bool" |measure_space_def| NIL)
    (|member| CONST-DECL "bool" |sets| NIL) NIL NIL
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|extensionality| FORMULA-DECL NIL |sets_lemmas| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) NIL NIL NIL
    (|Union_surjective| NAME-JUDGEMENT "(surjective?[setofsets[T], set[T]])"
     |sets_lemmas| NIL)
    (|Union| CONST-DECL "set" |sets| NIL) NIL NIL NIL
    (|intersection| CONST-DECL "set" |sets| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|disjoint?| CONST-DECL "bool" |sets| NIL)
    (|partition?| CONST-DECL "bool" |partitions| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|finite_image| JUDGEMENT-TCC NIL |function_image_aux| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) NIL NIL
    (|singleton?| CONST-DECL "bool" |sets| NIL)
    (|singleton| CONST-DECL "(singleton?)" |sets| NIL)
    (|fullset| CONST-DECL "set" |sets| NIL))
   SHOSTAK)
  (|simple_def2-1| |nil| 3390408417
   ("" (SKOSIMP)
    (("" (REWRITE "simple_def1")
      (("" (SPLIT)
        (("1" (SKOSIMP*)
          (("1"
            (NAME "PP"
                  "image[real,set[T]](lambda y: inverse_image[T,real](f!1,singleton[real](y)),image[T,real](f!1, fullset[T]))")
            (("1" (INST + "PP")
              (("1" (SPLIT 1)
                (("1" (EXPAND "measurable_set?")
                  (("1" (EXPAND "every")
                    (("1" (SKOSIMP)
                      (("1" (TYPEPRED "x!1")
                        (("1" (REPLACE -2 -1 RL)
                          (("1" (EXPAND "fullset" -1)
                            (("1" (EXPAND "singleton" -1)
                              (("1" (EXPAND "inverse_image" -1)
                                (("1" (EXPAND "member")
                                  (("1" (EXPAND "image" -1)
                                    (("1" (SKOSIMP)
                                      (("1" (TYPEPRED "x!2")
                                        (("1" (SKOSIMP)
                                          (("1" (REPLACE -1)
                                            (("1" (INST -5 "f!1(x!3)")
                                              (("1"
                                                (LEMMA "extensionality"
                                                 ("a" "{x | f!1(x!3) = f!1(x)}"
                                                  "b"
                                                  "{x: T | f!1(x) = f!1(x!3)}"))
                                                (("1" (SPLIT -1)
                                                  (("1" (ASSERT) NIL NIL)
                                                   ("2" (HIDE-ALL-BUT 1)
                                                    (("2" (GRIND) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (EXPAND "fullset")
                                                (("2" (EXPAND "image")
                                                  (("2" (INST + "x!3") NIL
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (EXPAND "every")
                  (("2" (SKOSIMP)
                    (("2" (TYPEPRED "x!1")
                      (("2" (EXPAND "PP")
                        (("2" (HIDE -2)
                          (("2" (EXPAND "constant_over?")
                            (("2" (EXPAND "fullset")
                              (("2" (EXPAND "singleton")
                                (("2" (EXPAND "inverse_image")
                                  (("2" (EXPAND "member")
                                    (("2" (EXPAND "image")
                                      (("2" (SKOSIMP*)
                                        (("2" (TYPEPRED "x!2")
                                          (("2" (SKOSIMP)
                                            (("2" (INST + "x!2")
                                              (("2" (SKOSIMP)
                                                (("2" (TYPEPRED "x!4")
                                                  (("2" (REPLACE -3)
                                                    (("2" (ASSERT) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2"
                (LEMMA "finite_image[real,set[T]]"
                 ("f"
                  "LAMBDA y: inverse_image[T, real](f!1, singleton[real](y))"
                  "S" "image[T, real](f!1, fullset[T])"))
                (("1" (REPLACE -2)
                  (("1" (EXPAND "finite_partition?")
                    (("1" (ASSERT)
                      (("1" (EXPAND "partition?")
                        (("1" (SPLIT)
                          (("1" (APPLY-EXTENSIONALITY 1 :HIDE? T)
                            (("1" (EXPAND "fullset")
                              (("1" (EXPAND "Union")
                                (("1"
                                  (NAME "FF"
                                        "LAMBDA y: inverse_image[T, real](f!1, singleton[real](y))")
                                  (("1" (REPLACE -1)
                                    (("1" (INST + "FF(f!1(x!1))")
                                      (("1" (EXPAND "FF" 1)
                                        (("1" (EXPAND "singleton")
                                          (("1" (EXPAND "inverse_image")
                                            (("1" (EXPAND "member")
                                              (("1" (PROPAX) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (EXPAND "PP" 1)
                                        (("2" (EXPAND "image")
                                          (("2" (EXPAND "FF" 1)
                                            (("2" (INST + "f!1(x!1)")
                                              (("2" (INST + "x!1")
                                                (("2" (EXPAND "fullset")
                                                  (("2" (PROPAX) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (SKOSIMP*)
                            (("2" (TYPEPRED "x!1")
                              (("2" (TYPEPRED "y!1")
                                (("2" (EXPAND "PP")
                                  (("2" (EXPAND "image" -1 1)
                                    (("2" (EXPAND "image" -2 1)
                                      (("2" (SKOSIMP*)
                                        (("2" (CASE-REPLACE "x!2=x!3")
                                          (("1" (ASSERT) NIL NIL)
                                           ("2" (EXPAND "singleton")
                                            (("2" (EXPAND "inverse_image")
                                              (("2" (EXPAND "member")
                                                (("2" (REPLACE -1)
                                                  (("2" (REPLACE -2)
                                                    (("2" (HIDE 2 -1 -2)
                                                      (("2"
                                                        (EXPAND "disjoint?")
                                                        (("2"
                                                          (EXPAND
                                                           "intersection")
                                                          (("2"
                                                            (EXPAND "member")
                                                            (("2"
                                                              (EXPAND "empty?")
                                                              (("2" (SKOSIMP)
                                                                (("2"
                                                                  (EXPAND
                                                                   "member")
                                                                  (("2"
                                                                    (FLATTEN)
                                                                    (("2"
                                                                      (ASSERT)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (PROPAX) NIL NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (SKOSIMP*)
          (("2" (TYPEPRED "P!1")
            (("2" (SPLIT)
              (("1" (EXPAND "finite_partition?")
                (("1" (FLATTEN)
                  (("1" (EXPAND "partition?")
                    (("1" (FLATTEN)
                      (("1" (CASE "exists x: true")
                        (("1" (NAME "PP" "{X | P!1(X) & nonempty?(X)}")
                          (("1" (CASE "nonempty?(PP) & subset?(PP,P!1)")
                            (("1" (FLATTEN)
                              (("1" (CASE "Union(PP)=fullset[T]")
                                (("1"
                                  (CASE
                                      "forall (X:(PP)): singleton?(image(f!1,X))")
                                  (("1"
                                    (NAME "FF"
                                          "lambda (X:(PP)): choose[real](image[T,real](f!1,X))")
                                    (("1"
                                      (CASE-REPLACE
                                       "image[T,real](f!1,fullset[T]) = image(FF,PP)")
                                      (("1" (HIDE -1)
                                        (("1"
                                          (LEMMA "finite_image[(PP),real]"
                                           ("f" "FF" "S" "PP"))
                                          (("1" (PROPAX) NIL NIL)
                                           ("2" (HIDE-ALL-BUT (-5 -10 1))
                                            (("2"
                                              (LEMMA "finite_subset[set[T]]"
                                               ("s" "PP" "A" "P!1"))
                                              (("1" (ASSERT)
                                                (("1" (HIDE -2 -3)
                                                  (("1" (EXPAND "restrict")
                                                    (("1" (EXPAND "is_finite")
                                                      (("1" (PROPAX) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (PROPAX) NIL NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (HIDE 2)
                                        (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T)
                                          (("2" (REPLACE -3 1 RL)
                                            (("2" (EXPAND "restrict")
                                              (("2" (EXPAND "image")
                                                (("2"
                                                  (CASE-REPLACE
                                                   "EXISTS (x: (Union(PP))): x!1 = f!1(x)")
                                                  (("1" (SKOSIMP)
                                                    (("1" (TYPEPRED "x!2")
                                                      (("1" (EXPAND "Union")
                                                        (("1" (SKOSIMP)
                                                          (("1" (INST + "a!1")
                                                            (("1" (HIDE -3)
                                                              (("1"
                                                                (EXPAND "FF")
                                                                (("1"
                                                                  (TYPEPRED
                                                                   "choose[real](image[T, real](f!1, a!1))")
                                                                  (("1"
                                                                    (NAME-REPLACE
                                                                     "XX"
                                                                     "choose[real](image[T, real](f!1, a!1))")
                                                                    (("1"
                                                                      (EXPAND
                                                                       "image")
                                                                      (("1"
                                                                        (SKOSIMP)
                                                                        (("1"
                                                                          (TYPEPRED
                                                                           "x!3")
                                                                          (("1"
                                                                            (TYPEPRED
                                                                             "a!1")
                                                                            (("1"
                                                                              (EXPAND
                                                                               "subset?")
                                                                              (("1"
                                                                                (INST
                                                                                 -9
                                                                                 "a!1")
                                                                                (("1"
                                                                                  (ASSERT)
                                                                                  (("1"
                                                                                    (EXPAND
                                                                                     "every")
                                                                                    (("1"
                                                                                      (INST
                                                                                       -16
                                                                                       "a!1")
                                                                                      (("1"
                                                                                        (EXPAND
                                                                                         "constant_over?")
                                                                                        (("1"
                                                                                          (SKOSIMP*)
                                                                                          (("1"
                                                                                            (INST-CP
                                                                                             -15
                                                                                             "x!2")
                                                                                            (("1"
                                                                                              (INST
                                                                                               -15
                                                                                               "x!3")
                                                                                              (("1"
                                                                                                (ASSERT)
                                                                                                NIL
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (REPLACE 1 2)
                                                    (("2" (ASSERT)
                                                      (("2" (SKOSIMP*)
                                                        (("2" (TYPEPRED "x!2")
                                                          (("2"
                                                            (EXPAND "subset?")
                                                            (("2"
                                                              (INST -7 "x!2")
                                                              (("2" (ASSERT)
                                                                (("2"
                                                                  (EXPAND
                                                                   "every" -13)
                                                                  (("2"
                                                                    (INST -13
                                                                     "x!2")
                                                                    (("2"
                                                                      (EXPAND
                                                                       "constant_over?")
                                                                      (("2"
                                                                        (SKOSIMP)
                                                                        (("2"
                                                                          (EXPAND
                                                                           "FF")
                                                                          (("2"
                                                                            (HIDE
                                                                             -3)
                                                                            (("2"
                                                                              (TYPEPRED
                                                                               "choose[real](image[T, real](f!1, x!2))")
                                                                              (("2"
                                                                                (REPLACE
                                                                                 -3
                                                                                 *
                                                                                 RL)
                                                                                (("2"
                                                                                  (EXPAND
                                                                                   "image")
                                                                                  (("2"
                                                                                    (SKOSIMP)
                                                                                    (("2"
                                                                                      (INST
                                                                                       +
                                                                                       "x!4")
                                                                                      (("2"
                                                                                        (REPLACE
                                                                                         -5
                                                                                         1)
                                                                                        (("2"
                                                                                          (EXPAND
                                                                                           "fullset")
                                                                                          (("2"
                                                                                            (PROPAX)
                                                                                            NIL
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (SKOSIMP)
                                      (("2" (INST - "X!1")
                                        (("2" (HIDE-ALL-BUT (-1 1))
                                          (("2" (EXPAND "singleton?")
                                            (("2" (SKOSIMP)
                                              (("2" (TYPEPRED "x!1")
                                                (("2" (EXPAND "nonempty?")
                                                  (("2" (EXPAND "empty?")
                                                    (("2" (INST - "x!1")
                                                      (("2" (ASSERT) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (HIDE 2)
                                    (("2" (SKOSIMP)
                                      (("2" (TYPEPRED "X!1")
                                        (("2" (EXPAND "every")
                                          (("2" (EXPAND "subset?")
                                            (("2" (INST -4 "X!1")
                                              (("2" (ASSERT)
                                                (("2" (INST -11 "X!1")
                                                  (("2"
                                                    (EXPAND "constant_over?")
                                                    (("2" (SKOLEM! -11)
                                                      (("2" (EXPAND "image")
                                                        (("2"
                                                          (EXPAND "singleton?")
                                                          (("2" (INST + "y!1")
                                                            (("1" (SKOSIMP)
                                                              (("1"
                                                                (TYPEPRED
                                                                 "y!2")
                                                                (("1" (SKOLEM!)
                                                                  (("1"
                                                                    (TYPEPRED
                                                                     "x!1")
                                                                    (("1"
                                                                      (INST -13
                                                                       "x!1")
                                                                      (("1"
                                                                        (ASSERT)
                                                                        NIL
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL)
                                                             ("2"
                                                              (EXPAND "PP" -1)
                                                              (("2"
                                                                (EXPAND
                                                                 "nonempty?")
                                                                (("2"
                                                                  (EXPAND
                                                                   "empty?" 2)
                                                                  (("2"
                                                                    (SKOLEM! 2)
                                                                    (("2"
                                                                      (INST +
                                                                       "x!1")
                                                                      (("1"
                                                                        (ASSERT)
                                                                        (("1"
                                                                          (INST
                                                                           -10
                                                                           "x!1")
                                                                          NIL
                                                                          NIL))
                                                                        NIL)
                                                                       ("2"
                                                                        (ASSERT)
                                                                        NIL
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (HIDE-ALL-BUT (-5 -1 -2 1))
                                  (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T)
                                    (("2"
                                      (LEMMA "extensionality_postulate"
                                       ("f" "Union(P!1)" "g" "fullset[T]"))
                                      (("2" (REPLACE -1 -4 RL)
                                        (("2" (INST -4 "x!1")
                                          (("2" (EXPAND "fullset")
                                            (("2" (EXPAND "Union")
                                              (("2" (SKOSIMP)
                                                (("2" (HIDE -1 -2)
                                                  (("2" (EXPAND "subset?")
                                                    (("2" (TYPEPRED "a!1")
                                                      (("2" (INST + "a!1")
                                                        (("2" (EXPAND "PP")
                                                          (("2"
                                                            (EXPAND
                                                             "nonempty?")
                                                            (("2"
                                                              (EXPAND "empty?")
                                                              (("2"
                                                                (EXPAND
                                                                 "member")
                                                                (("2" (SKOSIMP)
                                                                  (("2"
                                                                    (INST -
                                                                     "x!1")
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (HIDE-ALL-BUT (-2 -3 1))
                              (("2" (SPLIT)
                                (("1" (EXPAND "nonempty?")
                                  (("1" (EXPAND "empty?")
                                    (("1" (SKOSIMP)
                                      (("1"
                                        (LEMMA "extensionality_postulate"
                                         ("f" "Union(P!1)" "g" "fullset[T]"))
                                        (("1" (REPLACE -1 -3 RL)
                                          (("1" (INST -3 "x!1")
                                            (("1" (EXPAND "fullset")
                                              (("1" (HIDE -1)
                                                (("1" (EXPAND "Union")
                                                  (("1" (SKOSIMP)
                                                    (("1" (TYPEPRED "a!1")
                                                      (("1" (EXPAND "PP")
                                                        (("1" (EXPAND "member")
                                                          (("1" (INST - "a!1")
                                                            (("1" (ASSERT)
                                                              (("1"
                                                                (EXPAND
                                                                 "nonempty?")
                                                                (("1"
                                                                  (EXPAND
                                                                   "empty?")
                                                                  (("1"
                                                                    (INST -
                                                                     "x!1")
                                                                    (("1"
                                                                      (ASSERT)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (EXPAND "PP")
                                  (("2" (EXPAND "subset?")
                                    (("2" (EXPAND "member")
                                      (("2" (SKOSIMP*) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (CASE-REPLACE "fullset[T]=emptyset[T]")
                          (("1"
                            (LEMMA "extensionality"
                             ("a" "image(f!1, emptyset[T])" "b"
                              "emptyset[real]"))
                            (("1" (SPLIT -1)
                              (("1" (REPLACE -1) (("1" (ASSERT) NIL NIL)) NIL)
                               ("2" (SKOSIMP)
                                (("2" (EXPAND "emptyset")
                                  (("2" (EXPAND "member")
                                    (("2" (EXPAND "image")
                                      (("2" (SKOSIMP) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (APPLY-EXTENSIONALITY 1 :HIDE? T)
                            (("2" (EXPAND "emptyset")
                              (("2" (INST + "x!1") NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (SKOSIMP)
                (("2" (EXPAND "every")
                  (("2" (EXPAND "measurable_set?")
                    (("2"
                      (CASE-REPLACE
                       "{x | y!1 = f!1(x)} = Union({X:set[T] | P!1(X) & image[T,real](f!1,X) = singleton[real](y!1)})")
                      (("1" (HIDE -1)
                        (("1"
                          (CASE "subset?({X: set[T] |
                 P!1(X) & image[T, real](f!1, X) = singleton[real](y!1)},P!1)")
                          (("1" (EXPAND "finite_partition?")
                            (("1" (FLATTEN)
                              (("1"
                                (NAME-REPLACE "SS" "{X: set[T] |
                 P!1(X) & image[T, real](f!1, X) = singleton[real](y!1)}")
                                (("1" (TYPEPRED "S")
                                  (("1" (EXPAND "sigma_algebra?")
                                    (("1" (FLATTEN)
                                      (("1" (EXPAND "sigma_algebra_union?")
                                        (("1" (INST - "SS")
                                          (("1" (SPLIT -3)
                                            (("1" (ASSERT) NIL NIL)
                                             ("2"
                                              (LEMMA "finite_subset[set[T]]"
                                               ("s" "SS" "A" "P!1"))
                                              (("1" (ASSERT)
                                                (("1"
                                                  (LEMMA
                                                   "finite_countable[set[T]]"
                                                   ("x" "SS"))
                                                  (("1" (PROPAX) NIL NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (PROPAX) NIL NIL))
                                              NIL)
                                             ("3" (SKOSIMP)
                                              (("3" (EXPAND "subset?")
                                                (("3" (INST - "x!1")
                                                  (("3" (INST -6 "x!1")
                                                    (("1" (ASSERT) NIL NIL)
                                                     ("2" (ASSERT) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (HIDE-ALL-BUT 1)
                            (("2" (EXPAND "subset?")
                              (("2" (EXPAND "member")
                                (("2" (SKOSIMP*) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (APPLY-EXTENSIONALITY 1 :HIDE? T)
                        (("2" (HIDE 2)
                          (("2" (CASE-REPLACE "y!1=f!1(x!1)")
                            (("1" (EXPAND "Union")
                              (("1" (EXPAND "finite_partition?")
                                (("1" (FLATTEN)
                                  (("1" (EXPAND "partition?")
                                    (("1" (FLATTEN)
                                      (("1"
                                        (LEMMA "extensionality_postulate"
                                         ("f" "Union(P!1)" "g" "fullset[T]"))
                                        (("1" (REPLACE -1 -3 RL)
                                          (("1" (HIDE -1)
                                            (("1" (INST -2 "x!1")
                                              (("1" (EXPAND "fullset")
                                                (("1" (EXPAND "Union")
                                                  (("1" (SKOSIMP)
                                                    (("1" (INST + "a!1")
                                                      (("1"
                                                        (EXPAND "singleton")
                                                        (("1" (EXPAND "image")
                                                          (("1"
                                                            (APPLY-EXTENSIONALITY
                                                             1 :HIDE? T)
                                                            (("1"
                                                              (CASE-REPLACE
                                                               "x!2 = f!1(x!1)")
                                                              (("1"
                                                                (INST + "x!1")
                                                                NIL NIL)
                                                               ("2" (ASSERT)
                                                                (("2" (SKOSIMP)
                                                                  (("2"
                                                                    (TYPEPRED
                                                                     "x!3")
                                                                    (("2"
                                                                      (INST -8
                                                                       "a!1")
                                                                      (("2"
                                                                        (EXPAND
                                                                         "constant_over?")
                                                                        (("2"
                                                                          (SKOSIMP)
                                                                          (("2"
                                                                            (INST-CP
                                                                             -8
                                                                             "x!1")
                                                                            (("2"
                                                                              (INST
                                                                               -8
                                                                               "x!3")
                                                                              (("2"
                                                                                (ASSERT)
                                                                                NIL
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (ASSERT)
                              (("2" (EXPAND "Union")
                                (("2" (SKOSIMP)
                                  (("2" (TYPEPRED "a!1")
                                    (("2" (EXPAND "singleton")
                                      (("2"
                                        (LEMMA "extensionality_postulate"
                                         ("f" "image[T, real](f!1, a!1)" "g"
                                          "({y: real | y = y!1})"))
                                        (("2" (REPLACE -1 -3 RL)
                                          (("2" (HIDE -1)
                                            (("2" (INST - "y!1")
                                              (("2" (EXPAND "image")
                                                (("2" (SKOSIMP)
                                                  (("2" (TYPEPRED "x!2")
                                                    (("2" (INST -7 "a!1")
                                                      (("2"
                                                        (EXPAND
                                                         "constant_over?")
                                                        (("2" (SKOSIMP)
                                                          (("2"
                                                            (INST-CP -7 "x!1")
                                                            (("2"
                                                              (INST -7 "x!2")
                                                              (("2" (ASSERT)
                                                                NIL NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|emptyset| CONST-DECL "set" |sets| NIL)
    (|finite_emptyset| NAME-JUDGEMENT "finite_set" |finite_sets| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (|extensionality_postulate| FORMULA-DECL NIL |functions| NIL)
    (|finite_subset| FORMULA-DECL NIL |finite_sets| NIL)
    (|choose| CONST-DECL "(p)" |sets| NIL)
    (|subset?| CONST-DECL "bool" |sets| NIL)
    (|sigma_algebra?| CONST-DECL "bool" |subset_algebra_def| NIL)
    (|sigma_algebra| NONEMPTY-TYPE-EQ-DECL NIL |subset_algebra_def| NIL)
    (|finite_countable| JUDGEMENT-TCC NIL |countable_props| |sets_aux|)
    (|sigma_algebra_union?| CONST-DECL "bool" |subset_algebra_def| NIL)
    (|setofsets| TYPE-EQ-DECL NIL |sets| NIL)
    (|finite_partition?| CONST-DECL "bool" |partitions| NIL)
    (|finite_partition| NONEMPTY-TYPE-EQ-DECL NIL |partitions| NIL)
    (|measurable_set?| CONST-DECL "bool" |measure_space_def| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|Union| CONST-DECL "set" |sets| NIL)
    (|intersection| CONST-DECL "set" |sets| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|disjoint?| CONST-DECL "bool" |sets| NIL)
    (|partition?| CONST-DECL "bool" |partitions| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|finite_image| JUDGEMENT-TCC NIL |function_image_aux| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|singleton?| CONST-DECL "bool" |sets| NIL)
    (|singleton| CONST-DECL "(singleton?)" |sets| NIL)
    (|fullset| CONST-DECL "set" |sets| NIL))
   SHOSTAK))
 (|simple_def3| 0
  (|simple_def3-1| |nil| 3392345048
   ("" (SKOSIMP)
    (("" (SPLIT)
      (("1" (FLATTEN)
        (("1" (REWRITE "simple_def1")
          (("1" (FLATTEN)
            (("1" (NAME "NZ" "lambda f: {y| EXISTS x: f(x)=y & y/=0}")
              (("1"
                (CASE "forall f: subset?(NZ(f),image[T,real](f,fullset[T]))")
                (("1" (CASE "forall h: is_finite[real](NZ(h))")
                  (("1"
                    (CASE "FORALL (h: simple, n: nat):
        card(NZ(h)) = n =>
         EXISTS c1, c2, h1, h2: c1 * h1 + c2 * h2 = h")
                    (("1" (CASE "nonempty?(fullset[T])")
                      (("1" (INST - "f!1" "card(NZ(f!1))")
                        (("1" (INST - "f!1")
                          (("1" (REWRITE "simple_def1" 1)
                            (("1" (ASSERT) NIL NIL)) NIL))
                          NIL)
                         ("2" (REWRITE "simple_def1" 1)
                          (("2" (ASSERT) NIL NIL)) NIL))
                        NIL)
                       ("2" (EXPAND "nonempty?")
                        (("2" (HIDE-ALL-BUT (-1 1))
                          (("2"
                            (INST + "0" "0" "phi(fullset[T])"
                             "phi(fullset[T])")
                            (("2" (EXPAND "*")
                              (("2" (EXPAND "+")
                                (("2"
                                  (LEMMA "extensionality[T,real]"
                                   ("f" "LAMBDA (x_1: T): 0" "g" "f!1"))
                                  (("2" (SPLIT -1)
                                    (("1" (PROPAX) NIL NIL)
                                     ("2" (HIDE 2)
                                      (("2" (SKOSIMP)
                                        (("2" (EXPAND "fullset")
                                          (("2" (EXPAND "empty?")
                                            (("2" (INST - "x!1")
                                              (("2" (EXPAND "member")
                                                (("2" (PROPAX) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (HIDE-ALL-BUT (-1 1))
                      (("2" (INDUCT "n")
                        (("1" (SKOSIMP)
                          (("1" (INST - "h!1")
                            (("1" (REWRITE "card_empty?" -1)
                              (("1" (HIDE -2)
                                (("1"
                                  (INST + "0" "0" "phi(emptyset[T])"
                                   "phi(emptyset[T])")
                                  (("1" (EXPAND "*")
                                    (("1" (EXPAND "+")
                                      (("1"
                                        (LEMMA "extensionality[T,real]"
                                         ("f" "LAMBDA (x_1: T): 0" "g" "h!1"))
                                        (("1" (SPLIT -1)
                                          (("1" (PROPAX) NIL NIL)
                                           ("2" (HIDE 2)
                                            (("2" (SKOSIMP)
                                              (("2" (EXPAND "NZ")
                                                (("2" (EXPAND "empty?")
                                                  (("2" (EXPAND "member")
                                                    (("2" (INST - "h!1(x!1)")
                                                      (("2" (INST + "x!1")
                                                        (("2" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (SKOSIMP*)
                          (("2" (LEMMA "nonempty_card[real]" ("S" "NZ(h!1)"))
                            (("2" (ASSERT)
                              (("2" (LEMMA "card_rest[real]" ("S" "NZ(h!1)"))
                                (("2" (SPLIT -1)
                                  (("1" (REPLACE -4)
                                    (("1" (ASSERT)
                                      (("1"
                                        (LEMMA "choose_rest[real]"
                                         ("a" "NZ(h!1)"))
                                        (("1"
                                          (LEMMA "choose_member[real]"
                                           ("a" "NZ(h!1)"))
                                          (("1"
                                            (LEMMA "choose_not_member[real]"
                                             ("a" "NZ(h!1)"))
                                            (("1"
                                              (NAME-REPLACE "C"
                                               "choose[real](NZ(h!1))")
                                              (("1" (TYPEPRED "h!1")
                                                (("1"
                                                  (REWRITE "simple_def1" -1)
                                                  (("1" (FLATTEN)
                                                    (("1" (HIDE -1)
                                                      (("1"
                                                        (EXPAND "nonempty?")
                                                        (("1" (REPLACE 1 *)
                                                          (("1"
                                                            (EXPAND "member"
                                                                    -2)
                                                            (("1" (INST - "C")
                                                              (("1"
                                                                (NAME "H"
                                                                      "h!1-C*phi({x | C = h!1(x)})")
                                                                (("1"
                                                                  (INST -6 "H")
                                                                  (("1"
                                                                    (SPLIT -6)
                                                                    (("1"
                                                                      (SKOSIMP)
                                                                      (("1"
                                                                        (INST +
                                                                         "1"
                                                                         "C"
                                                                         "H"
                                                                         "phi({x | C = h!1(x)})")
                                                                        (("1"
                                                                          (ASSERT)
                                                                          (("1"
                                                                            (REPLACE
                                                                             -2
                                                                             3
                                                                             RL)
                                                                            (("1"
                                                                              (APPLY-EXTENSIONALITY
                                                                               3
                                                                               :HIDE?
                                                                               T)
                                                                              (("1"
                                                                                (HIDE-ALL-BUT
                                                                                 1)
                                                                                (("1"
                                                                                  (GRIND)
                                                                                  NIL
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL)
                                                                         ("2"
                                                                          (ASSERT)
                                                                          (("2"
                                                                            (EXPAND
                                                                             "measurable_set?")
                                                                            (("2"
                                                                              (ASSERT)
                                                                              (("2"
                                                                                (LEMMA
                                                                                 "phi_is_simple"
                                                                                 ("X"
                                                                                  "{x | C = h!1(x)}"))
                                                                                (("2"
                                                                                  (PROPAX)
                                                                                  NIL
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL)
                                                                         ("3"
                                                                          (REPLACE
                                                                           -1 1
                                                                           RL)
                                                                          (("3"
                                                                            (HIDE-ALL-BUT
                                                                             1)
                                                                            (("3"
                                                                              (TYPEPRED
                                                                               "h1!1")
                                                                              (("3"
                                                                                (TYPEPRED
                                                                                 "h2!1")
                                                                                (("3"
                                                                                  (LEMMA
                                                                                   "simple_scal"
                                                                                   ("c"
                                                                                    "c1!1"
                                                                                    "h"
                                                                                    "h1!1"))
                                                                                  (("3"
                                                                                    (LEMMA
                                                                                     "simple_scal"
                                                                                     ("c"
                                                                                      "c2!1"
                                                                                      "h"
                                                                                      "h2!1"))
                                                                                    (("3"
                                                                                      (LEMMA
                                                                                       "simple_add"
                                                                                       ("h1"
                                                                                        "*[T](c1!1, h1!1)"
                                                                                        "h2"
                                                                                        "*[T](c2!1, h2!1)"))
                                                                                      (("3"
                                                                                        (PROPAX)
                                                                                        NIL
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL)
                                                                     ("2"
                                                                      (CASE-REPLACE
                                                                       "NZ(H) = rest(NZ(h!1))")
                                                                      (("2"
                                                                        (HIDE 5
                                                                         2 -5
                                                                         -6)
                                                                        (("2"
                                                                          (APPLY-EXTENSIONALITY
                                                                           1
                                                                           :HIDE?
                                                                           T)
                                                                          (("2"
                                                                            (LEMMA
                                                                             "extensionality_postulate[real,bool]"
                                                                             ("f"
                                                                              "add(C, rest(NZ(h!1)))"
                                                                              "g"
                                                                              "NZ(h!1)"))
                                                                            (("2"
                                                                              (REPLACE
                                                                               -1
                                                                               -5
                                                                               RL)
                                                                              (("2"
                                                                                (HIDE
                                                                                 -1)
                                                                                (("2"
                                                                                  (INST
                                                                                   -4
                                                                                   "x!1")
                                                                                  (("2"
                                                                                    (EXPAND
                                                                                     "add"
                                                                                     -4)
                                                                                    (("2"
                                                                                      (EXPAND
                                                                                       "member")
                                                                                      (("2"
                                                                                        (CASE
                                                                                            "forall x: h!1(x) = C => H(x)=0")
                                                                                        (("1"
                                                                                          (CASE
                                                                                              "forall x: h!1(x)/=C => h!1(x)=H(x)")
                                                                                          (("1"
                                                                                            (CASE-REPLACE
                                                                                             "rest(NZ(h!1))(x!1)")
                                                                                            (("1"
                                                                                              (CASE-REPLACE
                                                                                               "x!1=C")
                                                                                              (("1"
                                                                                                (EXPAND
                                                                                                 "NZ")
                                                                                                (("1"
                                                                                                  (SKOLEM!
                                                                                                   -7)
                                                                                                  (("1"
                                                                                                    (INST
                                                                                                     -2
                                                                                                     "x!2")
                                                                                                    (("1"
                                                                                                      (FLATTEN)
                                                                                                      (("1"
                                                                                                        (ASSERT)
                                                                                                        (("1"
                                                                                                          (INST
                                                                                                           +
                                                                                                           "x!2")
                                                                                                          (("1"
                                                                                                            (ASSERT)
                                                                                                            NIL
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL)
                                                                                             ("2"
                                                                                              (REPLACE
                                                                                               1
                                                                                               2)
                                                                                              (("2"
                                                                                                (ASSERT)
                                                                                                (("2"
                                                                                                  (HIDE
                                                                                                   2)
                                                                                                  (("2"
                                                                                                    (CASE-REPLACE
                                                                                                     "x!1=C")
                                                                                                    (("1"
                                                                                                      (EXPAND
                                                                                                       "NZ"
                                                                                                       -4)
                                                                                                      (("1"
                                                                                                        (SKOSIMP)
                                                                                                        (("1"
                                                                                                          (INST
                                                                                                           -2
                                                                                                           "x!2")
                                                                                                          (("1"
                                                                                                            (ASSERT)
                                                                                                            (("1"
                                                                                                              (REPLACE
                                                                                                               -4)
                                                                                                              (("1"
                                                                                                                (CASE-REPLACE
                                                                                                                 "h!1(x!2) = C")
                                                                                                                (("1"
                                                                                                                  (ASSERT)
                                                                                                                  (("1"
                                                                                                                    (INST
                                                                                                                     -3
                                                                                                                     "x!2")
                                                                                                                    (("1"
                                                                                                                      (ASSERT)
                                                                                                                      NIL
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL)
                                                                                                                 ("2"
                                                                                                                  (REPLACE
                                                                                                                   1)
                                                                                                                  (("2"
                                                                                                                    (INST
                                                                                                                     -2
                                                                                                                     "x!2")
                                                                                                                    (("2"
                                                                                                                      (ASSERT)
                                                                                                                      NIL
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL)
                                                                                                     ("2"
                                                                                                      (EXPAND
                                                                                                       "NZ"
                                                                                                       -3)
                                                                                                      (("2"
                                                                                                        (SKOSIMP)
                                                                                                        (("2"
                                                                                                          (INST
                                                                                                           -2
                                                                                                           "x!2")
                                                                                                          (("2"
                                                                                                            (ASSERT)
                                                                                                            (("2"
                                                                                                              (INST
                                                                                                               -
                                                                                                               "x!2")
                                                                                                              (("2"
                                                                                                                (SPLIT
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (EXPAND
                                                                                                                   "rest"
                                                                                                                   2)
                                                                                                                  (("1"
                                                                                                                    (EXPAND
                                                                                                                     "remove")
                                                                                                                    (("1"
                                                                                                                      (EXPAND
                                                                                                                       "NZ"
                                                                                                                       2
                                                                                                                       2)
                                                                                                                      (("1"
                                                                                                                        (EXPAND
                                                                                                                         "member"
                                                                                                                         2)
                                                                                                                        (("1"
                                                                                                                          (SPLIT
                                                                                                                           2)
                                                                                                                          (("1"
                                                                                                                            (EXPAND
                                                                                                                             "/="
                                                                                                                             1)
                                                                                                                            (("1"
                                                                                                                              (EXPAND
                                                                                                                               "C"
                                                                                                                               1)
                                                                                                                              (("1"
                                                                                                                                (ASSERT)
                                                                                                                                NIL
                                                                                                                                NIL))
                                                                                                                              NIL))
                                                                                                                            NIL)
                                                                                                                           ("2"
                                                                                                                            (INST
                                                                                                                             +
                                                                                                                             "x!2")
                                                                                                                            (("2"
                                                                                                                              (ASSERT)
                                                                                                                              NIL
                                                                                                                              NIL))
                                                                                                                            NIL))
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL)
                                                                                                                 ("2"
                                                                                                                  (ASSERT)
                                                                                                                  NIL
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL)
                                                                                           ("2"
                                                                                            (SKOSIMP)
                                                                                            (("2"
                                                                                              (REPLACE
                                                                                               -2
                                                                                               2
                                                                                               RL)
                                                                                              (("2"
                                                                                                (EXPAND
                                                                                                 "-"
                                                                                                 2)
                                                                                                (("2"
                                                                                                  (EXPAND
                                                                                                   "*"
                                                                                                   2)
                                                                                                  (("2"
                                                                                                    (EXPAND
                                                                                                     "phi"
                                                                                                     2)
                                                                                                    (("2"
                                                                                                      (EXPAND
                                                                                                       "member")
                                                                                                      (("2"
                                                                                                        (ASSERT)
                                                                                                        NIL
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL)
                                                                                         ("2"
                                                                                          (SKOSIMP)
                                                                                          (("2"
                                                                                            (REPLACE
                                                                                             -2
                                                                                             1
                                                                                             RL)
                                                                                            (("2"
                                                                                              (EXPAND
                                                                                               "-")
                                                                                              (("2"
                                                                                                (REPLACE
                                                                                                 -1)
                                                                                                (("2"
                                                                                                  (EXPAND
                                                                                                   "*"
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (EXPAND
                                                                                                     "phi"
                                                                                                     1)
                                                                                                    (("2"
                                                                                                      (EXPAND
                                                                                                       "member")
                                                                                                      (("2"
                                                                                                        (REPLACE
                                                                                                         -1)
                                                                                                        (("2"
                                                                                                          (ASSERT)
                                                                                                          NIL
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL)
                                                                   ("2"
                                                                    (REPLACE -1
                                                                             1
                                                                             RL)
                                                                    (("2"
                                                                      (HIDE-ALL-BUT
                                                                       (-2 1))
                                                                      (("2"
                                                                        (EXPAND
                                                                         "measurable_set?")
                                                                        (("2"
                                                                          (LEMMA
                                                                           "phi_is_simple"
                                                                           ("X"
                                                                            "{x | C = h!1(x)}"))
                                                                          (("1"
                                                                            (LEMMA
                                                                             "simple_scal"
                                                                             ("c"
                                                                              "C"
                                                                              "h"
                                                                              "phi({x | C = h!1(x)})"))
                                                                            (("1"
                                                                              (LEMMA
                                                                               "simple_diff"
                                                                               ("h1"
                                                                                "h!1"
                                                                                "h2"
                                                                                "*[T](C, phi({x | C = h!1(x)}))"))
                                                                              (("1"
                                                                                (PROPAX)
                                                                                NIL
                                                                                NIL)
                                                                               ("2"
                                                                                (PROPAX)
                                                                                NIL
                                                                                NIL))
                                                                              NIL)
                                                                             ("2"
                                                                              (PROPAX)
                                                                              NIL
                                                                              NIL))
                                                                            NIL)
                                                                           ("2"
                                                                            (PROPAX)
                                                                            NIL
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL)
                                                               ("2"
                                                                (HIDE-ALL-BUT
                                                                 (-1 1))
                                                                (("2"
                                                                  (EXPAND
                                                                   "fullset")
                                                                  (("2"
                                                                    (EXPAND
                                                                     "NZ")
                                                                    (("2"
                                                                      (EXPAND
                                                                       "image")
                                                                      (("2"
                                                                        (SKOSIMP)
                                                                        (("2"
                                                                          (INST
                                                                           +
                                                                           "x!1")
                                                                          (("2"
                                                                            (ASSERT)
                                                                            NIL
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (EXPAND "nonempty?")
                                    (("2" (PROPAX) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("3" (PROPAX) NIL NIL))
                    NIL)
                   ("2" (HIDE-ALL-BUT (-1 1))
                    (("2" (SKOSIMP)
                      (("2" (TYPEPRED "h!1")
                        (("2" (REWRITE "simple_def1")
                          (("2" (FLATTEN)
                            (("2" (INST -3 "h!1")
                              (("2" (HIDE -2)
                                (("2"
                                  (LEMMA "finite_subset[real]"
                                   ("s" "NZ(h!1)" "A"
                                    "image[T, real](h!1, fullset[T])"))
                                  (("1" (ASSERT) NIL NIL)
                                   ("2" (PROPAX) NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (SKOSIMP)
                  (("2" (EXPAND "subset?")
                    (("2" (SKOSIMP)
                      (("2" (HIDE-ALL-BUT (-1 1))
                        (("2" (EXPAND "member")
                          (("2" (EXPAND "NZ")
                            (("2" (EXPAND "fullset")
                              (("2" (EXPAND "image")
                                (("2" (SKOSIMP)
                                  (("2" (INST + "x!2") (("2" (ASSERT) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (SKOSIMP*)
        (("2" (LEMMA "simple_scal" ("c" "c1!1" "h" "h1!1"))
          (("2" (LEMMA "simple_scal" ("c" "c2!1" "h" "h2!1"))
            (("2" (REPLACE -3 1 :DIR RL) (("2" (REWRITE "simple_add") NIL NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|simple_def1| FORMULA-DECL NIL |measure_space| NIL)
    (T FORMAL-TYPE-DECL NIL |measure_space| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) NIL NIL
    (/= CONST-DECL "boolean" |notequal| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|simple?| CONST-DECL "bool" |measure_space| NIL)
    (|simple| NONEMPTY-TYPE-EQ-DECL NIL |measure_space| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|choose_member| FORMULA-DECL NIL |sets_lemmas| NIL)
    (|choose| CONST-DECL "(p)" |sets| NIL) NIL NIL NIL
    (|rest| CONST-DECL "set" |sets| NIL) (|remove| CONST-DECL "set" |sets| NIL)
    (|add| CONST-DECL "(nonempty?)" |sets| NIL)
    (|extensionality_postulate| FORMULA-DECL NIL |functions| NIL)
    (|simple_scal| JUDGEMENT-TCC NIL |measure_space| NIL)
    (|simple_add| JUDGEMENT-TCC NIL |measure_space| NIL)
    (S FORMAL-CONST-DECL "sigma_algebra" |measure_space| NIL)
    (|sigma_algebra| NONEMPTY-TYPE-EQ-DECL NIL |subset_algebra_def| NIL)
    (|sigma_algebra?| CONST-DECL "bool" |subset_algebra_def| NIL)
    (|setofsets| TYPE-EQ-DECL NIL |sets| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|phi_is_simple| JUDGEMENT-TCC NIL |measure_space| NIL)
    (|measurable_set?| CONST-DECL "bool" |measure_space_def| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|simple_diff| JUDGEMENT-TCC NIL |measure_space| NIL) NIL
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|choose_not_member| FORMULA-DECL NIL |sets_lemmas| NIL)
    (|choose_rest| FORMULA-DECL NIL |sets_lemmas| NIL)
    (|card_rest| FORMULA-DECL NIL |finite_sets| NIL)
    (|nonempty_card| FORMULA-DECL NIL |finite_sets| NIL)
    (|card_empty?| FORMULA-DECL NIL |finite_sets| NIL)
    (|emptyset| CONST-DECL "set" |sets| NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL) NIL NIL
    (|extensionality| FORMULA-DECL NIL |functions| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|phi| CONST-DECL "nat" |measure_space| NIL)
    (|phi_is_simple| APPLICATION-JUDGEMENT "simple" |measure_space| NIL)
    (|simple_scal| APPLICATION-JUDGEMENT "simple" |measure_space| NIL)
    (|simple_add| APPLICATION-JUDGEMENT "simple" |measure_space| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|Card| CONST-DECL "nat" |finite_sets| NIL)
    (|card| CONST-DECL "{n: nat | n = Card(S)}" |finite_sets| NIL) NIL NIL
    (|finite_subset| FORMULA-DECL NIL |finite_sets| NIL)
    (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])"
     |sets_lemmas| NIL)
    (|fullset| CONST-DECL "set" |sets| NIL) NIL
    (|subset?| CONST-DECL "bool" |sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL))
   SHOSTAK))
 (|bounded_measurable_TCC1| 0
  (|bounded_measurable_TCC1-2| "" 3789903662
   ("" (EXPAND "bounded_measurable?")
    (("" (SPLIT)
      (("1" (EXPAND "bounded?")
        (("1" (INST + "0") (("1" (GRIND) NIL NIL)) NIL)) NIL)
       ("2" (LEMMA "const_measurable" ("c" "0")) (("2" (PROPAX) NIL NIL)) NIL))
      NIL))
    NIL)
   ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|bounded?| CONST-DECL "bool" |sup_norm| NIL)
    (|const_measurable| FORMULA-DECL NIL |measure_space| NIL)
    (|bounded_measurable?| CONST-DECL "bool" |measure_space| NIL))
   SHOSTAK (|bounded_measurable| SUBTYPE "(LAMBDA x: 0)" "bounded_measurable"))
  (|bounded_measurable_TCC1-1| |nil| 3392437154
   ("" (EXPAND "bounded_measurable?")
    (("" (SPLIT)
      (("1" (EXPAND "bounded?")
        (("1" (INST + "0") (("1" (GRIND) NIL NIL)) NIL)) NIL)
       ("2" (LEMMA "const_measurable" ("c" "0"))
        (("2" (EXPAND "const_fun") (("2" (PROPAX) NIL NIL)) NIL)) NIL))
      NIL))
    NIL)
   ((|bounded?| CONST-DECL "bool" |sup_norm| NIL)) NIL
   (|bounded_measurable| SUBTYPE "(LAMBDA x: 0)" "bounded_measurable")))
 (|bounded_measurable_is_bounded| 0
  (|bounded_measurable_is_bounded-1| |nil| 3913444607
   ("" (JUDGEMENT-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|bounded_measurable?| CONST-DECL "bool" |measure_space| NIL)
    (|bounded_measurable| NONEMPTY-TYPE-EQ-DECL NIL |measure_space| NIL)
    (|measurable_function?| CONST-DECL "bool" |measure_space_def| NIL)
    (|measurable_set?| CONST-DECL "bool" |measure_space_def| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|setofsets| TYPE-EQ-DECL NIL |sets| NIL)
    (|sigma_algebra?| CONST-DECL "bool" |subset_algebra_def| NIL)
    (|sigma_algebra| NONEMPTY-TYPE-EQ-DECL NIL |subset_algebra_def| NIL)
    (S FORMAL-CONST-DECL "sigma_algebra" |measure_space| NIL)
    (T FORMAL-TYPE-DECL NIL |measure_space| NIL)
    (|bounded?| CONST-DECL "bool" |sup_norm| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL))
   NIL
   (|bounded_measurable_is_bounded_| SUBTYPE "measure_space.bounded_measurable"
    "sup_norm[measure_space.T].bounded")))
 (|bounded_measurable_is_measurable| 0
  (|bounded_measurable_is_measurable-1| |nil| 3913444607
   ("" (JUDGEMENT-TCC) NIL NIL)
   ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|bounded_measurable?| CONST-DECL "bool" |measure_space| NIL)
    (|bounded_measurable| NONEMPTY-TYPE-EQ-DECL NIL |measure_space| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|metric_induced_topology| CONST-DECL "setofsets[T]" |metric_space_def|
     |metric_space|)
    (|borel?| CONST-DECL "sigma_algebra" |borel| NIL)
    (|borel| NONEMPTY-TYPE-EQ-DECL NIL |borel| NIL)
    (|bounded?| CONST-DECL "bool" |sup_norm| NIL)
    (|Intersection| CONST-DECL "set" |sets| NIL)
    (|generated_sigma_algebra| CONST-DECL "sigma_algebra" |subset_algebra_def|
     NIL)
    (|open?| CONST-DECL "bool" |topology| |topology|)
    (|metric_open?| CONST-DECL "bool" |metric_space_def| |metric_space|)
    (|subset?| CONST-DECL "bool" |sets| NIL)
    (|ball| CONST-DECL "set[T]" |metric_space_def| |metric_space|)
    (|sigma_algebra_union?| CONST-DECL "bool" |subset_algebra_def| NIL)
    (|is_countable| CONST-DECL "bool" |countability| |sets_aux|)
    (|subset_algebra_complement?| CONST-DECL "bool" |subset_algebra_def| NIL)
    (|subset_algebra_empty?| CONST-DECL "bool" |subset_algebra_def| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|Intersection_surjective| NAME-JUDGEMENT
     "(surjective?[setofsets[T], set[T]])" |sets_lemmas| NIL)
    (|finite_emptyset| NAME-JUDGEMENT "finite_set" |finite_sets| NIL) NIL NIL
    NIL NIL NIL NIL NIL
    (S FORMAL-CONST-DECL "sigma_algebra" |measure_space| NIL)
    (|sigma_algebra| NONEMPTY-TYPE-EQ-DECL NIL |subset_algebra_def| NIL)
    (|sigma_algebra?| CONST-DECL "bool" |subset_algebra_def| NIL)
    (|setofsets| TYPE-EQ-DECL NIL |sets| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (T FORMAL-TYPE-DECL NIL |measure_space| NIL)
    (|measurable_set?| CONST-DECL "bool" |measure_space_def| NIL)
    (|measurable_function?| CONST-DECL "bool" |measure_space_def| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL))
   NIL
   (|bounded_measurable_is_measurable_| SUBTYPE
    "measure_space.bounded_measurable"
    "measure_space_def[measure_space.T, measure_space.S].measurable_function")))
 (|simple_is_bounded_measurable| 0
  (|simple_is_bounded_measurable-1| |nil| 3392437154
   ("" (SKOLEM + ("F"))
    (("" (TYPEPRED "F")
      (("" (EXPAND "bounded_measurable?")
        (("" (SPLIT)
          (("1" (EXPAND "bounded?")
            (("1" (EXPAND "simple?")
              (("1" (FLATTEN)
                (("1" (HIDE -1)
                  (("1" (NAME "CC" "image[T,real](abs[T](F),fullset[T])")
                    (("1" (TYPEPRED "sup(CC)")
                      (("1" (EXPAND "least_upper_bound")
                        (("1" (FLATTEN)
                          (("1" (CASE "exists x: true")
                            (("1" (INST + "sup(CC)")
                              (("1" (SKOLEM! +)
                                (("1" (EXPAND "upper_bound")
                                  (("1" (INST - "abs(F(x!1))")
                                    (("1" (EXPAND "CC" 1)
                                      (("1" (EXPAND "fullset")
                                        (("1" (EXPAND "image")
                                          (("1" (INST + "x!1")
                                            (("1" (EXPAND "abs" 1 2)
                                              (("1" (PROPAX) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (EXPAND "upper_bound")
                                (("2" (SKOSIMP)
                                  (("2" (INST - "abs(F(x!1))")
                                    (("1" (TYPEPRED "abs(F(x!1))")
                                      (("1" (ASSERT) NIL NIL)) NIL)
                                     ("2" (EXPAND "CC")
                                      (("2" (EXPAND "fullset")
                                        (("2" (EXPAND "image")
                                          (("2" (INST + "x!1")
                                            (("2" (EXPAND "abs" 1 2)
                                              (("2" (PROPAX) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (INST 2 "0")
                              (("2" (SKOSIMP) (("2" (INST + "x!1") NIL NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (SPLIT 1)
                        (("1" (EXPAND "nonempty?")
                          (("1" (EXPAND "empty?")
                            (("1" (EXPAND "member")
                              (("1" (CASE "exists x: true")
                                (("1" (SKOSIMP)
                                  (("1" (INST - "abs(F(x!1))")
                                    (("1" (EXPAND "CC")
                                      (("1" (EXPAND "fullset")
                                        (("1" (EXPAND "image")
                                          (("1" (INST + "x!1")
                                            (("1" (HIDE-ALL-BUT 1)
                                              (("1" (EXPAND "abs" 1 2)
                                                (("1" (PROPAX) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (INST 2 "0")
                                  (("2" (SKOSIMP)
                                    (("2" (INST + "x!1") NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (HIDE 2)
                          (("2"
                            (CASE
                                "forall (X:finite_set[real]): above_bounded[real](X)")
                            (("1" (INST - "CC")
                              (("1" (LEMMA "finite_image[real,real]")
                                (("1" (INST - "image(F, fullset[T])" "abs")
                                  (("1"
                                    (CASE-REPLACE
                                     "image[real, real](abs, image(F, fullset[T]))=CC")
                                    (("1" (HIDE-ALL-BUT 1)
                                      (("1" (APPLY-EXTENSIONALITY :HIDE? T)
                                        (("1" (EXPAND "CC")
                                          (("1" (EXPAND "fullset")
                                            (("1" (EXPAND "image")
                                              (("1" (EXPAND "abs" 1 2)
                                                (("1"
                                                  (CASE-REPLACE
                                                   "EXISTS (x_1: ({x: T | TRUE})): x!1 = abs(F(x_1))")
                                                  (("1" (SKOSIMP)
                                                    (("1" (INST + "F(x!2)")
                                                      (("1" (INST + "x!2") NIL
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (REPLACE 1 2)
                                                    (("2" (ASSERT)
                                                      (("2" (SKOSIMP)
                                                        (("2" (TYPEPRED "x!2")
                                                          (("2" (SKOSIMP)
                                                            (("2"
                                                              (INST + "x!3")
                                                              (("2" (ASSERT)
                                                                NIL NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (HIDE-ALL-BUT 1)
                              (("2"
                                (CASE
                                    " FORALL (X: finite_set[real],n:nat): card(X)=n => above_bounded[real](X)")
                                (("1" (SKOSIMP)
                                  (("1" (INST - "X!1" "card(X!1)") NIL NIL))
                                  NIL)
                                 ("2" (HIDE 2)
                                  (("2" (INDUCT "n")
                                    (("1" (SKOSIMP*)
                                      (("1" (REWRITE "card_empty?")
                                        (("1" (EXPAND "above_bounded")
                                          (("1" (INST + "0")
                                            (("1" (EXPAND "upper_bound")
                                              (("1" (SKOSIMP)
                                                (("1" (EXPAND "empty?")
                                                  (("1" (INST - "z!1")
                                                    (("1" (ASSERT) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (SKOSIMP*)
                                      (("2"
                                        (LEMMA "nonempty_card[real]"
                                         ("S" "X!1"))
                                        (("2" (ASSERT)
                                          (("2"
                                            (LEMMA "choose_rest[real]"
                                             ("a" "X!1"))
                                            (("2" (EXPAND "nonempty?")
                                              (("2" (ASSERT)
                                                (("2"
                                                  (LEMMA "card_rest[real]"
                                                   ("S" "X!1"))
                                                  (("2" (REPLACE -4)
                                                    (("2" (ASSERT)
                                                      (("2"
                                                        (INST -
                                                         "rest[real](X!1)")
                                                        (("2" (ASSERT)
                                                          (("2"
                                                            (EXPAND
                                                             "above_bounded")
                                                            (("2" (SKOSIMP)
                                                              (("2"
                                                                (INST +
                                                                 "max(choose[real](X!1),n!1)")
                                                                (("2"
                                                                  (EXPAND
                                                                   "upper_bound")
                                                                  (("2"
                                                                    (SKOSIMP)
                                                                    (("2"
                                                                      (TYPEPRED
                                                                       "z!1")
                                                                      (("2"
                                                                        (REPLACE
                                                                         -3 -1
                                                                         RL)
                                                                        (("2"
                                                                          (EXPAND
                                                                           "add"
                                                                           -1)
                                                                          (("2"
                                                                            (SPLIT
                                                                             -1)
                                                                            (("1"
                                                                              (REPLACE
                                                                               -1)
                                                                              (("1"
                                                                                (HIDE-ALL-BUT
                                                                                 2)
                                                                                (("1"
                                                                                  (GRIND)
                                                                                  NIL
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL)
                                                                             ("2"
                                                                              (INST
                                                                               -4
                                                                               "z!1")
                                                                              (("1"
                                                                                (NAME-REPLACE
                                                                                 "DRL1"
                                                                                 "choose[real](X!1)")
                                                                                (("1"
                                                                                  (HIDE-ALL-BUT
                                                                                   (-4
                                                                                    2))
                                                                                  (("1"
                                                                                    (GRIND)
                                                                                    NIL
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL)
                                                                               ("2"
                                                                                (ASSERT)
                                                                                NIL
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (EXPAND "simple?") (("2" (FLATTEN) NIL NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|simple| NONEMPTY-TYPE-EQ-DECL NIL |measure_space| NIL)
    (|simple?| CONST-DECL "bool" |measure_space| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (T FORMAL-TYPE-DECL NIL |measure_space| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|least_upper_bound| CONST-DECL "bool" |bound_defs| |reals|)
    (<= CONST-DECL "bool" |reals| NIL)
    (|sup_set| TYPE-EQ-DECL NIL |bounded_reals| |reals|)
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|above_bounded| CONST-DECL "bool" |bounded_reals| |reals|)
    (|sup| CONST-DECL "{x | least_upper_bound(<=)(x, Su)}" |bounded_reals|
     |reals|)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    NIL (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL)
    (|upper_bound| CONST-DECL "bool" |bound_defs| |reals|) NIL NIL
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    NIL (TRUE CONST-DECL "bool" |booleans| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|card_rest| FORMULA-DECL NIL |finite_sets| NIL) NIL NIL
    (|add| CONST-DECL "(nonempty?)" |sets| NIL) NIL NIL
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|choose| CONST-DECL "(p)" |sets| NIL) (|rest| CONST-DECL "set" |sets| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|choose_rest| FORMULA-DECL NIL |sets_lemmas| NIL)
    (|nonempty_card| FORMULA-DECL NIL |finite_sets| NIL)
    (|card_empty?| FORMULA-DECL NIL |finite_sets| NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|card| CONST-DECL "{n: nat | n = Card(S)}" |finite_sets| NIL)
    (|Card| CONST-DECL "nat" |finite_sets| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) NIL NIL
    NIL (|finite_image| JUDGEMENT-TCC NIL |function_image_aux| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) NIL
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|abs| CONST-DECL "[T -> nonneg_real]" |real_fun_ops| |reals|)
    (|fullset| CONST-DECL "set" |sets| NIL)
    (|bounded?| CONST-DECL "bool" |sup_norm| NIL)
    (|bounded_measurable?| CONST-DECL "bool" |measure_space| NIL))
   NIL
   (|simple_is_bounded_measurable| SUBTYPE "measure_space.x"
    "bounded_measurable")))
 (|nn_bounded_measurable_TCC1| 0
  (|nn_bounded_measurable_TCC1-1| |nil| 3392524429
   ("" (EXPAND "nn_bounded_measurable?")
    (("" (LEMMA "bounded_measurable_TCC1") (("" (PROPAX) NIL NIL)) NIL)) NIL)
   ((|bounded_measurable_TCC1| SUBTYPE-TCC NIL |measure_space| NIL)
    (|nn_bounded_measurable?| CONST-DECL "bool" |measure_space| NIL))
   NIL
   (|nn_bounded_measurable| SUBTYPE "(LAMBDA x: 0)" "nn_bounded_measurable")))
 (|nn_bounded_measurable_is_bounded_measurable| 0
  (|nn_bounded_measurable_is_bounded_measurable-1| |nil| 3913444607
   ("" (JUDGEMENT-TCC) NIL NIL)
   ((|nn_bounded_measurable| NONEMPTY-TYPE-EQ-DECL NIL |measure_space| NIL)
    (|nn_bounded_measurable?| CONST-DECL "bool" |measure_space| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (T FORMAL-TYPE-DECL NIL |measure_space| NIL)
    (|bounded?| CONST-DECL "bool" |sup_norm| NIL)
    (S FORMAL-CONST-DECL "sigma_algebra" |measure_space| NIL)
    (|sigma_algebra| NONEMPTY-TYPE-EQ-DECL NIL |subset_algebra_def| NIL)
    (|sigma_algebra?| CONST-DECL "bool" |subset_algebra_def| NIL)
    (|setofsets| TYPE-EQ-DECL NIL |sets| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|measurable_set?| CONST-DECL "bool" |measure_space_def| NIL)
    (|measurable_function?| CONST-DECL "bool" |measure_space_def| NIL)
    (|bounded_measurable?| CONST-DECL "bool" |measure_space| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL))
   NIL
   (|nn_bounded_measurable_is_bounded_measurable_| SUBTYPE
    "measure_space.nn_bounded_measurable" "measure_space.bounded_measurable")))
 (|increasing_nn_simple_TCC1| 0
  (|increasing_nn_simple_TCC1-2| "" 3789903665
   ("" (LEMMA "simple_const" ("c" "0"))
    (("" (EXPAND "increasing_nn_simple?")
      (("" (EXPAND "nn_simple?")
        (("" (SPLIT)
          (("1" (SKOSIMP) NIL NIL) ("2" (HIDE -1) (("2" (GRIND) NIL NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|increasing_nn_simple?| CONST-DECL "bool" |measure_space| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|increasing?| CONST-DECL "bool" |real_fun_preds| |reals|)
    (T FORMAL-TYPE-DECL NIL |measure_space| NIL)
    (|pointwise_increasing?| CONST-DECL "bool" |pointwise_convergence| NIL)
    (|nn_simple?| CONST-DECL "bool" |measure_space| NIL)
    (|simple_const| FORMULA-DECL NIL |measure_space| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL))
   SHOSTAK
   (|increasing_nn_simple| SUBTYPE "(LAMBDA n: LAMBDA x: 0)"
    "increasing_nn_simple"))
  (|increasing_nn_simple_TCC1-1| |nil| 3392524429
   ("" (LEMMA "simple_const" ("c" "0"))
    (("" (EXPAND "const_fun")
      (("" (EXPAND "increasing_nn_simple?")
        (("" (EXPAND "nn_simple?")
          (("" (SPLIT)
            (("1" (SKOSIMP) NIL NIL)
             ("2" (HIDE -1) (("2" (GRIND) NIL NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|increasing?| CONST-DECL "bool" |real_fun_preds| |reals|)
    (|pointwise_increasing?| CONST-DECL "bool" |pointwise_convergence| NIL))
   NIL
   (|increasing_nn_simple| SUBTYPE "(LAMBDA n: LAMBDA x: 0)"
    "increasing_nn_simple")))
 (|sup_norm_simple| 0
  (|sup_norm_simple-1| |nil| 3392391734
   ("" (SKOSIMP*)
    (("" (NAME "AA" "sup_norm(p!1)/2")
      (("" (REPLACE -1)
        (("" (TYPEPRED "p!1")
          (("" (EXPAND "nn_bounded_measurable?")
            (("" (NAME "EE" "{x | p!1(x) > AA}")
              (("" (LEMMA "measurable_gt" ("f" "p!1"))
                (("" (ASSERT)
                  (("" (FLATTEN)
                    (("" (HIDE -2)
                      (("" (ASSERT)
                        (("" (EXPAND "bounded_measurable?")
                          (("" (FLATTEN)
                            (("" (ASSERT)
                              (("" (INST - "AA")
                                (("" (CASE "simple?(AA*phi(EE))")
                                  (("1" (INST + "AA * phi(EE)")
                                    (("1"
                                      (CASE-REPLACE
                                       "FORALL x: 0 <= (AA * phi(EE))(x) & (AA * phi(EE))(x) <= p!1(x)")
                                      (("1" (EXPAND "*" -1)
                                        (("1" (EXPAND "sup_norm")
                                          (("1"
                                            (CASE-REPLACE
                                             "EXISTS (x: T): TRUE")
                                            (("1" (SKOLEM - ("XX"))
                                              (("1" (EXPAND "extend")
                                                (("1"
                                                  (TYPEPRED
                                                   "sup(LAMBDA (t: real):
            IF t >= 0 THEN EXISTS (x_1: T): abs(p!1(x_1)) = t
            ELSE FALSE
            ENDIF)")
                                                  (("1"
                                                    (NAME-REPLACE "NORM_P"
                                                     "sup(LAMBDA (t: real):
                              IF t >= 0
                                THEN EXISTS (x_1: T): abs(p!1(x_1)) = t
                              ELSE FALSE
                              ENDIF)")
                                                    (("1"
                                                      (TYPEPRED
                                                       "sup(LAMBDA (t_1: real):
            IF t_1 >= 0
              THEN EXISTS (x_2: T): abs((p!1 - AA * phi(EE))(x_2)) = t_1
            ELSE FALSE
            ENDIF)")
                                                      (("1"
                                                        (NAME-REPLACE "NORM_PH"
                                                         "sup(LAMBDA (t_1: real):
            IF t_1 >= 0
              THEN EXISTS (x_2: T): abs((p!1 - AA * phi(EE))(x_2)) = t_1
            ELSE FALSE
            ENDIF)")
                                                        (("1"
                                                          (EXPAND
                                                           "least_upper_bound")
                                                          (("1" (FLATTEN)
                                                            (("1" (HIDE -1)
                                                              (("1"
                                                                (INST - "AA")
                                                                (("1"
                                                                  (REPLACE 1
                                                                           -1)
                                                                  (("1"
                                                                    (SPLIT -1)
                                                                    (("1"
                                                                      (ASSERT)
                                                                      NIL NIL)
                                                                     ("2"
                                                                      (HIDE 2)
                                                                      (("2"
                                                                        (EXPAND
                                                                         "upper_bound"
                                                                         1)
                                                                        (("2"
                                                                          (SKOSIMP)
                                                                          (("2"
                                                                            (TYPEPRED
                                                                             "z!1")
                                                                            (("2"
                                                                              (ASSERT)
                                                                              (("2"
                                                                                (SKOSIMP)
                                                                                (("2"
                                                                                  (INST-CP
                                                                                   -5
                                                                                   "x!1")
                                                                                  (("2"
                                                                                    (FLATTEN)
                                                                                    (("2"
                                                                                      (EXPAND
                                                                                       "-"
                                                                                       -1)
                                                                                      (("2"
                                                                                        (EXPAND
                                                                                         "*"
                                                                                         -1)
                                                                                        (("2"
                                                                                          (EXPAND
                                                                                           "abs"
                                                                                           -1)
                                                                                          (("2"
                                                                                            (ASSERT)
                                                                                            (("2"
                                                                                              (REPLACE
                                                                                               -1
                                                                                               1
                                                                                               RL)
                                                                                              (("2"
                                                                                                (HIDE
                                                                                                 -1)
                                                                                                (("2"
                                                                                                  (HIDE
                                                                                                   -3)
                                                                                                  (("2"
                                                                                                    (EXPAND
                                                                                                     "upper_bound")
                                                                                                    (("2"
                                                                                                      (INST
                                                                                                       -
                                                                                                       "p!1(x!1)")
                                                                                                      (("1"
                                                                                                        (EXPAND
                                                                                                         "phi")
                                                                                                        (("1"
                                                                                                          (EXPAND
                                                                                                           "member")
                                                                                                          (("1"
                                                                                                            (CASE-REPLACE
                                                                                                             "EE(x!1)")
                                                                                                            (("1"
                                                                                                              (EXPAND
                                                                                                               "EE")
                                                                                                              (("1"
                                                                                                                (ASSERT)
                                                                                                                NIL
                                                                                                                NIL))
                                                                                                              NIL)
                                                                                                             ("2"
                                                                                                              (ASSERT)
                                                                                                              (("2"
                                                                                                                (EXPAND
                                                                                                                 "EE")
                                                                                                                (("2"
                                                                                                                  (ASSERT)
                                                                                                                  NIL
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL)
                                                                                                       ("2"
                                                                                                        (INST
                                                                                                         +
                                                                                                         "x!1")
                                                                                                        (("2"
                                                                                                          (EXPAND
                                                                                                           "abs")
                                                                                                          (("2"
                                                                                                            (PROPAX)
                                                                                                            NIL
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL)
                                                       ("2"
                                                        (HIDE-ALL-BUT
                                                         (1 -6 -2 -2 -8))
                                                        (("2" (SPLIT)
                                                          (("1"
                                                            (EXPAND
                                                             "nonempty?")
                                                            (("1"
                                                              (EXPAND "empty?")
                                                              (("1"
                                                                (INST -
                                                                 "p!1(XX)-AA*phi(EE)(XX)")
                                                                (("1"
                                                                  (EXPAND
                                                                   "member")
                                                                  (("1"
                                                                    (INST -
                                                                     "XX")
                                                                    (("1"
                                                                      (FLATTEN)
                                                                      (("1"
                                                                        (ASSERT)
                                                                        (("1"
                                                                          (INST
                                                                           +
                                                                           "XX")
                                                                          (("1"
                                                                            (EXPAND
                                                                             "-")
                                                                            (("1"
                                                                              (EXPAND
                                                                               "*")
                                                                              (("1"
                                                                                (EXPAND
                                                                                 "abs")
                                                                                (("1"
                                                                                  (PROPAX)
                                                                                  NIL
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL)
                                                           ("2"
                                                            (EXPAND
                                                             "above_bounded")
                                                            (("2"
                                                              (EXPAND
                                                               "bounded?")
                                                              (("2" (SKOSIMP)
                                                                (("2"
                                                                  (INST +
                                                                   "c!1")
                                                                  (("2"
                                                                    (EXPAND
                                                                     "upper_bound")
                                                                    (("2"
                                                                      (SKOSIMP)
                                                                      (("2"
                                                                        (TYPEPRED
                                                                         "z!1")
                                                                        (("2"
                                                                          (ASSERT)
                                                                          (("2"
                                                                            (SKOSIMP)
                                                                            (("2"
                                                                              (EXPAND
                                                                               "-")
                                                                              (("2"
                                                                                (EXPAND
                                                                                 "*")
                                                                                (("2"
                                                                                  (INST
                                                                                   -
                                                                                   "x!1")
                                                                                  (("2"
                                                                                    (FLATTEN)
                                                                                    (("2"
                                                                                      (EXPAND
                                                                                       "abs"
                                                                                       -1)
                                                                                      (("2"
                                                                                        (ASSERT)
                                                                                        (("2"
                                                                                          (INST
                                                                                           -
                                                                                           "x!1")
                                                                                          (("2"
                                                                                            (INST
                                                                                             -
                                                                                             "x!1")
                                                                                            (("2"
                                                                                              (EXPAND
                                                                                               "abs")
                                                                                              (("2"
                                                                                                (ASSERT)
                                                                                                NIL
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2"
                                                    (HIDE-ALL-BUT (-5 -7 1))
                                                    (("2" (SPLIT)
                                                      (("1"
                                                        (EXPAND "nonempty?")
                                                        (("1" (EXPAND "empty?")
                                                          (("1"
                                                            (INST - "p!1(XX)")
                                                            (("1"
                                                              (EXPAND "member")
                                                              (("1"
                                                                (INST - "XX")
                                                                (("1" (ASSERT)
                                                                  (("1"
                                                                    (INST +
                                                                     "XX")
                                                                    (("1"
                                                                      (EXPAND
                                                                       "abs")
                                                                      (("1"
                                                                        (PROPAX)
                                                                        NIL
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL)
                                                       ("2"
                                                        (EXPAND
                                                         "above_bounded")
                                                        (("2"
                                                          (EXPAND "bounded?")
                                                          (("2" (SKOSIMP)
                                                            (("2"
                                                              (INST + "c!1")
                                                              (("2"
                                                                (EXPAND
                                                                 "upper_bound")
                                                                (("2" (SKOSIMP)
                                                                  (("2"
                                                                    (TYPEPRED
                                                                     "z!1")
                                                                    (("2"
                                                                      (ASSERT)
                                                                      (("2"
                                                                        (SKOSIMP)
                                                                        (("2"
                                                                          (INST
                                                                           -
                                                                           "x!1")
                                                                          (("2"
                                                                            (INST
                                                                             -
                                                                             "x!1")
                                                                            (("2"
                                                                              (EXPAND
                                                                               "abs")
                                                                              (("2"
                                                                                (ASSERT)
                                                                                NIL
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2" (REPLACE 1 2)
                                              (("2" (REPLACE 1 -8)
                                                (("2" (ASSERT) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (HIDE 2)
                                        (("2" (SKOSIMP)
                                          (("2" (SPLIT)
                                            (("1" (EXPAND "*")
                                              (("1" (TYPEPRED "sup_norm(p!1)")
                                                (("1"
                                                  (LEMMA "le_times_le_pos"
                                                   ("nnx" "0" "y" "AA" "nnz"
                                                    "0" "w" "phi(EE)(x!1)"))
                                                  (("1" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2" (EXPAND "*")
                                              (("2" (HIDE -1 -2 -3)
                                                (("2" (EXPAND "phi")
                                                  (("2" (EXPAND "member")
                                                    (("2" (EXPAND "EE")
                                                      (("2"
                                                        (CASE-REPLACE
                                                         "p!1(x!1) > AA")
                                                        (("1" (ASSERT) NIL NIL)
                                                         ("2" (ASSERT)
                                                          (("2" (INST - "x!1")
                                                            NIL NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (HIDE 2)
                                    (("2" (LEMMA "phi_is_simple" ("X" "EE"))
                                      (("1" (REWRITE "simple_scal") NIL NIL)
                                       ("2" (ASSERT) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|nn_bounded_measurable| NONEMPTY-TYPE-EQ-DECL NIL |measure_space| NIL)
    (|nn_bounded_measurable?| CONST-DECL "bool" |measure_space| NIL)
    (|sup_norm| CONST-DECL "nnreal" |sup_norm| NIL)
    (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bounded| NONEMPTY-TYPE-EQ-DECL NIL |sup_norm| NIL)
    (|bounded?| CONST-DECL "bool" |sup_norm| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (T FORMAL-TYPE-DECL NIL |measure_space| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|nnreal_div_posreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types|
     NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|bounded_measurable?| CONST-DECL "bool" |measure_space| NIL)
    (|simple?| CONST-DECL "bool" |measure_space| NIL) NIL
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|phi| CONST-DECL "nat" |measure_space| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|nnrat_div_posrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals|
     NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|least_upper_bound| CONST-DECL "bool" |bound_defs| |reals|)
    (|sup_set| TYPE-EQ-DECL NIL |bounded_reals| |reals|)
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (|above_bounded| CONST-DECL "bool" |bounded_reals| |reals|)
    (|sup| CONST-DECL "{x | least_upper_bound(<=)(x, Su)}" |bounded_reals|
     |reals|)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (FALSE CONST-DECL "bool" |booleans| NIL) NIL
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) NIL
    NIL (|member| CONST-DECL "bool" |sets| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal"
     |real_types| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|upper_bound| CONST-DECL "bool" |bound_defs| |reals|)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|extend| CONST-DECL "R" |extend| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|le_times_le_pos| FORMULA-DECL NIL |real_props| NIL)
    (|simple| NONEMPTY-TYPE-EQ-DECL NIL |measure_space| NIL) NIL NIL
    (|phi_is_simple| JUDGEMENT-TCC NIL |measure_space| NIL)
    (|simple_scal| JUDGEMENT-TCC NIL |measure_space| NIL)
    (S FORMAL-CONST-DECL "sigma_algebra" |measure_space| NIL)
    (|sigma_algebra| NONEMPTY-TYPE-EQ-DECL NIL |subset_algebra_def| NIL)
    (|sigma_algebra?| CONST-DECL "bool" |subset_algebra_def| NIL)
    (|setofsets| TYPE-EQ-DECL NIL |sets| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|measurable_gt| FORMULA-DECL NIL |measure_space_def| NIL))
   SHOSTAK))
 (|nn_simple_approx_TCC1| 0
  (|nn_simple_approx_TCC1-1| |nil| 3394514188
   ("" (SKOSIMP)
    (("" (LEMMA "sup_norm_simple" ("p" "p!1"))
      (("" (SKOSIMP)
        (("" (EXPAND "nonempty?")
          (("" (EXPAND "empty?")
            (("" (INST -3 "h!1")
              (("" (EXPAND "member")
                (("" (REPLACE -2 1) (("" (PROPAX) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|nn_bounded_measurable| NONEMPTY-TYPE-EQ-DECL NIL |measure_space| NIL)
    (|nn_bounded_measurable?| CONST-DECL "bool" |measure_space| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (T FORMAL-TYPE-DECL NIL |measure_space| NIL)
    (|sup_norm_simple| FORMULA-DECL NIL |measure_space| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (|simple| NONEMPTY-TYPE-EQ-DECL NIL |measure_space| NIL)
    (|simple?| CONST-DECL "bool" |measure_space| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL))
   NIL
   (|nn_simple_approx| SUBTYPE
    "{h | booleans.AND((FORALL x: booleans.&(reals.<=(0, measure_space.h(measure_space.x)), reals.<=(measure_space.h(measure_space.x), measure_space.p(measure_space.x)))), reals.<=(sup_norm[measure_space.T].sup_norm((real_fun_ops[measure_space.T].-)(measure_space.p, measure_space.h)), number_fields./(sup_norm[measure_space.T].sup_norm(measure_space.p), 2)))}"
    "(sets[simple].nonempty?)")))
 (|nn_simple_approx_TCC2| 0
  (|nn_simple_approx_TCC2-1| |nil| 3394514188
   ("" (SKOSIMP)
    (("" (LEMMA "nn_simple_approx_TCC1" ("p" "p!1"))
      ((""
        (LEMMA "choose_member"
         ("a" "{h |
                         (FORALL x: 0 <= h(x) & h(x) <= p!1(x)) AND
                          sup_norm[T]((-[T])(p!1, h)) <=
                           sup_norm[T](p!1) / 2}"))
        (("" (EXPAND "nonempty?")
          (("" (ASSERT)
            (("" (EXPAND "nn_simple?")
              (("" (SKOSIMP) (("" (INST - "x!1") (("" (FLATTEN) NIL NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|nn_bounded_measurable| NONEMPTY-TYPE-EQ-DECL NIL |measure_space| NIL)
    (|nn_bounded_measurable?| CONST-DECL "bool" |measure_space| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (T FORMAL-TYPE-DECL NIL |measure_space| NIL)
    (|nn_simple_approx_TCC1| SUBTYPE-TCC NIL |measure_space| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (|nn_simple?| CONST-DECL "bool" |measure_space| NIL)
    (|member| CONST-DECL "bool" |sets| NIL) NIL NIL
    (|nnreal_div_posreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types|
     NIL)
    (|choose_member| FORMULA-DECL NIL |sets_lemmas| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|bounded?| CONST-DECL "bool" |sup_norm| NIL)
    (|bounded| NONEMPTY-TYPE-EQ-DECL NIL |sup_norm| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL)
    (|sup_norm| CONST-DECL "nnreal" |sup_norm| NIL) NIL
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|simple?| CONST-DECL "bool" |measure_space| NIL)
    (|simple| NONEMPTY-TYPE-EQ-DECL NIL |measure_space| NIL))
   NIL
   (|nn_simple_approx| SUBTYPE
    "sets[simple].choose({h | booleans.AND((FORALL x: booleans.&(reals.<=(0, measure_space.h(measure_space.x)), reals.<=(measure_space.h(measure_space.x), measure_space.p(measure_space.x)))), reals.<=(sup_norm[measure_space.T].sup_norm((real_fun_ops[measure_space.T].-)(measure_space.p, measure_space.h)), number_fields./(sup_norm[measure_space.T].sup_norm(measure_space.p), 2)))})"
    "nn_simple")))
 (|nn_simple_sequence_TCC1| 0
  (|nn_simple_sequence_TCC1-1| |nil| 3394514188
   ("" (SKOSIMP*)
    (("" (HIDE -1)
      (("" (EXPAND "nn_simple_approx")
        ((""
          (CASE "nonempty?({h |
                 (FORALL x: 0 <= h(x) & h(x) <= p!1(x)) AND
                  sup_norm(p!1 - h) <= sup_norm(p!1) / 2})")
          (("1"
            (LEMMA "choose_member"
             ("a" "({h |
                 (FORALL x: 0 <= h(x) & h(x) <= p!1(x)) AND
                  sup_norm(p!1 - h) <= sup_norm(p!1) / 2})"))
            (("1" (SPLIT -1)
              (("1"
                (NAME-REPLACE "HH" "choose({h |
                 (FORALL x: 0 <= h(x) & h(x) <= p!1(x)) AND
                  sup_norm(p!1 - h) <= sup_norm(p!1) / 2})")
                (("1" (EXPAND "member")
                  (("1" (FLATTEN) (("1" (INST - "x!1") NIL NIL)) NIL)) NIL))
                NIL)
               ("2" (EXPAND "nonempty?") (("2" (PROPAX) NIL NIL)) NIL))
              NIL))
            NIL)
           ("2" (HIDE 2)
            (("2" (EXPAND "nonempty?")
              (("2" (EXPAND "empty?")
                (("2" (EXPAND "member")
                  (("2" (LEMMA "sup_norm_simple" ("p" "p!1"))
                    (("2" (SKOSIMP)
                      (("2" (INST -3 "h!1")
                        (("2" (REPLACE -2) (("2" (PROPAX) NIL NIL)) NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) NIL
    (|sup_norm| CONST-DECL "nnreal" |sup_norm| NIL)
    (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bounded| NONEMPTY-TYPE-EQ-DECL NIL |sup_norm| NIL)
    (|bounded?| CONST-DECL "bool" |sup_norm| NIL)
    (|nn_bounded_measurable| NONEMPTY-TYPE-EQ-DECL NIL |measure_space| NIL)
    (|nn_bounded_measurable?| CONST-DECL "bool" |measure_space| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|simple| NONEMPTY-TYPE-EQ-DECL NIL |measure_space| NIL)
    (|simple?| CONST-DECL "bool" |measure_space| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (T FORMAL-TYPE-DECL NIL |measure_space| NIL)
    (|nnreal_div_posreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types|
     NIL)
    NIL NIL (|member| CONST-DECL "bool" |sets| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|choose| CONST-DECL "(p)" |sets| NIL)
    (|choose_member| FORMULA-DECL NIL |sets_lemmas| NIL)
    (|sup_norm_simple| FORMULA-DECL NIL |measure_space| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|nn_simple_approx| CONST-DECL "nn_simple" |measure_space| NIL))
   NIL
   (|nn_simple_sequence| SUBTYPE
    "measure_space.nn_simple_approx(measure_space.p)"
    "{h | FORALL x: booleans.&(reals.<=(0, measure_space.h(measure_space.x)), reals.<=(measure_space.h(measure_space.x), measure_space.p(measure_space.x)))}")))
 (|nn_simple_sequence_TCC2| 0
  (|nn_simple_sequence_TCC2-1| |nil| 3394514188
   ("" (SKOSIMP)
    (("" (TYPEPRED "p!1")
      (("" (TYPEPRED "nn_simple_approx(p!1)")
        (("" (EXPAND "nn_bounded_measurable?")
          (("" (LEMMA "simple_is_bounded_measurable")
            (("" (INST - "nn_simple_approx(p!1)")
              (("" (FLATTEN)
                (("" (EXPAND "bounded_measurable?")
                  (("" (FLATTEN)
                    (("" (USE "bounded_diff")
                      (("" (ASSERT)
                        (("" (HIDE -1)
                          (("" (SKOSIMP)
                            (("" (EXPAND "-" 2)
                              (("" (NAME "DRL1" " nn_simple_approx(p!1)")
                                (("" (REPLACE -1)
                                  (("" (HIDE-ALL-BUT (-1 -7 1 2))
                                    (("" (EXPAND "nn_simple_approx")
                                      ((""
                                        (CASE "nonempty?({h |
                       (FORALL x: 0 <= h(x) & h(x) <= p!1(x)) AND
                        sup_norm(p!1 - h) <= sup_norm(p!1) / 2})")
                                        (("1"
                                          (LEMMA "choose_member"
                                           ("a" "{h |
                     (FORALL x: 0 <= h(x) & h(x) <= p!1(x)) AND
                      sup_norm(p!1 - h) <= sup_norm(p!1) / 2}"))
                                          (("1" (EXPAND "nonempty?")
                                            (("1" (REPLACE 1)
                                              (("1" (REPLACE -2)
                                                (("1" (EXPAND "member")
                                                  (("1" (FLATTEN)
                                                    (("1" (HIDE -3 1)
                                                      (("1" (INST - "x!1")
                                                        (("1" (FLATTEN)
                                                          (("1" (ASSERT) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (HIDE-ALL-BUT (1 2 -2))
                                          (("2"
                                            (LEMMA "sup_norm_simple"
                                             ("p" "p!1"))
                                            (("2" (SKOSIMP)
                                              (("2" (EXPAND "nonempty?")
                                                (("2" (EXPAND "empty?")
                                                  (("2" (EXPAND "member")
                                                    (("2" (INST -3 "h!1")
                                                      (("2" (ASSERT) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|nn_bounded_measurable| NONEMPTY-TYPE-EQ-DECL NIL |measure_space| NIL)
    (|nn_bounded_measurable?| CONST-DECL "bool" |measure_space| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (T FORMAL-TYPE-DECL NIL |measure_space| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) NIL
    (|simple| NONEMPTY-TYPE-EQ-DECL NIL |measure_space| NIL)
    (|simple?| CONST-DECL "bool" |measure_space| NIL)
    (|bounded_measurable?| CONST-DECL "bool" |measure_space| NIL)
    (|bounded_diff| JUDGEMENT-TCC NIL |sup_norm| NIL)
    (|bounded| NONEMPTY-TYPE-EQ-DECL NIL |sup_norm| NIL) NIL
    (|bounded?| CONST-DECL "bool" |sup_norm| NIL) NIL
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|sup_norm_simple| FORMULA-DECL NIL |measure_space| NIL)
    (|choose_member| FORMULA-DECL NIL |sets_lemmas| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|sup_norm| CONST-DECL "nnreal" |sup_norm| NIL)
    (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL)
    (>= CONST-DECL "bool" |reals| NIL) (<= CONST-DECL "bool" |reals| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|nnreal_div_posreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types|
     NIL)
    NIL (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|simple_is_bounded_measurable| JUDGEMENT-TCC NIL |measure_space| NIL)
    (|nn_simple?| CONST-DECL "bool" |measure_space| NIL)
    (|nn_simple| NONEMPTY-TYPE-EQ-DECL NIL |measure_space| NIL)
    (|nn_simple_approx| CONST-DECL "nn_simple" |measure_space| NIL))
   NIL
   (|nn_simple_sequence| SUBTYPE
    "(real_fun_ops[measure_space.T].-)(measure_space.p, measure_space.nn_simple_approx(measure_space.p))"
    "nn_bounded_measurable")))
 (|nn_simple_sequence_TCC3| 0
  (|nn_simple_sequence_TCC3-1| |nil| 3394514188
   ("" (SKOSIMP) (("" (ASSERT) NIL NIL)) NIL)
   ((|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL))
   NIL
   (|nn_simple_sequence| SUBTYPE "(number_fields.-)(measure_space.n, 1)"
    "nat")))
 (|nn_simple_sequence_TCC4| 0
  (|nn_simple_sequence_TCC4-1| |nil| 3394514764
   ("" (SKOSIMP) (("" (ASSERT) NIL NIL)) NIL)
   ((|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL))
   NIL
   (|nn_simple_sequence| TERMINATION
    "measure_space.nn_simple_sequence((real_fun_ops[measure_space.T].-)(measure_space.p, measure_space.nn_simple_approx(measure_space.p)))((number_fields.-)(measure_space.n, 1))"
    "NIL")))
 (|nn_simple_sequence_TCC5| 0
  (|nn_simple_sequence_TCC5-1| |nil| 3394818674
   ("" (SKOSIMP*)
    (("" (TYPEPRED "v!1((-[T])(p!1, nn_simple_approx(p!1)))(n!1-1)")
      (("1" (INST - "x!1")
        (("1" (FLATTEN)
          (("1" (ASSERT)
            (("1"
              (NAME-REPLACE "DRL1"
               "v!1((-[T])(p!1, nn_simple_approx(p!1)))(n!1 - 1)(x!1)")
              (("1" (TYPEPRED "nn_simple_approx(p!1)")
                (("1" (EXPAND "nn_simple?")
                  (("1" (FLATTEN)
                    (("1" (INST - "x!1")
                      (("1" (ASSERT)
                        (("1" (EXPAND "-" -5) (("1" (ASSERT) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (HIDE 3)
        (("2" (LEMMA "nn_simple_sequence_TCC2" ("p" "p!1" "n" "n!1"))
          (("2" (ASSERT) NIL NIL)) NIL))
        NIL)
       ("3" (ASSERT) NIL NIL))
      NIL))
    NIL)
   ((- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|nn_simple_approx| CONST-DECL "nn_simple" |measure_space| NIL)
    (|nn_simple| NONEMPTY-TYPE-EQ-DECL NIL |measure_space| NIL)
    (|nn_simple?| CONST-DECL "bool" |measure_space| NIL) NIL
    (|nn_bounded_measurable?| CONST-DECL "bool" |measure_space| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|simple| NONEMPTY-TYPE-EQ-DECL NIL |measure_space| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|nn_bounded_measurable| NONEMPTY-TYPE-EQ-DECL NIL |measure_space| NIL)
    (|simple?| CONST-DECL "bool" |measure_space| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (T FORMAL-TYPE-DECL NIL |measure_space| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) NIL
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nn_simple_sequence_TCC2| SUBTYPE-TCC NIL |measure_space| NIL))
   NIL
   (|nn_simple_sequence| SUBTYPE
    "measure_space.nn_simple_sequence((real_fun_ops[measure_space.T].-)(measure_space.p, measure_space.nn_simple_approx(measure_space.p)))((number_fields.-)(measure_space.n, 1))"
    "{h | FORALL x: booleans.&(reals.<=(0, measure_space.h(measure_space.x)), reals.<=(measure_space.h(measure_space.x), measure_space.p(measure_space.x)))}")))
 (|nn_bounded_measurable_as_increasing_simple_sequence_TCC1| 0
  (|nn_bounded_measurable_as_increasing_simple_sequence_TCC1-1| |nil|
   3392524429
   ("" (SKOSIMP)
    (("" (SKOSIMP)
      (("" (TYPEPRED "w!1")
        (("" (EXPAND "increasing_nn_simple?")
          (("" (FLATTEN)
            (("" (INST - "x1!1")
              (("" (EXPAND "nn_simple?")
                (("" (FLATTEN)
                  (("" (LEMMA "simple_is_bounded_measurable")
                    (("" (INST - "w!1(x1!1)")
                      (("" (EXPAND "bounded_measurable?")
                        (("" (PROPAX) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   (NIL NIL (|simple?| CONST-DECL "bool" |measure_space| NIL)
    (|simple| NONEMPTY-TYPE-EQ-DECL NIL |measure_space| NIL)
    (|bounded_measurable?| CONST-DECL "bool" |measure_space| NIL)
    (|simple_is_bounded_measurable| JUDGEMENT-TCC NIL |measure_space| NIL)
    (|nn_simple?| CONST-DECL "bool" |measure_space| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (T FORMAL-TYPE-DECL NIL |measure_space| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|setofsets| TYPE-EQ-DECL NIL |sets| NIL)
    (|sigma_algebra?| CONST-DECL "bool" |subset_algebra_def| NIL)
    (|sigma_algebra| NONEMPTY-TYPE-EQ-DECL NIL |subset_algebra_def| NIL)
    (S FORMAL-CONST-DECL "sigma_algebra" |measure_space| NIL)
    (|measurable_function?| CONST-DECL "bool" |measure_space_def| NIL)
    (|measurable_function| NONEMPTY-TYPE-EQ-DECL NIL |measure_space_def| NIL)
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (|increasing_nn_simple?| CONST-DECL "bool" |measure_space| NIL)
    (|increasing_nn_simple| NONEMPTY-TYPE-EQ-DECL NIL |measure_space| NIL))
   NIL
   (|nn_bounded_measurable_as_increasing_simple_sequence| SUBTYPE
    "measure_space.w" "sequence[bounded[T]]")))
 (|nn_bounded_measurable_as_increasing_simple_sequence| 0
  (|nn_bounded_measurable_as_increasing_simple_sequence-3| |nil| 3791972271
   ("" (NAME "HH" "nn_simple_approx")
    (("" (NAME "GG" "nn_simple_sequence")
      ((""
        (CASE "forall p: (forall x: 0 <= HH(p)(x) & HH(p)(x) <= p(x)) AND
                                      sup_norm(p-HH(p)) <= sup_norm(p)/2")
        (("1" (CASE "forall p: nn_bounded_measurable?(p-HH(p))")
          (("1" (CASE "forall p: GG(p)(0)=HH(p)")
            (("1" (CASE "forall p,n: GG(p)(n+1)= GG(p-HH(p))(n)")
              (("1"
                (NAME "FF"
                      "lambda p: lambda n: lambda x: sigma(0,n,lambda i: GG(p)(i)(x))")
                (("1" (CASE "forall p:FF(p)(0)= HH(p)")
                  (("1"
                    (CASE "FORALL p, n: FF(p)(n + 1) = GG(p)(n+1)+FF(p)(n)")
                    (("1"
                      (CASE
                          "FORALL p, n: FF(p)(n + 1) = HH(p) + FF(p - HH(p))(n)")
                      (("1"
                        (CASE
                            "FORALL p, n,x: 0<=FF(p)(n)(x)& FF(p)(n)(x)<=p(x)")
                        (("1" (CASE "forall p: pointwise_increasing?(FF(p))")
                          (("1" (CASE "forall p,n: nn_simple?(FF(p)(n))")
                            (("1"
                              (CASE
                                  "FORALL p,n: nn_bounded_measurable?(p - FF(p)(n))")
                              (("1"
                                (CASE
                                    "forall p,n: sup_norm(p-FF(p)(n)) <= sup_norm(p) / power@real_expt.^(2,(n+1))")
                                (("1" (SKOSIMP)
                                  (("1" (INST + "FF(p!1)")
                                    (("1" (EXPAND "sup_norm_converges_to?")
                                      (("1" (SKOSIMP)
                                        (("1" (INST - "p!1" "_")
                                          (("1"
                                            (CASE
                                                "exists n: sup_norm(p!1) / power@real_expt.^(2,(n + 1))< epsilon!1")
                                            (("1" (SKOSIMP)
                                              (("1" (INST + "n!1")
                                                (("1" (SKOSIMP)
                                                  (("1" (INST - "i!1")
                                                    (("1"
                                                      (CASE-REPLACE
                                                       "FF(p!1)(i!1) - p!1 = -(p!1 - FF(p!1)(i!1))")
                                                      (("1"
                                                        (REWRITE
                                                         "sup_norm_neg")
                                                        (("1"
                                                          (NAME-REPLACE "LHS"
                                                           "sup_norm((p!1 - FF(p!1)(i!1)))")
                                                          (("1" (HIDE -1)
                                                            (("1"
                                                              (CASE-REPLACE
                                                               "sup_norm(p!1)=0")
                                                              (("1" (ASSERT)
                                                                NIL NIL)
                                                               ("2"
                                                                (LEMMA
                                                                 "both_sides_div_pos_le2"
                                                                 ("pz"
                                                                  "sup_norm(p!1)"
                                                                  "py"
                                                                  "power@real_expt.^(2,(n!1 + 1))"
                                                                  "px"
                                                                  "power@real_expt.^(2,(i!1 + 1))"))
                                                                (("1"
                                                                  (LEMMA
                                                                   "both_sides_expt_gt1_le"
                                                                   ("gt1x" "2"
                                                                    "i" "n!1+1"
                                                                    "j"
                                                                    "i!1+1"))
                                                                  (("1"
                                                                    (ASSERT)
                                                                    (("1"
                                                                      (HIDE-ALL-BUT
                                                                       (-1 1))
                                                                      (("1"
                                                                        (REWRITE
                                                                         "real_expt_int_rew")
                                                                        (("1"
                                                                          (REWRITE
                                                                           "real_expt_int_rew")
                                                                          NIL
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL)
                                                                 ("2" (ASSERT)
                                                                  NIL NIL)
                                                                 ("3"
                                                                  (HIDE-ALL-BUT
                                                                   1)
                                                                  (("3"
                                                                    (REWRITE
                                                                     "real_expt_int_rew")
                                                                    (("3"
                                                                      (REWRITE
                                                                       "expt_pos")
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL)
                                                                 ("4"
                                                                  (HIDE-ALL-BUT
                                                                   1)
                                                                  (("4"
                                                                    (REWRITE
                                                                     "real_expt_int_rew")
                                                                    (("4"
                                                                      (REWRITE
                                                                       "expt_pos")
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL)
                                                       ("2" (HIDE-ALL-BUT 1)
                                                        (("2"
                                                          (APPLY-EXTENSIONALITY
                                                           :HIDE? T)
                                                          (("2" (EXPAND "-")
                                                            (("2" (ASSERT) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2" (HIDE-ALL-BUT 1)
                                              (("2"
                                                (LEMMA "large_expt" ("px" "2"))
                                                (("2" (ASSERT)
                                                  (("2"
                                                    (CASE-REPLACE
                                                     "sup_norm(p!1)=0")
                                                    (("1" (INST + "0")
                                                      (("1" (ASSERT) NIL NIL))
                                                      NIL)
                                                     ("2"
                                                      (INST -
                                                       "sup_norm(p!1)/epsilon!1")
                                                      (("1" (SKOSIMP)
                                                        (("1" (INST + "n!1")
                                                          (("1"
                                                            (REWRITE
                                                             "div_mult_pos_lt1")
                                                            (("1"
                                                              (REWRITE
                                                               "div_mult_pos_lt1")
                                                              (("1"
                                                                (REWRITE
                                                                 "real_expt_int_rew")
                                                                (("1"
                                                                  (EXPAND "^")
                                                                  (("1"
                                                                    (EXPAND
                                                                     "expt" 2)
                                                                    (("1"
                                                                      (ASSERT)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL)
                                                               ("2"
                                                                (REWRITE
                                                                 "real_expt_int_rew")
                                                                (("2"
                                                                  (REWRITE
                                                                   "expt_pos")
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL)
                                                       ("2"
                                                        (LEMMA
                                                         "posreal_div_posreal_is_posreal"
                                                         ("px"
                                                          "sup_norm[T](p!1)"
                                                          "py" "epsilon!1"))
                                                        (("1" (PROPAX) NIL NIL)
                                                         ("2" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("3" (HIDE-ALL-BUT 1)
                                              (("3" (SKOSIMP)
                                                (("3"
                                                  (REWRITE "real_expt_int_rew")
                                                  (("3"
                                                    (LEMMA "expt_pos"
                                                     ("px" "2" "i" "1+n!1"))
                                                    (("3" (ASSERT) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (SPLIT 1)
                                      (("1" (SKOLEM + ("n!1"))
                                        (("1" (INST -3 "p!1" "n!1")
                                          (("1" (HIDE-ALL-BUT (-3 1))
                                            (("1" (EXPAND "nn_simple?")
                                              (("1" (EXPAND "simple?")
                                                (("1" (FLATTEN) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (EXPAND "increasing_nn_simple?")
                                        (("2" (SPLIT)
                                          (("1" (SKOSIMP)
                                            (("1" (INST -3 "p!1" "n!1") NIL
                                              NIL))
                                            NIL)
                                           ("2" (INST -4 "p!1") NIL NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (HIDE 2)
                                  (("2" (INDUCT "n")
                                    (("1" (SKOSIMP)
                                      (("1" (INST -7 "p!1")
                                        (("1" (REPLACE -7)
                                          (("1" (INST -12 "p!1")
                                            (("1" (FLATTEN)
                                              (("1" (REWRITE "real_expt_x1")
                                                NIL NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (SKOSIMP*)
                                      (("2" (INST -6 "p!1" "j!1")
                                        (("2" (REPLACE -6)
                                          (("2" (INST - "p!1-HH(p!1)")
                                            (("2" (INST -13 "p!1")
                                              (("2" (FLATTEN)
                                                (("2"
                                                  (LEMMA "expt_plus"
                                                   ("n0x" "2" "i" "1" "j"
                                                    "j!1+1"))
                                                  (("2" (REWRITE "expt_x1")
                                                    (("2" (HIDE -1)
                                                      (("2"
                                                        (CASE-REPLACE
                                                         "p!1 - HH(p!1) - FF(p!1 - HH(p!1))(j!1)=p!1 - (HH(p!1) + FF(p!1 - HH(p!1))(j!1))")
                                                        (("1" (HIDE -1)
                                                          (("1"
                                                            (LEMMA
                                                             "both_sides_div_pos_le1"
                                                             ("pz"
                                                              "power@real_expt.^(2,(j!1 + 1))"
                                                              "x"
                                                              "sup_norm(p!1 - HH(p!1))"
                                                              "y"
                                                              "sup_norm(p!1) / 2"))
                                                            (("1"
                                                              (REWRITE
                                                               "div_div2")
                                                              (("1" (ASSERT)
                                                                (("1"
                                                                  (HIDE-ALL-BUT
                                                                   (-1 -2 1))
                                                                  (("1"
                                                                    (REWRITE
                                                                     "real_expt_int_rew")
                                                                    (("1"
                                                                      (REWRITE
                                                                       "real_expt_int_rew")
                                                                      (("1"
                                                                        (EXPAND
                                                                         "^")
                                                                        (("1"
                                                                          (EXPAND
                                                                           "expt"
                                                                           1)
                                                                          (("1"
                                                                            (ASSERT)
                                                                            NIL
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL)
                                                             ("2"
                                                              (REWRITE
                                                               "real_expt_int_rew")
                                                              (("2"
                                                                (REWRITE
                                                                 "expt_pos")
                                                                NIL NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL)
                                                         ("2" (HIDE-ALL-BUT 1)
                                                          (("2"
                                                            (APPLY-EXTENSIONALITY
                                                             :HIDE? T)
                                                            (("2" (EXPAND "-")
                                                              (("2"
                                                                (EXPAND "+")
                                                                (("2" (PROPAX)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("3" (SKOSIMP)
                                      (("3" (EXPAND "nn_bounded_measurable?")
                                        (("3" (EXPAND "bounded_measurable?")
                                          (("3" (REWRITE "real_expt_int_rew")
                                            (("3"
                                              (LEMMA "expt_pos"
                                               ("px" "2" "i" "1+n!2"))
                                              (("3" (ASSERT) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("4" (HIDE-ALL-BUT (-1 1))
                                      (("4" (SKOSIMP)
                                        (("4" (INST - "p!1" "n!2")
                                          (("4"
                                            (EXPAND "nn_bounded_measurable?")
                                            (("4"
                                              (EXPAND "bounded_measurable?")
                                              (("4" (FLATTEN) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("3" (SKOSIMP)
                                  (("3" (EXPAND "nn_bounded_measurable?")
                                    (("3" (EXPAND "bounded_measurable?")
                                      (("3" (REWRITE "real_expt_int_rew")
                                        (("3"
                                          (LEMMA "expt_pos"
                                           ("px" "2" "i" "1+n!1"))
                                          (("3" (ASSERT) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("4" (HIDE-ALL-BUT (-1 1))
                                  (("4" (SKOSIMP)
                                    (("4" (INST - "p!1" "n!1")
                                      (("4" (EXPAND "nn_bounded_measurable?")
                                        (("4" (EXPAND "bounded_measurable?")
                                          (("4" (FLATTEN) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (HIDE-ALL-BUT (-1 -3 1))
                                (("2" (SKOSIMP)
                                  (("2" (TYPEPRED "p!1")
                                    (("2" (EXPAND "nn_bounded_measurable?")
                                      (("2" (FLATTEN)
                                        (("2" (SPLIT)
                                          (("1" (INST -3 "p!1" "n!1")
                                            (("1"
                                              (LEMMA
                                               "simple_is_bounded_measurable"
                                               ("x" "FF(p!1)(n!1)"))
                                              (("1"
                                                (EXPAND "bounded_measurable?")
                                                (("1" (FLATTEN)
                                                  (("1" (SPLIT)
                                                    (("1"
                                                      (HIDE-ALL-BUT
                                                       (-3 -5 -7 1))
                                                      (("1" (EXPAND "bounded?")
                                                        (("1" (SKOSIMP)
                                                          (("1" (INST + "c!1")
                                                            (("1" (SKOSIMP)
                                                              (("1"
                                                                (INST - "x!1")
                                                                (("1"
                                                                  (INST -
                                                                   "x!1")
                                                                  (("1"
                                                                    (INST -
                                                                     "p!1"
                                                                     "n!1"
                                                                     "x!1")
                                                                    (("1"
                                                                      (FLATTEN)
                                                                      (("1"
                                                                        (EXPAND
                                                                         "abs")
                                                                        (("1"
                                                                          (ASSERT)
                                                                          (("1"
                                                                            (EXPAND
                                                                             "-")
                                                                            (("1"
                                                                              (ASSERT)
                                                                              NIL
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL)
                                                     ("2"
                                                      (REWRITE
                                                       "diff_measurable")
                                                      NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (ASSERT)
                                                (("2" (EXPAND "nn_simple?")
                                                  (("2" (PROPAX) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("2" (SKOSIMP)
                                            (("2" (EXPAND "-")
                                              (("2" (INST -4 "p!1" "n!1" "x!1")
                                                (("2" (FLATTEN)
                                                  (("2" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (HIDE 2)
                              (("2" (INDUCT "n")
                                (("1" (SKOSIMP)
                                  (("1" (INST -5 "p!1")
                                    (("1" (REPLACE -5)
                                      (("1" (REPLACE -12 1 RL)
                                        (("1" (ASSERT) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (SKOSIMP*)
                                  (("2" (INST -5 "p!1" "j!1")
                                    (("2" (REPLACE -5)
                                      (("2" (INST - "p!1")
                                        (("2" (TYPEPRED "GG(p!1)(j!1 + 1)")
                                          (("2" (HIDE-ALL-BUT (-1 -2 -3 1))
                                            (("2" (EXPAND "nn_simple?")
                                              (("2" (FLATTEN)
                                                (("2" (SPLIT)
                                                  (("1" (SKOSIMP)
                                                    (("1" (EXPAND "+")
                                                      (("1" (INST - "x!1")
                                                        (("1" (INST - "x!1")
                                                          (("1" (FLATTEN)
                                                            (("1" (ASSERT) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (REWRITE "simple_add")
                                                    NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (HIDE 2)
                            (("2" (SKOSIMP)
                              (("2" (EXPAND "pointwise_increasing?")
                                (("2" (SKOSIMP)
                                  (("2" (EXPAND "increasing?")
                                    (("2" (SKOSIMP)
                                      (("2"
                                        (CASE
                                            "forall n,m: FF(p!1)(m)(x!1) <= FF(p!1)(m+n)(x!1)")
                                        (("1" (INST - "y!1-x!2" "x!2")
                                          (("1" (ASSERT) NIL NIL)
                                           ("2" (ASSERT) NIL NIL))
                                          NIL)
                                         ("2" (HIDE -1 2)
                                          (("2" (INDUCT "n")
                                            (("1" (SKOSIMP)
                                              (("1" (ASSERT) NIL NIL)) NIL)
                                             ("2" (SKOSIMP*)
                                              (("2" (INST - "m!1+1")
                                                (("2"
                                                  (CASE
                                                      "FF(p!1)(m!1)(x!1) <= FF(p!1)(m!1 + 1)(x!1)")
                                                  (("1" (ASSERT) NIL NIL)
                                                   ("2" (HIDE -1 2)
                                                    (("2" (INST -3 "p!1" "m!1")
                                                      (("2" (REPLACE -3 1)
                                                        (("2" (EXPAND "+" 1)
                                                          (("2" (ASSERT)
                                                            (("2"
                                                              (EXPAND "GG" 1)
                                                              (("2"
                                                                (TYPEPRED
                                                                 "nn_simple_sequence(p!1)(1 + m!1)")
                                                                (("2"
                                                                  (INST -
                                                                   "x!1")
                                                                  (("2"
                                                                    (FLATTEN)
                                                                    (("2"
                                                                      (ASSERT)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (HIDE 2)
                          (("2" (INDUCT "n")
                            (("1" (SKOSIMP)
                              (("1" (INST - "p!1")
                                (("1" (REPLACE -3)
                                  (("1" (INST -8 "p!1")
                                    (("1" (FLATTEN)
                                      (("1" (INST -8 "x!1") NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (SKOSIMP*)
                              (("2" (INST - "p!1-HH(p!1)" "x!1")
                                (("1" (FLATTEN)
                                  (("1" (INST -3 "p!1" "j!1")
                                    (("1" (REPLACE -3)
                                      (("1" (HIDE -3)
                                        (("1" (EXPAND "+" 1)
                                          (("1"
                                            (NAME-REPLACE "F"
                                             "FF(p!1 - HH(p!1))(j!1)(x!1)")
                                            (("1" (EXPAND "-" -2)
                                              (("1" (ASSERT)
                                                (("1" (INST -9 "p!1")
                                                  (("1" (FLATTEN)
                                                    (("1" (INST -9 "x!1")
                                                      (("1" (FLATTEN)
                                                        (("1" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (INST -7 "p!1") NIL NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (HIDE 2)
                        (("2" (INDUCT "n")
                          (("1" (SKOSIMP)
                            (("1" (INST - "p!1" "0")
                              (("1" (REPLACE -1)
                                (("1" (INST -4 "p!1" "0")
                                  (("1" (REPLACE -4)
                                    (("1" (INST-CP - "p!1-HH(p!1)")
                                      (("1" (REPLACE -3)
                                        (("1" (INST -6 "p!1-HH(p!1)")
                                          (("1" (REPLACE -6)
                                            (("1" (INST -2 "p!1")
                                              (("1" (REPLACE -2)
                                                (("1"
                                                  (APPLY-EXTENSIONALITY 1
                                                   :HIDE? T)
                                                  (("1" (EXPAND "+")
                                                    (("1" (PROPAX) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (SKOSIMP*)
                            (("2" (INST-CP -2 "p!1" "j!1+1")
                              (("2" (REPLACE -3)
                                (("2" (HIDE -3)
                                  (("2" (INST -2 "p!1-HH(p!1)" "j!1")
                                    (("2" (REPLACE -2)
                                      (("2" (HIDE -2)
                                        (("2" (INST - "p!1")
                                          (("2" (REPLACE -1)
                                            (("2" (HIDE -1)
                                              (("2" (INST -3 "p!1" "j!1+1")
                                                (("2" (REPLACE -3)
                                                  (("2" (HIDE -3)
                                                    (("2"
                                                      (APPLY-EXTENSIONALITY 1
                                                       :HIDE? T)
                                                      (("2" (EXPAND "+" 1)
                                                        (("2" (PROPAX) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (SKOSIMP)
                      (("2" (HIDE-ALL-BUT 1)
                        (("2" (EXPAND "FF")
                          (("2" (APPLY-EXTENSIONALITY :HIDE? T)
                            (("2" (EXPAND "+")
                              (("2" (EXPAND "sigma" 1 1)
                                (("2" (PROPAX) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (HIDE-ALL-BUT 1)
                    (("2" (SKOSIMP)
                      (("2" (EXPAND "FF")
                        (("2" (APPLY-EXTENSIONALITY :HIDE? T)
                          (("2" (EXPAND "sigma")
                            (("2" (EXPAND "GG")
                              (("2" (EXPAND "nn_simple_sequence")
                                (("2" (EXPAND "HH")
                                  (("2" (EXPAND "sigma")
                                    (("2" (PROPAX) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (HIDE-ALL-BUT 1)
                (("2" (SKOSIMP)
                  (("2" (EXPAND "GG")
                    (("2" (EXPAND "nn_simple_sequence" 1 1)
                      (("2" (EXPAND "HH") (("2" (PROPAX) NIL NIL)) NIL)) NIL))
                    NIL))
                  NIL))
                NIL)
               ("3" (PROPAX) NIL NIL))
              NIL)
             ("2" (HIDE-ALL-BUT 1)
              (("2" (SKOSIMP)
                (("2" (EXPAND "GG")
                  (("2" (EXPAND "nn_simple_sequence")
                    (("2" (EXPAND "HH") (("2" (PROPAX) NIL NIL)) NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (HIDE 2)
            (("2" (SKOSIMP)
              (("2" (TYPEPRED "nn_simple_approx(p!1)")
                (("2" (REPLACE -4)
                  (("2" (LEMMA "simple_is_bounded_measurable" ("x" "HH(p!1)"))
                    (("2" (TYPEPRED "p!1")
                      (("2" (EXPAND "nn_bounded_measurable?")
                        (("2" (EXPAND "bounded_measurable?")
                          (("2" (FLATTEN)
                            (("2" (USE "bounded_diff")
                              (("2" (ASSERT)
                                (("2" (HIDE -1)
                                  (("2" (USE "bounded_diff")
                                    (("2" (SKOSIMP)
                                      (("2" (EXPAND "-")
                                        (("2" (INST -8 "p!1")
                                          (("2" (FLATTEN)
                                            (("2" (INST -8 "x!1")
                                              (("2" (ASSERT) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (HIDE-ALL-BUT (-2 1))
          (("2" (SKOSIMP)
            (("2"
              (CASE "nonempty?({h | (forall x: 0 <= h(x) & h(x) <= p!1(x)) AND
                                        sup_norm(p!1-h) <= sup_norm(p!1)/2})")
              (("1"
                (LEMMA "choose_member"
                 ("a" "({h |
                          (FORALL x: 0 <= h(x) & h(x) <= p!1(x)) AND
                           sup_norm(p!1 - h) <= sup_norm(p!1) / 2})"))
                (("1" (SPLIT -1)
                  (("1" (EXPAND "HH")
                    (("1" (EXPAND "nn_simple_approx")
                      (("1"
                        (NAME-REPLACE "H" "choose({h |
                            (FORALL x: 0 <= h(x) & h(x) <= p!1(x)) AND
                             sup_norm(p!1 - h) <= sup_norm(p!1) / 2})")
                        (("1" (EXPAND "member") (("1" (PROPAX) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (EXPAND "nonempty?") (("2" (PROPAX) NIL NIL)) NIL))
                  NIL))
                NIL)
               ("2" (HIDE -1 2)
                (("2" (EXPAND "nonempty?")
                  (("2" (EXPAND "empty?")
                    (("2" (EXPAND "member")
                      (("2" (LEMMA "sup_norm_simple" ("p" "p!1"))
                        (("2" (SKOLEM!) (("2" (INST -2 "h!1") NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("3" (HIDE-ALL-BUT 1)
          (("3" (SKEEP)
            (("3" (USE "simple_is_bounded_measurable")
              (("3" (EXPAND "bounded_measurable?")
                (("3" (FLATTEN) (("3" (USE "bounded_diff") NIL NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|nn_simple_sequence| DEF-DECL "{h | FORALL x: 0 <= h(x) & h(x) <= p(x)}"
     |measure_space| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|simple| NONEMPTY-TYPE-EQ-DECL NIL |measure_space| NIL)
    (|simple?| CONST-DECL "bool" |measure_space| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) NIL NIL
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|choose| CONST-DECL "(p)" |sets| NIL)
    (|choose_member| FORMULA-DECL NIL |sets_lemmas| NIL)
    (|sup_norm_simple| FORMULA-DECL NIL |measure_space| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) NIL
    NIL (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (|pointwise_increasing?| CONST-DECL "bool" |pointwise_convergence| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|simple_add| JUDGEMENT-TCC NIL |measure_space| NIL)
    (|bounded_measurable?| CONST-DECL "bool" |measure_space| NIL)
    (|expt_plus| FORMULA-DECL NIL |exponentiation| NIL)
    (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|odd_plus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|div_div2| FORMULA-DECL NIL |real_props| NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|both_sides_div_pos_le1| FORMULA-DECL NIL |real_props| NIL)
    (|expt_x1| FORMULA-DECL NIL |exponentiation| NIL)
    (|real_expt_x1| FORMULA-DECL NIL |real_expt| |power|)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|sup_norm_converges_to?| CONST-DECL "bool" |sup_norm| NIL) NIL
    (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal"
     |real_types| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|posnat_expt| APPLICATION-JUDGEMENT "posnat" |exponentiation| NIL)
    (|div_mult_pos_lt1| FORMULA-DECL NIL |real_props| NIL)
    (|expt| DEF-DECL "real" |exponentiation| NIL)
    (|posreal_div_posreal_is_posreal| JUDGEMENT-TCC NIL |real_types| NIL)
    (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|large_expt| FORMULA-DECL NIL |exponentiation| NIL) NIL
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|expt_pos| FORMULA-DECL NIL |exponentiation| NIL)
    (|both_sides_expt_gt1_le| FORMULA-DECL NIL |exponentiation| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_expt_int_rew| FORMULA-DECL NIL |real_expt| |power|)
    (|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|both_sides_div_pos_le2| FORMULA-DECL NIL |real_props| NIL)
    (|sup_norm_neg| FORMULA-DECL NIL |sup_norm| NIL)
    (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|increasing_nn_simple| NONEMPTY-TYPE-EQ-DECL NIL |measure_space| NIL)
    (|increasing_nn_simple?| CONST-DECL "bool" |measure_space| NIL)
    (|measurable_function| NONEMPTY-TYPE-EQ-DECL NIL |measure_space_def| NIL)
    NIL NIL (|measurable_function?| CONST-DECL "bool" |measure_space_def| NIL)
    (S FORMAL-CONST-DECL "sigma_algebra" |measure_space| NIL)
    (|sigma_algebra| NONEMPTY-TYPE-EQ-DECL NIL |subset_algebra_def| NIL)
    (|sigma_algebra?| CONST-DECL "bool" |subset_algebra_def| NIL)
    (|setofsets| TYPE-EQ-DECL NIL |sets| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (^ CONST-DECL "nnreal" |real_expt| |power|)
    (> CONST-DECL "bool" |reals| NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|simple_is_bounded_measurable| JUDGEMENT-TCC NIL |measure_space| NIL)
    (|diff_measurable| JUDGEMENT-TCC NIL |measure_space_def| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    NIL (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    NIL NIL (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|increasing?| CONST-DECL "bool" |real_fun_preds| |reals|)
    (|simple_add| APPLICATION-JUDGEMENT "simple" |measure_space| NIL)
    (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) NIL
    (|sigma| DEF-DECL "real" |sigma| |reals|)
    (|T_high| TYPE-EQ-DECL NIL |sigma| |reals|)
    (|T_low| TYPE-EQ-DECL NIL |sigma| |reals|)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|bounded_diff| JUDGEMENT-TCC NIL |sup_norm| NIL) NIL
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) NIL
    (|sup_norm| CONST-DECL "nnreal" |sup_norm| NIL)
    (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL)
    (|bounded| NONEMPTY-TYPE-EQ-DECL NIL |sup_norm| NIL)
    (|bounded?| CONST-DECL "bool" |sup_norm| NIL)
    (|nnreal_div_posreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types|
     NIL)
    NIL (T FORMAL-TYPE-DECL NIL |measure_space| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|nn_bounded_measurable?| CONST-DECL "bool" |measure_space| NIL)
    (|nn_bounded_measurable| NONEMPTY-TYPE-EQ-DECL NIL |measure_space| NIL)
    (|nn_simple?| CONST-DECL "bool" |measure_space| NIL)
    (|nn_simple| NONEMPTY-TYPE-EQ-DECL NIL |measure_space| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|nn_simple_approx| CONST-DECL "nn_simple" |measure_space| NIL))
   NIL)
  (|nn_bounded_measurable_as_increasing_simple_sequence-2| |nil| 3791972116
   ("" (NAME "HH" "nn_simple_approx")
    (("" (NAME "GG" "nn_simple_sequence")
      ((""
        (CASE "forall p: (forall x: 0 <= HH(p)(x) & HH(p)(x) <= p(x)) AND
                                      sup_norm(p-HH(p)) <= sup_norm(p)/2")
        (("1" (CASE "forall p: nn_bounded_measurable?(p-HH(p))")
          (("1" (CASE "forall p: GG(p)(0)=HH(p)")
            (("1" (CASE "forall p,n: GG(p)(n+1)= GG(p-HH(p))(n)")
              (("1"
                (NAME "FF"
                      "lambda p: lambda n: lambda x: sigma(0,n,lambda i: GG(p)(i)(x))")
                (("1" (CASE "forall p:FF(p)(0)= HH(p)")
                  (("1"
                    (CASE "FORALL p, n: FF(p)(n + 1) = GG(p)(n+1)+FF(p)(n)")
                    (("1"
                      (CASE
                          "FORALL p, n: FF(p)(n + 1) = HH(p) + FF(p - HH(p))(n)")
                      (("1"
                        (CASE
                            "FORALL p, n,x: 0<=FF(p)(n)(x)& FF(p)(n)(x)<=p(x)")
                        (("1" (CASE "forall p: pointwise_increasing?(FF(p))")
                          (("1" (CASE "forall p,n: nn_simple?(FF(p)(n))")
                            (("1"
                              (CASE
                                  "FORALL p,n: nn_bounded_measurable?(p - FF(p)(n))")
                              (("1"
                                (CASE
                                    "forall p,n: sup_norm(p-FF(p)(n)) <= sup_norm(p) / power@real_expt.^(2,(n+1))")
                                (("1" (SKOSIMP)
                                  (("1" (INST + "FF(p!1)")
                                    (("1" (EXPAND "sup_norm_converges_to?")
                                      (("1" (SKOSIMP)
                                        (("1" (INST - "p!1" "_")
                                          (("1"
                                            (CASE
                                                "exists n: sup_norm(p!1) / 2 ^ (n + 1)< epsilon!1")
                                            (("1" (SKOSIMP)
                                              (("1" (INST + "n!1")
                                                (("1" (SKOSIMP)
                                                  (("1" (INST - "i!1")
                                                    (("1"
                                                      (CASE-REPLACE
                                                       "FF(p!1)(i!1) - p!1 = -(p!1 - FF(p!1)(i!1))")
                                                      (("1"
                                                        (REWRITE
                                                         "sup_norm_neg")
                                                        (("1"
                                                          (NAME-REPLACE "LHS"
                                                           "sup_norm((p!1 - FF(p!1)(i!1)))")
                                                          (("1" (HIDE -1)
                                                            (("1"
                                                              (CASE-REPLACE
                                                               "sup_norm(p!1)=0")
                                                              (("1" (ASSERT)
                                                                NIL)
                                                               ("2"
                                                                (LEMMA
                                                                 "both_sides_div_pos_le2"
                                                                 ("pz"
                                                                  "sup_norm(p!1)"
                                                                  "py"
                                                                  "2 ^ (n!1 + 1)"
                                                                  "px"
                                                                  "2 ^ (i!1 + 1)"))
                                                                (("1"
                                                                  (LEMMA
                                                                   "both_sides_expt_gt1_le"
                                                                   ("gt1x" "2"
                                                                    "i" "n!1+1"
                                                                    "j"
                                                                    "i!1+1"))
                                                                  (("1"
                                                                    (ASSERT)
                                                                    (("1"
                                                                      (HIDE-ALL-BUT
                                                                       (-1 1))
                                                                      (("1"
                                                                        (REWRITE
                                                                         "real_expt_int_rew")
                                                                        (("1"
                                                                          (REWRITE
                                                                           "real_expt_int_rew")
                                                                          NIL)))))))))
                                                                 ("2" (ASSERT)
                                                                  NIL)
                                                                 ("3"
                                                                  (HIDE-ALL-BUT
                                                                   1)
                                                                  (("3"
                                                                    (REWRITE
                                                                     "real_expt_int_rew")
                                                                    (("3"
                                                                      (REWRITE
                                                                       "expt_pos")
                                                                      NIL)))))
                                                                 ("4"
                                                                  (HIDE-ALL-BUT
                                                                   1)
                                                                  (("4"
                                                                    (REWRITE
                                                                     "real_expt_int_rew")
                                                                    (("4"
                                                                      (REWRITE
                                                                       "expt_pos")
                                                                      NIL)))))))))))))))
                                                       ("2" (HIDE-ALL-BUT 1)
                                                        (("2"
                                                          (APPLY-EXTENSIONALITY
                                                           :HIDE? T)
                                                          (("2" (EXPAND "-")
                                                            (("2" (ASSERT)
                                                              NIL)))))))))))))))))
                                             ("2" (HIDE-ALL-BUT 1)
                                              (("2"
                                                (LEMMA "large_expt" ("px" "2"))
                                                (("2" (ASSERT)
                                                  (("2"
                                                    (CASE-REPLACE
                                                     "sup_norm(p!1)=0")
                                                    (("1" (INST + "0")
                                                      (("1" (ASSERT) NIL)))
                                                     ("2"
                                                      (INST -
                                                       "sup_norm(p!1)/epsilon!1")
                                                      (("1" (SKOSIMP)
                                                        (("1" (INST + "n!1")
                                                          (("1"
                                                            (REWRITE
                                                             "div_mult_pos_lt1")
                                                            (("1"
                                                              (REWRITE
                                                               "div_mult_pos_lt1")
                                                              (("1"
                                                                (REWRITE
                                                                 "real_expt_int_rew")
                                                                (("1"
                                                                  (EXPAND "^")
                                                                  (("1"
                                                                    (EXPAND
                                                                     "expt" 2)
                                                                    (("1"
                                                                      (ASSERT)
                                                                      NIL)))))))
                                                               ("2"
                                                                (REWRITE
                                                                 "real_expt_int_rew")
                                                                (("2"
                                                                  (REWRITE
                                                                   "expt_pos")
                                                                  NIL)))))))))))
                                                       ("2"
                                                        (LEMMA
                                                         "posreal_div_posreal_is_posreal"
                                                         ("px"
                                                          "sup_norm[T](p!1)"
                                                          "py" "epsilon!1"))
                                                        (("1" (PROPAX) NIL)
                                                         ("2" (ASSERT)
                                                          NIL)))))))))))))
                                             ("3" (HIDE-ALL-BUT 1)
                                              (("3" (SKOSIMP)
                                                (("3"
                                                  (REWRITE "real_expt_int_rew")
                                                  (("3"
                                                    (LEMMA "expt_pos"
                                                     ("px" "2" "i" "1+n!1"))
                                                    (("3" (ASSERT)
                                                      NIL)))))))))))))))))
                                     ("2" (SPLIT 1)
                                      (("1" (SKOLEM + ("n!1"))
                                        (("1" (INST -3 "p!1" "n!1")
                                          (("1" (HIDE-ALL-BUT (-3 1))
                                            (("1" (EXPAND "nn_simple?")
                                              (("1" (EXPAND "simple?")
                                                (("1" (FLATTEN)
                                                  (("1" (ASSERT)
                                                    (("1" (PROPAX)
                                                      NIL)))))))))))))))
                                       ("2" (EXPAND "increasing_nn_simple?")
                                        (("2" (SPLIT)
                                          (("1" (SKOSIMP)
                                            (("1" (INST -3 "p!1" "n!1") NIL)))
                                           ("2" (INST -4 "p!1") NIL)))))))))))
                                 ("2" (HIDE 2)
                                  (("2" (INDUCT "n")
                                    (("1" (SKOSIMP)
                                      (("1" (INST -7 "p!1")
                                        (("1" (REPLACE -7)
                                          (("1" (INST -12 "p!1")
                                            (("1" (FLATTEN)
                                              (("1" (REWRITE "real_expt_x1")
                                                NIL)))))))))))
                                     ("2" (SKOSIMP*)
                                      (("2" (INST -6 "p!1" "j!1")
                                        (("2" (REPLACE -6)
                                          (("2" (INST - "p!1-HH(p!1)")
                                            (("2" (INST -13 "p!1")
                                              (("2" (FLATTEN)
                                                (("2"
                                                  (LEMMA "expt_plus"
                                                   ("n0x" "2" "i" "1" "j"
                                                    "j!1+1"))
                                                  (("2" (REWRITE "expt_x1")
                                                    (("2" (HIDE -1)
                                                      (("2"
                                                        (CASE-REPLACE
                                                         "p!1 - HH(p!1) - FF(p!1 - HH(p!1))(j!1)=p!1 - (HH(p!1) + FF(p!1 - HH(p!1))(j!1))")
                                                        (("1" (HIDE -1)
                                                          (("1"
                                                            (LEMMA
                                                             "both_sides_div_pos_le1"
                                                             ("pz"
                                                              "2 ^ (j!1 + 1)"
                                                              "x"
                                                              "sup_norm(p!1 - HH(p!1))"
                                                              "y"
                                                              "sup_norm(p!1) / 2"))
                                                            (("1"
                                                              (REWRITE
                                                               "div_div2")
                                                              (("1" (ASSERT)
                                                                (("1"
                                                                  (HIDE-ALL-BUT
                                                                   (-1 -2 1))
                                                                  (("1"
                                                                    (REWRITE
                                                                     "real_expt_int_rew")
                                                                    (("1"
                                                                      (REWRITE
                                                                       "real_expt_int_rew")
                                                                      (("1"
                                                                        (EXPAND
                                                                         "^")
                                                                        (("1"
                                                                          (EXPAND
                                                                           "expt"
                                                                           1)
                                                                          (("1"
                                                                            (ASSERT)
                                                                            NIL)))))))))))))))
                                                             ("2"
                                                              (REWRITE
                                                               "real_expt_int_rew")
                                                              (("2"
                                                                (REWRITE
                                                                 "expt_pos")
                                                                NIL)))))))
                                                         ("2" (HIDE-ALL-BUT 1)
                                                          (("2"
                                                            (APPLY-EXTENSIONALITY
                                                             :HIDE? T)
                                                            (("2" (EXPAND "-")
                                                              (("2"
                                                                (EXPAND "+")
                                                                (("2" (PROPAX)
                                                                  NIL)))))))))))))))))))))))))))))
                                     ("3" (SKOSIMP)
                                      (("3" (EXPAND "nn_bounded_measurable?")
                                        (("3" (EXPAND "bounded_measurable?")
                                          (("3" (REWRITE "real_expt_int_rew")
                                            (("3"
                                              (LEMMA "expt_pos"
                                               ("px" "2" "i" "1+n!2"))
                                              (("3" (ASSERT) NIL)))))))))))
                                     ("4" (HIDE-ALL-BUT (-1 1))
                                      (("4" (SKOSIMP)
                                        (("4" (INST - "p!1" "n!2")
                                          (("4"
                                            (EXPAND "nn_bounded_measurable?")
                                            (("4"
                                              (EXPAND "bounded_measurable?")
                                              (("4" (FLATTEN)
                                                NIL)))))))))))))))
                                 ("3" (SKOSIMP)
                                  (("3" (EXPAND "nn_bounded_measurable?")
                                    (("3" (EXPAND "bounded_measurable?")
                                      (("3" (REWRITE "real_expt_int_rew")
                                        (("3"
                                          (LEMMA "expt_pos"
                                           ("px" "2" "i" "1+n!1"))
                                          (("3" (ASSERT) NIL)))))))))))
                                 ("4" (HIDE-ALL-BUT (-1 1))
                                  (("4" (SKOSIMP)
                                    (("4" (INST - "p!1" "n!1")
                                      (("4" (EXPAND "nn_bounded_measurable?")
                                        (("4" (EXPAND "bounded_measurable?")
                                          (("4" (FLATTEN) NIL)))))))))))))
                               ("2" (HIDE-ALL-BUT (-1 -3 1))
                                (("2" (SKOSIMP)
                                  (("2" (TYPEPRED "p!1")
                                    (("2" (EXPAND "nn_bounded_measurable?")
                                      (("2" (FLATTEN)
                                        (("2" (SPLIT)
                                          (("1" (INST -3 "p!1" "n!1")
                                            (("1"
                                              (LEMMA
                                               "simple_is_bounded_measurable"
                                               ("x" "FF(p!1)(n!1)"))
                                              (("1"
                                                (EXPAND "bounded_measurable?")
                                                (("1" (FLATTEN)
                                                  (("1" (SPLIT)
                                                    (("1"
                                                      (HIDE-ALL-BUT
                                                       (-3 -5 -7 1))
                                                      (("1" (EXPAND "bounded?")
                                                        (("1" (SKOSIMP)
                                                          (("1" (INST + "c!1")
                                                            (("1" (SKOSIMP)
                                                              (("1"
                                                                (INST - "x!1")
                                                                (("1"
                                                                  (INST -
                                                                   "x!1")
                                                                  (("1"
                                                                    (INST -
                                                                     "p!1"
                                                                     "n!1"
                                                                     "x!1")
                                                                    (("1"
                                                                      (FLATTEN)
                                                                      (("1"
                                                                        (EXPAND
                                                                         "abs")
                                                                        (("1"
                                                                          (ASSERT)
                                                                          (("1"
                                                                            (EXPAND
                                                                             "-")
                                                                            (("1"
                                                                              (ASSERT)
                                                                              NIL)))))))))))))))))))))))))
                                                     ("2"
                                                      (REWRITE
                                                       "diff_measurable")
                                                      NIL)))))))
                                               ("2" (ASSERT)
                                                (("2" (EXPAND "nn_simple?")
                                                  (("2" (PROPAX) NIL)))))))))
                                           ("2" (SKOSIMP)
                                            (("2" (EXPAND "-")
                                              (("2" (INST -4 "p!1" "n!1" "x!1")
                                                (("2" (FLATTEN)
                                                  (("2" (ASSERT)
                                                    NIL)))))))))))))))))))))))
                             ("2" (HIDE 2)
                              (("2" (INDUCT "n")
                                (("1" (SKOSIMP)
                                  (("1" (INST -5 "p!1")
                                    (("1" (REPLACE -5)
                                      (("1" (REPLACE -12 1 RL)
                                        (("1" (ASSERT) NIL)))))))))
                                 ("2" (SKOSIMP*)
                                  (("2" (INST -5 "p!1" "j!1")
                                    (("2" (REPLACE -5)
                                      (("2" (INST - "p!1")
                                        (("2" (TYPEPRED "GG(p!1)(j!1 + 1)")
                                          (("2" (HIDE-ALL-BUT (-1 -2 -3 1))
                                            (("2" (EXPAND "nn_simple?")
                                              (("2" (FLATTEN)
                                                (("2" (SPLIT)
                                                  (("1" (SKOSIMP)
                                                    (("1" (EXPAND "+")
                                                      (("1" (INST - "x!1")
                                                        (("1" (INST - "x!1")
                                                          (("1" (FLATTEN)
                                                            (("1" (ASSERT)
                                                              NIL)))))))))))
                                                   ("2" (REWRITE "simple_add")
                                                    NIL)))))))))))))))))))))))))
                           ("2" (HIDE 2)
                            (("2" (SKOSIMP)
                              (("2" (EXPAND "pointwise_increasing?")
                                (("2" (SKOSIMP)
                                  (("2" (EXPAND "increasing?")
                                    (("2" (SKOSIMP)
                                      (("2"
                                        (CASE
                                            "forall n,m: FF(p!1)(m)(x!1) <= FF(p!1)(m+n)(x!1)")
                                        (("1" (INST - "y!1-x!2" "x!2")
                                          (("1" (ASSERT) NIL)
                                           ("2" (ASSERT) NIL)))
                                         ("2" (HIDE -1 2)
                                          (("2" (INDUCT "n")
                                            (("1" (SKOSIMP)
                                              (("1" (ASSERT) NIL)))
                                             ("2" (SKOSIMP*)
                                              (("2" (INST - "m!1+1")
                                                (("2"
                                                  (CASE
                                                      "FF(p!1)(m!1)(x!1) <= FF(p!1)(m!1 + 1)(x!1)")
                                                  (("1" (ASSERT) NIL)
                                                   ("2" (HIDE -1 2)
                                                    (("2" (INST -3 "p!1" "m!1")
                                                      (("2" (REPLACE -3 1)
                                                        (("2" (EXPAND "+" 1)
                                                          (("2" (ASSERT)
                                                            (("2"
                                                              (EXPAND "GG" 1)
                                                              (("2"
                                                                (TYPEPRED
                                                                 "nn_simple_sequence(p!1)(1 + m!1)")
                                                                (("2"
                                                                  (INST -
                                                                   "x!1")
                                                                  (("2"
                                                                    (FLATTEN)
                                                                    (("2"
                                                                      (ASSERT)
                                                                      NIL)))))))))))))))))))))))))))))))))))))))))))))
                         ("2" (HIDE 2)
                          (("2" (INDUCT "n")
                            (("1" (SKOSIMP)
                              (("1" (INST - "p!1")
                                (("1" (REPLACE -3)
                                  (("1" (INST -8 "p!1")
                                    (("1" (FLATTEN)
                                      (("1" (INST -8 "x!1") NIL)))))))))))
                             ("2" (SKOSIMP*)
                              (("2" (INST - "p!1-HH(p!1)" "x!1")
                                (("1" (FLATTEN)
                                  (("1" (INST -3 "p!1" "j!1")
                                    (("1" (REPLACE -3)
                                      (("1" (HIDE -3)
                                        (("1" (EXPAND "+" 1)
                                          (("1"
                                            (NAME-REPLACE "F"
                                             "FF(p!1 - HH(p!1))(j!1)(x!1)")
                                            (("1" (EXPAND "-" -2)
                                              (("1" (ASSERT)
                                                (("1" (INST -9 "p!1")
                                                  (("1" (FLATTEN)
                                                    (("1" (INST -9 "x!1")
                                                      (("1" (FLATTEN)
                                                        (("1" (ASSERT)
                                                          NIL)))))))))))))))))))))))))
                                 ("2" (INST -7 "p!1") NIL)))))))))))
                       ("2" (HIDE 2)
                        (("2" (INDUCT "n")
                          (("1" (SKOSIMP)
                            (("1" (INST - "p!1" "0")
                              (("1" (REPLACE -1)
                                (("1" (INST -4 "p!1" "0")
                                  (("1" (REPLACE -4)
                                    (("1" (INST-CP - "p!1-HH(p!1)")
                                      (("1" (REPLACE -3)
                                        (("1" (INST -6 "p!1-HH(p!1)")
                                          (("1" (REPLACE -6)
                                            (("1" (INST -2 "p!1")
                                              (("1" (REPLACE -2)
                                                (("1"
                                                  (APPLY-EXTENSIONALITY 1
                                                   :HIDE? T)
                                                  (("1" (EXPAND "+")
                                                    (("1" (PROPAX)
                                                      NIL)))))))))))))))))))))))))))
                           ("2" (SKOSIMP*)
                            (("2" (INST-CP -2 "p!1" "j!1+1")
                              (("2" (REPLACE -3)
                                (("2" (HIDE -3)
                                  (("2" (INST -2 "p!1-HH(p!1)" "j!1")
                                    (("2" (REPLACE -2)
                                      (("2" (HIDE -2)
                                        (("2" (INST - "p!1")
                                          (("2" (REPLACE -1)
                                            (("2" (HIDE -1)
                                              (("2" (INST -3 "p!1" "j!1+1")
                                                (("2" (REPLACE -3)
                                                  (("2" (HIDE -3)
                                                    (("2"
                                                      (APPLY-EXTENSIONALITY 1
                                                       :HIDE? T)
                                                      (("2" (EXPAND "+" 1)
                                                        (("2" (PROPAX)
                                                          NIL)))))))))))))))))))))))))))))))))))))
                     ("2" (SKOSIMP)
                      (("2" (HIDE-ALL-BUT 1)
                        (("2" (EXPAND "FF")
                          (("2" (APPLY-EXTENSIONALITY :HIDE? T)
                            (("2" (EXPAND "+")
                              (("2" (EXPAND "sigma" 1 1)
                                (("2" (PROPAX) NIL)))))))))))))))
                   ("2" (HIDE-ALL-BUT 1)
                    (("2" (SKOSIMP)
                      (("2" (EXPAND "FF")
                        (("2" (APPLY-EXTENSIONALITY :HIDE? T)
                          (("2" (EXPAND "sigma")
                            (("2" (EXPAND "GG")
                              (("2" (EXPAND "nn_simple_sequence")
                                (("2" (EXPAND "HH")
                                  (("2" (EXPAND "sigma")
                                    (("2" (PROPAX) NIL)))))))))))))))))))))))
               ("2" (HIDE-ALL-BUT 1)
                (("2" (SKOSIMP)
                  (("2" (EXPAND "GG")
                    (("2" (EXPAND "nn_simple_sequence" 1 1)
                      (("2" (EXPAND "HH") (("2" (PROPAX) NIL)))))))))))
               ("3" (PROPAX) NIL)))
             ("2" (HIDE-ALL-BUT 1)
              (("2" (SKOSIMP)
                (("2" (EXPAND "GG")
                  (("2" (EXPAND "nn_simple_sequence")
                    (("2" (EXPAND "HH") (("2" (PROPAX) NIL)))))))))))))
           ("2" (HIDE 2)
            (("2" (SKOSIMP)
              (("2" (TYPEPRED "nn_simple_approx(p!1)")
                (("2" (REPLACE -4)
                  (("2" (LEMMA "simple_is_bounded_measurable" ("x" "HH(p!1)"))
                    (("2" (TYPEPRED "p!1")
                      (("2" (EXPAND "nn_bounded_measurable?")
                        (("2" (EXPAND "bounded_measurable?")
                          (("2" (FLATTEN)
                            (("2" (SKOSIMP)
                              (("2" (EXPAND "-")
                                (("2" (INST -7 "p!1")
                                  (("2" (FLATTEN)
                                    (("2" (INST -7 "x!1")
                                      (("2" (ASSERT)
                                        NIL)))))))))))))))))))))))))))))))
         ("2" (HIDE-ALL-BUT (-2 1))
          (("2" (SKOSIMP)
            (("2"
              (CASE "nonempty?({h | (forall x: 0 <= h(x) & h(x) <= p!1(x)) AND
                                        sup_norm(p!1-h) <= sup_norm(p!1)/2})")
              (("1"
                (LEMMA "choose_member"
                 ("a" "({h |
                          (FORALL x: 0 <= h(x) & h(x) <= p!1(x)) AND
                           sup_norm(p!1 - h) <= sup_norm(p!1) / 2})"))
                (("1" (SPLIT -1)
                  (("1" (EXPAND "HH")
                    (("1" (EXPAND "nn_simple_approx")
                      (("1"
                        (NAME-REPLACE "H" "choose({h |
                            (FORALL x: 0 <= h(x) & h(x) <= p!1(x)) AND
                             sup_norm(p!1 - h) <= sup_norm(p!1) / 2})")
                        (("1" (EXPAND "member") (("1" (PROPAX) NIL)))))))))
                   ("2" (EXPAND "nonempty?") (("2" (PROPAX) NIL)))))))
               ("2" (HIDE -1 2)
                (("2" (EXPAND "nonempty?")
                  (("2" (EXPAND "empty?")
                    (("2" (EXPAND "member")
                      (("2" (LEMMA "sup_norm_simple" ("p" "p!1"))
                        (("2" (SKOLEM!)
                          (("2" (INST -2 "h!1") NIL))))))))))))))))))))))))
    NIL)
   NIL NIL)
  (|nn_bounded_measurable_as_increasing_simple_sequence-1| |nil| 3394603518
   ("" (NAME "HH" "nn_simple_approx")
    (("" (NAME "GG" "nn_simple_sequence")
      ((""
        (CASE "forall p: (forall x: 0 <= HH(p)(x) & HH(p)(x) <= p(x)) AND
                               sup_norm(p-HH(p)) <= sup_norm(p)/2")
        (("1" (CASE "forall p: nn_bounded_measurable?(p-HH(p))")
          (("1" (CASE "forall p: GG(p)(0)=HH(p)")
            (("1" (CASE "forall p,n: GG(p)(n+1)= GG(p-HH(p))(n)")
              (("1"
                (NAME "FF"
                      "lambda p: lambda n: lambda x: sigma(0,n,lambda i: GG(p)(i)(x))")
                (("1" (CASE "forall p:FF(p)(0)= HH(p)")
                  (("1"
                    (CASE "FORALL p, n: FF(p)(n + 1) = GG(p)(n+1)+FF(p)(n)")
                    (("1"
                      (CASE
                          "FORALL p, n: FF(p)(n + 1) = HH(p) + FF(p - HH(p))(n)")
                      (("1"
                        (CASE
                            "FORALL p, n,x: 0<=FF(p)(n)(x)& FF(p)(n)(x)<=p(x)")
                        (("1" (CASE "forall p: pointwise_increasing?(FF(p))")
                          (("1" (CASE "forall p,n: nn_simple?(FF(p)(n))")
                            (("1"
                              (CASE
                                  "FORALL p,n: nn_bounded_measurable?(p - FF(p)(n))")
                              (("1"
                                (CASE
                                    "forall p,n: sup_norm(p-FF(p)(n)) <= sup_norm(p) / 2^(n+1)")
                                (("1" (SKOSIMP)
                                  (("1" (INST + "FF(p!1)")
                                    (("1" (EXPAND "sup_norm_converges_to?")
                                      (("1" (SKOSIMP)
                                        (("1" (INST - "p!1" "_")
                                          (("1"
                                            (CASE
                                                "exists n: sup_norm(p!1) / 2 ^ (n + 1)< epsilon!1")
                                            (("1" (SKOSIMP)
                                              (("1" (INST + "n!1")
                                                (("1" (SKOSIMP)
                                                  (("1" (INST - "i!1")
                                                    (("1"
                                                      (CASE-REPLACE
                                                       "FF(p!1)(i!1) - p!1 = -(p!1 - FF(p!1)(i!1))")
                                                      (("1"
                                                        (REWRITE
                                                         "sup_norm_neg")
                                                        (("1"
                                                          (NAME-REPLACE "LHS"
                                                           "sup_norm((p!1 - FF(p!1)(i!1)))")
                                                          (("1" (HIDE -1)
                                                            (("1"
                                                              (CASE-REPLACE
                                                               "sup_norm(p!1)=0")
                                                              (("1" (ASSERT)
                                                                NIL NIL)
                                                               ("2"
                                                                (LEMMA
                                                                 "both_sides_div_pos_le2"
                                                                 ("pz"
                                                                  "sup_norm(p!1)"
                                                                  "py"
                                                                  "2 ^ (n!1 + 1)"
                                                                  "px"
                                                                  "2 ^ (i!1 + 1)"))
                                                                (("1"
                                                                  (LEMMA
                                                                   "both_sides_expt_gt1_le"
                                                                   ("gt1x" "2"
                                                                    "i" "n!1+1"
                                                                    "j"
                                                                    "i!1+1"))
                                                                  (("1"
                                                                    (ASSERT)
                                                                    (("1"
                                                                      (HIDE-ALL-BUT
                                                                       (-1 1))
                                                                      (("1"
                                                                        (REWRITE
                                                                         "real_expt_int_rew")
                                                                        (("1"
                                                                          (REWRITE
                                                                           "real_expt_int_rew")
                                                                          NIL
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL)
                                                                 ("2" (ASSERT)
                                                                  NIL NIL)
                                                                 ("3"
                                                                  (HIDE-ALL-BUT
                                                                   1)
                                                                  (("3"
                                                                    (REWRITE
                                                                     "real_expt_int_rew")
                                                                    (("3"
                                                                      (REWRITE
                                                                       "expt_pos")
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL)
                                                                 ("4"
                                                                  (HIDE-ALL-BUT
                                                                   1)
                                                                  (("4"
                                                                    (REWRITE
                                                                     "real_expt_int_rew")
                                                                    (("4"
                                                                      (REWRITE
                                                                       "expt_pos")
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL)
                                                       ("2" (HIDE-ALL-BUT 1)
                                                        (("2"
                                                          (APPLY-EXTENSIONALITY
                                                           :HIDE? T)
                                                          (("2" (EXPAND "-")
                                                            (("2" (ASSERT) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2" (HIDE-ALL-BUT 1)
                                              (("2"
                                                (LEMMA "large_expt" ("px" "2"))
                                                (("2" (ASSERT)
                                                  (("2"
                                                    (CASE-REPLACE
                                                     "sup_norm(p!1)=0")
                                                    (("1" (INST + "0")
                                                      (("1" (ASSERT) NIL NIL))
                                                      NIL)
                                                     ("2"
                                                      (INST -
                                                       "sup_norm(p!1)/epsilon!1")
                                                      (("1" (SKOSIMP)
                                                        (("1" (INST + "n!1")
                                                          (("1"
                                                            (REWRITE
                                                             "div_mult_pos_lt1")
                                                            (("1"
                                                              (REWRITE
                                                               "div_mult_pos_lt1")
                                                              (("1"
                                                                (REWRITE
                                                                 "real_expt_int_rew")
                                                                (("1"
                                                                  (EXPAND "^")
                                                                  (("1"
                                                                    (EXPAND
                                                                     "expt" 2)
                                                                    (("1"
                                                                      (ASSERT)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL)
                                                               ("2"
                                                                (REWRITE
                                                                 "real_expt_int_rew")
                                                                (("2"
                                                                  (REWRITE
                                                                   "expt_pos")
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL)
                                                       ("2"
                                                        (LEMMA
                                                         "posreal_div_posreal_is_posreal"
                                                         ("px"
                                                          "sup_norm[T](p!1)"
                                                          "py" "epsilon!1"))
                                                        (("1" (PROPAX) NIL NIL)
                                                         ("2" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("3" (HIDE-ALL-BUT 1)
                                              (("3" (SKOSIMP)
                                                (("3"
                                                  (REWRITE "real_expt_int_rew")
                                                  (("3"
                                                    (LEMMA "expt_pos"
                                                     ("px" "2" "i" "1+n!1"))
                                                    (("3" (ASSERT) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (SPLIT 1)
                                      (("1" (SKOLEM + ("n!1"))
                                        (("1" (INST -3 "p!1" "n!1")
                                          (("1" (HIDE-ALL-BUT (-3 1))
                                            (("1" (EXPAND "nn_simple?")
                                              (("1" (FLATTEN)
                                                (("1" (ASSERT)
                                                  (("1"
                                                    (LEMMA
                                                     "simple_is_measurable"
                                                     ("x" "FF(p!1)(n!1)"))
                                                    (("1" (PROPAX) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (EXPAND "increasing_nn_simple?")
                                        (("2" (SPLIT)
                                          (("1" (SKOSIMP)
                                            (("1" (INST -3 "p!1" "n!1") NIL
                                              NIL))
                                            NIL)
                                           ("2" (INST -4 "p!1") NIL NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (HIDE 2)
                                  (("2" (INDUCT "n")
                                    (("1" (SKOSIMP)
                                      (("1" (INST -7 "p!1")
                                        (("1" (REPLACE -7)
                                          (("1" (INST -12 "p!1")
                                            (("1" (FLATTEN)
                                              (("1" (REWRITE "real_expt_x1")
                                                NIL NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (SKOSIMP*)
                                      (("2" (INST -6 "p!1" "j!1")
                                        (("2" (REPLACE -6)
                                          (("2" (INST - "p!1-HH(p!1)")
                                            (("2" (INST -13 "p!1")
                                              (("2" (FLATTEN)
                                                (("2"
                                                  (LEMMA "expt_plus"
                                                   ("n0x" "2" "i" "1" "j"
                                                    "j!1+1"))
                                                  (("2" (REWRITE "expt_x1")
                                                    (("2" (HIDE -1)
                                                      (("2"
                                                        (CASE-REPLACE
                                                         "p!1 - HH(p!1) - FF(p!1 - HH(p!1))(j!1)=p!1 - (HH(p!1) + FF(p!1 - HH(p!1))(j!1))")
                                                        (("1" (HIDE -1)
                                                          (("1"
                                                            (LEMMA
                                                             "both_sides_div_pos_le1"
                                                             ("pz"
                                                              "2 ^ (j!1 + 1)"
                                                              "x"
                                                              "sup_norm(p!1 - HH(p!1))"
                                                              "y"
                                                              "sup_norm(p!1) / 2"))
                                                            (("1"
                                                              (REWRITE
                                                               "div_div2")
                                                              (("1" (ASSERT)
                                                                (("1"
                                                                  (HIDE-ALL-BUT
                                                                   (-1 -2 1))
                                                                  (("1"
                                                                    (REWRITE
                                                                     "real_expt_int_rew")
                                                                    (("1"
                                                                      (REWRITE
                                                                       "real_expt_int_rew")
                                                                      (("1"
                                                                        (EXPAND
                                                                         "^")
                                                                        (("1"
                                                                          (EXPAND
                                                                           "expt"
                                                                           1)
                                                                          (("1"
                                                                            (ASSERT)
                                                                            NIL
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL)
                                                             ("2"
                                                              (REWRITE
                                                               "real_expt_int_rew")
                                                              (("2"
                                                                (REWRITE
                                                                 "expt_pos")
                                                                NIL NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL)
                                                         ("2" (HIDE-ALL-BUT 1)
                                                          (("2"
                                                            (APPLY-EXTENSIONALITY
                                                             :HIDE? T)
                                                            (("2" (EXPAND "-")
                                                              (("2"
                                                                (EXPAND "+")
                                                                (("2" (PROPAX)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("3" (SKOSIMP)
                                      (("3" (EXPAND "nn_bounded_measurable?")
                                        (("3" (EXPAND "bounded_measurable?")
                                          (("3" (REWRITE "real_expt_int_rew")
                                            (("3"
                                              (LEMMA "expt_pos"
                                               ("px" "2" "i" "1+n!2"))
                                              (("3" (ASSERT) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("4" (HIDE-ALL-BUT (-1 1))
                                      (("4" (SKOSIMP)
                                        (("4" (INST - "p!1" "n!2")
                                          (("4"
                                            (EXPAND "nn_bounded_measurable?")
                                            (("4"
                                              (EXPAND "bounded_measurable?")
                                              (("4" (FLATTEN) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("3" (SKOSIMP)
                                  (("3" (EXPAND "nn_bounded_measurable?")
                                    (("3" (EXPAND "bounded_measurable?")
                                      (("3" (REWRITE "real_expt_int_rew")
                                        (("3"
                                          (LEMMA "expt_pos"
                                           ("px" "2" "i" "1+n!1"))
                                          (("3" (ASSERT) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("4" (HIDE-ALL-BUT (-1 1))
                                  (("4" (SKOSIMP)
                                    (("4" (INST - "p!1" "n!1")
                                      (("4" (EXPAND "nn_bounded_measurable?")
                                        (("4" (EXPAND "bounded_measurable?")
                                          (("4" (FLATTEN) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (HIDE-ALL-BUT (-1 -3 1))
                                (("2" (SKOSIMP)
                                  (("2" (TYPEPRED "p!1")
                                    (("2" (EXPAND "nn_bounded_measurable?")
                                      (("2" (FLATTEN)
                                        (("2" (SPLIT)
                                          (("1" (INST -3 "p!1" "n!1")
                                            (("1"
                                              (LEMMA
                                               "simple_is_bounded_measurable"
                                               ("x" "FF(p!1)(n!1)"))
                                              (("1"
                                                (EXPAND "bounded_measurable?")
                                                (("1" (FLATTEN)
                                                  (("1" (SPLIT)
                                                    (("1"
                                                      (HIDE-ALL-BUT
                                                       (-3 -5 -7 1))
                                                      (("1" (EXPAND "bounded?")
                                                        (("1" (SKOSIMP)
                                                          (("1" (INST + "c!1")
                                                            (("1" (SKOSIMP)
                                                              (("1"
                                                                (INST - "x!1")
                                                                (("1"
                                                                  (INST -
                                                                   "x!1")
                                                                  (("1"
                                                                    (INST -
                                                                     "p!1"
                                                                     "n!1"
                                                                     "x!1")
                                                                    (("1"
                                                                      (FLATTEN)
                                                                      (("1"
                                                                        (EXPAND
                                                                         "abs")
                                                                        (("1"
                                                                          (ASSERT)
                                                                          (("1"
                                                                            (EXPAND
                                                                             "-")
                                                                            (("1"
                                                                              (ASSERT)
                                                                              NIL
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL)
                                                     ("2"
                                                      (REWRITE
                                                       "diff_measurable")
                                                      NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (ASSERT)
                                                (("2" (EXPAND "nn_simple?")
                                                  (("2" (PROPAX) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("2" (SKOSIMP)
                                            (("2" (EXPAND "-")
                                              (("2" (INST -4 "p!1" "n!1" "x!1")
                                                (("2" (FLATTEN)
                                                  (("2" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (HIDE 2)
                              (("2" (INDUCT "n")
                                (("1" (SKOSIMP)
                                  (("1" (INST -5 "p!1")
                                    (("1" (REPLACE -5)
                                      (("1" (REPLACE -12 1 RL)
                                        (("1" (ASSERT) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (SKOSIMP*)
                                  (("2" (INST -5 "p!1" "j!1")
                                    (("2" (REPLACE -5)
                                      (("2" (INST - "p!1")
                                        (("2" (TYPEPRED "GG(p!1)(j!1 + 1)")
                                          (("2" (HIDE-ALL-BUT (-1 -2 -3 1))
                                            (("2" (EXPAND "nn_simple?")
                                              (("2" (FLATTEN)
                                                (("2" (SPLIT)
                                                  (("1" (SKOSIMP)
                                                    (("1" (EXPAND "+")
                                                      (("1" (INST - "x!1")
                                                        (("1" (INST - "x!1")
                                                          (("1" (FLATTEN)
                                                            (("1" (ASSERT) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (REWRITE "simple_add")
                                                    NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (HIDE 2)
                            (("2" (SKOSIMP)
                              (("2" (EXPAND "pointwise_increasing?")
                                (("2" (SKOSIMP)
                                  (("2" (EXPAND "increasing?")
                                    (("2" (SKOSIMP)
                                      (("2"
                                        (CASE
                                            "forall n,m: FF(p!1)(m)(x!1) <= FF(p!1)(m+n)(x!1)")
                                        (("1" (INST - "y!1-x!2" "x!2")
                                          (("1" (ASSERT) NIL NIL)
                                           ("2" (ASSERT) NIL NIL))
                                          NIL)
                                         ("2" (HIDE -1 2)
                                          (("2" (INDUCT "n")
                                            (("1" (SKOSIMP)
                                              (("1" (ASSERT) NIL NIL)) NIL)
                                             ("2" (SKOSIMP*)
                                              (("2" (INST - "m!1+1")
                                                (("2"
                                                  (CASE
                                                      "FF(p!1)(m!1)(x!1) <= FF(p!1)(m!1 + 1)(x!1)")
                                                  (("1" (ASSERT) NIL NIL)
                                                   ("2" (HIDE -1 2)
                                                    (("2" (INST -3 "p!1" "m!1")
                                                      (("2" (REPLACE -3 1)
                                                        (("2" (EXPAND "+" 1)
                                                          (("2" (ASSERT)
                                                            (("2"
                                                              (EXPAND "GG" 1)
                                                              (("2"
                                                                (TYPEPRED
                                                                 "nn_simple_sequence(p!1)(1 + m!1)")
                                                                (("2"
                                                                  (INST -
                                                                   "x!1")
                                                                  (("2"
                                                                    (FLATTEN)
                                                                    (("2"
                                                                      (ASSERT)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (HIDE 2)
                          (("2" (INDUCT "n")
                            (("1" (SKOSIMP)
                              (("1" (INST - "p!1")
                                (("1" (REPLACE -3)
                                  (("1" (INST -8 "p!1")
                                    (("1" (FLATTEN)
                                      (("1" (INST -8 "x!1") NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (SKOSIMP*)
                              (("2" (INST - "p!1-HH(p!1)" "x!1")
                                (("1" (FLATTEN)
                                  (("1" (INST -3 "p!1" "j!1")
                                    (("1" (REPLACE -3)
                                      (("1" (HIDE -3)
                                        (("1" (EXPAND "+" 1)
                                          (("1"
                                            (NAME-REPLACE "F"
                                             "FF(p!1 - HH(p!1))(j!1)(x!1)")
                                            (("1" (EXPAND "-" -2)
                                              (("1" (ASSERT)
                                                (("1" (INST -9 "p!1")
                                                  (("1" (FLATTEN)
                                                    (("1" (INST -9 "x!1")
                                                      (("1" (FLATTEN)
                                                        (("1" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (INST -7 "p!1") NIL NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (HIDE 2)
                        (("2" (INDUCT "n")
                          (("1" (SKOSIMP)
                            (("1" (INST - "p!1" "0")
                              (("1" (REPLACE -1)
                                (("1" (INST -4 "p!1" "0")
                                  (("1" (REPLACE -4)
                                    (("1" (INST-CP - "p!1-HH(p!1)")
                                      (("1" (REPLACE -3)
                                        (("1" (INST -6 "p!1-HH(p!1)")
                                          (("1" (REPLACE -6)
                                            (("1" (INST -2 "p!1")
                                              (("1" (REPLACE -2)
                                                (("1"
                                                  (APPLY-EXTENSIONALITY 1
                                                   :HIDE? T)
                                                  (("1" (EXPAND "+")
                                                    (("1" (PROPAX) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (SKOSIMP*)
                            (("2" (INST-CP -2 "p!1" "j!1+1")
                              (("2" (REPLACE -3)
                                (("2" (HIDE -3)
                                  (("2" (INST -2 "p!1-HH(p!1)" "j!1")
                                    (("2" (REPLACE -2)
                                      (("2" (HIDE -2)
                                        (("2" (INST - "p!1")
                                          (("2" (REPLACE -1)
                                            (("2" (HIDE -1)
                                              (("2" (INST -3 "p!1" "j!1+1")
                                                (("2" (REPLACE -3)
                                                  (("2" (HIDE -3)
                                                    (("2"
                                                      (APPLY-EXTENSIONALITY 1
                                                       :HIDE? T)
                                                      (("2" (EXPAND "+" 1)
                                                        (("2" (PROPAX) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (SKOSIMP)
                      (("2" (HIDE-ALL-BUT 1)
                        (("2" (EXPAND "FF")
                          (("2" (APPLY-EXTENSIONALITY :HIDE? T)
                            (("2" (EXPAND "+")
                              (("2" (EXPAND "sigma" 1 1)
                                (("2" (PROPAX) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (HIDE-ALL-BUT 1)
                    (("2" (SKOSIMP)
                      (("2" (EXPAND "FF")
                        (("2" (APPLY-EXTENSIONALITY :HIDE? T)
                          (("2" (EXPAND "sigma")
                            (("2" (EXPAND "GG")
                              (("2" (EXPAND "nn_simple_sequence")
                                (("2" (EXPAND "HH")
                                  (("2" (EXPAND "sigma")
                                    (("2" (PROPAX) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (HIDE-ALL-BUT 1)
                (("2" (SKOSIMP)
                  (("2" (EXPAND "GG")
                    (("2" (EXPAND "nn_simple_sequence" 1 1)
                      (("2" (EXPAND "HH") (("2" (PROPAX) NIL NIL)) NIL)) NIL))
                    NIL))
                  NIL))
                NIL)
               ("3" (PROPAX) NIL NIL))
              NIL)
             ("2" (HIDE-ALL-BUT 1)
              (("2" (SKOSIMP)
                (("2" (EXPAND "GG")
                  (("2" (EXPAND "nn_simple_sequence")
                    (("2" (EXPAND "HH") (("2" (PROPAX) NIL NIL)) NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (HIDE 2)
            (("2" (SKOSIMP)
              (("2" (TYPEPRED "nn_simple_approx(p!1)")
                (("2" (REPLACE -4)
                  (("2" (LEMMA "simple_is_bounded_measurable" ("x" "HH(p!1)"))
                    (("2" (TYPEPRED "p!1")
                      (("2" (EXPAND "nn_bounded_measurable?")
                        (("2" (EXPAND "bounded_measurable?")
                          (("2" (FLATTEN)
                            (("2" (SKOSIMP)
                              (("2" (EXPAND "-")
                                (("2" (INST -7 "p!1")
                                  (("2" (FLATTEN)
                                    (("2" (INST -7 "x!1")
                                      (("2" (ASSERT) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (HIDE-ALL-BUT (-2 1))
          (("2" (SKOSIMP)
            (("2"
              (CASE "nonempty?({h | (forall x: 0 <= h(x) & h(x) <= p!1(x)) AND
                               sup_norm(p!1-h) <= sup_norm(p!1)/2})")
              (("1"
                (LEMMA "choose_member"
                 ("a" "({h |
                   (FORALL x: 0 <= h(x) & h(x) <= p!1(x)) AND
                    sup_norm(p!1 - h) <= sup_norm(p!1) / 2})"))
                (("1" (SPLIT -1)
                  (("1" (EXPAND "HH")
                    (("1" (EXPAND "nn_simple_approx")
                      (("1"
                        (NAME-REPLACE "H" "choose({h |
                    (FORALL x: 0 <= h(x) & h(x) <= p!1(x)) AND
                     sup_norm(p!1 - h) <= sup_norm(p!1) / 2})")
                        (("1" (EXPAND "member") (("1" (PROPAX) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (EXPAND "nonempty?") (("2" (PROPAX) NIL NIL)) NIL))
                  NIL))
                NIL)
               ("2" (HIDE -1 2)
                (("2" (EXPAND "nonempty?")
                  (("2" (EXPAND "empty?")
                    (("2" (EXPAND "member")
                      (("2" (LEMMA "sup_norm_simple" ("p" "p!1"))
                        (("2" (SKOLEM!) (("2" (INST -2 "h!1") NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|choose| CONST-DECL "(p)" |sets| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (|pointwise_increasing?| CONST-DECL "bool" |pointwise_convergence| NIL)
    (|real_expt_x1| FORMULA-DECL NIL |real_expt| |power|)
    (|sup_norm_converges_to?| CONST-DECL "bool" |sup_norm| NIL)
    (|real_expt_int_rew| FORMULA-DECL NIL |real_expt| |power|)
    (|sup_norm_neg| FORMULA-DECL NIL |sup_norm| NIL)
    (|measurable_function| NONEMPTY-TYPE-EQ-DECL NIL |measure_space_def| NIL)
    (|measurable_function?| CONST-DECL "bool" |measure_space_def| NIL)
    (|sigma_algebra| NONEMPTY-TYPE-EQ-DECL NIL |subset_algebra_def| NIL)
    (|sigma_algebra?| CONST-DECL "bool" |subset_algebra_def| NIL)
    (|setofsets| TYPE-EQ-DECL NIL |sets| NIL)
    (^ CONST-DECL "nnreal" |real_expt| |power|)
    (|diff_measurable| JUDGEMENT-TCC NIL |measure_space_def| NIL)
    (|increasing?| CONST-DECL "bool" |real_fun_preds| |reals|)
    (|sigma| DEF-DECL "real" |sigma| |reals|)
    (|T_high| TYPE-EQ-DECL NIL |sigma| |reals|)
    (|T_low| TYPE-EQ-DECL NIL |sigma| |reals|)
    (|sup_norm| CONST-DECL "nnreal" |sup_norm| NIL)
    (|bounded| NONEMPTY-TYPE-EQ-DECL NIL |sup_norm| NIL)
    (|bounded?| CONST-DECL "bool" |sup_norm| NIL))
   SHOSTAK))
 (|nn_bounded_measurable_as_sequence_prop| 0
  (|nn_bounded_measurable_as_sequence_prop-1| |nil| 3394938232
   ("" (SKOSIMP)
    (("" (SKOSIMP)
      (("" (TYPEPRED "w!1")
        (("" (EXPAND "increasing_nn_simple?")
          (("" (FLATTEN)
            (("" (EXPAND "sup_norm_converges_to?")
              (("" (HIDE -1)
                (("" (INST - "w!1(n!1)(x!1)-p!1(x!1)")
                  (("1" (SKOSIMP)
                    (("1" (INST - "max(n!1,n!2)")
                      (("1" (CASE "max(n!1, n!2) >= n!1&max(n!1, n!2) >= n!2")
                        (("1" (FLATTEN)
                          (("1" (ASSERT)
                            (("1"
                              (LEMMA "sup_norm_prop"
                               ("f" "w!1(max(n!1, n!2)) - p!1"))
                              (("1" (FLATTEN)
                                (("1" (CASE "w!1(n!1)(x!1) > p!1(x!1)")
                                  (("1" (INST - "x!1")
                                    (("1" (EXPAND "pointwise_increasing?")
                                      (("1" (INST -6 "x!1")
                                        (("1" (EXPAND "increasing?")
                                          (("1" (INST - "n!1" "max(n!1, n!2)")
                                            (("1" (ASSERT)
                                              (("1" (EXPAND "abs" -2)
                                                (("1" (ASSERT)
                                                  (("1" (TYPEPRED "p!1")
                                                    (("1"
                                                      (EXPAND
                                                       "nn_bounded_measurable?")
                                                      (("1" (FLATTEN)
                                                        (("1" (INST - "x!1")
                                                          (("1" (ASSERT)
                                                            (("1"
                                                              (EXPAND "-" -4 1)
                                                              (("1"
                                                                (NAME-REPLACE
                                                                 "SUP"
                                                                 "sup_norm(w!1(max(n!1, n!2)) - p!1)")
                                                                (("1"
                                                                  (EXPAND "-"
                                                                          -4)
                                                                  (("1"
                                                                    (ASSERT)
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (ASSERT) NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (ASSERT) NIL NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|sup_norm_converges_to?| CONST-DECL "bool" |sup_norm| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (> CONST-DECL "bool" |reals| NIL) NIL
    (|nn_bounded_measurable| NONEMPTY-TYPE-EQ-DECL NIL |measure_space| NIL)
    (|nn_bounded_measurable?| CONST-DECL "bool" |measure_space| NIL) NIL NIL
    NIL (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL) NIL
    (|sup_norm_prop| FORMULA-DECL NIL |sup_norm| NIL)
    (|bounded?| CONST-DECL "bool" |sup_norm| NIL)
    (|bounded| NONEMPTY-TYPE-EQ-DECL NIL |sup_norm| NIL) NIL
    (|pointwise_increasing?| CONST-DECL "bool" |pointwise_convergence| NIL)
    (|increasing?| CONST-DECL "bool" |real_fun_preds| |reals|)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL)
    (|sup_norm| CONST-DECL "nnreal" |sup_norm| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (T FORMAL-TYPE-DECL NIL |measure_space| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|setofsets| TYPE-EQ-DECL NIL |sets| NIL)
    (|sigma_algebra?| CONST-DECL "bool" |subset_algebra_def| NIL)
    (|sigma_algebra| NONEMPTY-TYPE-EQ-DECL NIL |subset_algebra_def| NIL)
    (S FORMAL-CONST-DECL "sigma_algebra" |measure_space| NIL)
    (|measurable_function?| CONST-DECL "bool" |measure_space_def| NIL)
    (|measurable_function| NONEMPTY-TYPE-EQ-DECL NIL |measure_space_def| NIL)
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (|increasing_nn_simple?| CONST-DECL "bool" |measure_space| NIL)
    (|increasing_nn_simple| NONEMPTY-TYPE-EQ-DECL NIL |measure_space| NIL))
   SHOSTAK))
 (|bounded_measurable_as_increasing_sequence_TCC1| 0
  (|bounded_measurable_as_increasing_sequence_TCC1-1| |nil| 3392524429
   ("" (SKOSIMP)
    (("" (EXPAND "bounded_measurable?") (("" (FLATTEN) NIL NIL)) NIL)) NIL)
   ((|bounded_measurable?| CONST-DECL "bool" |measure_space| NIL)) NIL
   (|bounded_measurable_as_increasing_sequence| SUBTYPE "measure_space.f"
    "bounded[T]")))
 (|bounded_measurable_as_increasing_sequence| 0
  (|bounded_measurable_as_increasing_sequence-1| |nil| 3394512523
   (""
    (CASE
        "forall w,p: sup_norm_converges_to?(w,p) => forall n,x: w(n)(x)<=p(x)")
    (("1" (SKOSIMP)
      (("1" (LEMMA "plus_minus_def" ("f" "f!1"))
        (("1" (REPLACE -1 1)
          (("1" (CASE "bounded_measurable?(minus(f!1))")
            (("1" (CASE "bounded_measurable?(plus(f!1))")
              (("1"
                (LEMMA "nn_bounded_measurable_as_increasing_simple_sequence"
                 ("p" "minus(f!1)"))
                (("1"
                  (LEMMA "nn_bounded_measurable_as_increasing_simple_sequence"
                   ("p" "plus(f!1)"))
                  (("1" (SKOSIMP*)
                    (("1" (INST + "w!1-w!2")
                      (("1" (EXPAND "sup_norm_converges_to?")
                        (("1" (SKOSIMP)
                          (("1" (INST - "epsilon!1/2")
                            (("1" (INST - "epsilon!1/2")
                              (("1" (SKOSIMP*)
                                (("1" (INST + "max(n!1,n!2)")
                                  (("1" (SKOSIMP)
                                    (("1" (INST - "i!1")
                                      (("1" (INST - "i!1")
                                        (("1" (ASSERT)
                                          (("1"
                                            (LEMMA "sup_norm_neg"
                                             ("f" "w!2(i!1) - minus(f!1)"))
                                            (("1"
                                              (LEMMA "sup_norm_sum"
                                               ("f1" "w!1(i!1) - plus(f!1)"
                                                "f2"
                                                "-(w!2(i!1) - minus(f!1))"))
                                              (("1" (REPLACE -2 -1)
                                                (("1" (EXPAND "+" -1 1)
                                                  (("1"
                                                    (NAME-REPLACE "SUP_1"
                                                     "sup_norm(w!1(i!1) - plus(f!1))")
                                                    (("1"
                                                      (NAME-REPLACE "SUP_2"
                                                       "sup_norm(w!2(i!1) - minus(f!1))")
                                                      (("1"
                                                        (HIDE-ALL-BUT
                                                         (-1 -3 -4 1))
                                                        (("1" (EXPAND "-")
                                                          (("1" (EXPAND "-")
                                                            (("1" (ASSERT) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (TYPEPRED "w!1")
                        (("2" (TYPEPRED "w!2")
                          (("2" (EXPAND "increasing_nn_simple?")
                            (("2" (FLATTEN)
                              (("2" (SKOSIMP)
                                (("2" (EXPAND "-" 1)
                                  (("2" (INST - "x1!1")
                                    (("2" (INST - "x1!1")
                                      (("2" (EXPAND "nn_simple?")
                                        (("2" (FLATTEN)
                                          (("2" (REWRITE "simple_diff") NIL
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (EXPAND "nn_bounded_measurable?")
                    (("2" (SPLIT 1)
                      (("1" (PROPAX) NIL NIL)
                       ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (EXPAND "nn_bounded_measurable?")
                  (("2" (SPLIT 1)
                    (("1" (PROPAX) NIL NIL)
                     ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (HIDE-ALL-BUT (-4 1))
                (("2" (EXPAND "bounded_measurable?")
                  (("2" (FLATTEN)
                    (("2" (SPLIT)
                      (("1" (EXPAND "bounded?")
                        (("1" (SKOSIMP)
                          (("1" (INST + "c!1")
                            (("1" (SKOSIMP)
                              (("1" (INST - "x!1")
                                (("1" (HIDE -2) (("1" (GRIND) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (LEMMA "plus_measurable" ("g" "f!1"))
                        (("1" (PROPAX) NIL NIL) ("2" (PROPAX) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (HIDE-ALL-BUT (-3 1))
              (("2" (EXPAND "bounded_measurable?")
                (("2" (FLATTEN)
                  (("2" (SPLIT)
                    (("1" (EXPAND "bounded?")
                      (("1" (HIDE -2)
                        (("1" (SKOSIMP)
                          (("1" (INST + "c!1")
                            (("1" (SKOSIMP)
                              (("1" (INST - "x!1") (("1" (GRIND) NIL NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (LEMMA "minus_measurable" ("g" "f!1"))
                      (("1" (PROPAX) NIL NIL) ("2" (PROPAX) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("2" (HIDE 2)
      (("2" (SKOSIMP*)
        (("2" (TYPEPRED "w!1")
          (("2" (EXPAND "increasing_nn_simple?")
            (("2" (FLATTEN)
              (("2" (EXPAND "sup_norm_converges_to?")
                (("2" (INST -3 "w!1(n!1)(x!1) - p!1(x!1)")
                  (("1" (SKOSIMP)
                    (("1" (INST -3 "max(n!1,n!2)")
                      (("1" (ASSERT)
                        (("1" (SPLIT -3)
                          (("1"
                            (LEMMA "sup_norm_prop"
                             ("f" "w!1(max(n!1,n!2)) - p!1"))
                            (("1" (FLATTEN)
                              (("1"
                                (NAME-REPLACE "SUP"
                                 "sup_norm(w!1(max(n!1, n!2)) - p!1)")
                                (("1" (INST - "x!1")
                                  (("1" (EXPAND "pointwise_increasing?")
                                    (("1" (INST -5 "x!1")
                                      (("1" (EXPAND "increasing?")
                                        (("1" (INST -5 "n!1" "max(n!1,n!2)")
                                          (("1" (ASSERT)
                                            (("1" (EXPAND "abs" -1)
                                              (("1" (ASSERT)
                                                (("1" (HIDE -4)
                                                  (("1" (GRIND) NIL NIL)) NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (ASSERT) NIL NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("3" (HIDE 2)
      (("3" (SKOSIMP)
        (("3" (SKOSIMP)
          (("3" (TYPEPRED "w!1")
            (("3" (EXPAND "increasing_nn_simple?")
              (("3" (FLATTEN)
                (("3" (INST - "x1!1")
                  (("3" (EXPAND "nn_simple?")
                    (("3" (FLATTEN)
                      (("3"
                        (LEMMA "simple_is_bounded_measurable"
                         ("x" "w!1(x1!1)"))
                        (("1" (EXPAND "bounded_measurable?")
                          (("1" (PROPAX) NIL NIL)) NIL)
                         ("2" (PROPAX) NIL NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|simple_is_bounded_measurable| JUDGEMENT-TCC NIL |measure_space| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) NIL
    NIL NIL NIL (|increasing?| CONST-DECL "bool" |real_fun_preds| |reals|)
    (|pointwise_increasing?| CONST-DECL "bool" |pointwise_convergence| NIL)
    (|sup_norm_prop| FORMULA-DECL NIL |sup_norm| NIL)
    (|minus_measurable| JUDGEMENT-TCC NIL |measure_space| NIL)
    (|plus| CONST-DECL "[T -> nnreal]" |real_fun_ops_aux| |reals|)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL)
    (|simple?| CONST-DECL "bool" |measure_space| NIL) NIL NIL NIL
    (|simple| NONEMPTY-TYPE-EQ-DECL NIL |measure_space| NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|sup_norm_sum| FORMULA-DECL NIL |sup_norm| NIL) NIL NIL
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types|
     NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|sup_norm| CONST-DECL "nnreal" |sup_norm| NIL) NIL
    (|sup_norm_neg| FORMULA-DECL NIL |sup_norm| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    NIL (|simple_diff| JUDGEMENT-TCC NIL |measure_space| NIL)
    (|nn_simple?| CONST-DECL "bool" |measure_space| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|nn_bounded_measurable_as_increasing_simple_sequence| FORMULA-DECL NIL
     |measure_space| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (|plus_measurable| JUDGEMENT-TCC NIL |measure_space| NIL)
    (|minus| CONST-DECL "[T -> nnreal]" |real_fun_ops_aux| |reals|)
    (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL)
    (|bounded_measurable?| CONST-DECL "bool" |measure_space| NIL)
    (|plus_minus_def| FORMULA-DECL NIL |real_fun_ops_aux| |reals|)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (T FORMAL-TYPE-DECL NIL |measure_space| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|setofsets| TYPE-EQ-DECL NIL |sets| NIL)
    (|sigma_algebra?| CONST-DECL "bool" |subset_algebra_def| NIL)
    (|sigma_algebra| NONEMPTY-TYPE-EQ-DECL NIL |subset_algebra_def| NIL)
    (S FORMAL-CONST-DECL "sigma_algebra" |measure_space| NIL)
    (|measurable_function?| CONST-DECL "bool" |measure_space_def| NIL)
    (|measurable_function| NONEMPTY-TYPE-EQ-DECL NIL |measure_space_def| NIL)
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (|increasing_nn_simple?| CONST-DECL "bool" |measure_space| NIL)
    (|increasing_nn_simple| NONEMPTY-TYPE-EQ-DECL NIL |measure_space| NIL)
    (|nn_bounded_measurable?| CONST-DECL "bool" |measure_space| NIL)
    (|nn_bounded_measurable| NONEMPTY-TYPE-EQ-DECL NIL |measure_space| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|bounded?| CONST-DECL "bool" |sup_norm| NIL)
    (|bounded| NONEMPTY-TYPE-EQ-DECL NIL |sup_norm| NIL)
    (|sup_norm_converges_to?| CONST-DECL "bool" |sup_norm| NIL)
    (<= CONST-DECL "bool" |reals| NIL))
   SHOSTAK))
 (|nn_measurable_def| 0
  (|nn_measurable_def-3| "" 3789903693
   ("" (SKOSIMP*)
    (("" (SPLIT)
      (("1" (FLATTEN)
        (("1" (NAME "G" "lambda n: min(f!1,const_fun[T,real](n+1))")
          (("1" (CASE "forall n: bounded_measurable?(G(n))")
            (("1"
              (CASE
                  "forall n: EXISTS h: (forall x: 0 <= h(x)&h(x)<=G(n)(x)) & sup_norm(G(n)-h) <= 1/(n+1)")
              (("1"
                (NAME "H"
                      "lambda n: choose[simple]({h | (FORALL x: 0 <= h(x) & h(x) <= G(n)(x)) & sup_norm(G(n) - h) <= 1 / (n + 1)})")
                (("1" (CASE "pointwise_increasing?(G)")
                  (("1"
                    (CASE
                        "forall n: (FORALL x: 0 <= H(n)(x) & H(n)(x) <= G(n)(x)) &
                  sup_norm(G(n) - H(n)) <= 1 / (n + 1)")
                    (("1" (CASE "pointwise_convergence?(H, f!1)")
                      (("1" (EXPAND "pointwise_converges_upto?")
                        (("1"
                          (CASE
                              "exists v: v(0)=H(0)&(forall (n:nat): v(n+1) = max(H(n+1),v(n)))")
                          (("1" (SKOSIMP)
                            (("1" (NAME-REPLACE "F" "v!1")
                              (("1" (CASE "pointwise_increasing?(F)")
                                (("1" (CASE "FORALL n: nn_simple?(F(n))")
                                  (("1" (CASE "increasing_nn_simple?(F)")
                                    (("1"
                                      (CASE "pointwise_convergence?(F, f!1)")
                                      (("1" (INST + "F")
                                        (("1" (ASSERT) NIL NIL)) NIL)
                                       ("2" (HIDE 2)
                                        (("2" (EXPAND "pointwise_convergence?")
                                          (("2" (SKOSIMP)
                                            (("2" (INST -6 "x!1")
                                              (("2"
                                                (REWRITE
                                                 "metric_convergence_def" *)
                                                (("2"
                                                  (REWRITE
                                                   "metric_convergence_def" *)
                                                  (("2" (HIDE -9 -10 -11 -12)
                                                    (("2"
                                                      (EXPAND
                                                       "metric_converges_to")
                                                      (("2" (SKOSIMP)
                                                        (("2" (EXPAND "ball")
                                                          (("2"
                                                            (EXPAND "member")
                                                            (("2"
                                                              (INST -6 "r!1/2")
                                                              (("2" (SKOSIMP)
                                                                (("2"
                                                                  (CASE
                                                                      "exists n: 1/(n+1) < r!1/2")
                                                                  (("1"
                                                                    (SKOSIMP)
                                                                    (("1"
                                                                      (CASE
                                                                          "max(n!1,n!2)>=n!1&max(n!1,n!2)>=n!2")
                                                                      (("1"
                                                                        (FLATTEN)
                                                                        (("1"
                                                                          (INST
                                                                           +
                                                                           "max(n!1, n!2)")
                                                                          (("1"
                                                                            (SKOSIMP)
                                                                            (("1"
                                                                              (INST
                                                                               -10
                                                                               "i!1")
                                                                              (("1"
                                                                                (ASSERT)
                                                                                (("1"
                                                                                  (CASE
                                                                                      "abs(H(i!1)(x!1)- F(i!1)(x!1)) < r!1/2")
                                                                                  (("1"
                                                                                    (HIDE-ALL-BUT
                                                                                     (-1
                                                                                      -11
                                                                                      1))
                                                                                    (("1"
                                                                                      (GRIND)
                                                                                      NIL
                                                                                      NIL))
                                                                                    NIL)
                                                                                   ("2"
                                                                                    (HIDE
                                                                                     2)
                                                                                    (("2"
                                                                                      (CASE
                                                                                          "forall n: F(n)(x!1)>=H(n)(x!1)")
                                                                                      (("1"
                                                                                        (CASE
                                                                                            "F(i!1)(x!1)-H(i!1)(x!1)< r!1 / 2")
                                                                                        (("1"
                                                                                          (INST
                                                                                           -
                                                                                           "i!1")
                                                                                          (("1"
                                                                                            (EXPAND
                                                                                             "abs")
                                                                                            (("1"
                                                                                              (ASSERT)
                                                                                              NIL
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL)
                                                                                         ("2"
                                                                                          (HIDE
                                                                                           2)
                                                                                          (("2"
                                                                                            (CASE
                                                                                                "forall n: G(n)(x!1)>=F(n)(x!1)")
                                                                                            (("1"
                                                                                              (INST
                                                                                               -
                                                                                               "i!1")
                                                                                              (("1"
                                                                                                (INST
                                                                                                 -
                                                                                                 "i!1")
                                                                                                (("1"
                                                                                                  (INST
                                                                                                   -13
                                                                                                   "i!1")
                                                                                                  (("1"
                                                                                                    (FLATTEN)
                                                                                                    (("1"
                                                                                                      (LEMMA
                                                                                                       "sup_norm_prop"
                                                                                                       ("f"
                                                                                                        "G(i!1) - H(i!1)"))
                                                                                                      (("1"
                                                                                                        (FLATTEN)
                                                                                                        (("1"
                                                                                                          (NAME-REPLACE
                                                                                                           "SUP"
                                                                                                           "sup_norm(G(i!1) - H(i!1))")
                                                                                                          (("1"
                                                                                                            (HIDE
                                                                                                             -2)
                                                                                                            (("1"
                                                                                                              (INST
                                                                                                               -
                                                                                                               "x!1")
                                                                                                              (("1"
                                                                                                                (EXPAND
                                                                                                                 "-"
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (EXPAND
                                                                                                                   "abs"
                                                                                                                   -1)
                                                                                                                  (("1"
                                                                                                                    (ASSERT)
                                                                                                                    (("1"
                                                                                                                      (LEMMA
                                                                                                                       "both_sides_div_pos_le2"
                                                                                                                       ("pz"
                                                                                                                        "1"
                                                                                                                        "py"
                                                                                                                        "1+n!2"
                                                                                                                        "px"
                                                                                                                        "1+i!1"))
                                                                                                                      (("1"
                                                                                                                        (ASSERT)
                                                                                                                        NIL
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL)
                                                                                             ("2"
                                                                                              (HIDE
                                                                                               2)
                                                                                              (("2"
                                                                                                (INDUCT
                                                                                                 "n")
                                                                                                (("1"
                                                                                                  (REPLACE
                                                                                                   -9)
                                                                                                  (("1"
                                                                                                    (INST
                                                                                                     -12
                                                                                                     "0")
                                                                                                    (("1"
                                                                                                      (FLATTEN)
                                                                                                      (("1"
                                                                                                        (INST
                                                                                                         -12
                                                                                                         "x!1")
                                                                                                        (("1"
                                                                                                          (FLATTEN)
                                                                                                          (("1"
                                                                                                            (ASSERT)
                                                                                                            NIL
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL)
                                                                                                 ("2"
                                                                                                  (SKOSIMP*)
                                                                                                  (("2"
                                                                                                    (INST
                                                                                                     -11
                                                                                                     "j!1")
                                                                                                    (("2"
                                                                                                      (REPLACE
                                                                                                       -11)
                                                                                                      (("2"
                                                                                                        (EXPAND
                                                                                                         "max"
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (INST
                                                                                                           -13
                                                                                                           "1+j!1")
                                                                                                          (("2"
                                                                                                            (FLATTEN)
                                                                                                            (("2"
                                                                                                              (INST
                                                                                                               -13
                                                                                                               "x!1")
                                                                                                              (("2"
                                                                                                                (HIDE-ALL-BUT
                                                                                                                 (-1
                                                                                                                  -13
                                                                                                                  -15
                                                                                                                  1))
                                                                                                                (("2"
                                                                                                                  (EXPAND
                                                                                                                   "pointwise_increasing?")
                                                                                                                  (("2"
                                                                                                                    (INST
                                                                                                                     -
                                                                                                                     "x!1")
                                                                                                                    (("2"
                                                                                                                      (EXPAND
                                                                                                                       "increasing?")
                                                                                                                      (("2"
                                                                                                                        (INST
                                                                                                                         -
                                                                                                                         "j!1"
                                                                                                                         "j!1+1")
                                                                                                                        (("2"
                                                                                                                          (ASSERT)
                                                                                                                          (("2"
                                                                                                                            (GRIND)
                                                                                                                            NIL
                                                                                                                            NIL))
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL)
                                                                                       ("2"
                                                                                        (HIDE
                                                                                         2)
                                                                                        (("2"
                                                                                          (INDUCT
                                                                                           "n")
                                                                                          (("1"
                                                                                            (REPLACE
                                                                                             -8)
                                                                                            (("1"
                                                                                              (ASSERT)
                                                                                              NIL
                                                                                              NIL))
                                                                                            NIL)
                                                                                           ("2"
                                                                                            (SKOSIMP*)
                                                                                            (("2"
                                                                                              (INST
                                                                                               -10
                                                                                               "j!1")
                                                                                              (("2"
                                                                                                (REPLACE
                                                                                                 -10)
                                                                                                (("2"
                                                                                                  (EXPAND
                                                                                                   "max"
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (EXPAND
                                                                                                     "max"
                                                                                                     1)
                                                                                                    (("2"
                                                                                                      (CASE-REPLACE
                                                                                                       "H(1 + j!1)(x!1) < F(j!1)(x!1)")
                                                                                                      (("1"
                                                                                                        (ASSERT)
                                                                                                        NIL
                                                                                                        NIL)
                                                                                                       ("2"
                                                                                                        (ASSERT)
                                                                                                        NIL
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL)
                                                                       ("2"
                                                                        (HIDE-ALL-BUT
                                                                         1)
                                                                        (("2"
                                                                          (GRIND)
                                                                          NIL
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL)
                                                                   ("2"
                                                                    (HIDE-ALL-BUT
                                                                     1)
                                                                    (("2"
                                                                      (LEMMA
                                                                       "archimedean"
                                                                       ("px"
                                                                        "r!1/2"))
                                                                      (("2"
                                                                        (SKOSIMP)
                                                                        (("2"
                                                                          (INST
                                                                           +
                                                                           "n!2-1")
                                                                          (("2"
                                                                            (ASSERT)
                                                                            NIL
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (EXPAND "increasing_nn_simple?")
                                      (("2" (REPLACE -2)
                                        (("2" (PROPAX) NIL NIL)) NIL))
                                      NIL))
                                    NIL)
                                   ("2" (HIDE-ALL-BUT (-1 -2 -5 1))
                                    (("2" (EXPAND "nn_simple?")
                                      (("2" (SKOSIMP*)
                                        (("2" (INST - "0")
                                          (("2" (FLATTEN)
                                            (("2" (INST - "x!1")
                                              (("2" (FLATTEN)
                                                (("2"
                                                  (EXPAND
                                                   "pointwise_increasing?")
                                                  (("2" (INST - "x!1")
                                                    (("2"
                                                      (EXPAND "increasing?")
                                                      (("2" (INST - "0" "n!1")
                                                        (("2" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (HIDE-ALL-BUT (-1 -2 1))
                                  (("2" (EXPAND "pointwise_increasing?")
                                    (("2" (SKOSIMP)
                                      (("2" (EXPAND "increasing?")
                                        (("2"
                                          (CASE
                                              "forall n,m: F(m)(x!1) <= F(n+m)(x!1)")
                                          (("1" (SKOSIMP)
                                            (("1" (INST - "y!1-x!2" "x!2")
                                              (("1" (ASSERT) NIL NIL)
                                               ("2" (ASSERT) NIL NIL))
                                              NIL))
                                            NIL)
                                           ("2" (HIDE 2 -1)
                                            (("2" (INDUCT "n")
                                              (("1" (SKOSIMP)
                                                (("1" (ASSERT) NIL NIL)) NIL)
                                               ("2" (SKOSIMP*)
                                                (("2" (INST - "m!1")
                                                  (("2" (INST - "j!1+m!1")
                                                    (("2" (REPLACE -2)
                                                      (("2" (HIDE -2)
                                                        (("2" (GRIND) NIL NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (HIDE-ALL-BUT 1)
                            (("2" (INST + "lambda (k:nat): maximum(H,k)")
                              (("2"
                                (CASE "FORALL (n: nat):
          maximum(H,n) = if n=0 then H(0) else max(H(n), maximum(H,n-1)) endif")
                                (("1" (SPLIT)
                                  (("1" (INST - "0") NIL NIL)
                                   ("2" (SKOSIMP)
                                    (("2" (INST - "n!1+1")
                                      (("2" (ASSERT) NIL NIL)) NIL))
                                    NIL))
                                  NIL)
                                 ("2" (HIDE 2)
                                  (("2" (INDUCT "n")
                                    (("1" (EXPAND "maximum")
                                      (("1" (PROPAX) NIL NIL)) NIL)
                                     ("2" (SKOSIMP*)
                                      (("2" (EXPAND "maximum" 1 1)
                                        (("2" (PROPAX) NIL NIL)) NIL))
                                      NIL)
                                     ("3" (SKOSIMP) (("3" (ASSERT) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("3" (SKOSIMP) (("3" (ASSERT) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (HIDE 2)
                        (("2" (EXPAND "pointwise_convergence?")
                          (("2" (SKOSIMP)
                            (("2" (REWRITE "metric_convergence_def" *)
                              (("2" (EXPAND "metric_converges_to")
                                (("2" (SKOSIMP)
                                  (("2" (EXPAND "ball")
                                    (("2" (EXPAND "member")
                                      (("2" (LEMMA "archimedean" ("px" "r!1"))
                                        (("2" (SKOSIMP)
                                          (("2"
                                            (LEMMA "axiom_of_archimedes"
                                             ("x" "f!1(x!1)"))
                                            (("2" (SKOSIMP)
                                              (("2" (INST -10 "x!1")
                                                (("2"
                                                  (NAME "N" "max(n!1+1,i!1)")
                                                  (("2" (INST + "N")
                                                    (("1" (SKOSIMP)
                                                      (("1" (INST -5 "i!2")
                                                        (("1" (FLATTEN)
                                                          (("1"
                                                            (LEMMA
                                                             "sup_norm_prop"
                                                             ("f"
                                                              "G(i!2) - H(i!2)"))
                                                            (("1" (FLATTEN)
                                                              (("1"
                                                                (INST - "x!1")
                                                                (("1"
                                                                  (EXPAND "-"
                                                                          -1 1)
                                                                  (("1"
                                                                    (EXPAND "G"
                                                                            -1
                                                                            1)
                                                                    (("1"
                                                                      (EXPAND
                                                                       "const_fun"
                                                                       -1)
                                                                      (("1"
                                                                        (EXPAND
                                                                         "min"
                                                                         -1)
                                                                        (("1"
                                                                          (EXPAND
                                                                           "min"
                                                                           -1)
                                                                          (("1"
                                                                            (ASSERT)
                                                                            (("1"
                                                                              (CASE
                                                                                  "1 / (1 + i!2)< r!1")
                                                                              (("1"
                                                                                (ASSERT)
                                                                                NIL
                                                                                NIL)
                                                                               ("2"
                                                                                (HIDE-ALL-BUT
                                                                                 (1
                                                                                  -6
                                                                                  -3
                                                                                  -5
                                                                                  -4
                                                                                  -15))
                                                                                (("2"
                                                                                  (REWRITE
                                                                                   "div_mult_pos_lt1"
                                                                                   1)
                                                                                  (("2"
                                                                                    (REWRITE
                                                                                     "div_mult_pos_lt1"
                                                                                     -3)
                                                                                    (("2"
                                                                                      (LEMMA
                                                                                       "both_sides_times_pos_lt1"
                                                                                       ("pz"
                                                                                        "r!1"
                                                                                        "x"
                                                                                        "n!1"
                                                                                        "y"
                                                                                        "i!2+1"))
                                                                                      (("2"
                                                                                        (ASSERT)
                                                                                        NIL
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL)
                                                     ("2" (ASSERT) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (HIDE 2 -2)
                      (("2" (SKOSIMP)
                        (("2" (EXPAND "H")
                          (("2"
                            (LEMMA "choose_member[simple]"
                             ("a" "{h |
                         (FORALL x: 0 <= h(x) & h(x) <= G(n!1)(x)) &
                          sup_norm(G(n!1) - h) <= 1 / (1 + n!1)}"))
                            (("1" (SPLIT -1)
                              (("1" (EXPAND "member") (("1" (PROPAX) NIL NIL))
                                NIL)
                               ("2" (HIDE 1)
                                (("2" (EXPAND "empty?")
                                  (("2" (EXPAND "member")
                                    (("2" (INST -3 "n!1")
                                      (("2" (SKOSIMP)
                                        (("2" (INST - "h!1")
                                          (("2" (REPLACE -3)
                                            (("2" (PROPAX) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (HIDE 2)
                              (("2" (SKOSIMP)
                                (("2" (INST -4 "n!1")
                                  (("2" (EXPAND "bounded_measurable?")
                                    (("2" (FLATTEN)
                                      (("2" (EXPAND "bounded?")
                                        (("2" (SKOSIMP)
                                          (("2" (INST + "c!1")
                                            (("2" (SKOSIMP)
                                              (("2" (INST - "x!1")
                                                (("2" (INST -4 "x!1")
                                                  (("2"
                                                    (HIDE-ALL-BUT (-1 -4 1))
                                                    (("2" (GRIND) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("3" (HIDE 2)
                      (("3" (SKOSIMP)
                        (("3" (HIDE-ALL-BUT (-1 -5 1))
                          (("3" (INST -2 "n!1")
                            (("3" (EXPAND "bounded_measurable?")
                              (("3" (FLATTEN)
                                (("3" (EXPAND "bounded?")
                                  (("3" (SKOSIMP)
                                    (("3" (INST + "c!1")
                                      (("3" (SKOSIMP)
                                        (("3" (INST - "x!1")
                                          (("3" (INST - "x!1")
                                            (("3" (HIDE -3)
                                              (("3" (EXPAND "G")
                                                (("3" (GRIND) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (HIDE-ALL-BUT (-6 1))
                    (("2" (EXPAND "pointwise_increasing?")
                      (("2" (SKOSIMP)
                        (("2" (INST - "x!1")
                          (("2" (EXPAND "G")
                            (("2" (EXPAND "increasing?")
                              (("2" (SKOSIMP*) (("2" (GRIND) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (HIDE 2)
                  (("2" (SKOSIMP)
                    (("2" (INST - "n!1")
                      (("2" (SKOSIMP)
                        (("2" (EXPAND "nonempty?")
                          (("2" (EXPAND "empty?")
                            (("2" (EXPAND "member")
                              (("2" (INST - "h!1")
                                (("2" (REPLACE -1) (("2" (ASSERT) NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (HIDE 2)
                (("2" (SKOSIMP)
                  (("2" (INST - "n!1")
                    (("2"
                      (LEMMA
                       "nn_bounded_measurable_as_increasing_simple_sequence"
                       ("p" "G(n!1)"))
                      (("1" (SKOSIMP)
                        (("1" (TYPEPRED "w!1")
                          (("1"
                            (LEMMA
                             "sup_norm_converges_to_pointwise_convergence"
                             ("u" "w!1" "f" "G(n!1)"))
                            (("1" (ASSERT)
                              (("1" (EXPAND "sup_norm_converges_to?")
                                (("1" (INST - "1/(1+n!1)")
                                  (("1" (SKOSIMP)
                                    (("1" (INST - "n!2")
                                      (("1" (ASSERT)
                                        (("1" (ASSERT)
                                          (("1" (INST + "w!1(n!2)")
                                            (("1" (SPLIT)
                                              (("1" (SKOSIMP)
                                                (("1" (COPY -2)
                                                  (("1"
                                                    (EXPAND
                                                     "increasing_nn_simple?"
                                                     -1)
                                                    (("1" (FLATTEN)
                                                      (("1" (INST - "n!2")
                                                        (("1"
                                                          (EXPAND "nn_simple?")
                                                          (("1" (FLATTEN)
                                                            (("1"
                                                              (INST - "x!1")
                                                              (("1" (ASSERT)
                                                                (("1"
                                                                  (LEMMA
                                                                   "inf_pointwise_convergence_upto"
                                                                   ("p" "w!1"
                                                                    "f"
                                                                    "G(n!1)"))
                                                                  (("1"
                                                                    (ASSERT)
                                                                    (("1"
                                                                      (EXPAND
                                                                       "pointwise_converges_upto?")
                                                                      (("1"
                                                                        (FLATTEN)
                                                                        (("1"
                                                                          (LEMMA
                                                                           "inf_pointwise_le"
                                                                           ("p"
                                                                            "w!1"
                                                                            "f"
                                                                            "G(n!1)"))
                                                                          (("1"
                                                                            (ASSERT)
                                                                            (("1"
                                                                              (INST
                                                                               -
                                                                               "x!1")
                                                                              (("1"
                                                                                (INST
                                                                                 -
                                                                                 "n!2"
                                                                                 "x!1")
                                                                                (("1"
                                                                                  (EXPAND
                                                                                   "inf")
                                                                                  (("1"
                                                                                    (HIDE
                                                                                     -2
                                                                                     -3)
                                                                                    (("1"
                                                                                      (TYPEPRED
                                                                                       "inf(image[nat, real](LAMBDA m: w!1(m)(x!1), {m | m >= n!2}))")
                                                                                      (("1"
                                                                                        (NAME-REPLACE
                                                                                         "INF"
                                                                                         "inf(image[nat, real](LAMBDA m: w!1(m)(x!1), {m | m >= n!2}))")
                                                                                        (("1"
                                                                                          (EXPAND
                                                                                           "image")
                                                                                          (("1"
                                                                                            (EXPAND
                                                                                             "greatest_lower_bound")
                                                                                            (("1"
                                                                                              (FLATTEN)
                                                                                              (("1"
                                                                                                (EXPAND
                                                                                                 "lower_bound")
                                                                                                (("1"
                                                                                                  (INST
                                                                                                   -
                                                                                                   "w!1(n!2)(x!1)")
                                                                                                  (("1"
                                                                                                    (INST
                                                                                                     -
                                                                                                     "w!1(n!2)(x!1)")
                                                                                                    (("1"
                                                                                                      (SPLIT
                                                                                                       -2)
                                                                                                      (("1"
                                                                                                        (ASSERT)
                                                                                                        NIL
                                                                                                        NIL)
                                                                                                       ("2"
                                                                                                        (ASSERT)
                                                                                                        NIL
                                                                                                        NIL)
                                                                                                       ("3"
                                                                                                        (SKOSIMP*)
                                                                                                        (("3"
                                                                                                          (TYPEPRED
                                                                                                           "z!1")
                                                                                                          (("3"
                                                                                                            (SKOSIMP)
                                                                                                            (("3"
                                                                                                              (TYPEPRED
                                                                                                               "x!2")
                                                                                                              (("3"
                                                                                                                (EXPAND
                                                                                                                 "pointwise_increasing?")
                                                                                                                (("3"
                                                                                                                  (INST
                                                                                                                   -
                                                                                                                   "x!1")
                                                                                                                  (("3"
                                                                                                                    (EXPAND
                                                                                                                     "increasing?")
                                                                                                                    (("3"
                                                                                                                      (INST
                                                                                                                       -
                                                                                                                       "n!2"
                                                                                                                       "x!2")
                                                                                                                      (("3"
                                                                                                                        (ASSERT)
                                                                                                                        NIL
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL)
                                                                                                   ("2"
                                                                                                    (INST
                                                                                                     +
                                                                                                     "n!2")
                                                                                                    NIL
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL)
                                                                   ("2"
                                                                    (EXPAND
                                                                     "pointwise_bounded_below?")
                                                                    (("2"
                                                                      (EXPAND
                                                                       "pointwise?")
                                                                      (("2"
                                                                        (SKOSIMP)
                                                                        (("2"
                                                                          (EXPAND
                                                                           "increasing_nn_simple?")
                                                                          (("2"
                                                                            (EXPAND
                                                                             "nn_simple?")
                                                                            (("2"
                                                                              (HIDE-ALL-BUT
                                                                               (-5
                                                                                1))
                                                                              (("2"
                                                                                (EXPAND
                                                                                 "bounded_below?")
                                                                                (("2"
                                                                                  (INST
                                                                                   +
                                                                                   "0")
                                                                                  (("2"
                                                                                    (SKOSIMP)
                                                                                    (("2"
                                                                                      (INST
                                                                                       -
                                                                                       "x!3")
                                                                                      (("2"
                                                                                        (FLATTEN)
                                                                                        (("2"
                                                                                          (INST
                                                                                           -
                                                                                           "x!2")
                                                                                          NIL
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("2"
                                                (LEMMA "sup_norm_neg"
                                                 ("f" "G(n!1) - w!1(n!2)"))
                                                (("2" (EXPAND "-")
                                                  (("2" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2"
                                              (EXPAND "increasing_nn_simple?")
                                              (("2" (FLATTEN)
                                                (("2" (INST - "n!2")
                                                  (("2" (EXPAND "nn_simple?")
                                                    (("2" (FLATTEN) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (HIDE 2)
                        (("2" (EXPAND "nn_bounded_measurable?")
                          (("2" (ASSERT)
                            (("2" (SKOSIMP)
                              (("2" (INST - "x!1")
                                (("2" (EXPAND "G")
                                  (("2" (HIDE-ALL-BUT (-4 1))
                                    (("2" (GRIND) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("3" (HIDE -2 2)
                (("3" (SKOSIMP*)
                  (("3" (EXPAND "bounded?")
                    (("3" (INST + "n!1+1")
                      (("3" (SKOSIMP)
                        (("3" (INST - "x!1")
                          (("3" (INST -4 "x!1")
                            (("3" (FLATTEN)
                              (("3" (HIDE -3 -4)
                                (("3" (EXPAND "G") (("3" (GRIND) NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (HIDE 2)
              (("2" (SKOSIMP)
                (("2" (EXPAND "bounded_measurable?")
                  (("2" (SPLIT)
                    (("1" (EXPAND "bounded?")
                      (("1" (INST + "n!1+1")
                        (("1" (SKOSIMP)
                          (("1" (INST - "x!1")
                            (("1" (HIDE -1 -2)
                              (("1" (EXPAND "G") (("1" (GRIND) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (EXPAND "G")
                      (("2" (HIDE -1)
                        (("2" (LEMMA "const_measurable" ("c" "1+n!1"))
                          (("2" (EXPAND "const_fun")
                            (("2"
                              (LEMMA "min_measurable"
                               ("g1" "f!1" "g2" "LAMBDA (x: T): 1 + n!1"))
                              (("1" (PROPAX) NIL NIL) ("2" (PROPAX) NIL NIL)
                               ("3" (PROPAX) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (SKOSIMP*)
        (("2" (EXPAND "pointwise_converges_upto?")
          (("2" (FLATTEN)
            (("2" (LEMMA "pointwise_measurable" ("u" "w!1" "f" "f!1"))
              (("2" (ASSERT) NIL NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|const_fun| CONST-DECL "[S -> T]" |const_fun_def| |structures|)
    (|min| CONST-DECL "[T -> real]" |real_fun_ops_aux| |reals|)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (T FORMAL-TYPE-DECL NIL |measure_space| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|const_measurable| FORMULA-DECL NIL |measure_space| NIL)
    (|min_measurable| JUDGEMENT-TCC NIL |measure_space| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL) NIL
    (|sup_norm| CONST-DECL "nnreal" |sup_norm| NIL)
    (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL)
    (|bounded| NONEMPTY-TYPE-EQ-DECL NIL |sup_norm| NIL)
    (|bounded?| CONST-DECL "bool" |sup_norm| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|simple| NONEMPTY-TYPE-EQ-DECL NIL |measure_space| NIL)
    (|simple?| CONST-DECL "bool" |measure_space| NIL)
    (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (|pointwise_increasing?| CONST-DECL "bool" |pointwise_convergence| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) NIL
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|choose_member| FORMULA-DECL NIL |sets_lemmas| NIL)
    (|pointwise_convergence?| CONST-DECL "bool" |pointwise_convergence| NIL)
    (|simple_max| APPLICATION-JUDGEMENT "simple" |measure_space| NIL)
    (|max| CONST-DECL "[T -> real]" |real_fun_ops_aux| |reals|)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    NIL NIL (|nn_simple?| CONST-DECL "bool" |measure_space| NIL)
    (|increasing_nn_simple| NONEMPTY-TYPE-EQ-DECL NIL |measure_space| NIL) NIL
    (|metric_converges_to| CONST-DECL "bool" |metric_space_def| |metric_space|)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|ball| CONST-DECL "set[T]" |metric_space_def| |metric_space|)
    (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (> CONST-DECL "bool" |reals| NIL) (< CONST-DECL "bool" |reals| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|increasing?| CONST-DECL "bool" |real_fun_preds| |reals|)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|sup_norm_prop| FORMULA-DECL NIL |sup_norm| NIL)
    (|both_sides_div_pos_le2| FORMULA-DECL NIL |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|archimedean| FORMULA-DECL NIL |real_props| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nzrat_div_nzrat_is_nzrat| APPLICATION-JUDGEMENT "nzrat" |rationals| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|metric_convergence_def| FORMULA-DECL NIL |metric_space| |metric_space|)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|increasing_nn_simple?| CONST-DECL "bool" |measure_space| NIL)
    (|measurable_function| NONEMPTY-TYPE-EQ-DECL NIL |measure_space_def| NIL)
    (|measurable_function?| CONST-DECL "bool" |measure_space_def| NIL)
    (S FORMAL-CONST-DECL "sigma_algebra" |measure_space| NIL)
    (|sigma_algebra| NONEMPTY-TYPE-EQ-DECL NIL |subset_algebra_def| NIL)
    (|sigma_algebra?| CONST-DECL "bool" |subset_algebra_def| NIL)
    (|setofsets| TYPE-EQ-DECL NIL |sets| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|simple_maximum| APPLICATION-JUDGEMENT "simple" |measure_space| NIL)
    (|maximum| DEF-DECL "[T -> real]" |real_fun_ops_aux| |reals|)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|pointwise_converges_upto?| CONST-DECL "bool" |pointwise_convergence| NIL)
    (|int_max| APPLICATION-JUDGEMENT "{k: int | i <= k AND j <= k}" |real_defs|
     NIL)
    (|rat_max| APPLICATION-JUDGEMENT "{s: rat | s >= q AND s >= r}" |real_defs|
     NIL)
    (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL)
    (|div_mult_pos_lt1| FORMULA-DECL NIL |real_props| NIL)
    (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal"
     |real_types| NIL)
    (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|both_sides_times_pos_lt1| FORMULA-DECL NIL |real_props| NIL)
    (|nnreal_plus_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    NIL NIL NIL NIL (|axiom_of_archimedes| FORMULA-DECL NIL |real_props| NIL)
    (|choose| CONST-DECL "(p)" |sets| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nn_bounded_measurable_as_increasing_simple_sequence| FORMULA-DECL NIL
     |measure_space| NIL)
    (|nn_bounded_measurable?| CONST-DECL "bool" |measure_space| NIL)
    (|nn_bounded_measurable| NONEMPTY-TYPE-EQ-DECL NIL |measure_space| NIL)
    (|inf_pointwise_convergence_upto| FORMULA-DECL NIL |pointwise_convergence|
     NIL)
    (|pointwise_bounded_below?| CONST-DECL "bool" |pointwise_convergence| NIL)
    (|pointwise_bounded_below| NONEMPTY-TYPE-EQ-DECL NIL
     |pointwise_convergence| NIL)
    (|inf_pointwise_le| FORMULA-DECL NIL |pointwise_convergence| NIL)
    (|inf| CONST-DECL "real" |pointwise_convergence| NIL)
    (|greatest_lower_bound| CONST-DECL "bool" |bound_defs| |reals|)
    (|inf_set| TYPE-EQ-DECL NIL |bounded_reals| |reals|)
    (|below_bounded| CONST-DECL "bool" |bounded_reals| |reals|)
    (|inf| CONST-DECL "{x | greatest_lower_bound(<=)(x, Sl)}" |bounded_reals|
     |reals|)
    NIL NIL (|lower_bound| CONST-DECL "bool" |bound_defs| |reals|)
    (|pointwise?| CONST-DECL "bool" |pointwise_convergence| NIL)
    (|bounded_below?| CONST-DECL "bool" |real_fun_preds| |reals|) NIL
    (|sup_norm_neg| FORMULA-DECL NIL |sup_norm| NIL) NIL NIL
    (|sup_norm_converges_to?| CONST-DECL "bool" |sup_norm| NIL)
    (|sup_norm_converges_to_pointwise_convergence| FORMULA-DECL NIL |sup_norm|
     NIL)
    (|bounded_measurable?| CONST-DECL "bool" |measure_space| NIL)
    (|pointwise_measurable| FORMULA-DECL NIL |measure_space| NIL))
   SHOSTAK)
  (|nn_measurable_def-2| "" 3758920248
   ("" (SKOSIMP*)
    (("" (SPLIT)
      (("1" (FLATTEN)
        (("1" (NAME "G" "lambda n: min(f!1,const_fun[T,real](n+1))")
          (("1" (CASE "forall n: bounded_measurable?(G(n))")
            (("1"
              (CASE
                  "forall n: EXISTS h: (forall x: 0 <= h(x)&h(x)<=G(n)(x)) & sup_norm(G(n)-h) <= 1/(n+1)")
              (("1"
                (NAME "H"
                      "lambda n: choose[simple]({h | (FORALL x: 0 <= h(x) & h(x) <= G(n)(x)) & sup_norm(G(n) - h) <= 1 / (n + 1)})")
                (("1" (CASE "pointwise_increasing?(G)")
                  (("1"
                    (CASE
                        "forall n: (FORALL x: 0 <= H(n)(x) & H(n)(x) <= G(n)(x)) &
                  sup_norm(G(n) - H(n)) <= 1 / (n + 1)")
                    (("1" (CASE "pointwise_convergence?(H, f!1)")
                      (("1" (EXPAND "pointwise_converges_upto?")
                        (("1"
                          (CASE
                              "exists v: v(0)=H(0)&(forall (n:nat): v(n+1) = max(H(n+1),v(n)))")
                          (("1" (SKOSIMP)
                            (("1" (NAME-REPLACE "F" "v!1")
                              (("1" (CASE "pointwise_increasing?(F)")
                                (("1" (CASE "FORALL n: nn_simple?(F(n))")
                                  (("1" (CASE "increasing_nn_simple?(F)")
                                    (("1"
                                      (CASE "pointwise_convergence?(F, f!1)")
                                      (("1" (INST + "F")
                                        (("1" (ASSERT) NIL NIL)) NIL)
                                       ("2" (HIDE 2)
                                        (("2" (EXPAND "pointwise_convergence?")
                                          (("2" (SKOSIMP)
                                            (("2" (INST -6 "x!1")
                                              (("2"
                                                (REWRITE
                                                 "metric_convergence_def" *)
                                                (("2"
                                                  (REWRITE
                                                   "metric_convergence_def" *)
                                                  (("1" (HIDE -9 -10 -11 -12)
                                                    (("1"
                                                      (EXPAND
                                                       "metric_converges_to")
                                                      (("1" (SKOSIMP)
                                                        (("1" (EXPAND "ball")
                                                          (("1"
                                                            (EXPAND "member")
                                                            (("1"
                                                              (INST -6 "r!1/2")
                                                              (("1" (SKOSIMP)
                                                                (("1"
                                                                  (CASE
                                                                      "exists n: 1/(n+1) < r!1/2")
                                                                  (("1"
                                                                    (SKOSIMP)
                                                                    (("1"
                                                                      (CASE
                                                                          "max(n!1,n!2)>=n!1&max(n!1,n!2)>=n!2")
                                                                      (("1"
                                                                        (FLATTEN)
                                                                        (("1"
                                                                          (INST
                                                                           +
                                                                           "max(n!1, n!2)")
                                                                          (("1"
                                                                            (SKOSIMP)
                                                                            (("1"
                                                                              (INST
                                                                               -10
                                                                               "i!1")
                                                                              (("1"
                                                                                (ASSERT)
                                                                                (("1"
                                                                                  (CASE
                                                                                      "abs(H(i!1)(x!1)- F(i!1)(x!1)) < r!1/2")
                                                                                  (("1"
                                                                                    (HIDE-ALL-BUT
                                                                                     (-1
                                                                                      -11
                                                                                      1))
                                                                                    (("1"
                                                                                      (GRIND)
                                                                                      NIL
                                                                                      NIL))
                                                                                    NIL)
                                                                                   ("2"
                                                                                    (HIDE
                                                                                     2)
                                                                                    (("2"
                                                                                      (CASE
                                                                                          "forall n: F(n)(x!1)>=H(n)(x!1)")
                                                                                      (("1"
                                                                                        (CASE
                                                                                            "F(i!1)(x!1)-H(i!1)(x!1)< r!1 / 2")
                                                                                        (("1"
                                                                                          (INST
                                                                                           -
                                                                                           "i!1")
                                                                                          (("1"
                                                                                            (EXPAND
                                                                                             "abs")
                                                                                            (("1"
                                                                                              (ASSERT)
                                                                                              NIL
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL)
                                                                                         ("2"
                                                                                          (HIDE
                                                                                           2)
                                                                                          (("2"
                                                                                            (CASE
                                                                                                "forall n: G(n)(x!1)>=F(n)(x!1)")
                                                                                            (("1"
                                                                                              (INST
                                                                                               -
                                                                                               "i!1")
                                                                                              (("1"
                                                                                                (INST
                                                                                                 -
                                                                                                 "i!1")
                                                                                                (("1"
                                                                                                  (INST
                                                                                                   -13
                                                                                                   "i!1")
                                                                                                  (("1"
                                                                                                    (FLATTEN)
                                                                                                    (("1"
                                                                                                      (LEMMA
                                                                                                       "sup_norm_prop"
                                                                                                       ("f"
                                                                                                        "G(i!1) - H(i!1)"))
                                                                                                      (("1"
                                                                                                        (FLATTEN)
                                                                                                        (("1"
                                                                                                          (NAME-REPLACE
                                                                                                           "SUP"
                                                                                                           "sup_norm(G(i!1) - H(i!1))")
                                                                                                          (("1"
                                                                                                            (HIDE
                                                                                                             -2)
                                                                                                            (("1"
                                                                                                              (INST
                                                                                                               -
                                                                                                               "x!1")
                                                                                                              (("1"
                                                                                                                (EXPAND
                                                                                                                 "-"
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (EXPAND
                                                                                                                   "abs"
                                                                                                                   -1)
                                                                                                                  (("1"
                                                                                                                    (ASSERT)
                                                                                                                    (("1"
                                                                                                                      (LEMMA
                                                                                                                       "both_sides_div_pos_le2"
                                                                                                                       ("pz"
                                                                                                                        "1"
                                                                                                                        "py"
                                                                                                                        "1+n!2"
                                                                                                                        "px"
                                                                                                                        "1+i!1"))
                                                                                                                      (("1"
                                                                                                                        (ASSERT)
                                                                                                                        NIL
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL)
                                                                                             ("2"
                                                                                              (HIDE
                                                                                               2)
                                                                                              (("2"
                                                                                                (INDUCT
                                                                                                 "n")
                                                                                                (("1"
                                                                                                  (REPLACE
                                                                                                   -9)
                                                                                                  (("1"
                                                                                                    (INST
                                                                                                     -12
                                                                                                     "0")
                                                                                                    (("1"
                                                                                                      (FLATTEN)
                                                                                                      (("1"
                                                                                                        (INST
                                                                                                         -12
                                                                                                         "x!1")
                                                                                                        (("1"
                                                                                                          (FLATTEN)
                                                                                                          (("1"
                                                                                                            (ASSERT)
                                                                                                            NIL
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL)
                                                                                                 ("2"
                                                                                                  (SKOSIMP*)
                                                                                                  (("2"
                                                                                                    (INST
                                                                                                     -11
                                                                                                     "j!1")
                                                                                                    (("2"
                                                                                                      (REPLACE
                                                                                                       -11)
                                                                                                      (("2"
                                                                                                        (EXPAND
                                                                                                         "max"
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (INST
                                                                                                           -13
                                                                                                           "1+j!1")
                                                                                                          (("2"
                                                                                                            (FLATTEN)
                                                                                                            (("2"
                                                                                                              (INST
                                                                                                               -13
                                                                                                               "x!1")
                                                                                                              (("2"
                                                                                                                (HIDE-ALL-BUT
                                                                                                                 (-1
                                                                                                                  -13
                                                                                                                  -15
                                                                                                                  1))
                                                                                                                (("2"
                                                                                                                  (EXPAND
                                                                                                                   "pointwise_increasing?")
                                                                                                                  (("2"
                                                                                                                    (INST
                                                                                                                     -
                                                                                                                     "x!1")
                                                                                                                    (("2"
                                                                                                                      (EXPAND
                                                                                                                       "increasing?")
                                                                                                                      (("2"
                                                                                                                        (INST
                                                                                                                         -
                                                                                                                         "j!1"
                                                                                                                         "j!1+1")
                                                                                                                        (("2"
                                                                                                                          (ASSERT)
                                                                                                                          (("2"
                                                                                                                            (GRIND)
                                                                                                                            NIL
                                                                                                                            NIL))
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL)
                                                                                       ("2"
                                                                                        (HIDE
                                                                                         2)
                                                                                        (("2"
                                                                                          (INDUCT
                                                                                           "n")
                                                                                          (("1"
                                                                                            (REPLACE
                                                                                             -8)
                                                                                            (("1"
                                                                                              (ASSERT)
                                                                                              NIL
                                                                                              NIL))
                                                                                            NIL)
                                                                                           ("2"
                                                                                            (SKOSIMP*)
                                                                                            (("2"
                                                                                              (INST
                                                                                               -10
                                                                                               "j!1")
                                                                                              (("2"
                                                                                                (REPLACE
                                                                                                 -10)
                                                                                                (("2"
                                                                                                  (EXPAND
                                                                                                   "max"
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (EXPAND
                                                                                                     "max"
                                                                                                     1)
                                                                                                    (("2"
                                                                                                      (CASE-REPLACE
                                                                                                       "H(1 + j!1)(x!1) < F(j!1)(x!1)")
                                                                                                      (("1"
                                                                                                        (ASSERT)
                                                                                                        NIL
                                                                                                        NIL)
                                                                                                       ("2"
                                                                                                        (ASSERT)
                                                                                                        NIL
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL)
                                                                       ("2"
                                                                        (HIDE-ALL-BUT
                                                                         1)
                                                                        (("2"
                                                                          (GRIND)
                                                                          NIL
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL)
                                                                   ("2"
                                                                    (HIDE-ALL-BUT
                                                                     1)
                                                                    (("2"
                                                                      (LEMMA
                                                                       "archimedean"
                                                                       ("px"
                                                                        "r!1/2"))
                                                                      (("2"
                                                                        (SKOSIMP)
                                                                        (("2"
                                                                          (INST
                                                                           +
                                                                           "n!2-1")
                                                                          (("2"
                                                                            (ASSERT)
                                                                            NIL
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (HIDE-ALL-BUT 1)
                                                    (("2" (GRIND) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (EXPAND "increasing_nn_simple?")
                                      (("2" (REPLACE -2)
                                        (("2" (PROPAX) NIL NIL)) NIL))
                                      NIL))
                                    NIL)
                                   ("2" (HIDE-ALL-BUT (-1 -2 -5 1))
                                    (("2" (EXPAND "nn_simple?")
                                      (("2" (SKOSIMP*)
                                        (("2" (INST - "0")
                                          (("2" (FLATTEN)
                                            (("2" (INST - "x!1")
                                              (("2" (FLATTEN)
                                                (("2"
                                                  (EXPAND
                                                   "pointwise_increasing?")
                                                  (("2" (INST - "x!1")
                                                    (("2"
                                                      (EXPAND "increasing?")
                                                      (("2" (INST - "0" "n!1")
                                                        (("2" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (HIDE-ALL-BUT (-1 -2 1))
                                  (("2" (EXPAND "pointwise_increasing?")
                                    (("2" (SKOSIMP)
                                      (("2" (EXPAND "increasing?")
                                        (("2"
                                          (CASE
                                              "forall n,m: F(m)(x!1) <= F(n+m)(x!1)")
                                          (("1" (SKOSIMP)
                                            (("1" (INST - "y!1-x!2" "x!2")
                                              (("1" (ASSERT) NIL NIL)
                                               ("2" (ASSERT) NIL NIL))
                                              NIL))
                                            NIL)
                                           ("2" (HIDE 2 -1)
                                            (("2" (INDUCT "n")
                                              (("1" (SKOSIMP)
                                                (("1" (ASSERT) NIL NIL)) NIL)
                                               ("2" (SKOSIMP*)
                                                (("2" (INST - "m!1")
                                                  (("2" (INST - "j!1+m!1")
                                                    (("2" (REPLACE -2)
                                                      (("2" (HIDE -2)
                                                        (("2" (GRIND) NIL NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (HIDE-ALL-BUT 1)
                            (("2" (INST + "lambda (k:nat): maximum(H,k)")
                              (("2"
                                (CASE "FORALL (n: nat):
          maximum(H,n) = if n=0 then H(0) else max(H(n), maximum(H,n-1)) endif")
                                (("1" (SPLIT)
                                  (("1" (INST - "0") NIL NIL)
                                   ("2" (SKOSIMP)
                                    (("2" (INST - "n!1+1")
                                      (("2" (ASSERT) NIL NIL)) NIL))
                                    NIL))
                                  NIL)
                                 ("2" (HIDE 2)
                                  (("2" (INDUCT "n")
                                    (("1" (EXPAND "maximum")
                                      (("1" (PROPAX) NIL NIL)) NIL)
                                     ("2" (SKOSIMP*)
                                      (("2" (EXPAND "maximum" 1 1)
                                        (("2" (PROPAX) NIL NIL)) NIL))
                                      NIL)
                                     ("3" (SKOSIMP) (("3" (ASSERT) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("3" (SKOSIMP) (("3" (ASSERT) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (HIDE 2)
                        (("2" (EXPAND "pointwise_convergence?")
                          (("2" (SKOSIMP)
                            (("2" (REWRITE "metric_convergence_def" *)
                              (("1" (EXPAND "metric_converges_to")
                                (("1" (SKOSIMP)
                                  (("1" (EXPAND "ball")
                                    (("1" (EXPAND "member")
                                      (("1" (LEMMA "archimedean" ("px" "r!1"))
                                        (("1" (SKOSIMP)
                                          (("1"
                                            (LEMMA "axiom_of_archimedes"
                                             ("x" "f!1(x!1)"))
                                            (("1" (SKOSIMP)
                                              (("1" (INST -10 "x!1")
                                                (("1"
                                                  (NAME "N" "max(n!1+1,i!1)")
                                                  (("1" (INST + "N")
                                                    (("1" (SKOSIMP)
                                                      (("1" (INST -5 "i!2")
                                                        (("1" (FLATTEN)
                                                          (("1"
                                                            (LEMMA
                                                             "sup_norm_prop"
                                                             ("f"
                                                              "G(i!2) - H(i!2)"))
                                                            (("1" (FLATTEN)
                                                              (("1"
                                                                (INST - "x!1")
                                                                (("1"
                                                                  (EXPAND "-"
                                                                          -1 1)
                                                                  (("1"
                                                                    (EXPAND "G"
                                                                            -1
                                                                            1)
                                                                    (("1"
                                                                      (EXPAND
                                                                       "const_fun"
                                                                       -1)
                                                                      (("1"
                                                                        (EXPAND
                                                                         "min"
                                                                         -1)
                                                                        (("1"
                                                                          (EXPAND
                                                                           "min"
                                                                           -1)
                                                                          (("1"
                                                                            (ASSERT)
                                                                            (("1"
                                                                              (CASE
                                                                                  "1 / (1 + i!2)< r!1")
                                                                              (("1"
                                                                                (ASSERT)
                                                                                NIL
                                                                                NIL)
                                                                               ("2"
                                                                                (HIDE-ALL-BUT
                                                                                 (1
                                                                                  -6
                                                                                  -3
                                                                                  -5
                                                                                  -4
                                                                                  -15))
                                                                                (("2"
                                                                                  (REWRITE
                                                                                   "div_mult_pos_lt1"
                                                                                   1)
                                                                                  (("2"
                                                                                    (REWRITE
                                                                                     "div_mult_pos_lt1"
                                                                                     -3)
                                                                                    (("2"
                                                                                      (LEMMA
                                                                                       "both_sides_times_pos_lt1"
                                                                                       ("pz"
                                                                                        "r!1"
                                                                                        "x"
                                                                                        "n!1"
                                                                                        "y"
                                                                                        "i!2+1"))
                                                                                      (("2"
                                                                                        (ASSERT)
                                                                                        NIL
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL)
                                                     ("2" (ASSERT) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (HIDE 2 -2)
                      (("2" (SKOSIMP)
                        (("2" (EXPAND "H")
                          (("2"
                            (LEMMA "choose_member[simple]"
                             ("a" "{h |
                         (FORALL x: 0 <= h(x) & h(x) <= G(n!1)(x)) &
                          sup_norm(G(n!1) - h) <= 1 / (1 + n!1)}"))
                            (("1" (SPLIT -1)
                              (("1" (EXPAND "member") (("1" (PROPAX) NIL NIL))
                                NIL)
                               ("2" (HIDE 1)
                                (("2" (EXPAND "empty?")
                                  (("2" (EXPAND "member")
                                    (("2" (INST -3 "n!1")
                                      (("2" (SKOSIMP)
                                        (("2" (INST - "h!1")
                                          (("2" (REPLACE -3)
                                            (("2" (PROPAX) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (HIDE 2)
                              (("2" (SKOSIMP)
                                (("2" (INST -4 "n!1")
                                  (("2" (EXPAND "bounded_measurable?")
                                    (("2" (FLATTEN)
                                      (("2" (EXPAND "bounded?")
                                        (("2" (SKOSIMP)
                                          (("2" (INST + "c!1")
                                            (("2" (SKOSIMP)
                                              (("2" (INST - "x!1")
                                                (("2" (INST -4 "x!1")
                                                  (("2"
                                                    (HIDE-ALL-BUT (-1 -4 1))
                                                    (("2" (GRIND) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("3" (HIDE 2)
                      (("3" (SKOSIMP)
                        (("3" (HIDE-ALL-BUT (-1 -5 1))
                          (("3" (INST -2 "n!1")
                            (("3" (EXPAND "bounded_measurable?")
                              (("3" (FLATTEN)
                                (("3" (EXPAND "bounded?")
                                  (("3" (SKOSIMP)
                                    (("3" (INST + "c!1")
                                      (("3" (SKOSIMP)
                                        (("3" (INST - "x!1")
                                          (("3" (INST - "x!1")
                                            (("3" (HIDE -3)
                                              (("3" (EXPAND "G")
                                                (("3" (GRIND) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (HIDE-ALL-BUT (-6 1))
                    (("2" (EXPAND "pointwise_increasing?")
                      (("2" (SKOSIMP)
                        (("2" (INST - "x!1")
                          (("2" (EXPAND "G")
                            (("2" (EXPAND "increasing?")
                              (("2" (SKOSIMP*) (("2" (GRIND) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (HIDE 2)
                  (("2" (SKOSIMP)
                    (("2" (INST - "n!1")
                      (("2" (SKOSIMP)
                        (("2" (EXPAND "nonempty?")
                          (("2" (EXPAND "empty?")
                            (("2" (EXPAND "member")
                              (("2" (INST - "h!1")
                                (("2" (REPLACE -1) (("2" (ASSERT) NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (HIDE 2)
                (("2" (SKOSIMP)
                  (("2" (INST - "n!1")
                    (("2"
                      (LEMMA
                       "nn_bounded_measurable_as_increasing_simple_sequence"
                       ("p" "G(n!1)"))
                      (("1" (SKOSIMP)
                        (("1" (TYPEPRED "w!1")
                          (("1"
                            (LEMMA
                             "sup_norm_converges_to_pointwise_convergence"
                             ("u" "w!1" "f" "G(n!1)"))
                            (("1" (ASSERT)
                              (("1" (EXPAND "sup_norm_converges_to?")
                                (("1" (INST - "1/(1+n!1)")
                                  (("1" (SKOSIMP)
                                    (("1" (INST - "n!2")
                                      (("1" (ASSERT)
                                        (("1" (ASSERT)
                                          (("1" (INST + "w!1(n!2)")
                                            (("1" (SPLIT)
                                              (("1" (SKOSIMP)
                                                (("1" (COPY -2)
                                                  (("1"
                                                    (EXPAND
                                                     "increasing_nn_simple?"
                                                     -1)
                                                    (("1" (FLATTEN)
                                                      (("1" (INST - "n!2")
                                                        (("1"
                                                          (EXPAND "nn_simple?")
                                                          (("1" (FLATTEN)
                                                            (("1"
                                                              (INST - "x!1")
                                                              (("1" (ASSERT)
                                                                (("1"
                                                                  (LEMMA
                                                                   "inf_pointwise_convergence_upto"
                                                                   ("p" "w!1"
                                                                    "f"
                                                                    "G(n!1)"))
                                                                  (("1"
                                                                    (ASSERT)
                                                                    (("1"
                                                                      (EXPAND
                                                                       "pointwise_converges_upto?")
                                                                      (("1"
                                                                        (FLATTEN)
                                                                        (("1"
                                                                          (LEMMA
                                                                           "inf_pointwise_le"
                                                                           ("p"
                                                                            "w!1"
                                                                            "f"
                                                                            "G(n!1)"))
                                                                          (("1"
                                                                            (ASSERT)
                                                                            (("1"
                                                                              (INST
                                                                               -
                                                                               "x!1")
                                                                              (("1"
                                                                                (INST
                                                                                 -
                                                                                 "n!2"
                                                                                 "x!1")
                                                                                (("1"
                                                                                  (EXPAND
                                                                                   "inf")
                                                                                  (("1"
                                                                                    (HIDE
                                                                                     -2
                                                                                     -3)
                                                                                    (("1"
                                                                                      (TYPEPRED
                                                                                       "inf(image[nat, real](LAMBDA m: w!1(m)(x!1), {m | m >= n!2}))")
                                                                                      (("1"
                                                                                        (NAME-REPLACE
                                                                                         "INF"
                                                                                         "inf(image[nat, real](LAMBDA m: w!1(m)(x!1), {m | m >= n!2}))")
                                                                                        (("1"
                                                                                          (EXPAND
                                                                                           "image")
                                                                                          (("1"
                                                                                            (EXPAND
                                                                                             "greatest_lower_bound")
                                                                                            (("1"
                                                                                              (FLATTEN)
                                                                                              (("1"
                                                                                                (EXPAND
                                                                                                 "lower_bound")
                                                                                                (("1"
                                                                                                  (INST
                                                                                                   -
                                                                                                   "w!1(n!2)(x!1)")
                                                                                                  (("1"
                                                                                                    (INST
                                                                                                     -
                                                                                                     "w!1(n!2)(x!1)")
                                                                                                    (("1"
                                                                                                      (SPLIT
                                                                                                       -2)
                                                                                                      (("1"
                                                                                                        (ASSERT)
                                                                                                        NIL
                                                                                                        NIL)
                                                                                                       ("2"
                                                                                                        (ASSERT)
                                                                                                        NIL
                                                                                                        NIL)
                                                                                                       ("3"
                                                                                                        (SKOSIMP*)
                                                                                                        (("3"
                                                                                                          (TYPEPRED
                                                                                                           "z!1")
                                                                                                          (("3"
                                                                                                            (SKOSIMP)
                                                                                                            (("3"
                                                                                                              (TYPEPRED
                                                                                                               "x!2")
                                                                                                              (("3"
                                                                                                                (EXPAND
                                                                                                                 "pointwise_increasing?")
                                                                                                                (("3"
                                                                                                                  (INST
                                                                                                                   -
                                                                                                                   "x!1")
                                                                                                                  (("3"
                                                                                                                    (EXPAND
                                                                                                                     "increasing?")
                                                                                                                    (("3"
                                                                                                                      (INST
                                                                                                                       -
                                                                                                                       "n!2"
                                                                                                                       "x!2")
                                                                                                                      (("3"
                                                                                                                        (ASSERT)
                                                                                                                        NIL
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL)
                                                                                                   ("2"
                                                                                                    (INST
                                                                                                     +
                                                                                                     "n!2")
                                                                                                    NIL
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL)
                                                                   ("2"
                                                                    (EXPAND
                                                                     "pointwise_bounded_below?")
                                                                    (("2"
                                                                      (EXPAND
                                                                       "pointwise?")
                                                                      (("2"
                                                                        (SKOSIMP)
                                                                        (("2"
                                                                          (EXPAND
                                                                           "increasing_nn_simple?")
                                                                          (("2"
                                                                            (EXPAND
                                                                             "nn_simple?")
                                                                            (("2"
                                                                              (HIDE-ALL-BUT
                                                                               (-5
                                                                                1))
                                                                              (("2"
                                                                                (EXPAND
                                                                                 "bounded_below?")
                                                                                (("2"
                                                                                  (INST
                                                                                   +
                                                                                   "0")
                                                                                  (("2"
                                                                                    (SKOSIMP)
                                                                                    (("2"
                                                                                      (INST
                                                                                       -
                                                                                       "x!3")
                                                                                      (("2"
                                                                                        (FLATTEN)
                                                                                        (("2"
                                                                                          (INST
                                                                                           -
                                                                                           "x!2")
                                                                                          NIL
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("2"
                                                (LEMMA "sup_norm_neg"
                                                 ("f" "G(n!1) - w!1(n!2)"))
                                                (("2" (EXPAND "-")
                                                  (("2" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2"
                                              (EXPAND "increasing_nn_simple?")
                                              (("2" (FLATTEN)
                                                (("2" (INST - "n!2")
                                                  (("2" (EXPAND "nn_simple?")
                                                    (("2" (FLATTEN) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (HIDE 2)
                        (("2" (EXPAND "nn_bounded_measurable?")
                          (("2" (ASSERT)
                            (("2" (SKOSIMP)
                              (("2" (INST - "x!1")
                                (("2" (EXPAND "G")
                                  (("2" (HIDE-ALL-BUT (-4 1))
                                    (("2" (GRIND) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("3" (HIDE -2 2)
                (("3" (SKOSIMP*)
                  (("3" (EXPAND "bounded?")
                    (("3" (INST + "n!1+1")
                      (("3" (SKOSIMP)
                        (("3" (INST - "x!1")
                          (("3" (INST -4 "x!1")
                            (("3" (FLATTEN)
                              (("3" (HIDE -3 -4)
                                (("3" (EXPAND "G") (("3" (GRIND) NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (HIDE 2)
              (("2" (SKOSIMP)
                (("2" (EXPAND "bounded_measurable?")
                  (("2" (SPLIT)
                    (("1" (EXPAND "bounded?")
                      (("1" (INST + "n!1+1")
                        (("1" (SKOSIMP)
                          (("1" (INST - "x!1")
                            (("1" (HIDE -1 -2)
                              (("1" (EXPAND "G") (("1" (GRIND) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (EXPAND "G")
                      (("2" (HIDE -1)
                        (("2" (LEMMA "const_measurable" ("c" "1+n!1"))
                          (("2" (EXPAND "const_fun")
                            (("2"
                              (LEMMA "min_measurable"
                               ("g1" "f!1" "g2" "LAMBDA (x: T): 1 + n!1"))
                              (("1" (PROPAX) NIL NIL) ("2" (PROPAX) NIL NIL)
                               ("3" (PROPAX) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (SKOSIMP*)
        (("2" (EXPAND "pointwise_converges_upto?")
          (("2" (FLATTEN)
            (("2" (LEMMA "pointwise_measurable" ("u" "w!1" "f" "f!1"))
              (("2" (ASSERT) NIL NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|const_fun| CONST-DECL "[S -> T]" |const_fun_def| |structures|)
    (|min| CONST-DECL "[T -> real]" |real_fun_ops_aux| |reals|)
    (|sup_norm| CONST-DECL "nnreal" |sup_norm| NIL)
    (|bounded| NONEMPTY-TYPE-EQ-DECL NIL |sup_norm| NIL)
    (|bounded?| CONST-DECL "bool" |sup_norm| NIL)
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (|pointwise_increasing?| CONST-DECL "bool" |pointwise_convergence| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|pointwise_convergence?| CONST-DECL "bool" |pointwise_convergence| NIL)
    (|max| CONST-DECL "[T -> real]" |real_fun_ops_aux| |reals|)
    (|metric_converges_to| CONST-DECL "bool" |metric_space_def| |metric_space|)
    (|ball| CONST-DECL "set[T]" |metric_space_def| |metric_space|)
    (|increasing?| CONST-DECL "bool" |real_fun_preds| |reals|)
    (|sup_norm_prop| FORMULA-DECL NIL |sup_norm| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|metric_convergence_def| FORMULA-DECL NIL |metric_space| |metric_space|)
    (|measurable_function| NONEMPTY-TYPE-EQ-DECL NIL |measure_space_def| NIL)
    (|measurable_function?| CONST-DECL "bool" |measure_space_def| NIL)
    (|sigma_algebra| NONEMPTY-TYPE-EQ-DECL NIL |subset_algebra_def| NIL)
    (|sigma_algebra?| CONST-DECL "bool" |subset_algebra_def| NIL)
    (|setofsets| TYPE-EQ-DECL NIL |sets| NIL)
    (|maximum| DEF-DECL "[T -> real]" |real_fun_ops_aux| |reals|)
    (|pointwise_converges_upto?| CONST-DECL "bool" |pointwise_convergence| NIL)
    (|choose| CONST-DECL "(p)" |sets| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|inf_pointwise_convergence_upto| FORMULA-DECL NIL |pointwise_convergence|
     NIL)
    (|pointwise_bounded_below?| CONST-DECL "bool" |pointwise_convergence| NIL)
    (|pointwise_bounded_below| NONEMPTY-TYPE-EQ-DECL NIL
     |pointwise_convergence| NIL)
    (|inf_pointwise_le| FORMULA-DECL NIL |pointwise_convergence| NIL)
    (|inf| CONST-DECL "real" |pointwise_convergence| NIL)
    (|greatest_lower_bound| CONST-DECL "bool" |bound_defs| |reals|)
    (|inf_set| TYPE-EQ-DECL NIL |bounded_reals| |reals|)
    (|below_bounded| CONST-DECL "bool" |bounded_reals| |reals|)
    (|inf| CONST-DECL "{x | greatest_lower_bound(<=)(x, Sl)}" |bounded_reals|
     |reals|)
    (|lower_bound| CONST-DECL "bool" |bound_defs| |reals|)
    (|pointwise?| CONST-DECL "bool" |pointwise_convergence| NIL)
    (|bounded_below?| CONST-DECL "bool" |real_fun_preds| |reals|)
    (|sup_norm_neg| FORMULA-DECL NIL |sup_norm| NIL)
    (|sup_norm_converges_to?| CONST-DECL "bool" |sup_norm| NIL)
    (|sup_norm_converges_to_pointwise_convergence| FORMULA-DECL NIL |sup_norm|
     NIL))
   SHOSTAK)
  (|nn_measurable_def-1| |nil| 3392525889
   ("" (SKOSIMP*)
    (("" (SPLIT)
      (("1" (FLATTEN)
        (("1" (NAME "G" "lambda n: min(f!1,const_fun[T,real](n+1))")
          (("1" (CASE "forall n: bounded_measurable?(G(n))")
            (("1"
              (CASE
                  "forall n: EXISTS h: (forall x: 0 <= h(x)&h(x)<=G(n)(x)) & sup_norm(G(n)-h) <= 1/(n+1)")
              (("1"
                (NAME "H"
                      "lambda n: choose[simple]({h | (FORALL x: 0 <= h(x) & h(x) <= G(n)(x)) & sup_norm(G(n) - h) <= 1 / (n + 1)})")
                (("1" (CASE "pointwise_increasing?(G)")
                  (("1"
                    (CASE
                        "forall n: (FORALL x: 0 <= H(n)(x) & H(n)(x) <= G(n)(x)) &
                  sup_norm(G(n) - H(n)) <= 1 / (n + 1)")
                    (("1" (CASE "pointwise_convergence?(H, f!1)")
                      (("1" (EXPAND "pointwise_converges_upto?")
                        (("1"
                          (CASE
                              "exists v: v(0)=H(0)&(forall (n:nat): v(n+1) = max(H(n+1),v(n)))")
                          (("1" (SKOSIMP)
                            (("1" (NAME-REPLACE "F" "v!1")
                              (("1" (CASE "pointwise_increasing?(F)")
                                (("1" (CASE "FORALL n: nn_simple?(F(n))")
                                  (("1" (CASE "increasing_nn_simple?(F)")
                                    (("1"
                                      (CASE "pointwise_convergence?(F, f!1)")
                                      (("1" (INST + "F")
                                        (("1" (ASSERT) NIL NIL)) NIL)
                                       ("2" (HIDE 2)
                                        (("2" (EXPAND "pointwise_convergence?")
                                          (("2" (SKOSIMP)
                                            (("2" (INST -6 "x!1")
                                              (("2"
                                                (REWRITE
                                                 "metric_convergence_def" *)
                                                (("2"
                                                  (REWRITE
                                                   "metric_convergence_def" *)
                                                  (("2" (HIDE -9 -10 -11 -12)
                                                    (("2"
                                                      (EXPAND
                                                       "metric_converges_to")
                                                      (("2" (SKOSIMP)
                                                        (("2" (EXPAND "ball")
                                                          (("2"
                                                            (EXPAND "member")
                                                            (("2"
                                                              (INST -6 "r!1/2")
                                                              (("2" (SKOSIMP)
                                                                (("2"
                                                                  (CASE
                                                                      "exists n: 1/(n+1) < r!1/2")
                                                                  (("1"
                                                                    (SKOSIMP)
                                                                    (("1"
                                                                      (CASE
                                                                          "max(n!1,n!2)>=n!1&max(n!1,n!2)>=n!2")
                                                                      (("1"
                                                                        (FLATTEN)
                                                                        (("1"
                                                                          (INST
                                                                           +
                                                                           "max(n!1, n!2)")
                                                                          (("1"
                                                                            (SKOSIMP)
                                                                            (("1"
                                                                              (INST
                                                                               -10
                                                                               "i!1")
                                                                              (("1"
                                                                                (ASSERT)
                                                                                (("1"
                                                                                  (CASE
                                                                                      "abs(H(i!1)(x!1)- F(i!1)(x!1)) < r!1/2")
                                                                                  (("1"
                                                                                    (HIDE-ALL-BUT
                                                                                     (-1
                                                                                      -11
                                                                                      1))
                                                                                    (("1"
                                                                                      (GRIND)
                                                                                      NIL
                                                                                      NIL))
                                                                                    NIL)
                                                                                   ("2"
                                                                                    (HIDE
                                                                                     2)
                                                                                    (("2"
                                                                                      (CASE
                                                                                          "forall n: F(n)(x!1)>=H(n)(x!1)")
                                                                                      (("1"
                                                                                        (CASE
                                                                                            "F(i!1)(x!1)-H(i!1)(x!1)< r!1 / 2")
                                                                                        (("1"
                                                                                          (INST
                                                                                           -
                                                                                           "i!1")
                                                                                          (("1"
                                                                                            (EXPAND
                                                                                             "abs")
                                                                                            (("1"
                                                                                              (ASSERT)
                                                                                              NIL
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL)
                                                                                         ("2"
                                                                                          (HIDE
                                                                                           2)
                                                                                          (("2"
                                                                                            (CASE
                                                                                                "forall n: G(n)(x!1)>=F(n)(x!1)")
                                                                                            (("1"
                                                                                              (INST
                                                                                               -
                                                                                               "i!1")
                                                                                              (("1"
                                                                                                (INST
                                                                                                 -
                                                                                                 "i!1")
                                                                                                (("1"
                                                                                                  (INST
                                                                                                   -13
                                                                                                   "i!1")
                                                                                                  (("1"
                                                                                                    (FLATTEN)
                                                                                                    (("1"
                                                                                                      (LEMMA
                                                                                                       "sup_norm_prop"
                                                                                                       ("f"
                                                                                                        "G(i!1) - H(i!1)"))
                                                                                                      (("1"
                                                                                                        (FLATTEN)
                                                                                                        (("1"
                                                                                                          (NAME-REPLACE
                                                                                                           "SUP"
                                                                                                           "sup_norm(G(i!1) - H(i!1))")
                                                                                                          (("1"
                                                                                                            (HIDE
                                                                                                             -2)
                                                                                                            (("1"
                                                                                                              (INST
                                                                                                               -
                                                                                                               "x!1")
                                                                                                              (("1"
                                                                                                                (EXPAND
                                                                                                                 "-"
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (EXPAND
                                                                                                                   "abs"
                                                                                                                   -1)
                                                                                                                  (("1"
                                                                                                                    (ASSERT)
                                                                                                                    (("1"
                                                                                                                      (LEMMA
                                                                                                                       "both_sides_div_pos_le2"
                                                                                                                       ("pz"
                                                                                                                        "1"
                                                                                                                        "py"
                                                                                                                        "1+n!2"
                                                                                                                        "px"
                                                                                                                        "1+i!1"))
                                                                                                                      (("1"
                                                                                                                        (ASSERT)
                                                                                                                        NIL
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL)
                                                                                             ("2"
                                                                                              (HIDE
                                                                                               2)
                                                                                              (("2"
                                                                                                (INDUCT
                                                                                                 "n")
                                                                                                (("1"
                                                                                                  (REPLACE
                                                                                                   -9)
                                                                                                  (("1"
                                                                                                    (INST
                                                                                                     -12
                                                                                                     "0")
                                                                                                    (("1"
                                                                                                      (FLATTEN)
                                                                                                      (("1"
                                                                                                        (INST
                                                                                                         -12
                                                                                                         "x!1")
                                                                                                        (("1"
                                                                                                          (FLATTEN)
                                                                                                          (("1"
                                                                                                            (ASSERT)
                                                                                                            NIL
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL)
                                                                                                 ("2"
                                                                                                  (SKOSIMP*)
                                                                                                  (("2"
                                                                                                    (INST
                                                                                                     -11
                                                                                                     "j!1")
                                                                                                    (("2"
                                                                                                      (REPLACE
                                                                                                       -11)
                                                                                                      (("2"
                                                                                                        (EXPAND
                                                                                                         "max"
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (INST
                                                                                                           -13
                                                                                                           "1+j!1")
                                                                                                          (("2"
                                                                                                            (FLATTEN)
                                                                                                            (("2"
                                                                                                              (INST
                                                                                                               -13
                                                                                                               "x!1")
                                                                                                              (("2"
                                                                                                                (HIDE-ALL-BUT
                                                                                                                 (-1
                                                                                                                  -13
                                                                                                                  -15
                                                                                                                  1))
                                                                                                                (("2"
                                                                                                                  (EXPAND
                                                                                                                   "pointwise_increasing?")
                                                                                                                  (("2"
                                                                                                                    (INST
                                                                                                                     -
                                                                                                                     "x!1")
                                                                                                                    (("2"
                                                                                                                      (EXPAND
                                                                                                                       "increasing?")
                                                                                                                      (("2"
                                                                                                                        (INST
                                                                                                                         -
                                                                                                                         "j!1"
                                                                                                                         "j!1+1")
                                                                                                                        (("2"
                                                                                                                          (ASSERT)
                                                                                                                          (("2"
                                                                                                                            (GRIND)
                                                                                                                            NIL
                                                                                                                            NIL))
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL)
                                                                                       ("2"
                                                                                        (HIDE
                                                                                         2)
                                                                                        (("2"
                                                                                          (INDUCT
                                                                                           "n")
                                                                                          (("1"
                                                                                            (REPLACE
                                                                                             -8)
                                                                                            (("1"
                                                                                              (ASSERT)
                                                                                              NIL
                                                                                              NIL))
                                                                                            NIL)
                                                                                           ("2"
                                                                                            (SKOSIMP*)
                                                                                            (("2"
                                                                                              (INST
                                                                                               -10
                                                                                               "j!1")
                                                                                              (("2"
                                                                                                (REPLACE
                                                                                                 -10)
                                                                                                (("2"
                                                                                                  (EXPAND
                                                                                                   "max"
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (EXPAND
                                                                                                     "max"
                                                                                                     1)
                                                                                                    (("2"
                                                                                                      (CASE-REPLACE
                                                                                                       "H(1 + j!1)(x!1) < F(j!1)(x!1)")
                                                                                                      (("1"
                                                                                                        (ASSERT)
                                                                                                        NIL
                                                                                                        NIL)
                                                                                                       ("2"
                                                                                                        (ASSERT)
                                                                                                        NIL
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL)
                                                                       ("2"
                                                                        (HIDE-ALL-BUT
                                                                         1)
                                                                        (("2"
                                                                          (GRIND)
                                                                          NIL
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL)
                                                                   ("2"
                                                                    (HIDE-ALL-BUT
                                                                     1)
                                                                    (("2"
                                                                      (LEMMA
                                                                       "archimedean"
                                                                       ("px"
                                                                        "r!1/2"))
                                                                      (("2"
                                                                        (SKOSIMP)
                                                                        (("2"
                                                                          (INST
                                                                           +
                                                                           "n!2-1")
                                                                          (("2"
                                                                            (ASSERT)
                                                                            NIL
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (EXPAND "increasing_nn_simple?")
                                      (("2" (REPLACE -2)
                                        (("2" (PROPAX) NIL NIL)) NIL))
                                      NIL))
                                    NIL)
                                   ("2" (HIDE-ALL-BUT (-1 -2 -5 1))
                                    (("2" (EXPAND "nn_simple?")
                                      (("2" (SKOSIMP*)
                                        (("2" (INST - "0")
                                          (("2" (FLATTEN)
                                            (("2" (INST - "x!1")
                                              (("2" (FLATTEN)
                                                (("2"
                                                  (EXPAND
                                                   "pointwise_increasing?")
                                                  (("2" (INST - "x!1")
                                                    (("2"
                                                      (EXPAND "increasing?")
                                                      (("2" (INST - "0" "n!1")
                                                        (("2" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (HIDE-ALL-BUT (-1 -2 1))
                                  (("2" (EXPAND "pointwise_increasing?")
                                    (("2" (SKOSIMP)
                                      (("2" (EXPAND "increasing?")
                                        (("2"
                                          (CASE
                                              "forall n,m: F(m)(x!1) <= F(n+m)(x!1)")
                                          (("1" (SKOSIMP)
                                            (("1" (INST - "y!1-x!2" "x!2")
                                              (("1" (ASSERT) NIL NIL)
                                               ("2" (ASSERT) NIL NIL))
                                              NIL))
                                            NIL)
                                           ("2" (HIDE 2 -1)
                                            (("2" (INDUCT "n")
                                              (("1" (SKOSIMP)
                                                (("1" (ASSERT) NIL NIL)) NIL)
                                               ("2" (SKOSIMP*)
                                                (("2" (INST - "m!1")
                                                  (("2" (INST - "j!1+m!1")
                                                    (("2" (REPLACE -2)
                                                      (("2" (HIDE -2)
                                                        (("2" (GRIND) NIL NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (HIDE-ALL-BUT 1)
                            (("2" (INST + "lambda (k:nat): maximum(H,k)")
                              (("2"
                                (CASE "FORALL (n: nat):
          maximum(H,n) = if n=0 then H(0) else max(H(n), maximum(H,n-1)) endif")
                                (("1" (SPLIT)
                                  (("1" (INST - "0") NIL NIL)
                                   ("2" (SKOSIMP)
                                    (("2" (INST - "n!1+1")
                                      (("2" (ASSERT) NIL NIL)) NIL))
                                    NIL))
                                  NIL)
                                 ("2" (HIDE 2)
                                  (("2" (INDUCT "n")
                                    (("1" (EXPAND "maximum")
                                      (("1" (PROPAX) NIL NIL)) NIL)
                                     ("2" (SKOSIMP*)
                                      (("2" (EXPAND "maximum" 1 1)
                                        (("2" (PROPAX) NIL NIL)) NIL))
                                      NIL)
                                     ("3" (SKOSIMP) (("3" (ASSERT) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("3" (SKOSIMP) (("3" (ASSERT) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (HIDE 2)
                        (("2" (EXPAND "pointwise_convergence?")
                          (("2" (SKOSIMP)
                            (("2" (REWRITE "metric_convergence_def" *)
                              (("2" (EXPAND "metric_converges_to")
                                (("2" (SKOSIMP)
                                  (("2" (EXPAND "ball")
                                    (("2" (EXPAND "member")
                                      (("2" (LEMMA "archimedean" ("px" "r!1"))
                                        (("2" (SKOSIMP)
                                          (("2"
                                            (LEMMA "axiom_of_archimedes"
                                             ("x" "f!1(x!1)"))
                                            (("2" (SKOSIMP)
                                              (("2" (INST -10 "x!1")
                                                (("2"
                                                  (NAME "N" "max(n!1+1,i!1)")
                                                  (("2" (INST + "N")
                                                    (("1" (SKOSIMP)
                                                      (("1" (INST -5 "i!2")
                                                        (("1" (FLATTEN)
                                                          (("1"
                                                            (LEMMA
                                                             "sup_norm_prop"
                                                             ("f"
                                                              "G(i!2) - H(i!2)"))
                                                            (("1" (FLATTEN)
                                                              (("1"
                                                                (INST - "x!1")
                                                                (("1"
                                                                  (EXPAND "-"
                                                                          -1 1)
                                                                  (("1"
                                                                    (EXPAND "G"
                                                                            -1
                                                                            1)
                                                                    (("1"
                                                                      (EXPAND
                                                                       "const_fun"
                                                                       -1)
                                                                      (("1"
                                                                        (EXPAND
                                                                         "min"
                                                                         -1)
                                                                        (("1"
                                                                          (EXPAND
                                                                           "min"
                                                                           -1)
                                                                          (("1"
                                                                            (ASSERT)
                                                                            (("1"
                                                                              (CASE
                                                                                  "1 / (1 + i!2)< r!1")
                                                                              (("1"
                                                                                (ASSERT)
                                                                                NIL
                                                                                NIL)
                                                                               ("2"
                                                                                (HIDE-ALL-BUT
                                                                                 (1
                                                                                  -6
                                                                                  -3
                                                                                  -5
                                                                                  -4
                                                                                  -15))
                                                                                (("2"
                                                                                  (REWRITE
                                                                                   "div_mult_pos_lt1"
                                                                                   1)
                                                                                  (("2"
                                                                                    (REWRITE
                                                                                     "div_mult_pos_lt1"
                                                                                     -3)
                                                                                    (("2"
                                                                                      (LEMMA
                                                                                       "both_sides_times_pos_lt1"
                                                                                       ("pz"
                                                                                        "r!1"
                                                                                        "x"
                                                                                        "n!1"
                                                                                        "y"
                                                                                        "i!2+1"))
                                                                                      (("2"
                                                                                        (ASSERT)
                                                                                        NIL
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL)
                                                     ("2" (ASSERT) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (HIDE 2 -2)
                      (("2" (SKOSIMP)
                        (("2" (EXPAND "H")
                          (("2"
                            (LEMMA "choose_member[simple]"
                             ("a" "{h |
                         (FORALL x: 0 <= h(x) & h(x) <= G(n!1)(x)) &
                          sup_norm(G(n!1) - h) <= 1 / (1 + n!1)}"))
                            (("1" (SPLIT -1)
                              (("1" (EXPAND "member") (("1" (PROPAX) NIL NIL))
                                NIL)
                               ("2" (HIDE 1)
                                (("2" (EXPAND "empty?")
                                  (("2" (EXPAND "member")
                                    (("2" (INST -3 "n!1")
                                      (("2" (SKOSIMP)
                                        (("2" (INST - "h!1")
                                          (("2" (REPLACE -3)
                                            (("2" (PROPAX) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (HIDE 2)
                              (("2" (SKOSIMP)
                                (("2" (INST -4 "n!1")
                                  (("2" (EXPAND "bounded_measurable?")
                                    (("2" (FLATTEN)
                                      (("2" (EXPAND "bounded?")
                                        (("2" (SKOSIMP)
                                          (("2" (INST + "c!1")
                                            (("2" (SKOSIMP)
                                              (("2" (INST - "x!1")
                                                (("2" (INST -4 "x!1")
                                                  (("2"
                                                    (HIDE-ALL-BUT (-1 -4 1))
                                                    (("2" (GRIND) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("3" (HIDE 2)
                      (("3" (SKOSIMP)
                        (("3" (HIDE-ALL-BUT (-1 -5 1))
                          (("3" (INST -2 "n!1")
                            (("3" (EXPAND "bounded_measurable?")
                              (("3" (FLATTEN)
                                (("3" (EXPAND "bounded?")
                                  (("3" (SKOSIMP)
                                    (("3" (INST + "c!1")
                                      (("3" (SKOSIMP)
                                        (("3" (INST - "x!1")
                                          (("3" (INST - "x!1")
                                            (("3" (HIDE -3)
                                              (("3" (EXPAND "G")
                                                (("3" (GRIND) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (HIDE-ALL-BUT (-6 1))
                    (("2" (EXPAND "pointwise_increasing?")
                      (("2" (SKOSIMP)
                        (("2" (INST - "x!1")
                          (("2" (EXPAND "G")
                            (("2" (EXPAND "increasing?")
                              (("2" (SKOSIMP*) (("2" (GRIND) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (HIDE 2)
                  (("2" (SKOSIMP)
                    (("2" (INST - "n!1")
                      (("2" (SKOSIMP)
                        (("2" (EXPAND "nonempty?")
                          (("2" (EXPAND "empty?")
                            (("2" (EXPAND "member")
                              (("2" (INST - "h!1")
                                (("2" (REPLACE -1) (("2" (ASSERT) NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (HIDE 2)
                (("2" (SKOSIMP)
                  (("2" (INST - "n!1")
                    (("2"
                      (LEMMA
                       "nn_bounded_measurable_as_increasing_simple_sequence"
                       ("p" "G(n!1)"))
                      (("1" (SKOSIMP)
                        (("1" (TYPEPRED "w!1")
                          (("1"
                            (LEMMA
                             "sup_norm_converges_to_pointwise_convergence"
                             ("u" "w!1" "f" "G(n!1)"))
                            (("1" (ASSERT)
                              (("1" (EXPAND "sup_norm_converges_to?")
                                (("1" (INST - "1/(1+n!1)")
                                  (("1" (SKOSIMP)
                                    (("1" (INST - "n!2")
                                      (("1" (ASSERT)
                                        (("1" (ASSERT)
                                          (("1" (INST + "w!1(n!2)")
                                            (("1" (SPLIT)
                                              (("1" (SKOSIMP)
                                                (("1" (COPY -2)
                                                  (("1"
                                                    (EXPAND
                                                     "increasing_nn_simple?"
                                                     -1)
                                                    (("1" (FLATTEN)
                                                      (("1" (INST - "n!2")
                                                        (("1"
                                                          (EXPAND "nn_simple?")
                                                          (("1" (FLATTEN)
                                                            (("1"
                                                              (INST - "x!1")
                                                              (("1" (ASSERT)
                                                                (("1"
                                                                  (LEMMA
                                                                   "inf_pointwise_convergence_upto"
                                                                   ("p" "w!1"
                                                                    "f"
                                                                    "G(n!1)"))
                                                                  (("1"
                                                                    (ASSERT)
                                                                    (("1"
                                                                      (EXPAND
                                                                       "pointwise_converges_upto?")
                                                                      (("1"
                                                                        (FLATTEN)
                                                                        (("1"
                                                                          (LEMMA
                                                                           "inf_pointwise_le"
                                                                           ("p"
                                                                            "w!1"
                                                                            "f"
                                                                            "G(n!1)"))
                                                                          (("1"
                                                                            (ASSERT)
                                                                            (("1"
                                                                              (INST
                                                                               -
                                                                               "x!1")
                                                                              (("1"
                                                                                (INST
                                                                                 -
                                                                                 "n!2"
                                                                                 "x!1")
                                                                                (("1"
                                                                                  (EXPAND
                                                                                   "inf")
                                                                                  (("1"
                                                                                    (HIDE
                                                                                     -2
                                                                                     -3)
                                                                                    (("1"
                                                                                      (TYPEPRED
                                                                                       "inf(image[nat, real](LAMBDA m: w!1(m)(x!1), {m | m >= n!2}))")
                                                                                      (("1"
                                                                                        (NAME-REPLACE
                                                                                         "INF"
                                                                                         "inf(image[nat, real](LAMBDA m: w!1(m)(x!1), {m | m >= n!2}))")
                                                                                        (("1"
                                                                                          (EXPAND
                                                                                           "image")
                                                                                          (("1"
                                                                                            (EXPAND
                                                                                             "greatest_lower_bound")
                                                                                            (("1"
                                                                                              (FLATTEN)
                                                                                              (("1"
                                                                                                (EXPAND
                                                                                                 "lower_bound")
                                                                                                (("1"
                                                                                                  (INST
                                                                                                   -
                                                                                                   "w!1(n!2)(x!1)")
                                                                                                  (("1"
                                                                                                    (INST
                                                                                                     -
                                                                                                     "w!1(n!2)(x!1)")
                                                                                                    (("1"
                                                                                                      (SPLIT
                                                                                                       -2)
                                                                                                      (("1"
                                                                                                        (ASSERT)
                                                                                                        NIL
                                                                                                        NIL)
                                                                                                       ("2"
                                                                                                        (ASSERT)
                                                                                                        NIL
                                                                                                        NIL)
                                                                                                       ("3"
                                                                                                        (SKOSIMP*)
                                                                                                        (("3"
                                                                                                          (TYPEPRED
                                                                                                           "z!1")
                                                                                                          (("3"
                                                                                                            (SKOSIMP)
                                                                                                            (("3"
                                                                                                              (TYPEPRED
                                                                                                               "x!2")
                                                                                                              (("3"
                                                                                                                (EXPAND
                                                                                                                 "pointwise_increasing?")
                                                                                                                (("3"
                                                                                                                  (INST
                                                                                                                   -
                                                                                                                   "x!1")
                                                                                                                  (("3"
                                                                                                                    (EXPAND
                                                                                                                     "increasing?")
                                                                                                                    (("3"
                                                                                                                      (INST
                                                                                                                       -
                                                                                                                       "n!2"
                                                                                                                       "x!2")
                                                                                                                      (("3"
                                                                                                                        (ASSERT)
                                                                                                                        NIL
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL)
                                                                                                   ("2"
                                                                                                    (INST
                                                                                                     +
                                                                                                     "n!2")
                                                                                                    NIL
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL)
                                                                   ("2"
                                                                    (EXPAND
                                                                     "pointwise_bounded_below?")
                                                                    (("2"
                                                                      (EXPAND
                                                                       "pointwise?")
                                                                      (("2"
                                                                        (SKOSIMP)
                                                                        (("2"
                                                                          (EXPAND
                                                                           "increasing_nn_simple?")
                                                                          (("2"
                                                                            (EXPAND
                                                                             "nn_simple?")
                                                                            (("2"
                                                                              (HIDE-ALL-BUT
                                                                               (-5
                                                                                1))
                                                                              (("2"
                                                                                (EXPAND
                                                                                 "bounded_below?")
                                                                                (("2"
                                                                                  (INST
                                                                                   +
                                                                                   "0")
                                                                                  (("2"
                                                                                    (SKOSIMP)
                                                                                    (("2"
                                                                                      (INST
                                                                                       -
                                                                                       "x!3")
                                                                                      (("2"
                                                                                        (FLATTEN)
                                                                                        (("2"
                                                                                          (INST
                                                                                           -
                                                                                           "x!2")
                                                                                          NIL
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("2"
                                                (LEMMA "sup_norm_neg"
                                                 ("f" "G(n!1) - w!1(n!2)"))
                                                (("2" (EXPAND "-")
                                                  (("2" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2"
                                              (EXPAND "increasing_nn_simple?")
                                              (("2" (FLATTEN)
                                                (("2" (INST - "n!2")
                                                  (("2" (EXPAND "nn_simple?")
                                                    (("2" (FLATTEN) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (HIDE 2)
                        (("2" (EXPAND "nn_bounded_measurable?")
                          (("2" (ASSERT)
                            (("2" (SKOSIMP)
                              (("2" (INST - "x!1")
                                (("2" (EXPAND "G")
                                  (("2" (HIDE-ALL-BUT (-4 1))
                                    (("2" (GRIND) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("3" (HIDE -2 2)
                (("3" (SKOSIMP*)
                  (("3" (EXPAND "bounded?")
                    (("3" (INST + "n!1+1")
                      (("3" (SKOSIMP)
                        (("3" (INST - "x!1")
                          (("3" (INST -4 "x!1")
                            (("3" (FLATTEN)
                              (("3" (HIDE -3 -4)
                                (("3" (EXPAND "G") (("3" (GRIND) NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (HIDE 2)
              (("2" (SKOSIMP)
                (("2" (EXPAND "bounded_measurable?")
                  (("2" (SPLIT)
                    (("1" (EXPAND "bounded?")
                      (("1" (INST + "n!1+1")
                        (("1" (SKOSIMP)
                          (("1" (INST - "x!1")
                            (("1" (HIDE -1 -2)
                              (("1" (EXPAND "G") (("1" (GRIND) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (EXPAND "G")
                      (("2" (HIDE -1)
                        (("2" (LEMMA "const_measurable" ("c" "1+n!1"))
                          (("2" (EXPAND "const_fun")
                            (("2"
                              (LEMMA "min_measurable"
                               ("g1" "f!1" "g2" "LAMBDA (x: T): 1 + n!1"))
                              (("1" (PROPAX) NIL NIL) ("2" (PROPAX) NIL NIL)
                               ("3" (PROPAX) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (SKOSIMP*)
        (("2" (EXPAND "pointwise_converges_upto?")
          (("2" (FLATTEN)
            (("2" (LEMMA "pointwise_measurable" ("u" "w!1" "f" "f!1"))
              (("2" (ASSERT) NIL NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|sup_norm_converges_to_pointwise_convergence| FORMULA-DECL NIL |sup_norm|
     NIL)
    (|sup_norm_converges_to?| CONST-DECL "bool" |sup_norm| NIL)
    (|sup_norm_neg| FORMULA-DECL NIL |sup_norm| NIL)
    (|bounded_below?| CONST-DECL "bool" |real_fun_preds| |reals|)
    (|pointwise?| CONST-DECL "bool" |pointwise_convergence| NIL)
    (|lower_bound| CONST-DECL "bool" |bound_defs| |reals|)
    (|inf| CONST-DECL "{x | greatest_lower_bound(<=)(x, Sl)}" |bounded_reals|
     |reals|)
    (|below_bounded| CONST-DECL "bool" |bounded_reals| |reals|)
    (|inf_set| TYPE-EQ-DECL NIL |bounded_reals| |reals|)
    (|greatest_lower_bound| CONST-DECL "bool" |bound_defs| |reals|)
    (|inf| CONST-DECL "real" |pointwise_convergence| NIL)
    (|inf_pointwise_le| FORMULA-DECL NIL |pointwise_convergence| NIL)
    (|pointwise_bounded_below| NONEMPTY-TYPE-EQ-DECL NIL
     |pointwise_convergence| NIL)
    (|pointwise_bounded_below?| CONST-DECL "bool" |pointwise_convergence| NIL)
    (|inf_pointwise_convergence_upto| FORMULA-DECL NIL |pointwise_convergence|
     NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (|choose| CONST-DECL "(p)" |sets| NIL)
    (|pointwise_converges_upto?| CONST-DECL "bool" |pointwise_convergence| NIL)
    (|maximum| DEF-DECL "[T -> real]" |real_fun_ops_aux| |reals|)
    (|setofsets| TYPE-EQ-DECL NIL |sets| NIL)
    (|sigma_algebra?| CONST-DECL "bool" |subset_algebra_def| NIL)
    (|sigma_algebra| NONEMPTY-TYPE-EQ-DECL NIL |subset_algebra_def| NIL)
    (|measurable_function?| CONST-DECL "bool" |measure_space_def| NIL)
    (|measurable_function| NONEMPTY-TYPE-EQ-DECL NIL |measure_space_def| NIL)
    (|metric_convergence_def| FORMULA-DECL NIL |metric_space| |metric_space|)
    (|metric_triangle?| CONST-DECL "bool" |metric_def| |metric_space|)
    (|metric_symmetric?| CONST-DECL "bool" |metric_def| |metric_space|)
    (|metric_zero?| CONST-DECL "bool" |metric_def| |metric_space|)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|sup_norm_prop| FORMULA-DECL NIL |sup_norm| NIL)
    (|increasing?| CONST-DECL "bool" |real_fun_preds| |reals|)
    (|metric_induced_topology_is_second_countable| NAME-JUDGEMENT
     "second_countable" |real_topology| |metric_space|)
    (|ball| CONST-DECL "set[T]" |metric_space_def| |metric_space|)
    (|metric_converges_to| CONST-DECL "bool" |metric_space_def| |metric_space|)
    (|metric?| CONST-DECL "bool" |metric_def| |metric_space|)
    (|max| CONST-DECL "[T -> real]" |real_fun_ops_aux| |reals|)
    (|pointwise_convergence?| CONST-DECL "bool" |pointwise_convergence| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|pointwise_increasing?| CONST-DECL "bool" |pointwise_convergence| NIL)
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (|bounded?| CONST-DECL "bool" |sup_norm| NIL)
    (|bounded| NONEMPTY-TYPE-EQ-DECL NIL |sup_norm| NIL)
    (|sup_norm| CONST-DECL "nnreal" |sup_norm| NIL)
    (|min| CONST-DECL "[T -> real]" |real_fun_ops_aux| |reals|)
    (|const_fun| CONST-DECL "[S -> T]" |const_fun_def| |structures|))
   SHOSTAK))
 (|measurable_as_limit_simple_def| 0
  (|measurable_as_limit_simple_def-1| |nil| 3392524986
   ("" (SKOSIMP)
    (("" (SPLIT)
      (("1" (FLATTEN)
        (("1" (REWRITE "measurable_plus_minus")
          (("1" (FLATTEN)
            (("1" (LEMMA "plus_minus_def" ("f" "f!1"))
              (("1" (REPLACE -1 1)
                (("1" (LEMMA "nn_measurable_def" ("f" "minus(f!1)"))
                  (("1" (LEMMA "nn_measurable_def" ("f" "plus(f!1)"))
                    (("1" (ASSERT)
                      (("1" (SPLIT)
                        (("1" (SPLIT)
                          (("1" (SKOSIMP*)
                            (("1" (INST + "lambda n: w!2(n)-w!1(n)")
                              (("1" (EXPAND "pointwise_converges_upto?")
                                (("1" (FLATTEN)
                                  (("1" (HIDE-ALL-BUT (-1 -3 1))
                                    (("1"
                                      (LEMMA "pointwise_convergence_diff"
                                       ("u" "w!2" "v" "w!1" "f0" "plus(f!1)"
                                        "f1" "minus(f!1)"))
                                      (("1" (ASSERT)
                                        (("1" (HIDE -2 -3)
                                          (("1" (EXPAND "-")
                                            (("1" (EXPAND "-")
                                              (("1" (PROPAX) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (SKOSIMP)
                                (("2" (TYPEPRED "w!2")
                                  (("2" (TYPEPRED "w!1")
                                    (("2" (EXPAND "increasing_nn_simple?")
                                      (("2" (FLATTEN)
                                        (("2" (INST - "n!1")
                                          (("2" (INST - "n!1")
                                            (("2" (EXPAND "nn_simple?")
                                              (("2" (FLATTEN)
                                                (("2" (REWRITE "simple_diff")
                                                  NIL NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL))
                          NIL)
                         ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (SKOSIMP*)
        (("2" (LEMMA "pointwise_measurable" ("u" "v!1" "f" "f!1"))
          (("2" (ASSERT) NIL NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|measurable_plus_minus| FORMULA-DECL NIL |measure_space| NIL)
    (T FORMAL-TYPE-DECL NIL |measure_space| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|plus_minus_def| FORMULA-DECL NIL |real_fun_ops_aux| |reals|)
    (|minus| CONST-DECL "[T -> nnreal]" |real_fun_ops_aux| |reals|)
    (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|nn_measurable_def| FORMULA-DECL NIL |measure_space| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL) NIL NIL
    NIL (|increasing_nn_simple| NONEMPTY-TYPE-EQ-DECL NIL |measure_space| NIL)
    (|increasing_nn_simple?| CONST-DECL "bool" |measure_space| NIL)
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (|measurable_function| NONEMPTY-TYPE-EQ-DECL NIL |measure_space_def| NIL)
    (|measurable_function?| CONST-DECL "bool" |measure_space_def| NIL)
    (S FORMAL-CONST-DECL "sigma_algebra" |measure_space| NIL)
    (|sigma_algebra| NONEMPTY-TYPE-EQ-DECL NIL |subset_algebra_def| NIL)
    (|sigma_algebra?| CONST-DECL "bool" |subset_algebra_def| NIL)
    (|setofsets| TYPE-EQ-DECL NIL |sets| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (|simple?| CONST-DECL "bool" |measure_space| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|simple| NONEMPTY-TYPE-EQ-DECL NIL |measure_space| NIL)
    (|pointwise_convergence_diff| FORMULA-DECL NIL |pointwise_convergence| NIL)
    NIL
    (|pointwise_converges_upto?| CONST-DECL "bool" |pointwise_convergence| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|nn_simple?| CONST-DECL "bool" |measure_space| NIL)
    (|simple_diff| JUDGEMENT-TCC NIL |measure_space| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|plus| CONST-DECL "[T -> nnreal]" |real_fun_ops_aux| |reals|)
    (|pointwise_measurable| FORMULA-DECL NIL |measure_space| NIL))
   SHOSTAK)))

