(measure_space_def
 (measurable_set_TCC1 0
  (measurable_set_TCC1-1 nil 3357887231
   ("" (expand "measurable_set?") (("" (propax) nil nil)) nil)
   ((measurable_set? const-decl "bool" measure_space_def nil)
    (subset_algebra_emptyset name-judgement "(S)" measure_space_def
     nil)
    (finite_emptyset name-judgement "finite_set" countable_setofsets
     sets_aux)
    (finite_emptyset name-judgement "finite_set" countable_props
     sets_aux)
    (finite_emptyset name-judgement "finite_set" finite_sets nil))
   nil
   (measurable_set subtype "sets[measure_space_def.T].emptyset"
    "measurable_set")))
 (measurable_emptyset 0
  (measurable_emptyset-1 nil 3391152936
   ("" (expand "measurable_set?") (("" (propax) nil nil)) nil)
   ((measurable_set? const-decl "bool" measure_space_def nil)
    (subset_algebra_emptyset name-judgement "(S)" measure_space_def
     nil)
    (finite_emptyset name-judgement "finite_set" countable_setofsets
     sets_aux)
    (finite_emptyset name-judgement "finite_set" countable_props
     sets_aux)
    (finite_emptyset name-judgement "finite_set" finite_sets nil))
   nil
   (measurable_emptyset subtype "sets[measure_space_def.T].emptyset"
    "measurable_set")))
 (measurable_fullset 0
  (measurable_fullset-1 nil 3391152936
   ("" (expand "measurable_set?") (("" (propax) nil nil)) nil)
   ((measurable_set? const-decl "bool" measure_space_def nil)
    (subset_algebra_fullset name-judgement "(S)" measure_space_def
     nil))
   nil
   (measurable_fullset subtype "sets[measure_space_def.T].fullset"
    "measurable_set")))
 (measurable_complement 0
  (measurable_complement-1 nil 3509948250
   ("" (judgement-tcc)
    (("" (typepred "S")
      (("" (expand "sigma_algebra?")
        (("" (expand "subset_algebra_complement?")
          (("" (flatten)
            (("" (inst - "a!1") (("" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((S formal-const-decl "sigma_algebra" measure_space_def nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (subset_algebra_complement? const-decl "bool" subset_algebra_def
     nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (finite_emptyset name-judgement "finite_set" countable_props
     sets_aux)
    (finite_emptyset name-judgement "finite_set" countable_setofsets
     sets_aux)
    (measurable_emptyset name-judgement "measurable_set"
     measure_space_def nil)
    (subset_algebra_emptyset name-judgement "(S)" measure_space_def
     nil)
    (subset_algebra_empty? const-decl "bool" subset_algebra_def nil)
    (member const-decl "bool" sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil measure_space_def nil)
    (set type-eq-decl nil sets nil)
    (measurable_set nonempty-type-eq-decl nil measure_space_def nil)
    (measurable_set? const-decl "bool" measure_space_def nil))
   nil
   (measurable_complement subtype
    "sets[measure_space_def.T].complement(measure_space_def.a)"
    "measurable_set")))
 (measurable_union 0
  (measurable_union-1 nil 3509948250
   ("" (skosimp)
    (("" (typepred "S")
      (("" (lemma "sigma_union_implies_subset_union[T]" ("S" "S"))
        (("" (expand "sigma_algebra?")
          (("" (flatten)
            (("" (expand "subset_algebra_union?")
              (("" (split)
                (("1" (inst - "a!1" "b!1")
                  (("1" (assert)
                    (("1" (expand "measurable_set?")
                      (("1" (propax) nil nil)) nil))
                    nil)
                   ("2" (typepred "b!1")
                    (("2" (expand "measurable_set?")
                      (("2" (propax) nil nil)) nil))
                    nil)
                   ("3" (typepred "a!1")
                    (("3" (expand "measurable_set?")
                      (("3" (propax) nil nil)) nil))
                    nil))
                  nil)
                 ("2" (propax) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((S formal-const-decl "sigma_algebra" measure_space_def nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (T formal-type-decl nil measure_space_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (subset_algebra_union? const-decl "bool" subset_algebra_def nil)
    (a!1 skolem-const-decl "measurable_set" measure_space_def nil)
    (measurable_set nonempty-type-eq-decl nil measure_space_def nil)
    (measurable_set? const-decl "bool" measure_space_def nil)
    (set type-eq-decl nil sets nil)
    (b!1 skolem-const-decl "measurable_set" measure_space_def nil)
    (member const-decl "bool" sets nil)
    (sigma_union_implies_subset_union formula-decl nil
     subset_algebra_def nil))
   nil
   (measurable_union subtype
    "sets[measure_space_def.T].union(measure_space_def.a, measure_space_def.b)"
    "measurable_set")))
 (measurable_intersection 0
  (measurable_intersection-1 nil 3509948250
   ("" (skosimp)
    (("" (typepred "a!1")
      (("" (typepred "b!1")
        (("" (lemma "measurable_complement" ("a" "a!1"))
          (("" (lemma "measurable_complement" ("a" "b!1"))
            ((""
              (lemma "measurable_union"
               ("a" "complement[T](a!1)" "b" "complement[T](b!1)"))
              (("" (rewrite "demorgan2" -1 :dir rl)
                ((""
                  (lemma "measurable_complement"
                   ("a" "complement(intersection(a!1, b!1))"))
                  (("1" (rewrite "complement_complement") nil nil)
                   ("2" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((measurable_set nonempty-type-eq-decl nil measure_space_def nil)
    (measurable_set? const-decl "bool" measure_space_def nil)
    (set type-eq-decl nil sets nil)
    (T formal-type-decl nil measure_space_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (measurable_complement judgement-tcc nil measure_space_def nil)
    (measurable_complement application-judgement "measurable_set"
     measure_space_def nil)
    (measurable_union judgement-tcc nil measure_space_def nil)
    (complement const-decl "set" sets nil)
    (intersection const-decl "set" sets nil)
    (complement_complement formula-decl nil sets_lemmas nil)
    (demorgan2 formula-decl nil sets_lemmas nil))
   nil
   (measurable_intersection subtype
    "sets[measure_space_def.T].intersection(measure_space_def.a, measure_space_def.b)"
    "measurable_set")))
 (measurable_difference 0
  (measurable_difference-1 nil 3509948250
   ("" (skosimp)
    (("" (rewrite "difference_intersection")
      (("" (typepred "a!1")
        (("" (typepred "b!1")
          (("" (lemma "measurable_complement" ("a" "b!1"))
            ((""
              (lemma "measurable_intersection"
               ("a" "a!1" "b" "complement(b!1)"))
              (("" (propax) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((difference_intersection formula-decl nil sets_lemmas nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (measurable_set? const-decl "bool" measure_space_def nil)
    (measurable_set nonempty-type-eq-decl nil measure_space_def nil)
    (T formal-type-decl nil measure_space_def nil)
    (measurable_complement application-judgement "measurable_set"
     measure_space_def nil)
    (measurable_intersection application-judgement "measurable_set"
     measure_space_def nil)
    (measurable_intersection judgement-tcc nil measure_space_def nil)
    (complement const-decl "set" sets nil)
    (measurable_complement judgement-tcc nil measure_space_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil))
   nil
   (measurable_difference subtype
    "sets[measure_space_def.T].difference(measure_space_def.a, measure_space_def.b)"
    "measurable_set")))
 (measurable_Union_TCC1 0
  (measurable_Union_TCC1-1 nil 3391152936 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil measure_space_def nil)
    (setof type-eq-decl nil defined_types nil)
    (setofsets type-eq-decl nil sets nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (S formal-const-decl "sigma_algebra" measure_space_def nil)
    (set type-eq-decl nil sets nil)
    (is_countable const-decl "bool" countability sets_aux)
    (countable_set nonempty-type-eq-decl nil countability sets_aux)
    (injective? const-decl "bool" functions nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil))
   nil
   (measurable_Union_ subtype "measure_space_def.M" "setofsets[T]")))
 (measurable_Union 0
  (measurable_Union-1 nil 3391152936
   ("" (skosimp)
    (("" (typepred "M!1")
      (("" (typepred "S")
        (("" (expand "sigma_algebra?")
          (("" (flatten)
            (("" (expand "measurable_set?")
              (("" (expand "sigma_algebra_union?")
                (("" (inst - "M!1")
                  (("" (split)
                    (("1" (expand "extend")
                      (("1" (expand "Union")
                        (("1"
                          (case-replace "{x: T |
                EXISTS (a:
                          (LAMBDA (t: setof[T]):
                             IF (S)(t) THEN M!1(t) ELSE FALSE ENDIF)):
                  a(x)}={x: T | EXISTS (a: (M!1)): a(x)}")
                          (("1" (assert) nil nil)
                           ("2" (hide-all-but 1)
                            (("2" (apply-extensionality :hide? t)
                              (("2"
                                (case-replace
                                 "EXISTS (a: (M!1)): a(x!1)")
                                (("1"
                                  (skosimp)
                                  (("1"
                                    (typepred "a!1")
                                    (("1" (inst + "a!1") nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (replace 1 2)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (skosimp)
                                      (("2"
                                        (inst + "a!1")
                                        (("2"
                                          (typepred "a!1")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide-all-but (-3 1))
                      (("2" (expand "extend")
                        (("2" (expand "is_countable")
                          (("2" (skolem!)
                            (("2" (typepred "f!1")
                              (("2"
                                (inst + "f!1")
                                (("2"
                                  (split)
                                  (("1"
                                    (skosimp)
                                    (("1"
                                      (hide -1)
                                      (("1" (grind) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand "injective?")
                                    (("2"
                                      (skosimp*)
                                      (("2"
                                        (inst - "x1!1" "x2!1")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (skosimp)
                      (("3" (typepred "x!1")
                        (("3" (expand "extend")
                          (("3" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((countable_set nonempty-type-eq-decl nil countability sets_aux)
    (is_countable const-decl "bool" countability sets_aux)
    (set type-eq-decl nil sets nil)
    (S formal-const-decl "sigma_algebra" measure_space_def nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (T formal-type-decl nil measure_space_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (measurable_set? const-decl "bool" measure_space_def nil)
    (extend const-decl "R" extend nil)
    (FALSE const-decl "bool" booleans nil)
    (Union_surjective name-judgement
     "(surjective?[setofsets[T], set[T]])" sets_lemmas nil)
    (injective? const-decl "bool" functions nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (f!1 skolem-const-decl "(injective?[(M!1), nat])" measure_space_def
     nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (member const-decl "bool" sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (a!1 skolem-const-decl
     "(LAMBDA (t: setof[T]): IF (S)(t) THEN M!1(t) ELSE FALSE ENDIF)"
     measure_space_def nil)
    (M!1 skolem-const-decl "countable_set[(S)]" measure_space_def nil)
    (Union const-decl "set" sets nil)
    (sigma_algebra_union? const-decl "bool" subset_algebra_def nil))
   nil
   (measurable_Union subtype
    "sets[measure_space_def.T].Union(measure_space_def.M)"
    "measurable_set")))
 (measurable_Intersection 0
  (measurable_Intersection-1 nil 3391152936
   ("" (skosimp)
    (("" (name "MC" "{a:(S)| M!1(complement(a))}")
      (("" (case "is_countable[(S)](MC)")
        (("1" (lemma "measurable_Union" ("M" "MC"))
          (("1" (expand "Union")
            (("1"
              (lemma "measurable_complement"
               ("a" "{x: T | EXISTS (a: (MC)): a(x)}"))
              (("1" (expand "Intersection")
                (("1"
                  (case-replace
                   "complement[T]({x: T | EXISTS (a: (MC)): a(x)})={x: T | FORALL (a: (M!1)): a(x)}")
                  (("1" (hide-all-but 1)
                    (("1" (apply-extensionality :hide? t)
                      (("1" (case-replace "FORALL (a: (M!1)): a(x!1)")
                        (("1"
                          (case-replace "FORALL (a: (M!1)): a(x!1)")
                          (("1" (expand "complement")
                            (("1" (expand "member")
                              (("1"
                                (skosimp)
                                (("1"
                                  (typepred "a!1")
                                  (("1"
                                    (expand "MC")
                                    (("1"
                                      (inst - "complement(a!1)")
                                      (("1"
                                        (expand "complement")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (replace 1 2)
                          (("2" (assert)
                            (("2" (skosimp)
                              (("2"
                                (expand "complement")
                                (("2"
                                  (expand "member")
                                  (("2"
                                    (inst + "complement(a!1)")
                                    (("1"
                                      (expand "complement")
                                      (("1" (assert) nil nil))
                                      nil)
                                     ("2"
                                      (expand "MC")
                                      (("2"
                                        (rewrite
                                         "complement_complement")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (propax) nil nil))
              nil))
            nil)
           ("2" (propax) nil nil))
          nil)
         ("2" (hide-all-but 1)
          (("2" (typepred "M!1")
            (("2" (expand "is_countable")
              (("2" (skosimp)
                (("2" (typepred "f!1")
                  (("2" (inst + "lambda (x:(MC)): f!1(complement(x))")
                    (("1" (expand "injective?")
                      (("1" (skosimp)
                        (("1"
                          (inst - "complement[T](x1!1)"
                           "complement[T](x2!1)")
                          (("1" (rewrite "complement_equal")
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (skosimp)
                      (("2" (typepred "x!1")
                        (("2" (expand "MC") (("2" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((complement const-decl "set" sets nil)
    (countable_set nonempty-type-eq-decl nil countability sets_aux)
    (is_countable const-decl "bool" countability sets_aux)
    (set type-eq-decl nil sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (S formal-const-decl "sigma_algebra" measure_space_def nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil measure_space_def nil)
    (subset_algebra_complement application-judgement "(S)"
     measure_space_def nil)
    (injective? const-decl "bool" functions nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (complement_equal formula-decl nil sets_lemmas nil)
    (f!1 skolem-const-decl "(injective?[(M!1), nat])" measure_space_def
     nil)
    (measurable_Union judgement-tcc nil measure_space_def nil)
    (measurable_complement judgement-tcc nil measure_space_def nil)
    (measurable_set? const-decl "bool" measure_space_def nil)
    (measurable_set nonempty-type-eq-decl nil measure_space_def nil)
    (complement_complement formula-decl nil sets_lemmas nil)
    (a!1 skolem-const-decl "(M!1)" measure_space_def nil)
    (member const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (M!1 skolem-const-decl "countable_set[(S)]" measure_space_def nil)
    (a!1 skolem-const-decl "(MC)" measure_space_def nil)
    (MC skolem-const-decl "[(S) -> bool]" measure_space_def nil)
    (Intersection const-decl "set" sets nil)
    (Union const-decl "set" sets nil))
   nil
   (measurable_Intersection subtype
    "sets[measure_space_def.T].Intersection(measure_space_def.M)"
    "measurable_set")))
 (measurable_IUnion 0
  (measurable_IUnion-1 nil 3509948250
   ("" (skosimp)
    (("" (lemma "measurable_Union" ("M" "image(SS!1)(fullset[nat])"))
      (("1" (expand "fullset")
        (("1" (expand "image")
          (("1" (expand "image")
            (("1" (expand "Union")
              (("1"
                (case-replace "{x: T |
                         EXISTS (a:
                                   ({y: measurable_set
                                     |
                                     EXISTS
                                     (x_1: ({x: nat | TRUE})):
                                     y = SS!1(x_1)})):
                           a(x)}=IUnion[nat, T](SS!1)")
                (("1" (apply-extensionality :hide? t)
                  (("1" (hide -1 2)
                    (("1" (case-replace "IUnion[nat, T](SS!1)(x!1)")
                      (("1" (expand "IUnion")
                        (("1" (skosimp)
                          (("1" (inst + "SS!1(i!1)")
                            (("1" (inst + "i!1") nil nil)) nil))
                          nil))
                        nil)
                       ("2" (replace 1 2)
                        (("2" (assert)
                          (("2" (skosimp)
                            (("2" (typepred "a!1")
                              (("2"
                                (skosimp)
                                (("2"
                                  (expand "IUnion")
                                  (("2"
                                    (inst + "x!2")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (split)
          (("1" (expand "measurable_set?") (("1" (propax) nil nil))
            nil)
           ("2"
            (lemma "countable_image[nat,measurable_set]"
             ("S" "fullset[nat]" "f" "SS!1"))
            (("2" (split)
              (("1" (assert)
                (("1" (expand "fullset")
                  (("1" (expand "image")
                    (("1" (expand "image")
                      (("1" (expand "is_countable")
                        (("1" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (expand "fullset")
                  (("2" (expand "is_countable")
                    (("2" (inst + "lambda (n:nat): n")
                      (("2" (expand "injective?")
                        (("2" (skosimp) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fullset const-decl "set" sets nil)
    (sequence type-eq-decl nil sequences nil)
    (image const-decl "set[R]" function_image nil)
    (measurable_set nonempty-type-eq-decl nil measure_space_def nil)
    (measurable_set? const-decl "bool" measure_space_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (countable_set nonempty-type-eq-decl nil countability sets_aux)
    (is_countable const-decl "bool" countability sets_aux)
    (set type-eq-decl nil sets nil)
    (S formal-const-decl "sigma_algebra" measure_space_def nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil measure_space_def nil)
    (measurable_Union judgement-tcc nil measure_space_def nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Union const-decl "set" sets nil)
    (i!1 skolem-const-decl "nat" measure_space_def nil)
    (SS!1 skolem-const-decl "sequence[measurable_set]"
     measure_space_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (TRUE const-decl "bool" booleans nil)
    (IUnion const-decl "set[T]" indexed_sets nil)
    (image const-decl "set[R]" function_image nil)
    (injective? const-decl "bool" functions nil)
    (countable_image formula-decl nil countable_image sets_aux))
   nil
   (measurable_IUnion subtype
    "indexed_sets[nat, measure_space_def.T].IUnion(measure_space_def.SS)"
    "measurable_set")))
 (measurable_IIntersection 0
  (measurable_IIntersection-1 nil 3509948250
   ("" (skosimp)
    (("" (lemma "IDemorgan2[nat,T]" ("A" "SS!1"))
      ((""
        (case "forall (n:nat): measurable_set?(IComplement[nat, T](SS!1)(n))")
        (("1" (lemma "measurable_IUnion" ("SS" "IComplement(SS!1)"))
          (("1" (replace -3 -1 rl)
            (("1"
              (lemma "measurable_complement"
               ("a" "complement(IIntersection(SS!1))"))
              (("1" (rewrite "complement_complement") nil nil)
               ("2" (propax) nil nil))
              nil))
            nil)
           ("2" (propax) nil nil))
          nil)
         ("2" (hide-all-but 1)
          (("2" (skosimp)
            (("2" (expand "IComplement") (("2" (propax) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((T formal-type-decl nil measure_space_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (sequence type-eq-decl nil sequences nil)
    (measurable_set nonempty-type-eq-decl nil measure_space_def nil)
    (measurable_set? const-decl "bool" measure_space_def nil)
    (set type-eq-decl nil sets nil)
    (IDemorgan2 formula-decl nil indexed_sets_aux sets_aux)
    (measurable_complement application-judgement "measurable_set"
     measure_space_def nil)
    (measurable_IUnion judgement-tcc nil measure_space_def nil)
    (IIntersection const-decl "set[T]" indexed_sets nil)
    (complement const-decl "set" sets nil)
    (measurable_complement judgement-tcc nil measure_space_def nil)
    (complement_complement formula-decl nil sets_lemmas nil)
    (IComplement const-decl "set[T]" indexed_sets_aux sets_aux))
   nil
   (measurable_IIntersection subtype
    "indexed_sets[nat, measure_space_def.T].IIntersection(measure_space_def.SS)"
    "measurable_set")))
 (measurable_function_TCC1 0
  (measurable_function_TCC1-1 nil 3357887231
   ("" (expand "measurable_function?")
    (("" (skosimp)
      (("" (expand "measurable_set?")
        (("" (expand "inverse_image")
          (("" (expand "member")
            (("" (typepred "B!1")
              (("" (case-replace "B!1(0)")
                (("1" (lemma "sigma_algebra_fullset[T,(S)]")
                  (("1" (expand "member")
                    (("1" (expand "fullset") (("1" (propax) nil nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (lemma "sigma_algebra_emptyset[T,(S)]")
                    (("2" (expand "member")
                      (("2" (expand "emptyset")
                        (("2" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((inverse_image const-decl "set[D]" function_image nil)
    (borel nonempty-type-eq-decl nil borel nil)
    (borel? const-decl "sigma_algebra" borel nil)
    (metric_induced_topology const-decl "setofsets[T]" metric_space_def
     metric_space)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (emptyset const-decl "set" sets nil)
    (sigma_algebra_emptyset formula-decl nil sigma_algebra nil)
    (sigma_algebra_fullset formula-decl nil sigma_algebra nil)
    (T formal-type-decl nil measure_space_def nil)
    (S formal-const-decl "sigma_algebra" measure_space_def nil)
    (fullset const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (measurable_set? const-decl "bool" measure_space_def nil)
    (measurable_function? const-decl "bool" measure_space_def nil))
   nil
   (measurable_function subtype "(LAMBDA x: 0)"
    "measurable_function")))
 (constant_is_measurable 0
  (constant_is_measurable-1 nil 3357888488
   ("" (skosimp)
    (("" (expand "measurable_function?")
      (("" (skosimp)
        (("" (expand "inverse_image")
          (("" (expand "measurable_set?")
            (("" (expand "member")
              (("" (typepred "x!1")
                (("" (expand "constant?")
                  (("" (skosimp)
                    (("" (replace -1)
                      (("" (hide -1)
                        (("" (expand "const_fun")
                          (("" (lemma "sigma_algebra_emptyset[T,S]")
                            (("" (lemma "sigma_algebra_fullset[T,S]")
                              ((""
                                (expand "fullset")
                                ((""
                                  (expand "emptyset")
                                  ((""
                                    (expand "member")
                                    ((""
                                      (case-replace "B!1(a!1)")
                                      (("" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((measurable_function? const-decl "bool" measure_space_def nil)
    (inverse_image const-decl "set[D]" function_image nil)
    (member const-decl "bool" sets nil)
    (const_fun const-decl "[S -> T]" const_fun_def structures)
    (sigma_algebra_fullset formula-decl nil sigma_algebra nil)
    (emptyset const-decl "set" sets nil)
    (borel nonempty-type-eq-decl nil borel nil)
    (borel? const-decl "sigma_algebra" borel nil)
    (metric_induced_topology const-decl "setofsets[T]" metric_space_def
     metric_space)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (fullset const-decl "set" sets nil)
    (S formal-const-decl "sigma_algebra" measure_space_def nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (sigma_algebra_emptyset formula-decl nil sigma_algebra nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil measure_space_def nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (constant? const-decl "bool" const_fun_def structures)
    (measurable_set? const-decl "bool" measure_space_def nil))
   nil
   (constant_is_measurable subtype "measure_space_def.x"
    "measurable_function")))
 (measurable_def 0
  (measurable_def-1 nil 3357903823
   ("" (skosimp*)
    (("" (split)
      (("1" (flatten)
        (("1" (skosimp)
          (("1" (typepred "X!1")
            (("1" (expand "measurable_function?")
              (("1"
                (lemma "generated_sigma_algebra_subset1" ("X" "U!1"))
                (("1" (replace -4 -1 rl)
                  (("1" (expand "subset?")
                    (("1" (inst - "X!1")
                      (("1" (expand "member")
                        (("1" (inst - "X!1")
                          (("1" (expand "measurable_set?")
                            (("1" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skosimp*)
        (("2" (name "C" "{Y| S(inverse_image(f!1,Y))}")
          (("2" (case "subset?[set[real]](U!1,C)")
            (("1" (case "sigma_algebra?[real](C)")
              (("1"
                (lemma "generated_sigma_algebra_subset2"
                 ("X" "U!1" "Y" "C"))
                (("1" (assert)
                  (("1" (expand "measurable_function?")
                    (("1" (skosimp)
                      (("1" (typepred "B!1")
                        (("1" (expand "measurable_set?")
                          (("1" (replace -7 -1)
                            (("1" (hide -7)
                              (("1"
                                (expand "generated_sigma_algebra" -1)
                                (("1"
                                  (expand "Intersection")
                                  (("1"
                                    (inst - "C")
                                    (("1"
                                      (expand "C")
                                      (("1" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2 -2 -4)
                (("2" (typepred "S")
                  (("2" (expand "sigma_algebra?")
                    (("2" (flatten)
                      (("2" (split)
                        (("1" (expand "subset_algebra_empty?")
                          (("1" (expand "member")
                            (("1" (expand "C")
                              (("1"
                                (lemma
                                 "extensionality"
                                 ("f"
                                  "emptyset[T]"
                                  "g"
                                  "inverse_image(f!1, emptyset[real])"))
                                (("1"
                                  (split -1)
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (hide-all-but 1)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "subset_algebra_complement?")
                          (("2" (skosimp)
                            (("2" (expand "member")
                              (("2"
                                (expand "C")
                                (("2"
                                  (typepred "x!1")
                                  (("2"
                                    (expand "C")
                                    (("2"
                                      (inst
                                       -
                                       "inverse_image[T,real](f!1,x!1)")
                                      (("2"
                                        (lemma
                                         "extensionality"
                                         ("f"
                                          "complement(inverse_image[T,real](f!1, x!1))"
                                          "g"
                                          "inverse_image(f!1, complement[real](x!1))"))
                                        (("2"
                                          (split -1)
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (hide-all-but 1)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (expand "sigma_algebra_union?")
                          (("3" (skosimp)
                            (("3" (expand "member")
                              (("3"
                                (expand "C")
                                (("3"
                                  (name
                                   "XX"
                                   "{W:set[T] | EXISTS (x:(X!1)): W = inverse_image(f!1, x)}")
                                  (("3"
                                    (inst -6 "XX")
                                    (("3"
                                      (split -6)
                                      (("1"
                                        (lemma
                                         "extensionality"
                                         ("f"
                                          "Union(XX)"
                                          "g"
                                          "inverse_image(f!1, Union(X!1))"))
                                        (("1"
                                          (split -1)
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (hide-all-but 1)
                                            (("2"
                                              (skosimp)
                                              (("2"
                                                (expand "XX")
                                                (("2"
                                                  (expand
                                                   "inverse_image")
                                                  (("2"
                                                    (expand "member")
                                                    (("2"
                                                      (expand "Union")
                                                      (("2"
                                                        (case-replace
                                                         "EXISTS (a: (X!1)): a(f!1(x!1))")
                                                        (("1"
                                                          (skosimp)
                                                          (("1"
                                                            (inst
                                                             +
                                                             "lambda x: a!1(f!1(x))")
                                                            (("1"
                                                              (inst
                                                               +
                                                               "a!1")
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (replace 1 2)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (skosimp)
                                                              (("2"
                                                                (typepred
                                                                 "a!1")
                                                                (("2"
                                                                  (skosimp)
                                                                  (("2"
                                                                    (replace
                                                                     -1)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (inst
                                                                         +
                                                                         "x!2")
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but (-2 1))
                                        (("2"
                                          (expand "XX")
                                          (("2"
                                            (lemma
                                             "extensionality"
                                             ("f"
                                              "{W: set[T] |
                      EXISTS (x: (X!1)): W = inverse_image(f!1, x)}"
                                              "g"
                                              "image(inverse_image(f!1),X!1)"))
                                            (("2"
                                              (split -1)
                                              (("1"
                                                (replace -1)
                                                (("1"
                                                  (hide -1)
                                                  (("1"
                                                    (lemma
                                                     "countable_image[set[real],set[T]]"
                                                     ("S"
                                                      "X!1"
                                                      "f"
                                                      "inverse_image(f!1)"))
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "image"
                                                         -1)
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but 1)
                                                (("2"
                                                  (skosimp)
                                                  (("2"
                                                    (expand "image")
                                                    (("2"
                                                      (expand
                                                       "inverse_image")
                                                      (("2"
                                                        (expand
                                                         "inverse_image")
                                                        (("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (skosimp)
                                        (("3"
                                          (typepred "x!1")
                                          (("3"
                                            (expand "XX")
                                            (("3"
                                              (skosimp)
                                              (("3"
                                                (typepred "x!2")
                                                (("3"
                                                  (inst -5 "x!2")
                                                  (("3"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (expand "subset?")
                (("2" (skosimp)
                  (("2" (expand "member")
                    (("2" (expand "C") (("2" (inst -3 "x!1") nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((measurable_function? const-decl "bool" measure_space_def nil)
    (X!1 skolem-const-decl "(U!1)" measure_space_def nil)
    (U!1 skolem-const-decl "setofsets[real]" measure_space_def nil)
    (borel? const-decl "sigma_algebra" borel nil)
    (metric_induced_topology const-decl "setofsets[T]" metric_space_def
     metric_space)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (borel nonempty-type-eq-decl nil borel nil)
    (measurable_set? const-decl "bool" measure_space_def nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (generated_sigma_algebra_subset1 formula-decl nil
     subset_algebra_def nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (setof type-eq-decl nil defined_types nil)
    (setofsets type-eq-decl nil sets nil)
    (inverse_image const-decl "set[D]" function_image nil)
    (S formal-const-decl "sigma_algebra" measure_space_def nil)
    (T formal-type-decl nil measure_space_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (x!1 skolem-const-decl "set[real]" measure_space_def nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (Intersection const-decl "set" sets nil)
    (C skolem-const-decl "[set[real] -> bool]" measure_space_def nil)
    (generated_sigma_algebra const-decl "sigma_algebra"
     subset_algebra_def nil)
    (generated_sigma_algebra_subset2 formula-decl nil
     subset_algebra_def nil)
    (sigma_algebra_union? const-decl "bool" subset_algebra_def nil)
    (Union_surjective name-judgement
     "(surjective?[setofsets[T], set[T]])" sets_lemmas nil)
    (a!1 skolem-const-decl "(X!1)" measure_space_def nil)
    (X!1 skolem-const-decl "setofsets[real]" measure_space_def nil)
    (XX skolem-const-decl "[set[T] -> boolean]" measure_space_def nil)
    (Union const-decl "set" sets nil)
    (image const-decl "set[R]" function_image nil)
    (countable_image formula-decl nil countable_image sets_aux)
    (inverse_image const-decl "set[D]" function_image nil)
    (image const-decl "set[R]" function_image nil)
    (subset_algebra_complement? const-decl "bool" subset_algebra_def
     nil)
    (subset_algebra_complement application-judgement "(S)"
     measure_space_def nil)
    (f!1 skolem-const-decl "[T -> real]" measure_space_def nil)
    (x!1 skolem-const-decl "(C)" measure_space_def nil)
    (complement const-decl "set" sets nil)
    (subset_algebra_empty? const-decl "bool" subset_algebra_def nil)
    (measurable_emptyset name-judgement "measurable_set"
     measure_space_def nil)
    (subset_algebra_emptyset name-judgement "(S)" measure_space_def
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (emptyset const-decl "set" sets nil)
    (extensionality formula-decl nil functions nil)
    (emptyset_is_compact name-judgement "compact" real_topology
     metric_space)
    (emptyset_is_clopen name-judgement "clopen" real_topology
     metric_space)
    (subset_algebra_emptyset name-judgement "(S)" measure_space_def
     nil)
    (finite_emptyset name-judgement "finite_set" countable_setofsets
     sets_aux)
    (finite_emptyset name-judgement "finite_set" countable_props
     sets_aux)
    (finite_emptyset name-judgement "finite_set" finite_sets nil))
   shostak))
 (measurable_def2 0
  (measurable_def2-1 nil 3357907013
   ("" (skosimp)
    ((""
      (lemma "measurable_def" ("f" "f!1" "U" "fullset[open_interval]"))
      (("" (lemma "borel_generated_by_open_interval")
        (("" (replace -1 -2 rl)
          (("" (replace -2 1)
            (("" (hide-all-but 1)
              (("" (split)
                (("1" (skosimp*)
                  (("1" (inst - "i!1")
                    (("1" (expand "fullset")
                      (("1" (expand "extend")
                        (("1" (prop)
                          (("1" (typepred "i!1")
                            (("1" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (skosimp*)
                  (("2" (typepred "X!1")
                    (("2" (expand "fullset")
                      (("2" (expand "extend")
                        (("2" (prop) (("2" (inst - "X!1") nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((T formal-type-decl nil measure_space_def nil)
    (fullset const-decl "set" sets nil)
    (extend const-decl "R" extend nil)
    (FALSE const-decl "bool" booleans nil)
    (open_interval nonempty-type-eq-decl nil real_topology
     metric_space)
    (ball const-decl "set[T]" metric_space_def metric_space)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil) (set type-eq-decl nil sets nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measurable_def formula-decl nil measure_space_def nil)
    (X!1 skolem-const-decl
     "(extend[setof[real], open_interval, bool, FALSE](fullset[open_interval]))"
     measure_space_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (i!1 skolem-const-decl "open_interval" measure_space_def nil)
    (borel_generated_by_open_interval formula-decl nil real_borel nil))
   shostak))
 (measurable_gt 0
  (measurable_gt-1 nil 3357918570
   ("" (skosimp)
    (("" (rewrite "measurable_def2")
      (("" (split)
        (("1" (skosimp*)
          (("1" (typepred "S")
            (("1" (name "F" "lambda (pn:posnat): ball(c!1+pn,1)")
              (("1"
                (name "VV"
                      "image[posnat,set[real]](F,fullset[posnat])")
                (("1"
                  (case-replace
                   "({z | f!1(z) > c!1}) = inverse_image(f!1, Union(VV))")
                  (("1" (hide -1)
                    (("1" (rewrite "inverse_image_Union")
                      (("1"
                        (case-replace
                         "{y: set[T] | EXISTS (x: (VV)): y = inverse_image(f!1, x)} = image(inverse_image(f!1),VV)")
                        (("1" (hide -1)
                          (("1"
                            (lemma "countable_image[posnat, set[real]]"
                             ("f" "F" "S" "fullset[posnat]"))
                            (("1" (split -1)
                              (("1"
                                (expand "image" -1)
                                (("1"
                                  (replace -2)
                                  (("1"
                                    (lemma
                                     "countable_image[set[real],set[T]]"
                                     ("f" "inverse_image(f!1)"))
                                    (("1"
                                      (inst - "VV")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "image" -1)
                                          (("1"
                                            (expand "sigma_algebra?")
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (expand
                                                 "sigma_algebra_union?")
                                                (("1"
                                                  (inst
                                                   -
                                                   "image(inverse_image(f!1), VV)")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (skosimp)
                                                      (("1"
                                                        (typepred
                                                         "x!1")
                                                        (("1"
                                                          (expand
                                                           "image"
                                                           -1)
                                                          (("1"
                                                            (expand
                                                             "inverse_image")
                                                            (("1"
                                                              (expand
                                                               "inverse_image")
                                                              (("1"
                                                                (expand
                                                                 "member")
                                                                (("1"
                                                                  (skosimp)
                                                                  (("1"
                                                                    (typepred
                                                                     "x!2")
                                                                    (("1"
                                                                      (expand
                                                                       "VV")
                                                                      (("1"
                                                                        (expand
                                                                         "fullset")
                                                                        (("1"
                                                                          (expand
                                                                           "image")
                                                                          (("1"
                                                                            (skosimp)
                                                                            (("1"
                                                                              (replace
                                                                               -1)
                                                                              (("1"
                                                                                (expand
                                                                                 "F"
                                                                                 -2)
                                                                                (("1"
                                                                                  (inst
                                                                                   -8
                                                                                   "ball(c!1 + x!3, 1)")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (inst
                                                                                     +
                                                                                     "c!1+x!3"
                                                                                     "1")
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide-all-but 1)
                                (("2"
                                  (expand "fullset")
                                  (("2"
                                    (expand "is_countable")
                                    (("2"
                                      (inst + "lambda (n:posnat): n-1")
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide-all-but 1)
                          (("2" (apply-extensionality :hide? t)
                            (("2" (expand "VV")
                              (("2"
                                (expand "fullset")
                                (("2"
                                  (expand "inverse_image")
                                  (("2"
                                    (expand "member")
                                    (("2"
                                      (expand "image")
                                      (("2"
                                        (expand "inverse_image")
                                        (("2"
                                          (expand "member")
                                          (("2"
                                            (case-replace
                                             "(EXISTS (x: (VV)): x!1 = ({x_1: T | x(f!1(x_1))}))")
                                            (("1"
                                              (skosimp)
                                              (("1"
                                                (typepred "x!2")
                                                (("1"
                                                  (expand "VV")
                                                  (("1"
                                                    (expand "fullset")
                                                    (("1"
                                                      (expand "image")
                                                      (("1"
                                                        (skosimp)
                                                        (("1"
                                                          (replace -1)
                                                          (("1"
                                                            (inst
                                                             +
                                                             "F(x!3)")
                                                            (("1"
                                                              (inst
                                                               +
                                                               "x!3")
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (replace 1 2)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (skosimp)
                                                  (("2"
                                                    (typepred "x!2")
                                                    (("2"
                                                      (skosimp)
                                                      (("2"
                                                        (inst + "x!2")
                                                        (("2"
                                                          (expand "VV")
                                                          (("2"
                                                            (expand
                                                             "fullset")
                                                            (("2"
                                                              (expand
                                                               "image")
                                                              (("2"
                                                                (inst
                                                                 +
                                                                 "x!3")
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide-all-but 1)
                    (("2" (apply-extensionality :hide? t)
                      (("2" (expand "VV")
                        (("2" (expand "fullset")
                          (("2" (expand "image")
                            (("2" (expand "Union")
                              (("2"
                                (expand "inverse_image")
                                (("2"
                                  (expand "member")
                                  (("2"
                                    (case-replace "f!1(x!1) > c!1")
                                    (("1"
                                      (name
                                       "PN"
                                       "ceiling(f!1(x!1)-c!1)")
                                      (("1"
                                        (typepred
                                         "ceiling(f!1(x!1) - c!1)")
                                        (("1"
                                          (replace -3)
                                          (("1"
                                            (hide -3)
                                            (("1"
                                              (inst + "ball(c!1+PN,1)")
                                              (("1"
                                                (expand "ball")
                                                (("1" (grind) nil nil))
                                                nil)
                                               ("2"
                                                (expand "F" 1)
                                                (("2"
                                                  (inst + "PN")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (assert)
                                      (("2"
                                        (skosimp)
                                        (("2"
                                          (typepred "a!1")
                                          (("2"
                                            (skosimp)
                                            (("2"
                                              (replace -1)
                                              (("2"
                                                (expand "F")
                                                (("2"
                                                  (expand "ball")
                                                  (("2"
                                                    (hide -1)
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skosimp*)
          (("2" (typepred "S")
            (("2" (typepred "i!1")
              (("2" (skosimp)
                (("2"
                  (name "F"
                        "lambda (pn:posnat): {y:T| x!1-r!1< f!1(y) & f!1(y)<=x!1+r!1-1/pn}")
                  (("2"
                    (case-replace
                     "inverse_image(f!1, i!1)=Union(image(F,fullset[posnat]))")
                    (("1" (hide -1 -2)
                      (("1" (expand "sigma_algebra?")
                        (("1" (flatten)
                          (("1" (expand "sigma_algebra_union?")
                            (("1" (inst - "image(F, fullset[posnat])")
                              (("1"
                                (split -4)
                                (("1" (assert) nil nil)
                                 ("2"
                                  (hide-all-but 1)
                                  (("2"
                                    (lemma
                                     "countable_image[posnat,set[T]]"
                                     ("f" "F"))
                                    (("2"
                                      (inst - "fullset[posnat]")
                                      (("2"
                                        (split -1)
                                        (("1"
                                          (expand "image" -1)
                                          (("1" (propax) nil nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (expand "fullset")
                                            (("2"
                                              (expand "is_countable")
                                              (("2"
                                                (inst
                                                 +
                                                 "lambda (n:posnat): n-1")
                                                (("2"
                                                  (expand "injective?")
                                                  (("2"
                                                    (skosimp*)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (skosimp)
                                  (("3"
                                    (typepred "x!2")
                                    (("3"
                                      (expand "fullset")
                                      (("3"
                                        (expand "image")
                                        (("3"
                                          (skosimp)
                                          (("3"
                                            (replace -1)
                                            (("3"
                                              (expand "F")
                                              (("3"
                                                (assert)
                                                (("3"
                                                  (hide-all-but (-5 1))
                                                  (("3"
                                                    (inst-cp
                                                     -
                                                     "x!1-r!1")
                                                    (("3"
                                                      (inst
                                                       -
                                                       "x!1+r!1-1/x!3")
                                                      (("3"
                                                        (lemma
                                                         "sigma_algebra_difference"
                                                         ("x"
                                                          "{z | f!1(z) > x!1 - r!1}"
                                                          "y"
                                                          "{z | f!1(z) > x!1 + r!1 - 1 / x!3}"))
                                                        (("1"
                                                          (expand
                                                           "difference")
                                                          (("1"
                                                            (expand
                                                             "member")
                                                            (("1"
                                                              (case-replace
                                                               "{x: T | f!1(x) > x!1 - r!1 AND NOT f!1(x) > r!1 - 1 / x!3 + x!1} = {y: T | x!1 - r!1 < f!1(y) & f!1(y) <= r!1 - 1 / x!3 + x!1}")
                                                              (("1"
                                                                (hide-all-but
                                                                 1)
                                                                (("1"
                                                                  (apply-extensionality
                                                                   1
                                                                   :hide?
                                                                   t)
                                                                  (("1"
                                                                    (case-replace
                                                                     "f!1(x!4) > x!1 - r!1")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("3"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide -1 2)
                      (("2" (expand "fullset")
                        (("2" (expand "image")
                          (("2" (expand "Union")
                            (("2" (expand "inverse_image")
                              (("2"
                                (apply-extensionality 1 :hide? t)
                                (("2"
                                  (case-replace "i!1(f!1(x!2))")
                                  (("1"
                                    (replace -2 -1)
                                    (("1"
                                      (expand "ball")
                                      (("1"
                                        (hide -3 -4 -2)
                                        (("1"
                                          (ground)
                                          (("1"
                                            (lemma
                                             "archimedean"
                                             ("px"
                                              "r!1-abs(x!1 - f!1(x!2))"))
                                            (("1"
                                              (skosimp)
                                              (("1"
                                                (inst + "F(n!1)")
                                                (("1"
                                                  (expand "F")
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (inst + "n!1")
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (skosimp)
                                      (("2"
                                        (typepred "a!1")
                                        (("2"
                                          (skosimp)
                                          (("2"
                                            (replace -1)
                                            (("2"
                                              (expand "F")
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (replace -4)
                                                  (("2"
                                                    (hide -1 -4 -5 -6)
                                                    (("2"
                                                      (expand "ball")
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((measurable_def2 formula-decl nil measure_space_def nil)
    (T formal-type-decl nil measure_space_def nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (n!1 skolem-const-decl "posnat" measure_space_def nil)
    (archimedean formula-decl nil real_props nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (F skolem-const-decl "[posnat -> [T -> boolean]]" measure_space_def
     nil)
    (difference const-decl "set" sets nil)
    (sigma_algebra_difference formula-decl nil sigma_algebra nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (ball const-decl "set[T]" metric_space_def metric_space)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (Union const-decl "set" sets nil)
    (inverse_image const-decl "set[D]" function_image nil)
    (inverse_image_Union formula-decl nil inverse_image_Union sets_aux)
    (Union_surjective name-judgement
     "(surjective?[setofsets[T], set[T]])" sets_lemmas nil)
    (x!2 skolem-const-decl
     "({y: set[real] | EXISTS (x_1: posnat): y = F(x_1)})"
     measure_space_def nil)
    (x!3 skolem-const-decl "posnat" measure_space_def nil)
    (VV skolem-const-decl "set[set[real]]" measure_space_def nil)
    (c!1 skolem-const-decl "real" measure_space_def nil)
    (TRUE const-decl "bool" booleans nil)
    (x!3 skolem-const-decl "posnat" measure_space_def nil)
    (open_interval nonempty-type-eq-decl nil real_topology
     metric_space)
    (F skolem-const-decl "[posnat -> set[real]]" measure_space_def nil)
    (member const-decl "bool" sets nil)
    (sigma_algebra_union? const-decl "bool" subset_algebra_def nil)
    (image const-decl "set[R]" function_image nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (injective? const-decl "bool" functions nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (is_countable const-decl "bool" countability sets_aux)
    (countable_image formula-decl nil countable_image sets_aux)
    (inverse_image const-decl "set[D]" function_image nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (integer nonempty-type-from-decl nil integers nil)
    (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (ceiling const-decl "{i | x <= i & i < x + 1}" floor_ceil nil)
    (f!1 skolem-const-decl "[T -> real]" measure_space_def nil)
    (x!1 skolem-const-decl "T" measure_space_def nil)
    (PN skolem-const-decl
     "{i | f!1(x!1) - c!1 <= i & i < 1 + f!1(x!1) - c!1}"
     measure_space_def nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (fullset const-decl "set" sets nil)
    (image const-decl "set[R]" function_image nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (setof type-eq-decl nil defined_types nil)
    (setofsets type-eq-decl nil sets nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (S formal-const-decl "sigma_algebra" measure_space_def nil))
   shostak))
 (measurable_le 0
  (measurable_le-1 nil 3357918300
   ("" (skosimp)
    (("" (lemma "measurable_gt" ("f" "f!1"))
      (("" (replace -1)
        (("" (hide -1)
          (("" (typepred "S")
            (("" (expand "sigma_algebra?")
              (("" (flatten)
                (("" (expand "subset_algebra_complement?")
                  (("" (split)
                    (("1" (skosimp*)
                      (("1" (inst - "c!1")
                        (("1" (inst - "{z | f!1(z) > c!1}")
                          (("1" (expand "member")
                            (("1" (expand "complement")
                              (("1"
                                (expand "member")
                                (("1"
                                  (lemma
                                   "extensionality"
                                   ("f"
                                    "{x: T | NOT f!1(x) > c!1}"
                                    "g"
                                    "{z | f!1(z) <= c!1}"))
                                  (("1"
                                    (split -1)
                                    (("1" (assert) nil nil)
                                     ("2"
                                      (skosimp)
                                      (("2"
                                        (case-replace
                                         "f!1(x!1) <= c!1")
                                        (("1" (assert) nil nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (skosimp*)
                      (("2" (inst - "c!1")
                        (("2" (inst - "{z | f!1(z) <= c!1}")
                          (("2" (expand "member")
                            (("2"
                              (lemma "extensionality"
                               ("f"
                                "complement({z | f!1(z) <= c!1})"
                                "g"
                                "{z | f!1(z) > c!1}"))
                              (("2"
                                (split -1)
                                (("1" (assert) nil nil)
                                 ("2"
                                  (hide-all-but 1)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-type-decl nil measure_space_def nil)
    (measurable_gt formula-decl nil measure_space_def nil)
    (subset_algebra_complement? const-decl "bool" subset_algebra_def
     nil)
    (c!1 skolem-const-decl "real" measure_space_def nil)
    (set type-eq-decl nil sets nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (c!1 skolem-const-decl "real" measure_space_def nil)
    (f!1 skolem-const-decl "[T -> real]" measure_space_def nil)
    (> const-decl "bool" reals nil)
    (complement const-decl "set" sets nil)
    (extensionality formula-decl nil functions nil)
    (<= const-decl "bool" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (member const-decl "bool" sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (setof type-eq-decl nil defined_types nil)
    (setofsets type-eq-decl nil sets nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (S formal-const-decl "sigma_algebra" measure_space_def nil))
   shostak))
 (measurable_lt 0
  (measurable_lt-1 nil 3358562291
   ("" (skosimp)
    (("" (split)
      (("1" (flatten)
        (("1" (skosimp)
          (("1" (rewrite "measurable_le")
            (("1"
              (name "VV"
                    "image((lambda (n:posnat): {z | f!1(z) <= c!1-1/n}),fullset[posnat])")
              (("1"
                (lemma "countable_image[posnat,set[T]]"
                 ("f"
                  "(LAMBDA (n: posnat): {z | f!1(z) <= c!1 - 1 / n})"
                  "S" "fullset[posnat]"))
                (("1" (split -1)
                  (("1" (expand "image" -1)
                    (("1" (replace -2)
                      (("1" (hide -2)
                        (("1"
                          (case-replace
                           "{z_1: T | f!1(z_1) < c!1} = Union(VV)")
                          (("1" (typepred "S")
                            (("1" (expand "sigma_algebra?")
                              (("1"
                                (flatten)
                                (("1"
                                  (expand "sigma_algebra_union?")
                                  (("1"
                                    (inst - "VV")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (skosimp)
                                        (("1"
                                          (typepred "x!1")
                                          (("1"
                                            (expand "VV")
                                            (("1"
                                              (expand "fullset")
                                              (("1"
                                                (expand "image")
                                                (("1"
                                                  (skosimp)
                                                  (("1"
                                                    (inst
                                                     -6
                                                     "c!1 - 1 / x!2")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide-all-but 1)
                            (("2" (apply-extensionality :hide? t)
                              (("2"
                                (expand "VV")
                                (("2"
                                  (expand "fullset")
                                  (("2"
                                    (expand "image")
                                    (("2"
                                      (expand "Union")
                                      (("2"
                                        (case-replace "f!1(x!1) < c!1")
                                        (("1"
                                          (lemma
                                           "archimedean"
                                           ("px" "c!1-f!1(x!1)"))
                                          (("1"
                                            (skosimp)
                                            (("1"
                                              (inst
                                               +
                                               "{z | f!1(z) <= c!1 - 1 /n!1}")
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (inst + "n!1")
                                                nil
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil)
                                         ("2"
                                          (assert)
                                          (("2"
                                            (skosimp*)
                                            (("2"
                                              (typepred "a!1")
                                              (("2"
                                                (skosimp)
                                                (("2"
                                                  (replace -1)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide-all-but 1)
                    (("2" (expand "fullset")
                      (("2" (expand "is_countable")
                        (("2" (inst + "lambda (n:posnat): n-1")
                          (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skosimp*)
        (("2" (rewrite "measurable_le")
          (("2" (skosimp)
            (("2"
              (name "VV"
                    "image((lambda (n:posnat): {z_1: T | f!1(z_1) >= c!1+1/n}),fullset[posnat])")
              (("2" (case "subset?(VV,S)")
                (("1"
                  (lemma "countable_image[posnat,set[T]]"
                   ("f"
                    "(LAMBDA (n: posnat): {z_1: T | f!1(z_1) >= c!1 + 1 / n})"
                    "S" "fullset[posnat]"))
                  (("1" (expand "image" -1)
                    (("1" (replace -3)
                      (("1" (split -1)
                        (("1" (hide -3)
                          (("1" (typepred "S")
                            (("1" (expand "sigma_algebra?")
                              (("1"
                                (flatten)
                                (("1"
                                  (expand "sigma_algebra_union?")
                                  (("1"
                                    (inst - "VV")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (split -3)
                                        (("1"
                                          (expand
                                           "subset_algebra_complement?")
                                          (("1"
                                            (inst - "Union(VV)")
                                            (("1"
                                              (expand "complement")
                                              (("1"
                                                (expand "member")
                                                (("1"
                                                  (lemma
                                                   "extensionality"
                                                   ("f"
                                                    "{x: T | NOT Union(VV)(x)}"
                                                    "g"
                                                    "{z | f!1(z) <= c!1}"))
                                                  (("1"
                                                    (split -1)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (skosimp)
                                                      (("2"
                                                        (hide-all-but
                                                         1)
                                                        (("2"
                                                          (expand "VV")
                                                          (("2"
                                                            (expand
                                                             "fullset")
                                                            (("2"
                                                              (expand
                                                               "image")
                                                              (("2"
                                                                (expand
                                                                 "Union")
                                                                (("2"
                                                                  (case-replace
                                                                   "f!1(x!1) <= c!1")
                                                                  (("1"
                                                                    (skosimp)
                                                                    (("1"
                                                                      (typepred
                                                                       "a!1")
                                                                      (("1"
                                                                        (skosimp)
                                                                        (("1"
                                                                          (replace
                                                                           -1)
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (lemma
                                                                       "archimedean"
                                                                       ("px"
                                                                        "f!1(x!1)-c!1"))
                                                                      (("2"
                                                                        (skosimp)
                                                                        (("2"
                                                                          (inst
                                                                           +
                                                                           "{z_1: T | f!1(z_1) >= 1 /n!1 + c!1}")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (inst
                                                                             +
                                                                             "n!1")
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (skosimp)
                                          (("2"
                                            (typepred "x!1")
                                            (("2"
                                              (expand "subset?")
                                              (("2"
                                                (inst - "x!1")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide-all-but 1)
                          (("2" (expand "fullset")
                            (("2" (expand "is_countable")
                              (("2"
                                (inst + "lambda (n:posnat): n-1")
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide -1 2)
                  (("2" (expand "VV")
                    (("2" (expand "fullset")
                      (("2" (expand "image")
                        (("2" (expand "subset?")
                          (("2" (skosimp)
                            (("2" (expand "member")
                              (("2"
                                (skosimp)
                                (("2"
                                  (typepred "S")
                                  (("2"
                                    (expand "sigma_algebra?")
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (expand
                                         "subset_algebra_complement?")
                                        (("2"
                                          (inst -5 "1 / x!2 + c!1")
                                          (("2"
                                            (inst
                                             -
                                             "{z_1: T | f!1(z_1) < 1 / x!2 + c!1}")
                                            (("2"
                                              (expand "complement")
                                              (("2"
                                                (expand "member")
                                                (("2"
                                                  (lemma
                                                   "extensionality_postulate"
                                                   ("f"
                                                    "{x: T | NOT f!1(x) < 1 / x!2 + c!1}"
                                                    "g"
                                                    "{z_1: T | f!1(z_1) >= 1 / x!2 + c!1}"))
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (hide -2)
                                                      (("2"
                                                        (split -1)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (skosimp)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fullset const-decl "set" sets nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (image const-decl "set[R]" function_image nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (Union const-decl "set" sets nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (< const-decl "bool" reals nil)
    (sigma_algebra_union? const-decl "bool" subset_algebra_def nil)
    (Union_surjective name-judgement
     "(surjective?[setofsets[T], set[T]])" sets_lemmas nil)
    (member const-decl "bool" sets nil)
    (TRUE const-decl "bool" booleans nil)
    (VV skolem-const-decl "set[[T -> bool]]" measure_space_def nil)
    (S formal-const-decl "sigma_algebra" measure_space_def nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (archimedean formula-decl nil real_props nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (f!1 skolem-const-decl "[T -> real]" measure_space_def nil)
    (c!1 skolem-const-decl "real" measure_space_def nil)
    (n!1 skolem-const-decl "posnat" measure_space_def nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (image const-decl "set[R]" function_image nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (injective? const-decl "bool" functions nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (is_countable const-decl "bool" countability sets_aux)
    (countable_image formula-decl nil countable_image sets_aux)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-type-decl nil measure_space_def nil)
    (measurable_le formula-decl nil measure_space_def nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (extensionality_postulate formula-decl nil functions nil)
    (x!2 skolem-const-decl "posnat" measure_space_def nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (subset_algebra_complement? const-decl "bool" subset_algebra_def
     nil)
    (complement const-decl "set" sets nil)
    (extensionality formula-decl nil functions nil)
    (n!1 skolem-const-decl "posnat" measure_space_def nil)
    (c!1 skolem-const-decl "real" measure_space_def nil)
    (VV skolem-const-decl "set[[T -> bool]]" measure_space_def nil)
    (subset? const-decl "bool" sets nil))
   shostak))
 (measurable_ge 0
  (measurable_ge-1 nil 3358565341
   ("" (skosimp)
    (("" (rewrite "measurable_lt")
      (("" (split)
        (("1" (skosimp*)
          (("1" (inst - "c!1")
            (("1"
              (lemma "sigma_algebra_complement"
               ("x" "{z | f!1(z) < c!1}"))
              (("1" (expand "member")
                (("1"
                  (case-replace
                   "complement({z | f!1(z) < c!1})={z | f!1(z) >= c!1}")
                  (("1" (apply-extensionality 1 :hide? t)
                    (("1" (hide-all-but 1) (("1" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (propax) nil nil))
              nil))
            nil))
          nil)
         ("2" (skosimp*)
          (("2" (inst - "c!1")
            (("2"
              (lemma "sigma_algebra_complement"
               ("x" "{z | f!1(z) >= c!1}"))
              (("1" (expand "member")
                (("1"
                  (case-replace
                   "complement({z | f!1(z) >= c!1}) = {z | f!1(z) < c!1}")
                  (("1" (apply-extensionality 1 :hide? t)
                    (("1" (hide-all-but 1) (("1" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (propax) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((measurable_lt formula-decl nil measure_space_def nil)
    (T formal-type-decl nil measure_space_def nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (S formal-const-decl "sigma_algebra" measure_space_def nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (< const-decl "bool" reals nil)
    (sigma_algebra_complement formula-decl nil sigma_algebra nil)
    (>= const-decl "bool" reals nil)
    (complement const-decl "set" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (member const-decl "bool" sets nil))
   shostak))
 (measurable_gt2 0
  (measurable_gt2-1 nil 3358597640
   ("" (skosimp)
    (("" (rewrite "measurable_gt")
      (("" (split)
        (("1" (skosimp*) (("1" (inst - "q!1") nil nil)) nil)
         ("2" (skosimp*)
          (("2" (name "Q" "{z:rat| z>c!1}")
            (("2" (name "F" "lambda (x:real): {z | f!1(z)>x}")
              (("2" (name "RQ" "{z:real | EXISTS (q:(Q)): q = z}")
                (("2" (name "FQ" "image(F,RQ)")
                  (("2" (case "Union(FQ) = {z | f!1(z) > c!1}")
                    (("1" (replace -1 * rl)
                      (("1" (hide -1)
                        (("1" (typepred "S")
                          (("1" (expand "sigma_algebra?")
                            (("1" (flatten)
                              (("1"
                                (expand "sigma_algebra_union?")
                                (("1"
                                  (inst - "FQ")
                                  (("1"
                                    (expand "member")
                                    (("1"
                                      (split -3)
                                      (("1" (propax) nil nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (replace -3 * rl)
                                          (("2"
                                            (lemma
                                             "countable_image[real,set[T]]")
                                            (("2"
                                              (inst - "RQ" "F")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand "image" -1)
                                                  (("2"
                                                    (hide 2)
                                                    (("2"
                                                      (lemma
                                                       "countable_rat")
                                                      (("2"
                                                        (skosimp)
                                                        (("2"
                                                          (expand
                                                           "is_countable")
                                                          (("2"
                                                            (inst
                                                             +
                                                             "lambda (x:(RQ)): f!2(x)")
                                                            (("1"
                                                              (expand
                                                               "bijective?")
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (hide-all-but
                                                                   (-1
                                                                    1))
                                                                  (("1"
                                                                    (expand
                                                                     "injective?")
                                                                    (("1"
                                                                      (skosimp)
                                                                      (("1"
                                                                        (inst
                                                                         -
                                                                         "x1!1"
                                                                         "x2!1")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (typepred
                                                                           "x2!1")
                                                                          (("2"
                                                                            (expand
                                                                             "RQ")
                                                                            (("2"
                                                                              (skosimp)
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("3"
                                                                          (typepred
                                                                           "x1!1")
                                                                          (("3"
                                                                            (expand
                                                                             "RQ")
                                                                            (("3"
                                                                              (skosimp)
                                                                              (("3"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (skosimp)
                                                              (("2"
                                                                (typepred
                                                                 "x!1")
                                                                (("2"
                                                                  (expand
                                                                   "RQ")
                                                                  (("2"
                                                                    (skosimp)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (hide 2)
                                        (("3"
                                          (skosimp)
                                          (("3"
                                            (typepred "x!1")
                                            (("3"
                                              (expand "FQ")
                                              (("3"
                                                (expand "image")
                                                (("3"
                                                  (skosimp)
                                                  (("3"
                                                    (typepred "x!2")
                                                    (("3"
                                                      (expand "RQ")
                                                      (("3"
                                                        (skosimp)
                                                        (("3"
                                                          (replace
                                                           -1
                                                           *
                                                           rl)
                                                          (("3"
                                                            (expand
                                                             "F")
                                                            (("3"
                                                              (inst
                                                               -7
                                                               "q!1")
                                                              (("3"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide-all-but 1)
                      (("2" (apply-extensionality 1 :hide? t)
                        (("2" (case-replace "f!1(x!1) > c!1")
                          (("1" (expand "Union")
                            (("1"
                              (lemma "density"
                               ("x" "c!1" "y" "f!1(x!1)"))
                              (("1"
                                (assert)
                                (("1"
                                  (skosimp)
                                  (("1"
                                    (typepred "r!1")
                                    (("1"
                                      (inst + "F(r!1)")
                                      (("1"
                                        (expand "F")
                                        (("1" (assert) nil nil))
                                        nil)
                                       ("2"
                                        (expand "FQ")
                                        (("2"
                                          (expand "image")
                                          (("2"
                                            (inst + "r!1")
                                            (("2"
                                              (expand "RQ")
                                              (("2"
                                                (inst + "r!1")
                                                (("2"
                                                  (expand "Q")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (replace 1 2)
                            (("2" (assert)
                              (("2"
                                (expand "Union")
                                (("2"
                                  (skosimp)
                                  (("2"
                                    (typepred "a!1")
                                    (("2"
                                      (expand "FQ")
                                      (("2"
                                        (expand "image")
                                        (("2"
                                          (skosimp)
                                          (("2"
                                            (replace -1)
                                            (("2"
                                              (hide -1)
                                              (("2"
                                                (typepred "x!2")
                                                (("2"
                                                  (expand "RQ")
                                                  (("2"
                                                    (skosimp)
                                                    (("2"
                                                      (typepred "q!1")
                                                      (("2"
                                                        (replace
                                                         -2
                                                         *
                                                         rl)
                                                        (("2"
                                                          (hide -2)
                                                          (("2"
                                                            (expand
                                                             "Q")
                                                            (("2"
                                                              (expand
                                                               "F")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((measurable_gt formula-decl nil measure_space_def nil)
    (T formal-type-decl nil measure_space_def nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (set type-eq-decl nil sets nil)
    (image const-decl "set[R]" function_image nil)
    (density formula-decl nil rational_props nil)
    (r!1 skolem-const-decl "rat" measure_space_def nil)
    (Q skolem-const-decl "[rat -> bool]" measure_space_def nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (Union_surjective name-judgement
     "(surjective?[setofsets[T], set[T]])" sets_lemmas nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (S formal-const-decl "sigma_algebra" measure_space_def nil)
    (image const-decl "set[R]" function_image nil)
    (countable_rat formula-decl nil countable_set sets_aux)
    (is_countable const-decl "bool" countability sets_aux)
    (bijective? const-decl "bool" functions nil)
    (x2!1 skolem-const-decl "(RQ)" measure_space_def nil)
    (x1!1 skolem-const-decl "(RQ)" measure_space_def nil)
    (f!2 skolem-const-decl "[rat -> nat]" measure_space_def nil)
    (RQ skolem-const-decl "[real -> boolean]" measure_space_def nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (injective? const-decl "bool" functions nil)
    (countable_image formula-decl nil countable_image sets_aux)
    (FQ skolem-const-decl "set[[T -> bool]]" measure_space_def nil)
    (F skolem-const-decl "[real -> [T -> bool]]" measure_space_def nil)
    (member const-decl "bool" sets nil)
    (sigma_algebra_union? const-decl "bool" subset_algebra_def nil)
    (Union const-decl "set" sets nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (> const-decl "bool" reals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil))
   shostak))
 (measurable_le2 0
  (measurable_le2-1 nil 3358671101
   ("" (skosimp)
    (("" (rewrite "measurable_gt2")
      (("" (typepred "S")
        (("" (expand "sigma_algebra?")
          (("" (flatten)
            (("" (hide -1 -3)
              (("" (expand "subset_algebra_complement?")
                (("" (expand "member")
                  (("" (split)
                    (("1" (skosimp*)
                      (("1" (inst - "q!1")
                        (("1" (inst - "{z | f!1(z) > q!1}")
                          (("1"
                            (lemma "extensionality"
                             ("f" "complement({z | f!1(z) > q!1})" "g"
                              "{z | f!1(z) <= q!1}"))
                            (("1" (split -1)
                              (("1" (assert) nil nil)
                               ("2"
                                (hide-all-but 1)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (skosimp*)
                      (("2" (inst - "q!1")
                        (("2" (inst - "{z | f!1(z) <= q!1}")
                          (("2"
                            (lemma "extensionality"
                             ("f" "{z | f!1(z) > q!1}" "g"
                              "complement({z | f!1(z) <= q!1})"))
                            (("2" (split -1)
                              (("1" (assert) nil nil)
                               ("2"
                                (hide-all-but 1)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((measurable_gt2 formula-decl nil measure_space_def nil)
    (T formal-type-decl nil measure_space_def nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (subset_algebra_complement application-judgement "(S)"
     measure_space_def nil)
    (member const-decl "bool" sets nil)
    (q!1 skolem-const-decl "rational" measure_space_def nil)
    (> const-decl "bool" reals nil)
    (f!1 skolem-const-decl "[T -> real]" measure_space_def nil)
    (q!1 skolem-const-decl "rational" measure_space_def nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (<= const-decl "bool" reals nil)
    (complement const-decl "set" sets nil)
    (set type-eq-decl nil sets nil)
    (extensionality formula-decl nil functions nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (subset_algebra_complement? const-decl "bool" subset_algebra_def
     nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (setof type-eq-decl nil defined_types nil)
    (setofsets type-eq-decl nil sets nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (S formal-const-decl "sigma_algebra" measure_space_def nil))
   shostak))
 (measurable_lt2 0
  (measurable_lt2-1 nil 3358671696
   ("" (skosimp)
    (("" (split)
      (("1" (skosimp*)
        (("1" (rewrite "measurable_lt") (("1" (inst - "q!1") nil nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (rewrite "measurable_lt")
          (("2" (skosimp)
            (("2" (name "Q" "{q:rat| q<=c!1}")
              (("2" (name "F" "lambda q: {z|f!1(z)<q}")
                (("2" (name "FQ" "image(F,Q)")
                  (("2" (typepred "S")
                    (("2" (expand "sigma_algebra?")
                      (("2" (flatten)
                        (("2" (hide -1 -2)
                          (("2" (expand "sigma_algebra_union?")
                            (("2" (inst - "FQ")
                              (("2"
                                (expand "member")
                                (("2"
                                  (split -1)
                                  (("1"
                                    (lemma
                                     "extensionality"
                                     ("f"
                                      "Union(FQ)"
                                      "g"
                                      "{z | f!1(z) < c!1}"))
                                    (("1"
                                      (split -1)
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (hide-all-but (-2 -3 -4 1))
                                        (("2"
                                          (skosimp)
                                          (("2"
                                            (case-replace
                                             "f!1(x!1) < c!1")
                                            (("1"
                                              (expand "Union")
                                              (("1"
                                                (lemma
                                                 "density"
                                                 ("x"
                                                  "f!1(x!1)"
                                                  "y"
                                                  "c!1"))
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (skosimp)
                                                    (("1"
                                                      (inst + "F(r!1)")
                                                      (("1"
                                                        (expand "F")
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (expand "FQ")
                                                        (("2"
                                                          (expand
                                                           "image")
                                                          (("2"
                                                            (inst
                                                             +
                                                             "r!1")
                                                            (("2"
                                                              (expand
                                                               "Q")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (replace 1 2)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand "Union")
                                                  (("2"
                                                    (skosimp)
                                                    (("2"
                                                      (typepred "a!1")
                                                      (("2"
                                                        (expand "FQ")
                                                        (("2"
                                                          (expand
                                                           "image")
                                                          (("2"
                                                            (skosimp)
                                                            (("2"
                                                              (typepred
                                                               "x!2")
                                                              (("2"
                                                                (expand
                                                                 "Q")
                                                                (("2"
                                                                  (replace
                                                                   -2)
                                                                  (("2"
                                                                    (expand
                                                                     "F")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide 2)
                                    (("2"
                                      (lemma
                                       "countable_image[rat,set[T]]"
                                       ("f" "F" "S" "Q"))
                                      (("2"
                                        (split -1)
                                        (("1"
                                          (expand "image" -1)
                                          (("1"
                                            (expand "FQ")
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but (-3 1))
                                          (("2"
                                            (lemma
                                             "countable_full[rat]")
                                            (("2"
                                              (lemma
                                               "countable_subset[rat]"
                                               ("S"
                                                "Q"
                                                "Count"
                                                "fullset[rat]"))
                                              (("1"
                                                (split -1)
                                                (("1" (propax) nil nil)
                                                 ("2"
                                                  (hide-all-but 1)
                                                  (("2"
                                                    (expand "Q")
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (lemma
                                                 "countably_infinite_type_set[rat]")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (hide-all-but 1)
                                                    (("2"
                                                      (expand
                                                       "fullset")
                                                      (("2"
                                                        (expand
                                                         "is_countable")
                                                        (("2"
                                                          (lemma
                                                           "countable_rat")
                                                          (("2"
                                                            (skosimp)
                                                            (("2"
                                                              (inst
                                                               +
                                                               "f!2")
                                                              (("2"
                                                                (expand
                                                                 "bijective?")
                                                                (("2"
                                                                  (flatten)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (skosimp)
                                    (("3"
                                      (typepred "x!1")
                                      (("3"
                                        (expand "FQ")
                                        (("3"
                                          (expand "image")
                                          (("3"
                                            (skosimp)
                                            (("3"
                                              (replace -1)
                                              (("3"
                                                (hide -1 -2 -3 2)
                                                (("3"
                                                  (expand "F")
                                                  (("3"
                                                    (inst - "x!2")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((measurable_lt formula-decl nil measure_space_def nil)
    (T formal-type-decl nil measure_space_def nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (set type-eq-decl nil sets nil)
    (image const-decl "set[R]" function_image nil)
    (Union_surjective name-judgement
     "(surjective?[setofsets[T], set[T]])" sets_lemmas nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (FQ skolem-const-decl "set[[T -> bool]]" measure_space_def nil)
    (F skolem-const-decl "[rational -> [T -> bool]]" measure_space_def
     nil)
    (r!1 skolem-const-decl "rat" measure_space_def nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (Q skolem-const-decl "[rat -> bool]" measure_space_def nil)
    (density formula-decl nil rational_props nil)
    (Union const-decl "set" sets nil)
    (extensionality formula-decl nil functions nil)
    (countable_image formula-decl nil countable_image sets_aux)
    (countable_subset formula-decl nil countability sets_aux)
    (is_countable const-decl "bool" countability sets_aux)
    (countable_set nonempty-type-eq-decl nil countability sets_aux)
    (fullset const-decl "set" sets nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (subset? const-decl "bool" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (countable_rat formula-decl nil countable_set sets_aux)
    (injective? const-decl "bool" functions nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (TRUE const-decl "bool" booleans nil)
    (f!2 skolem-const-decl "[rat -> nat]" measure_space_def nil)
    (bijective? const-decl "bool" functions nil)
    (countably_infinite_type_set formula-decl nil countability
     sets_aux)
    (countable_full formula-decl nil countability sets_aux)
    (image const-decl "set[R]" function_image nil)
    (member const-decl "bool" sets nil)
    (sigma_algebra_union? const-decl "bool" subset_algebra_def nil)
    (S formal-const-decl "sigma_algebra" measure_space_def nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil))
   shostak))
 (measurable_ge2 0
  (measurable_ge2-1 nil 3358671342
   ("" (skosimp)
    (("" (typepred "S")
      (("" (expand "sigma_algebra?")
        (("" (flatten)
          (("" (hide -1 -3)
            (("" (expand "subset_algebra_complement?")
              (("" (expand "member")
                (("" (rewrite "measurable_lt2")
                  (("" (split)
                    (("1" (skosimp*)
                      (("1" (inst - "q!1")
                        (("1" (inst - "{z | f!1(z) < q!1}")
                          (("1"
                            (lemma "extensionality"
                             ("f" "complement({z | f!1(z) < q!1})" "g"
                              "{z | f!1(z) >= q!1}"))
                            (("1" (split -1)
                              (("1" (assert) nil nil)
                               ("2"
                                (hide-all-but 1)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (skosimp*)
                      (("2" (inst - "q!1")
                        (("2" (inst - "{z | f!1(z) >= q!1}")
                          (("2"
                            (lemma "extensionality"
                             ("f" "{z | f!1(z) < q!1}" "g"
                              "complement({z | f!1(z) >= q!1})"))
                            (("2" (split -1)
                              (("1" (assert) nil nil)
                               ("2"
                                (hide-all-but 1)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((S formal-const-decl "sigma_algebra" measure_space_def nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (T formal-type-decl nil measure_space_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (subset_algebra_complement? const-decl "bool" subset_algebra_def
     nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (measurable_lt2 formula-decl nil measure_space_def nil)
    (q!1 skolem-const-decl "rational" measure_space_def nil)
    (< const-decl "bool" reals nil)
    (f!1 skolem-const-decl "[T -> real]" measure_space_def nil)
    (q!1 skolem-const-decl "rational" measure_space_def nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (>= const-decl "bool" reals nil)
    (complement const-decl "set" sets nil)
    (set type-eq-decl nil sets nil)
    (extensionality formula-decl nil functions nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (member const-decl "bool" sets nil)
    (subset_algebra_complement application-judgement "(S)"
     measure_space_def nil))
   shostak))
 (scal_measurable 0
  (scal_measurable-1 nil 3357922283
   ("" (skosimp)
    (("" (lemma "trichotomy" ("x" "c!1"))
      (("" (typepred "g!1")
        (("" (split -2)
          (("1" (rewrite "measurable_gt" -2)
            (("1" (rewrite "measurable_gt" 1)
              (("1" (skosimp)
                (("1" (inst - "c!2/c!1")
                  (("1" (assert)
                    (("1"
                      (lemma "extensionality"
                       ("f" "{z | g!1(z) > c!2 / c!1}" "g"
                        "{z | (c!1 * g!1)(z) > c!2}"))
                      (("1" (split -1)
                        (("1" (assert) nil nil)
                         ("2" (hide -2 2)
                          (("2" (skosimp)
                            (("2" (assert)
                              (("2"
                                (expand "*")
                                (("2"
                                  (assert)
                                  (("2"
                                    (case-replace
                                     "c!1 * g!1(x!1) > c!2")
                                    (("1"
                                      (rewrite "div_mult_pos_gt2" 1)
                                      (("1" (assert) nil nil))
                                      nil)
                                     ("2"
                                      (replace 1 2)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (rewrite
                                           "div_mult_pos_gt2"
                                           -1)
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (replace -1)
            (("2" (hide-all-but 1)
              (("2" (expand "*")
                (("2" (lemma "constant_is_measurable")
                  (("2" (inst - "lambda (x:T): 0")
                    (("1" (assert) nil nil)
                     ("2" (expand "constant?")
                      (("2" (inst + "0")
                        (("2" (expand "const_fun")
                          (("2" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (rewrite "measurable_gt" 1)
            (("3" (skosimp)
              (("3" (rewrite "measurable_lt")
                (("3" (inst - "c!2/c!1")
                  (("1"
                    (lemma "extensionality"
                     ("f" "{z | g!1(z) < c!2/c!1}" "g"
                      "{z | (c!1 * g!1)(z) > c!2}"))
                    (("1" (split -1)
                      (("1" (assert) nil nil)
                       ("2" (hide -2 2)
                        (("2" (skosimp)
                          (("2" (rewrite "div_mult_neg_lt2" 1)
                            (("2" (expand "*") (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (skosimp) (("2" (assert) nil nil)) nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (trichotomy formula-decl nil real_axioms nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (/= const-decl "boolean" notequal nil)
    (c!1 skolem-const-decl "real" measure_space_def nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (extensionality formula-decl nil functions nil)
    (> const-decl "bool" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (div_mult_pos_gt2 formula-decl nil extra_real_props nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (measurable_gt formula-decl nil measure_space_def nil)
    (constant_is_measurable judgement-tcc nil measure_space_def nil)
    (const_fun const-decl "[S -> T]" const_fun_def structures)
    (constant? const-decl "bool" const_fun_def structures)
    (div_mult_neg_lt2 formula-decl nil real_props nil)
    (<= const-decl "bool" reals nil)
    (nonpos_real nonempty-type-eq-decl nil real_types nil)
    (negreal nonempty-type-eq-decl nil real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (< const-decl "bool" reals nil)
    (measurable_lt formula-decl nil measure_space_def nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil measure_space_def nil)
    (measurable_function? const-decl "bool" measure_space_def nil)
    (measurable_function nonempty-type-eq-decl nil measure_space_def
     nil))
   shostak
   (scal_measurable subtype
    "real_fun_ops[measure_space_def.T].*(measure_space_def.c, measure_space_def.g)"
    "measurable_function")))
 (sum_measurable 0
  (sum_measurable-1 nil 3357925399
   ("" (skosimp)
    (("" (typepred "g1!1")
      (("" (typepred "g2!1")
        (("" (rewrite "measurable_lt" 1)
          (("" (skosimp)
            (("" (expand "+" 1)
              (("" (rewrite "measurable_lt" -1)
                (("" (rewrite "measurable_lt" -2)
                  ((""
                    (name "F"
                          "lambda q: intersection({z | g1!1(z) < q},{z | g2!1(z) < c!1-q})")
                    ((""
                      (case-replace
                       "{z | g1!1(z) + g2!1(z) < c!1} = Union(image(F,fullset[rat]))")
                      (("1" (hide -1)
                        (("1"
                          (lemma "countable_image[rat,set[T]]"
                           ("f" "F"))
                          (("1" (inst - "fullset[rat]")
                            (("1" (expand "image" -1)
                              (("1"
                                (split -1)
                                (("1"
                                  (typepred "S")
                                  (("1"
                                    (expand "sigma_algebra?")
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (expand "sigma_algebra_union?")
                                        (("1"
                                          (inst
                                           -3
                                           "image(F, fullset[rat])")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (hide 2)
                                              (("1"
                                                (skosimp)
                                                (("1"
                                                  (typepred "x!1")
                                                  (("1"
                                                    (expand "image")
                                                    (("1"
                                                      (skosimp)
                                                      (("1"
                                                        (expand "F")
                                                        (("1"
                                                          (replace -1)
                                                          (("1"
                                                            (inst
                                                             -5
                                                             "c!1-x!2")
                                                            (("1"
                                                              (inst
                                                               -6
                                                               "x!2")
                                                              (("1"
                                                                (lemma
                                                                 "sigma_algebra_intersection"
                                                                 ("x"
                                                                  "{z | g1!1(z) < x!2}"
                                                                  "y"
                                                                  "{z | g2!1(z) < c!1 - x!2}"))
                                                                (("1"
                                                                  (expand
                                                                   "member")
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (propax)
                                                                  nil
                                                                  nil)
                                                                 ("3"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but 1)
                                  (("2"
                                    (lemma
                                     "countable_type_is_countably_infinite[rat]")
                                    (("2"
                                      (lemma "countable_full[rat]")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (hide 2 3)
                                          (("2"
                                            (expand
                                             "is_countable_type")
                                            (("2"
                                              (lemma "countable_rat")
                                              (("2"
                                                (skosimp)
                                                (("2"
                                                  (inst + "f!1")
                                                  (("2"
                                                    (expand
                                                     "bijective?")
                                                    (("2"
                                                      (flatten)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide-all-but 1)
                        (("2" (apply-extensionality :hide? t)
                          (("2"
                            (case-replace
                             "g1!1(x!1) + g2!1(x!1) < c!1")
                            (("1" (expand "Union")
                              (("1"
                                (lemma
                                 "density"
                                 ("x"
                                  "g1!1(x!1) + g2!1(x!1)"
                                  "y"
                                  "c!1"))
                                (("1"
                                  (assert)
                                  (("1"
                                    (skosimp)
                                    (("1"
                                      (typepred "r!1")
                                      (("1"
                                        (lemma
                                         "density"
                                         ("x"
                                          "g1!1(x!1)"
                                          "y"
                                          "r!1-g2!1(x!1)"))
                                        (("1"
                                          (assert)
                                          (("1"
                                            (skosimp)
                                            (("1"
                                              (inst + "F(r!2)")
                                              (("1"
                                                (expand "F")
                                                (("1"
                                                  (expand
                                                   "intersection")
                                                  (("1"
                                                    (expand "member")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "image")
                                                (("2"
                                                  (inst + "r!2")
                                                  (("2"
                                                    (expand "fullset")
                                                    (("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (replace 1 2)
                              (("2"
                                (assert)
                                (("2"
                                  (expand "Union")
                                  (("2"
                                    (skosimp)
                                    (("2"
                                      (typepred "a!1")
                                      (("2"
                                        (expand "image")
                                        (("2"
                                          (skosimp)
                                          (("2"
                                            (replace -1)
                                            (("2"
                                              (typepred "x!2")
                                              (("2"
                                                (expand "F")
                                                (("2"
                                                  (expand
                                                   "intersection")
                                                  (("2"
                                                    (expand "member")
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((measurable_function nonempty-type-eq-decl nil measure_space_def
     nil)
    (measurable_function? const-decl "bool" measure_space_def nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-type-decl nil measure_space_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (measurable_lt formula-decl nil measure_space_def nil)
    (+ const-decl "[T -> real]" real_fun_ops reals)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (setof type-eq-decl nil defined_types nil)
    (setofsets type-eq-decl nil sets nil)
    (Union const-decl "set" sets nil)
    (image const-decl "set[R]" function_image nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (fullset const-decl "set" sets nil)
    (countable_image formula-decl nil countable_image sets_aux)
    (image const-decl "set[R]" function_image nil)
    (countable_full formula-decl nil countability sets_aux)
    (countable_rat formula-decl nil countable_set sets_aux)
    (injective? const-decl "bool" functions nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (f!1 skolem-const-decl "[rat -> nat]" measure_space_def nil)
    (bijective? const-decl "bool" functions nil)
    (is_countable_type const-decl "bool" countability sets_aux)
    (countable_type_is_countably_infinite formula-decl nil countability
     sets_aux)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (S formal-const-decl "sigma_algebra" measure_space_def nil)
    (sigma_algebra_intersection formula-decl nil sigma_algebra nil)
    (F skolem-const-decl "[rational -> set[T]]" measure_space_def nil)
    (member const-decl "bool" sets nil)
    (Union_surjective name-judgement
     "(surjective?[setofsets[T], set[T]])" sets_lemmas nil)
    (sigma_algebra_union? const-decl "bool" subset_algebra_def nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (r!2 skolem-const-decl "rat" measure_space_def nil)
    (density formula-decl nil rational_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (set type-eq-decl nil sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (intersection const-decl "set" sets nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields
       nil))
   shostak
   (sum_measurable subtype
    "(real_fun_ops[measure_space_def.T].+)(measure_space_def.g1, measure_space_def.g2)"
    "measurable_function")))
 (opp_measurable 0
  (opp_measurable-1 nil 3358645541
   ("" (skosimp)
    (("" (lemma "scal_measurable" ("c" "-1" "g" "g!1"))
      (("" (expand "*")
        (("" (expand "-")
          ((""
            (lemma "extensionality"
             ("f" "LAMBDA (x: T): -1 * g!1(x)" "g"
              "LAMBDA (x: T): -g!1(x)"))
            (("" (split -1)
              (("1" (assert) nil nil)
               ("2" (hide-all-but 1) (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((measurable_function nonempty-type-eq-decl nil measure_space_def
     nil)
    (measurable_function? const-decl "bool" measure_space_def nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (T formal-type-decl nil measure_space_def nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (scal_measurable judgement-tcc nil measure_space_def nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (- const-decl "[T -> real]" real_fun_ops reals)
    (real_times_real_is_real application-judgement "real" reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (extensionality formula-decl nil functions nil)
    (* const-decl "[T -> real]" real_fun_ops reals))
   shostak
   (opp_measurable subtype
    "(real_fun_ops[measure_space_def.T].-)(measure_space_def.g)"
    "measurable_function")))
 (diff_measurable 0
  (diff_measurable-1 nil 3358645494
   ("" (skosimp)
    (("" (lemma "opp_measurable" ("g" "g2!1"))
      (("" (lemma "sum_measurable" ("g1" "g1!1" "g2" "-g2!1"))
        (("" (expand "+")
          (("" (expand "-") (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((measurable_function nonempty-type-eq-decl nil measure_space_def
     nil)
    (measurable_function? const-decl "bool" measure_space_def nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-type-decl nil measure_space_def nil)
    (opp_measurable judgement-tcc nil measure_space_def nil)
    (+ const-decl "[T -> real]" real_fun_ops reals)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (- const-decl "[T -> real]" real_fun_ops reals)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (opp_measurable application-judgement "measurable_function"
     measure_space_def nil)
    (sum_measurable judgement-tcc nil measure_space_def nil)
    (- const-decl "[T -> real]" real_fun_ops reals))
   shostak
   (diff_measurable subtype
    "(real_fun_ops[measure_space_def.T].-)(measure_space_def.g1, measure_space_def.g2)"
    "measurable_function"))))

