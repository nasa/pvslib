(product_measure
 (product_measure_approx_TCC1 0
  (product_measure_approx_TCC1-1 nil 3456295627
   ("" (skosimp)
    (("" (typepred "A_of[T1, S1](mu!1)(i!1)")
      (("" (expand "measurable_set?")
        (("" (expand "A_of")
          (("" (lemma "A_of_TCC1[T1,S1]" ("f" "mu!1"))
            ((""
              (name-replace "XX"
               "{X: disjoint_indexed_measurable[T1, S1] |
                     IUnion(X) = fullset[T1] AND (FORALL i: mu!1(X(i))`1)}")
              (("" (lemma "choose_member" ("a" "XX"))
                (("" (expand "nonempty?")
                  (("" (name-replace "CC" "choose(XX)")
                    (("" (expand "XX")
                      (("" (assert)
                        (("" (flatten) (("" (inst - "i!1") nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((A_of const-decl "disjoint_indexed_measurable" measure_def nil)
    (disjoint_indexed_measurable nonempty-type-eq-decl nil
     generalized_measure_def nil)
    (disjoint_indexed_measurable? const-decl "bool"
     generalized_measure_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (sigma_finite_measure nonempty-type-eq-decl nil measure_def nil)
    (sigma_finite_measure? const-decl "bool" measure_def nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (S1 formal-const-decl "sigma_algebra[T1]" product_measure nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (T1 formal-type-decl nil product_measure nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (sigma_algebra_IUnion_rew application-judgement "(S)"
     product_measure nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (IUnion const-decl "set[T]" indexed_sets nil)
    (fullset const-decl "set" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (XX skolem-const-decl
     "[disjoint_indexed_measurable[T1, S1] -> boolean]" product_measure
     nil)
    (member const-decl "bool" sets nil)
    (choose const-decl "(p)" sets nil)
    (choose_member formula-decl nil sets_lemmas nil)
    (A_of_TCC1 subtype-tcc nil measure_def nil)
    (measurable_set? const-decl "bool" measure_space_def nil))
   nil
   (product_measure_approx subtype
    "measure_def[product_measure.T1, product_measure.S1].A_of(product_measure.mu)(product_measure.i)"
    "{E | product_measure.mu(E)`1}")))
 (product_measure_approx_TCC2 0
  (product_measure_approx_TCC2-1 nil 3456295627
   ("" (skosimp)
    (("" (typepred "A_of[T2, S2](nu!1)(j!1)")
      (("" (expand "measurable_set?")
        (("" (lemma "A_of_TCC1[T2, S2]" ("f" "nu!1"))
          (("" (expand "A_of")
            ((""
              (name "XX" "{X: disjoint_indexed_measurable[T2, S2] |
                     IUnion(X) = fullset[T2] AND (FORALL i: nu!1(X(i))`1)}")
              (("" (replace -1)
                (("" (lemma "choose_member" ("a" "XX"))
                  (("" (split)
                    (("1" (name-replace "CC" "choose(XX)")
                      (("1" (expand "XX")
                        (("1" (expand "member")
                          (("1" (flatten)
                            (("1" (inst - "j!1") nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "nonempty?") (("2" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((A_of const-decl "disjoint_indexed_measurable" measure_def nil)
    (disjoint_indexed_measurable nonempty-type-eq-decl nil
     generalized_measure_def nil)
    (disjoint_indexed_measurable? const-decl "bool"
     generalized_measure_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (sigma_finite_measure nonempty-type-eq-decl nil measure_def nil)
    (sigma_finite_measure? const-decl "bool" measure_def nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (S2 formal-const-decl "sigma_algebra[T2]" product_measure nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (T2 formal-type-decl nil product_measure nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (A_of_TCC1 subtype-tcc nil measure_def nil)
    (fullset const-decl "set" sets nil)
    (IUnion const-decl "set[T]" indexed_sets nil)
    (set type-eq-decl nil sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sigma_algebra_IUnion_rew application-judgement "(S)"
     product_measure nil)
    (choose_member formula-decl nil sets_lemmas nil)
    (choose const-decl "(p)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (XX skolem-const-decl
     "[disjoint_indexed_measurable[T2, S2] -> boolean]" product_measure
     nil)
    (measurable_set? const-decl "bool" measure_space_def nil))
   nil
   (product_measure_approx subtype
    "measure_def[product_measure.T2, product_measure.S2].A_of(product_measure.nu)(product_measure.j)"
    "{E | product_measure.nu(E)`1}")))
 (m_times_TCC1 0
  (m_times_TCC1-2 "" 3789904362
   ("" (skosimp)
    ((""
      (lemma "x_sum_measure"
       ("F" "LAMBDA i: lambda M: 
                     x_sum(LAMBDA j:
                             to_measure[[T1, T2], sigma_times(S1, S2)]
                                 (product_measure_approx(mu!1, nu!1)(i, j))(M))
                                 "))
      (("1" (assert)
        (("1" (expand "sigma_finite_measure?")
          (("1" (hide -1)
            (("1" (expand "product_measure_approx")
              (("1" (typepred "A_of(nu!1)")
                (("1" (typepred "A_of(mu!1)")
                  (("1" (name "X!1" "A_of(mu!1)")
                    (("1" (name "Y!1" "A_of(nu!1)")
                      (("1" (replace -1)
                        (("1" (replace -2)
                          (("1" (expand "disjoint_indexed_measurable?")
                            (("1"
                              (case "forall i,j: sigma_times(S1, S2)(cross_product(X!1(i),Y!1(j)))")
                              (("1"
                                (lemma "A_of_TCC1[T2,S2]" ("f" "nu!1"))
                                (("1"
                                  (lemma
                                   "A_of_TCC1[T1,S1]"
                                   ("f" "mu!1"))
                                  (("1"
                                    (expand "nonempty?")
                                    (("1"
                                      (expand "A_of")
                                      (("1"
                                        (lemma
                                         "choose_member"
                                         ("a"
                                          "{X: disjoint_indexed_measurable[T1, S1] |
                IUnion[nat, T1](X) = fullset[T1] AND
                 (FORALL i: mu!1(X(i))`1)}"))
                                        (("1"
                                          (replace -4)
                                          (("1"
                                            (replace 1)
                                            (("1"
                                              (lemma
                                               "choose_member"
                                               ("a"
                                                "{X: disjoint_indexed_measurable[T2, S2] |
                IUnion[nat, T2](X) = fullset[T2] AND
                 (FORALL i: nu!1(X(i))`1)}"))
                                              (("1"
                                                (replace -4)
                                                (("1"
                                                  (replace 2)
                                                  (("1"
                                                    (hide -4 -5 1 2)
                                                    (("1"
                                                      (expand "member")
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (expand
                                                           "measure_sigma_finite?")
                                                          (("1"
                                                            (name
                                                             "UU"
                                                             "lambda i,j: cross_product(X!1(i), Y!1(j))")
                                                            (("1"
                                                              (hide -1)
                                                              (("1"
                                                                (case
                                                                 "FORALL i, j: sigma_times(S1, S2)(UU(i,j))")
                                                                (("1"
                                                                  (hide
                                                                   -6)
                                                                  (("1"
                                                                    (case
                                                                     "disjoint?(single_index(UU))")
                                                                    (("1"
                                                                      (inst
                                                                       +
                                                                       "single_index(UU)")
                                                                      (("1"
                                                                        (split)
                                                                        (("1"
                                                                          (apply-extensionality
                                                                           :hide?
                                                                           t)
                                                                          (("1"
                                                                            (lemma
                                                                             "extensionality_postulate"
                                                                             ("f"
                                                                              "IUnion[nat, T2](Y!1)"
                                                                              "g"
                                                                              "fullset[T2]"))
                                                                            (("1"
                                                                              (lemma
                                                                               "extensionality_postulate"
                                                                               ("f"
                                                                                "IUnion[nat, T1](X!1)"
                                                                                "g"
                                                                                "fullset[T1]"))
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (split
                                                                                   -2)
                                                                                  (("1"
                                                                                    (split
                                                                                     -4)
                                                                                    (("1"
                                                                                      (hide-all-but
                                                                                       (-1
                                                                                        -2
                                                                                        1))
                                                                                      (("1"
                                                                                        (expand
                                                                                         "fullset")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "single_index")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "IUnion")
                                                                                            (("1"
                                                                                              (inst
                                                                                               -
                                                                                               "x!2")
                                                                                              (("1"
                                                                                                (skolem
                                                                                                 -
                                                                                                 "j!1")
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -
                                                                                                   "x!1")
                                                                                                  (("1"
                                                                                                    (skolem
                                                                                                     -
                                                                                                     "i!1")
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       +
                                                                                                       "double_index_n(i!1,j!1)")
                                                                                                      (("1"
                                                                                                        (lemma
                                                                                                         "double_index_ij_n"
                                                                                                         ("i"
                                                                                                          "i!1"
                                                                                                          "j"
                                                                                                          "j!1"))
                                                                                                        (("1"
                                                                                                          (flatten)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (replace
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (replace
                                                                                                                 -2)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "UU")
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "cross_product")
                                                                                                                    (("1"
                                                                                                                      (propax)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (skolem
                                                                           +
                                                                           "n!1")
                                                                          (("2"
                                                                            (expand
                                                                             "single_index")
                                                                            (("2"
                                                                              (case
                                                                               "forall i,j: to_measure[[T1, T2], sigma_times(S1, S2)]
                          (fm_times(fm_contraction[T1, S1](mu!1, X!1(i)),
                                    fm_contraction[T2, S2](nu!1, Y!1(j))))
                          (UU(double_index_i(n!1), double_index_j(n!1))) = if i = double_index_i(n!1) & j = double_index_j(n!1) then (TRUE, mu!1(X!1(i))`2*nu!1(Y!1(j))`2) else (TRUE,0) endif")
                                                                              (("1"
                                                                                (case
                                                                                 "forall i:  x_sum(LAMBDA j:
                      to_measure[[T1, T2], sigma_times(S1, S2)]
                          (fm_times(fm_contraction[T1, S1](mu!1, X!1(i)),
                                    fm_contraction[T2, S2](nu!1, Y!1(j))))
                          (UU(double_index_i(n!1), double_index_j(n!1)))) = IF i = double_index_i(n!1)
           THEN (TRUE, mu!1(X!1(i))`2 * nu!1(Y!1(double_index_j(n!1)))`2)
         ELSE (TRUE, 0)
         ENDIF")
                                                                                (("1"
                                                                                  (case-replace
                                                                                   "(LAMBDA i:
              x_sum(LAMBDA j:
                      to_measure[[T1, T2], sigma_times(S1, S2)]
                          (fm_times(fm_contraction[T1, S1](mu!1, X!1(i)),
                                    fm_contraction[T2, S2](nu!1, Y!1(j))))
                          (UU(double_index_i(n!1), double_index_j(n!1)))))=lambda i: IF i = double_index_i(n!1)
           THEN (TRUE, mu!1(X!1(i))`2 * nu!1(Y!1(double_index_j(n!1)))`2)
         ELSE (TRUE, 0)
         ENDIF")
                                                                                  (("1"
                                                                                    (hide
                                                                                     -1
                                                                                     -2)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "x_sum")
                                                                                      (("1"
                                                                                        (case-replace
                                                                                         "(FORALL (i_1: nat):
            IF i_1 = double_index_i(n!1) THEN TRUE ELSE TRUE ENDIF)")
                                                                                        (("1"
                                                                                          (prop)
                                                                                          (("1"
                                                                                            (lemma
                                                                                             "single_nz_series_conv"
                                                                                             ("a"
                                                                                              "(LAMBDA (i_1: nat):
                          IF i_1 = double_index_i(n!1)
                            THEN mu!1(X!1(i_1))`2 *
                                  nu!1(Y!1(double_index_j(n!1)))`2
                          ELSE 0
                          ENDIF)"
                                                                                              "n"
                                                                                              "double_index_i(n!1)"))
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (hide
                                                                                                 2)
                                                                                                (("1"
                                                                                                  (skosimp)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (replace
                                                                                           1)
                                                                                          (("2"
                                                                                            (skosimp)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (apply-extensionality
                                                                                     :hide?
                                                                                     t)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "measurable_set?")
                                                                                      (("1"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (expand
                                                                                       "measurable_set?")
                                                                                      (("2"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("3"
                                                                                      (inst
                                                                                       -4
                                                                                       "double_index_i(n!1)"
                                                                                       "double_index_j(n!1)")
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide
                                                                                   2)
                                                                                  (("2"
                                                                                    (skosimp)
                                                                                    (("2"
                                                                                      (inst
                                                                                       -
                                                                                       "i!1"
                                                                                       "_")
                                                                                      (("2"
                                                                                        (hide
                                                                                         -4
                                                                                         -6
                                                                                         -8
                                                                                         -9)
                                                                                        (("2"
                                                                                          (case-replace
                                                                                           "(LAMBDA j:
              to_measure[[T1, T2], sigma_times(S1, S2)]
                  (fm_times(fm_contraction[T1, S1](mu!1, X!1(i!1)),
                            fm_contraction[T2, S2](nu!1, Y!1(j))))
                  (UU(double_index_i(n!1), double_index_j(n!1))))=lambda j: IF i!1 = double_index_i(n!1) & j = double_index_j(n!1)
           THEN (TRUE, mu!1(X!1(i!1))`2 * nu!1(Y!1(j))`2)
         ELSE (TRUE, 0)
         ENDIF")
                                                                                          (("1"
                                                                                            (hide
                                                                                             -1
                                                                                             -2)
                                                                                            (("1"
                                                                                              (hide
                                                                                               -1)
                                                                                              (("1"
                                                                                                (case-replace
                                                                                                 "i!1 = double_index_i(n!1)")
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -1
                                                                                                   *
                                                                                                   rl)
                                                                                                  (("1"
                                                                                                    (hide
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "x_sum")
                                                                                                      (("1"
                                                                                                        (lift-if)
                                                                                                        (("1"
                                                                                                          (lift-if
                                                                                                           1)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (lemma
                                                                                                               "single_nz_series_conv"
                                                                                                               ("a"
                                                                                                                "LAMBDA i:
                             IF i = double_index_j(n!1)
                               THEN mu!1(X!1(i!1))`2 * nu!1(Y!1(i))`2
                             ELSE 0
                             ENDIF"
                                                                                                                "n"
                                                                                                                "double_index_j(n!1)"))
                                                                                                              (("1"
                                                                                                                (lemma
                                                                                                                 "single_nz_series_limit"
                                                                                                                 ("a"
                                                                                                                  "LAMBDA i:
                             IF i = double_index_j(n!1)
                               THEN mu!1(X!1(i!1))`2 * nu!1(Y!1(i))`2
                             ELSE 0
                             ENDIF"
                                                                                                                  "n"
                                                                                                                  "double_index_j(n!1)"))
                                                                                                                (("1"
                                                                                                                  (case-replace
                                                                                                                   "(FORALL (m:nat):
         double_index_j(n!1) /= m =>
          (LAMBDA i:
             IF i = double_index_j(n!1)
               THEN mu!1(X!1(i!1))`2 * nu!1(Y!1(i))`2
             ELSE 0
             ENDIF)
              (m)
           = 0)")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (hide
                                                                                                                     2
                                                                                                                     -1
                                                                                                                     -2)
                                                                                                                    (("2"
                                                                                                                      (skosimp)
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "x_sum")
                                                                                                    (("2"
                                                                                                      (rewrite
                                                                                                       "zero_series_conv")
                                                                                                      (("2"
                                                                                                        (rewrite
                                                                                                         "zero_series_limit")
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (apply-extensionality
                                                                                             :hide?
                                                                                             t)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "measurable_set?")
                                                                                              (("1"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (expand
                                                                                               "measurable_set?")
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -5
                                                                                                 "i!1")
                                                                                                nil
                                                                                                nil))
                                                                                              nil)
                                                                                             ("3"
                                                                                              (inst
                                                                                               -3
                                                                                               "double_index_i(n!1)"
                                                                                               "double_index_j(n!1)")
                                                                                              nil
                                                                                              nil))
                                                                                            nil)
                                                                                           ("3"
                                                                                            (expand
                                                                                             "measurable_set?")
                                                                                            (("3"
                                                                                              (inst
                                                                                               -5
                                                                                               "i!1")
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide
                                                                                 2)
                                                                                (("2"
                                                                                  (skosimp)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "to_measure")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "fm_times")
                                                                                      (("2"
                                                                                        (lift-if)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "UU")
                                                                                            (("2"
                                                                                              (lemma
                                                                                               "rectangle_measure1"
                                                                                               ("M"
                                                                                                "cross_product(X!1(double_index_i(n!1)),
                                           Y!1(double_index_j(n!1)))"
                                                                                                "X"
                                                                                                "X!1(double_index_i(n!1))"
                                                                                                "Y"
                                                                                                "Y!1(double_index_j(n!1))"
                                                                                                "mu"
                                                                                                "fm_contraction[T1, S1](mu!1, X!1(i!1))"
                                                                                                "nu"
                                                                                                "fm_contraction[T2, S2](nu!1, Y!1(j!1))"))
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (hide
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "fm_contraction")
                                                                                                      (("1"
                                                                                                        (case-replace
                                                                                                         "double_index_i(n!1)=i!1")
                                                                                                        (("1"
                                                                                                          (rewrite
                                                                                                           "intersection_idempotent")
                                                                                                          (("1"
                                                                                                            (case-replace
                                                                                                             "double_index_j(n!1)=j!1")
                                                                                                            (("1"
                                                                                                              (rewrite
                                                                                                               "intersection_idempotent")
                                                                                                              nil
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "disjoint?"
                                                                                                                 -9)
                                                                                                                (("2"
                                                                                                                  (inst
                                                                                                                   -9
                                                                                                                   "j!1"
                                                                                                                   "double_index_j(n!1)")
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "disjoint?")
                                                                                                                      (("2"
                                                                                                                        (rewrite
                                                                                                                         "emptyset_is_empty?")
                                                                                                                        (("2"
                                                                                                                          (replace
                                                                                                                           -9)
                                                                                                                          (("2"
                                                                                                                            (typepred
                                                                                                                             "nu!1")
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "sigma_finite_measure?")
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 "measure?")
                                                                                                                                (("2"
                                                                                                                                  (flatten)
                                                                                                                                  (("2"
                                                                                                                                    (expand
                                                                                                                                     "measure_empty?")
                                                                                                                                    (("2"
                                                                                                                                      (replace
                                                                                                                                       -1)
                                                                                                                                      (("2"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "disjoint?"
                                                                                                             -7)
                                                                                                            (("2"
                                                                                                              (inst
                                                                                                               -7
                                                                                                               "i!1"
                                                                                                               "double_index_i(n!1)")
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "disjoint?")
                                                                                                                  (("2"
                                                                                                                    (rewrite
                                                                                                                     "emptyset_is_empty?")
                                                                                                                    (("2"
                                                                                                                      (replace
                                                                                                                       -7)
                                                                                                                      (("2"
                                                                                                                        (typepred
                                                                                                                         "mu!1")
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "sigma_finite_measure?")
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             "measure?")
                                                                                                                            (("2"
                                                                                                                              (flatten)
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 "measure_empty?")
                                                                                                                                (("2"
                                                                                                                                  (replace
                                                                                                                                   -1)
                                                                                                                                  (("2"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (expand
                                                                                                 "measurable_set?")
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -4
                                                                                                   "j!1")
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("3"
                                                                                                (expand
                                                                                                 "measurable_set?")
                                                                                                (("3"
                                                                                                  (inst
                                                                                                   -6
                                                                                                   "i!1")
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("4"
                                                                                                (inst
                                                                                                 -2
                                                                                                 "double_index_i(n!1)"
                                                                                                 "double_index_j(n!1)")
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("3"
                                                                                (skosimp)
                                                                                (("3"
                                                                                  (expand
                                                                                   "measurable_set?")
                                                                                  (("3"
                                                                                    (inst
                                                                                     -4
                                                                                     "j!1")
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("4"
                                                                                (expand
                                                                                 "measurable_set?")
                                                                                (("4"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("5"
                                                                                (inst
                                                                                 -
                                                                                 "double_index_i(n!1)"
                                                                                 "double_index_j(n!1)")
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (split)
                                                                          (("1"
                                                                            (skolem
                                                                             +
                                                                             "n!1")
                                                                            (("1"
                                                                              (expand
                                                                               "single_index")
                                                                              (("1"
                                                                                (inst
                                                                                 -
                                                                                 "double_index_i(n!1)"
                                                                                 "double_index_j(n!1)")
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (expand
                                                                             "disjoint_indexed_measurable?")
                                                                            (("2"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide-all-but
                                                                       (-6
                                                                        -7
                                                                        1))
                                                                      (("2"
                                                                        (expand
                                                                         "disjoint?")
                                                                        (("2"
                                                                          (skosimp)
                                                                          (("2"
                                                                            (expand
                                                                             "single_index")
                                                                            (("2"
                                                                              (expand
                                                                               "UU")
                                                                              (("2"
                                                                                (case-replace
                                                                                 "double_index_i(j!1)=double_index_i(i!1)")
                                                                                (("1"
                                                                                  (lemma
                                                                                   "double_index_n_ij"
                                                                                   ("n"
                                                                                    "i!1"))
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "double_index_n_ij"
                                                                                     ("n"
                                                                                      "j!1"))
                                                                                    (("1"
                                                                                      (replace
                                                                                       -3)
                                                                                      (("1"
                                                                                        (case-replace
                                                                                         "double_index_j(j!1)=double_index_j(i!1)")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil)
                                                                                         ("2"
                                                                                          (inst
                                                                                           -5
                                                                                           "double_index_j(i!1)"
                                                                                           "double_index_j(j!1)")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (hide-all-but
                                                                                               (-5
                                                                                                3))
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "cross_product")
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "disjoint?")
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "intersection")
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "empty?")
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "member")
                                                                                                        (("2"
                                                                                                          (skosimp)
                                                                                                          (("2"
                                                                                                            (inst
                                                                                                             -
                                                                                                             "x!1`2")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (inst
                                                                                   -1
                                                                                   "double_index_i(i!1)"
                                                                                   "double_index_i(j!1)")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (hide-all-but
                                                                                       (-1
                                                                                        3))
                                                                                      (("2"
                                                                                        (expand
                                                                                         "cross_product")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "disjoint?")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "intersection")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "empty?")
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "member")
                                                                                                (("2"
                                                                                                  (skosimp)
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     -
                                                                                                     "x!1`1")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (skosimp)
                                                                  (("2"
                                                                    (inst
                                                                     -
                                                                     "i!1"
                                                                     "j!1")
                                                                    (("2"
                                                                      (expand
                                                                       "UU")
                                                                      (("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 2)
                                (("2"
                                  (skosimp)
                                  (("2"
                                    (expand "sigma_times")
                                    (("2"
                                      (lemma
                                       "generated_sigma_algebra_subset1"
                                       ("X"
                                        "(extend
                                  [setof[[T1, T2]],
                                   measurable_rectangle[T1, T2](S1, S2),
                                   bool, FALSE]
                                  (fullset
                                       [measurable_rectangle
                                        [T1, T2](S1, S2)]))"))
                                      (("2"
                                        (expand "subset?")
                                        (("2"
                                          (inst
                                           -
                                           "cross_product(X!1(i!1), Y!1(j!1))")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (hide 2)
                                              (("2"
                                                (expand "fullset")
                                                (("2"
                                                  (expand "extend")
                                                  (("2"
                                                    (prop)
                                                    (("2"
                                                      (expand
                                                       "measurable_rectangle?")
                                                      (("2"
                                                        (inst
                                                         +
                                                         "X!1(i!1)"
                                                         "Y!1(j!1)")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (skosimp)
          (("2"
            (lemma "x_sum_measure"
             ("F"
              "lambda j: to_measure[[T1, T2], sigma_times[T1, T2](S1, S2)]
                         (product_measure_approx(mu!1, nu!1)(i!1, j))"))
            (("2" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((S2 formal-const-decl "sigma_algebra[T2]" product_measure nil)
    (S1 formal-const-decl "sigma_algebra[T1]" product_measure nil)
    (sigma_times const-decl "sigma_algebra[[T1, T2]]" product_sigma_def
     nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T2 formal-type-decl nil product_measure nil)
    (T1 formal-type-decl nil product_measure nil)
    (product_measure_approx const-decl
     "finite_measure[[T1, T2], sigma_times(S1, S2)]" product_measure
     nil)
    (sigma_finite_measure nonempty-type-eq-decl nil measure_def nil)
    (sigma_finite_measure? const-decl "bool" measure_def nil)
    (to_measure const-decl "measure_type" generalized_measure_def nil)
    (finite_measure nonempty-type-eq-decl nil generalized_measure_def
     nil)
    (finite_measure? const-decl "bool" generalized_measure_def nil)
    (x_sum const-decl "extended_nnreal" extended_nnreal
     extended_nnreal)
    (sequence type-eq-decl nil sequences nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     nil)
    (measure? const-decl "bool" generalized_measure_def nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (nnreal type-eq-decl nil real_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (x_sum_measure formula-decl nil generalized_measure_def nil)
    (set type-eq-decl nil sets nil)
    (cross_product const-decl "set[[T1, T2]]" cross_product topology)
    (sigma_algebra_IUnion_rew application-judgement "(S)"
     product_measure nil)
    (member const-decl "bool" sets nil)
    (measure_sigma_finite? const-decl "bool" measure_def nil)
    (double_index_n_ij formula-decl nil code_product extended_nnreal)
    (empty? const-decl "bool" sets nil)
    (UU skolem-const-decl "[[nat, nat] -> set[[T1, T2]]]"
     product_measure nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (fm_times const-decl
     "finite_measure[[T1, T2], sigma_times(S1, S2)]"
     product_finite_measure nil)
    (measurable_set? const-decl "bool" measure_space_def nil)
    (measurable_set nonempty-type-eq-decl nil measure_space_def nil)
    (fm_contraction const-decl "finite_measure" measure_contraction
     nil)
    (double_index_i const-decl "nat" code_product extended_nnreal)
    (double_index_j const-decl "nat" code_product extended_nnreal)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (TRUE const-decl "bool" booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (zero_series_conv formula-decl nil series series)
    (zero_series_limit formula-decl nil series series)
    (/= const-decl "boolean" notequal nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (single_nz_series_limit formula-decl nil series_lems series)
    (i!1 skolem-const-decl "nat" product_measure nil)
    (single_nz_series_conv formula-decl nil series_lems series)
    (n!1 skolem-const-decl "nat" product_measure nil)
    (X!1 skolem-const-decl "disjoint_indexed_measurable[T1, S1]"
     product_measure nil)
    (mu!1 skolem-const-decl "sigma_finite_measure[T1, S1]"
     product_measure nil)
    (Y!1 skolem-const-decl "disjoint_indexed_measurable[T2, S2]"
     product_measure nil)
    (nu!1 skolem-const-decl "sigma_finite_measure[T2, S2]"
     product_measure nil)
    (rectangle_measure1 formula-decl nil product_finite_measure nil)
    (subset_algebra_intersection application-judgement "(S)"
     product_measure nil)
    (subset_algebra_emptyset name-judgement "(S)" product_measure nil)
    (measurable_emptyset name-judgement "measurable_set"
     product_measure nil)
    (intersection_idempotent formula-decl nil sets_lemmas nil)
    (subset_algebra_intersection application-judgement "(S)"
     product_measure nil)
    (disjoint? const-decl "bool" sets nil)
    (measure_empty? const-decl "bool" generalized_measure_def nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (finite_emptyset name-judgement "finite_set" countable_props
     sets_aux)
    (finite_emptyset name-judgement "finite_set" sigma_countable
     sigma_set)
    (finite_emptyset name-judgement "finite_set" countable_setofsets
     sets_aux)
    (subset_algebra_emptyset name-judgement "(S)" product_measure nil)
    (measurable_emptyset name-judgement "measurable_set"
     product_measure nil)
    (emptyset_is_empty? formula-decl nil sets_lemmas nil)
    (intersection const-decl "set" sets nil)
    (subset_algebra_fullset name-judgement "(sigma_times(S1, S2))"
     product_measure nil)
    (measurable_fullset name-judgement
     "measurable_set[[T1, T2], sigma_times(S1, S2)]" product_measure
     nil)
    (subset_algebra_fullset name-judgement "(S2)" product_measure nil)
    (measurable_fullset name-judgement "measurable_set[T2, S2]"
     product_measure nil)
    (subset_algebra_fullset name-judgement "(S1)" product_measure nil)
    (measurable_fullset name-judgement "measurable_set[T1, S1]"
     product_measure nil)
    (double_index_n const-decl "nat" code_product extended_nnreal)
    (double_index_ij_n formula-decl nil code_product extended_nnreal)
    (extensionality_postulate formula-decl nil functions nil)
    (single_index const-decl "[nat -> T]" double_index extended_nnreal)
    (disjoint? const-decl "bool" indexed_sets_aux sets_aux)
    (fullset const-decl "set" sets nil)
    (IUnion const-decl "set[T]" indexed_sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (choose_member formula-decl nil sets_lemmas nil)
    (sigma_algebra_IUnion_rew application-judgement "(S)"
     product_measure nil)
    (nonempty? const-decl "bool" sets nil)
    (A_of_TCC1 subtype-tcc nil measure_def nil)
    (generated_sigma_algebra_subset1 formula-decl nil
     subset_algebra_def nil)
    (measurable_rectangle? const-decl "bool" product_sigma_def nil)
    (measurable_rectangle nonempty-type-eq-decl nil product_sigma_def
     nil)
    (FALSE const-decl "bool" booleans nil)
    (extend const-decl "R" extend nil)
    (subset? const-decl "bool" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (A_of const-decl "disjoint_indexed_measurable" measure_def nil)
    (disjoint_indexed_measurable nonempty-type-eq-decl nil
     generalized_measure_def nil)
    (disjoint_indexed_measurable? const-decl "bool"
     generalized_measure_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil))
   shostak
   (m_times subtype
    "LAMBDA M: extended_nnreal.x_sum(LAMBDA i: extended_nnreal.x_sum(LAMBDA j: generalized_measure_def[[product_measure.T1, product_measure.T2], product_sigma_def[product_measure.T1, product_measure.T2].sigma_times(product_measure.S1, product_measure.S2)].to_measure(product_measure.product_measure_approx(product_measure.mu, product_measure.nu)(product_measure.i, product_measure.j))(product_measure.M)))"
    "sigma_finite_measure[[T1, T2], sigma_times[T1, T2](S1, S2)]"))
  (m_times_TCC1-1 nil 3456295627
   ("" (skosimp)
    ((""
      (lemma "x_sum_measure"
       ("F" "LAMBDA i: lambda M: 
                     x_sum(LAMBDA j:
                             to_measure[[T1, T2], sigma_times(S1, S2)]
                                 (product_measure_approx(mu!1, nu!1)(i, j))(M))
                                 "))
      (("1" (assert)
        (("1" (expand "sigma_finite_measure?")
          (("1" (hide -1)
            (("1" (expand "product_measure_approx")
              (("1" (typepred "A_of(nu!1)")
                (("1" (typepred "A_of(mu!1)")
                  (("1" (name "X!1" "A_of(mu!1)")
                    (("1" (name "Y!1" "A_of(nu!1)")
                      (("1" (replace -1)
                        (("1" (replace -2)
                          (("1" (expand "disjoint_indexed_measurable?")
                            (("1"
                              (case "forall i,j: sigma_times(S1, S2)(cross_product(X!1(i),Y!1(j)))")
                              (("1"
                                (lemma "A_of_TCC1[T2,S2]" ("f" "nu!1"))
                                (("1"
                                  (lemma
                                   "A_of_TCC1[T1,S1]"
                                   ("f" "mu!1"))
                                  (("1"
                                    (expand "nonempty?")
                                    (("1"
                                      (expand "A_of")
                                      (("1"
                                        (lemma
                                         "choose_member"
                                         ("a"
                                          "{X: disjoint_indexed_measurable[T1, S1] |
                IUnion[nat, T1](X) = fullset[T1] AND
                 (FORALL i: mu!1(X(i))`1)}"))
                                        (("1"
                                          (replace -4)
                                          (("1"
                                            (replace 1)
                                            (("1"
                                              (lemma
                                               "choose_member"
                                               ("a"
                                                "{X: disjoint_indexed_measurable[T2, S2] |
                IUnion[nat, T2](X) = fullset[T2] AND
                 (FORALL i: nu!1(X(i))`1)}"))
                                              (("1"
                                                (replace -4)
                                                (("1"
                                                  (replace 2)
                                                  (("1"
                                                    (hide -4 -5 1 2)
                                                    (("1"
                                                      (expand "member")
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (expand
                                                           "measure_sigma_finite?")
                                                          (("1"
                                                            (name
                                                             "UU"
                                                             "lambda i,j: cross_product(X!1(i), Y!1(j))")
                                                            (("1"
                                                              (hide -1)
                                                              (("1"
                                                                (case
                                                                 "FORALL i, j: sigma_times(S1, S2)(UU(i,j))")
                                                                (("1"
                                                                  (hide
                                                                   -6)
                                                                  (("1"
                                                                    (case
                                                                     "disjoint?(single_index(UU))")
                                                                    (("1"
                                                                      (inst
                                                                       +
                                                                       "single_index(UU)")
                                                                      (("1"
                                                                        (split)
                                                                        (("1"
                                                                          (apply-extensionality
                                                                           :hide?
                                                                           t)
                                                                          (("1"
                                                                            (lemma
                                                                             "extensionality_postulate"
                                                                             ("f"
                                                                              "IUnion[nat, T2](Y!1)"
                                                                              "g"
                                                                              "fullset[T2]"))
                                                                            (("1"
                                                                              (lemma
                                                                               "extensionality_postulate"
                                                                               ("f"
                                                                                "IUnion[nat, T1](X!1)"
                                                                                "g"
                                                                                "fullset[T1]"))
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (split
                                                                                   -2)
                                                                                  (("1"
                                                                                    (split
                                                                                     -4)
                                                                                    (("1"
                                                                                      (hide-all-but
                                                                                       (-1
                                                                                        -2
                                                                                        1))
                                                                                      (("1"
                                                                                        (expand
                                                                                         "fullset")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "single_index")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "IUnion")
                                                                                            (("1"
                                                                                              (inst
                                                                                               -
                                                                                               "x!2")
                                                                                              (("1"
                                                                                                (skolem
                                                                                                 -
                                                                                                 "j!1")
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -
                                                                                                   "x!1")
                                                                                                  (("1"
                                                                                                    (skolem
                                                                                                     -
                                                                                                     "i!1")
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       +
                                                                                                       "double_index_n(i!1,j!1)")
                                                                                                      (("1"
                                                                                                        (lemma
                                                                                                         "double_index_ij_n"
                                                                                                         ("i"
                                                                                                          "i!1"
                                                                                                          "j"
                                                                                                          "j!1"))
                                                                                                        (("1"
                                                                                                          (flatten)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (replace
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (replace
                                                                                                                 -2)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "UU")
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "cross_product")
                                                                                                                    (("1"
                                                                                                                      (propax)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (skolem
                                                                           +
                                                                           "n!1")
                                                                          (("2"
                                                                            (expand
                                                                             "single_index")
                                                                            (("2"
                                                                              (case
                                                                               "forall i,j: to_measure[[T1, T2], sigma_times(S1, S2)]
                          (fm_times(fm_contraction[T1, S1](mu!1, X!1(i)),
                                    fm_contraction[T2, S2](nu!1, Y!1(j))))
                          (UU(double_index_i(n!1), double_index_j(n!1))) = if i = double_index_i(n!1) & j = double_index_j(n!1) then (TRUE, mu!1(X!1(i))`2*nu!1(Y!1(j))`2) else (TRUE,0) endif")
                                                                              (("1"
                                                                                (case
                                                                                 "forall i:  x_sum(LAMBDA j:
                      to_measure[[T1, T2], sigma_times(S1, S2)]
                          (fm_times(fm_contraction[T1, S1](mu!1, X!1(i)),
                                    fm_contraction[T2, S2](nu!1, Y!1(j))))
                          (UU(double_index_i(n!1), double_index_j(n!1)))) = IF i = double_index_i(n!1)
           THEN (TRUE, mu!1(X!1(i))`2 * nu!1(Y!1(double_index_j(n!1)))`2)
         ELSE (TRUE, 0)
         ENDIF")
                                                                                (("1"
                                                                                  (case-replace
                                                                                   "(LAMBDA i:
              x_sum(LAMBDA j:
                      to_measure[[T1, T2], sigma_times(S1, S2)]
                          (fm_times(fm_contraction[T1, S1](mu!1, X!1(i)),
                                    fm_contraction[T2, S2](nu!1, Y!1(j))))
                          (UU(double_index_i(n!1), double_index_j(n!1)))))=lambda i: IF i = double_index_i(n!1)
           THEN (TRUE, mu!1(X!1(i))`2 * nu!1(Y!1(double_index_j(n!1)))`2)
         ELSE (TRUE, 0)
         ENDIF")
                                                                                  (("1"
                                                                                    (hide
                                                                                     -1
                                                                                     -2)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "x_sum")
                                                                                      (("1"
                                                                                        (case-replace
                                                                                         "(FORALL (i_1: nat):
            IF i_1 = double_index_i(n!1) THEN TRUE ELSE TRUE ENDIF)")
                                                                                        (("1"
                                                                                          (prop)
                                                                                          (("1"
                                                                                            (lemma
                                                                                             "single_nz_series_conv"
                                                                                             ("a"
                                                                                              "(LAMBDA (i_1: nat):
                          IF i_1 = double_index_i(n!1)
                            THEN mu!1(X!1(i_1))`2 *
                                  nu!1(Y!1(double_index_j(n!1)))`2
                          ELSE 0
                          ENDIF)"
                                                                                              "n"
                                                                                              "double_index_i(n!1)"))
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (hide
                                                                                                 2)
                                                                                                (("1"
                                                                                                  (skosimp)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (replace
                                                                                           1)
                                                                                          (("2"
                                                                                            (skosimp)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (apply-extensionality
                                                                                     :hide?
                                                                                     t)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "measurable_set?")
                                                                                      (("1"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (expand
                                                                                       "measurable_set?")
                                                                                      (("2"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("3"
                                                                                      (inst
                                                                                       -4
                                                                                       "double_index_i(n!1)"
                                                                                       "double_index_j(n!1)")
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide
                                                                                   2)
                                                                                  (("2"
                                                                                    (skosimp)
                                                                                    (("2"
                                                                                      (inst
                                                                                       -
                                                                                       "i!1"
                                                                                       "_")
                                                                                      (("2"
                                                                                        (hide
                                                                                         -4
                                                                                         -6
                                                                                         -8
                                                                                         -9)
                                                                                        (("2"
                                                                                          (case-replace
                                                                                           "(LAMBDA j:
              to_measure[[T1, T2], sigma_times(S1, S2)]
                  (fm_times(fm_contraction[T1, S1](mu!1, X!1(i!1)),
                            fm_contraction[T2, S2](nu!1, Y!1(j))))
                  (UU(double_index_i(n!1), double_index_j(n!1))))=lambda j: IF i!1 = double_index_i(n!1) & j = double_index_j(n!1)
           THEN (TRUE, mu!1(X!1(i!1))`2 * nu!1(Y!1(j))`2)
         ELSE (TRUE, 0)
         ENDIF")
                                                                                          (("1"
                                                                                            (hide
                                                                                             -1
                                                                                             -2)
                                                                                            (("1"
                                                                                              (hide
                                                                                               -1)
                                                                                              (("1"
                                                                                                (case-replace
                                                                                                 "i!1 = double_index_i(n!1)")
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -1
                                                                                                   *
                                                                                                   rl)
                                                                                                  (("1"
                                                                                                    (hide
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "x_sum")
                                                                                                      (("1"
                                                                                                        (lift-if)
                                                                                                        (("1"
                                                                                                          (lift-if
                                                                                                           1)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (lemma
                                                                                                               "single_nz_series_conv"
                                                                                                               ("a"
                                                                                                                "LAMBDA i:
                             IF i = double_index_j(n!1)
                               THEN mu!1(X!1(i!1))`2 * nu!1(Y!1(i))`2
                             ELSE 0
                             ENDIF"
                                                                                                                "n"
                                                                                                                "double_index_j(n!1)"))
                                                                                                              (("1"
                                                                                                                (lemma
                                                                                                                 "single_nz_series_limit"
                                                                                                                 ("a"
                                                                                                                  "LAMBDA i:
                             IF i = double_index_j(n!1)
                               THEN mu!1(X!1(i!1))`2 * nu!1(Y!1(i))`2
                             ELSE 0
                             ENDIF"
                                                                                                                  "n"
                                                                                                                  "double_index_j(n!1)"))
                                                                                                                (("1"
                                                                                                                  (case-replace
                                                                                                                   "(FORALL (m:nat):
         double_index_j(n!1) /= m =>
          (LAMBDA i:
             IF i = double_index_j(n!1)
               THEN mu!1(X!1(i!1))`2 * nu!1(Y!1(i))`2
             ELSE 0
             ENDIF)
              (m)
           = 0)")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (hide
                                                                                                                     2
                                                                                                                     -1
                                                                                                                     -2)
                                                                                                                    (("2"
                                                                                                                      (skosimp)
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "x_sum")
                                                                                                    (("2"
                                                                                                      (rewrite
                                                                                                       "zero_series_conv")
                                                                                                      (("2"
                                                                                                        (rewrite
                                                                                                         "zero_series_limit")
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (apply-extensionality
                                                                                             :hide?
                                                                                             t)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "measurable_set?")
                                                                                              (("1"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (expand
                                                                                               "measurable_set?")
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -5
                                                                                                 "i!1")
                                                                                                nil
                                                                                                nil))
                                                                                              nil)
                                                                                             ("3"
                                                                                              (inst
                                                                                               -3
                                                                                               "double_index_i(n!1)"
                                                                                               "double_index_j(n!1)")
                                                                                              nil
                                                                                              nil))
                                                                                            nil)
                                                                                           ("3"
                                                                                            (expand
                                                                                             "measurable_set?")
                                                                                            (("3"
                                                                                              (inst
                                                                                               -5
                                                                                               "i!1")
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide
                                                                                 2)
                                                                                (("2"
                                                                                  (skosimp)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "to_measure")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "fm_times")
                                                                                      (("2"
                                                                                        (lift-if)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "UU")
                                                                                            (("2"
                                                                                              (lemma
                                                                                               "rectangle_measure1"
                                                                                               ("M"
                                                                                                "cross_product(X!1(double_index_i(n!1)),
                                           Y!1(double_index_j(n!1)))"
                                                                                                "X"
                                                                                                "X!1(double_index_i(n!1))"
                                                                                                "Y"
                                                                                                "Y!1(double_index_j(n!1))"
                                                                                                "mu"
                                                                                                "fm_contraction[T1, S1](mu!1, X!1(i!1))"
                                                                                                "nu"
                                                                                                "fm_contraction[T2, S2](nu!1, Y!1(j!1))"))
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (hide
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "fm_contraction")
                                                                                                      (("1"
                                                                                                        (case-replace
                                                                                                         "double_index_i(n!1)=i!1")
                                                                                                        (("1"
                                                                                                          (rewrite
                                                                                                           "intersection_idempotent")
                                                                                                          (("1"
                                                                                                            (case-replace
                                                                                                             "double_index_j(n!1)=j!1")
                                                                                                            (("1"
                                                                                                              (rewrite
                                                                                                               "intersection_idempotent")
                                                                                                              nil
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "disjoint?"
                                                                                                                 -9)
                                                                                                                (("2"
                                                                                                                  (inst
                                                                                                                   -9
                                                                                                                   "j!1"
                                                                                                                   "double_index_j(n!1)")
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "disjoint?")
                                                                                                                      (("2"
                                                                                                                        (rewrite
                                                                                                                         "emptyset_is_empty?")
                                                                                                                        (("2"
                                                                                                                          (replace
                                                                                                                           -9)
                                                                                                                          (("2"
                                                                                                                            (typepred
                                                                                                                             "nu!1")
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "sigma_finite_measure?")
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 "measure?")
                                                                                                                                (("2"
                                                                                                                                  (flatten)
                                                                                                                                  (("2"
                                                                                                                                    (expand
                                                                                                                                     "measure_empty?")
                                                                                                                                    (("2"
                                                                                                                                      (replace
                                                                                                                                       -1)
                                                                                                                                      (("2"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "disjoint?"
                                                                                                             -7)
                                                                                                            (("2"
                                                                                                              (inst
                                                                                                               -7
                                                                                                               "i!1"
                                                                                                               "double_index_i(n!1)")
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "disjoint?")
                                                                                                                  (("2"
                                                                                                                    (rewrite
                                                                                                                     "emptyset_is_empty?")
                                                                                                                    (("2"
                                                                                                                      (replace
                                                                                                                       -7)
                                                                                                                      (("2"
                                                                                                                        (typepred
                                                                                                                         "mu!1")
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "sigma_finite_measure?")
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             "measure?")
                                                                                                                            (("2"
                                                                                                                              (flatten)
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 "measure_empty?")
                                                                                                                                (("2"
                                                                                                                                  (replace
                                                                                                                                   -1)
                                                                                                                                  (("2"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (expand
                                                                                                 "measurable_set?")
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -4
                                                                                                   "j!1")
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("3"
                                                                                                (expand
                                                                                                 "measurable_set?")
                                                                                                (("3"
                                                                                                  (inst
                                                                                                   -6
                                                                                                   "i!1")
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("4"
                                                                                                (inst
                                                                                                 -2
                                                                                                 "double_index_i(n!1)"
                                                                                                 "double_index_j(n!1)")
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("3"
                                                                                (skosimp)
                                                                                (("3"
                                                                                  (expand
                                                                                   "measurable_set?")
                                                                                  (("3"
                                                                                    (inst
                                                                                     -4
                                                                                     "j!1")
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("4"
                                                                                (expand
                                                                                 "measurable_set?")
                                                                                (("4"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("5"
                                                                                (inst
                                                                                 -
                                                                                 "double_index_i(n!1)"
                                                                                 "double_index_j(n!1)")
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (split)
                                                                          (("1"
                                                                            (skolem
                                                                             +
                                                                             "n!1")
                                                                            (("1"
                                                                              (expand
                                                                               "single_index")
                                                                              (("1"
                                                                                (inst
                                                                                 -
                                                                                 "double_index_i(n!1)"
                                                                                 "double_index_j(n!1)")
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (expand
                                                                             "disjoint_indexed_measurable?")
                                                                            (("2"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide-all-but
                                                                       (-6
                                                                        -7
                                                                        1))
                                                                      (("2"
                                                                        (expand
                                                                         "disjoint?")
                                                                        (("2"
                                                                          (skosimp)
                                                                          (("2"
                                                                            (expand
                                                                             "single_index")
                                                                            (("2"
                                                                              (expand
                                                                               "UU")
                                                                              (("2"
                                                                                (case-replace
                                                                                 "double_index_i(j!1)=double_index_i(i!1)")
                                                                                (("1"
                                                                                  (lemma
                                                                                   "double_index_n_ij"
                                                                                   ("n"
                                                                                    "i!1"))
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "double_index_n_ij"
                                                                                     ("n"
                                                                                      "j!1"))
                                                                                    (("1"
                                                                                      (replace
                                                                                       -3)
                                                                                      (("1"
                                                                                        (case-replace
                                                                                         "double_index_j(j!1)=double_index_j(i!1)")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil)
                                                                                         ("2"
                                                                                          (inst
                                                                                           -5
                                                                                           "double_index_j(i!1)"
                                                                                           "double_index_j(j!1)")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (hide-all-but
                                                                                               (-5
                                                                                                3))
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "cross_product")
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "disjoint?")
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "intersection")
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "empty?")
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "member")
                                                                                                        (("2"
                                                                                                          (skosimp)
                                                                                                          (("2"
                                                                                                            (inst
                                                                                                             -
                                                                                                             "x!1`2")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (inst
                                                                                   -1
                                                                                   "double_index_i(i!1)"
                                                                                   "double_index_i(j!1)")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (hide-all-but
                                                                                       (-1
                                                                                        3))
                                                                                      (("2"
                                                                                        (expand
                                                                                         "cross_product")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "disjoint?")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "intersection")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "empty?")
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "member")
                                                                                                (("2"
                                                                                                  (skosimp)
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     -
                                                                                                     "x!1`1")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (skosimp)
                                                                  (("2"
                                                                    (inst
                                                                     -
                                                                     "i!1"
                                                                     "j!1")
                                                                    (("2"
                                                                      (expand
                                                                       "UU")
                                                                      (("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 2)
                                (("2"
                                  (skosimp)
                                  (("2"
                                    (expand "sigma_times")
                                    (("2"
                                      (lemma
                                       "generated_sigma_algebra_subset1"
                                       ("X"
                                        "(extend
                                  [setof[[T1, T2]],
                                   measurable_rectangle[T1, T2](S1, S2),
                                   bool, FALSE]
                                  (fullset
                                       [measurable_rectangle
                                        [T1, T2](S1, S2)]))"))
                                      (("2"
                                        (expand "subset?")
                                        (("2"
                                          (inst
                                           -
                                           "cross_product(X!1(i!1), Y!1(j!1))")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (hide 2)
                                              (("2"
                                                (expand "fullset")
                                                (("2"
                                                  (expand "extend")
                                                  (("2"
                                                    (prop)
                                                    (("2"
                                                      (expand
                                                       "measurable_rectangle?")
                                                      (("2"
                                                        (inst
                                                         +
                                                         "X!1(i!1)"
                                                         "Y!1(j!1)")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (expand
                                                             "cross_product")
                                                            (("2"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (skosimp)
          (("2"
            (lemma "x_sum_measure"
             ("F"
              "lambda j: to_measure[[T1, T2], sigma_times[T1, T2](S1, S2)]
                         (product_measure_approx(mu!1, nu!1)(i!1, j))"))
            (("2" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((sigma_times const-decl "sigma_algebra[[T1, T2]]" product_sigma_def
     nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (setofsets type-eq-decl nil sets nil)
    (sigma_finite_measure nonempty-type-eq-decl nil measure_def nil)
    (sigma_finite_measure? const-decl "bool" measure_def nil)
    (to_measure const-decl "measure_type" generalized_measure_def nil)
    (finite_measure nonempty-type-eq-decl nil generalized_measure_def
     nil)
    (finite_measure? const-decl "bool" generalized_measure_def nil)
    (sequence type-eq-decl nil sequences nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     nil)
    (measure? const-decl "bool" generalized_measure_def nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (x_sum_measure formula-decl nil generalized_measure_def nil)
    (set type-eq-decl nil sets nil)
    (cross_product const-decl "set[[T1, T2]]" cross_product topology)
    (member const-decl "bool" sets nil)
    (measure_sigma_finite? const-decl "bool" measure_def nil)
    (double_index_n_ij formula-decl nil code_product extended_nnreal)
    (empty? const-decl "bool" sets nil)
    (fm_times const-decl
     "finite_measure[[T1, T2], sigma_times(S1, S2)]"
     product_finite_measure nil)
    (measurable_set? const-decl "bool" measure_space_def nil)
    (measurable_set nonempty-type-eq-decl nil measure_space_def nil)
    (fm_contraction const-decl "finite_measure" measure_contraction
     nil)
    (double_index_i const-decl "nat" code_product extended_nnreal)
    (double_index_j const-decl "nat" code_product extended_nnreal)
    (zero_series_conv formula-decl nil series series)
    (zero_series_limit formula-decl nil series series)
    (single_nz_series_limit formula-decl nil series_lems series)
    (single_nz_series_conv formula-decl nil series_lems series)
    (rectangle_measure1 formula-decl nil product_finite_measure nil)
    (disjoint? const-decl "bool" sets nil)
    (measure_empty? const-decl "bool" generalized_measure_def nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (intersection const-decl "set" sets nil)
    (double_index_n const-decl "nat" code_product extended_nnreal)
    (double_index_ij_n formula-decl nil code_product extended_nnreal)
    (extensionality_postulate formula-decl nil functions nil)
    (single_index const-decl "[nat -> T]" double_index extended_nnreal)
    (disjoint? const-decl "bool" indexed_sets_aux sets_aux)
    (fullset const-decl "set" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (A_of_TCC1 subtype-tcc nil measure_def nil)
    (generated_sigma_algebra_subset1 formula-decl nil
     subset_algebra_def nil)
    (measurable_rectangle? const-decl "bool" product_sigma_def nil)
    (measurable_rectangle nonempty-type-eq-decl nil product_sigma_def
     nil)
    (subset? const-decl "bool" sets nil)
    (A_of const-decl "disjoint_indexed_measurable" measure_def nil)
    (disjoint_indexed_measurable nonempty-type-eq-decl nil
     generalized_measure_def nil)
    (disjoint_indexed_measurable? const-decl "bool"
     generalized_measure_def nil))
   nil
   (m_times subtype
    "LAMBDA M: extended_nnreal.x_sum(LAMBDA i: extended_nnreal.x_sum(LAMBDA j: generalized_measure_def[[product_measure.T1, product_measure.T2], product_sigma_def[product_measure.T1, product_measure.T2].sigma_times(product_measure.S1, product_measure.S2)].to_measure(product_measure.product_measure_approx(product_measure.mu, product_measure.nu)(product_measure.i, product_measure.j))(product_measure.M)))"
    "sigma_finite_measure[[T1, T2], sigma_times[T1, T2](S1, S2)]")))
 (m_times_alt 0
  (m_times_alt-1 nil 3460264253
   ("" (skosimp)
    (("" (expand "m_times") (("" (rewrite "double_x_sum_eq") nil nil))
      nil))
    nil)
   ((m_times const-decl
     "sigma_finite_measure[[T1, T2], sigma_times(S1, S2)]"
     product_measure nil)
    (product_measure_approx const-decl
     "finite_measure[[T1, T2], sigma_times(S1, S2)]" product_measure
     nil)
    (sigma_finite_measure nonempty-type-eq-decl nil measure_def nil)
    (sigma_finite_measure? const-decl "bool" measure_def nil)
    (to_measure const-decl "measure_type" generalized_measure_def nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     nil)
    (measure? const-decl "bool" generalized_measure_def nil)
    (finite_measure nonempty-type-eq-decl nil generalized_measure_def
     nil)
    (finite_measure? const-decl "bool" generalized_measure_def nil)
    (S2 formal-const-decl "sigma_algebra[T2]" product_measure nil)
    (S1 formal-const-decl "sigma_algebra[T1]" product_measure nil)
    (sigma_times const-decl "sigma_algebra[[T1, T2]]" product_sigma_def
     nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (T2 formal-type-decl nil product_measure nil)
    (T1 formal-type-decl nil product_measure nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (nnreal type-eq-decl nil real_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (double_x_sum_eq formula-decl nil extended_nnreal extended_nnreal))
   shostak))
 (rectangle_measure_TCC1 0
  (rectangle_measure_TCC1-2 "" 3789904363
   ("" (skosimp)
    (("" (expand "sigma_times")
      ((""
        (lemma "generated_sigma_algebra_subset1"
         ("X" "(extend
                                  [setof[[T1, T2]],
                                   measurable_rectangle[T1, T2](S1, S2),
                                   bool, FALSE]
                                  (fullset
                                       [measurable_rectangle
                                        [T1, T2](S1, S2)]))"))
        (("" (expand "subset?")
          (("" (expand "member")
            (("" (inst - "cross_product[T1, T2](X!1, Y!1)")
              (("" (assert)
                (("" (hide 2)
                  (("" (expand "fullset")
                    (("" (expand "extend")
                      (("" (prop)
                        (("" (expand "measurable_rectangle?")
                          (("" (inst + "X!1" "Y!1")
                            (("" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sigma_times const-decl "sigma_algebra[[T1, T2]]" product_sigma_def
     nil)
    (subset? const-decl "bool" sets nil)
    (cross_product const-decl "set[[T1, T2]]" cross_product topology)
    (member const-decl "bool" sets nil)
    (generated_sigma_algebra_subset1 formula-decl nil
     subset_algebra_def nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (setof type-eq-decl nil defined_types nil)
    (setofsets type-eq-decl nil sets nil)
    (set type-eq-decl nil sets nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (measurable_rectangle? const-decl "bool" product_sigma_def nil)
    (S1 formal-const-decl "sigma_algebra[T1]" product_measure nil)
    (S2 formal-const-decl "sigma_algebra[T2]" product_measure nil)
    (measurable_rectangle nonempty-type-eq-decl nil product_sigma_def
     nil)
    (FALSE const-decl "bool" booleans nil)
    (extend const-decl "R" extend nil)
    (fullset const-decl "set" sets nil)
    (T1 formal-type-decl nil product_measure nil)
    (T2 formal-type-decl nil product_measure nil))
   shostak
   (rectangle_measure subtype
    "cross_product[product_measure.T1, product_measure.T2].cross_product(product_measure.X, product_measure.Y)"
    "(product_sigma_def[product_measure.T1, product_measure.T2].sigma_times(product_measure.S1, product_measure.S2))"))
  (rectangle_measure_TCC1-1 nil 3457153332
   ("" (skosimp)
    (("" (expand "sigma_times")
      ((""
        (lemma "generated_sigma_algebra_subset1"
         ("X" "(extend
                                  [setof[[T1, T2]],
                                   measurable_rectangle[T1, T2](S1, S2),
                                   bool, FALSE]
                                  (fullset
                                       [measurable_rectangle
                                        [T1, T2](S1, S2)]))"))
        (("" (expand "subset?")
          (("" (expand "member")
            (("" (inst - "cross_product[T1, T2](X!1, Y!1)")
              (("" (assert)
                (("" (hide 2)
                  (("" (expand "fullset")
                    (("" (expand "extend")
                      (("" (prop)
                        (("" (expand "measurable_rectangle?")
                          (("" (inst + "X!1" "Y!1")
                            (("" (assert)
                              ((""
                                (expand "cross_product")
                                (("" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sigma_times const-decl "sigma_algebra[[T1, T2]]" product_sigma_def
     nil)
    (subset? const-decl "bool" sets nil)
    (cross_product const-decl "set[[T1, T2]]" cross_product topology)
    (member const-decl "bool" sets nil)
    (generated_sigma_algebra_subset1 formula-decl nil
     subset_algebra_def nil)
    (setofsets type-eq-decl nil sets nil)
    (set type-eq-decl nil sets nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (measurable_rectangle? const-decl "bool" product_sigma_def nil)
    (measurable_rectangle nonempty-type-eq-decl nil product_sigma_def
     nil)
    (fullset const-decl "set" sets nil))
   nil
   (rectangle_measure subtype
    "cross_product[product_measure.T1, product_measure.T2].cross_product(product_measure.X, product_measure.Y)"
    "(product_sigma_def[product_measure.T1, product_measure.T2].sigma_times(product_measure.S1, product_measure.S2))")))
 (rectangle_measure 0
  (rectangle_measure-1 nil 3457153506
   ("" (skosimp)
    (("" (expand "m_times")
      (("" (expand "product_measure_approx")
        ((""
          (name "FF" "LAMBDA i,j:to_measure(fm_times
                                      (fm_contraction[T1, S1]
                                       (mu!1, A_of(mu!1)(i)),
                                       fm_contraction[T2, S2]
                                       (nu!1, A_of(nu!1)(j))))")
          (("1"
            (case "x_eq(x_sum(LAMBDA i:
                   x_sum(LAMBDA j: FF(i,j)(cross_product(X!1, Y!1)))),x_times(mu!1(X!1), nu!1(Y!1)))")
            (("1" (expand "FF") (("1" (propax) nil nil)) nil)
             ("2" (hide 2)
              (("2"
                (case "forall i,j: x_eq(FF(i, j)(cross_product(X!1, Y!1)),fm_contraction[T1, S1](mu!1, A_of(mu!1)(i))(X!1)*fm_contraction[T2, S2](nu!1, A_of(nu!1)(j))(Y!1))")
                (("1" (hide -2)
                  (("1"
                    (lemma "x_sum_eq"
                     ("S" "LAMBDA i:
                   x_sum(LAMBDA j: FF(i, j)(cross_product(X!1, Y!1)))"
                      "T"
                      "LAMBDA i:x_times(fm_contraction[T1, S1](mu!1, A_of(mu!1)(i))(X!1),nu!1(Y!1))"))
                    (("1" (split -1)
                      (("1"
                        (name-replace "LHS" "x_sum(LAMBDA i:
                   x_sum(LAMBDA j: FF(i, j)(cross_product(X!1, Y!1))))")
                        (("1"
                          (lemma "sigma_finite_contraction_def[T1,S1]"
                           ("nu" "mu!1" "E" "X!1"))
                          (("1"
                            (lemma "x_times_sum"
                             ("x" "nu!1(Y!1)" "S" "LAMBDA i:
                   (TRUE, fm_contraction(mu!1, A_of(mu!1)(i))(X!1))"
                              "T" "LAMBDA i:
                   x_times(fm_contraction[T1, S1]
                               (mu!1, A_of(mu!1)(i))(X!1),
                           nu!1(Y!1))"))
                            (("1" (split -1)
                              (("1"
                                (name-replace
                                 "DRL1"
                                 "x_sum(LAMBDA i:
                   x_times(fm_contraction[T1, S1]
                               (mu!1, A_of(mu!1)(i))(X!1),
                           nu!1(Y!1)))")
                                (("1"
                                  (name-replace
                                   "DRL2"
                                   "x_sum(LAMBDA i:
                   (TRUE, fm_contraction(mu!1, A_of(mu!1)(i))(X!1)))")
                                  (("1"
                                    (hide -4)
                                    (("1"
                                      (expand "x_times")
                                      (("1"
                                        (expand "x_eq")
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (case-replace "LHS`1")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (case-replace
                                                 "mu!1(X!1)`1")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (case-replace
                                                     "nu!1(Y!1)`1")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      (("2"
                                                        (prop)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  (("2"
                                                    (case-replace
                                                     "nu!1(Y!1)`1")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (prop)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (assert)
                                              (("2"
                                                (case-replace
                                                 "nu!1(Y!1)`1")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (case-replace
                                                     "DRL2`1")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  (("2"
                                                    (case-replace
                                                     "DRL2`1")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (prop)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 2)
                                (("2"
                                  (skosimp)
                                  (("2"
                                    (expand "x_times")
                                    (("2"
                                      (expand "x_times")
                                      (("2"
                                        (expand "x_eq")
                                        (("2"
                                          (case-replace "nu!1(Y!1)`1")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "measurable_set?")
                            (("2" (propax) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (hide 2)
                        (("2" (skosimp)
                          (("2" (expand "x_times")
                            (("2"
                              (lemma "x_sum_eq"
                               ("S"
                                "LAMBDA j: FF(i!1, j)(cross_product(X!1, Y!1))"
                                "T"
                                "lambda j: (TRUE,fm_contraction[T1, S1](mu!1, A_of(mu!1)(i!1))(X!1) *
              fm_contraction[T2, S2](nu!1, A_of(nu!1)(j))(Y!1))"))
                              (("2"
                                (split)
                                (("1"
                                  (name-replace
                                   "LHS"
                                   "x_sum(LAMBDA j: FF(i!1, j)(cross_product(X!1, Y!1)))")
                                  (("1"
                                    (inst - "i!1" "_")
                                    (("1"
                                      (name-replace
                                       "KX"
                                       "fm_contraction[T1, S1](mu!1, A_of(mu!1)(i!1))(X!1)")
                                      (("1"
                                        (lemma
                                         "x_times_sum"
                                         ("S"
                                          "LAMBDA j:(TRUE,fm_contraction[T2, S2](nu!1, A_of(nu!1)(j))(Y!1))"
                                          "x"
                                          "(TRUE,KX)"
                                          "T"
                                          "LAMBDA j:
                   (TRUE,
                    KX * fm_contraction[T2, S2](nu!1, A_of(nu!1)(j))(Y!1))"))
                                        (("1"
                                          (split)
                                          (("1"
                                            (name-replace
                                             "DRL1"
                                             "x_sum(LAMBDA j:
                   (TRUE,
                    KX * fm_contraction[T2, S2](nu!1, A_of(nu!1)(j))(Y!1)))")
                                            (("1"
                                              (lemma
                                               "sigma_finite_contraction_def"
                                               ("nu" "nu!1" "E" "Y!1"))
                                              (("1"
                                                (name-replace
                                                 "DRL2"
                                                 "x_sum(LAMBDA i:
                   (TRUE, fm_contraction(nu!1, A_of(nu!1)(i))(Y!1)))")
                                                (("1"
                                                  (hide -4)
                                                  (("1"
                                                    (expand "x_times")
                                                    (("1"
                                                      (expand "x_eq")
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (case-replace
                                                             "KX = 0")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              (("2"
                                                                (case-replace
                                                                 "DRL2`1")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand
                                                 "measurable_set?")
                                                (("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but 1)
                                            (("2"
                                              (skosimp)
                                              (("2"
                                                (expand "x_times")
                                                (("2"
                                                  (expand "x_eq")
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide 2)
                                  (("2"
                                    (skolem + "j!1")
                                    (("2"
                                      (inst - "i!1" "j!1")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "x_eq")
                                          (("2"
                                            (flatten)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide -1 2)
                  (("2" (skosimp)
                    (("2" (expand "FF")
                      (("2" (expand "to_measure")
                        (("2" (expand "x_eq")
                          (("2"
                            (lemma "rectangle_measure1"
                             ("M" "cross_product(X!1, Y!1)" "X" "X!1"
                              "Y" "Y!1" "mu"
                              "fm_contraction[T1, S1](mu!1, A_of(mu!1)(i!1))"
                              "nu"
                              "fm_contraction[T2, S2](nu!1, A_of(nu!1)(j!1))"))
                            (("2" (expand "fm_times")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (hide-all-but 1)
              (("3" (rewrite "rectangle_measure_TCC1") nil nil)) nil))
            nil)
           ("2" (hide 2)
            (("2" (skosimp)
              (("2" (expand "measurable_set?")
                (("2" (expand "A_of")
                  (("2" (lemma "A_of_TCC1[T2,S2]" ("f" "nu!1"))
                    (("2"
                      (lemma "choose_member"
                       ("a" "{X: disjoint_indexed_measurable[T2, S2] |
                     IUnion(X) = fullset[T2] AND (FORALL i: nu!1(X(i))`1)}"))
                      (("2" (split)
                        (("1" (expand "member")
                          (("1" (flatten)
                            (("1" (inst - "j!1") nil nil)) nil))
                          nil)
                         ("2" (expand "nonempty?")
                          (("2" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (hide 2)
            (("3" (skosimp)
              (("3" (expand "measurable_set?")
                (("3" (expand "A_of")
                  (("3" (lemma "A_of_TCC1[T1,S1]" ("f" "mu!1"))
                    (("3"
                      (lemma "choose_member"
                       ("a" "{X: disjoint_indexed_measurable[T1, S1] |
                     IUnion(X) = fullset[T1] AND (FORALL i: mu!1(X(i))`1)}"))
                      (("3" (split)
                        (("1" (expand "member")
                          (("1" (flatten)
                            (("1" (inst - "i!1") nil nil)) nil))
                          nil)
                         ("2" (expand "nonempty?")
                          (("2" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((m_times const-decl
     "sigma_finite_measure[[T1, T2], sigma_times(S1, S2)]"
     product_measure nil)
    (A_of const-decl "disjoint_indexed_measurable" measure_def nil)
    (disjoint_indexed_measurable nonempty-type-eq-decl nil
     generalized_measure_def nil)
    (disjoint_indexed_measurable? const-decl "bool"
     generalized_measure_def nil)
    (sigma_finite_measure nonempty-type-eq-decl nil measure_def nil)
    (sigma_finite_measure? const-decl "bool" measure_def nil)
    (fm_contraction const-decl "finite_measure" measure_contraction
     nil)
    (measurable_set nonempty-type-eq-decl nil measure_space_def nil)
    (measurable_set? const-decl "bool" measure_space_def nil)
    (set type-eq-decl nil sets nil)
    (fm_times const-decl
     "finite_measure[[T1, T2], sigma_times(S1, S2)]"
     product_finite_measure nil)
    (to_measure const-decl "measure_type" generalized_measure_def nil)
    (finite_measure nonempty-type-eq-decl nil generalized_measure_def
     nil)
    (finite_measure? const-decl "bool" generalized_measure_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     nil)
    (measure? const-decl "bool" generalized_measure_def nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (nnreal type-eq-decl nil real_types nil)
    (S2 formal-const-decl "sigma_algebra[T2]" product_measure nil)
    (S1 formal-const-decl "sigma_algebra[T1]" product_measure nil)
    (sigma_times const-decl "sigma_algebra[[T1, T2]]" product_sigma_def
     nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (T2 formal-type-decl nil product_measure nil)
    (T1 formal-type-decl nil product_measure nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (rectangle_measure_TCC1 subtype-tcc nil product_measure nil)
    (rectangle_measure1 formula-decl nil product_finite_measure nil)
    (sigma_finite_contraction_def formula-decl nil measure_contraction
     nil)
    (x_times const-decl "extended_nnreal" extended_nnreal
     extended_nnreal)
    (TRUE const-decl "bool" booleans nil)
    (x_times_sum formula-decl nil extended_nnreal extended_nnreal)
    (x_times const-decl "extended_nnreal" extended_nnreal
     extended_nnreal)
    (x_sum_eq formula-decl nil extended_nnreal extended_nnreal)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (x_eq const-decl "bool" extended_nnreal extended_nnreal)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (FF skolem-const-decl
     "[[nat, nat] -> measure_type[[T1, T2], sigma_times(S1, S2)]]"
     product_measure nil)
    (x_times const-decl "extended_nnreal" extended_nnreal
     extended_nnreal)
    (cross_product const-decl "set[[T1, T2]]" cross_product topology)
    (x_sum const-decl "extended_nnreal" extended_nnreal
     extended_nnreal)
    (x_eq const-decl "bool" extended_nnreal extended_nnreal)
    (sigma_algebra_IUnion_rew application-judgement "(S)"
     product_measure nil)
    (choose_member formula-decl nil sets_lemmas nil)
    (IUnion const-decl "set[T]" indexed_sets nil)
    (fullset const-decl "set" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (A_of_TCC1 subtype-tcc nil measure_def nil)
    (sigma_algebra_IUnion_rew application-judgement "(S)"
     product_measure nil)
    (product_measure_approx const-decl
     "finite_measure[[T1, T2], sigma_times(S1, S2)]" product_measure
     nil))
   shostak))
 (phi1_TCC1 0
  (phi1_TCC1-1 nil 3460264247
   ("" (skosimp)
    ((""
      (lemma "cross_product_is_sigma_times"
       ("X" "X!1" "Y" "fullset[T2]"))
      (("" (rewrite "phi_is_simple") nil nil)) nil))
    nil)
   ((S2 formal-const-decl "sigma_algebra[T2]" product_measure nil)
    (S1 formal-const-decl "sigma_algebra[T1]" product_measure nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T2 formal-type-decl nil product_measure nil)
    (T1 formal-type-decl nil product_measure nil)
    (fullset const-decl "set" sets nil) (set type-eq-decl nil sets nil)
    (cross_product_is_sigma_times formula-decl nil product_sigma nil)
    (measurable_fullset name-judgement "measurable_set[T2, S2]"
     product_measure nil)
    (subset_algebra_fullset name-judgement "(S2)" product_measure nil)
    (sigma_times const-decl "sigma_algebra[[T1, T2]]" product_sigma_def
     nil)
    (cross_product const-decl "set[[T1, T2]]" cross_product topology)
    (phi_is_simple judgement-tcc nil measure_space nil))
   nil
   (phi1 subtype
    "measure_space[[product_measure.T1, product_measure.T2], product_sigma_def[product_measure.T1, product_measure.T2].sigma_times(product_measure.S1, product_measure.S2)].phi(cross_product[product_measure.T1, product_measure.T2].cross_product(product_measure.X, sets[product_measure.T2].fullset))"
    "simple[[T1, T2], sigma_times[T1, T2](S1, S2)]")))
 (phi2_TCC1 0
  (phi2_TCC1-1 nil 3460264247
   ("" (skosimp)
    ((""
      (lemma "cross_product_is_sigma_times"
       ("Y" "Y!1" "X" "fullset[T1]"))
      (("" (rewrite "phi_is_simple") nil nil)) nil))
    nil)
   ((S2 formal-const-decl "sigma_algebra[T2]" product_measure nil)
    (S1 formal-const-decl "sigma_algebra[T1]" product_measure nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T2 formal-type-decl nil product_measure nil)
    (T1 formal-type-decl nil product_measure nil)
    (fullset const-decl "set" sets nil) (set type-eq-decl nil sets nil)
    (cross_product_is_sigma_times formula-decl nil product_sigma nil)
    (measurable_fullset name-judgement "measurable_set[T1, S1]"
     product_measure nil)
    (subset_algebra_fullset name-judgement "(S1)" product_measure nil)
    (sigma_times const-decl "sigma_algebra[[T1, T2]]" product_sigma_def
     nil)
    (cross_product const-decl "set[[T1, T2]]" cross_product topology)
    (phi_is_simple judgement-tcc nil measure_space nil))
   nil
   (phi2 subtype
    "measure_space[[product_measure.T1, product_measure.T2], product_sigma_def[product_measure.T1, product_measure.T2].sigma_times(product_measure.S1, product_measure.S2)].phi(cross_product[product_measure.T1, product_measure.T2].cross_product(sets[product_measure.T1].fullset, product_measure.Y))"
    "simple[[T1, T2], sigma_times[T1, T2](S1, S2)]"))))

