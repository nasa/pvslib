(outer_measure_props
 (m_outer_empty 0
  (m_outer_empty-1 nil 3396688507
   ("" (typepred "m")
    (("" (expand "outer_measure?")
      (("" (flatten)
        (("" (expand "om_empty?") (("" (propax) nil nil)) nil)) nil))
      nil))
    nil)
   ((om_empty? const-decl "bool" outer_measure_def nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil outer_measure_props nil)
    (set type-eq-decl nil sets nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (outer_measure? const-decl "bool" outer_measure_def nil)
    (outer_measure nonempty-type-eq-decl nil outer_measure_def nil)
    (m formal-const-decl "outer_measure" outer_measure_props nil))
   shostak))
 (m_outer_increasing 0
  (m_outer_increasing-1 nil 3396688522
   ("" (typepred "m")
    (("" (expand "outer_measure?")
      (("" (flatten)
        (("" (expand "om_increasing?") (("" (propax) nil nil)) nil))
        nil))
      nil))
    nil)
   ((om_increasing? const-decl "bool" outer_measure_def nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil outer_measure_props nil)
    (set type-eq-decl nil sets nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (outer_measure? const-decl "bool" outer_measure_def nil)
    (outer_measure nonempty-type-eq-decl nil outer_measure_def nil)
    (m formal-const-decl "outer_measure" outer_measure_props nil))
   shostak))
 (m_outer_subadditive 0
  (m_outer_subadditive-1 nil 3396688484
   ("" (typepred "m")
    (("" (expand "outer_measure?")
      (("" (flatten)
        (("" (expand "om_countably_subadditive?")
          (("" (propax) nil nil)) nil))
        nil))
      nil))
    nil)
   ((om_countably_subadditive? const-decl "bool" outer_measure_def nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil outer_measure_props nil)
    (set type-eq-decl nil sets nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (outer_measure? const-decl "bool" outer_measure_def nil)
    (outer_measure nonempty-type-eq-decl nil outer_measure_def nil)
    (m formal-const-decl "outer_measure" outer_measure_props nil))
   shostak))
 (outer_negligible_TCC1 0
  (outer_negligible_TCC1-1 nil 3396763601
   ("" (expand "outer_negligible?")
    (("" (typepred "m")
      (("" (expand "outer_measure?")
        (("" (flatten)
          (("" (expand "om_empty?") (("" (propax) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((m formal-const-decl "outer_measure" outer_measure_props nil)
    (outer_measure nonempty-type-eq-decl nil outer_measure_def nil)
    (outer_measure? const-decl "bool" outer_measure_def nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (set type-eq-decl nil sets nil)
    (T formal-type-decl nil outer_measure_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (om_empty? const-decl "bool" outer_measure_def nil)
    (outer_negligible? const-decl "bool" outer_measure_props nil))
   nil
   (outer_negligible subtype "sets[outer_measure_props.T].emptyset"
    "outer_negligible")))
 (outer_measurable_TCC1 0
  (outer_measurable_TCC1-1 nil 3396585602
   ("" (expand "outer_measurable?")
    (("" (skosimp*)
      (("" (case-replace "intersection(y!1, emptyset[T])=emptyset[T]")
        (("1"
          (case-replace
           "intersection(y!1, complement(emptyset[T]))=y!1")
          (("1" (lemma "m_outer_empty")
            (("1" (replace -1)
              (("1" (expand "x_add")
                (("1" (expand "x_eq")
                  (("1" (hide-all-but 1) (("1" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide-all-but 1)
            (("2" (apply-extensionality :hide? t)
              (("2" (grind) nil nil)) nil))
            nil))
          nil)
         ("2" (hide-all-but 1)
          (("2" (apply-extensionality :hide? t) (("2" (grind) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((complement const-decl "set" sets nil)
    (x_eq const-decl "bool" extended_nnreal extended_nnreal)
    (x_add const-decl "extended_nnreal" extended_nnreal
     extended_nnreal)
    (m_outer_empty formula-decl nil outer_measure_props nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (finite_emptyset name-judgement "finite_set" countable_props
     sets_aux)
    (member const-decl "bool" sets nil)
    (emptyset const-decl "set" sets nil)
    (intersection const-decl "set" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil outer_measure_props nil)
    (finite_intersection1 application-judgement "finite_set[T]"
     countable_props sets_aux)
    (outer_measurable? const-decl "bool" outer_measure_props nil))
   nil
   (outer_measurable subtype "sets[outer_measure_props.T].emptyset"
    "outer_measurable")))
 (pairwise_subadditive 0
  (pairwise_subadditive-1 nil 3396787341
   ("" (skosimp*)
    ((""
      (lemma "m_outer_subadditive"
       ("A"
        "lambda i: if i=0 then intersection(y!1, x!1) elsif i=1 then intersection(y!1, complement(x!1)) else emptyset[T] endif"))
      ((""
        (case-replace "IUnion(LAMBDA i:
                      IF i = 0 THEN intersection(y!1, x!1)
                      ELSIF i = 1 THEN intersection(y!1, complement(x!1))
                      ELSE emptyset[T]
                      ENDIF) = y!1")
        (("1" (hide -1)
          (("1" (expand "o")
            (("1"
              (case-replace "x_sum(LAMBDA (i: nat):
                   IF i = 0 THEN m(intersection(y!1, x!1))
                   ELSE IF i = 1 THEN m(intersection(y!1, complement(x!1)))
                        ELSE m(emptyset[T])
                        ENDIF
                   ENDIF)=x_add(m(intersection(y!1, x!1)),
                 m(intersection(y!1, complement(x!1))))")
              (("1" (hide -1 2)
                (("1" (expand "x_sum")
                  (("1" (name-replace "AA" "intersection(y!1, x!1)")
                    (("1"
                      (name-replace "BB"
                       "intersection(y!1, complement(x!1))")
                      (("1" (lemma "m_outer_empty")
                        (("1" (replace -1)
                          (("1" (assert)
                            (("1" (expand "x_add")
                              (("1"
                                (case-replace "m(AA)`1")
                                (("1"
                                  (case-replace "m(BB)`1")
                                  (("1"
                                    (lift-if 1)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (lemma
                                         "zero_tail_series_conv"
                                         ("a"
                                          "(LAMBDA (i_1: nat):
                             IF i_1 = 0 THEN m(AA)`2
                             ELSE IF i_1 = 1 THEN m(BB)`2 ELSE 0 ENDIF
                             ENDIF)"
                                          "n"
                                          "1"))
                                        (("1"
                                          (case-replace
                                           "(FORALL (m_1: nat):
         1 < m_1 =>
          (LAMBDA (i_1: nat):
             IF i_1 = 0 THEN m(AA)`2
             ELSE IF i_1 = 1 THEN m(BB)`2 ELSE 0 ENDIF
             ENDIF)
              (m_1)
           = 0)")
                                          (("1"
                                            (replace -2)
                                            (("1"
                                              (hide -2)
                                              (("1"
                                                (lemma
                                                 "zero_tail_series_limit"
                                                 ("a"
                                                  "(LAMBDA (i_1: nat):
                             IF i_1 = 0 THEN m(AA)`2
                             ELSE IF i_1 = 1 THEN m(BB)`2 ELSE 0 ENDIF
                             ENDIF)"
                                                  "n"
                                                  "1"))
                                                (("1"
                                                  (replace -2 -1)
                                                  (("1"
                                                    (replace -1)
                                                    (("1"
                                                      (hide -1 -2)
                                                      (("1"
                                                        (expand
                                                         "series")
                                                        (("1"
                                                          (expand
                                                           "sigma")
                                                          (("1"
                                                            (expand
                                                             "sigma")
                                                            (("1"
                                                              (expand
                                                               "sigma")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 2 -1)
                                            (("2"
                                              (skosimp*)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (lift-if)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (prop)
                                          (("2"
                                            (inst - "1")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (assert)
                                  (("2"
                                    (lift-if)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (prop)
                                        (("2"
                                          (assert)
                                          (("2" (inst - "0") nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide-all-but 1)
          (("2" (apply-extensionality :hide? t)
            (("2" (expand "IUnion")
              (("2" (expand "intersection")
                (("2" (expand "complement")
                  (("2" (expand "emptyset")
                    (("2" (expand "member")
                      (("2" (case-replace "y!1(x!2)")
                        (("1" (case-replace "x!1(x!2)")
                          (("1" (inst + "0") nil nil)
                           ("2" (assert)
                            (("2" (inst + "1") (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((emptyset const-decl "set" sets nil)
    (complement const-decl "set" sets nil)
    (intersection const-decl "set" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (sequence type-eq-decl nil sequences nil)
    (set type-eq-decl nil sets nil)
    (T formal-type-decl nil outer_measure_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (m_outer_subadditive formula-decl nil outer_measure_props nil)
    (member const-decl "bool" sets nil)
    (nnreal type-eq-decl nil real_types nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (x_sum const-decl "extended_nnreal" extended_nnreal
     extended_nnreal)
    (outer_measure? const-decl "bool" outer_measure_def nil)
    (outer_measure nonempty-type-eq-decl nil outer_measure_def nil)
    (m formal-const-decl "outer_measure" outer_measure_props nil)
    (x_add const-decl "extended_nnreal" extended_nnreal
     extended_nnreal)
    (< const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sigma def-decl "real" sigma reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sigma_0_neg formula-decl nil sigma_nat reals)
    (series const-decl "sequence[real]" series series)
    (zero_tail_series_limit formula-decl nil series_lems series)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (zero_tail_series_conv formula-decl nil series_lems series)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (finite_emptyset name-judgement "finite_set" countable_props
     sets_aux)
    (m_outer_empty formula-decl nil outer_measure_props nil)
    (O const-decl "T3" function_props nil)
    (IUnion const-decl "set[T]" indexed_sets nil))
   shostak))
 (outer_measurable_def 0
  (outer_measurable_def-1 nil 3396788683
   ("" (skosimp*)
    (("" (expand "outer_measurable?")
      (("" (split)
        (("1" (skosimp*)
          (("1" (inst - "y!1") (("1" (grind) nil nil)) nil)) nil)
         ("2" (skosimp*)
          (("2" (inst - "y!1")
            (("2" (lemma "pairwise_subadditive" ("x" "x!1" "y" "y!1"))
              (("2"
                (lemma "x_le_antisymmetric"
                 ("x" "m(y!1)" "y" "x_add(m(intersection(y!1, x!1)),
                 m(intersection(y!1, complement(x!1))))"))
                (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((outer_measurable? const-decl "bool" outer_measure_props nil)
    (pairwise_subadditive formula-decl nil outer_measure_props nil)
    (x_le_antisymmetric formula-decl nil extended_nnreal
     extended_nnreal)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (outer_measure? const-decl "bool" outer_measure_def nil)
    (outer_measure nonempty-type-eq-decl nil outer_measure_def nil)
    (m formal-const-decl "outer_measure" outer_measure_props nil)
    (intersection const-decl "set" sets nil)
    (complement const-decl "set" sets nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (x_add const-decl "extended_nnreal" extended_nnreal
     extended_nnreal)
    (x_eq const-decl "bool" extended_nnreal extended_nnreal)
    (x_le const-decl "bool" extended_nnreal extended_nnreal)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil outer_measure_props nil))
   shostak))
 (outer_negligible_is_outer_measurable 0
  (outer_negligible_is_outer_measurable-1 nil 3396763601
   ("" (skosimp)
    (("" (typepred "x!1")
      (("" (rewrite "outer_measurable_def")
        (("" (skosimp)
          (("" (expand "outer_negligible?")
            ((""
              (lemma "m_outer_increasing"
               ("x" "intersection(y!1, x!1)" "y" "x!1"))
              (("" (split -1)
                (("1" (expand "x_le" -1)
                  (("1" (replace -2)
                    (("1" (assert)
                      (("1" (flatten)
                        (("1" (expand "x_add")
                          (("1" (replace -1)
                            (("1" (assert)
                              (("1"
                                (case-replace
                                 "m(intersection(y!1, x!1))`2 = 0")
                                (("1"
                                  (hide -1 -3 -2)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (lemma
                                       "m_outer_increasing"
                                       ("x"
                                        "intersection(y!1, complement(x!1))"
                                        "y"
                                        "y!1"))
                                      (("1"
                                        (split -1)
                                        (("1"
                                          (expand "x_le")
                                          (("1"
                                            (case-replace "m(y!1)`1")
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (replace -2)
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (replace 1)
                                              (("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but 1)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide 2 -3 -1)
                                  (("2"
                                    (typepred
                                     "m(intersection(y!1, x!1))`2")
                                    (("2"
                                      (name-replace
                                       "DRL"
                                       "m(intersection(y!1, x!1))`2")
                                      (("2"
                                        (lemma "reals_totally_ordered")
                                        (("2"
                                          (expand
                                           "strict_total_order?")
                                          (("2"
                                            (expand "trichotomous?")
                                            (("2"
                                              (expand "strict_order?")
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (expand ">=")
                                                  (("2"
                                                    (expand "<=")
                                                    (("2"
                                                      (replace 1)
                                                      (("2"
                                                        (split -4)
                                                        (("1"
                                                          (expand
                                                           "transitive?")
                                                          (("1"
                                                            (inst
                                                             -
                                                             "DRL"
                                                             "0"
                                                             "DRL")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (replace
                                                                 -4)
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((outer_negligible nonempty-type-eq-decl nil outer_measure_props
     nil)
    (outer_negligible? const-decl "bool" outer_measure_props nil)
    (set type-eq-decl nil sets nil)
    (T formal-type-decl nil outer_measure_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (intersection const-decl "set" sets nil)
    (m_outer_increasing formula-decl nil outer_measure_props nil)
    (x_le const-decl "bool" extended_nnreal extended_nnreal)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (x_add const-decl "extended_nnreal" extended_nnreal
     extended_nnreal)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (strict_total_order? const-decl "bool" orders nil)
    (strict_order? const-decl "bool" orders nil)
    (transitive? const-decl "bool" relations nil)
    (<= const-decl "bool" reals nil)
    (trichotomous? const-decl "bool" orders nil)
    (reals_totally_ordered formula-decl nil reals nil)
    (complement const-decl "set" sets nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (m formal-const-decl "outer_measure" outer_measure_props nil)
    (outer_measure nonempty-type-eq-decl nil outer_measure_def nil)
    (outer_measure? const-decl "bool" outer_measure_def nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (outer_measurable_def formula-decl nil outer_measure_props nil))
   nil
   (outer_negligible_is_outer_measurable subtype
    "outer_measure_props.x" "outer_measurable")))
 (outer_measurable_complement 0
  (outer_measurable_complement-1 nil 3396585602
   ("" (skosimp)
    (("" (typepred "a!1")
      (("" (expand "outer_measurable?")
        (("" (skosimp*)
          (("" (inst - "y!1")
            (("" (rewrite "complement_complement")
              (("" (lemma "x_add_commutative")
                (("" (expand "commutative?")
                  ((""
                    (inst - "m(intersection(y!1, a!1))"
                     "m(intersection(y!1, complement(a!1)))")
                    (("" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((outer_measurable nonempty-type-eq-decl nil outer_measure_props
     nil)
    (outer_measurable? const-decl "bool" outer_measure_props nil)
    (set type-eq-decl nil sets nil)
    (T formal-type-decl nil outer_measure_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (complement_complement formula-decl nil sets_lemmas nil)
    (commutative? const-decl "bool" operator_defs nil)
    (complement const-decl "set" sets nil)
    (intersection const-decl "set" sets nil)
    (m formal-const-decl "outer_measure" outer_measure_props nil)
    (outer_measure nonempty-type-eq-decl nil outer_measure_def nil)
    (outer_measure? const-decl "bool" outer_measure_def nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (x_add_commutative formula-decl nil extended_nnreal
     extended_nnreal))
   nil
   (outer_measurable_complement subtype
    "sets[outer_measure_props.T].complement(outer_measure_props.a)"
    "outer_measurable")))
 (outer_measurable_emptyset 0
  (outer_measurable_emptyset-1 nil 3408180473
   ("" (judgement-tcc)
    (("1" (rewrite "complement_emptyset")
      (("1" (rewrite "intersection_empty")
        (("1" (rewrite "intersection_full")
          (("1" (rewrite "m_outer_empty")
            (("1" (expand "x_add") (("1" (propax) nil nil)) nil)) nil))
          nil))
        nil))
      nil)
     ("2" (rewrite "complement_emptyset")
      (("2" (rewrite "intersection_full")
        (("2" (rewrite "intersection_empty")
          (("2" (rewrite "m_outer_empty")
            (("2" (expand "x_add") (("2" (propax) nil nil)) nil)) nil))
          nil))
        nil))
      nil)
     ("3" (rewrite "intersection_empty")
      (("3" (rewrite "m_outer_empty")
        (("3" (rewrite "complement_emptyset")
          (("3" (rewrite "intersection_full")
            (("3" (expand "x_add") (("3" (propax) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((T formal-type-decl nil outer_measure_props nil)
    (complement_emptyset formula-decl nil sets_lemmas nil)
    (intersection_full formula-decl nil sets_lemmas nil)
    (x_add const-decl "extended_nnreal" extended_nnreal
     extended_nnreal)
    (m_outer_empty formula-decl nil outer_measure_props nil)
    (intersection_empty formula-decl nil sets_lemmas nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (finite_intersection1 application-judgement "finite_set[T]"
     countable_props sets_aux)
    (finite_emptyset name-judgement "finite_set" countable_props
     sets_aux)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (outer_measurable? const-decl "bool" outer_measure_props nil)
    (x_eq const-decl "bool" extended_nnreal extended_nnreal))
   nil
   (outer_measurable_emptyset subtype
    "sets[outer_measure_props.T].emptyset" "outer_measurable")))
 (outer_measurable_fullset 0
  (outer_measurable_fullset-1 nil 3396585602
   ("" (lemma "outer_measurable_emptyset")
    (("" (lemma "outer_measurable_complement" ("a" "emptyset[T]"))
      (("" (rewrite "complement_emptyset") nil nil)) nil))
    nil)
   ((emptyset const-decl "set" sets nil)
    (outer_measurable nonempty-type-eq-decl nil outer_measure_props
     nil)
    (outer_measurable? const-decl "bool" outer_measure_props nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil outer_measure_props nil)
    (outer_measurable_complement judgement-tcc nil outer_measure_props
     nil)
    (outer_measurable_emptyset name-judgement "outer_measurable"
     outer_measure_props nil)
    (finite_emptyset name-judgement "finite_set" countable_props
     sets_aux)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (complement_emptyset formula-decl nil sets_lemmas nil)
    (outer_measurable_emptyset judgement-tcc nil outer_measure_props
     nil))
   nil
   (outer_measurable_fullset subtype
    "sets[outer_measure_props.T].fullset" "outer_measurable")))
 (outer_measurable_union 0
  (outer_measurable_union-1 nil 3396585602
   ("" (skosimp)
    (("" (typepred "b!1")
      (("" (typepred "a!1")
        (("" (expand "outer_measurable?")
          (("" (skosimp)
            (("" (inst-cp - "intersection(y!1,union(a!1,b!1))")
              ((""
                (case-replace
                 "intersection(intersection(y!1, union(a!1, b!1)), a!1)=intersection(y!1,a!1)")
                (("1"
                  (case-replace
                   "intersection(intersection(y!1, union(a!1, b!1)),
                                complement(a!1))=intersection(y!1,intersection(b!1,complement(a!1)))")
                  (("1" (hide -1 -2)
                    (("1" (inst - "y!1")
                      (("1"
                        (inst - "intersection(y!1,complement(a!1))")
                        (("1" (rewrite "intersection_associative")
                          (("1" (rewrite "intersection_associative")
                            (("1" (rewrite "demorgan1" -3 :dir rl)
                              (("1"
                                (lemma
                                 "intersection_commutative"
                                 ("a" "b!1" "b" "complement(a!1)"))
                                (("1"
                                  (replace -1)
                                  (("1"
                                    (hide -1)
                                    (("1"
                                      (expand "x_add")
                                      (("1"
                                        (expand "x_eq")
                                        (("1" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide-all-but 1)
                    (("2" (apply-extensionality :hide? t)
                      (("2" (grind) nil nil)) nil))
                    nil))
                  nil)
                 ("2" (hide-all-but 1)
                  (("2" (apply-extensionality :hide? t)
                    (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((outer_measurable nonempty-type-eq-decl nil outer_measure_props
     nil)
    (outer_measurable? const-decl "bool" outer_measure_props nil)
    (set type-eq-decl nil sets nil)
    (T formal-type-decl nil outer_measure_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (intersection const-decl "set" sets nil)
    (union const-decl "set" sets nil)
    (complement const-decl "set" sets nil)
    (outer_measurable_complement application-judgement
     "outer_measurable" outer_measure_props nil)
    (intersection_associative formula-decl nil sets_lemmas nil)
    (demorgan1 formula-decl nil sets_lemmas nil)
    (x_add const-decl "extended_nnreal" extended_nnreal
     extended_nnreal)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (x_eq const-decl "bool" extended_nnreal extended_nnreal)
    (intersection_commutative formula-decl nil sets_lemmas nil)
    (member const-decl "bool" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil))
   nil
   (outer_measurable_union subtype
    "sets[outer_measure_props.T].union(outer_measure_props.a, outer_measure_props.b)"
    "outer_measurable")))
 (outer_measurable_intersection 0
  (outer_measurable_intersection-1 nil 3396585602
   ("" (skosimp)
    (("" (typepred "b!1")
      (("" (typepred "a!1")
        (("" (lemma "outer_measurable_complement" ("a" "b!1"))
          (("" (lemma "outer_measurable_complement" ("a" "a!1"))
            ((""
              (lemma "outer_measurable_union"
               ("a" "complement[T](a!1)" "b" "complement[T](b!1)"))
              ((""
                (lemma "outer_measurable_complement"
                 ("a"
                  "union[T](complement[T](a!1), complement[T](b!1))"))
                (("" (rewrite "demorgan1")
                  (("" (rewrite "complement_complement")
                    (("" (rewrite "complement_complement") nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((outer_measurable nonempty-type-eq-decl nil outer_measure_props
     nil)
    (outer_measurable? const-decl "bool" outer_measure_props nil)
    (set type-eq-decl nil sets nil)
    (T formal-type-decl nil outer_measure_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (outer_measurable_complement judgement-tcc nil outer_measure_props
     nil)
    (outer_measurable_complement application-judgement
     "outer_measurable" outer_measure_props nil)
    (outer_measurable_union judgement-tcc nil outer_measure_props nil)
    (complement const-decl "set" sets nil)
    (demorgan1 formula-decl nil sets_lemmas nil)
    (complement_complement formula-decl nil sets_lemmas nil)
    (union const-decl "set" sets nil)
    (outer_measurable_union application-judgement "outer_measurable"
     outer_measure_props nil))
   nil
   (outer_measurable_intersection subtype
    "sets[outer_measure_props.T].intersection(outer_measure_props.a, outer_measure_props.b)"
    "outer_measurable")))
 (outer_measurable_difference 0
  (outer_measurable_difference-1 nil 3396585602
   ("" (skosimp)
    (("" (rewrite "difference_intersection")
      (("" (typepred "b!1")
        (("" (typepred "a!1")
          (("" (lemma "outer_measurable_complement" ("a" "b!1"))
            ((""
              (lemma "outer_measurable_intersection"
               ("a" "a!1" "b" "complement[T](b!1)"))
              (("" (propax) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((difference_intersection formula-decl nil sets_lemmas nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (outer_measurable? const-decl "bool" outer_measure_props nil)
    (outer_measurable nonempty-type-eq-decl nil outer_measure_props
     nil)
    (T formal-type-decl nil outer_measure_props nil)
    (outer_measurable_complement application-judgement
     "outer_measurable" outer_measure_props nil)
    (outer_measurable_intersection application-judgement
     "outer_measurable" outer_measure_props nil)
    (outer_measurable_intersection judgement-tcc nil
     outer_measure_props nil)
    (complement const-decl "set" sets nil)
    (outer_measurable_complement judgement-tcc nil outer_measure_props
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil))
   nil
   (outer_measurable_difference subtype
    "sets[outer_measure_props.T].difference(outer_measure_props.a, outer_measure_props.b)"
    "outer_measurable")))
 (outer_measurable_disjoint_union 0
  (outer_measurable_disjoint_union-1 nil 3396587624
   ("" (skosimp)
    (("" (typepred "a!1")
      (("" (expand "outer_measurable?")
        (("" (inst - "intersection(x!1,union(a!1,b!1))")
          ((""
            (case-replace
             "intersection(intersection(x!1, union(a!1, b!1)), a!1)=intersection(x!1,a!1)")
            (("1"
              (case-replace
               "intersection(intersection(x!1, union(a!1, b!1)),
                                complement(a!1))=intersection(x!1,intersection(b!1,complement(a!1)))")
              (("1" (hide -1 -2)
                (("1"
                  (case-replace
                   "intersection(x!1, intersection(b!1, complement(a!1)))=intersection(x!1, b!1)")
                  (("1" (hide-all-but (-2 1))
                    (("1" (apply-extensionality :hide? t)
                      (("1" (expand "disjoint?")
                        (("1" (expand "empty?")
                          (("1" (inst - "x!2") (("1" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide-all-but 1)
                (("2" (apply-extensionality :hide? t)
                  (("2" (grind) nil nil)) nil))
                nil))
              nil)
             ("2" (hide-all-but 1)
              (("2" (apply-extensionality :hide? t)
                (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((outer_measurable nonempty-type-eq-decl nil outer_measure_props
     nil)
    (outer_measurable? const-decl "bool" outer_measure_props nil)
    (set type-eq-decl nil sets nil)
    (T formal-type-decl nil outer_measure_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (outer_measurable_union application-judgement "outer_measurable"
     outer_measure_props nil)
    (intersection const-decl "set" sets nil)
    (union const-decl "set" sets nil)
    (complement const-decl "set" sets nil)
    (outer_measurable_intersection application-judgement
     "outer_measurable" outer_measure_props nil)
    (outer_measurable_complement application-judgement
     "outer_measurable" outer_measure_props nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (disjoint? const-decl "bool" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil))
   shostak))
 (outer_measurable_IUnion 0
  (outer_measurable_IUnion-1 nil 3396588211
   (""
    (case "forall X: increasing?(X)=>outer_measurable?(IUnion[nat, T](X))")
    (("1" (skosimp)
      (("1"
        (name "E"
              "lambda (n:nat): IUnion(lambda i: if i<=n then X!1(i) else emptyset[T] endif)")
        (("1" (inst - "E")
          (("1" (split -2)
            (("1" (hide -2)
              (("1"
                (case-replace "IUnion[nat, T](E)=IUnion[nat, T](X!1)")
                (("1" (hide -1 2)
                  (("1" (apply-extensionality :hide? t)
                    (("1" (expand "E")
                      (("1" (case-replace "IUnion[nat, T](X!1)(x!1)")
                        (("1" (expand "IUnion")
                          (("1" (expand "emptyset")
                            (("1" (skosimp)
                              (("1"
                                (inst + "i!1")
                                (("1"
                                  (inst + "i!1")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert)
                          (("2" (expand "IUnion")
                            (("2" (skosimp*)
                              (("2"
                                (expand "emptyset")
                                (("2"
                                  (prop)
                                  (("2" (inst + "i!2") nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide-all-but 1)
              (("2" (expand "increasing?")
                (("2" (expand "E")
                  (("2" (expand "IUnion")
                    (("2" (expand "emptyset")
                      (("2" (skolem + ("i" "j"))
                        (("2" (flatten)
                          (("2" (expand "subset?")
                            (("2" (expand "member")
                              (("2"
                                (skosimp*)
                                (("2"
                                  (prop)
                                  (("2"
                                    (inst + "i!1")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide-all-but 1)
            (("2" (case "E(0)=X!1(0)")
              (("1"
                (case "forall (n:nat): E(n+1)=union(E(n),X!1(n+1))")
                (("1" (induct "x1")
                  (("1" (assert) nil nil)
                   ("2" (skosimp)
                    (("2" (inst - "j!1")
                      (("2" (assert)
                        (("2"
                          (lemma "outer_measurable_union"
                           ("a" "E(j!1)" "b" "X!1(1 + j!1)"))
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 2)
                  (("2" (skosimp)
                    (("2" (expand "E")
                      (("2" (hide -1)
                        (("2" (expand "IUnion")
                          (("2" (expand "emptyset")
                            (("2" (expand "union")
                              (("2"
                                (expand "member")
                                (("2"
                                  (apply-extensionality :hide? t)
                                  (("2"
                                    (case-replace
                                     "(EXISTS (i_1: nat):
         IF i_1 <= 1 + n!1 THEN X!1(i_1)(x!1) ELSE FALSE ENDIF)")
                                    (("1"
                                      (skosimp)
                                      (("1"
                                        (prop)
                                        (("1"
                                          (expand "<=" -1)
                                          (("1"
                                            (split)
                                            (("1"
                                              (inst + "i!1")
                                              (("1" (assert) nil nil))
                                              nil)
                                             ("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (replace 1 2)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (split)
                                          (("1"
                                            (skosimp)
                                            (("1"
                                              (prop)
                                              (("1"
                                                (inst + "i!1")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (inst + "1+n!1")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (expand "E")
                  (("2" (expand "IUnion")
                    (("2" (expand "emptyset")
                      (("2" (apply-extensionality :hide? t)
                        (("2" (case-replace "X!1(0)(x!1)")
                          (("1" (inst + "0") (("1" (assert) nil nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2"
        (case "forall X: disjoint?(X)=> outer_measurable?(IUnion[nat, T](X))")
        (("1" (skosimp)
          (("1"
            (name "E"
                  "lambda i: if i=0 then X!1(0) else difference(X!1(i),X!1(i-1)) endif")
            (("1" (inst - "E")
              (("1" (hide -1)
                (("1" (split)
                  (("1"
                    (case-replace
                     "IUnion[nat, T](E)=IUnion[nat, T](X!1)")
                    (("1" (hide -1 2)
                      (("1" (apply-extensionality :hide? t)
                        (("1" (case-replace "IUnion[nat, T](X!1)(x!1)")
                          (("1" (expand "IUnion")
                            (("1" (expand "E")
                              (("1"
                                (expand "difference")
                                (("1"
                                  (expand "member")
                                  (("1"
                                    (skosimp)
                                    (("1"
                                      (case-replace "i!1=0")
                                      (("1" (inst + "0") nil nil)
                                       ("2"
                                        (name
                                         "II"
                                         "{n:nat| n <= i!1 & X!1(n)(x!1)}")
                                        (("2"
                                          (lemma
                                           "every_nonempty_set_has_least[nat]")
                                          (("2"
                                            (inst - "II")
                                            (("1"
                                              (expand "has_least?")
                                              (("1"
                                                (skosimp)
                                                (("1"
                                                  (typepred "t!1")
                                                  (("1"
                                                    (expand "least?")
                                                    (("1"
                                                      (expand
                                                       "restrict")
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (expand
                                                           "lower_bound?")
                                                          (("1"
                                                            (inst
                                                             +
                                                             "t!1")
                                                            (("1"
                                                              (hide -4)
                                                              (("1"
                                                                (expand
                                                                 "II")
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (case-replace
                                                                       "t!1=0")
                                                                      (("1"
                                                                        (case
                                                                         "NOT II(t!1-1)")
                                                                        (("1"
                                                                          (expand
                                                                           "II")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (expand
                                                                           "II")
                                                                          (("2"
                                                                            (inst
                                                                             -
                                                                             "t!1-1")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (expand
                                                                                 "II")
                                                                                (("2"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("3"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but (-2 1))
                                              (("2"
                                                (expand "nonempty?")
                                                (("2"
                                                  (expand "empty?")
                                                  (("2"
                                                    (inst - "i!1")
                                                    (("2"
                                                      (expand "member")
                                                      (("2"
                                                        (expand "II")
                                                        (("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert)
                            (("2" (expand "E")
                              (("2"
                                (expand "IUnion")
                                (("2"
                                  (skosimp)
                                  (("2"
                                    (case-replace "i!1 = 0")
                                    (("1" (inst + "0") nil nil)
                                     ("2"
                                      (assert)
                                      (("2"
                                        (expand "difference")
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (expand "member")
                                            (("2"
                                              (inst + "i!1")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (expand "disjoint?")
                      (("2"
                        (case "forall (i,j:nat): disjoint?(E(i),E(i+1+j))")
                        (("1" (skosimp)
                          (("1"
                            (lemma "trich_lt" ("x" "i!1" "y" "j!1"))
                            (("1" (split -1)
                              (("1"
                                (inst - "i!1" "j!1-i!1-1")
                                (("1" (assert) nil nil)
                                 ("2" (assert) nil nil))
                                nil)
                               ("2" (propax) nil nil)
                               ("3"
                                (inst - "j!1" "i!1-j!1-1")
                                (("1"
                                  (simplify -2)
                                  (("1"
                                    (expand "disjoint?")
                                    (("1"
                                      (rewrite
                                       "intersection_commutative")
                                      nil
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide 2)
                          (("2" (skolem + ("i" "_"))
                            (("2" (induct "j")
                              (("1"
                                (expand "disjoint?")
                                (("1"
                                  (expand "increasing?")
                                  (("1"
                                    (expand "E")
                                    (("1"
                                      (case-replace "i=0")
                                      (("1"
                                        (inst - "0" "1")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "subset?")
                                            (("1"
                                              (expand "intersection")
                                              (("1"
                                                (expand "difference")
                                                (("1"
                                                  (expand "empty?")
                                                  (("1"
                                                    (expand "member")
                                                    (("1"
                                                      (skosimp)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (assert)
                                        (("2"
                                          (expand "subset?")
                                          (("2"
                                            (expand "difference")
                                            (("2"
                                              (expand "intersection")
                                              (("2"
                                                (expand "empty?")
                                                (("2"
                                                  (expand "member")
                                                  (("2"
                                                    (skosimp*)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (skosimp)
                                (("2"
                                  (expand "increasing?")
                                  (("2"
                                    (expand "disjoint?")
                                    (("2"
                                      (expand "subset?")
                                      (("2"
                                        (expand "intersection")
                                        (("2"
                                          (expand "E")
                                          (("2"
                                            (expand "difference")
                                            (("2"
                                              (expand "empty?")
                                              (("2"
                                                (expand "member")
                                                (("2"
                                                  (skosimp*)
                                                  (("2"
                                                    (case-replace
                                                     "i=0")
                                                    (("1"
                                                      (inst
                                                       -5
                                                       "0"
                                                       "1+j!1")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (inst
                                                           -5
                                                           "x!1")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      (("2"
                                                        (flatten)
                                                        (("2"
                                                          (inst
                                                           -4
                                                           "i"
                                                           "1+i+j!1")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (inst
                                                               -4
                                                               "x!1")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skosimp) (("2" (assert) nil nil)) nil))
            nil))
          nil)
         ("2" (hide 2)
          (("2" (skosimp)
            (("2" (expand "outer_measurable?")
              (("2" (skolem + ("a"))
                (("2" (typepred "m")
                  (("2" (name "E" "IUnion[nat, T](X!1)")
                    (("2" (replace -1)
                      (("2"
                        (name "En"
                              "lambda (n:nat): IUnion(lambda i: if i<=n then X!1(i) else emptyset[T] endif)")
                        (("2" (case "increasing?(En) & IUnion(En) = E")
                          (("1" (flatten)
                            (("1" (case "En(0)=X!1(0)")
                              (("1"
                                (case
                                 "forall (n:nat): disjoint?(En(n),X!1(n+1)) & union(En(n),X!1(n+1))=En(n+1)")
                                (("1"
                                  (case
                                   "forall (n:nat): outer_measurable?(En(n))")
                                  (("1"
                                    (case
                                     "forall (n:nat): x_eq(m(intersection(a,En(n))),x_sigma(0,n,lambda i: m(intersection(a,X!1(i)))))")
                                    (("1"
                                      (case
                                       "forall (n:nat): subset?(intersection(a, En(n)),E)")
                                      (("1"
                                        (case
                                         "forall (n:nat): x_le(m(intersection(a, complement(E))),m(intersection(a, complement(En(n)))))")
                                        (("1"
                                          (case
                                           "forall (n:nat): x_le(x_add(m(intersection(a, En(n))),m(intersection(a, complement(E)))),m(a))")
                                          (("1"
                                            (case
                                             "x_le(x_add(x_sum(lambda i: m(intersection(a,X!1(i)))),
                   m(intersection(a, complement(E)))),m(a))")
                                            (("1"
                                              (expand "outer_measure?")
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (expand
                                                   "om_countably_subadditive?")
                                                  (("1"
                                                    (case
                                                     "x_le( m(intersection(a,E)),x_sum(LAMBDA i: m(intersection(a, X!1(i)))))")
                                                    (("1"
                                                      (hide
                                                       -3
                                                       -4
                                                       -5
                                                       -6
                                                       -12)
                                                      (("1"
                                                        (case
                                                         "x_le(x_add(m(intersection(a,E)),m(intersection(a,complement(E)))),
           x_add(x_sum(LAMBDA i: m(intersection(a, X!1(i)))),m(intersection(a,complement(E)))))")
                                                        (("1"
                                                          (hide -2)
                                                          (("1"
                                                            (case
                                                             "x_le(m(a),x_add(m(intersection(a, E)), m(intersection(a, complement(E)))))")
                                                            (("1"
                                                              (name-replace
                                                               "INT1"
                                                               "x_add(m(intersection(a, E)), m(intersection(a, complement(E))))")
                                                              (("1"
                                                                (name-replace
                                                                 "INT2"
                                                                 "x_add(x_sum(LAMBDA i: m(intersection(a, X!1(i)))),
                 m(intersection(a, complement(E))))")
                                                                (("1"
                                                                  (hide-all-but
                                                                   (-1
                                                                    -2
                                                                    -3
                                                                    1))
                                                                  (("1"
                                                                    (lemma
                                                                     "x_le_preorder")
                                                                    (("1"
                                                                      (expand
                                                                       "preorder?")
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (expand
                                                                           "transitive?")
                                                                          (("1"
                                                                            (inst
                                                                             -
                                                                             "INT1"
                                                                             "INT2"
                                                                             "m(a)")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (lemma
                                                                                 "x_le_antisymmetric"
                                                                                 ("x"
                                                                                  "m(a)"
                                                                                  "y"
                                                                                  "INT1"))
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide 2)
                                                              (("2"
                                                                (hide-all-but
                                                                 1)
                                                                (("2"
                                                                  (lemma
                                                                   "pairwise_subadditive"
                                                                   ("y"
                                                                    "a"
                                                                    "x"
                                                                    "E"))
                                                                  (("2"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           (-1 1))
                                                          (("2"
                                                            (name-replace
                                                             "LHS"
                                                             "m(intersection(a, E))")
                                                            (("2"
                                                              (name-replace
                                                               "RHS"
                                                               "x_sum(LAMBDA i: m(intersection(a, X!1(i))))")
                                                              (("2"
                                                                (name-replace
                                                                 "ADD"
                                                                 "m(intersection(a, complement(E)))")
                                                                (("2"
                                                                  (expand
                                                                   "x_add")
                                                                  (("2"
                                                                    (expand
                                                                     "x_le")
                                                                    (("2"
                                                                      (case-replace
                                                                       "RHS`1")
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (prop)
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide 2)
                                                      (("2"
                                                        (inst
                                                         -15
                                                         "LAMBDA i: intersection(a, X!1(i))")
                                                        (("2"
                                                          (expand
                                                           "o"
                                                           -15)
                                                          (("2"
                                                            (name-replace
                                                             "RHS"
                                                             "x_sum(LAMBDA i: m(intersection(a, X!1(i))))")
                                                            (("2"
                                                              (case-replace
                                                               "IUnion(LAMBDA i: intersection(a, X!1(i)))=intersection(a, E)")
                                                              (("2"
                                                                (hide
                                                                 2)
                                                                (("2"
                                                                  (apply-extensionality
                                                                   :hide?
                                                                   t)
                                                                  (("2"
                                                                    (hide-all-but
                                                                     (-12
                                                                      1))
                                                                    (("2"
                                                                      (expand
                                                                       "intersection")
                                                                      (("2"
                                                                        (expand
                                                                         "member")
                                                                        (("2"
                                                                          (case-replace
                                                                           "a(x!1)")
                                                                          (("1"
                                                                            (case-replace
                                                                             "E(x!1)")
                                                                            (("1"
                                                                              (replace
                                                                               -3
                                                                               *
                                                                               rl)
                                                                              (("1"
                                                                                (hide
                                                                                 -3)
                                                                                (("1"
                                                                                  (expand
                                                                                   "IUnion")
                                                                                  (("1"
                                                                                    (skosimp)
                                                                                    (("1"
                                                                                      (inst
                                                                                       +
                                                                                       "i!1")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (replace
                                                                                 -3
                                                                                 *
                                                                                 rl)
                                                                                (("2"
                                                                                  (hide
                                                                                   -3)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "IUnion")
                                                                                    (("2"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (hide
                                                                               -2)
                                                                              (("2"
                                                                                (expand
                                                                                 "IUnion")
                                                                                (("2"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 2)
                                              (("2"
                                                (name-replace
                                                 "macE"
                                                 "m(intersection(a, complement(E)))")
                                                (("2"
                                                  (expand "x_le" 1)
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (expand
                                                         "x_add"
                                                         (-2 1))
                                                        (("2"
                                                          (expand
                                                           "x_le"
                                                           -2)
                                                          (("2"
                                                            (case-replace
                                                             "macE`1")
                                                            (("1"
                                                              (expand
                                                               "x_sum")
                                                              (("1"
                                                                (case-replace
                                                                 "(FORALL (i_1: nat): m(intersection(a, X!1(i_1)))`1)")
                                                                (("1"
                                                                  (case-replace
                                                                   "series(LAMBDA (i_2: nat):
                                  m(intersection(a, X!1(i_2)))`2)=lambda i: m(intersection(a, En(i)))`2")
                                                                  (("1"
                                                                    (hide
                                                                     -1)
                                                                    (("1"
                                                                      (lift-if)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (case
                                                                           " FORALL (n: nat):m(intersection(a, En(n)))`1")
                                                                          (("1"
                                                                            (case
                                                                             "FORALL (n: nat):m(intersection(a, En(n)))`2 + macE`2<=m(a)`2")
                                                                            (("1"
                                                                              (hide
                                                                               -6
                                                                               -15)
                                                                              (("1"
                                                                                (case
                                                                                 "bounded_above?(LAMBDA i: m(intersection(a, En(i)))`2)")
                                                                                (("1"
                                                                                  (lemma
                                                                                   "increasing_bounded_convergence"
                                                                                   ("v1"
                                                                                    "LAMBDA i: m(intersection(a, En(i)))`2"))
                                                                                  (("1"
                                                                                    (case-replace
                                                                                     "increasing?(LAMBDA i: m(intersection(a, En(i)))`2)")
                                                                                    (("1"
                                                                                      (case-replace
                                                                                       "convergence_sequences.convergent?(LAMBDA (i_1: nat): m(intersection(a, En(i_1)))`2)")
                                                                                      (("1"
                                                                                        (rewrite
                                                                                         "limit_def"
                                                                                         -3
                                                                                         :dir
                                                                                         rl)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -3)
                                                                                          (("1"
                                                                                            (hide
                                                                                             -1
                                                                                             -3)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "sup")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "Im")
                                                                                                (("1"
                                                                                                  (typepred
                                                                                                   "lub({z:real | EXISTS (n: nat): z = m(intersection(a, En(n)))`2})")
                                                                                                  (("1"
                                                                                                    (name-replace
                                                                                                     "LUB"
                                                                                                     "lub({z: real |
                                EXISTS (n: nat):
                                  z = m(intersection(a, En(n)))`2})")
                                                                                                    (("1"
                                                                                                      (hide-all-but
                                                                                                       (-1
                                                                                                        -4
                                                                                                        1))
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "least_upper_bound?")
                                                                                                        (("1"
                                                                                                          (flatten)
                                                                                                          (("1"
                                                                                                            (case
                                                                                                             "LUB>m(a)`2-macE`2")
                                                                                                            (("1"
                                                                                                              (hide
                                                                                                               1)
                                                                                                              (("1"
                                                                                                                (inst
                                                                                                                 -3
                                                                                                                 "m(a)`2 - macE`2")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "upper_bound?")
                                                                                                                    (("1"
                                                                                                                      (skosimp)
                                                                                                                      (("1"
                                                                                                                        (typepred
                                                                                                                         "s!1")
                                                                                                                        (("1"
                                                                                                                          (skosimp)
                                                                                                                          (("1"
                                                                                                                            (inst
                                                                                                                             -4
                                                                                                                             "n!1")
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (hide
                                                                                                     2)
                                                                                                    (("2"
                                                                                                      (split)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "nonempty?")
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "empty?")
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "member")
                                                                                                            (("1"
                                                                                                              (inst
                                                                                                               -
                                                                                                               "m(intersection[T](a, En(0)))`2")
                                                                                                              (("1"
                                                                                                                (inst
                                                                                                                 +
                                                                                                                 "0")
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (expand
                                                                                                         "bounded_above?")
                                                                                                        (("2"
                                                                                                          (skosimp)
                                                                                                          (("2"
                                                                                                            (inst
                                                                                                             +
                                                                                                             "a!1")
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "upper_bound?")
                                                                                                              (("2"
                                                                                                                (skosimp)
                                                                                                                (("2"
                                                                                                                  (typepred
                                                                                                                   "s!1")
                                                                                                                  (("2"
                                                                                                                    (skosimp)
                                                                                                                    (("2"
                                                                                                                      (inst
                                                                                                                       -3
                                                                                                                       "n!1")
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide
                                                                                         2)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "convergence_sequences.convergent?")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "sup")
                                                                                            (("2"
                                                                                              (inst
                                                                                               +
                                                                                               "lub(Im(LAMBDA i: m(intersection(a, En(i)))`2))")
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide
                                                                                       2)
                                                                                      (("2"
                                                                                        (hide
                                                                                         -1)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "outer_measure?")
                                                                                          (("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "om_increasing?")
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "increasing?")
                                                                                                (("2"
                                                                                                  (skosimp)
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     -14
                                                                                                     "x!1"
                                                                                                     "y!1")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (inst
                                                                                                         -18
                                                                                                         "intersection(a, En(x!1))"
                                                                                                         "intersection(a, En(y!1))")
                                                                                                        (("2"
                                                                                                          (split
                                                                                                           -18)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "x_le"
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (inst
                                                                                                               -4
                                                                                                               "y!1")
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (hide-all-but
                                                                                                             (-14
                                                                                                              1))
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "intersection")
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "subset?")
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "member")
                                                                                                                  (("2"
                                                                                                                    (skosimp)
                                                                                                                    (("2"
                                                                                                                      (inst
                                                                                                                       -
                                                                                                                       "x!2")
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide
                                                                                   2)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "bounded_above?")
                                                                                    (("2"
                                                                                      (inst
                                                                                       +
                                                                                       "m(a)`2")
                                                                                      (("2"
                                                                                        (skosimp)
                                                                                        (("2"
                                                                                          (inst
                                                                                           -
                                                                                           "x!1")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide
                                                                               2)
                                                                              (("2"
                                                                                (skosimp)
                                                                                (("2"
                                                                                  (inst
                                                                                   -
                                                                                   "n!1")
                                                                                  (("2"
                                                                                    (inst
                                                                                     -5
                                                                                     "n!1")
                                                                                    (("2"
                                                                                      (replace
                                                                                       -1)
                                                                                      (("2"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (skosimp)
                                                                            (("2"
                                                                              (inst
                                                                               -4
                                                                               "n!1")
                                                                              (("2"
                                                                                (replace
                                                                                 1)
                                                                                (("2"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide
                                                                     2)
                                                                    (("2"
                                                                      (apply-extensionality
                                                                       :hide?
                                                                       t)
                                                                      (("2"
                                                                        (expand
                                                                         "series")
                                                                        (("2"
                                                                          (inst
                                                                           -7
                                                                           "x!1")
                                                                          (("2"
                                                                            (inst
                                                                             -
                                                                             "x!1")
                                                                            (("2"
                                                                              (expand
                                                                               "x_eq"
                                                                               -7)
                                                                              (("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (expand
                                                                                   "outer_measure?")
                                                                                  (("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "om_increasing?")
                                                                                      (("2"
                                                                                        (inst
                                                                                         -17
                                                                                         "intersection(a, En(x!1))"
                                                                                         "a")
                                                                                        (("2"
                                                                                          (split
                                                                                           -17)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "x_le"
                                                                                             -1)
                                                                                            (("1"
                                                                                              (flatten)
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -10)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "x_sigma")
                                                                                                      (("1"
                                                                                                        (lift-if)
                                                                                                        (("1"
                                                                                                          (prop)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (hide-all-but
                                                                                             1)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "subset?")
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "intersection")
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "member")
                                                                                                  (("2"
                                                                                                    (skosimp)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   2)
                                                                  (("2"
                                                                    (skolem
                                                                     +
                                                                     ("n!1"))
                                                                    (("2"
                                                                      (inst
                                                                       -6
                                                                       "0")
                                                                      (("2"
                                                                        (expand
                                                                         "outer_measure?")
                                                                        (("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (expand
                                                                             "om_increasing?")
                                                                            (("2"
                                                                              (inst
                                                                               -15
                                                                               "intersection(a, X!1(n!1))"
                                                                               "a")
                                                                              (("2"
                                                                                (split
                                                                                 -15)
                                                                                (("1"
                                                                                  (expand
                                                                                   "x_le")
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide-all-but
                                                                                   1)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "intersection")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "subset?")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "member")
                                                                                        (("2"
                                                                                          (skosimp)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide 2)
                                                              (("2"
                                                                (inst
                                                                 -
                                                                 "0")
                                                                (("2"
                                                                  (replace
                                                                   1)
                                                                  (("2"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 2)
                                            (("2"
                                              (skosimp)
                                              (("2"
                                                (inst - "n!1")
                                                (("2"
                                                  (inst - "n!1")
                                                  (("2"
                                                    (inst -4 "n!1")
                                                    (("2"
                                                      (hide-all-but
                                                       (-1 -2 -4 1))
                                                      (("2"
                                                        (expand
                                                         "outer_measurable?")
                                                        (("2"
                                                          (inst - "a")
                                                          (("2"
                                                            (name-replace
                                                             "maEn"
                                                             "m(intersection(a, En(n!1)))")
                                                            (("2"
                                                              (name-replace
                                                               "macE"
                                                               "m(intersection(a, complement(E)))")
                                                              (("2"
                                                                (name-replace
                                                                 "macEn"
                                                                 "m(intersection(a, complement(En(n!1))))")
                                                                (("2"
                                                                  (hide
                                                                   -2)
                                                                  (("2"
                                                                    (expand
                                                                     "x_le")
                                                                    (("2"
                                                                      (expand
                                                                       "x_eq")
                                                                      (("2"
                                                                        (expand
                                                                         "x_add")
                                                                        (("2"
                                                                          (case-replace
                                                                           "maEn`1")
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (case-replace
                                                                               "macE`1")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (case-replace
                                                                                   "macEn`1")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but (-1 -10 1))
                                          (("2"
                                            (skosimp)
                                            (("2"
                                              (expand "outer_measure?")
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (expand
                                                   "om_increasing?")
                                                  (("2"
                                                    (inst - "n!1")
                                                    (("2"
                                                      (inst
                                                       -
                                                       "intersection(a, complement(E))"
                                                       "intersection(a, complement(En(n!1)))")
                                                      (("2"
                                                        (split -3)
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           (-1 1))
                                                          (("2"
                                                            (expand
                                                             "complement")
                                                            (("2"
                                                              (expand
                                                               "intersection")
                                                              (("2"
                                                                (expand
                                                                 "subset?")
                                                                (("2"
                                                                  (expand
                                                                   "member")
                                                                  (("2"
                                                                    (skosimp*)
                                                                    (("2"
                                                                      (inst
                                                                       -
                                                                       "x!1")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but 1)
                                        (("2"
                                          (skosimp)
                                          (("2"
                                            (expand "intersection")
                                            (("2"
                                              (expand "subset?")
                                              (("2"
                                                (expand "member")
                                                (("2"
                                                  (expand "En")
                                                  (("2"
                                                    (expand "IUnion")
                                                    (("2"
                                                      (expand
                                                       "emptyset")
                                                      (("2"
                                                        (skosimp*)
                                                        (("2"
                                                          (prop)
                                                          (("2"
                                                            (expand
                                                             "E")
                                                            (("2"
                                                              (expand
                                                               "IUnion")
                                                              (("2"
                                                                (inst
                                                                 +
                                                                 "i!1")
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide 2)
                                      (("2"
                                        (hide -6)
                                        (("2"
                                          (induct "n")
                                          (("1"
                                            (replace -3)
                                            (("1"
                                              (expand "x_sigma")
                                              (("1"
                                                (expand "x_eq")
                                                (("1"
                                                  (case-replace
                                                   "m(intersection(a, X!1(0)))`1")
                                                  (("1"
                                                    (case-replace
                                                     "FORALL (i_1: nat): i_1 <= 0 => m(intersection(a, X!1(i_1)))`1")
                                                    (("1"
                                                      (expand "sigma")
                                                      (("1"
                                                        (expand
                                                         "sigma")
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide 2)
                                                      (("2"
                                                        (skosimp)
                                                        (("2"
                                                          (typepred
                                                           "i!1")
                                                          (("2"
                                                            (expand
                                                             ">=")
                                                            (("2"
                                                              (expand
                                                               "<=")
                                                              (("2"
                                                                (replace
                                                                 -2)
                                                                (("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (replace 1)
                                                    (("2"
                                                      (lift-if)
                                                      (("2"
                                                        (case-replace
                                                         "FORALL (i_1: nat): i_1 <= 0 => m(intersection(a, X!1(i_1)))`1")
                                                        (("1"
                                                          (inst - "0")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (replace 1 3)
                                                          (("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (skosimp*)
                                            (("2"
                                              (inst - "j!1")
                                              (("2"
                                                (inst - "j!1")
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (lemma
                                                     "outer_measurable_disjoint_union"
                                                     ("x"
                                                      "a"
                                                      "a"
                                                      "En(j!1)"
                                                      "b"
                                                      "X!1(j!1 + 1)"))
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (replace -5 -1)
                                                        (("1"
                                                          (hide-all-but
                                                           (-1 -2 1))
                                                          (("1"
                                                            (name-replace
                                                             "X1"
                                                             "m(intersection(a, En(1 + j!1)))")
                                                            (("1"
                                                              (name-replace
                                                               "X2"
                                                               "m(intersection(a, En(j!1)))")
                                                              (("1"
                                                                (expand
                                                                 "x_add")
                                                                (("1"
                                                                  (expand
                                                                   "x_eq")
                                                                  (("1"
                                                                    (expand
                                                                     "x_sigma")
                                                                    (("1"
                                                                      (expand
                                                                       "sigma"
                                                                       1)
                                                                      (("1"
                                                                        (case-replace
                                                                         "X1`1")
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (prop)
                                                                            (("1"
                                                                              (replace
                                                                               -2)
                                                                              (("1"
                                                                                (replace
                                                                                 -3)
                                                                                (("1"
                                                                                  (skosimp)
                                                                                  (("1"
                                                                                    (prop)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -
                                                                                       "i!1")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (replace
                                                                               -2)
                                                                              (("2"
                                                                                (prop)
                                                                                (("2"
                                                                                  (replace
                                                                                   -1)
                                                                                  (("2"
                                                                                    (replace
                                                                                     -2
                                                                                     1
                                                                                     rl)
                                                                                    (("2"
                                                                                      (replace
                                                                                       -4)
                                                                                      (("2"
                                                                                        (case-replace
                                                                                         "FORALL (i_1: nat):
            i_1 <= 1 + j!1 => m(intersection(a, X!1(i_1)))`1")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil)
                                                                                         ("2"
                                                                                          (skosimp)
                                                                                          (("2"
                                                                                            (typepred
                                                                                             "i!1")
                                                                                            (("2"
                                                                                              (inst
                                                                                               -
                                                                                               "i!1")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (replace
                                                                           1)
                                                                          (("2"
                                                                            (lift-if)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (case-replace
                                                                                 "X2`1")
                                                                                (("1"
                                                                                  (prop)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -
                                                                                     "1+j!1")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (replace
                                                                                   1)
                                                                                  (("2"
                                                                                    (prop)
                                                                                    (("2"
                                                                                      (skosimp)
                                                                                      (("2"
                                                                                        (inst
                                                                                         -
                                                                                         "i!1")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide 2)
                                    (("2"
                                      (induct "n")
                                      (("1"
                                        (replace -2)
                                        (("1" (assert) nil nil))
                                        nil)
                                       ("2"
                                        (skosimp)
                                        (("2"
                                          (inst - "j!1")
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (lemma
                                               "outer_measurable_union"
                                               ("a"
                                                "En(j!1)"
                                                "b"
                                                "X!1(j!1 + 1)"))
                                              (("1" (assert) nil nil)
                                               ("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide 2)
                                  (("2"
                                    (induct "n")
                                    (("1"
                                      (replace -1)
                                      (("1"
                                        (expand "disjoint?")
                                        (("1"
                                          (expand "disjoint?")
                                          (("1"
                                            (inst -7 "0" "1")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (replace -1)
                                      (("2"
                                        (hide-all-but 1)
                                        (("2"
                                          (expand "En")
                                          (("2"
                                            (apply-extensionality
                                             :hide?
                                             t)
                                            (("2"
                                              (expand "union")
                                              (("2"
                                                (expand "IUnion")
                                                (("2"
                                                  (expand "emptyset")
                                                  (("2"
                                                    (expand "member")
                                                    (("2"
                                                      (case-replace
                                                       "X!1(0)(x!1)")
                                                      (("1"
                                                        (inst + "0")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (case-replace
                                                         "X!1(1)(x!1)")
                                                        (("1"
                                                          (inst + "1")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          (("2"
                                                            (skosimp)
                                                            (("2"
                                                              (prop)
                                                              (("2"
                                                                (case-replace
                                                                 "i!1=0")
                                                                (("2"
                                                                  (case-replace
                                                                   "i!1=1")
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (skosimp*)
                                      (("3"
                                        (split)
                                        (("1"
                                          (replace -2 1 rl)
                                          (("1"
                                            (hide-all-but (-1 -3 -9 1))
                                            (("1"
                                              (expand "union")
                                              (("1"
                                                (expand "disjoint?")
                                                (("1"
                                                  (expand "disjoint?")
                                                  (("1"
                                                    (expand
                                                     "intersection")
                                                    (("1"
                                                      (expand "empty?")
                                                      (("1"
                                                        (expand
                                                         "member")
                                                        (("1"
                                                          (skosimp*)
                                                          (("1"
                                                            (split -1)
                                                            (("1"
                                                              (inst
                                                               -
                                                               "x!1")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "En"
                                                                   -1)
                                                                  (("1"
                                                                    (expand
                                                                     "IUnion")
                                                                    (("1"
                                                                      (expand
                                                                       "emptyset")
                                                                      (("1"
                                                                        (skosimp)
                                                                        (("1"
                                                                          (prop)
                                                                          (("1"
                                                                            (inst
                                                                             -5
                                                                             "i!1"
                                                                             "2+j!1")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (inst
                                                                                 -
                                                                                 "x!1")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (inst
                                                               -
                                                               "1+j!1"
                                                               "2+j!1")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (inst
                                                                   -5
                                                                   "x!1")
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but 1)
                                          (("2"
                                            (expand "En")
                                            (("2"
                                              (expand "union")
                                              (("2"
                                                (apply-extensionality
                                                 :hide?
                                                 t)
                                                (("2"
                                                  (expand "member")
                                                  (("2"
                                                    (expand "IUnion")
                                                    (("2"
                                                      (case-replace
                                                       "(EXISTS (i_1: nat):
          IF i_1 <= 2 + j!1 THEN X!1(i_1)(x!1) ELSE emptyset[T](x!1) ENDIF)")
                                                      (("1"
                                                        (skosimp)
                                                        (("1"
                                                          (prop)
                                                          (("1"
                                                            (expand
                                                             "<="
                                                             -1)
                                                            (("1"
                                                              (split)
                                                              (("1"
                                                                (inst
                                                                 +
                                                                 "i!1")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (expand
                                                             "emptyset")
                                                            (("2"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (replace 1 2)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (split)
                                                            (("1"
                                                              (skosimp)
                                                              (("1"
                                                                (prop)
                                                                (("1"
                                                                  (inst
                                                                   +
                                                                   "i!1")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (expand
                                                                   "emptyset")
                                                                  (("2"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (inst
                                                               +
                                                               "2+j!1")
                                                              (("2"
                                                                (expand
                                                                 "emptyset")
                                                                (("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide-all-but 1)
                                (("2"
                                  (expand "En")
                                  (("2"
                                    (apply-extensionality :hide? t)
                                    (("2"
                                      (expand "IUnion")
                                      (("2"
                                        (expand "emptyset")
                                        (("2"
                                          (case-replace "X!1(0)(x!1)")
                                          (("1"
                                            (inst + "0")
                                            (("1" (assert) nil nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide -1 -3 2)
                            (("2" (split)
                              (("1"
                                (expand "increasing?")
                                (("1"
                                  (skolem + ("i" "j"))
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (expand "subset?")
                                      (("1"
                                        (expand "En")
                                        (("1"
                                          (expand "IUnion")
                                          (("1"
                                            (expand "emptyset")
                                            (("1"
                                              (expand "member")
                                              (("1"
                                                (skosimp*)
                                                (("1"
                                                  (prop)
                                                  (("1"
                                                    (inst + "i!1")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (apply-extensionality :hide? t)
                                (("2"
                                  (expand "E")
                                  (("2"
                                    (hide -1)
                                    (("2"
                                      (expand "En")
                                      (("2"
                                        (expand "IUnion")
                                        (("2"
                                          (expand "emptyset")
                                          (("2"
                                            (case-replace
                                             "EXISTS (i: nat): X!1(i)(x!1)")
                                            (("1"
                                              (skosimp)
                                              (("1"
                                                (inst + "i!1")
                                                (("1"
                                                  (inst + "i!1")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (replace 1 2)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (skosimp*)
                                                  (("2"
                                                    (prop)
                                                    (("2"
                                                      (inst + "i!2")
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnreal type-eq-decl nil real_types nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (outer_measure? const-decl "bool" outer_measure_def nil)
    (outer_measure nonempty-type-eq-decl nil outer_measure_def nil)
    (m formal-const-decl "outer_measure" outer_measure_props nil)
    (outer_measurable_emptyset name-judgement "outer_measurable"
     outer_measure_props nil)
    (outer_measurable_union application-judgement "outer_measurable"
     outer_measure_props nil)
    (sigma def-decl "real" sigma reals)
    (outer_measurable_disjoint_union formula-decl nil
     outer_measure_props nil)
    (x_add const-decl "extended_nnreal" extended_nnreal
     extended_nnreal)
    (series const-decl "sequence[real]" series series)
    (increasing_bounded_convergence formula-decl nil
     convergence_sequences analysis)
    (om_increasing? const-decl "bool" outer_measure_def nil)
    (convergent? const-decl "bool" convergence_sequences analysis)
    (least_upper_bound? const-decl "bool" bounded_real_defs nil)
    (bounded_above? const-decl "bool" bounded_real_defs nil)
    (lub const-decl "{x | least_upper_bound?(x, SA)}" bounded_real_defs
     nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (upper_bound? const-decl "bool" bounded_real_defs nil)
    (> const-decl "bool" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (Im const-decl "setof[real]" real_fun_props reals)
    (limit_def formula-decl nil convergence_sequences analysis)
    (sup const-decl "real" real_fun_supinf analysis)
    (nonempty_image application-judgement "(nonempty?[real])"
     double_nn_sequence extended_nnreal)
    (setof type-eq-decl nil defined_types nil)
    (increasing? const-decl "bool" real_fun_preds reals)
    (bounded_above? const-decl "bool" real_fun_preds reals)
    (sigma_nnreal application-judgement "nnreal" sigma_nat reals)
    (om_countably_subadditive? const-decl "bool" outer_measure_def nil)
    (O const-decl "T3" function_props nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (pairwise_subadditive formula-decl nil outer_measure_props nil)
    (preorder? const-decl "bool" orders nil)
    (transitive? const-decl "bool" relations nil)
    (x_le_antisymmetric formula-decl nil extended_nnreal
     extended_nnreal)
    (x_le_preorder formula-decl nil extended_nnreal extended_nnreal)
    (x_sum const-decl "extended_nnreal" extended_nnreal
     extended_nnreal)
    (complement const-decl "set" sets nil)
    (x_le const-decl "bool" extended_nnreal extended_nnreal)
    (En skolem-const-decl "[nat -> set[T]]" outer_measure_props nil)
    (E skolem-const-decl "set[T]" outer_measure_props nil)
    (x_sigma const-decl "extended_nnreal" extended_nnreal
     extended_nnreal)
    (x_eq const-decl "bool" extended_nnreal extended_nnreal)
    (E skolem-const-decl "[nat -> outer_measurable]"
     outer_measure_props nil)
    (every_nonempty_set_has_least judgement-tcc nil bounded_nats
     orders)
    (empty? const-decl "bool" sets nil)
    (has_least? const-decl "bool" minmax_orders orders)
    (lower_bound? const-decl "bool" bounded_orders orders)
    (t!1 skolem-const-decl "nat" outer_measure_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (least? const-decl "bool" minmax_orders orders)
    (II skolem-const-decl "[nat -> boolean]" outer_measure_props nil)
    (nonempty? const-decl "bool" sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (intersection const-decl "set" sets nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (j!1 skolem-const-decl "nat" outer_measure_props nil)
    (i!1 skolem-const-decl "nat" outer_measure_props nil)
    (intersection_commutative formula-decl nil sets_lemmas nil)
    (outer_measurable_intersection application-judgement
     "outer_measurable" outer_measure_props nil)
    (trich_lt formula-decl nil real_props nil)
    (disjoint? const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (difference const-decl "set" sets nil)
    (outer_measurable_difference application-judgement
     "outer_measurable" outer_measure_props nil)
    (disjoint? const-decl "bool" indexed_sets_aux sets_aux)
    (E skolem-const-decl "[nat -> set[T]]" outer_measure_props nil)
    (member const-decl "bool" sets nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (FALSE const-decl "bool" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (pred type-eq-decl nil defined_types nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (outer_measurable_union judgement-tcc nil outer_measure_props nil)
    (union const-decl "set" sets nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (emptyset const-decl "set" sets nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (total_order_restrict application-judgement "(total_order?[S])"
     restrict_order_props nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil outer_measure_props nil)
    (set type-eq-decl nil sets nil)
    (outer_measurable? const-decl "bool" outer_measure_props nil)
    (outer_measurable nonempty-type-eq-decl nil outer_measure_props
     nil)
    (sequence type-eq-decl nil sequences nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (restrict const-decl "R" restrict nil)
    (<= const-decl "bool" reals nil)
    (subset? const-decl "bool" sets nil)
    (increasing? const-decl "bool" fun_preds_partial structures)
    (IUnion const-decl "set[T]" indexed_sets nil))
   nil
   (outer_measurable_IUnion subtype
    "indexed_sets[nat, outer_measure_props.T].IUnion(outer_measure_props.X)"
    "outer_measurable")))
 (outer_measurable_IIntersection 0
  (outer_measurable_IIntersection-1 nil 3396588211
   ("" (skosimp)
    (("" (lemma "outer_measurable_IUnion" ("X" "IComplement(X!1)"))
      (("1" (rewrite "IDemorgan2" * :dir rl)
        (("1"
          (lemma "outer_measurable_complement"
           ("a" "complement(IIntersection(X!1))"))
          (("1" (rewrite "complement_complement") nil nil)
           ("2" (propax) nil nil))
          nil))
        nil)
       ("2" (skolem + ("n!1"))
        (("2" (hide 2)
          (("2" (typepred "X!1(n!1)")
            (("2" (expand "IComplement") (("2" (propax) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((IComplement const-decl "set[T]" indexed_sets_aux sets_aux)
    (sequence type-eq-decl nil sequences nil)
    (outer_measurable nonempty-type-eq-decl nil outer_measure_props
     nil)
    (outer_measurable? const-decl "bool" outer_measure_props nil)
    (set type-eq-decl nil sets nil)
    (T formal-type-decl nil outer_measure_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (outer_measurable_IUnion judgement-tcc nil outer_measure_props nil)
    (IIntersection const-decl "set[T]" indexed_sets nil)
    (complement const-decl "set" sets nil)
    (outer_measurable_complement judgement-tcc nil outer_measure_props
     nil)
    (complement_complement formula-decl nil sets_lemmas nil)
    (IDemorgan2 formula-decl nil indexed_sets_aux sets_aux)
    (outer_measurable_complement application-judgement
     "outer_measurable" outer_measure_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil))
   nil
   (outer_measurable_IIntersection subtype
    "indexed_sets[nat, outer_measure_props.T].IIntersection(outer_measure_props.X)"
    "outer_measurable")))
 (outer_measurable_Union 0
  (outer_measurable_Union-1 nil 3397465978
   ("" (skosimp)
    (("" (expand "is_countable")
      (("" (skosimp)
        (("" (typepred "f!1")
          (("" (expand "injective?")
            ((""
              (name "XX"
                    "lambda (n:nat): if (exists (x:(S!1)): f!1(x) = n) then choose({x:(S!1) | f!1(x)=n}) else emptyset[T] endif")
              (("1" (case "IUnion(XX)=Union(S!1)")
                (("1" (lemma "outer_measurable_IUnion" ("X" "XX"))
                  (("1" (replace -2) (("1" (propax) nil nil)) nil)
                   ("2" (expand "every")
                    (("2" (hide-all-but (-3 -4 1))
                      (("2" (skolem + ("n!1"))
                        (("2" (expand "XX")
                          (("2"
                            (case-replace
                             "EXISTS (x: (S!1)): f!1(x) = n!1")
                            (("1" (skosimp)
                              (("1"
                                (inst -3 "x!1")
                                (("1"
                                  (lemma
                                   "choose_member"
                                   ("a"
                                    "{x_1: (S!1) | f!1(x_1) = n!1}"))
                                  (("1"
                                    (split -1)
                                    (("1"
                                      (expand "member")
                                      (("1"
                                        (inst
                                         -
                                         "choose({x_1: (S!1) | f!1(x_1) = n!1})"
                                         "x!1")
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (expand "nonempty?")
                                          (("2"
                                            (expand "empty?")
                                            (("2"
                                              (inst - "x!1")
                                              (("2"
                                                (expand "member")
                                                (("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "empty?")
                                      (("2"
                                        (inst - "x!1")
                                        (("2"
                                          (expand "member")
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (replace 1 2)
                              (("2"
                                (rewrite "outer_measurable_emptyset")
                                nil
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide -1 2 -3)
                  (("2" (apply-extensionality :hide? t)
                    (("2" (expand "Union")
                      (("2" (case-replace "EXISTS (a: (S!1)): a(x!1)")
                        (("1" (skosimp)
                          (("1" (typepred "a!1")
                            (("1" (expand "XX")
                              (("1"
                                (expand "IUnion")
                                (("1"
                                  (expand "emptyset")
                                  (("1"
                                    (inst + "f!1(a!1)")
                                    (("1"
                                      (case-replace
                                       "EXISTS (x: (S!1)): f!1(x) = f!1(a!1)")
                                      (("1"
                                        (lemma
                                         "choose_member"
                                         ("a"
                                          "{x_1: (S!1) | f!1(x_1) = f!1(a!1)}"))
                                        (("1"
                                          (split -1)
                                          (("1"
                                            (expand "member")
                                            (("1"
                                              (inst
                                               -
                                               "choose({x_1: (S!1) | f!1(x_1) = f!1(a!1)})"
                                               "a!1")
                                              (("1"
                                                (replace -1)
                                                (("1"
                                                  (replace -5 1)
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "nonempty?")
                                                (("2"
                                                  (expand "empty?")
                                                  (("2"
                                                    (expand "member")
                                                    (("2"
                                                      (inst - "a!1")
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "empty?")
                                            (("2"
                                              (expand "member")
                                              (("2"
                                                (inst - "a!1")
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (inst + "a!1") nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (replace 1 2)
                          (("2" (assert)
                            (("2" (expand "XX")
                              (("2"
                                (expand "IUnion")
                                (("2"
                                  (expand "emptyset")
                                  (("2"
                                    (skosimp*)
                                    (("2"
                                      (prop)
                                      (("2"
                                        (skosimp)
                                        (("2"
                                          (inst
                                           +
                                           "choose({x: (S!1) | f!1(x) = i!1})")
                                          (("2"
                                            (expand "nonempty?")
                                            (("2"
                                              (expand "empty?")
                                              (("2"
                                                (expand "member")
                                                (("2"
                                                  (inst - "x!2")
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (skosimp)
                (("2" (skosimp)
                  (("2" (expand "nonempty?")
                    (("2" (expand "empty?")
                      (("2" (inst - "x!1")
                        (("2" (assert)
                          (("2" (expand "member")
                            (("2" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((is_countable const-decl "bool" countability sets_aux)
    (injective? const-decl "bool" functions nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (T formal-type-decl nil outer_measure_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (emptyset const-decl "set" sets nil)
    (choose const-decl "(p)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (i!1 skolem-const-decl "nat" outer_measure_props nil)
    (a!1 skolem-const-decl "(S!1)" outer_measure_props nil)
    (Union_surjective name-judgement
     "(surjective?[setofsets[T], set[T]])" sets_lemmas nil)
    (outer_measurable_IUnion judgement-tcc nil outer_measure_props nil)
    (outer_measurable? const-decl "bool" outer_measure_props nil)
    (outer_measurable nonempty-type-eq-decl nil outer_measure_props
     nil)
    (sequence type-eq-decl nil sequences nil)
    (XX skolem-const-decl "[nat -> setof[T]]" outer_measure_props nil)
    (outer_measurable_emptyset judgement-tcc nil outer_measure_props
     nil)
    (choose_member formula-decl nil sets_lemmas nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (n!1 skolem-const-decl "nat" outer_measure_props nil)
    (f!1 skolem-const-decl "(injective?[(S!1), nat])"
     outer_measure_props nil)
    (S!1 skolem-const-decl "setofsets[T]" outer_measure_props nil)
    (every const-decl "bool" sets nil)
    (Union const-decl "set" sets nil)
    (IUnion const-decl "set[T]" indexed_sets nil))
   shostak))
 (outer_measurable_Intersection 0
  (outer_measurable_Intersection-1 nil 3397965002
   ("" (skosimp)
    (("" (lemma "outer_measurable_Union" ("S" "Complement(S!1)"))
      (("" (split)
        (("1"
          (lemma "outer_measurable_complement"
           ("a" "Union(Complement(S!1))"))
          (("1" (rewrite "Demorgan1")
            (("1" (rewrite "Complement_Complement") nil nil)) nil)
           ("2" (propax) nil nil))
          nil)
         ("2" (hide -2 2)
          (("2" (lemma "Complement_bijective[T]")
            (("2" (expand "bijective?")
              (("2" (flatten)
                (("2" (expand "is_countable")
                  (("2" (skosimp)
                    (("2" (typepred "f!1")
                      (("2" (expand "injective?")
                        (("2"
                          (inst +
                           "lambda (x:(Complement(S!1))): f!1(complement(x))")
                          (("1" (expand "injective?")
                            (("1" (skosimp)
                              (("1"
                                (hide -3)
                                (("1"
                                  (typepred "x2!1")
                                  (("1"
                                    (typepred "x1!1")
                                    (("1"
                                      (hide -5)
                                      (("1"
                                        (expand "Complement")
                                        (("1"
                                          (skosimp*)
                                          (("1"
                                            (inst - "b!1" "b!2")
                                            (("1"
                                              (replace -1)
                                              (("1"
                                                (replace -2)
                                                (("1"
                                                  (rewrite
                                                   "complement_complement")
                                                  (("1"
                                                    (rewrite
                                                     "complement_complement")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (skosimp)
                            (("2" (typepred "x!1")
                              (("2"
                                (expand "Complement")
                                (("2"
                                  (skosimp)
                                  (("2"
                                    (typepred "b!1")
                                    (("2"
                                      (replace -2)
                                      (("2"
                                        (rewrite
                                         "complement_complement")
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (hide -1 2)
          (("3" (expand "Complement")
            (("3" (expand "every")
              (("3" (skosimp)
                (("3" (typepred "x!1")
                  (("3" (skosimp)
                    (("3" (replace -1)
                      (("3" (inst - "b!1")
                        (("3"
                          (lemma "outer_measurable_complement"
                           ("a" "b!1"))
                          (("1" (propax) nil nil)
                           ("2" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Complement const-decl "setofsets[T]" sets_lemmas nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil outer_measure_props nil)
    (outer_measurable_Union formula-decl nil outer_measure_props nil)
    (every const-decl "bool" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bijective? const-decl "bool" functions nil)
    (is_countable const-decl "bool" countability sets_aux)
    (injective? const-decl "bool" functions nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (complement const-decl "set" sets nil)
    (S!1 skolem-const-decl "setofsets[T]" outer_measure_props nil)
    (f!1 skolem-const-decl "(injective?[(S!1), nat])"
     outer_measure_props nil)
    (complement_complement formula-decl nil sets_lemmas nil)
    (Complement_bijective judgement-tcc nil sets_lemmas nil)
    (Union const-decl "set" sets nil)
    (outer_measurable nonempty-type-eq-decl nil outer_measure_props
     nil)
    (outer_measurable? const-decl "bool" outer_measure_props nil)
    (set type-eq-decl nil sets nil)
    (outer_measurable_complement judgement-tcc nil outer_measure_props
     nil)
    (Union_surjective name-judgement
     "(surjective?[setofsets[T], set[T]])" sets_lemmas nil)
    (Complement_bijective name-judgement
     "(bijective?[setofsets[T], setofsets[T]])" sets_lemmas nil)
    (Complement_Complement formula-decl nil sets_lemmas nil)
    (Intersection_surjective name-judgement
     "(surjective?[setofsets[T], set[T]])" sets_lemmas nil)
    (Demorgan1 formula-decl nil sets_lemmas nil))
   shostak))
 (outer_measurable_disjoint_IUnion 0
  (outer_measurable_disjoint_IUnion-2 "" 3789903749
   ("" (skosimp)
    ((""
      (lemma "x_le_antisymmetric"
       ("x" "m(intersection(x!1, IUnion(X!1)))" "y"
        "x_sum(LAMBDA i: m(intersection(x!1, X!1(i))))"))
      (("" (assert)
        (("" (hide 2)
          (("" (split)
            (("1" (typepred "m")
              (("1" (expand "outer_measure?")
                (("1" (flatten)
                  (("1" (expand "om_countably_subadditive?")
                    (("1"
                      (inst - "LAMBDA i: intersection(x!1, X!1(i))")
                      (("1" (expand "o")
                        (("1"
                          (case-replace
                           "IUnion(LAMBDA i: intersection(x!1, X!1(i)))=intersection(x!1, IUnion(X!1))")
                          (("1" (hide -3 2)
                            (("1" (apply-extensionality :hide? t)
                              (("1"
                                (expand "intersection")
                                (("1"
                                  (expand "IUnion")
                                  (("1"
                                    (expand "member")
                                    (("1"
                                      (case-replace "x!1(x!2)")
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "x_le")
              (("2" (flatten)
                (("2" (expand "x_sum")
                  (("2"
                    (case-replace
                     "FORALL i: m(intersection(x!1, X!1(i)))`1")
                    (("1" (lift-if)
                      (("1" (assert)
                        (("1"
                          (name "En" "lambda (n:nat): IUnion(LAMBDA i:
                  IF i <= n THEN X!1(i)
                  ELSE emptyset[T]
                  ENDIF)")
                          (("1" (hide -1)
                            (("1"
                              (case "En(0) =X!1(0) & forall (n:nat): En(n+1)=union(En(n), X!1(n+1))")
                              (("1"
                                (flatten)
                                (("1"
                                  (case
                                   "FORALL (n: nat): disjoint?(En(n),X!1(n+1))")
                                  (("1"
                                    (case
                                     "FORALL (n: nat): outer_measurable?(En(n))")
                                    (("1"
                                      (case
                                       "forall (n:nat): x_eq(m(intersection(x!1,En(n))),x_sigma(0,n,lambda i: m(intersection(x!1, X!1(i)))))")
                                      (("1"
                                        (case-replace
                                         "series(LAMBDA (i_1: nat):
                             m(intersection(x!1, X!1(i_1)))`2)=lambda i: m(intersection(x!1, En(i)))`2")
                                        (("1"
                                          (hide -1)
                                          (("1"
                                            (case
                                             "forall (n:nat): subset?(intersection(x!1, En(n)),intersection(x!1, IUnion(X!1)))")
                                            (("1"
                                              (case
                                               "FORALL (n: nat):m(intersection(x!1, En(n)))`1")
                                              (("1"
                                                (case
                                                 "FORALL (n: nat):m(intersection(x!1, En(n)))`2<=m(intersection(x!1, IUnion(X!1)))`2")
                                                (("1"
                                                  (case
                                                   "increasing?(LAMBDA i: m(intersection(x!1, En(i)))`2)")
                                                  (("1"
                                                    (case
                                                     "bounded_above?(LAMBDA i: m(intersection(x!1, En(i)))`2)")
                                                    (("1"
                                                      (lemma
                                                       "increasing_bounded_convergence"
                                                       ("v1"
                                                        "LAMBDA i: m(intersection(x!1, En(i)))`2"))
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (case-replace
                                                           "convergence_sequences.convergent?(LAMBDA i: m(intersection(x!1, En(i)))`2)")
                                                          (("1"
                                                            (hide -1)
                                                            (("1"
                                                              (rewrite
                                                               "convergence_sequences.limit_def"
                                                               -1
                                                               :dir
                                                               rl)
                                                              (("1"
                                                                (replace
                                                                 -1)
                                                                (("1"
                                                                  (hide
                                                                   -1)
                                                                  (("1"
                                                                    (expand
                                                                     "sup")
                                                                    (("1"
                                                                      (expand
                                                                       "Im")
                                                                      (("1"
                                                                        (typepred
                                                                         "lub({z:real | EXISTS (x: nat): z = m(intersection(x!1, En(x)))`2})")
                                                                        (("1"
                                                                          (name-replace
                                                                           "LUB"
                                                                           "lub({z:real | EXISTS (x: nat): z = m(intersection(x!1, En(x)))`2})")
                                                                          (("1"
                                                                            (expand
                                                                             "least_upper_bound?")
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (inst
                                                                                 -
                                                                                 "m(intersection(x!1, IUnion(X!1)))`2")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (hide
                                                                                     2)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "upper_bound?"
                                                                                       1)
                                                                                      (("1"
                                                                                        (skosimp)
                                                                                        (("1"
                                                                                          (typepred
                                                                                           "s!1")
                                                                                          (("1"
                                                                                            (skosimp)
                                                                                            (("1"
                                                                                              (inst
                                                                                               -5
                                                                                               "x!2")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           2)
                                                                          (("2"
                                                                            (split)
                                                                            (("1"
                                                                              (expand
                                                                               "nonempty?")
                                                                              (("1"
                                                                                (expand
                                                                                 "empty?")
                                                                                (("1"
                                                                                  (expand
                                                                                   "member")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -
                                                                                     "m(intersection[T](x!1, En(0)))`2")
                                                                                    (("1"
                                                                                      (inst
                                                                                       +
                                                                                       "0")
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (expand
                                                                               "bounded_above?")
                                                                              (("2"
                                                                                (skosimp)
                                                                                (("2"
                                                                                  (expand
                                                                                   "upper_bound?")
                                                                                  (("2"
                                                                                    (inst
                                                                                     +
                                                                                     "a!1")
                                                                                    (("2"
                                                                                      (skosimp)
                                                                                      (("2"
                                                                                        (typepred
                                                                                         "s!1")
                                                                                        (("2"
                                                                                          (skosimp)
                                                                                          (("2"
                                                                                            (inst
                                                                                             -
                                                                                             "x!2")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide
                                                                 2)
                                                                (("2"
                                                                  (expand
                                                                   "convergence_sequences.convergent?")
                                                                  (("2"
                                                                    (expand
                                                                     "sup")
                                                                    (("2"
                                                                      (inst
                                                                       +
                                                                       "lub(Im(LAMBDA i: m(intersection(x!1, En(i)))`2))")
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide 2)
                                                            (("2"
                                                              (expand
                                                               "convergence_sequences.convergent?")
                                                              (("2"
                                                                (expand
                                                                 "sup")
                                                                (("2"
                                                                  (inst
                                                                   +
                                                                   "lub(Im(LAMBDA i: m(intersection(x!1, En(i)))`2))")
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide 2)
                                                      (("2"
                                                        (expand
                                                         "bounded_above?")
                                                        (("2"
                                                          (inst
                                                           +
                                                           "m(intersection(x!1, IUnion(X!1)))`2")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide 2)
                                                    (("2"
                                                      (expand
                                                       "increasing?")
                                                      (("2"
                                                        (skolem
                                                         +
                                                         ("i!1" "j!1"))
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (hide -2)
                                                            (("2"
                                                              (inst
                                                               -
                                                               "j!1")
                                                              (("2"
                                                                (typepred
                                                                 "m")
                                                                (("2"
                                                                  (expand
                                                                   "outer_measure?")
                                                                  (("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (expand
                                                                       "om_increasing?")
                                                                      (("2"
                                                                        (inst
                                                                         -
                                                                         "intersection(x!1, En(i!1))"
                                                                         "intersection(x!1, En(j!1))")
                                                                        (("2"
                                                                          (split
                                                                           -2)
                                                                          (("1"
                                                                            (expand
                                                                             "x_le")
                                                                            (("1"
                                                                              (replace
                                                                               -5)
                                                                              (("1"
                                                                                (flatten)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide-all-but
                                                                             (-3
                                                                              1))
                                                                            (("2"
                                                                              (expand
                                                                               "En")
                                                                              (("2"
                                                                                (expand
                                                                                 "intersection")
                                                                                (("2"
                                                                                  (expand
                                                                                   "subset?")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "IUnion")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "emptyset")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "member")
                                                                                        (("2"
                                                                                          (skosimp*)
                                                                                          (("2"
                                                                                            (prop)
                                                                                            (("2"
                                                                                              (inst
                                                                                               +
                                                                                               "i!2")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 2)
                                                  (("2"
                                                    (skosimp)
                                                    (("2"
                                                      (inst - "n!1")
                                                      (("2"
                                                        (inst - "n!1")
                                                        (("2"
                                                          (typepred
                                                           "m")
                                                          (("2"
                                                            (expand
                                                             "outer_measure?")
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (expand
                                                                 "om_increasing?")
                                                                (("2"
                                                                  (inst
                                                                   -
                                                                   "intersection(x!1, En(n!1))"
                                                                   "intersection(x!1, IUnion(X!1))")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (expand
                                                                       "x_le")
                                                                      (("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide 2)
                                                (("2"
                                                  (skosimp)
                                                  (("2"
                                                    (inst - "n!1")
                                                    (("2"
                                                      (typepred "m")
                                                      (("2"
                                                        (expand
                                                         "outer_measure?")
                                                        (("2"
                                                          (expand
                                                           "om_increasing?")
                                                          (("2"
                                                            (flatten)
                                                            (("2"
                                                              (inst
                                                               -
                                                               "intersection(x!1, En(n!1))"
                                                               "intersection(x!1, IUnion(X!1))")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "x_le")
                                                                  (("2"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but 1)
                                              (("2"
                                                (skosimp)
                                                (("2"
                                                  (expand "En")
                                                  (("2"
                                                    (expand
                                                     "intersection")
                                                    (("2"
                                                      (expand
                                                       "subset?")
                                                      (("2"
                                                        (expand
                                                         "member")
                                                        (("2"
                                                          (expand
                                                           "IUnion")
                                                          (("2"
                                                            (expand
                                                             "emptyset")
                                                            (("2"
                                                              (skosimp*)
                                                              (("2"
                                                                (prop)
                                                                (("2"
                                                                  (inst
                                                                   +
                                                                   "i!1")
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (apply-extensionality
                                             :hide?
                                             t)
                                            (("2"
                                              (expand "series")
                                              (("2"
                                                (inst - "x!2")
                                                (("2"
                                                  (expand "x_eq")
                                                  (("2"
                                                    (expand "x_sigma")
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (case-replace
                                                         "FORALL (i_1: nat):
             i_1 <= x!2 => m(intersection(x!1, X!1(i_1)))`1")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (skosimp)
                                                          (("2"
                                                            (inst
                                                             -8
                                                             "i!1")
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (induct "n")
                                          (("1"
                                            (replace -3)
                                            (("1"
                                              (expand "x_sigma")
                                              (("1"
                                                (expand "sigma")
                                                (("1"
                                                  (expand "x_eq")
                                                  (("1"
                                                    (inst -5 "0")
                                                    (("1"
                                                      (replace -5)
                                                      (("1"
                                                        (lift-if)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (prop)
                                                            (("1"
                                                              (skosimp)
                                                              (("1"
                                                                (typepred
                                                                 "i!1")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (skosimp*)
                                            (("2"
                                              (lemma
                                               "outer_measurable_disjoint_union"
                                               ("x"
                                                "x!1"
                                                "a"
                                                "En(j!1)"
                                                "b"
                                                "X!1(j!1 + 1)"))
                                              (("2"
                                                (inst -4 "j!1")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (case-replace
                                                     "intersection(x!1, union(En(j!1), X!1(1 + j!1)))=intersection(x!1, En(1 + j!1))")
                                                    (("1"
                                                      (hide-all-but
                                                       (-2 -3 1))
                                                      (("1"
                                                        (expand "x_eq")
                                                        (("1"
                                                          (expand
                                                           "x_add")
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (expand
                                                               "x_sigma")
                                                              (("1"
                                                                (expand
                                                                 "sigma"
                                                                 1)
                                                                (("1"
                                                                  (case-replace
                                                                   "m(intersection(x!1, En(1 + j!1)))`1")
                                                                  (("1"
                                                                    (prop)
                                                                    (("1"
                                                                      (replace
                                                                       -2)
                                                                      (("1"
                                                                        (skosimp)
                                                                        (("1"
                                                                          (prop)
                                                                          (("1"
                                                                            (inst
                                                                             -
                                                                             "i!1")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (replace
                                                                       -2)
                                                                      (("2"
                                                                        (prop)
                                                                        (("2"
                                                                          (case-replace
                                                                           "FORALL (i_1: nat):
            i_1 <= 1 + j!1 => m(intersection(x!1, X!1(i_1)))`1")
                                                                          (("1"
                                                                            (replace
                                                                             -2
                                                                             -3)
                                                                            (("1"
                                                                              (replace
                                                                               -5)
                                                                              (("1"
                                                                                (replace
                                                                                 -7
                                                                                 1)
                                                                                (("1"
                                                                                  (replace
                                                                                   -3
                                                                                   1
                                                                                   rl)
                                                                                  (("1"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide
                                                                             2)
                                                                            (("2"
                                                                              (skosimp)
                                                                              (("2"
                                                                                (inst
                                                                                 -
                                                                                 "i!1")
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (replace
                                                                     1)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (case-replace
                                                                         "FORALL (i_1: nat):
           i_1 <= 1 + j!1 => m(intersection(x!1, X!1(i_1)))`1")
                                                                        (("1"
                                                                          (case-replace
                                                                           "FORALL (i_2: nat):
             i_2 <= j!1 => m(intersection(x!1, X!1(i_2)))`1")
                                                                          (("1"
                                                                            (replace
                                                                             -3)
                                                                            (("1"
                                                                              (inst
                                                                               -2
                                                                               "1+j!1")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (skosimp)
                                                                            (("2"
                                                                              (inst
                                                                               -
                                                                               "i!1")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (replace
                                                                           1
                                                                           -3)
                                                                          (("2"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but
                                                       (1 -5 -6))
                                                      (("2"
                                                        (apply-extensionality
                                                         :hide?
                                                         t)
                                                        (("2"
                                                          (expand
                                                           "intersection")
                                                          (("2"
                                                            (expand
                                                             "member")
                                                            (("2"
                                                              (expand
                                                               "union")
                                                              (("2"
                                                                (expand
                                                                 "member")
                                                                (("2"
                                                                  (inst
                                                                   -
                                                                   "j!1")
                                                                  (("2"
                                                                    (replace
                                                                     -2)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide 2)
                                      (("2"
                                        (skosimp)
                                        (("2"
                                          (expand "En")
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide 2)
                                    (("2"
                                      (skosimp)
                                      (("2"
                                        (expand "disjoint?")
                                        (("2"
                                          (expand "disjoint?")
                                          (("2"
                                            (expand "intersection")
                                            (("2"
                                              (expand "En")
                                              (("2"
                                                (expand "empty?")
                                                (("2"
                                                  (expand "IUnion")
                                                  (("2"
                                                    (expand "emptyset")
                                                    (("2"
                                                      (expand "member")
                                                      (("2"
                                                        (skosimp)
                                                        (("2"
                                                          (skosimp)
                                                          (("2"
                                                            (prop)
                                                            (("2"
                                                              (inst
                                                               -8
                                                               "i!1"
                                                               "1+n!1")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (inst
                                                                   -8
                                                                   "x!2")
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 2)
                                (("2"
                                  (split)
                                  (("1"
                                    (expand "En")
                                    (("1"
                                      (apply-extensionality :hide? t)
                                      (("1"
                                        (expand "IUnion")
                                        (("1"
                                          (expand "emptyset")
                                          (("1"
                                            (case-replace
                                             "X!1(0)(x!2)")
                                            (("1"
                                              (inst + "0")
                                              (("1" (assert) nil nil))
                                              nil)
                                             ("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (skosimp)
                                    (("2"
                                      (expand "En")
                                      (("2"
                                        (expand "union")
                                        (("2"
                                          (expand "IUnion")
                                          (("2"
                                            (expand "member")
                                            (("2"
                                              (expand "emptyset")
                                              (("2"
                                                (apply-extensionality
                                                 :hide?
                                                 t)
                                                (("2"
                                                  (case-replace
                                                   "EXISTS (i_1: nat):
         IF i_1 <= 1 + n!1 THEN X!1(i_1)(x!2) ELSE FALSE ENDIF")
                                                  (("1"
                                                    (skosimp)
                                                    (("1"
                                                      (prop)
                                                      (("1"
                                                        (expand
                                                         "<="
                                                         -1)
                                                        (("1"
                                                          (split)
                                                          (("1"
                                                            (inst
                                                             +
                                                             "i!1")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (replace 1 2)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (split)
                                                        (("1"
                                                          (skosimp)
                                                          (("1"
                                                            (prop)
                                                            (("1"
                                                              (inst
                                                               +
                                                               "i!1")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (inst
                                                           +
                                                           "1+n!1")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 2)
                      (("2" (skosimp)
                        (("2" (typepred "m")
                          (("2" (expand "outer_measure?")
                            (("2" (flatten)
                              (("2"
                                (expand "om_increasing?")
                                (("2"
                                  (inst
                                   -
                                   "intersection(x!1, X!1(i!1))"
                                   "intersection(x!1, IUnion(X!1))")
                                  (("2"
                                    (expand "x_le")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (hide 2)
                                        (("2"
                                          (expand "subset?")
                                          (("2"
                                            (expand "intersection")
                                            (("2"
                                              (expand "member")
                                              (("2"
                                                (skosimp)
                                                (("2"
                                                  (expand "IUnion")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (inst + "i!1")
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((x_sum const-decl "extended_nnreal" extended_nnreal
     extended_nnreal)
    (sequence type-eq-decl nil sequences nil)
    (outer_measurable nonempty-type-eq-decl nil outer_measure_props
     nil)
    (outer_measurable? const-decl "bool" outer_measure_props nil)
    (IUnion const-decl "set[T]" indexed_sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (intersection const-decl "set" sets nil)
    (m formal-const-decl "outer_measure" outer_measure_props nil)
    (outer_measure nonempty-type-eq-decl nil outer_measure_def nil)
    (outer_measure? const-decl "bool" outer_measure_def nil)
    (set type-eq-decl nil sets nil)
    (T formal-type-decl nil outer_measure_props nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (x_le_antisymmetric formula-decl nil extended_nnreal
     extended_nnreal)
    (outer_measurable_IUnion application-judgement "outer_measurable"
     outer_measure_props nil)
    (x_le const-decl "bool" extended_nnreal extended_nnreal)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (<= const-decl "bool" reals nil)
    (emptyset const-decl "set" sets nil)
    (outer_measurable_union application-judgement "outer_measurable"
     outer_measure_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (union const-decl "set" sets nil)
    (disjoint? const-decl "bool" sets nil)
    (x_eq const-decl "bool" extended_nnreal extended_nnreal)
    (x_sigma const-decl "extended_nnreal" extended_nnreal
     extended_nnreal)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sigma_nnreal application-judgement "nnreal" sigma_nat reals)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (increasing? const-decl "bool" real_fun_preds reals)
    (increasing_bounded_convergence formula-decl nil
     convergence_sequences analysis)
    (convergent? const-decl "bool" convergence_sequences analysis)
    (sup const-decl "real" real_fun_supinf analysis)
    (limit_def formula-decl nil convergence_sequences analysis)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (Im const-decl "setof[real]" real_fun_props reals)
    (empty? const-decl "bool" sets nil)
    (upper_bound? const-decl "bool" bounded_real_defs nil)
    (lub const-decl "{x | least_upper_bound?(x, SA)}" bounded_real_defs
     nil)
    (bounded_above? const-decl "bool" bounded_real_defs nil)
    (least_upper_bound? const-decl "bool" bounded_real_defs nil)
    (nonempty? const-decl "bool" sets nil)
    (nonempty_image application-judgement "(nonempty?[real])"
     double_nn_sequence extended_nnreal)
    (setof type-eq-decl nil defined_types nil)
    (bounded_above? const-decl "bool" real_fun_preds reals)
    (om_increasing? const-decl "bool" outer_measure_def nil)
    (En skolem-const-decl "[nat -> outer_measurable]"
     outer_measure_props nil)
    (subset? const-decl "bool" sets nil)
    (series const-decl "sequence[real]" series series)
    (pred type-eq-decl nil defined_types nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (sigma_0_neg formula-decl nil sigma_nat reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sigma def-decl "real" sigma reals)
    (outer_measurable_disjoint_union formula-decl nil
     outer_measure_props nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (x_add const-decl "extended_nnreal" extended_nnreal
     extended_nnreal)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (disjoint? const-decl "bool" indexed_sets_aux sets_aux)
    (outer_measurable_intersection application-judgement
     "outer_measurable" outer_measure_props nil)
    (outer_measurable_emptyset name-judgement "outer_measurable"
     outer_measure_props nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (FALSE const-decl "bool" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (member const-decl "bool" sets nil)
    (O const-decl "T3" function_props nil)
    (om_countably_subadditive? const-decl "bool" outer_measure_def
     nil))
   shostak)
  (outer_measurable_disjoint_IUnion-1 nil 3397964035
   ("" (skosimp)
    ((""
      (lemma "x_le_antisymmetric"
       ("x" "m(intersection(x!1, IUnion(X!1)))" "y"
        "x_sum(LAMBDA i: m(intersection(x!1, X!1(i))))"))
      (("" (assert)
        (("" (hide 2)
          (("" (split)
            (("1" (typepred "m")
              (("1" (expand "outer_measure?")
                (("1" (flatten)
                  (("1" (expand "om_countably_subadditive?")
                    (("1"
                      (inst - "LAMBDA i: intersection(x!1, X!1(i))")
                      (("1" (expand "o")
                        (("1"
                          (case-replace
                           "IUnion(LAMBDA i: intersection(x!1, X!1(i)))=intersection(x!1, IUnion(X!1))")
                          (("1" (hide -3 2)
                            (("1" (apply-extensionality :hide? t)
                              (("1"
                                (expand "intersection")
                                (("1"
                                  (expand "IUnion")
                                  (("1"
                                    (expand "member")
                                    (("1"
                                      (case-replace "x!1(x!2)")
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "x_le")
              (("2" (flatten)
                (("2" (expand "x_sum")
                  (("2"
                    (case-replace
                     "FORALL i: m(intersection(x!1, X!1(i)))`1")
                    (("1" (lift-if)
                      (("1" (assert)
                        (("1"
                          (name "En" "lambda (n:nat): IUnion(LAMBDA i:
                  IF i <= n THEN X!1(i)
                  ELSE emptyset[T]
                  ENDIF)")
                          (("1" (hide -1)
                            (("1"
                              (case "En(0) =X!1(0) & forall (n:nat): En(n+1)=union(En(n), X!1(n+1))")
                              (("1"
                                (flatten)
                                (("1"
                                  (case
                                   "FORALL (n: nat): disjoint?(En(n),X!1(n+1))")
                                  (("1"
                                    (case
                                     "FORALL (n: nat): outer_measurable?(En(n))")
                                    (("1"
                                      (case
                                       "forall (n:nat): x_eq(m(intersection(x!1,En(n))),x_sigma(0,n,lambda i: m(intersection(x!1, X!1(i)))))")
                                      (("1"
                                        (case-replace
                                         "series(LAMBDA (i_1: nat):
                             m(intersection(x!1, X!1(i_1)))`2)=lambda i: m(intersection(x!1, En(i)))`2")
                                        (("1"
                                          (hide -1)
                                          (("1"
                                            (case
                                             "forall (n:nat): subset?(intersection(x!1, En(n)),intersection(x!1, IUnion(X!1)))")
                                            (("1"
                                              (case
                                               "FORALL (n: nat):m(intersection(x!1, En(n)))`1")
                                              (("1"
                                                (case
                                                 "FORALL (n: nat):m(intersection(x!1, En(n)))`2<=m(intersection(x!1, IUnion(X!1)))`2")
                                                (("1"
                                                  (case
                                                   "increasing?(LAMBDA i: m(intersection(x!1, En(i)))`2)")
                                                  (("1"
                                                    (case
                                                     "bounded_above?(LAMBDA i: m(intersection(x!1, En(i)))`2)")
                                                    (("1"
                                                      (lemma
                                                       "increasing_bounded_convergence"
                                                       ("v1"
                                                        "LAMBDA i: m(intersection(x!1, En(i)))`2"))
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (case-replace
                                                           "convergence_sequences.convergent?(LAMBDA i: m(intersection(x!1, En(i)))`2)")
                                                          (("1"
                                                            (hide -1)
                                                            (("1"
                                                              (rewrite
                                                               "convergence_sequences.limit_def"
                                                               -1
                                                               :dir
                                                               rl)
                                                              (("1"
                                                                (replace
                                                                 -1)
                                                                (("1"
                                                                  (hide
                                                                   -1)
                                                                  (("1"
                                                                    (expand
                                                                     "sup")
                                                                    (("1"
                                                                      (expand
                                                                       "Im")
                                                                      (("1"
                                                                        (typepred
                                                                         "lub({z:real | EXISTS (x: nat): z = m(intersection(x!1, En(x)))`2})")
                                                                        (("1"
                                                                          (name-replace
                                                                           "LUB"
                                                                           "lub({z:real | EXISTS (x: nat): z = m(intersection(x!1, En(x)))`2})")
                                                                          (("1"
                                                                            (expand
                                                                             "least_upper_bound?")
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (inst
                                                                                 -
                                                                                 "m(intersection(x!1, IUnion(X!1)))`2")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (hide
                                                                                     2)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "upper_bound?"
                                                                                       1)
                                                                                      (("1"
                                                                                        (skosimp)
                                                                                        (("1"
                                                                                          (typepred
                                                                                           "s!1")
                                                                                          (("1"
                                                                                            (skosimp)
                                                                                            (("1"
                                                                                              (inst
                                                                                               -5
                                                                                               "x!2")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           2)
                                                                          (("2"
                                                                            (split)
                                                                            (("1"
                                                                              (expand
                                                                               "nonempty?")
                                                                              (("1"
                                                                                (expand
                                                                                 "empty?")
                                                                                (("1"
                                                                                  (expand
                                                                                   "member")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -
                                                                                     "m(intersection[T](x!1, En(0)))`2")
                                                                                    (("1"
                                                                                      (inst
                                                                                       +
                                                                                       "0")
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (expand
                                                                               "bounded_above?")
                                                                              (("2"
                                                                                (skosimp)
                                                                                (("2"
                                                                                  (expand
                                                                                   "upper_bound?")
                                                                                  (("2"
                                                                                    (inst
                                                                                     +
                                                                                     "a!1")
                                                                                    (("2"
                                                                                      (skosimp)
                                                                                      (("2"
                                                                                        (typepred
                                                                                         "s!1")
                                                                                        (("2"
                                                                                          (skosimp)
                                                                                          (("2"
                                                                                            (inst
                                                                                             -
                                                                                             "x!2")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide
                                                                 2)
                                                                (("2"
                                                                  (expand
                                                                   "convergence_sequences.convergent?")
                                                                  (("2"
                                                                    (expand
                                                                     "sup")
                                                                    (("2"
                                                                      (inst
                                                                       +
                                                                       "lub(Im(LAMBDA i: m(intersection(x!1, En(i)))`2))")
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide 2)
                                                            (("2"
                                                              (expand
                                                               "convergence_sequences.convergent?")
                                                              (("2"
                                                                (expand
                                                                 "sup")
                                                                (("2"
                                                                  (inst
                                                                   +
                                                                   "lub(Im(LAMBDA i: m(intersection(x!1, En(i)))`2))")
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide 2)
                                                      (("2"
                                                        (expand
                                                         "bounded_above?")
                                                        (("2"
                                                          (inst
                                                           +
                                                           "m(intersection(x!1, IUnion(X!1)))`2")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide 2)
                                                    (("2"
                                                      (expand
                                                       "increasing?")
                                                      (("2"
                                                        (skolem
                                                         +
                                                         ("i!1" "j!1"))
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (hide -2)
                                                            (("2"
                                                              (inst
                                                               -
                                                               "j!1")
                                                              (("2"
                                                                (typepred
                                                                 "m")
                                                                (("2"
                                                                  (expand
                                                                   "outer_measure?")
                                                                  (("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (expand
                                                                       "om_increasing?")
                                                                      (("2"
                                                                        (inst
                                                                         -
                                                                         "intersection(x!1, En(i!1))"
                                                                         "intersection(x!1, En(j!1))")
                                                                        (("2"
                                                                          (split
                                                                           -2)
                                                                          (("1"
                                                                            (expand
                                                                             "x_le")
                                                                            (("1"
                                                                              (replace
                                                                               -5)
                                                                              (("1"
                                                                                (flatten)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide-all-but
                                                                             (-3
                                                                              1))
                                                                            (("2"
                                                                              (expand
                                                                               "En")
                                                                              (("2"
                                                                                (expand
                                                                                 "intersection")
                                                                                (("2"
                                                                                  (expand
                                                                                   "subset?")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "IUnion")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "emptyset")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "member")
                                                                                        (("2"
                                                                                          (skosimp*)
                                                                                          (("2"
                                                                                            (prop)
                                                                                            (("2"
                                                                                              (inst
                                                                                               +
                                                                                               "i!2")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 2)
                                                  (("2"
                                                    (skosimp)
                                                    (("2"
                                                      (inst - "n!1")
                                                      (("2"
                                                        (inst - "n!1")
                                                        (("2"
                                                          (typepred
                                                           "m")
                                                          (("2"
                                                            (expand
                                                             "outer_measure?")
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (expand
                                                                 "om_increasing?")
                                                                (("2"
                                                                  (inst
                                                                   -
                                                                   "intersection(x!1, En(n!1))"
                                                                   "intersection(x!1, IUnion(X!1))")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (expand
                                                                       "x_le")
                                                                      (("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide 2)
                                                (("2"
                                                  (skosimp)
                                                  (("2"
                                                    (inst - "n!1")
                                                    (("2"
                                                      (typepred "m")
                                                      (("2"
                                                        (expand
                                                         "outer_measure?")
                                                        (("2"
                                                          (expand
                                                           "om_increasing?")
                                                          (("2"
                                                            (flatten)
                                                            (("2"
                                                              (inst
                                                               -
                                                               "intersection(x!1, En(n!1))"
                                                               "intersection(x!1, IUnion(X!1))")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "x_le")
                                                                  (("2"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but 1)
                                              (("2"
                                                (skosimp)
                                                (("2"
                                                  (expand "En")
                                                  (("2"
                                                    (expand
                                                     "intersection")
                                                    (("2"
                                                      (expand
                                                       "subset?")
                                                      (("2"
                                                        (expand
                                                         "member")
                                                        (("2"
                                                          (expand
                                                           "IUnion")
                                                          (("2"
                                                            (expand
                                                             "emptyset")
                                                            (("2"
                                                              (skosimp*)
                                                              (("2"
                                                                (prop)
                                                                (("2"
                                                                  (inst
                                                                   +
                                                                   "i!1")
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (apply-extensionality
                                             :hide?
                                             t)
                                            (("2"
                                              (expand "series")
                                              (("2"
                                                (inst - "x!2")
                                                (("2"
                                                  (expand "x_eq")
                                                  (("2"
                                                    (expand "x_sigma")
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (case-replace
                                                         "FORALL (i_1: nat):
             i_1 <= x!2 => m(intersection(x!1, X!1(i_1)))`1")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (skosimp)
                                                          (("2"
                                                            (inst
                                                             -8
                                                             "i!1")
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (induct "n")
                                          (("1"
                                            (replace -3)
                                            (("1"
                                              (expand "x_sigma")
                                              (("1"
                                                (expand "sigma")
                                                (("1"
                                                  (expand "x_eq")
                                                  (("1"
                                                    (inst -5 "0")
                                                    (("1"
                                                      (replace -5)
                                                      (("1"
                                                        (lift-if)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (prop)
                                                            (("1"
                                                              (skosimp)
                                                              (("1"
                                                                (typepred
                                                                 "i!1")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (skosimp*)
                                            (("2"
                                              (lemma
                                               "outer_measurable_disjoint_union"
                                               ("x"
                                                "x!1"
                                                "a"
                                                "En(j!1)"
                                                "b"
                                                "X!1(j!1 + 1)"))
                                              (("2"
                                                (inst -4 "j!1")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (case-replace
                                                     "intersection(x!1, union(En(j!1), X!1(1 + j!1)))=intersection(x!1, En(1 + j!1))")
                                                    (("1"
                                                      (hide-all-but
                                                       (-2 -3 1))
                                                      (("1"
                                                        (expand "x_eq")
                                                        (("1"
                                                          (expand
                                                           "x_add")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (expand
                                                                 "x_sigma")
                                                                (("1"
                                                                  (expand
                                                                   "sigma"
                                                                   1)
                                                                  (("1"
                                                                    (case-replace
                                                                     "m(intersection(x!1, En(1 + j!1)))`1")
                                                                    (("1"
                                                                      (prop)
                                                                      (("1"
                                                                        (replace
                                                                         -2)
                                                                        (("1"
                                                                          (skosimp)
                                                                          (("1"
                                                                            (prop)
                                                                            (("1"
                                                                              (inst
                                                                               -
                                                                               "i!1")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (replace
                                                                         -2)
                                                                        (("2"
                                                                          (prop)
                                                                          (("2"
                                                                            (case-replace
                                                                             "FORALL (i_1: nat):
            i_1 <= 1 + j!1 => m(intersection(x!1, X!1(i_1)))`1")
                                                                            (("1"
                                                                              (replace
                                                                               -2
                                                                               -3)
                                                                              (("1"
                                                                                (replace
                                                                                 -5)
                                                                                (("1"
                                                                                  (replace
                                                                                   -7
                                                                                   1)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -3
                                                                                     1
                                                                                     rl)
                                                                                    (("1"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide
                                                                               2)
                                                                              (("2"
                                                                                (skosimp)
                                                                                (("2"
                                                                                  (inst
                                                                                   -
                                                                                   "i!1")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (replace
                                                                       1)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (case-replace
                                                                           "FORALL (i_1: nat):
           i_1 <= 1 + j!1 => m(intersection(x!1, X!1(i_1)))`1")
                                                                          (("1"
                                                                            (case-replace
                                                                             "FORALL (i_2: nat):
             i_2 <= j!1 => m(intersection(x!1, X!1(i_2)))`1")
                                                                            (("1"
                                                                              (replace
                                                                               -3)
                                                                              (("1"
                                                                                (inst
                                                                                 -2
                                                                                 "1+j!1")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (skosimp)
                                                                              (("2"
                                                                                (inst
                                                                                 -
                                                                                 "i!1")
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (replace
                                                                             1
                                                                             -3)
                                                                            (("2"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but
                                                       (1 -5 -6))
                                                      (("2"
                                                        (apply-extensionality
                                                         :hide?
                                                         t)
                                                        (("2"
                                                          (expand
                                                           "intersection")
                                                          (("2"
                                                            (expand
                                                             "member")
                                                            (("2"
                                                              (expand
                                                               "union")
                                                              (("2"
                                                                (expand
                                                                 "member")
                                                                (("2"
                                                                  (inst
                                                                   -
                                                                   "j!1")
                                                                  (("2"
                                                                    (replace
                                                                     -2)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide 2)
                                      (("2"
                                        (skosimp)
                                        (("2"
                                          (expand "En")
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide 2)
                                    (("2"
                                      (skosimp)
                                      (("2"
                                        (expand "disjoint?")
                                        (("2"
                                          (expand "disjoint?")
                                          (("2"
                                            (expand "intersection")
                                            (("2"
                                              (expand "En")
                                              (("2"
                                                (expand "empty?")
                                                (("2"
                                                  (expand "IUnion")
                                                  (("2"
                                                    (expand "emptyset")
                                                    (("2"
                                                      (expand "member")
                                                      (("2"
                                                        (skosimp)
                                                        (("2"
                                                          (skosimp)
                                                          (("2"
                                                            (prop)
                                                            (("2"
                                                              (inst
                                                               -8
                                                               "i!1"
                                                               "1+n!1")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (inst
                                                                   -8
                                                                   "x!2")
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 2)
                                (("2"
                                  (split)
                                  (("1"
                                    (expand "En")
                                    (("1"
                                      (apply-extensionality :hide? t)
                                      (("1"
                                        (expand "IUnion")
                                        (("1"
                                          (expand "emptyset")
                                          (("1"
                                            (case-replace
                                             "X!1(0)(x!2)")
                                            (("1"
                                              (inst + "0")
                                              (("1" (assert) nil nil))
                                              nil)
                                             ("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (skosimp)
                                    (("2"
                                      (expand "En")
                                      (("2"
                                        (expand "union")
                                        (("2"
                                          (expand "IUnion")
                                          (("2"
                                            (expand "member")
                                            (("2"
                                              (expand "emptyset")
                                              (("2"
                                                (apply-extensionality
                                                 :hide?
                                                 t)
                                                (("2"
                                                  (case-replace
                                                   "EXISTS (i_1: nat):
         IF i_1 <= 1 + n!1 THEN X!1(i_1)(x!2) ELSE FALSE ENDIF")
                                                  (("1"
                                                    (skosimp)
                                                    (("1"
                                                      (prop)
                                                      (("1"
                                                        (expand
                                                         "<="
                                                         -1)
                                                        (("1"
                                                          (split)
                                                          (("1"
                                                            (inst
                                                             +
                                                             "i!1")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (replace 1 2)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (split)
                                                        (("1"
                                                          (skosimp)
                                                          (("1"
                                                            (prop)
                                                            (("1"
                                                              (inst
                                                               +
                                                               "i!1")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (inst
                                                           +
                                                           "1+n!1")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 2)
                      (("2" (skosimp)
                        (("2" (typepred "m")
                          (("2" (expand "outer_measure?")
                            (("2" (flatten)
                              (("2"
                                (expand "om_increasing?")
                                (("2"
                                  (inst
                                   -
                                   "intersection(x!1, X!1(i!1))"
                                   "intersection(x!1, IUnion(X!1))")
                                  (("2"
                                    (expand "x_le")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (hide 2)
                                        (("2"
                                          (expand "subset?")
                                          (("2"
                                            (expand "intersection")
                                            (("2"
                                              (expand "member")
                                              (("2"
                                                (skosimp)
                                                (("2"
                                                  (expand "IUnion")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (inst + "i!1")
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sequence type-eq-decl nil sequences nil)
    (intersection const-decl "set" sets nil)
    (outer_measure nonempty-type-eq-decl nil outer_measure_def nil)
    (outer_measure? const-decl "bool" outer_measure_def nil)
    (set type-eq-decl nil sets nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (x_le_antisymmetric formula-decl nil extended_nnreal
     extended_nnreal)
    (x_le const-decl "bool" extended_nnreal extended_nnreal)
    (emptyset const-decl "set" sets nil)
    (union const-decl "set" sets nil)
    (disjoint? const-decl "bool" sets nil)
    (x_sigma const-decl "extended_nnreal" extended_nnreal
     extended_nnreal)
    (increasing? const-decl "bool" real_fun_preds reals)
    (increasing_bounded_convergence formula-decl nil
     convergence_sequences analysis)
    (convergent? const-decl "bool" convergence_sequences analysis)
    (sup const-decl "real" real_fun_supinf analysis)
    (limit_def formula-decl nil convergence_sequences analysis)
    (empty? const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (bounded_above? const-decl "bool" real_fun_preds reals)
    (om_increasing? const-decl "bool" outer_measure_def nil)
    (subset? const-decl "bool" sets nil)
    (sigma_0_neg formula-decl nil sigma_nat reals)
    (sigma def-decl "real" sigma reals)
    (disjoint? const-decl "bool" indexed_sets_aux sets_aux)
    (member const-decl "bool" sets nil)
    (om_countably_subadditive? const-decl "bool" outer_measure_def
     nil))
   shostak))
 (outer_measure_disjoint_IUnion 0
  (outer_measure_disjoint_IUnion-1 nil 3396790447
   ("" (skosimp)
    ((""
      (lemma "outer_measurable_disjoint_IUnion"
       ("X" "X!1" "x" "fullset[T]"))
      (("" (assert)
        ((""
          (case-replace
           "intersection(fullset[T], IUnion(X!1))=IUnion(X!1)")
          (("1" (hide -1)
            (("1"
              (case-replace
               "(LAMBDA i: m(intersection(fullset[T], X!1(i)))) = m o X!1")
              (("1" (hide-all-but 1)
                (("1" (apply-extensionality :hide? t)
                  (("1" (expand "o")
                    (("1" (expand "fullset")
                      (("1" (expand "intersection")
                        (("1" (expand "member")
                          (("1"
                            (case-replace
                             "{x_1: T | X!1(x!1)(x_1)}=X!1(x!1)")
                            (("1" (hide 2)
                              (("1"
                                (apply-extensionality :hide? t)
                                nil
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide-all-but 1)
            (("2" (apply-extensionality :hide? t)
              (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fullset const-decl "set" sets nil)
    (sequence type-eq-decl nil sequences nil)
    (outer_measurable nonempty-type-eq-decl nil outer_measure_props
     nil)
    (outer_measurable? const-decl "bool" outer_measure_props nil)
    (set type-eq-decl nil sets nil)
    (T formal-type-decl nil outer_measure_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (outer_measurable_disjoint_IUnion formula-decl nil
     outer_measure_props nil)
    (outer_measurable_intersection application-judgement
     "outer_measurable" outer_measure_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (intersection const-decl "set" sets nil)
    (IUnion const-decl "set[T]" indexed_sets nil)
    (nnreal type-eq-decl nil real_types nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (outer_measure? const-decl "bool" outer_measure_def nil)
    (outer_measure nonempty-type-eq-decl nil outer_measure_def nil)
    (m formal-const-decl "outer_measure" outer_measure_props nil)
    (O const-decl "T3" function_props nil)
    (outer_measurable_fullset name-judgement "outer_measurable"
     outer_measure_props nil)
    (member const-decl "bool" sets nil)
    (outer_measurable_IUnion application-judgement "outer_measurable"
     outer_measure_props nil))
   shostak))
 (outer_measurable_is_sigma_algebra 0
  (outer_measurable_is_sigma_algebra-1 nil 3397464661
   ("" (expand "fullset")
    (("" (expand "extend")
      (("" (expand "sigma_algebra?")
        (("" (split)
          (("1" (expand "subset_algebra_empty?")
            (("1" (expand "member") (("1" (propax) nil nil)) nil)) nil)
           ("2" (expand "subset_algebra_complement?")
            (("2" (skosimp)
              (("2" (expand "member")
                (("2" (typepred "x!1")
                  (("2" (prop)
                    (("2" (assert)
                      (("2"
                        (lemma "outer_measurable_complement"
                         ("a" "x!1"))
                        (("2" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (expand "sigma_algebra_union?")
            (("3" (skosimp*)
              (("3" (expand "member")
                (("3" (prop)
                  (("3" (lemma "outer_measurable_Union" ("S" "X!1"))
                    (("3" (assert)
                      (("3" (hide -1 2)
                        (("3" (expand "every")
                          (("3" (skosimp)
                            (("3" (inst - "x!1") (("3" (prop) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((extend const-decl "R" extend nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (finite_emptyset name-judgement "finite_set" countable_props
     sets_aux)
    (outer_measurable_emptyset name-judgement "outer_measurable"
     outer_measure_props nil)
    (member const-decl "bool" sets nil)
    (subset_algebra_empty? const-decl "bool" subset_algebra_def nil)
    (TRUE const-decl "bool" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (setof type-eq-decl nil defined_types nil)
    (outer_measurable? const-decl "bool" outer_measure_props nil)
    (set type-eq-decl nil sets nil)
    (T formal-type-decl nil outer_measure_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (FALSE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (outer_measurable nonempty-type-eq-decl nil outer_measure_props
     nil)
    (outer_measurable_complement judgement-tcc nil outer_measure_props
     nil)
    (subset_algebra_complement? const-decl "bool" subset_algebra_def
     nil)
    (Union_surjective name-judgement
     "(surjective?[setofsets[T], set[T]])" sets_lemmas nil)
    (every const-decl "bool" sets nil)
    (outer_measurable_Union formula-decl nil outer_measure_props nil)
    (setofsets type-eq-decl nil sets nil)
    (sigma_algebra_union? const-decl "bool" subset_algebra_def nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (fullset const-decl "set" sets nil))
   shostak))
 (induced_sigma_algebra_TCC1 0
  (induced_sigma_algebra_TCC1-1 nil 3453444636
   ("" (lemma "outer_measurable_is_sigma_algebra")
    (("" (expand "fullset")
      (("" (expand "extend")
        (("" (expand "sigma_algebra?")
          (("" (flatten)
            (("" (split)
              (("1" (expand "subset_algebra_empty?")
                (("1" (expand "member") (("1" (propax) nil nil)) nil))
                nil)
               ("2" (expand "subset_algebra_complement?")
                (("2" (skosimp)
                  (("2" (expand "member") (("2" (propax) nil nil))
                    nil))
                  nil))
                nil)
               ("3" (expand "sigma_algebra_union?")
                (("3" (skosimp)
                  (("3" (expand "member")
                    (("3" (inst -5 "X!1")
                      (("3" (assert)
                        (("3" (skosimp)
                          (("3" (inst -2 "x!1")
                            (("3" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fullset const-decl "set" sets nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (finite_emptyset name-judgement "finite_set" countable_props
     sets_aux)
    (outer_measurable_emptyset name-judgement "outer_measurable"
     outer_measure_props nil)
    (member const-decl "bool" sets nil)
    (subset_algebra_empty? const-decl "bool" subset_algebra_def nil)
    (outer_measurable_complement application-judgement
     "outer_measurable" outer_measure_props nil)
    (subset_algebra_complement? const-decl "bool" subset_algebra_def
     nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil outer_measure_props nil)
    (Union_surjective name-judgement
     "(surjective?[setofsets[T], set[T]])" sets_lemmas nil)
    (sigma_algebra_union? const-decl "bool" subset_algebra_def nil)
    (extend const-decl "R" extend nil)
    (outer_measurable_is_sigma_algebra formula-decl nil
     outer_measure_props nil))
   nil
   (induced_sigma_algebra subtype
    "(outer_measure_props.outer_measurable?)" "sigma_algebra[T]")))
 (induced_measure_TCC1 0
  (induced_measure_TCC1-1 nil 3397469199
   ("" (typepred "m")
    (("" (expand "restrict")
      (("" (expand "complete_measure?")
        (("" (expand "measure?")
          (("" (expand "outer_measure?")
            (("" (flatten)
              (("" (split)
                (("1" (expand "measure_empty?")
                  (("1" (expand "om_empty?") (("1" (propax) nil nil))
                    nil))
                  nil)
                 ("2" (expand "measure_countably_additive?")
                  (("2" (skosimp)
                    (("2" (typepred "X!1")
                      (("2"
                        (lemma "outer_measure_disjoint_IUnion"
                         ("X" "X!1"))
                        (("1" (expand "disjoint_indexed_measurable?")
                          (("1" (replace -2)
                            (("1" (hide-all-but (-1 1))
                              (("1"
                                (expand "x_eq")
                                (("1"
                                  (expand "o ")
                                  (("1"
                                    (case-replace "m(IUnion(X!1))`1")
                                    (("1"
                                      (flatten)
                                      (("1" (assert) nil nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (skolem + "n!1")
                          (("2" (typepred "X!1(n!1)")
                            (("2" (expand "induced_sigma_algebra")
                              (("2" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (expand "measure_complete?")
                  (("3" (skosimp)
                    (("3" (expand "induced_sigma_algebra")
                      (("3" (rewrite "outer_measurable_def")
                        (("3" (skosimp)
                          (("3" (expand "om_increasing?")
                            (("3"
                              (case-replace
                               "m(intersection(y!1, x!1))=(TRUE,0)")
                              (("1"
                                (expand "x_add")
                                (("1"
                                  (inst
                                   -
                                   "intersection(y!1, complement(x!1))"
                                   "y!1")
                                  (("1"
                                    (split -5)
                                    (("1"
                                      (expand "x_le")
                                      (("1"
                                        (case-replace "m(y!1)`1")
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (replace -2)
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide-all-but 1)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide-all-but (-1 -2 -4 1))
                                (("2"
                                  (inst-cp - "x!1" "a!1")
                                  (("2"
                                    (replace -2)
                                    (("2"
                                      (inst
                                       -
                                       "intersection(y!1, x!1)"
                                       "x!1")
                                      (("2"
                                        (split -3)
                                        (("1"
                                          (expand "x_le")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (replace -2)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (replace -4)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (decompose-equality
                                                           1)
                                                          (("1"
                                                            (typepred
                                                             "reals.<=")
                                                            (("1"
                                                              (expand
                                                               "total_order?")
                                                              (("1"
                                                                (expand
                                                                 "partial_order?")
                                                                (("1"
                                                                  (expand
                                                                   "preorder?")
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (expand
                                                                       "transitive?")
                                                                      (("1"
                                                                        (inst
                                                                         -
                                                                         "m(intersection(y!1, x!1))`2"
                                                                         "m(x!1)`2"
                                                                         "0")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (replace
                                                                             -6)
                                                                            (("1"
                                                                              (replace
                                                                               -10)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (hide-all-but
                                                                                   (-1
                                                                                    -2
                                                                                    -3
                                                                                    1))
                                                                                  (("1"
                                                                                    (typepred
                                                                                     "m(intersection(y!1, x!1))`2")
                                                                                    (("1"
                                                                                      (expand
                                                                                       ">=")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "antisymmetric?")
                                                                                        (("1"
                                                                                          (inst
                                                                                           -
                                                                                           "0"
                                                                                           "m(intersection(y!1, x!1))`2")
                                                                                          (("1"
                                                                                            (replace
                                                                                             -1)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -3)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but 1)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((restrict const-decl "R" restrict nil)
    (measure? const-decl "bool" generalized_measure_def nil)
    (measure_complete? const-decl "bool" generalized_measure_def nil)
    (TRUE const-decl "bool" booleans nil)
    (intersection const-decl "set" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (complement const-decl "set" sets nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (x_le const-decl "bool" extended_nnreal extended_nnreal)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (x_add const-decl "extended_nnreal" extended_nnreal
     extended_nnreal)
    (preorder? const-decl "bool" orders nil)
    (transitive? const-decl "bool" relations nil)
    (antisymmetric? const-decl "bool" relations nil)
    (partial_order? const-decl "bool" orders nil)
    (<= const-decl "bool" reals nil)
    (total_order? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (om_increasing? const-decl "bool" outer_measure_def nil)
    (outer_measurable_def formula-decl nil outer_measure_props nil)
    (measure_countably_additive? const-decl "bool"
     generalized_measure_def nil)
    (disjoint_indexed_measurable nonempty-type-eq-decl nil
     generalized_measure_def nil)
    (disjoint_indexed_measurable? const-decl "bool"
     generalized_measure_def nil)
    (induced_sigma_algebra const-decl "sigma_algebra[T]"
     outer_measure_props nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (O const-decl "T3" function_props nil)
    (IUnion const-decl "set[T]" indexed_sets nil)
    (x_eq const-decl "bool" extended_nnreal extended_nnreal)
    (sequence type-eq-decl nil sequences nil)
    (outer_measurable nonempty-type-eq-decl nil outer_measure_props
     nil)
    (outer_measurable? const-decl "bool" outer_measure_props nil)
    (outer_measure_disjoint_IUnion formula-decl nil outer_measure_props
     nil)
    (measure_empty? const-decl "bool" generalized_measure_def nil)
    (om_empty? const-decl "bool" outer_measure_def nil)
    (complete_measure? const-decl "bool" generalized_measure_def nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil outer_measure_props nil)
    (set type-eq-decl nil sets nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (outer_measure? const-decl "bool" outer_measure_def nil)
    (outer_measure nonempty-type-eq-decl nil outer_measure_def nil)
    (m formal-const-decl "outer_measure" outer_measure_props nil))
   nil
   (induced_measure subtype
    "restrict[set[T], (outer_measure_props.induced_sigma_algebra), extended_nnreal].restrict(outer_measure_props.m)"
    "complete_measure[T, induced_sigma_algebra]")))
 (induced_measure_rew_TCC1 0
  (induced_measure_rew_TCC1-1 nil 3455093269 ("" (subtype-tcc) nil nil)
   ((induced_sigma_algebra const-decl "sigma_algebra[T]"
     outer_measure_props nil))
   nil
   (induced_measure_rew subtype "outer_measure_props.a"
    "(outer_measure_props.induced_sigma_algebra)")))
 (induced_measure_rew 0
  (induced_measure_rew-1 nil 3397972136
   ("" (skosimp)
    (("" (expand "induced_measure")
      (("" (expand "restrict") (("" (propax) nil nil)) nil)) nil))
    nil)
   ((induced_measure const-decl "complete_measure" outer_measure_props
     nil)
    (restrict const-decl "R" restrict nil))
   shostak))
 (outer_negligible_emptyset 0
  (outer_negligible_emptyset-1 nil 3408178896
   ("" (expand "outer_negligible?")
    (("" (rewrite "m_outer_empty") nil nil)) nil)
   ((m_outer_empty formula-decl nil outer_measure_props nil)
    (outer_negligible? const-decl "bool" outer_measure_props nil))
   nil
   (outer_negligible_emptyset subtype
    "sets[outer_measure_props.T].emptyset" "outer_negligible")))
 (outer_negligible_union 0
  (outer_negligible_union-1 nil 3408178896
   ("" (skosimp)
    (("" (typepred "n2!1")
      (("" (typepred "n1!1")
        (("" (expand "outer_negligible?")
          ((""
            (lemma "m_outer_subadditive"
             ("A"
              "lambda i: if i = 0 then n1!1 elsif i=1 then n2!1 else emptyset[T] endif"))
            ((""
              (case-replace "IUnion(LAMBDA i:
                      IF i = 0 THEN n1!1
                      ELSIF i = 1 THEN n2!1
                      ELSE emptyset[T]
                      ENDIF)=union[T](n1!1, n2!1)")
              (("1" (hide -1)
                (("1" (name-replace "MM" "m(union[T](n1!1, n2!1))")
                  (("1" (expand "o")
                    (("1" (rewrite "m_outer_empty")
                      (("1" (replace -2)
                        (("1" (replace -3)
                          (("1"
                            (case-replace "(LAMBDA (x: nat):
                   IF x = 0 THEN (TRUE, 0)
                   ELSE IF x = 1 THEN (TRUE, 0) ELSE (TRUE, 0) ENDIF
                   ENDIF)=lambda i:(TRUE,0)")
                            (("1" (hide -1 -3 -4)
                              (("1"
                                (expand "x_le")
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "x_sum")
                                    (("1"
                                      (rewrite "zero_series_conv")
                                      (("1"
                                        (rewrite "zero_series_limit")
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (decompose-equality)
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but 1)
                              (("2"
                                (apply-extensionality :hide? t)
                                nil
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide-all-but 1)
                (("2" (apply-extensionality :hide? t)
                  (("2" (case-replace "union[T](n1!1, n2!1)(x!1)")
                    (("1" (expand "IUnion")
                      (("1" (expand "union")
                        (("1" (expand "member")
                          (("1" (split)
                            (("1" (inst + "0") nil nil)
                             ("2" (inst + "1") (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (replace 1 2)
                      (("2" (assert)
                        (("2" (expand "union")
                          (("2" (flatten)
                            (("2" (expand "member")
                              (("2"
                                (expand "IUnion")
                                (("2"
                                  (skosimp)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "emptyset")
                                      (("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((outer_negligible nonempty-type-eq-decl nil outer_measure_props
     nil)
    (outer_negligible? const-decl "bool" outer_measure_props nil)
    (set type-eq-decl nil sets nil)
    (T formal-type-decl nil outer_measure_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (union const-decl "set" sets nil)
    (IUnion const-decl "set[T]" indexed_sets nil)
    (outer_measurable_union application-judgement "outer_measurable"
     outer_measure_props nil)
    (outer_measurable_IUnion application-judgement "outer_measurable"
     outer_measure_props nil)
    (m formal-const-decl "outer_measure" outer_measure_props nil)
    (outer_measure nonempty-type-eq-decl nil outer_measure_def nil)
    (outer_measure? const-decl "bool" outer_measure_def nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (nnreal type-eq-decl nil real_types nil)
    (m_outer_empty formula-decl nil outer_measure_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (zero_series_conv formula-decl nil series series)
    (zero_series_limit formula-decl nil series series)
    (x_sum const-decl "extended_nnreal" extended_nnreal
     extended_nnreal)
    (x_le const-decl "bool" extended_nnreal extended_nnreal)
    (TRUE const-decl "bool" booleans nil)
    (O const-decl "T3" function_props nil)
    (member const-decl "bool" sets nil)
    (outer_negligible_emptyset name-judgement "outer_negligible"
     outer_measure_props nil)
    (m_outer_subadditive formula-decl nil outer_measure_props nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sequence type-eq-decl nil sequences nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (emptyset const-decl "set" sets nil))
   nil
   (outer_negligible_union subtype
    "sets[outer_measure_props.T].union(outer_measure_props.n1, outer_measure_props.n2)"
    "outer_negligible")))
 (outer_negligible_subset 0
  (outer_negligible_subset-1 nil 3408178964
   ("" (skosimp)
    (("" (typepred "n!1")
      (("" (expand "outer_negligible?")
        (("" (lemma "m_outer_increasing" ("x" "x!1" "y" "n!1"))
          (("" (expand "x_le")
            (("" (assert)
              (("" (replace -3)
                (("" (replace -2)
                  (("" (assert)
                    (("" (flatten)
                      (("" (assert)
                        (("" (decompose-equality)
                          (("" (assert)
                            (("" (expand "<=" -3)
                              ((""
                                (assert)
                                ((""
                                  (typepred "m(x!1)`2")
                                  ((""
                                    (assert)
                                    ((""
                                      (expand ">=" -1)
                                      ((""
                                        (expand "<=" -1)
                                        ((""
                                          (split -1)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (lemma
                                               "real_lt_is_strict_total_order")
                                              (("1"
                                                (expand
                                                 "strict_total_order?")
                                                (("1"
                                                  (expand
                                                   "strict_order?")
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (expand
                                                       "transitive?")
                                                      (("1"
                                                        (inst
                                                         -
                                                         "m(x!1)`2"
                                                         "0"
                                                         "m(x!1)`2")
                                                        (("1"
                                                          (replace -4)
                                                          (("1"
                                                            (replace
                                                             -7)
                                                            (("1"
                                                              (expand
                                                               "irreflexive?")
                                                              (("1"
                                                                (inst
                                                                 -
                                                                 "m(x!1)`2")
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (decompose-equality)
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((outer_negligible nonempty-type-eq-decl nil outer_measure_props
     nil)
    (outer_negligible? const-decl "bool" outer_measure_props nil)
    (set type-eq-decl nil sets nil)
    (T formal-type-decl nil outer_measure_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (m_outer_increasing formula-decl nil outer_measure_props nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (outer_measure? const-decl "bool" outer_measure_def nil)
    (outer_measure nonempty-type-eq-decl nil outer_measure_def nil)
    (m formal-const-decl "outer_measure" outer_measure_props nil)
    (TRUE const-decl "bool" booleans nil)
    (<= const-decl "bool" reals nil)
    (real_lt_is_strict_total_order judgement-tcc nil real_props nil)
    (strict_order? const-decl "bool" orders nil)
    (transitive? const-decl "bool" relations nil)
    (irreflexive? const-decl "bool" relations nil)
    (strict_total_order? const-decl "bool" orders nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (x_le const-decl "bool" extended_nnreal extended_nnreal))
   shostak)))

