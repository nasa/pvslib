(measure_props
 (mu_fin?_TCC1 0
  (mu_fin?_TCC1-1 nil 3390801297
   ("" (skosimp)
    (("" (typepred "M!1")
      (("" (expand "measurable_set?") (("" (propax) nil nil)) nil))
      nil))
    nil)
   ((measurable_set nonempty-type-eq-decl nil measure_space_def nil)
    (measurable_set? const-decl "bool" measure_space_def nil)
    (S formal-const-decl "sigma_algebra" measure_props nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (set type-eq-decl nil sets nil)
    (T formal-type-decl nil measure_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil (mu_fin? subtype "measure_props.M" "(measure_props.S)")))
 (mu_TCC1 0
  (mu_TCC1-1 nil 3390801297
   ("" (skosimp)
    (("" (typepred "m!1")
      (("" (expand "measurable_set?") (("" (propax) nil nil)) nil))
      nil))
    nil)
   ((S formal-const-decl "sigma_algebra" measure_props nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (T formal-type-decl nil measure_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (measurable_set? const-decl "bool" measure_space_def nil))
   nil (mu subtype "measure_props.m" "measurable_set[T, S]")))
 (m_emptyset 0
  (m_emptyset-1 nil 3390802395
   ("" (typepred "m")
    (("" (expand "measure?")
      (("" (flatten)
        (("" (expand "measure_empty?") (("" (propax) nil nil)) nil))
        nil))
      nil))
    nil)
   ((measure_empty? const-decl "bool" generalized_measure_def nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil measure_props nil)
    (setof type-eq-decl nil defined_types nil)
    (setofsets type-eq-decl nil sets nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (S formal-const-decl "sigma_algebra" measure_props nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (measure? const-decl "bool" generalized_measure_def nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     nil)
    (m formal-const-decl "measure_type" measure_props nil))
   shostak))
 (m_countably_additive 0
  (m_countably_additive-1 nil 3395371349
   ("" (skosimp)
    (("" (typepred "m")
      (("" (expand "measure?")
        (("" (flatten)
          (("" (expand "measure_countably_additive?")
            (("" (inst - "DX!1") nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((m formal-const-decl "measure_type" measure_props nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     nil)
    (measure? const-decl "bool" generalized_measure_def nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (S formal-const-decl "sigma_algebra" measure_props nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (T formal-type-decl nil measure_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (disjoint_indexed_measurable nonempty-type-eq-decl nil
     generalized_measure_def nil)
    (disjoint_indexed_measurable? const-decl "bool"
     generalized_measure_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (measure_countably_additive? const-decl "bool"
     generalized_measure_def nil)
    (sigma_algebra_IUnion_rew application-judgement "(S)" measure_props
     nil))
   shostak))
 (m_disjoint_union_TCC1 0
  (m_disjoint_union_TCC1-1 nil 3390801297
   ("" (skosimp)
    (("" (typepred "a!1")
      (("" (typepred "b!1")
        (("" (expand "measurable_set?")
          (("" (lemma "sigma_algebra_union" ("x" "a!1" "y" "b!1"))
            (("1" (assert) nil nil) ("2" (propax) nil nil)
             ("3" (propax) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((measurable_set nonempty-type-eq-decl nil measure_space_def nil)
    (measurable_set? const-decl "bool" measure_space_def nil)
    (S formal-const-decl "sigma_algebra" measure_props nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (set type-eq-decl nil sets nil)
    (T formal-type-decl nil measure_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (member const-decl "bool" sets nil)
    (measurable_union application-judgement "measurable_set[T, S]"
     measure_props nil)
    (sigma_algebra_union formula-decl nil sigma_algebra nil))
   nil
   (m_disjoint_union subtype
    "sets[measure_props.T].union(measure_props.a, measure_props.b)"
    "(measure_props.S)")))
 (m_disjoint_union_TCC2 0
  (m_disjoint_union_TCC2-1 nil 3390801297
   ("" (skosimp)
    (("" (typepred "b!1")
      (("" (expand "measurable_set?") (("" (propax) nil nil)) nil))
      nil))
    nil)
   ((measurable_set nonempty-type-eq-decl nil measure_space_def nil)
    (measurable_set? const-decl "bool" measure_space_def nil)
    (S formal-const-decl "sigma_algebra" measure_props nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (set type-eq-decl nil sets nil)
    (T formal-type-decl nil measure_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil
   (m_disjoint_union subtype "measure_props.b" "(measure_props.S)")))
 (m_disjoint_union 0
  (m_disjoint_union-1 nil 3390802443
   ("" (skosimp)
    ((""
      (lemma "m_countably_additive"
       ("DX"
        "lambda i: if i=0 then a!1 elsif i=1 then b!1 else emptyset[T] endif"))
      (("1"
        (case-replace "IUnion(LAMBDA i:
                      IF i = 0 THEN a!1
                      ELSIF i = 1 THEN b!1
                      ELSE emptyset[T]
                      ENDIF)=union(a!1, b!1)")
        (("1" (hide -1)
          (("1" (expand "o")
            (("1" (rewrite "m_emptyset")
              (("1"
                (case-replace "x_sum(LAMBDA (x: nat):
                   IF x = 0 THEN m(a!1)
                   ELSE IF x = 1 THEN m(b!1) ELSE (TRUE, 0) ENDIF
                   ENDIF)=x_add(m(a!1), m(b!1))")
                (("1" (hide -1 -3) (("1" (grind) nil nil)) nil)
                 ("2" (hide -1 2)
                  (("2" (expand "x_sum")
                    (("2" (expand "x_add")
                      (("2" (case-replace "m(a!1)`1")
                        (("1" (assert)
                          (("1" (case-replace "m(b!1)`1")
                            (("1" (assert)
                              (("1"
                                (lemma
                                 "zero_tail_series_conv"
                                 ("a"
                                  "(LAMBDA i:
                             IF i = 0 THEN m(a!1)`2
                             ELSE IF i = 1 THEN m(b!1)`2 ELSE 0 ENDIF
                             ENDIF)"
                                  "n"
                                  "1"))
                                (("1"
                                  (case-replace
                                   "(FORALL (m_1: nat):
         1 < m_1 =>
          (LAMBDA i:
             IF i = 0 THEN m(a!1)`2
             ELSE IF i = 1 THEN m(b!1)`2 ELSE 0 ENDIF
             ENDIF)
              (m_1)
           = 0)")
                                  (("1"
                                    (replace -2)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (lemma
                                         "zero_tail_series_limit"
                                         ("a"
                                          "(LAMBDA (i_2: nat):
                    IF i_2 = 0 THEN m(a!1)`2
                    ELSE IF i_2 = 1 THEN m(b!1)`2 ELSE 0 ENDIF
                    ENDIF)"
                                          "n"
                                          "1"))
                                        (("1"
                                          (hide-all-but 1)
                                          (("1"
                                            (expand "series")
                                            (("1"
                                              (lemma
                                               "zero_tail_series_limit"
                                               ("a"
                                                "LAMBDA (i:nat):
                     IF i = 0 THEN m(a!1)`2
                     ELSE IF i = 1 THEN m(b!1)`2 ELSE 0 ENDIF
                     ENDIF"
                                                "n"
                                                "1"))
                                              (("1"
                                                (split -1)
                                                (("1"
                                                  (expand "series")
                                                  (("1"
                                                    (replace -1)
                                                    (("1"
                                                      (hide -1)
                                                      (("1"
                                                        (expand
                                                         "sigma")
                                                        (("1"
                                                          (expand
                                                           "sigma")
                                                          (("1"
                                                            (expand
                                                             "sigma")
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 2)
                                                  (("2"
                                                    (skosimp)
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide -1 2)
                                    (("2"
                                      (skosimp)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert)
                              (("2"
                                (case-replace
                                 "(FORALL i:
            IF i = 0 THEN TRUE
            ELSE IF i = 1 THEN FALSE ELSE TRUE ENDIF
            ENDIF)")
                                (("1"
                                  (inst - "1")
                                  (("1" (assert) nil nil))
                                  nil)
                                 ("2"
                                  (replace 1 3)
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (typepred "b!1")
                              (("3"
                                (expand "measurable_set?")
                                (("3" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert)
                          (("2"
                            (case-replace "(FORALL i:
            IF i = 0 THEN FALSE
            ELSE IF i = 1 THEN m(b!1)`1 ELSE TRUE ENDIF
            ENDIF)")
                            (("1" (inst - "0") nil nil)
                             ("2" (replace 1 3)
                              (("2" (propax) nil nil)) nil)
                             ("3" (skosimp)
                              (("3"
                                (typepred "b!1")
                                (("3"
                                  (expand "measurable_set?")
                                  (("3" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (typepred "a!1")
                          (("3" (expand "measurable_set?")
                            (("3" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide-all-but 1)
          (("2" (apply-extensionality :hide? t)
            (("2" (expand "union")
              (("2" (expand "IUnion")
                (("2" (expand "emptyset")
                  (("2" (expand "member")
                    (("2" (case-replace "a!1(x!1)")
                      (("1" (inst + "0") nil nil)
                       ("2" (case-replace "b!1(x!1)")
                        (("1" (inst + "1") (("1" (assert) nil nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (expand "disjoint_indexed_measurable?")
          (("2" (expand "disjoint?")
            (("2" (expand "disjoint?")
              (("2" (skosimp*)
                (("2" (expand "intersection")
                  (("2" (expand "emptyset")
                    (("2" (expand "empty?")
                      (("2" (expand "member")
                        (("2" (skosimp*)
                          (("2" (inst - "x!1") (("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((emptyset const-decl "set" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (measurable_set nonempty-type-eq-decl nil measure_space_def nil)
    (measurable_set? const-decl "bool" measure_space_def nil)
    (set type-eq-decl nil sets nil)
    (disjoint_indexed_measurable nonempty-type-eq-decl nil
     generalized_measure_def nil)
    (disjoint_indexed_measurable? const-decl "bool"
     generalized_measure_def nil)
    (S formal-const-decl "sigma_algebra" measure_props nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (T formal-type-decl nil measure_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (m_countably_additive formula-decl nil measure_props nil)
    (subset_algebra_emptyset name-judgement "(S)" measure_props nil)
    (finite_emptyset name-judgement "finite_set" countable_setofsets
     sets_aux)
    (finite_emptyset name-judgement "finite_set" countable_props
     sets_aux)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (measurable_emptyset name-judgement "measurable_set" measure_props
     nil)
    (member const-decl "bool" sets nil)
    (m_emptyset formula-decl nil measure_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (FALSE const-decl "bool" booleans nil)
    (< const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sigma def-decl "real" sigma reals)
    (series const-decl "sequence[real]" series series)
    (zero_tail_series_limit formula-decl nil series_aux series)
    (sequence type-eq-decl nil sequences nil)
    (zero_tail_series_conv formula-decl nil series_aux series)
    (x_eq const-decl "bool" extended_nnreal extended_nnreal)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nnreal type-eq-decl nil real_types nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (x_sum const-decl "extended_nnreal" extended_nnreal
     extended_nnreal)
    (measure? const-decl "bool" generalized_measure_def nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     nil)
    (m formal-const-decl "measure_type" measure_props nil)
    (TRUE const-decl "bool" booleans nil)
    (x_add const-decl "extended_nnreal" extended_nnreal
     extended_nnreal)
    (O const-decl "T3" function_props nil)
    (measurable_IUnion application-judgement "measurable_set[T, S]"
     measure_props nil)
    (measurable_union application-judgement "measurable_set[T, S]"
     measure_props nil)
    (IUnion const-decl "set[T]" indexed_sets nil)
    (union const-decl "set" sets nil)
    (measurable_intersection application-judgement "measurable_set"
     measure_props nil)
    (intersection const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (disjoint? const-decl "bool" indexed_sets_aux sets_aux)
    (disjoint? const-decl "bool" sets nil))
   shostak))
 (m_monotone_TCC1 0
  (m_monotone_TCC1-1 nil 3390801297
   ("" (skosimp)
    (("" (typepred "b!1")
      (("" (expand "measurable_set?") (("" (propax) nil nil)) nil))
      nil))
    nil)
   ((measurable_set nonempty-type-eq-decl nil measure_space_def nil)
    (measurable_set? const-decl "bool" measure_space_def nil)
    (S formal-const-decl "sigma_algebra" measure_props nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (set type-eq-decl nil sets nil)
    (T formal-type-decl nil measure_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil (m_monotone subtype "measure_props.b" "(measure_props.S)")))
 (m_monotone 0
  (m_monotone-1 nil 3390809401
   ("" (skosimp*)
    ((""
      (lemma "m_disjoint_union" ("a" "a!1" "b" "difference(b!1,a!1)"))
      (("" (lemma "union_diff_subset" ("a" "a!1" "b" "b!1"))
        (("" (replace -3 -1)
          (("" (replace -1 -2)
            (("" (split -2)
              (("1" (hide -2)
                (("1" (expand "x_add")
                  (("1" (expand "x_eq")
                    (("1" (expand "x_le")
                      (("1" (flatten)
                        (("1" (replace -4)
                          (("1" (prop)
                            (("1" (replace -1)
                              (("1"
                                (replace -2)
                                (("1"
                                  (typepred
                                   "m(difference(b!1, a!1))`2")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide-all-but (-2 1))
                (("2" (expand "difference")
                  (("2" (expand "subset?")
                    (("2" (expand "disjoint?")
                      (("2" (expand "intersection")
                        (("2" (expand "member")
                          (("2" (expand "empty?")
                            (("2" (skosimp)
                              (("2"
                                (expand "member")
                                (("2"
                                  (assert)
                                  (("2" (flatten) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((difference const-decl "set" sets nil)
    (measurable_set nonempty-type-eq-decl nil measure_space_def nil)
    (measurable_set? const-decl "bool" measure_space_def nil)
    (S formal-const-decl "sigma_algebra" measure_props nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil measure_props nil)
    (m_disjoint_union formula-decl nil measure_props nil)
    (measurable_difference application-judgement "measurable_set[T, S]"
     measure_props nil)
    (x_add const-decl "extended_nnreal" extended_nnreal
     extended_nnreal)
    (x_le const-decl "bool" extended_nnreal extended_nnreal)
    (m formal-const-decl "measure_type" measure_props nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     nil)
    (measure? const-decl "bool" generalized_measure_def nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (x_eq const-decl "bool" extended_nnreal extended_nnreal)
    (disjoint? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (subset? const-decl "bool" sets nil)
    (union_diff_subset formula-decl nil sets_lemmas nil))
   shostak))
 (m_union_TCC1 0
  (m_union_TCC1-1 nil 3390832920
   ("" (skosimp)
    (("" (lemma "sigma_algebra_union" ("x" "a!1" "y" "b!1"))
      (("1" (assert) nil nil)
       ("2" (assert)
        (("2" (typepred "b!1")
          (("2" (expand "measurable_set?") (("2" (propax) nil nil))
            nil))
          nil))
        nil)
       ("3" (typepred "a!1")
        (("3" (expand "measurable_set?") (("3" (propax) nil nil)) nil))
        nil))
      nil))
    nil)
   ((S formal-const-decl "sigma_algebra" measure_props nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil measure_props nil)
    (measurable_set nonempty-type-eq-decl nil measure_space_def nil)
    (measurable_set? const-decl "bool" measure_space_def nil)
    (set type-eq-decl nil sets nil)
    (sigma_algebra_union formula-decl nil sigma_algebra nil)
    (measurable_union application-judgement "measurable_set[T, S]"
     measure_props nil)
    (member const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil))
   nil
   (m_union subtype
    "sets[measure_props.T].union(measure_props.a, measure_props.b)"
    "(measure_props.S)")))
 (m_union 0
  (m_union-1 nil 3390832920
   ("" (skosimp)
    (("" (rewrite "union_difference")
      ((""
        (lemma "m_disjoint_union"
         ("a" "a!1" "b" "difference(b!1, a!1)"))
        (("" (split -1)
          (("1"
            (lemma "m_monotone" ("a" "difference(b!1, a!1)" "b" "b!1"))
            (("1" (split -1)
              (("1"
                (name-replace "S1" "union(a!1, difference(b!1, a!1))")
                (("1" (name-replace "S2" "difference(b!1, a!1)")
                  (("1" (expand "x_add")
                    (("1" (expand "x_le")
                      (("1" (expand "x_eq")
                        (("1" (flatten)
                          (("1" (prop)
                            (("1" (assert) nil nil)
                             ("2" (assert) nil nil)
                             ("3" (assert) nil nil)
                             ("4" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
              nil))
            nil)
           ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((union_difference formula-decl nil sets_lemmas nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (setofsets type-eq-decl nil sets nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (S formal-const-decl "sigma_algebra" measure_props nil)
    (measurable_set? const-decl "bool" measure_space_def nil)
    (measurable_set nonempty-type-eq-decl nil measure_space_def nil)
    (T formal-type-decl nil measure_props nil)
    (measurable_difference application-judgement "measurable_set[T, S]"
     measure_props nil)
    (measurable_union application-judgement "measurable_set[T, S]"
     measure_props nil)
    (x_le const-decl "bool" extended_nnreal extended_nnreal)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (x_eq const-decl "bool" extended_nnreal extended_nnreal)
    (x_add const-decl "extended_nnreal" extended_nnreal
     extended_nnreal)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (union const-decl "set" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (m_monotone formula-decl nil measure_props nil)
    (measurable_intersection application-judgement "measurable_set"
     measure_props nil)
    (intersection const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (disjoint? const-decl "bool" sets nil)
    (difference const-decl "set" sets nil)
    (m_disjoint_union formula-decl nil measure_props nil))
   shostak))
 (m_increasing_convergence_TCC1 0
  (m_increasing_convergence_TCC1-1 nil 3395375822
   ("" (skosimp)
    (("" (skosimp)
      (("" (typepred "E!1(x1!1)")
        (("" (expand "measurable_set?") (("" (propax) nil nil)) nil))
        nil))
      nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil measure_props nil)
    (set type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (setofsets type-eq-decl nil sets nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (S formal-const-decl "sigma_algebra" measure_props nil)
    (measurable_set? const-decl "bool" measure_space_def nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (measurable_set nonempty-type-eq-decl nil measure_space_def nil)
    (sequence type-eq-decl nil sequences nil))
   nil
   (m_increasing_convergence subtype "measure_props.E"
    "[nat -> (measure_props.S)]")))
 (m_increasing_convergence_TCC2 0
  (m_increasing_convergence_TCC2-1 nil 3395423248
   ("" (skosimp)
    (("" (lemma "measurable_IUnion" ("SS" "E!1"))
      (("" (expand "measurable_set?") (("" (propax) nil nil)) nil))
      nil))
    nil)
   ((S formal-const-decl "sigma_algebra" measure_props nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil measure_props nil)
    (sequence type-eq-decl nil sequences nil)
    (measurable_set nonempty-type-eq-decl nil measure_space_def nil)
    (measurable_set? const-decl "bool" measure_space_def nil)
    (set type-eq-decl nil sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (measurable_IUnion judgement-tcc nil measure_space_def nil))
   nil
   (m_increasing_convergence subtype
    "indexed_sets[nat, measure_props.T].IUnion(measure_props.E)"
    "(measure_props.S)")))
 (m_increasing_convergence 0
  (m_increasing_convergence-1 nil 3395425725
   ("" (skosimp)
    ((""
      (name "G"
            "lambda n: IF n = 0 THEN E!1(0) ELSE difference(E!1(n),E!1(n-1)) ENDIF")
      (("1"
        (case "FORALL n:
        E!1(n) =
         IUnion(LAMBDA (i: nat):
                  IF i <= n THEN G(i) ELSE emptyset[T] ENDIF)
         & (FORALL (i: nat): i < n => disjoint?(G(n), G(i)))")
        (("1" (case "IUnion(G) = IUnion(E!1)")
          (("1" (lemma "m_countably_additive" ("DX" "G"))
            (("1" (expand "x_converges?")
              (("1" (expand "o")
                (("1" (expand "x_eq")
                  (("1" (expand "x_sum")
                    (("1" (flatten)
                      (("1" (case-replace "(FORALL i: m(G(i))`1)")
                        (("1"
                          (case "series(LAMBDA (i_1: nat): m(G(i_1))`2)=lambda i: m(E!1(i))`2")
                          (("1"
                            (case-replace
                             "convergence_sequences.convergent?(series(LAMBDA (i_1: nat): m(G(i_1))`2))")
                            (("1" (replace -6)
                              (("1"
                                (replace -4)
                                (("1"
                                  (replace -2 1 rl)
                                  (("1"
                                    (replace -1)
                                    (("1"
                                      (replace -5 1)
                                      (("1"
                                        (prop)
                                        (("1"
                                          (inst - "0")
                                          (("1"
                                            (expand "G")
                                            (("1"
                                              (hide-all-but (-4 1))
                                              (("1"
                                                (skosimp)
                                                (("1"
                                                  (lemma
                                                   "m_monotone"
                                                   ("a"
                                                    "E!1(i!1)"
                                                    "b"
                                                    "IUnion(E!1)"))
                                                  (("1"
                                                    (split -1)
                                                    (("1"
                                                      (expand "x_le")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but 1)
                                                      (("2"
                                                        (expand
                                                         "subset?")
                                                        (("2"
                                                          (skosimp)
                                                          (("2"
                                                            (expand
                                                             "member")
                                                            (("2"
                                                              (expand
                                                               "IUnion")
                                                              (("2"
                                                                (inst
                                                                 +
                                                                 "i!1")
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (replace 1)
                              (("2"
                                (replace -4)
                                (("2"
                                  (replace -3 * rl)
                                  (("2"
                                    (replace -1 1)
                                    (("2"
                                      (replace 1 2)
                                      (("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide -2 -3 2)
                            (("2" (expand "series")
                              (("2"
                                (apply-extensionality :hide? t)
                                (("1"
                                  (case
                                   "forall n: sigma(0, n, LAMBDA (i_1: nat): m(G(i_1))`2) = m(E!1(n))`2")
                                  (("1" (inst - "x!1") nil nil)
                                   ("2"
                                    (hide 2)
                                    (("2"
                                      (induct "n")
                                      (("1"
                                        (expand "sigma")
                                        (("1"
                                          (expand "G")
                                          (("1"
                                            (expand "sigma")
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (skosimp*)
                                        (("2"
                                          (expand "sigma" 1)
                                          (("2"
                                            (replace -1)
                                            (("2"
                                              (hide -1)
                                              (("2"
                                                (lemma
                                                 "m_disjoint_union"
                                                 ("a"
                                                  "E!1(j!1)"
                                                  "b"
                                                  "G(1 + j!1)"))
                                                (("2"
                                                  (split -1)
                                                  (("1"
                                                    (case-replace
                                                     "union(E!1(j!1), G(1 + j!1))=E!1(1 + j!1)")
                                                    (("1"
                                                      (hide -1)
                                                      (("1"
                                                        (expand "x_eq")
                                                        (("1"
                                                          (expand
                                                           "x_add")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (case
                                                               "forall i: m(E!1(i))`1")
                                                              (("1"
                                                                (inst-cp
                                                                 -
                                                                 "1+j!1")
                                                                (("1"
                                                                  (inst
                                                                   -
                                                                   "j!1")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (inst
                                                                       -
                                                                       "1+j!1")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide-all-but
                                                                 (-2
                                                                  -4
                                                                  -6
                                                                  1))
                                                                (("2"
                                                                  (induct
                                                                   "i")
                                                                  (("1"
                                                                    (inst
                                                                     -
                                                                     "0")
                                                                    (("1"
                                                                      (expand
                                                                       "G")
                                                                      (("1"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (skosimp)
                                                                    (("2"
                                                                      (inst
                                                                       -
                                                                       "1+j!2")
                                                                      (("2"
                                                                        (lemma
                                                                         "m_disjoint_union"
                                                                         ("a"
                                                                          "E!1(j!2)"
                                                                          "b"
                                                                          "G(1 + j!2)"))
                                                                        (("2"
                                                                          (case-replace
                                                                           "union(E!1(j!2), G(1 + j!2))=E!1(j!2+1)")
                                                                          (("1"
                                                                            (hide
                                                                             -1)
                                                                            (("1"
                                                                              (split
                                                                               -1)
                                                                              (("1"
                                                                                (expand
                                                                                 "x_add")
                                                                                (("1"
                                                                                  (expand
                                                                                   "x_eq")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide-all-but
                                                                                 (-4
                                                                                  1))
                                                                                (("2"
                                                                                  (expand
                                                                                   "G")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "difference")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "disjoint?")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "intersection")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "empty?")
                                                                                          (("2"
                                                                                            (skosimp)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "member")
                                                                                              (("2"
                                                                                                (flatten)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide-all-but
                                                                             (-5
                                                                              1))
                                                                            (("2"
                                                                              (apply-extensionality
                                                                               :hide?
                                                                               t)
                                                                              (("2"
                                                                                (expand
                                                                                 "G")
                                                                                (("2"
                                                                                  (expand
                                                                                   "difference")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "union")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "member")
                                                                                      (("2"
                                                                                        (case-replace
                                                                                         "E!1(1 + j!2)(x!2)")
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          nil
                                                                                          nil)
                                                                                         ("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "increasing?")
                                                                                            (("2"
                                                                                              (inst
                                                                                               -
                                                                                               "j!2"
                                                                                               "1+j!2")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "subset?")
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     -
                                                                                                     "x!2")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (skosimp)
                                                                    (("3"
                                                                      (typepred
                                                                       "E!1(i!2)")
                                                                      (("3"
                                                                        (expand
                                                                         "measurable_set?")
                                                                        (("3"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but
                                                       (-6 1))
                                                      (("2"
                                                        (apply-extensionality
                                                         :hide?
                                                         t)
                                                        (("2"
                                                          (expand
                                                           "union")
                                                          (("2"
                                                            (expand
                                                             "G")
                                                            (("2"
                                                              (expand
                                                               "difference")
                                                              (("2"
                                                                (expand
                                                                 "member")
                                                                (("2"
                                                                  (case-replace
                                                                   "E!1(1 + j!1)(x!2)")
                                                                  (("1"
                                                                    (flatten)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (expand
                                                                       "increasing?")
                                                                      (("2"
                                                                        (inst
                                                                         -
                                                                         "j!1"
                                                                         "1+j!1")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (expand
                                                                             "subset?")
                                                                            (("2"
                                                                              (inst
                                                                               -
                                                                               "x!2")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide 2)
                                                    (("2"
                                                      (expand "G" 1)
                                                      (("2"
                                                        (expand
                                                         "difference")
                                                        (("2"
                                                          (expand
                                                           "disjoint?")
                                                          (("2"
                                                            (expand
                                                             "intersection")
                                                            (("2"
                                                              (expand
                                                               "empty?")
                                                              (("2"
                                                                (expand
                                                                 "member")
                                                                (("2"
                                                                  (skosimp*)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (skosimp)
                                        (("3"
                                          (typepred "E!1(n!2)")
                                          (("3"
                                            (expand "measurable_set?")
                                            (("3" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("4"
                                        (hide-all-but 1)
                                        (("4"
                                          (skosimp)
                                          (("4"
                                            (expand "G")
                                            (("4"
                                              (typepred "E!1(i!1)")
                                              (("4"
                                                (expand
                                                 "measurable_set?")
                                                (("4"
                                                  (assert)
                                                  (("4"
                                                    (prop)
                                                    (("4"
                                                      (typepred
                                                       "E!1(i!1-1)")
                                                      (("1"
                                                        (expand
                                                         "measurable_set?")
                                                        (("1"
                                                          (lemma
                                                           "measurable_difference"
                                                           ("a"
                                                            "E!1(i!1)"
                                                            "b"
                                                            "E!1(i!1-1)"))
                                                          (("1"
                                                            (expand
                                                             "measurable_set?")
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (skosimp)
                                  (("2"
                                    (typepred "E!1(i!1)")
                                    (("2"
                                      (expand "measurable_set?")
                                      (("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (skosimp)
                                  (("3"
                                    (expand "G")
                                    (("3"
                                      (typepred "E!1(i!1)")
                                      (("3"
                                        (expand "measurable_set?")
                                        (("3"
                                          (assert)
                                          (("3"
                                            (prop)
                                            (("3"
                                              (typepred "E!1(i!1-1)")
                                              (("1"
                                                (expand
                                                 "measurable_set?")
                                                (("1"
                                                  (lemma
                                                   "measurable_difference"
                                                   ("a"
                                                    "E!1(i!1)"
                                                    "b"
                                                    "E!1(i!1-1)"))
                                                  (("1"
                                                    (expand
                                                     "measurable_set?")
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (skosimp)
                            (("3" (typepred "E!1(i!1)")
                              (("3"
                                (expand "measurable_set?")
                                (("3" (propax) nil nil))
                                nil))
                              nil))
                            nil)
                           ("4" (hide-all-but 1)
                            (("4" (skosimp)
                              (("4"
                                (expand "G")
                                (("4"
                                  (typepred "E!1(i!1)")
                                  (("4"
                                    (expand "measurable_set?")
                                    (("4"
                                      (assert)
                                      (("4"
                                        (prop)
                                        (("4"
                                          (typepred "E!1(i!1-1)")
                                          (("1"
                                            (expand "measurable_set?")
                                            (("1"
                                              (lemma
                                               "measurable_difference"
                                               ("a"
                                                "E!1(i!1)"
                                                "b"
                                                "E!1(i!1-1)"))
                                              (("1"
                                                (expand
                                                 "measurable_set?")
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (replace 1)
                          (("2" (replace -2)
                            (("2" (replace -1 * rl)
                              (("2"
                                (case-replace
                                 "FORALL (i_1: nat): m(E!1(i_1))`1")
                                (("1"
                                  (skosimp)
                                  (("1"
                                    (inst - "i!1")
                                    (("1"
                                      (prop)
                                      (("1"
                                        (lemma
                                         "m_monotone"
                                         ("a" "G(i!1)" "b" "E!1(i!1)"))
                                        (("1"
                                          (expand "x_le")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "subset?")
                                              (("1"
                                                (skosimp)
                                                (("1"
                                                  (expand "G" -1)
                                                  (("1"
                                                    (expand
                                                     "difference")
                                                    (("1"
                                                      (expand "member")
                                                      (("1"
                                                        (case-replace
                                                         "i!1 = 0")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (replace 1 3)
                                  (("2" (propax) nil nil))
                                  nil)
                                 ("3"
                                  (skosimp)
                                  (("3"
                                    (typepred "E!1(i!1)")
                                    (("3"
                                      (expand "measurable_set?")
                                      (("3" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (hide-all-but 1)
                          (("3" (skosimp)
                            (("3" (expand "G")
                              (("3"
                                (typepred "E!1(i!1)")
                                (("3"
                                  (expand "measurable_set?")
                                  (("3"
                                    (assert)
                                    (("3"
                                      (prop)
                                      (("3"
                                        (typepred "E!1(i!1-1)")
                                        (("1"
                                          (expand "measurable_set?")
                                          (("1"
                                            (lemma
                                             "measurable_difference"
                                             ("a"
                                              "E!1(i!1)"
                                              "b"
                                              "E!1(i!1-1)"))
                                            (("1"
                                              (expand
                                               "measurable_set?")
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (split)
                (("1" (skolem + ("i!1"))
                  (("1" (expand "G")
                    (("1" (typepred "E!1(i!1)")
                      (("1" (expand "measurable_set?")
                        (("1" (assert)
                          (("1" (prop)
                            (("1" (typepred "E!1(i!1-1)")
                              (("1"
                                (expand "measurable_set?")
                                (("1"
                                  (lemma
                                   "measurable_difference"
                                   ("a" "E!1(i!1)" "b" "E!1(i!1-1)"))
                                  (("1"
                                    (expand "measurable_set?")
                                    (("1" (propax) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "disjoint_indexed_measurable?")
                  (("2" (expand "disjoint?")
                    (("2" (skosimp)
                      (("2" (lemma "trich_lt" ("x" "i!1" "y" "j!1"))
                        (("2" (split -1)
                          (("1" (inst - "j!1")
                            (("1" (flatten)
                              (("1"
                                (inst - "i!1")
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "disjoint?")
                                    (("1"
                                      (rewrite
                                       "intersection_commutative")
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (propax) nil nil)
                           ("3" (inst - "i!1")
                            (("3" (flatten)
                              (("3"
                                (inst - "j!1")
                                (("3"
                                  (assert)
                                  (("3"
                                    (expand "disjoint?")
                                    (("3" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide 2)
            (("2" (apply-extensionality :hide? t)
              (("2" (expand "IUnion" 1)
                (("2" (case-replace "EXISTS (i: nat): G(i)(x!1)")
                  (("1" (skosimp)
                    (("1" (expand "G" -1)
                      (("1" (expand "difference")
                        (("1" (expand "member")
                          (("1" (case-replace "i!1=0")
                            (("1" (inst + "0") nil nil)
                             ("2" (assert)
                              (("2"
                                (flatten)
                                (("2" (inst + "i!1") nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (replace 1 2)
                    (("2" (assert)
                      (("2" (skosimp)
                        (("2" (inst - "i!1")
                          (("2" (flatten)
                            (("2" (replace -2 -1)
                              (("2"
                                (expand "IUnion" -1)
                                (("2"
                                  (skosimp)
                                  (("2"
                                    (expand "emptyset")
                                    (("2"
                                      (prop)
                                      (("2" (inst + "i!2") nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide 2)
          (("2" (induct "n")
            (("1" (apply-extensionality :hide? t)
              (("1" (expand "IUnion")
                (("1" (case-replace "E!1(0)(x!1)")
                  (("1" (inst + "0")
                    (("1" (assert)
                      (("1" (expand "G") (("1" (propax) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (assert)
                    (("2" (skosimp)
                      (("2" (expand "emptyset")
                        (("2" (prop)
                          (("2" (expand "G")
                            (("2" (expand "difference")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skosimp) (("2" (assert) nil nil)) nil)
             ("3" (skosimp*)
              (("3" (split)
                (("1"
                  (case-replace
                   "E!1(j!1 + 1)=union(E!1(j!1),G(1+j!1))")
                  (("1" (apply-extensionality :hide? t)
                    (("1" (expand "union")
                      (("1" (expand "member")
                        (("1" (case-replace "G(1 + j!1)(x!1)")
                          (("1" (expand "IUnion")
                            (("1" (inst + "1+j!1")
                              (("1" (assert) nil nil)) nil))
                            nil)
                           ("2" (replace 1 2)
                            (("2" (replace -2 2)
                              (("2"
                                (hide -1 -2)
                                (("2"
                                  (expand "IUnion")
                                  (("2"
                                    (expand "emptyset")
                                    (("2"
                                      (case-replace
                                       "EXISTS (i: nat): IF i <= 1 + j!1 THEN G(i)(x!1) ELSE FALSE ENDIF")
                                      (("1"
                                        (skosimp)
                                        (("1"
                                          (prop)
                                          (("1"
                                            (expand "<=" -1)
                                            (("1"
                                              (split -1)
                                              (("1"
                                                (inst + "i!1")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (replace 1 3)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (skosimp)
                                            (("2"
                                              (prop)
                                              (("2"
                                                (inst + "i!1")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (apply-extensionality :hide? t)
                      (("2" (expand "union")
                        (("2" (expand "member")
                          (("2" (expand "G")
                            (("2" (expand "difference")
                              (("2"
                                (expand "member")
                                (("2"
                                  (hide-all-but (-4 1))
                                  (("2"
                                    (case-replace "E!1(1 + j!1)(x!1)")
                                    (("1" (flatten) nil nil)
                                     ("2"
                                      (assert)
                                      (("2"
                                        (expand "increasing?")
                                        (("2"
                                          (inst - "j!1" "1+j!1")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (expand "subset?")
                                              (("2"
                                                (inst - "x!1")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (skosimp)
                  (("2" (expand "disjoint?")
                    (("2" (expand "G" 1 1)
                      (("2" (expand "difference")
                        (("2" (expand "intersection")
                          (("2" (expand "empty?")
                            (("2" (expand "member")
                              (("2"
                                (skosimp)
                                (("2"
                                  (replace -4 1)
                                  (("2"
                                    (expand "IUnion")
                                    (("2"
                                      (inst + "i!1")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skosimp) (("2" (assert) nil nil)) nil))
      nil))
    nil)
   ((- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (difference const-decl "set" sets nil)
    (sequence type-eq-decl nil sequences nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (measurable_set nonempty-type-eq-decl nil measure_space_def nil)
    (measurable_set? const-decl "bool" measure_space_def nil)
    (S formal-const-decl "sigma_algebra" measure_props nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (T formal-type-decl nil measure_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measurable_difference application-judgement "measurable_set[T, S]"
     measure_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (FALSE const-decl "bool" booleans nil)
    (measurable_emptyset name-judgement "measurable_set" measure_props
     nil)
    (intersection_commutative formula-decl nil sets_lemmas nil)
    (trich_lt formula-decl nil real_props nil)
    (disjoint? const-decl "bool" indexed_sets_aux sets_aux)
    (x_converges? const-decl "bool" extended_nnreal extended_nnreal)
    (x_eq const-decl "bool" extended_nnreal extended_nnreal)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (series const-decl "sequence[real]" series series)
    (m_monotone formula-decl nil measure_props nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (x_le const-decl "bool" extended_nnreal extended_nnreal)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (G skolem-const-decl "[nat -> measurable_set[T, S]]" measure_props
     nil)
    (convergent? const-decl "bool" convergence_sequences analysis)
    (pred type-eq-decl nil defined_types nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (x_add const-decl "extended_nnreal" extended_nnreal
     extended_nnreal)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (empty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (increasing? const-decl "bool" fun_preds_partial structures)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (measurable_union application-judgement "measurable_set[T, S]"
     measure_props nil)
    (union const-decl "set" sets nil)
    (measurable_intersection application-judgement "measurable_set"
     measure_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (m_disjoint_union formula-decl nil measure_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (measurable_difference judgement-tcc nil measure_space_def nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sigma_nnreal application-judgement "nnreal" sigma_nat reals)
    (E!1 skolem-const-decl "sequence[measurable_set[T, S]]"
     measure_props nil)
    (sigma def-decl "real" sigma reals)
    (T_high type-eq-decl nil sigma reals)
    (T_low type-eq-decl nil sigma reals)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nnreal type-eq-decl nil real_types nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (measure? const-decl "bool" generalized_measure_def nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     nil)
    (m formal-const-decl "measure_type" measure_props nil)
    (x_sum const-decl "extended_nnreal" extended_nnreal
     extended_nnreal)
    (O const-decl "T3" function_props nil)
    (disjoint_indexed_measurable nonempty-type-eq-decl nil
     generalized_measure_def nil)
    (disjoint_indexed_measurable? const-decl "bool"
     generalized_measure_def nil)
    (m_countably_additive formula-decl nil measure_props nil)
    (measurable_IUnion application-judgement "measurable_set[T, S]"
     measure_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IUnion const-decl "set[T]" indexed_sets nil)
    (<= const-decl "bool" reals nil)
    (emptyset const-decl "set" sets nil)
    (< const-decl "bool" reals nil)
    (disjoint? const-decl "bool" sets nil))
   shostak))
 (m_decreasing_convergence_TCC1 0
  (m_decreasing_convergence_TCC1-1 nil 3395375822
   ("" (skosimp)
    (("" (skosimp)
      (("" (typepred "E!1(x1!1)")
        (("" (expand "measurable_set?") (("" (propax) nil nil)) nil))
        nil))
      nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil measure_props nil)
    (set type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (setofsets type-eq-decl nil sets nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (S formal-const-decl "sigma_algebra" measure_props nil)
    (measurable_set? const-decl "bool" measure_space_def nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (measurable_set nonempty-type-eq-decl nil measure_space_def nil)
    (sequence type-eq-decl nil sequences nil))
   nil
   (m_decreasing_convergence subtype "measure_props.E"
    "[nat -> (measure_props.S)]")))
 (m_decreasing_convergence_TCC2 0
  (m_decreasing_convergence_TCC2-1 nil 3395423248
   ("" (skosimp)
    (("" (lemma "measurable_IIntersection" ("SS" "E!1"))
      (("" (expand "measurable_set?") (("" (propax) nil nil)) nil))
      nil))
    nil)
   ((S formal-const-decl "sigma_algebra" measure_props nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil measure_props nil)
    (sequence type-eq-decl nil sequences nil)
    (measurable_set nonempty-type-eq-decl nil measure_space_def nil)
    (measurable_set? const-decl "bool" measure_space_def nil)
    (set type-eq-decl nil sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (measurable_IIntersection judgement-tcc nil measure_space_def nil))
   nil
   (m_decreasing_convergence subtype
    "indexed_sets[nat, measure_props.T].IIntersection(measure_props.E)"
    "(measure_props.S)")))
 (m_decreasing_convergence 0
  (m_decreasing_convergence-1 nil 3395375940
   ("" (skosimp)
    (("" (name "G" "lambda n: difference(E!1(0),E!1(n))")
      (("" (case "increasing?(G)")
        (("1" (case "forall n: mu_fin?(G(n))")
          (("1" (lemma "m_increasing_convergence" ("E" "G"))
            (("1" (assert)
              (("1" (expand "x_converges?")
                (("1" (expand "o")
                  (("1" (expand "mu_fin?")
                    (("1" (replace -2)
                      (("1" (case-replace "FORALL i: m(E!1(i))`1")
                        (("1"
                          (case-replace
                           "convergence_sequences.convergent?(LAMBDA (i_1: nat): m(E!1(i_1))`2)")
                          (("1"
                            (case "bounded_above?[nat](LAMBDA (i_1: nat): m(G(i_1))`2)")
                            (("1"
                              (case-replace
                               "convergence_sequences.convergent?(LAMBDA (i_2: nat): m(G(i_2))`2)")
                              (("1"
                                (flatten)
                                (("1"
                                  (case
                                   "forall n: E!1(0)=union(G(n),E!1(n)) & disjoint?(G(n),E!1(n))")
                                  (("1"
                                    (case
                                     "E!1(0)=union(IUnion(G),IIntersection(E!1)) & disjoint?(IUnion(G),IIntersection(E!1))")
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (lemma
                                         "m_disjoint_union"
                                         ("a"
                                          "IUnion(G)"
                                          "b"
                                          "IIntersection(E!1)"))
                                        (("1"
                                          (replace -2 * rl)
                                          (("1"
                                            (case
                                             "forall n: x_eq(m(E!1(0)), x_add(m(G(n)), m(E!1(n))))")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "x_eq" -2)
                                                (("1"
                                                  (expand "x_add" -2)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (prop)
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (lemma
                                                           "convergence_sequences.limit_def"
                                                           ("v"
                                                            "LAMBDA (i_1: nat): m(G(i_1))`2"
                                                            "l"
                                                            "m(IUnion(G))`2"))
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (hide
                                                               -8
                                                               -13)
                                                              (("1"
                                                                (expand
                                                                 "convergence_sequences.convergent?"
                                                                 -9)
                                                                (("1"
                                                                  (skosimp)
                                                                  (("1"
                                                                    (lemma
                                                                     "cnv_seq_sum"
                                                                     ("s1"
                                                                      "LAMBDA (i_1: nat): m(G(i_1))`2"
                                                                      "l1"
                                                                      "m(IUnion(G))`2"
                                                                      "s2"
                                                                      "LAMBDA (i_1: nat): m(E!1(i_1))`2"
                                                                      "l2"
                                                                      "l!1"))
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (expand
                                                                         "+"
                                                                         -1)
                                                                        (("1"
                                                                          (case-replace
                                                                           "(LAMBDA (x: nat): m(E!1(x))`2 + m(G(x))`2)=(lambda i: m(E!1(0))`2)")
                                                                          (("1"
                                                                            (hide
                                                                             -1)
                                                                            (("1"
                                                                              (lemma
                                                                               "cnv_seq_const"
                                                                               ("a"
                                                                                "m(E!1(0))`2"))
                                                                              (("1"
                                                                                (expand
                                                                                 "const_fun")
                                                                                (("1"
                                                                                  (lemma
                                                                                   "convergence_sequences.unique_limit"
                                                                                   ("u"
                                                                                    "(LAMBDA i: m(E!1(0))`2)"
                                                                                    "l1"
                                                                                    "m(IUnion(G))`2 + l!1"
                                                                                    "l2"
                                                                                    "m(E!1(0))`2"))
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -7
                                                                                       -1)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -1
                                                                                           *
                                                                                           rl)
                                                                                          (("1"
                                                                                            (rewrite
                                                                                             "convergence_sequences.limit_def"
                                                                                             -12
                                                                                             :dir
                                                                                             rl)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide
                                                                             2)
                                                                            (("2"
                                                                              (apply-extensionality
                                                                               :hide?
                                                                               t)
                                                                              (("1"
                                                                                (inst
                                                                                 -
                                                                                 "x!1")
                                                                                (("1"
                                                                                  (expand
                                                                                   "x_add")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "x_eq")
                                                                                    (("1"
                                                                                      (inst
                                                                                       -11
                                                                                       "x!1")
                                                                                      (("1"
                                                                                        (inst
                                                                                         -13
                                                                                         "x!1")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide-all-but
                                                                                 1)
                                                                                (("2"
                                                                                  (skolem
                                                                                   +
                                                                                   ("i!1"))
                                                                                  (("2"
                                                                                    (expand
                                                                                     "G")
                                                                                    (("2"
                                                                                      (typepred
                                                                                       "E!1(0)")
                                                                                      (("2"
                                                                                        (typepred
                                                                                         "E!1(i!1)")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "measurable_set?")
                                                                                          (("2"
                                                                                            (lemma
                                                                                             "measurable_difference"
                                                                                             ("a"
                                                                                              "E!1(0)"
                                                                                              "b"
                                                                                              "E!1(i!1)"))
                                                                                            (("2"
                                                                                              (expand
                                                                                               "measurable_set?")
                                                                                              (("2"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("3"
                                                                                (skosimp)
                                                                                (("3"
                                                                                  (typepred
                                                                                   "E!1(x!1)")
                                                                                  (("3"
                                                                                    (expand
                                                                                     "measurable_set?")
                                                                                    (("3"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 2)
                                              (("2"
                                                (skosimp)
                                                (("2"
                                                  (hide-all-but (1 -4))
                                                  (("2"
                                                    (inst - "n!1")
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (lemma
                                                         "m_disjoint_union"
                                                         ("a"
                                                          "G(n!1)"
                                                          "b"
                                                          "E!1(n!1)"))
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (hide-all-but 1)
                                              (("3"
                                                (skosimp)
                                                (("3"
                                                  (typepred "E!1(n!1)")
                                                  (("3"
                                                    (expand
                                                     "measurable_set?")
                                                    (("3"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide 2)
                                      (("2"
                                        (split)
                                        (("1"
                                          (hide-all-but (-11 1))
                                          (("1"
                                            (apply-extensionality
                                             :hide?
                                             t)
                                            (("1"
                                              (expand "IIntersection")
                                              (("1"
                                                (expand "IUnion")
                                                (("1"
                                                  (expand "G")
                                                  (("1"
                                                    (expand
                                                     "difference")
                                                    (("1"
                                                      (expand "union")
                                                      (("1"
                                                        (expand
                                                         "member")
                                                        (("1"
                                                          (case-replace
                                                           "E!1(0)(x!1)")
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (skosimp)
                                                              (("1"
                                                                (inst
                                                                 +
                                                                 "i!1")
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (replace
                                                             1
                                                             2)
                                                            (("2"
                                                              (simplify
                                                               2)
                                                              (("2"
                                                                (inst
                                                                 -
                                                                 "0")
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but (-1 -11 1))
                                          (("2"
                                            (expand "disjoint?" 1)
                                            (("2"
                                              (expand "IIntersection")
                                              (("2"
                                                (expand "IUnion")
                                                (("2"
                                                  (expand "G")
                                                  (("2"
                                                    (expand
                                                     "intersection")
                                                    (("2"
                                                      (expand
                                                       "difference")
                                                      (("2"
                                                        (expand
                                                         "empty?")
                                                        (("2"
                                                          (expand
                                                           "union")
                                                          (("2"
                                                            (expand
                                                             "member")
                                                            (("2"
                                                              (skosimp*)
                                                              (("2"
                                                                (inst
                                                                 -
                                                                 "i!1")
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide 2)
                                    (("2"
                                      (skosimp)
                                      (("2"
                                        (split)
                                        (("1"
                                          (expand "G" 1)
                                          (("1"
                                            (apply-extensionality
                                             :hide?
                                             t)
                                            (("1"
                                              (hide-all-but (-10 1))
                                              (("1"
                                                (expand "difference")
                                                (("1"
                                                  (expand "union")
                                                  (("1"
                                                    (expand "member")
                                                    (("1"
                                                      (case-replace
                                                       "E!1(0)(x!1)")
                                                      (("1"
                                                        (flatten)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        (("2"
                                                          (expand
                                                           "decreasing?")
                                                          (("2"
                                                            (inst
                                                             -
                                                             "0"
                                                             "n!1")
                                                            (("2"
                                                              (expand
                                                               "subset?")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (inst
                                                                   -
                                                                   "x!1")
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but (1 -10))
                                          (("2"
                                            (expand "G")
                                            (("2"
                                              (expand "difference")
                                              (("2"
                                                (expand "disjoint?")
                                                (("2"
                                                  (expand
                                                   "intersection")
                                                  (("2"
                                                    (expand "empty?")
                                                    (("2"
                                                      (expand "member")
                                                      (("2"
                                                        (skosimp*)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide -4 2)
                                (("2"
                                  (lemma
                                   "increasing_bounded_convergence"
                                   ("v1"
                                    "LAMBDA (i_1: nat): m(G(i_1))`2"))
                                  (("1"
                                    (split -1)
                                    (("1"
                                      (expand
                                       "convergence_sequences.convergent?")
                                      (("1"
                                        (expand "sup")
                                        (("1"
                                          (inst
                                           +
                                           "lub(Im(LAMBDA (i_1: nat): m(G(i_1))`2))")
                                          (("1"
                                            (skosimp)
                                            (("1"
                                              (expand "G" 1)
                                              (("1"
                                                (typepred "E!1(0)")
                                                (("1"
                                                  (typepred "E!1(i!1)")
                                                  (("1"
                                                    (lemma
                                                     "measurable_difference"
                                                     ("a"
                                                      "E!1(0)"
                                                      "b"
                                                      "E!1(i!1)"))
                                                    (("1"
                                                      (expand
                                                       "measurable_set?")
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide 2)
                                      (("2"
                                        (expand "increasing?")
                                        (("2"
                                          (skosimp)
                                          (("2"
                                            (lemma
                                             "m_monotone"
                                             ("a"
                                              "G(x!1)"
                                              "b"
                                              "G(y!1)"))
                                            (("2"
                                              (expand "x_le")
                                              (("2"
                                                (inst-cp -6 "x!1")
                                                (("2"
                                                  (inst -6 "y!1")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (inst
                                                       -7
                                                       "x!1"
                                                       "y!1")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide -3 -1 2)
                              (("2"
                                (expand "bounded_above?")
                                (("2"
                                  (inst + "m(E!1(0))`2")
                                  (("2"
                                    (skosimp)
                                    (("2"
                                      (expand "G" 1)
                                      (("2"
                                        (inst - "x!1")
                                        (("2"
                                          (lemma
                                           "m_monotone"
                                           ("a"
                                            "difference(E!1(0), E!1(x!1))"
                                            "b"
                                            "E!1(0)"))
                                          (("2"
                                            (split -1)
                                            (("1"
                                              (expand "x_le")
                                              (("1" (assert) nil nil))
                                              nil)
                                             ("2"
                                              (hide-all-but 1)
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (skosimp)
                              (("3"
                                (hide-all-but 1)
                                (("3"
                                  (expand "G")
                                  (("3"
                                    (typepred "E!1(i!1)")
                                    (("3"
                                      (typepred "E!1(0)")
                                      (("3"
                                        (expand "measurable_set?")
                                        (("3"
                                          (lemma
                                           "measurable_difference"
                                           ("a"
                                            "E!1(0)"
                                            "b"
                                            "E!1(i!1)"))
                                          (("3"
                                            (expand "measurable_set?")
                                            (("3" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 2 -2)
                            (("2"
                              (case "bounded_below?[nat](LAMBDA (i_1: nat): m(E!1(i_1))`2)")
                              (("1"
                                (lemma
                                 "decreasing_bounded_convergence"
                                 ("v2"
                                  "LAMBDA (i_1: nat): m(E!1(i_1))`2"))
                                (("1"
                                  (split -1)
                                  (("1"
                                    (expand
                                     "convergence_sequences.convergent?")
                                    (("1"
                                      (expand "inf")
                                      (("1"
                                        (inst
                                         +
                                         "glb(Im(LAMBDA (i_1: nat): m(E!1(i_1))`2))")
                                        (("1"
                                          (skosimp)
                                          (("1"
                                            (typepred "E!1(i!1)")
                                            (("1"
                                              (expand
                                               "measurable_set?")
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide-all-but (-6 -7 -2 1))
                                    (("2"
                                      (expand "decreasing?")
                                      (("2"
                                        (skosimp*)
                                        (("2"
                                          (lemma
                                           "m_monotone"
                                           ("a"
                                            "E!1(y!1)"
                                            "b"
                                            "E!1(x!1)"))
                                          (("2"
                                            (inst - "x!1" "y!1")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand "x_le")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (inst - "x!1")
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (propax) nil nil))
                                nil)
                               ("2"
                                (hide 2)
                                (("2"
                                  (expand "bounded_below?")
                                  (("2"
                                    (inst + "0")
                                    (("2"
                                      (skosimp)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (skosimp)
                                (("3"
                                  (typepred "E!1(i!1)")
                                  (("3"
                                    (expand "measurable_set?")
                                    (("3" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (skosimp)
                            (("3" (typepred "E!1(i!1)")
                              (("3"
                                (expand "measurable_set?")
                                (("3" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide 2)
                          (("2" (skosimp)
                            (("2"
                              (lemma "m_monotone"
                               ("a" "E!1(i!1)" "b" "E!1(0)"))
                              (("2"
                                (expand "decreasing?")
                                (("2"
                                  (inst -6 "0" "i!1")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (expand "x_le")
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (skosimp)
                          (("3" (typepred "E!1(i!1)")
                            (("3" (expand "measurable_set?")
                              (("3" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "mu_fin?")
            (("2" (hide 2)
              (("2" (skosimp)
                (("2" (lemma "m_monotone" ("a" "G(n!1)" "b" "E!1(0)"))
                  (("2" (split -1)
                    (("1" (expand "x_le") (("1" (assert) nil nil)) nil)
                     ("2" (expand "subset?")
                      (("2" (expand "G")
                        (("2" (expand "difference")
                          (("2" (expand "member")
                            (("2" (skosimp) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide-all-but (-2 1))
          (("2" (expand "decreasing?")
            (("2" (expand "increasing?")
              (("2" (skosimp)
                (("2" (inst - "x!1" "y!1")
                  (("2" (assert)
                    (("2" (expand "subset?")
                      (("2" (expand "G")
                        (("2" (expand "difference")
                          (("2" (skosimp*)
                            (("2" (expand "member")
                              (("2"
                                (flatten)
                                (("2"
                                  (assert)
                                  (("2"
                                    (inst - "x!2")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sequence type-eq-decl nil sequences nil)
    (measurable_set nonempty-type-eq-decl nil measure_space_def nil)
    (measurable_set? const-decl "bool" measure_space_def nil)
    (S formal-const-decl "sigma_algebra" measure_props nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (difference const-decl "set" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (T formal-type-decl nil measure_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measurable_difference application-judgement "measurable_set[T, S]"
     measure_props nil)
    (mu_fin? const-decl "bool" measure_props nil)
    (measurable_IIntersection application-judgement
     "measurable_set[T, S]" measure_props nil)
    (O const-decl "T3" function_props nil)
    (convergent? const-decl "bool" convergence_sequences analysis)
    (measurable_union application-judgement "measurable_set[T, S]"
     measure_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (union const-decl "set" sets nil)
    (disjoint? const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (measurable_intersection application-judgement "measurable_set"
     measure_props nil)
    (member const-decl "bool" sets nil)
    (limit_def formula-decl nil convergence_sequences analysis)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (cnv_seq_const formula-decl nil convergence_ops analysis)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (unique_limit formula-decl nil convergence_sequences analysis)
    (const_fun const-decl "[T -> real]" real_fun_ops reals)
    (G skolem-const-decl "[nat -> measurable_set[T, S]]" measure_props
     nil)
    (E!1 skolem-const-decl "sequence[measurable_set[T, S]]"
     measure_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (measurable_difference judgement-tcc nil measure_space_def nil)
    (+ const-decl "[T -> real]" real_fun_ops reals)
    (cnv_seq_sum formula-decl nil convergence_ops analysis)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (x_add const-decl "extended_nnreal" extended_nnreal
     extended_nnreal)
    (x_eq const-decl "bool" extended_nnreal extended_nnreal)
    (m_disjoint_union formula-decl nil measure_props nil)
    (IIntersection const-decl "set[T]" indexed_sets nil)
    (IUnion const-decl "set[T]" indexed_sets nil)
    (measurable_IUnion application-judgement "measurable_set[T, S]"
     measure_props nil)
    (decreasing? const-decl "bool" fun_preds_partial structures)
    (increasing_bounded_convergence formula-decl nil
     convergence_sequences analysis)
    (x_le const-decl "bool" extended_nnreal extended_nnreal)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (m_monotone formula-decl nil measure_props nil)
    (increasing? const-decl "bool" real_fun_preds reals)
    (nonempty_image application-judgement "(nonempty?[real])"
     double_nn_sequence extended_nnreal)
    (Im const-decl "setof[real]" real_fun_props reals)
    (lub const-decl "{x | least_upper_bound?(x, SA)}" bounded_real_defs
     nil)
    (least_upper_bound? const-decl "bool" bounded_real_defs nil)
    (bounded_above? const-decl "bool" bounded_real_defs nil)
    (nonempty? const-decl "bool" sets nil)
    (sup const-decl "real" real_fun_supinf analysis)
    (bounded_above? const-decl "bool" real_fun_preds reals)
    (bounded_below? const-decl "bool" real_fun_preds reals)
    (inf const-decl "real" real_fun_supinf analysis)
    (bounded_below? const-decl "bool" bounded_real_defs nil)
    (greatest_lower_bound? const-decl "bool" bounded_real_defs nil)
    (glb const-decl "{x | greatest_lower_bound?(x, SB)}"
     bounded_real_defs nil)
    (decreasing? const-decl "bool" real_fun_preds reals)
    (decreasing_bounded_convergence formula-decl nil
     convergence_sequences analysis)
    (nnreal type-eq-decl nil real_types nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (measure? const-decl "bool" generalized_measure_def nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     nil)
    (m formal-const-decl "measure_type" measure_props nil)
    (x_converges? const-decl "bool" extended_nnreal extended_nnreal)
    (m_increasing_convergence formula-decl nil measure_props nil)
    (increasing? const-decl "bool" fun_preds_partial structures)
    (subset? const-decl "bool" sets nil)
    (<= const-decl "bool" reals nil)
    (restrict const-decl "R" restrict nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (total_order_restrict application-judgement "(total_order?[S])"
     restrict_order_props nil))
   shostak)))

