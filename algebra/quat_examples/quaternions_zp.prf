(|quaternions_zp|
 (|quat_coset_Zp_TCC1| 0
  (|quat_coset_Zp_TCC2-1| NIL 3934600467
   ("" (SKEEP)
    (("" (INST 1 "nZ(p)")
      (("1" (REWRITE "ideal_is_coset")
        (("1" (REWRITE "nZ_ideal")
          (("1" (TYPEPRED "p") (("1" (HIDE 2 3) (("1" (GRIND) NIL NIL)) NIL))
            NIL))
          NIL)
         ("2" (TYPEPRED "p") (("2" (HIDE 2 3) (("2" (GRIND) NIL NIL)) NIL))
          NIL))
        NIL)
       ("2" (TYPEPRED "p") (("2" (GRIND) NIL NIL)) NIL))
      NIL))
    NIL)
   ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|coset?| CONST-DECL "bool" |cosets_def| |algebra|)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|ring?| CONST-DECL "bool" |ring_def| |algebra|)
    (|ring| NONEMPTY-TYPE-EQ-DECL NIL |ring| |algebra|)
    (Z CONST-DECL
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     |ring_zn| |algebra_examples|)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nZ| CONST-DECL "set[int]" |ring_zn| |algebra_examples|)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (|p| SKOLEM-CONST-DECL "(prime?)" |quaternions_zp| NIL)
    (|nZ_ideal| FORMULA-DECL NIL |ring_zn| |algebra_examples|)
    (|ideal| TYPE-EQ-DECL NIL |ring_ideal_def| |algebra|)
    (|ideal?| CONST-DECL "bool" |ring_ideal_def| |algebra|)
    (|ideal_is_coset| FORMULA-DECL NIL |ring_cosets_lemmas| |algebra|))
   NIL
   (|quat_coset_Zp| EXISTENCE ""
    "(cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].coset?(ring_zn.Z, ring_zn.nZ(quaternions_zp.p)))")))
 (|quat_coset_Zp_TCC2| 0
  (|quat_coset_Zp_TCC3-1| NIL 3934600467
   ("" (SKEEP)
    (("" (SKEEP)
      (("" (REWRITE "zn_add_pair")
        (("" (TYPEPRED "p")
          (("" (EXPAND "prime?") (("" (PROPAX) NIL NIL)) NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|coset| TYPE-EQ-DECL NIL |cosets_def| |algebra|)
    (|nZ| CONST-DECL "set[int]" |ring_zn| |algebra_examples|)
    (Z CONST-DECL
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     |ring_zn| |algebra_examples|)
    (|ring| NONEMPTY-TYPE-EQ-DECL NIL |ring| |algebra|)
    (|ring?| CONST-DECL "bool" |ring_def| |algebra|)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|coset?| CONST-DECL "bool" |cosets_def| |algebra|)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|zn_add_pair| FORMULA-DECL NIL |ring_zn_extra| |algebra_examples|))
   NIL
   (|quat_coset_Zp| SUBTYPE
    "cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].add(ring_zn.Z, ring_zn.nZ(quaternions_zp.p))"
    "[[(cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].coset?(ring_zn.Z, ring_zn.nZ(quaternions_zp.p))), (cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].coset?(ring_zn.Z, ring_zn.nZ(quaternions_zp.p)))] -> (cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].coset?(ring_zn.Z, ring_zn.nZ(quaternions_zp.p)))]")))
 (|quat_coset_Zp_TCC3| 0
  (|quat_coset_Zp_TCC4-1| NIL 3934600467
   ("" (SKEEP)
    (("" (SKEEP)
      (("" (REWRITE "zn_product_pair")
        (("" (TYPEPRED "p")
          (("" (EXPAND "prime?") (("" (PROPAX) NIL NIL)) NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|coset| TYPE-EQ-DECL NIL |cosets_def| |algebra|)
    (|nZ| CONST-DECL "set[int]" |ring_zn| |algebra_examples|)
    (Z CONST-DECL
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     |ring_zn| |algebra_examples|)
    (|ring| NONEMPTY-TYPE-EQ-DECL NIL |ring| |algebra|)
    (|ring?| CONST-DECL "bool" |ring_def| |algebra|)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|coset?| CONST-DECL "bool" |cosets_def| |algebra|)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|zn_product_pair| FORMULA-DECL NIL |ring_zn_extra| |algebra_examples|))
   NIL
   (|quat_coset_Zp| SUBTYPE
    "product_coset_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.*)].product(ring_zn.Z, ring_zn.nZ(quaternions_zp.p))"
    "[[(cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].coset?(ring_zn.Z, ring_zn.nZ(quaternions_zp.p))), (cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].coset?(ring_zn.Z, ring_zn.nZ(quaternions_zp.p)))] -> (cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].coset?(ring_zn.Z, ring_zn.nZ(quaternions_zp.p)))]")))
 (|quat_coset_Zp_TCC4| 0
  (|quat_coset_Zp_TCC5-1| NIL 3934600467
   ("" (SKEEP)
    (("" (TYPEPRED "p")
      (("" (EXPAND "prime?")
        (("" (FLATTEN)
          (("" (HIDE -1)
            (("" (REWRITE "ideal_is_coset") (("" (REWRITE "nZ_ideal") NIL NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|prime?| CONST-DECL "bool" |primes| |ints|)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|ideal_is_coset| FORMULA-DECL NIL |ring_cosets_lemmas| |algebra|)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|ring?| CONST-DECL "bool" |ring_def| |algebra|)
    (|ring| NONEMPTY-TYPE-EQ-DECL NIL |ring| |algebra|)
    (Z CONST-DECL
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     |ring_zn| |algebra_examples|)
    (|ideal?| CONST-DECL "bool" |ring_ideal_def| |algebra|)
    (|ideal| TYPE-EQ-DECL NIL |ring_ideal_def| |algebra|)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nZ| CONST-DECL "set[int]" |ring_zn| |algebra_examples|)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|nZ_ideal| FORMULA-DECL NIL |ring_zn| |algebra_examples|))
   NIL
   (|quat_coset_Zp| SUBTYPE "ring_zn.nZ(quaternions_zp.p)"
    "(cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].coset?(ring_zn.Z, ring_zn.nZ(quaternions_zp.p)))")))
 (|quat_coset_Zp_TCC5| 0
  (|quat_coset_Zp_TCC6-1| NIL 3934600467
   ("" (SKEEP)
    (("" (REWRITE "zn_identity")
      (("" (TYPEPRED "p") (("" (EXPAND "prime?") (("" (PROPAX) NIL NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|zn_identity| FORMULA-DECL NIL |ring_zn_extra| |algebra_examples|)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|))
   NIL
   (|quat_coset_Zp| SUBTYPE
    "(cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].+)(1, ring_zn.nZ(quaternions_zp.p))"
    "(cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].coset?(ring_zn.Z, ring_zn.nZ(quaternions_zp.p)))")))
 (|quat_coset_Zp_TCC6| 0
  (|quat_coset_Zp_TCC7-1| NIL 3934600467
   ("" (SKEEP)
    (("" (REWRITE "zn_identity")
      (("" (TYPEPRED "p") (("" (EXPAND "prime?") (("" (PROPAX) NIL NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|zn_identity| FORMULA-DECL NIL |ring_zn_extra| |algebra_examples|)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL))
   NIL
   (|quat_coset_Zp| SUBTYPE
    "(cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].+)((number_fields.-)(quaternions_zp.p, 1), ring_zn.nZ(quaternions_zp.p))"
    "(cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].coset?(ring_zn.Z, ring_zn.nZ(quaternions_zp.p)))")))
 (|quat_coset_Zp_TCC7| 0
  (|quat_coset_Zp_TCC8-1| NIL 3934600467
   ("" (SKEEP)
    (("" (TYPEPRED "p")
      (("" (EXPAND "prime?")
        (("" (FLATTEN)
          (("" (HIDE -1)
            (("" (LEMMA "Zn_commutative_ring_w_one")
              (("" (INST?)
                (("1" (EXPAND "commutative_ring_with_one?")
                  (("1" (EXPAND "ring_with_one?")
                    (("1" (EXPAND "ring?")
                      (("1" (EXPAND "abelian_group?")
                        (("1" (FLATTEN)
                          (("1" (HIDE-ALL-BUT (-1 -9 1))
                            (("1" (EXPAND "Z" -1)
                              (("1" (EXPAND "/" -1)
                                (("1" (EXPAND "restrict")
                                  (("1" (EXPAND "fullset")
                                    (("1" (PROPAX) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (ASSERT) NIL NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|prime?| CONST-DECL "bool" |primes| |ints|)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|Zn_commutative_ring_w_one| FORMULA-DECL NIL |ring_zn| |algebra_examples|)
    (|commutative_ring_with_one?| CONST-DECL "bool" |ring_with_one_def|
     |algebra|)
    (|ring?| CONST-DECL "bool" |ring_def| |algebra|)
    (Z CONST-DECL "setofsets[int]" |ring_zn| |algebra_examples|)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (|fullset| CONST-DECL "set" |sets| NIL)
    (/ CONST-DECL "setof[set[T]]" |cosets_def| |algebra|)
    (|abelian_group?| CONST-DECL "bool" |group_def| |algebra|)
    (|ring_with_one?| CONST-DECL "bool" |ring_with_one_def| |algebra|)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL))
   NIL
   (|quat_coset_Zp| ASSUMING
    "algebra@quaternions_def[(cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].coset?(ring_zn.Z, ring_zn.nZ(quaternions_zp.p))), cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].add(ring_zn.Z, ring_zn.nZ(quaternions_zp.p)), product_coset_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.*)].product(ring_zn.Z, ring_zn.nZ(quaternions_zp.p)), ring_zn.nZ(quaternions_zp.p), (cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].+)(1, ring_zn.nZ(quaternions_zp.p)), (cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].+)((number_fields.-)(quaternions_zp.p, 1), ring_zn.nZ(quaternions_zp.p)), (cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].+)((number_fields.-)(quaternions_zp.p, 1), ring_zn.nZ(quaternions_zp.p))].quaternions_def"
    "fullset_is_group: ASSUMPTION group_def[quaternions_def.T, quaternions_def.+, quaternions_def.zero].group?(sets[quaternions_def.T].fullset)")))
 (|quat_zp_is_ring_w_one| 0
  (|quat_zp_is_ring_w_one-1| NIL 3935588964
   ("" (SKEEP)
    (("" (EXPAND "quat_Zp")
      (("" (CASE "p >= 0")
        (("1" (REWRITE "quat_is_ring_w_one")
          (("1" (LEMMA "Zp_prime_is_field")
            (("1" (INST -1 "p")
              (("1" (FLATTEN)
                (("1" (HIDE -2)
                  (("1" (SPLIT)
                    (("1"
                      (CASE-REPLACE "restrict
               [setof[int],
                coset[int,
                      restrict[[numfield, numfield], [int, int], numfield]
                          (+)](Z, nZ(p)),
                bool]
               (Z(p)) = fullset
               [(coset?
                     [int,
                      restrict[[numfield, numfield], [int, int], numfield]
                          (+)]
                     (Z, nZ(p)))]")
                      (("1" (HIDE-ALL-BUT 1)
                        (("1" (EXPAND "fullset")
                          (("1" (EXPAND "restrict")
                            (("1" (DECOMPOSE-EQUALITY)
                              (("1" (EXPAND "Z")
                                (("1" (EXPAND "/") (("1" (PROPAX) NIL NIL))
                                  NIL))
                                NIL)
                               ("2" (SKEEP)
                                (("2" (EXPAND "restrict")
                                  (("2" (PROPAX) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (SKEEP)
                        (("2" (EXPAND "restrict") (("2" (PROPAX) NIL NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (TYPEPRED "p") (("2" (PROPAX) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (HIDE 2)
            (("2" (EXPAND "remove")
              (("2" (EXPAND "member")
                (("2" (EXPAND "fullset")
                  (("2" (SPLIT)
                    (("1" (REWRITE "zn_identity") NIL NIL)
                     ("2" (EXPAND "/=")
                      (("2"
                        (NAME-REPLACE "rhs"
                         "((+[int, restrict[[numfield, numfield], [int, int], numfield](+)])
            (p - 1, nZ(p)))")
                        (("1" (REWRITE "left_zero" :DIR RL)
                          (("1" (EXPAND "rhs")
                            (("1" (REWRITE "equal_cosets_rem")
                              (("1" (REWRITE "modulo_arithmetic.rem_zero")
                                (("1" (REWRITE "rem_mod")
                                  (("1" (TYPEPRED "p")
                                    (("1" (EXPAND "prime?")
                                      (("1" (FLATTEN) (("1" (ASSERT) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (SKEEP)
                          (("2" (EXPAND "restrict") (("2" (PROPAX) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("3" (REWRITE "zn_identity") NIL NIL)
           ("4" (REWRITE "ideal_is_coset") (("4" (REWRITE "nZ_ideal") NIL NIL))
            NIL)
           ("5" (SKEEP) (("5" (REWRITE "zn_product_pair") NIL NIL)) NIL)
           ("6" (SKEEP) (("6" (REWRITE "zn_add_pair") NIL NIL)) NIL))
          NIL)
         ("2" (TYPEPRED "p")
          (("2" (EXPAND "prime?")
            (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (|zn_add_pair| FORMULA-DECL NIL |ring_zn_extra| |algebra_examples|)
    (|zn_product_pair| FORMULA-DECL NIL |ring_zn_extra| |algebra_examples|)
    (|ideal_is_coset| FORMULA-DECL NIL |ring_cosets_lemmas| |algebra|)
    (|ideal?| CONST-DECL "bool" |ring_ideal_def| |algebra|)
    (|ideal| TYPE-EQ-DECL NIL |ring_ideal_def| |algebra|)
    (|nZ_ideal| FORMULA-DECL NIL |ring_zn| |algebra_examples|)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|zn_identity| FORMULA-DECL NIL |ring_zn_extra| |algebra_examples|)
    (|rhs| SKOLEM-CONST-DECL "set[int]" |quaternions_zp| NIL)
    (|rem_zero| FORMULA-DECL NIL |modulo_arithmetic| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|mod| NONEMPTY-TYPE-EQ-DECL NIL |euclidean_division| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|rem_mod| FORMULA-DECL NIL |modulo_arithmetic| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|equal_cosets_rem| FORMULA-DECL NIL |ring_zn_extra| |algebra_examples|)
    (|left_zero| FORMULA-DECL NIL |ring_cosets_lemmas| |algebra|)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|Zp_prime_is_field| FORMULA-DECL NIL |ring_zn| |algebra_examples|)
    (/ CONST-DECL "setof[set[T]]" |cosets_def| |algebra|)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (Z CONST-DECL "setofsets[int]" |ring_zn| |algebra_examples|)
    (|setofsets| TYPE-EQ-DECL NIL |sets| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|field?| CONST-DECL "bool" |field_def| |algebra|)
    (|fullset| CONST-DECL "set" |sets| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|remove| CONST-DECL "set" |sets| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (+ CONST-DECL "set[T]" |cosets_def| |algebra|)
    (|product| CONST-DECL "set[T]" |product_coset_def| |algebra|)
    (|add| CONST-DECL "set[T]" |cosets_def| |algebra|)
    (|coset| TYPE-EQ-DECL NIL |cosets_def| |algebra|)
    (|nZ| CONST-DECL "set[int]" |ring_zn| |algebra_examples|)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (Z CONST-DECL
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     |ring_zn| |algebra_examples|)
    (|ring| NONEMPTY-TYPE-EQ-DECL NIL |ring| |algebra|)
    (|ring?| CONST-DECL "bool" |ring_def| |algebra|)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|coset?| CONST-DECL "bool" |cosets_def| |algebra|)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|quat_is_ring_w_one| FORMULA-DECL NIL |quaternions| |algebra|)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|quat_Zp| CONST-DECL "set[quat_coset_Zp(p)]" |quaternions_zp| NIL))
   SHOSTAK))
 (|mk_quat_Zp_TCC1| 0
  (|mk_quat_Zp_TCC1-1| NIL 3935069585
   ("" (SKEEP)
    (("" (REWRITE "zn_identity")
      (("" (TYPEPRED "p") (("" (EXPAND "prime?") (("" (PROPAX) NIL NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|zn_identity| FORMULA-DECL NIL |ring_zn_extra| |algebra_examples|)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|))
   NIL
   (|mk_quat_Zp| SUBTYPE
    "(cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].+)(quaternions_zp.t, ring_zn.nZ(quaternions_zp.p))"
    "(cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].coset?(ring_zn.Z, ring_zn.nZ(quaternions_zp.p)))")))
 (|quat_Zp_prod_charac_TCC1| 0
  (|quat_Zp_prod_charac_TCC1-1| NIL 3935069585
   (""
    (STOP-REWRITE "right_identity" "left_identity" "one_left" "one_right"
     "zero_plus" "plus_zero")
    (("" (SKEEP)
      (("" (REWRITE "zn_identity")
        (("" (TYPEPRED "p")
          (("" (EXPAND "prime?") (("" (PROPAX) NIL NIL)) NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|zn_identity| FORMULA-DECL NIL |ring_zn_extra| |algebra_examples|)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL))
   NIL
   (|quat_Zp_prod_charac| SUBTYPE
    "(cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].+)((number_fields.+)((number_fields.-)((number_fields.+)(number_fields.*(quaternions_zp.a1, quaternions_zp.d2), number_fields.*(quaternions_zp.b1, quaternions_zp.c2)), number_fields.*(quaternions_zp.c1, quaternions_zp.b2)), number_fields.*(quaternions_zp.d1, quaternions_zp.a2)), ring_zn.nZ(quaternions_zp.p))"
    "(cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].coset?(ring_zn.Z, ring_zn.nZ(quaternions_zp.p)))")))
 (|quat_Zp_prod_charac_TCC2| 0
  (|quat_Zp_prod_charac_TCC2-1| NIL 3935069585
   (""
    (STOP-REWRITE "right_identity" "left_identity" "one_left" "one_right"
     "zero_plus" "plus_zero")
    (("" (SKEEP)
      (("" (REWRITE "zn_identity")
        (("" (TYPEPRED "p")
          (("" (EXPAND "prime?") (("" (PROPAX) NIL NIL)) NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|zn_identity| FORMULA-DECL NIL |ring_zn_extra| |algebra_examples|)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL))
   NIL
   (|quat_Zp_prod_charac| SUBTYPE
    "(cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].+)((number_fields.-)((number_fields.-)((number_fields.-)(number_fields.*(quaternions_zp.a1, quaternions_zp.a2), number_fields.*(quaternions_zp.b1, quaternions_zp.b2)), number_fields.*(quaternions_zp.c1, quaternions_zp.c2)), number_fields.*(quaternions_zp.d1, quaternions_zp.d2)), ring_zn.nZ(quaternions_zp.p))"
    "(cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].coset?(ring_zn.Z, ring_zn.nZ(quaternions_zp.p)))")))
 (|quat_Zp_prod_charac_TCC3| 0
  (|quat_Zp_prod_charac_TCC3-1| NIL 3935069585
   (""
    (STOP-REWRITE "right_identity" "left_identity" "one_left" "one_right"
     "zero_plus" "plus_zero")
    (("" (SKEEP)
      (("" (REWRITE "zn_identity")
        (("" (TYPEPRED "p")
          (("" (EXPAND "prime?") (("" (PROPAX) NIL NIL)) NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|zn_identity| FORMULA-DECL NIL |ring_zn_extra| |algebra_examples|)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL))
   NIL
   (|quat_Zp_prod_charac| SUBTYPE
    "(cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].+)((number_fields.-)((number_fields.+)((number_fields.+)(number_fields.*(quaternions_zp.a1, quaternions_zp.b2), number_fields.*(quaternions_zp.b1, quaternions_zp.a2)), number_fields.*(quaternions_zp.c1, quaternions_zp.d2)), number_fields.*(quaternions_zp.d1, quaternions_zp.c2)), ring_zn.nZ(quaternions_zp.p))"
    "(cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].coset?(ring_zn.Z, ring_zn.nZ(quaternions_zp.p)))")))
 (|quat_Zp_prod_charac_TCC4| 0
  (|quat_Zp_prod_charac_TCC4-1| NIL 3935069585
   (""
    (STOP-REWRITE "right_identity" "left_identity" "one_left" "one_right"
     "zero_plus" "plus_zero")
    (("" (SKEEP)
      (("" (REWRITE "zn_identity")
        (("" (TYPEPRED "p")
          (("" (EXPAND "prime?") (("" (PROPAX) NIL NIL)) NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|zn_identity| FORMULA-DECL NIL |ring_zn_extra| |algebra_examples|)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL))
   NIL
   (|quat_Zp_prod_charac| SUBTYPE
    "(cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].+)((number_fields.+)((number_fields.+)((number_fields.-)(number_fields.*(quaternions_zp.a1, quaternions_zp.c2), number_fields.*(quaternions_zp.b1, quaternions_zp.d2)), number_fields.*(quaternions_zp.c1, quaternions_zp.a2)), number_fields.*(quaternions_zp.d1, quaternions_zp.b2)), ring_zn.nZ(quaternions_zp.p))"
    "(cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].coset?(ring_zn.Z, ring_zn.nZ(quaternions_zp.p)))")))
 (|quat_Zp_prod_charac| 0
  (|quat_Zp_prod_charac-1| NIL 3935074361
   (""
    (STOP-REWRITE "right_identity" "left_identity" "one_left" "one_right"
     "zero_plus" "plus_zero")
    (("" (SKEEP)
      (("" (LEMMA "ideal_is_coset")
        (("" (INST -1 "Z" "nZ(p)")
          (("1" (LEMMA "zn_identity")
            (("1" (CASE "FORALL(n: int): inv(n) = -n")
              (("1" (CASE "FORALL(x: int): Z(x)")
                (("1" (LEMMA "nZ_ideal")
                  (("1" (INST -1 "p")
                    (("1" (CASE "p >= 0")
                      (("1" (CASE "p-1 + nZ(p) = -1 +nZ(p)")
                        (("1" (REWRITE "q_prod_charac")
                          (("1" (DECOMPOSE-EQUALITY 1)
                            (("1" (REWRITE "product_charac")
                              (("1" (REWRITE "product_charac")
                                (("1" (REWRITE "product_charac")
                                  (("1" (REWRITE "product_charac")
                                    (("1" (REWRITE "inv_charac")
                                      (("1" (REWRITE "add_charac")
                                        (("1" (REWRITE "add_charac")
                                          (("1" (REWRITE "add_charac")
                                            (("1" (INST -5 "c1 * b2")
                                              (("1" (REPLACES -5)
                                                (("1" (ASSERT) NIL NIL)) NIL))
                                              NIL)
                                             ("2" (INST?) NIL NIL)
                                             ("3" (INST?) NIL NIL))
                                            NIL)
                                           ("2" (INST?) NIL NIL)
                                           ("3" (INST?) NIL NIL))
                                          NIL)
                                         ("2" (INST?) NIL NIL)
                                         ("3" (INST?) NIL NIL))
                                        NIL)
                                       ("2" (INST?) NIL NIL))
                                      NIL)
                                     ("2" (INST?) NIL NIL)
                                     ("3" (INST?) NIL NIL))
                                    NIL)
                                   ("2" (INST?) NIL NIL) ("3" (INST?) NIL NIL))
                                  NIL)
                                 ("2" (INST?) NIL NIL) ("3" (INST?) NIL NIL))
                                NIL)
                               ("2" (INST?) NIL NIL) ("3" (INST?) NIL NIL))
                              NIL)
                             ("2" (REPLACES -1)
                              (("2" (REWRITE "product_charac")
                                (("1" (REWRITE "product_charac")
                                  (("1" (REWRITE "product_charac")
                                    (("1" (REWRITE "product_charac")
                                      (("1" (REWRITE "product_charac")
                                        (("1" (REWRITE "inv_charac")
                                          (("1" (REWRITE "product_charac")
                                            (("1" (REWRITE "product_charac")
                                              (("1" (REWRITE "product_charac")
                                                (("1" (REWRITE "add_charac")
                                                  (("1" (REWRITE "add_charac")
                                                    (("1"
                                                      (REWRITE "add_charac")
                                                      (("1" (INST -4 "-1")
                                                        (("1" (REPLACES -4)
                                                          (("1" (ASSERT) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL)
                                                       ("2" (INST?) NIL NIL)
                                                       ("3" (INST?) NIL NIL))
                                                      NIL)
                                                     ("2" (INST?) NIL NIL)
                                                     ("3" (INST?) NIL NIL))
                                                    NIL)
                                                   ("2" (INST?) NIL NIL)
                                                   ("3" (INST?) NIL NIL))
                                                  NIL)
                                                 ("2" (INST?) NIL NIL)
                                                 ("3" (INST?) NIL NIL))
                                                NIL)
                                               ("2" (INST?) NIL NIL)
                                               ("3" (INST?) NIL NIL))
                                              NIL)
                                             ("2" (INST?) NIL NIL)
                                             ("3" (INST?) NIL NIL))
                                            NIL)
                                           ("2" (INST?) NIL NIL))
                                          NIL)
                                         ("2" (INST?) NIL NIL)
                                         ("3" (INST?) NIL NIL))
                                        NIL)
                                       ("2" (INST?) NIL NIL)
                                       ("3" (INST?) NIL NIL))
                                      NIL)
                                     ("2" (INST?) NIL NIL)
                                     ("3" (INST?) NIL NIL))
                                    NIL)
                                   ("2" (INST?) NIL NIL) ("3" (INST?) NIL NIL))
                                  NIL)
                                 ("2" (INST?) NIL NIL) ("3" (INST?) NIL NIL))
                                NIL))
                              NIL)
                             ("3" (REPLACES -1)
                              (("3" (REWRITE "product_charac")
                                (("1" (REWRITE "product_charac")
                                  (("1" (REWRITE "product_charac")
                                    (("1" (REWRITE "product_charac")
                                      (("1" (REWRITE "inv_charac")
                                        (("1" (REWRITE "product_charac")
                                          (("1" (REWRITE "product_charac")
                                            (("1" (REWRITE "add_charac")
                                              (("1" (REWRITE "add_charac")
                                                (("1" (REWRITE "add_charac")
                                                  (("1" (INST -4 "-1")
                                                    (("1" (REPLACES -4)
                                                      (("1" (ASSERT) NIL NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (INST?) NIL NIL)
                                                   ("3" (INST?) NIL NIL))
                                                  NIL)
                                                 ("2" (INST?) NIL NIL)
                                                 ("3" (INST?) NIL NIL))
                                                NIL)
                                               ("2" (INST?) NIL NIL)
                                               ("3" (INST?) NIL NIL))
                                              NIL)
                                             ("2" (INST?) NIL NIL)
                                             ("3" (INST?) NIL NIL))
                                            NIL)
                                           ("2" (INST?) NIL NIL)
                                           ("3" (INST?) NIL NIL))
                                          NIL)
                                         ("2" (INST?) NIL NIL))
                                        NIL)
                                       ("2" (INST?) NIL NIL)
                                       ("3" (INST?) NIL NIL))
                                      NIL)
                                     ("2" (INST?) NIL NIL)
                                     ("3" (INST?) NIL NIL))
                                    NIL)
                                   ("2" (INST?) NIL NIL) ("3" (INST?) NIL NIL))
                                  NIL)
                                 ("2" (INST?) NIL NIL) ("3" (INST?) NIL NIL))
                                NIL))
                              NIL)
                             ("4" (REPLACES -1)
                              (("4" (REWRITE "product_charac")
                                (("1" (REWRITE "product_charac")
                                  (("1" (REWRITE "product_charac")
                                    (("1" (REWRITE "product_charac")
                                      (("1" (REWRITE "inv_charac")
                                        (("1" (REWRITE "add_charac")
                                          (("1" (REWRITE "add_charac")
                                            (("1" (REWRITE "product_charac")
                                              (("1" (REWRITE "product_charac")
                                                (("1" (REWRITE "add_charac")
                                                  (("1" (INST -4 "-1")
                                                    (("1" (REPLACES -4)
                                                      (("1" (ASSERT) NIL NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (INST?) NIL NIL)
                                                   ("3" (INST?) NIL NIL))
                                                  NIL)
                                                 ("2" (INST?) NIL NIL)
                                                 ("3" (INST?) NIL NIL))
                                                NIL)
                                               ("2" (INST?) NIL NIL)
                                               ("3" (INST?) NIL NIL))
                                              NIL)
                                             ("2" (INST?) NIL NIL)
                                             ("3" (INST?) NIL NIL))
                                            NIL)
                                           ("2" (INST?) NIL NIL)
                                           ("3" (INST?) NIL NIL))
                                          NIL)
                                         ("2" (INST?) NIL NIL))
                                        NIL)
                                       ("2" (INST?) NIL NIL)
                                       ("3" (INST?) NIL NIL))
                                      NIL)
                                     ("2" (INST?) NIL NIL)
                                     ("3" (INST?) NIL NIL))
                                    NIL)
                                   ("2" (INST?) NIL NIL) ("3" (INST?) NIL NIL))
                                  NIL)
                                 ("2" (INST?) NIL NIL) ("3" (INST?) NIL NIL))
                                NIL))
                              NIL)
                             ("5" (REWRITE "zn_identity") NIL NIL)
                             ("6" (REWRITE "zn_identity") NIL NIL)
                             ("7" (REWRITE "zn_identity") NIL NIL)
                             ("8" (REWRITE "zn_identity") NIL NIL)
                             ("9" (REWRITE "zn_add_pair")
                              (("1" (SKEEP)
                                (("1" (REWRITE "zn_add_pair") NIL NIL)) NIL)
                               ("2" (INST 1 "nZ(p)") NIL NIL))
                              NIL)
                             ("10" (REWRITE "zn_add_pair")
                              (("1" (SKEEP)
                                (("1" (REWRITE "zn_add_pair") NIL NIL)) NIL)
                               ("2" (INST 1 "nZ(p)") NIL NIL))
                              NIL)
                             ("11" (REWRITE "zn_add_pair")
                              (("1" (SKEEP)
                                (("1" (REWRITE "zn_add_pair") NIL NIL)) NIL)
                               ("2" (INST 1 "nZ(p)") NIL NIL))
                              NIL)
                             ("12" (REWRITE "zn_add_pair")
                              (("1" (SKEEP)
                                (("1" (REWRITE "zn_add_pair") NIL NIL)) NIL)
                               ("2" (INST 1 "nZ(p)") NIL NIL))
                              NIL)
                             ("13" (SKEEP)
                              (("13" (REWRITE "zn_add_pair") NIL NIL)) NIL)
                             ("14" (INST 1 "nZ(p)") NIL NIL))
                            NIL)
                           ("2" (REWRITE "zn_identity") NIL NIL)
                           ("3" (REWRITE "zn_identity") NIL NIL)
                           ("4" (REWRITE "zn_identity") NIL NIL)
                           ("5" (REWRITE "zn_identity") NIL NIL)
                           ("6" (REWRITE "zn_identity") NIL NIL)
                           ("7" (REWRITE "zn_identity") NIL NIL)
                           ("8" (REWRITE "zn_identity") NIL NIL)
                           ("9" (REWRITE "zn_identity") NIL NIL)
                           ("10" (HIDE-ALL-BUT 1)
                            (("10" (LEMMA "Zp_prime_is_field")
                              (("10" (INST -1 "p")
                                (("10" (FLATTEN)
                                  (("10" (HIDE -2)
                                    (("10" (SPLIT)
                                      (("1"
                                        (CASE-REPLACE "restrict
               [setof[int],
                coset[int,
                      restrict[[numfield, numfield], [int, int], numfield]
                          (+)](Z, nZ(p)),
                bool]
               (Z(p)) = fullset
               [(coset?
                     [int,
                      restrict[[numfield, numfield], [int, int], numfield]
                          (+)]
                     (Z, nZ(p)))]")
                                        (("1" (HIDE-ALL-BUT 1)
                                          (("1" (EXPAND "restrict")
                                            (("1" (DECOMPOSE-EQUALITY)
                                              (("1" (IFF)
                                                (("1" (SPLIT)
                                                  (("1" (FLATTEN)
                                                    (("1" (EXPAND "fullset")
                                                      (("1" (PROPAX) NIL NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (EXPAND "fullset")
                                                    (("2" (TYPEPRED "x!1")
                                                      (("2" (EXPAND "Z")
                                                        (("2" (EXPAND "/")
                                                          (("2" (PROPAX) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (SKEEP)
                                                (("2" (EXPAND "restrict")
                                                  (("2" (PROPAX) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (SKEEP)
                                          (("2" (EXPAND "restrict")
                                            (("2" (PROPAX) NIL NIL)) NIL))
                                          NIL))
                                        NIL)
                                       ("2" (TYPEPRED "p")
                                        (("2" (PROPAX) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("11" (SPLIT)
                            (("1" (REWRITE "zn_identity") NIL NIL)
                             ("2" (EXPAND "remove")
                              (("2" (EXPAND "/=")
                                (("2" (EXPAND "member")
                                  (("2" (EXPAND "fullset")
                                    (("2" (HIDE-ALL-BUT -1)
                                      (("2"
                                        (NAME-REPLACE "rhs"
                                         "(+[int, restrict[[numfield, numfield], [int, int], numfield](+)])
           (p - 1, nZ(p))")
                                        (("1" (REWRITE "left_zero" :DIR RL)
                                          (("1" (EXPAND "rhs")
                                            (("1" (REWRITE "equal_cosets_rem")
                                              (("1"
                                                (REWRITE
                                                 "modulo_arithmetic.rem_zero")
                                                (("1" (REWRITE "rem_mod")
                                                  (("1" (TYPEPRED "p")
                                                    (("1" (EXPAND "prime?")
                                                      (("1" (FLATTEN)
                                                        (("1" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (SKEEP)
                                          (("2" (EXPAND "restrict")
                                            (("2" (PROPAX) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("12" (REWRITE "zn_identity") NIL NIL)
                           ("13" (REWRITE "nZ_ideal")
                            (("13" (REWRITE "ideal_is_coset")
                              (("13" (SKEEP)
                                (("13" (REWRITE "zn_product_pair") NIL NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("14" (SKEEP)
                            (("14" (REWRITE "zn_add_pair") NIL NIL)) NIL)
                           ("15" (INST 1 "nZ(p)") NIL NIL))
                          NIL)
                         ("2" (REWRITE "ideal_is_coset")
                          (("2" (REWRITE "equal_cosets_rem")
                            (("2" (REWRITE "rem_minus_one")
                              (("2" (REWRITE "rem_mod") NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (TYPEPRED "p")
                        (("2" (EXPAND "prime?")
                          (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (SKEEP)
                  (("2" (EXPAND "Z")
                    (("2" (EXPAND "fullset") (("2" (PROPAX) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (SKEEP) (("2" (ASSERT) NIL NIL)) NIL))
              NIL))
            NIL)
           ("2" (REWRITE "nZ_ideal") NIL NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|ideal_is_coset| FORMULA-DECL NIL |ring_cosets_lemmas| |algebra|)
    (|zn_identity| FORMULA-DECL NIL |ring_zn_extra| |algebra_examples|)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (+ CONST-DECL "set[T]" |cosets_def| |algebra|)
    (|zn_product_pair| FORMULA-DECL NIL |ring_zn_extra| |algebra_examples|)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|rhs| SKOLEM-CONST-DECL "set[int]" |quaternions_zp| NIL)
    (|rem_zero| FORMULA-DECL NIL |modulo_arithmetic| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|mod| NONEMPTY-TYPE-EQ-DECL NIL |euclidean_division| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|rem_mod| FORMULA-DECL NIL |modulo_arithmetic| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|equal_cosets_rem| FORMULA-DECL NIL |ring_zn_extra| |algebra_examples|)
    (|left_zero| FORMULA-DECL NIL |ring_cosets_lemmas| |algebra|)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|setofsets| TYPE-EQ-DECL NIL |sets| NIL)
    (Z CONST-DECL "setofsets[int]" |ring_zn| |algebra_examples|)
    (/ CONST-DECL "setof[set[T]]" |cosets_def| |algebra|)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|Zp_prime_is_field| FORMULA-DECL NIL |ring_zn| |algebra_examples|)
    (|a1| SKOLEM-CONST-DECL "int" |quaternions_zp| NIL)
    (|d2| SKOLEM-CONST-DECL "int" |quaternions_zp| NIL)
    (|b1| SKOLEM-CONST-DECL "int" |quaternions_zp| NIL)
    (|c2| SKOLEM-CONST-DECL "int" |quaternions_zp| NIL)
    (|c1| SKOLEM-CONST-DECL "int" |quaternions_zp| NIL)
    (|b2| SKOLEM-CONST-DECL "int" |quaternions_zp| NIL)
    (|d1| SKOLEM-CONST-DECL "int" |quaternions_zp| NIL)
    (|a2| SKOLEM-CONST-DECL "int" |quaternions_zp| NIL)
    (|add_charac| FORMULA-DECL NIL |quotient_rings| |algebra|)
    (|inv_charac| FORMULA-DECL NIL |quotient_rings| |algebra|)
    (|product_charac| FORMULA-DECL NIL |quotient_rings| |algebra|)
    (|minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|one_times| FORMULA-DECL NIL |ring_with_one| |algebra|)
    (|zn_add_pair| FORMULA-DECL NIL |ring_zn_extra| |algebra_examples|)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|product| CONST-DECL "set[T]" |product_coset_def| |algebra|)
    (|add| CONST-DECL "set[T]" |cosets_def| |algebra|)
    (|coset| TYPE-EQ-DECL NIL |cosets_def| |algebra|)
    (|coset?| CONST-DECL "bool" |cosets_def| |algebra|)
    (|quat| TYPE-EQ-DECL NIL |quaternions_def| |algebra|)
    (|q_prod_charac| FORMULA-DECL NIL |quaternions| |algebra|)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|remove| CONST-DECL "set" |sets| NIL)
    (|fullset| CONST-DECL "set" |sets| NIL)
    (|field?| CONST-DECL "bool" |field_def| |algebra|)
    (|rem_minus_one| FORMULA-DECL NIL |modulo_arithmetic| NIL)
    (|nZ_ideal| FORMULA-DECL NIL |ring_zn| |algebra_examples|)
    (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|inv| CONST-DECL "{y | x * y = one AND y * x = one}" |group| |algebra|)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|ring?| CONST-DECL "bool" |ring_def| |algebra|)
    (|ideal?| CONST-DECL "bool" |ring_ideal_def| |algebra|)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nZ| CONST-DECL "set[int]" |ring_zn| |algebra_examples|)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (|p| SKOLEM-CONST-DECL "(prime?)" |quaternions_zp| NIL)
    (|ring| NONEMPTY-TYPE-EQ-DECL NIL |ring| |algebra|)
    (Z CONST-DECL
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     |ring_zn| |algebra_examples|)
    (|ideal| TYPE-EQ-DECL NIL |ring_ideal_def| |algebra|))
   SHOSTAK))
 (|quat_Zp_odd_not_div_ring| 0
  (|quat_Zp_odd_not_div_ring-1| NIL 3926101594
   (""
    (STOP-REWRITE "right_identity" "left_identity" "one_left" "one_right"
     "zero_plus" "plus_zero")
    (("" (SKEEP)
      ((""
        (LEMMA
         "quat_div_ring_char[(coset?(Z,nZ(p))),add[int,+](Z,nZ(p)),product[int,+,*](Z,nZ(p)),nZ(p),+(1,nZ(p)),+(p-1,nZ(p)),+(p-1,nZ(p))]")
        (("1" (SPLIT)
          (("1" (FLATTEN)
            (("1" (HIDE -1)
              (("1" (SPLIT)
                (("1" (HIDE -2)
                  (("1" (LEMMA "sum_squares_mod_p_eq_int")
                    (("1" (INST -1 "p" "-1")
                      (("1" (SKEEP)
                        (("1" (INST -2 "x+nZ(p)" "y+nZ(p)")
                          (("1" (REWRITE* "zn_product_charac")
                            (("1" (REWRITE "zn_add_charac")
                              (("1" (EXPAND "/=")
                                (("1" (REWRITE "equal_cosets_rem")
                                  (("1" (LEMMA "rem_opposite_elim")
                                    (("1"
                                      (INST -1 "p"
                                       "-1 * (x * x) - y * y + p * x * x + p * y * y"
                                       "1")
                                      (("1" (REPLACE -1 1 RL HIDE)
                                        (("1"
                                          (CASE-REPLACE
                                           "-(-1 * (x * x) - y * y + p * x * x + p * y * y) = p * -(x*x+y*y) + (x*x+y*y)")
                                          (("1" (HIDE -1)
                                            (("1" (LEMMA "rem_sum1")
                                              (("1"
                                                (INST -1 "p"
                                                 "p * -(x * x + y * y)"
                                                 "(x * x + y * y)")
                                                (("1" (REPLACE -1 1 RL HIDE)
                                                  (("1"
                                                    (REWRITE "rem_prod1" :DIR
                                                     RL)
                                                    (("1" (REWRITE "rem_self")
                                                      (("1" (ASSERT)
                                                        (("1"
                                                          (REWRITE
                                                           "modulo_arithmetic.rem_zero")
                                                          (("1" (ASSERT) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("2" (ASSERT) NIL NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (REWRITE "zn_identity") NIL NIL)
                           ("3" (REWRITE "zn_identity") NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2"
                  (CASE-REPLACE "quat_Zp(p) = fullset
               [quat[(coset?(Z, nZ(p))),
                     add[int,
                         restrict
                             [[numfield, numfield], [int, int], numfield]
                             (+)]
                         (Z, nZ(p)),
                     product
                         [int,
                          restrict
                              [[numfield, numfield], [int, int], numfield]
                              (+),
                          restrict
                              [[numfield, numfield], [int, int], numfield]
                              (*)]
                         (Z, nZ(p)),
                     nZ(p), +(1, nZ(p)), +(p - 1, nZ(p)), +(p - 1, nZ(p))]]")
                  (("2" (HIDE-ALL-BUT 1)
                    (("2" (EXPAND "quat_Zp") (("2" (PROPAX) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (HIDE-ALL-BUT (1 2))
            (("2" (EXPAND "/=")
              (("2" (LEMMA "charac_cosets")
                (("2" (INST -1 "p") (("2" (REPLACES -1) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL)
         ("2" (HIDE -)
          (("2" (LEMMA "Zp_prime_is_field")
            (("2" (INST?)
              (("2" (ASSERT)
                (("2" (EXPAND "Z" -1)
                  (("2" (EXPAND "/" -1)
                    (("2" (EXPAND "fullset")
                      (("2" (EXPAND "restrict") (("2" (PROPAX) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("3" (HIDE -)
          (("3" (SPLIT)
            (("1" (REWRITE "zn_identity") NIL NIL)
             ("2" (EXPAND "remove")
              (("2" (EXPAND "member")
                (("2" (EXPAND "fullset")
                  (("2" (NAME-REPLACE "Zp" "nZ(p)")
                    (("2" (EXPAND "Zp" 1 1)
                      (("2" (CASE-REPLACE "nZ(p) = 0 + nZ(p)")
                        (("1" (PROP)
                          (("1" (LEMMA "equal_cosets_div")
                            (("1" (INST -1 "0" "p-1" "p")
                              (("1" (ASSERT)
                                (("1" (EXPAND "Zp")
                                  (("1" (ASSERT)
                                    (("1" (LEMMA "divisor_smaller")
                                      (("1" (INST -1 "p" "p-1")
                                        (("1" (ASSERT)
                                          (("1" (HIDE-ALL-BUT -1)
                                            (("1" (TYPEPRED "p")
                                              (("1" (GRIND) NIL NIL)) NIL))
                                            NIL))
                                          NIL)
                                         ("2" (HIDE-ALL-BUT 1)
                                          (("2" (TYPEPRED "p")
                                            (("2" (GRIND) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (REWRITE "left_zero") NIL NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("4" (HIDE -) (("4" (REWRITE "zn_identity") NIL NIL)) NIL)
         ("5" (HIDE -)
          (("5" (REWRITE "ideal_is_coset") (("5" (REWRITE "nZ_ideal") NIL NIL))
            NIL))
          NIL)
         ("6" (HIDE -)
          (("6" (SKEEP) (("6" (REWRITE "zn_product_pair") NIL NIL)) NIL)) NIL)
         ("7" (SKEEP) (("7" (REWRITE "zn_add_pair") NIL NIL)) NIL)
         ("8" (INST 1 "nZ(p)")
          (("8" (REWRITE "ideal_is_coset") (("8" (REWRITE "nZ_ideal") NIL NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|zn_add_pair| FORMULA-DECL NIL |ring_zn_extra| |algebra_examples|)
    (|zn_product_pair| FORMULA-DECL NIL |ring_zn_extra| |algebra_examples|)
    (|nZ_ideal| FORMULA-DECL NIL |ring_zn| |algebra_examples|)
    (|ideal| TYPE-EQ-DECL NIL |ring_ideal_def| |algebra|)
    (|ideal?| CONST-DECL "bool" |ring_ideal_def| |algebra|)
    (|ideal_is_coset| FORMULA-DECL NIL |ring_cosets_lemmas| |algebra|)
    (|Zp| SKOLEM-CONST-DECL "set[int]" |quaternions_zp| NIL)
    (|left_zero| FORMULA-DECL NIL |ring_cosets_lemmas| |algebra|)
    (|divisor_smaller| FORMULA-DECL NIL |divides| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|divides| CONST-DECL "bool" |divides| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|equal_cosets_div| FORMULA-DECL NIL |ring_zn| |algebra_examples|)
    (|member| CONST-DECL "bool" |sets| NIL)
    (Z CONST-DECL "setofsets[int]" |ring_zn| |algebra_examples|)
    (/ CONST-DECL "setof[set[T]]" |cosets_def| |algebra|)
    (|Zp_prime_is_field| FORMULA-DECL NIL |ring_zn| |algebra_examples|)
    (|quat_coset_Zp| TYPE-EQ-DECL NIL |quaternions_zp| NIL)
    (|quat_Zp| CONST-DECL "set[quat_coset_Zp(p)]" |quaternions_zp| NIL)
    (|quat| TYPE-EQ-DECL NIL |quaternions_def| |algebra|)
    (|x| SKOLEM-CONST-DECL "int" |quaternions_zp| NIL)
    (|p| SKOLEM-CONST-DECL "(prime?)" |quaternions_zp| NIL)
    (|y| SKOLEM-CONST-DECL "int" |quaternions_zp| NIL)
    (|zn_add_charac| FORMULA-DECL NIL |ring_zn_extra| |algebra_examples|)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|equal_cosets_rem| FORMULA-DECL NIL |ring_zn_extra| |algebra_examples|)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|rem_sum1| FORMULA-DECL NIL |modulo_arithmetic| NIL)
    (|rem_self| FORMULA-DECL NIL |modulo_arithmetic| NIL)
    (|rem_zero| FORMULA-DECL NIL |modulo_arithmetic| NIL)
    (|zero_times| FORMULA-DECL NIL |ring| |algebra|)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|rem_prod1| FORMULA-DECL NIL |modulo_arithmetic| NIL)
    (|rem_opposite_elim| FORMULA-DECL NIL |modulo_arithmetic| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|zn_product_charac| FORMULA-DECL NIL |ring_zn_extra| |algebra_examples|)
    (|zn_identity| FORMULA-DECL NIL |ring_zn_extra| |algebra_examples|)
    (|sum_squares_mod_p_eq_int| FORMULA-DECL NIL |zp_diophantine| NIL)
    (|charac_cosets| FORMULA-DECL NIL |ring_zn_extra| |algebra_examples|)
    (|field?| CONST-DECL "bool" |field_def| |algebra|)
    (|fullset| CONST-DECL "set" |sets| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|remove| CONST-DECL "set" |sets| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (+ CONST-DECL "set[T]" |cosets_def| |algebra|)
    (|product| CONST-DECL "set[T]" |product_coset_def| |algebra|)
    (|add| CONST-DECL "set[T]" |cosets_def| |algebra|)
    (|coset| TYPE-EQ-DECL NIL |cosets_def| |algebra|)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (|nZ| CONST-DECL "set[int]" |ring_zn| |algebra_examples|)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (Z CONST-DECL
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     |ring_zn| |algebra_examples|)
    (|ring| NONEMPTY-TYPE-EQ-DECL NIL |ring| |algebra|)
    (|ring?| CONST-DECL "bool" |ring_def| |algebra|)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|coset?| CONST-DECL "bool" |cosets_def| |algebra|)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|quat_div_ring_char| FORMULA-DECL NIL |quaternions| |algebra|)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL))
   SHOSTAK)))

