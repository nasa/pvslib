(|quaternions_Hurwitz_isomorphism|
 (|IMP_ring_with_one_maximal_extra_TCC1| 0
  (|IMP_ring_with_one_maximal_extra_TCC1-1| NIL 3953303813
   ("" (REWRITE "quat_is_ring_w_one") NIL NIL)
   ((* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|quat_is_ring_w_one| FORMULA-DECL NIL |quaternions| |algebra|))
   NIL
   (|IMP_ring_with_one_maximal_extra| ASSUMING
    "algebra@ring_with_one_maximal_extra[quat[rational, restrict[[numfield, numfield], [rational, rational], numfield](+), restrict[[numfield, numfield], [rational, rational], numfield](*), 0, 1, -1, -1], quaternions_def[rational, restrict[[numfield, numfield], [rational, rational], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [rational, rational], numfield].restrict(number_fields.*), 0, 1, -1, -1].+, quaternions_def[rational, restrict[[numfield, numfield], [rational, rational], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [rational, rational], numfield].restrict(number_fields.*), 0, 1, -1, -1].*, quaternions_def[rational, restrict[[numfield, numfield], [rational, rational], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [rational, rational], numfield].restrict(number_fields.*), 0, 1, -1, -1].zero_q, quaternions_def[rational, restrict[[numfield, numfield], [rational, rational], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [rational, rational], numfield].restrict(number_fields.*), 0, 1, -1, -1].one_q].ring_with_one_maximal_extra"
    "fullset_is_ring_with_one: ASSUMPTION ring_with_one_def[ring_with_one_maximal_extra.T, ring_with_one_maximal_extra.+, ring_with_one_maximal_extra.*, ring_with_one_maximal_extra.zero, ring_with_one_maximal_extra.one].ring_with_one?(sets[ring_with_one_maximal_extra.T].fullset)")))
 (|phi_Hx_TCC1| 0
  (|phi_Hx_TCC1-1| NIL 3935060471
   ("" (SKEEP)
    (("" (TYPEPRED "p")
      (("" (EXPAND "prime?") (("" (FLATTEN) (("" (ASSERT) NIL NIL)) NIL)) NIL))
      NIL))
    NIL)
   ((|prime?| CONST-DECL "bool" |primes| |ints|)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL))
   NIL
   (|phi_Hx| SUBTYPE "(number_fields.-)(quaternions_Hurwitz_isomorphism.p, 1)"
    "nat")))
 (|phi_Hx_TCC2| 0
  (|phi_Hx_TCC2-1| NIL 3935060471
   ("" (SKEEP)
    (("" (TYPEPRED "q")
      (("" (EXPAND "Hurwitz_ring")
        (("" (SKEEP)
          (("" (TYPEPRED "p")
            (("" (EXPAND "prime?")
              (("" (FLATTEN)
                (("" (REPLACES -3)
                  (("" (EXPAND "expt")
                    (("" (LIFT-IF)
                      (("" (PROP)
                        (("1" (ASSERT) NIL NIL)
                         ("2"
                          (CASE-REPLACE
                           "2 * expt(2, p - 2) * (x / 2) = 2 * (x / 2) * expt(2, p - 2)")
                          (("1" (REWRITE "real_props.div_cancel1")
                            (("1" (ASSERT) NIL NIL)) NIL)
                           ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|Hurwitz_ring| NONEMPTY-TYPE-EQ-DECL NIL |quaternions_Hurwitz_rings| NIL)
    (|Hurwitz_ring| CONST-DECL "set[quat[rational,
         restrict[[numfield, numfield], [rational, rational], numfield](+),
         restrict[[numfield, numfield], [rational, rational], numfield](*),
         0, 1, -1, -1]]"
     |quaternions_Hurwitz_rings| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|quat| TYPE-EQ-DECL NIL |quaternions_def| |algebra|)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|posnat_expt| APPLICATION-JUDGEMENT "posnat" |exponentiation| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|negate_nz_T_is_nz_T| APPLICATION-JUDGEMENT "nz_T[rational,
     restrict[[numfield, numfield], [rational, rational], numfield](+),
     restrict[[numfield, numfield], [rational, rational], numfield](*), 0]"
     |quaternions_Hurwitz_rings| NIL)
    (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|div_cancel1| FORMULA-DECL NIL |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|left_identity| FORMULA-DECL NIL |monad| |algebra|)
    (|expt| DEF-DECL "real" |exponentiation| NIL)
    (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL))
   NIL
   (|phi_Hx| SUBTYPE
    "number_fields.*(exponentiation.expt(2, (number_fields.-)(quaternions_Hurwitz_isomorphism.p, 1)), quaternions_Hurwitz_isomorphism.q`x)"
    "int")))
 (|phi_Hy_TCC1| 0
  (|phi_Hy_TCC1-1| NIL 3935060471
   ("" (SKEEP)
    (("" (TYPEPRED "q")
      (("" (EXPAND "Hurwitz_ring")
        (("" (SKEEP)
          (("" (REPLACES -) (("" (SIMPLIFY) (("" (PROPAX) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|Hurwitz_ring| NONEMPTY-TYPE-EQ-DECL NIL |quaternions_Hurwitz_rings| NIL)
    (|Hurwitz_ring| CONST-DECL "set[quat[rational,
         restrict[[numfield, numfield], [rational, rational], numfield](+),
         restrict[[numfield, numfield], [rational, rational], numfield](*),
         0, 1, -1, -1]]"
     |quaternions_Hurwitz_rings| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|quat| TYPE-EQ-DECL NIL |quaternions_def| |algebra|)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|rat_minus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|rat_plus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL))
   NIL
   (|phi_Hy| SUBTYPE
    "(number_fields.-)((number_fields.+)(quaternions_Hurwitz_isomorphism.phi_Hx(quaternions_Hurwitz_isomorphism.q, quaternions_Hurwitz_isomorphism.p), quaternions_Hurwitz_isomorphism.q`y), quaternions_Hurwitz_isomorphism.q`x)"
    "int")))
 (|phi_Hz_TCC1| 0
  (|phi_Hz_TCC1-1| NIL 3935060471
   ("" (SKEEP)
    (("" (TYPEPRED "q")
      (("" (EXPAND "Hurwitz_ring")
        (("" (SKEEP)
          (("" (REPLACES -) (("" (SIMPLIFY) (("" (PROPAX) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|Hurwitz_ring| NONEMPTY-TYPE-EQ-DECL NIL |quaternions_Hurwitz_rings| NIL)
    (|Hurwitz_ring| CONST-DECL "set[quat[rational,
         restrict[[numfield, numfield], [rational, rational], numfield](+),
         restrict[[numfield, numfield], [rational, rational], numfield](*),
         0, 1, -1, -1]]"
     |quaternions_Hurwitz_rings| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|quat| TYPE-EQ-DECL NIL |quaternions_def| |algebra|)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|rat_minus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|rat_plus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL))
   NIL
   (|phi_Hz| SUBTYPE
    "(number_fields.-)((number_fields.+)(quaternions_Hurwitz_isomorphism.phi_Hx(quaternions_Hurwitz_isomorphism.q, quaternions_Hurwitz_isomorphism.p), quaternions_Hurwitz_isomorphism.q`z), quaternions_Hurwitz_isomorphism.q`x)"
    "int")))
 (|phi_Ht_TCC1| 0
  (|phi_Ht_TCC1-1| NIL 3935060471
   ("" (SKEEP)
    (("" (TYPEPRED "q")
      (("" (EXPAND "Hurwitz_ring")
        (("" (SKEEP)
          (("" (REPLACES -) (("" (SIMPLIFY) (("" (PROPAX) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|Hurwitz_ring| NONEMPTY-TYPE-EQ-DECL NIL |quaternions_Hurwitz_rings| NIL)
    (|Hurwitz_ring| CONST-DECL "set[quat[rational,
         restrict[[numfield, numfield], [rational, rational], numfield](+),
         restrict[[numfield, numfield], [rational, rational], numfield](*),
         0, 1, -1, -1]]"
     |quaternions_Hurwitz_rings| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|quat| TYPE-EQ-DECL NIL |quaternions_def| |algebra|)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|rat_minus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|rat_plus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL))
   NIL
   (|phi_Ht| SUBTYPE
    "(number_fields.-)((number_fields.+)(quaternions_Hurwitz_isomorphism.phi_Hx(quaternions_Hurwitz_isomorphism.q, quaternions_Hurwitz_isomorphism.p), quaternions_Hurwitz_isomorphism.q`t), quaternions_Hurwitz_isomorphism.q`x)"
    "int")))
 (|phi_Hx_charac_TCC1| 0
  (|phi_Hx_charac_TCC1-1| NIL 3935060471
   ("" (SKEEP)
    (("" (TYPEPRED "p")
      (("" (EXPAND "prime?") (("" (FLATTEN) (("" (ASSERT) NIL NIL)) NIL)) NIL))
      NIL))
    NIL)
   ((|prime?| CONST-DECL "bool" |primes| |ints|)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL))
   NIL
   (|phi_Hx_charac| SUBTYPE
    "(number_fields.-)(quaternions_Hurwitz_isomorphism.p, 2)" "nat")))
 (|phi_Hx_charac| 0
  (|phi_Hx_charac-1| NIL 3935060778
   ("" (SKEEP)
    (("" (EXPAND "phi_Hx")
      (("" (NAME-REPLACE "rhs" "rem(p)(expt(2, p - 2) * x)")
        (("1" (EXPAND "expt")
          (("1" (LIFT-IF)
            (("1" (TYPEPRED "p")
              (("1" (EXPAND "prime?")
                (("1" (FLATTEN)
                  (("1" (PROP)
                    (("1" (ASSERT) NIL NIL)
                     ("2"
                      (CASE-REPLACE
                       "2 * expt(2, p - 2) * (x / 2) = 2 * (x / 2) * expt(2, p - 2)")
                      (("1" (LEMMA "real_props.div_cancel1")
                        (("1" (INST -1 "2" "x")
                          (("1" (REPLACES -1)
                            (("1" (EXPAND "rhs") (("1" (ASSERT) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (TYPEPRED "p")
          (("2" (EXPAND "prime?")
            (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|phi_Hx| CONST-DECL "int" |quaternions_Hurwitz_isomorphism| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|rhs| SKOLEM-CONST-DECL
     "{r: mod(p) | EXISTS q: expt(2, p - 2) * x = r + p * q}"
     |quaternions_Hurwitz_isomorphism| NIL)
    (|negate_nz_T_is_nz_T| APPLICATION-JUDGEMENT "nz_T[rational,
     restrict[[numfield, numfield], [rational, rational], numfield](+),
     restrict[[numfield, numfield], [rational, rational], numfield](*), 0]"
     |quaternions_Hurwitz_rings| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|div_cancel1| FORMULA-DECL NIL |real_props| NIL)
    (|left_identity| FORMULA-DECL NIL |monad| |algebra|)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|expt| DEF-DECL "real" |exponentiation| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (|rem| CONST-DECL "{r: mod(b) | EXISTS q: x = b * q + r}"
     |modulo_arithmetic| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|mod| NONEMPTY-TYPE-EQ-DECL NIL |euclidean_division| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|posnat_expt| APPLICATION-JUDGEMENT "posnat" |exponentiation| NIL))
   SHOSTAK))
 (|phi_Hy_charac| 0
  (|phi_Hy_charac-1| NIL 3935060801
   (""
    (STOP-REWRITE "right_identity" "left_identity" "one_left" "one_right"
     "zero_plus" "plus_zero")
    (("" (SKEEP)
      (("" (EXPAND "phi_Hy")
        (("" (REWRITE "rem_sum1" :DIR RL)
          (("" (REWRITE "phi_Hx_charac") (("" (REWRITE "rem_sum1") NIL NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|posnat_expt| APPLICATION-JUDGEMENT "posnat" |exponentiation| NIL)
    (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|rat_plus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|rem_sum1| FORMULA-DECL NIL |modulo_arithmetic| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|quat| TYPE-EQ-DECL NIL |quaternions_def| |algebra|)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|Hurwitz_ring| CONST-DECL "set[quat[rational,
         restrict[[numfield, numfield], [rational, rational], numfield](+),
         restrict[[numfield, numfield], [rational, rational], numfield](*),
         0, 1, -1, -1]]"
     |quaternions_Hurwitz_rings| NIL)
    (|Hurwitz_ring| NONEMPTY-TYPE-EQ-DECL NIL |quaternions_Hurwitz_rings| NIL)
    (|phi_Hx| CONST-DECL "int" |quaternions_Hurwitz_isomorphism| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|expt| DEF-DECL "real" |exponentiation| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|negate_nz_T_is_nz_T| APPLICATION-JUDGEMENT "nz_T[rational,
     restrict[[numfield, numfield], [rational, rational], numfield](+),
     restrict[[numfield, numfield], [rational, rational], numfield](*), 0]"
     |quaternions_Hurwitz_rings| NIL)
    (|phi_Hx_charac| FORMULA-DECL NIL |quaternions_Hurwitz_isomorphism| NIL)
    (|phi_Hy| CONST-DECL "int" |quaternions_Hurwitz_isomorphism| NIL))
   SHOSTAK))
 (|phi_Hz_charac| 0
  (|phi_Hz_charac-1| NIL 3935060823
   (""
    (STOP-REWRITE "right_identity" "left_identity" "one_left" "one_right"
     "zero_plus" "plus_zero")
    (("" (SKEEP)
      (("" (EXPAND "phi_Hz")
        (("" (REWRITE "rem_sum1" :DIR RL)
          (("" (REWRITE "phi_Hx_charac") (("" (REWRITE "rem_sum1") NIL NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|posnat_expt| APPLICATION-JUDGEMENT "posnat" |exponentiation| NIL)
    (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|rat_plus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|rem_sum1| FORMULA-DECL NIL |modulo_arithmetic| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|quat| TYPE-EQ-DECL NIL |quaternions_def| |algebra|)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|Hurwitz_ring| CONST-DECL "set[quat[rational,
         restrict[[numfield, numfield], [rational, rational], numfield](+),
         restrict[[numfield, numfield], [rational, rational], numfield](*),
         0, 1, -1, -1]]"
     |quaternions_Hurwitz_rings| NIL)
    (|Hurwitz_ring| NONEMPTY-TYPE-EQ-DECL NIL |quaternions_Hurwitz_rings| NIL)
    (|phi_Hx| CONST-DECL "int" |quaternions_Hurwitz_isomorphism| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|expt| DEF-DECL "real" |exponentiation| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|negate_nz_T_is_nz_T| APPLICATION-JUDGEMENT "nz_T[rational,
     restrict[[numfield, numfield], [rational, rational], numfield](+),
     restrict[[numfield, numfield], [rational, rational], numfield](*), 0]"
     |quaternions_Hurwitz_rings| NIL)
    (|phi_Hx_charac| FORMULA-DECL NIL |quaternions_Hurwitz_isomorphism| NIL)
    (|phi_Hz| CONST-DECL "int" |quaternions_Hurwitz_isomorphism| NIL))
   SHOSTAK))
 (|phi_Ht_charac| 0
  (|phi_Ht_charac-1| NIL 3935060861
   (""
    (STOP-REWRITE "right_identity" "left_identity" "one_left" "one_right"
     "zero_plus" "plus_zero")
    (("" (SKEEP)
      (("" (EXPAND "phi_Ht")
        (("" (REWRITE "rem_sum1" :DIR RL)
          (("" (REWRITE "phi_Hx_charac") (("" (REWRITE "rem_sum1") NIL NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|posnat_expt| APPLICATION-JUDGEMENT "posnat" |exponentiation| NIL)
    (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|rat_plus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|rem_sum1| FORMULA-DECL NIL |modulo_arithmetic| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|quat| TYPE-EQ-DECL NIL |quaternions_def| |algebra|)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|Hurwitz_ring| CONST-DECL "set[quat[rational,
         restrict[[numfield, numfield], [rational, rational], numfield](+),
         restrict[[numfield, numfield], [rational, rational], numfield](*),
         0, 1, -1, -1]]"
     |quaternions_Hurwitz_rings| NIL)
    (|Hurwitz_ring| NONEMPTY-TYPE-EQ-DECL NIL |quaternions_Hurwitz_rings| NIL)
    (|phi_Hx| CONST-DECL "int" |quaternions_Hurwitz_isomorphism| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|expt| DEF-DECL "real" |exponentiation| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|negate_nz_T_is_nz_T| APPLICATION-JUDGEMENT "nz_T[rational,
     restrict[[numfield, numfield], [rational, rational], numfield](+),
     restrict[[numfield, numfield], [rational, rational], numfield](*), 0]"
     |quaternions_Hurwitz_rings| NIL)
    (|phi_Hx_charac| FORMULA-DECL NIL |quaternions_Hurwitz_isomorphism| NIL)
    (|phi_Ht| CONST-DECL "int" |quaternions_Hurwitz_isomorphism| NIL))
   SHOSTAK))
 (|four_prod_sum_rem_split| 0
  (|four_prod_sum_rem_split-1| NIL 3951555393
   (""
    (STOP-REWRITE "right_identity" "left_identity" "one_left" "one_right"
     "zero_plus" "plus_zero")
    (("" (SKEEP)
      (("" (REWRITE* "rem_prod2")
        (("" (REWRITE* "rem_prod1")
          (("" (REWRITE* "rem_sum2" :DIR RL) NIL NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|rem_prod1| FORMULA-DECL NIL |modulo_arithmetic| NIL)
    (|rat_plus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|rem_sum2| FORMULA-DECL NIL |modulo_arithmetic| NIL)
    (|rem| CONST-DECL "{r: mod(b) | EXISTS q: x = b * q + r}"
     |modulo_arithmetic| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|mod| NONEMPTY-TYPE-EQ-DECL NIL |euclidean_division| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|rem_prod2| FORMULA-DECL NIL |modulo_arithmetic| NIL)
    (|negate_nz_T_is_nz_T| APPLICATION-JUDGEMENT "nz_T[rational,
     restrict[[numfield, numfield], [rational, rational], numfield](+),
     restrict[[numfield, numfield], [rational, rational], numfield](*), 0]"
     |quaternions_Hurwitz_rings| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL))
   SHOSTAK))
 (|rem_neg| 0
  (|rem_neg-1| NIL 3951555526
   ("" (SKEEP)
    (("" (REWRITE "neg_one_times" :DIR RL)
      (("" (REWRITE "rem_prod2" :DIR RL)
        (("" (REWRITE "neg_one_times") NIL NIL)) NIL))
      NIL))
    NIL)
   ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|negate_nz_T_is_nz_T| APPLICATION-JUDGEMENT "nz_T[rational,
     restrict[[numfield, numfield], [rational, rational], numfield](+),
     restrict[[numfield, numfield], [rational, rational], numfield](*), 0]"
     |quaternions_Hurwitz_rings| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|neg_one_times| FORMULA-DECL NIL |extra_tegies| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|mod| NONEMPTY-TYPE-EQ-DECL NIL |euclidean_division| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|rem| CONST-DECL "{r: mod(b) | EXISTS q: x = b * q + r}"
     |modulo_arithmetic| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|rem_prod2| FORMULA-DECL NIL |modulo_arithmetic| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL))
   SHOSTAK))
 (|rem_pow_2_id| 0
  (|rem_pow_2_id-1| NIL 3951555255
   ("" (SKEEP)
    (("" (LEMMA "fermats_little_theorem3")
      (("" (INST -1 "2" "p")
        (("" (SPLIT)
          (("1" (EXPAND "^")
            (("1" (LIFT-IF)
              (("1" (PROP)
                (("1" (REWRITE "modulo_arithmetic.rem_one")
                  (("1" (EXPAND "/=")
                    (("1" (TYPEPRED "p")
                      (("1" (EXPAND "prime?") (("1" (PROPAX) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (TYPEPRED "p")
                  (("2" (EXPAND "prime?")
                    (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (LEMMA "divisor_smaller")
            (("2" (INST -1 "p" "2")
              (("2" (SPLIT)
                (("1" (ASSERT) NIL NIL)
                 ("2" (TYPEPRED "p")
                  (("2" (EXPAND "prime?")
                    (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
                  NIL)
                 ("3" (PROPAX) NIL NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|fermats_little_theorem3| FORMULA-DECL NIL |fermats_little_theorem|
     |numbers|)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|rem_one| FORMULA-DECL NIL |modulo_arithmetic| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (|posnat_expt| APPLICATION-JUDGEMENT "posnat" |exponentiation| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|divisor_smaller| FORMULA-DECL NIL |divides| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL))
   SHOSTAK))
 (|rem_prod_sum_aux1| 0
  (|rem_prod_sum_aux1-1| NIL 3951555749
   (""
    (STOP-REWRITE "right_identity" "left_identity" "one_left" "one_right"
     "zero_plus" "plus_zero")
    (("" (SKEEP)
      (("" (LEMMA "rem_pow_2_id")
        (("" (INST?)
          (("" (SPLIT)
            (("1" (HIDE 1)
              (("1" (LEMMA " rem_sum_elim2")
                (("1" (CASE "p - 2 >= 0")
                  (("1" (INST?)
                    (("1" (REPLACES -2)
                      (("1" (LEMMA "rem_sum_elim1")
                        (("1" (INST?)
                          (("1" (REPLACES -1)
                            (("1" (REWRITE "rem_prod1" :DIR RL)
                              (("1"
                                (CASE-REPLACE
                                 "2 * expt(2, p - 2) = expt(2, p - 1)")
                                (("1" (REPLACES -3) (("1" (ASSERT) NIL NIL))
                                  NIL)
                                 ("2" (HIDE -2 2)
                                  (("2" (NAME-REPLACE "ex" " expt(2, p - 2)")
                                    (("2" (EXPAND "expt")
                                      (("2" (LIFT-IF)
                                        (("2" (PROP)
                                          (("1" (ASSERT) NIL NIL)
                                           ("2" (EXPAND "ex")
                                            (("2" (PROPAX) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (HIDE-ALL-BUT 1)
                    (("2" (TYPEPRED "p")
                      (("2" (EXPAND "prime?")
                        (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (ASSERT) NIL NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|posnat_expt| APPLICATION-JUDGEMENT "posnat" |exponentiation| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|rem_prod1| FORMULA-DECL NIL |modulo_arithmetic| NIL)
    (|negate_nz_T_is_nz_T| APPLICATION-JUDGEMENT "nz_T[rational,
     restrict[[numfield, numfield], [rational, rational], numfield](+),
     restrict[[numfield, numfield], [rational, rational], numfield](*), 0]"
     |quaternions_Hurwitz_rings| NIL)
    (|ex| SKOLEM-CONST-DECL "posnat" |quaternions_Hurwitz_isomorphism| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (|one_times| FORMULA-DECL NIL |ring_with_one| |algebra|)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|rem_sum_elim1| FORMULA-DECL NIL |modulo_arithmetic| NIL)
    (|expt| DEF-DECL "real" |exponentiation| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|p| SKOLEM-CONST-DECL "(prime?)" |quaternions_Hurwitz_isomorphism| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|rem_sum_elim2| FORMULA-DECL NIL |modulo_arithmetic| NIL)
    (|rem_pow_2_id| FORMULA-DECL NIL |quaternions_Hurwitz_isomorphism| NIL))
   SHOSTAK))
 (|rem_prod_sum_aux2| 0
  (|rem_prod_sum_aux2-1| NIL 3951556176
   (""
    (STOP-REWRITE "right_identity" "left_identity" "one_left" "one_right"
     "zero_plus" "plus_zero")
    (("" (SKEEP)
      (("" (LEMMA "rem_prod_sum_aux1")
        (("" (INST -1 "p" "x" "-y" "z")
          (("" (SPLIT)
            (("1" (HIDE 1)
              (("1"
                (CASE-REPLACE
                 "(2 * expt(2, p - 2)) * -y = -  (2 * expt(2, p - 2)) * y")
                (("1" (REWRITE "minus_add" :DIR RL)
                  (("1" (REWRITE "neg_mult")
                    (("1" (REWRITE "minus_add" :DIR RL) NIL NIL)) NIL))
                  NIL)
                 ("2" (ASSERT) NIL NIL)
                 ("3" (HIDE-ALL-BUT 1)
                  (("3" (TYPEPRED "p")
                    (("3" (EXPAND "prime?")
                      (("3" (FLATTEN) (("3" (ASSERT) NIL NIL)) NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (ASSERT) NIL NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|posnat_expt| APPLICATION-JUDGEMENT "posnat" |exponentiation| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|minus_add| FORMULA-DECL NIL |number_fields| NIL)
    (|rat_minus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|rat_plus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|negate_nz_T_is_nz_T| APPLICATION-JUDGEMENT "nz_T[rational,
     restrict[[numfield, numfield], [rational, rational], numfield](+),
     restrict[[numfield, numfield], [rational, rational], numfield](*), 0]"
     |quaternions_Hurwitz_rings| NIL)
    (|neg_mult| FORMULA-DECL NIL |extra_tegies| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|minus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|expt| DEF-DECL "real" |exponentiation| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|rem_prod_sum_aux1| FORMULA-DECL NIL |quaternions_Hurwitz_isomorphism|
     NIL))
   SHOSTAK))
 (|prod_identity_aux| 0
  (|prod_identity_aux-1| NIL 3951555647 ("" (GRIND) NIL NIL)
   ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|posnat_expt| APPLICATION-JUDGEMENT "posnat" |exponentiation| NIL)
    (|negate_nz_T_is_nz_T| APPLICATION-JUDGEMENT "nz_T[rational,
     restrict[[numfield, numfield], [rational, rational], numfield](+),
     restrict[[numfield, numfield], [rational, rational], numfield](*), 0]"
     |quaternions_Hurwitz_rings| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL))
   SHOSTAK))
 (|iso_quot_Hurwitz_zp_prod1| 0
  (|iso_quot_Hurwitz_zp_prod1-1| NIL 3951673891
   (""
    (STOP-REWRITE "right_identity" "left_identity" "one_left" "one_right"
     "zero_plus" "plus_zero")
    (("" (SKEEP)
      (("" (REWRITE "equal_cosets_rem")
        (("" (CASE "p-2>=0")
          (("1" (TYPEPRED "a" "b")
            (("1" (EXPAND "Hurwitz_ring")
              (("1" (SKOLEM -1 ("x1" "y1" "z1" "t1"))
                (("1" (SKOLEM -2 ("x2" "y2" "z2" "t2"))
                  (("1" (CASE "a = (x1/2, x1/2+y1, x1/2+z1, x1/2+t1)")
                    (("1" (CASE "b = (x2/2, x2/2+y2, x2/2+z2, x2/2+t2)")
                      (("1" (HIDE -3 -4)
                        (("1" (LEMMA "Hurwitz_prod_charac2")
                          (("1"
                            (INST -1 "x1" "y1" "z1" "t1" "x2" "y2" "z2" "t2")
                            (("1" (REPLACE -2 -1 RL)
                              (("1" (REPLACE -3 -1 RL)
                                (("1" (REPLACES -1)
                                  (("1" (REWRITE "phi_Hx_charac")
                                    (("1"
                                      (NAME-REPLACE "lhs"
                                       "expt(2, p - 2) * -(x1 * x2) - 2 * (expt(2, p - 2) * t1 * t2) -
           2 * (expt(2, p - 2) * y1 * y2)
           - 2 * (expt(2, p - 2) * z1 * z2)
           - expt(2, p - 2) * t1 * x2
           - expt(2, p - 2) * t2 * x1
           - expt(2, p - 2) * x1 * y2
           - expt(2, p - 2) * x1 * z2
           - expt(2, p - 2) * x2 * y1
           - expt(2, p - 2) * x2 * z1")
                                      (("1" (HIDE -3)
                                        (("1" (REWRITE* "minus_add")
                                          (("1" (REVEAL -1)
                                            (("1" (REWRITE* "neg_mult" :DIR RL)
                                              (("1"
                                                (REWRITE
                                                 "four_prod_sum_rem_split")
                                                (("1" (LEMMA "rem_neg")
                                                  (("1"
                                                    (INST-CP -1 "p"
                                                     "phi_Ht(a, p)")
                                                    (("1"
                                                      (INST-CP -1 "p"
                                                       "phi_Hy(a, p)")
                                                      (("1"
                                                        (INST-CP -1 "p"
                                                         "phi_Hz(a, p)")
                                                        (("1" (REPLACES -)
                                                          (("1"
                                                            (REWRITE*
                                                             "phi_Ht_charac")
                                                            (("1"
                                                              (REWRITE*
                                                               "phi_Hz_charac")
                                                              (("1"
                                                                (REWRITE*
                                                                 "phi_Hy_charac")
                                                                (("1"
                                                                  (REWRITE*
                                                                   "phi_Hx_charac")
                                                                  (("1"
                                                                    (INST-CP -1
                                                                     "p"
                                                                     "expt(2, p - 2) * x1 + t1")
                                                                    (("1"
                                                                      (REPLACE
                                                                       -2 2 RL
                                                                       HIDE)
                                                                      (("1"
                                                                        (INST-CP
                                                                         -1 "p"
                                                                         "expt(2, p - 2) * x1 + y1")
                                                                        (("1"
                                                                          (REPLACE
                                                                           -2 2
                                                                           RL
                                                                           HIDE)
                                                                          (("1"
                                                                            (INST
                                                                             -1
                                                                             "p"
                                                                             "expt(2, p - 2) * x1 + z1")
                                                                            (("1"
                                                                              (REPLACE
                                                                               -1
                                                                               2
                                                                               RL
                                                                               HIDE)
                                                                              (("1"
                                                                                (LEMMA
                                                                                 "four_prod_sum_rem_split")
                                                                                (("1"
                                                                                  (INST
                                                                                   -1
                                                                                   "p"
                                                                                   "-(expt(2, p - 2) * x1 + t1)"
                                                                                   "expt(2, p - 2) * x2 + t2"
                                                                                   "-(expt(2, p - 2) * x1 + y1)"
                                                                                   "expt(2, p - 2) * x2 + y2"
                                                                                   "-(expt(2, p - 2) * x1 + z1)"
                                                                                   "expt(2, p - 2) * x2 + z2"
                                                                                   "expt(2, p - 2) * x1"
                                                                                   "expt(2, p - 2) * x2")
                                                                                  (("1"
                                                                                    (REPLACE
                                                                                     -1
                                                                                     2
                                                                                     RL
                                                                                     HIDE)
                                                                                    (("1"
                                                                                      (REWRITE*
                                                                                       "neg_one_times"
                                                                                       :DIR
                                                                                       RL)
                                                                                      (("1"
                                                                                        (EXPAND
                                                                                         "lhs")
                                                                                        (("1"
                                                                                          (REWRITE
                                                                                           "mult_neg")
                                                                                          (("1"
                                                                                            (LEMMA
                                                                                             "prod_identity_aux")
                                                                                            (("1"
                                                                                              (COPY
                                                                                               -1)
                                                                                              (("1"
                                                                                                (INST?)
                                                                                                (("1"
                                                                                                  (REPLACES
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (COPY
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (INST?)
                                                                                                      (("1"
                                                                                                        (REPLACES
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (REWRITE
                                                                                                           "neg_mult")
                                                                                                          (("1"
                                                                                                            (COPY
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (INST?)
                                                                                                              (("1"
                                                                                                                (REPLACES
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (INST
                                                                                                                   -1
                                                                                                                   "p"
                                                                                                                   "expt(2, p - 2) * x1"
                                                                                                                   "x2")
                                                                                                                  (("1"
                                                                                                                    (REPLACES
                                                                                                                     -1)
                                                                                                                    (("1"
                                                                                                                      (LEMMA
                                                                                                                       "rem_prod_sum_aux2")
                                                                                                                      (("1"
                                                                                                                        (INST-CP
                                                                                                                         -1
                                                                                                                         "p"
                                                                                                                         "-(expt(2, p - 2) * (x1 * x2))"
                                                                                                                         "t1 * t2"
                                                                                                                         " - (2 * expt(2, p - 2)) * (y1 * y2)
           - (2 * expt(2, p - 2)) * (z1 * z2)
           - expt(2, p - 2) * t1 * x2
           - expt(2, p - 2) * t2 * x1
           - expt(2, p - 2) * x1 * y2
           - expt(2, p - 2) * x1 * z2
           - expt(2, p - 2) * x2 * y1
           - expt(2, p - 2) * x2 * z1")
                                                                                                                        (("1"
                                                                                                                          (PROP)
                                                                                                                          (("1"
                                                                                                                            (REPLACES
                                                                                                                             -1)
                                                                                                                            (("1"
                                                                                                                              (INST-CP
                                                                                                                               -1
                                                                                                                               "p"
                                                                                                                               "-(expt(2, p - 2) * (x1 * x2)) - t1 * t2 "
                                                                                                                               "y1 * y2"
                                                                                                                               "
           - (2 * expt(2, p - 2)) * (z1 * z2)
           - expt(2, p - 2) * t1 * x2
           - expt(2, p - 2) * t2 * x1
           - expt(2, p - 2) * x1 * y2
           - expt(2, p - 2) * x1 * z2
           - expt(2, p - 2) * x2 * y1
           - expt(2, p - 2) * x2 * z1")
                                                                                                                              (("1"
                                                                                                                                (PROP)
                                                                                                                                (("1"
                                                                                                                                  (REPLACES
                                                                                                                                   -1)
                                                                                                                                  (("1"
                                                                                                                                    (INST-CP
                                                                                                                                     -1
                                                                                                                                     "p"
                                                                                                                                     "-(expt(2, p - 2) * (x1 * x2)) - t1 * t2 - y1 * y2 "
                                                                                                                                     "z1 * z2"
                                                                                                                                     "
           - expt(2, p - 2) * t1 * x2
           - expt(2, p - 2) * t2 * x1
           - expt(2, p - 2) * x1 * y2
           - expt(2, p - 2) * x1 * z2
           - expt(2, p - 2) * x2 * y1
           - expt(2, p - 2) * x2 * z1")
                                                                                                                                    (("1"
                                                                                                                                      (PROP)
                                                                                                                                      (("1"
                                                                                                                                        (REPLACES
                                                                                                                                         -1)
                                                                                                                                        (("1"
                                                                                                                                          (INST
                                                                                                                                           -1
                                                                                                                                           "p"
                                                                                                                                           "0"
                                                                                                                                           "expt(2, p - 2) * x1 * x2"
                                                                                                                                           "0 -
            expt(2, p - 2) * t1 * x2
            - expt(2, p - 2) * t2 * x1
            - expt(2, p - 2) * x1 * y2
            - expt(2, p - 2) * x1 * z2
            - expt(2, p - 2) * x2 * y1
            - expt(2, p - 2) * x2 * z1
            - t1 * t2
            - y1 * y2
            - z1 * z2")
                                                                                                                                          (("1"
                                                                                                                                            (PROP)
                                                                                                                                            (("1"
                                                                                                                                              (REPLACES
                                                                                                                                               -1)
                                                                                                                                              (("1"
                                                                                                                                                (ASSERT)
                                                                                                                                                NIL
                                                                                                                                                NIL))
                                                                                                                                              NIL))
                                                                                                                                            NIL))
                                                                                                                                          NIL))
                                                                                                                                        NIL))
                                                                                                                                      NIL))
                                                                                                                                    NIL))
                                                                                                                                  NIL))
                                                                                                                                NIL))
                                                                                                                              NIL))
                                                                                                                            NIL))
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (DECOMPOSE-EQUALITY) NIL NIL))
                      NIL)
                     ("2" (DECOMPOSE-EQUALITY) NIL NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (ASSERT) NIL NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|Hurwitz_prod_charac2| FORMULA-DECL NIL |quaternions_Hurwitz_rings| NIL)
    (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|rat_minus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|expt| DEF-DECL "real" |exponentiation| NIL)
    (|minus_add| FORMULA-DECL NIL |number_fields| NIL)
    (|neg_mult| FORMULA-DECL NIL |extra_tegies| NIL)
    (|rem_neg| FORMULA-DECL NIL |quaternions_Hurwitz_isomorphism| NIL)
    (|phi_Hz_charac| FORMULA-DECL NIL |quaternions_Hurwitz_isomorphism| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|neg_one_times| FORMULA-DECL NIL |extra_tegies| NIL)
    (|mult_neg| FORMULA-DECL NIL |extra_tegies| NIL)
    (|even_minus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|nzrat_times_nzrat_is_nzrat| APPLICATION-JUDGEMENT "nzrat" |rationals|
     NIL)
    (|minus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|rem_prod_sum_aux2| FORMULA-DECL NIL |quaternions_Hurwitz_isomorphism|
     NIL)
    (|prod_identity_aux| FORMULA-DECL NIL |quaternions_Hurwitz_isomorphism|
     NIL)
    (|lhs| SKOLEM-CONST-DECL "int" |quaternions_Hurwitz_isomorphism| NIL)
    (|p| SKOLEM-CONST-DECL "(prime?)" |quaternions_Hurwitz_isomorphism| NIL)
    (|phi_Hy_charac| FORMULA-DECL NIL |quaternions_Hurwitz_isomorphism| NIL)
    (|phi_Ht_charac| FORMULA-DECL NIL |quaternions_Hurwitz_isomorphism| NIL)
    (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|four_prod_sum_rem_split| FORMULA-DECL NIL
     |quaternions_Hurwitz_isomorphism| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|phi_Hx_charac| FORMULA-DECL NIL |quaternions_Hurwitz_isomorphism| NIL)
    (|posnat_expt| APPLICATION-JUDGEMENT "posnat" |exponentiation| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|negate_nz_T_is_nz_T| APPLICATION-JUDGEMENT "nz_T[rational,
     restrict[[numfield, numfield], [rational, rational], numfield](+),
     restrict[[numfield, numfield], [rational, rational], numfield](*), 0]"
     |quaternions_Hurwitz_rings| NIL)
    (|rat_plus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|hurwitz_prod| APPLICATION-JUDGEMENT "Hurwitz_ring"
     |quaternions_Hurwitz_rings| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|equal_cosets_rem| FORMULA-DECL NIL |ring_zn_extra| |algebra_examples|)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|quat| TYPE-EQ-DECL NIL |quaternions_def| |algebra|)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|Hurwitz_ring| CONST-DECL "set[quat[rational,
         restrict[[numfield, numfield], [rational, rational], numfield](+),
         restrict[[numfield, numfield], [rational, rational], numfield](*),
         0, 1, -1, -1]]"
     |quaternions_Hurwitz_rings| NIL)
    (|Hurwitz_ring| NONEMPTY-TYPE-EQ-DECL NIL |quaternions_Hurwitz_rings| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (|phi_Hx| CONST-DECL "int" |quaternions_Hurwitz_isomorphism| NIL)
    (* CONST-DECL "[quat, quat -> quat]" |quaternions_def| |algebra|)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|phi_Hy| CONST-DECL "int" |quaternions_Hurwitz_isomorphism| NIL)
    (|phi_Hz| CONST-DECL "int" |quaternions_Hurwitz_isomorphism| NIL)
    (|phi_Ht| CONST-DECL "int" |quaternions_Hurwitz_isomorphism| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL))
   SHOSTAK))
 (|iso_quot_Hurwitz_zp_prod2| 0
  (|iso_quot_Hurwitz_zp_prod2-1| NIL 3951674375
   (""
    (STOP-REWRITE "right_identity" "left_identity" "one_left" "one_right"
     "zero_plus" "plus_zero")
    (("" (SKEEP)
      (("" (REWRITE "equal_cosets_rem")
        (("" (CASE "p-2>=0")
          (("1" (TYPEPRED "a" "b")
            (("1" (EXPAND "Hurwitz_ring")
              (("1" (SKOLEM -1 ("x1" "y1" "z1" "t1"))
                (("1" (SKOLEM -2 ("x2" "y2" "z2" "t2"))
                  (("1" (CASE "a = (x1/2, x1/2+y1, x1/2+z1, x1/2+t1)")
                    (("1" (CASE "b = (x2/2, x2/2+y2, x2/2+z2, x2/2+t2)")
                      (("1" (HIDE -3 -4)
                        (("1" (LEMMA "Hurwitz_prod_charac2")
                          (("1"
                            (INST -1 "x1" "y1" "z1" "t1" "x2" "y2" "z2" "t2")
                            (("1" (REPLACE -2 -1 RL)
                              (("1" (REPLACE -3 -1 RL)
                                (("1" (REPLACES -1)
                                  (("1" (REWRITE "phi_Hy_charac")
                                    (("1"
                                      (NAME-REPLACE "lhs"
                                       "expt(2, p - 2) * -(x1 * x2) - 2 * (expt(2, p - 2) * t1 * t2) -
           2 * (expt(2, p - 2) * y1 * y2)
           - 2 * (expt(2, p - 2) * z1 * z2)
           - expt(2, p - 2) * t1 * x2
           - expt(2, p - 2) * t2 * x1
           - expt(2, p - 2) * x1 * y2
           - expt(2, p - 2) * x1 * z2
           - expt(2, p - 2) * x2 * y1
           - expt(2, p - 2) * x2 * z1
           - t1 * z2
           + t1 * t2
           + t2 * z1
           + x1 * t2
           + x1 * x2
           + x1 * y2
           + x2 * y1
           + x2 * z1
           + y1 * y2
           + z1 * z2")
                                      (("1" (LEMMA "minus_add")
                                        (("1"
                                          (INST -1
                                           "phi_Hx(a, p) * phi_Hy(b, p) + phi_Hy(a, p) * phi_Hx(b, p) +
            phi_Hz(a, p) * phi_Ht(b, p)"
                                           "phi_Ht(a, p) * phi_Hz(b, p)")
                                          (("1" (REPLACES -1)
                                            (("1" (REWRITE "neg_mult" :DIR RL)
                                              (("1"
                                                (REWRITE
                                                 "four_prod_sum_rem_split")
                                                (("1" (REWRITE "rem_neg")
                                                  (("1" (REPLACES -)
                                                    (("1"
                                                      (REWRITE*
                                                       "phi_Ht_charac")
                                                      (("1"
                                                        (REWRITE*
                                                         "phi_Hz_charac")
                                                        (("1"
                                                          (REWRITE*
                                                           "phi_Hy_charac")
                                                          (("1"
                                                            (REWRITE*
                                                             "phi_Hx_charac")
                                                            (("1"
                                                              (REWRITE
                                                               "rem_neg" :DIR
                                                               RL)
                                                              (("1"
                                                                (LEMMA
                                                                 "four_prod_sum_rem_split")
                                                                (("1"
                                                                  (INST -1 "p"
                                                                   "-(expt(2, p - 2) * x1 + t1)"
                                                                   "expt(2, p - 2) * x2 + z2"
                                                                   "expt(2, p - 2) * x1"
                                                                   "expt(2, p - 2) * x2+y2"
                                                                   "expt(2, p - 2) * x1+y1"
                                                                   "expt(2, p - 2) * x2"
                                                                   "expt(2, p - 2) * x1 + z1"
                                                                   "expt(2, p - 2) * x2 + t2")
                                                                  (("1"
                                                                    (REPLACE -1
                                                                             2
                                                                             RL
                                                                             HIDE)
                                                                    (("1"
                                                                      (REWRITE
                                                                       "neg_one_times"
                                                                       :DIR RL)
                                                                      (("1"
                                                                        (SIMPLIFY)
                                                                        (("1"
                                                                          (LEMMA
                                                                           "prod_identity_aux")
                                                                          (("1"
                                                                            (INST
                                                                             -1
                                                                             "p"
                                                                             "expt(2, p - 2) * x1"
                                                                             "x2")
                                                                            (("1"
                                                                              (REPLACES
                                                                               -1)
                                                                              (("1"
                                                                                (LEMMA
                                                                                 "rem_prod_sum_aux1")
                                                                                (("1"
                                                                                  (INST-CP
                                                                                   -1
                                                                                   "p"
                                                                                   "-1 * (expt(2, p - 2) * t1 * x2) - expt(2, p - 2) * x1 * z2 -
            t1 * z2
            + expt(2, p - 2) * t2 * x1
            + expt(2, p - 2) * x1 * y2
            + expt(2, p - 2) * x2 * y1
            + expt(2, p - 2) * x2 * z1"
                                                                                   "expt(2, p - 2) * x1 * x2"
                                                                                   " t2 * z1")
                                                                                  (("1"
                                                                                    (PROP)
                                                                                    (("1"
                                                                                      (REPLACES
                                                                                       -1)
                                                                                      (("1"
                                                                                        (EXPAND
                                                                                         "lhs")
                                                                                        (("1"
                                                                                          (INST-CP
                                                                                           -1
                                                                                           "p"
                                                                                           "expt(2, p - 2) * -(x1 * x2) - 2 * (expt(2, p - 2) * t1 * t2) -
           2 * (expt(2, p - 2) * y1 * y2)
           - 2 * (expt(2, p - 2) * z1 * z2)
           - expt(2, p - 2) * t1 * x2
           - expt(2, p - 2) * t2 * x1
           - expt(2, p - 2) * x1 * y2
           - expt(2, p - 2) * x1 * z2
           - expt(2, p - 2) * x2 * y1
           - expt(2, p - 2) * x2 * z1"
                                                                                           "t1 * t2
           + x1 * t2
           + x1 * x2
           + x1 * y2
           + x2 * y1
           + x2 * z1
           + y1 * y2
           + z1 * z2"
                                                                                           " - t1 * z2 + t2 * z1")
                                                                                          (("1"
                                                                                            (PROP)
                                                                                            (("1"
                                                                                              (REPLACE
                                                                                               -1
                                                                                               2
                                                                                               RL
                                                                                               HIDE)
                                                                                              (("1"
                                                                                                (ASSERT)
                                                                                                NIL
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (DECOMPOSE-EQUALITY) NIL NIL))
                      NIL)
                     ("2" (DECOMPOSE-EQUALITY) NIL NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (ASSERT) NIL NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|Hurwitz_prod_charac2| FORMULA-DECL NIL |quaternions_Hurwitz_rings| NIL)
    (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|rat_minus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|expt| DEF-DECL "real" |exponentiation| NIL)
    (|neg_mult| FORMULA-DECL NIL |extra_tegies| NIL)
    (|rem_neg| FORMULA-DECL NIL |quaternions_Hurwitz_isomorphism| NIL)
    (|phi_Ht_charac| FORMULA-DECL NIL |quaternions_Hurwitz_isomorphism| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|p| SKOLEM-CONST-DECL "(prime?)" |quaternions_Hurwitz_isomorphism| NIL)
    (|neg_one_times| FORMULA-DECL NIL |extra_tegies| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|prod_identity_aux| FORMULA-DECL NIL |quaternions_Hurwitz_isomorphism|
     NIL)
    (|nzrat_times_nzrat_is_nzrat| APPLICATION-JUDGEMENT "nzrat" |rationals|
     NIL)
    (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|lhs| SKOLEM-CONST-DECL "int" |quaternions_Hurwitz_isomorphism| NIL)
    (|rem_prod_sum_aux1| FORMULA-DECL NIL |quaternions_Hurwitz_isomorphism|
     NIL)
    (|phi_Hx_charac| FORMULA-DECL NIL |quaternions_Hurwitz_isomorphism| NIL)
    (|phi_Hz_charac| FORMULA-DECL NIL |quaternions_Hurwitz_isomorphism| NIL)
    (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|four_prod_sum_rem_split| FORMULA-DECL NIL
     |quaternions_Hurwitz_isomorphism| NIL)
    (|minus_add| FORMULA-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|phi_Hy_charac| FORMULA-DECL NIL |quaternions_Hurwitz_isomorphism| NIL)
    (|posnat_expt| APPLICATION-JUDGEMENT "posnat" |exponentiation| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|negate_nz_T_is_nz_T| APPLICATION-JUDGEMENT "nz_T[rational,
     restrict[[numfield, numfield], [rational, rational], numfield](+),
     restrict[[numfield, numfield], [rational, rational], numfield](*), 0]"
     |quaternions_Hurwitz_rings| NIL)
    (|rat_plus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|hurwitz_prod| APPLICATION-JUDGEMENT "Hurwitz_ring"
     |quaternions_Hurwitz_rings| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|equal_cosets_rem| FORMULA-DECL NIL |ring_zn_extra| |algebra_examples|)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|quat| TYPE-EQ-DECL NIL |quaternions_def| |algebra|)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|Hurwitz_ring| CONST-DECL "set[quat[rational,
         restrict[[numfield, numfield], [rational, rational], numfield](+),
         restrict[[numfield, numfield], [rational, rational], numfield](*),
         0, 1, -1, -1]]"
     |quaternions_Hurwitz_rings| NIL)
    (|Hurwitz_ring| NONEMPTY-TYPE-EQ-DECL NIL |quaternions_Hurwitz_rings| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (|phi_Hy| CONST-DECL "int" |quaternions_Hurwitz_isomorphism| NIL)
    (* CONST-DECL "[quat, quat -> quat]" |quaternions_def| |algebra|)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|phi_Hx| CONST-DECL "int" |quaternions_Hurwitz_isomorphism| NIL)
    (|phi_Hz| CONST-DECL "int" |quaternions_Hurwitz_isomorphism| NIL)
    (|phi_Ht| CONST-DECL "int" |quaternions_Hurwitz_isomorphism| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL))
   SHOSTAK))
 (|iso_quot_Hurwitz_zp_prod3| 0
  (|iso_quot_Hurwitz_zp_prod3-1| NIL 3951674498
   (""
    (STOP-REWRITE "right_identity" "left_identity" "one_left" "one_right"
     "zero_plus" "plus_zero")
    (("" (SKEEP)
      (("" (REWRITE "equal_cosets_rem")
        (("" (CASE "p-2>=0")
          (("1" (TYPEPRED "a" "b")
            (("1" (EXPAND "Hurwitz_ring")
              (("1" (SKOLEM -1 ("x1" "y1" "z1" "t1"))
                (("1" (SKOLEM -2 ("x2" "y2" "z2" "t2"))
                  (("1" (CASE "a = (x1/2, x1/2+y1, x1/2+z1, x1/2+t1)")
                    (("1" (CASE "b = (x2/2, x2/2+y2, x2/2+z2, x2/2+t2)")
                      (("1" (HIDE -3 -4)
                        (("1" (LEMMA "Hurwitz_prod_charac2")
                          (("1"
                            (INST -1 "x1" "y1" "z1" "t1" "x2" "y2" "z2" "t2")
                            (("1" (REPLACE -2 -1 RL)
                              (("1" (REPLACE -3 -1 RL)
                                (("1" (REPLACES -1)
                                  (("1" (REWRITE "phi_Hz_charac")
                                    (("1"
                                      (NAME-REPLACE "lhs"
                                       "expt(2, p - 2) * -(x1 * x2) - 2 * (expt(2, p - 2) * t1 * t2) -
           2 * (expt(2, p - 2) * y1 * y2)
           - 2 * (expt(2, p - 2) * z1 * z2)
           - expt(2, p - 2) * t1 * x2
           - expt(2, p - 2) * t2 * x1
           - expt(2, p - 2) * x1 * y2
           - expt(2, p - 2) * x1 * z2
           - expt(2, p - 2) * x2 * y1
           - expt(2, p - 2) * x2 * z1
           - t2 * y1
           + t1 * t2
           + t1 * y2
           + x1 * x2
           + x1 * y2
           + x1 * z2
           + x2 * t1
           + x2 * z1
           + y1 * y2
           + z1 * z2")
                                      (("1" (LEMMA "minus_add")
                                        (("1"
                                          (INST -1
                                           "phi_Ht(a, p) * phi_Hy(b, p) + phi_Hx(a, p) * phi_Hz(b, p) +
            phi_Hz(a, p) * phi_Hx(b, p)"
                                           "phi_Hy(a, p) * phi_Ht(b, p)")
                                          (("1" (REPLACES -1)
                                            (("1" (REWRITE "neg_mult" :DIR RL)
                                              (("1"
                                                (REWRITE
                                                 "four_prod_sum_rem_split")
                                                (("1" (REWRITE "rem_neg")
                                                  (("1" (REPLACES -)
                                                    (("1"
                                                      (REWRITE*
                                                       "phi_Ht_charac")
                                                      (("1"
                                                        (REWRITE*
                                                         "phi_Hz_charac")
                                                        (("1"
                                                          (REWRITE*
                                                           "phi_Hy_charac")
                                                          (("1"
                                                            (REWRITE*
                                                             "phi_Hx_charac")
                                                            (("1"
                                                              (LEMMA "rem_neg")
                                                              (("1"
                                                                (INST -1 "p"
                                                                 "expt(2, p - 2) * x1 + y1")
                                                                (("1"
                                                                  (REPLACE -1 2
                                                                           RL
                                                                           HIDE)
                                                                  (("1"
                                                                    (LEMMA
                                                                     "four_prod_sum_rem_split")
                                                                    (("1"
                                                                      (INST -1
                                                                       "p"
                                                                       "-(expt(2, p - 2) * x1 + y1)"
                                                                       "expt(2, p - 2) * x2 +t2"
                                                                       "expt(2, p - 2) * x1 + t1"
                                                                       "expt(2, p - 2) * x2+y2"
                                                                       "expt(2, p - 2) * x1"
                                                                       "expt(2, p - 2) * x2 + z2"
                                                                       "expt(2, p - 2) * x1 + z1"
                                                                       "expt(2, p - 2) * x2")
                                                                      (("1"
                                                                        (REPLACE
                                                                         -1 2
                                                                         RL
                                                                         HIDE)
                                                                        (("1"
                                                                          (REWRITE
                                                                           "neg_one_times"
                                                                           :DIR
                                                                           RL)
                                                                          (("1"
                                                                            (SIMPLIFY)
                                                                            (("1"
                                                                              (LEMMA
                                                                               "prod_identity_aux")
                                                                              (("1"
                                                                                (INST
                                                                                 -1
                                                                                 "p"
                                                                                 "expt(2, p - 2) * x1"
                                                                                 "x2")
                                                                                (("1"
                                                                                  (REPLACES
                                                                                   -1)
                                                                                  (("1"
                                                                                    (LEMMA
                                                                                     "rem_prod_sum_aux1")
                                                                                    (("1"
                                                                                      (INST-CP
                                                                                       -1
                                                                                       "p"
                                                                                       "-1 * (expt(2, p - 2) * t2 * x1) - expt(2, p - 2) * x2 * y1 -
            t2 * y1
            + expt(2, p - 2) * t1 * x2
            + expt(2, p - 2) * x1 * y2
            + expt(2, p - 2) * x1 * z2
            + expt(2, p - 2) * x2 * z1"
                                                                                       "expt(2, p - 2) * x1 * x2"
                                                                                       "t1 * y2")
                                                                                      (("1"
                                                                                        (PROP)
                                                                                        (("1"
                                                                                          (REPLACES
                                                                                           -1)
                                                                                          (("1"
                                                                                            (EXPAND
                                                                                             "lhs")
                                                                                            (("1"
                                                                                              (INST
                                                                                               -1
                                                                                               "p"
                                                                                               "expt(2, p - 2) * -(x1 * x2) - 2 * (expt(2, p - 2) * t1 * t2) -
           2 * (expt(2, p - 2) * y1 * y2)
           - 2 * (expt(2, p - 2) * z1 * z2)
           - expt(2, p - 2) * t1 * x2
           - expt(2, p - 2) * t2 * x1
           - expt(2, p - 2) * x1 * y2
           - expt(2, p - 2) * x1 * z2
           - expt(2, p - 2) * x2 * y1
           - expt(2, p - 2) * x2 * z1"
                                                                                               "t1 * t2
           + x1 * x2
           + x1 * y2
           + x1 * z2
           + x2 * t1
           + x2 * z1
           + y1 * y2
           + z1 * z2"
                                                                                               "- t2 * y1 + t1 * y2")
                                                                                              (("1"
                                                                                                (PROP)
                                                                                                (("1"
                                                                                                  (REPLACE
                                                                                                   -1
                                                                                                   2
                                                                                                   RL
                                                                                                   HIDE)
                                                                                                  (("1"
                                                                                                    (ASSERT)
                                                                                                    NIL
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (DECOMPOSE-EQUALITY) NIL NIL))
                      NIL)
                     ("2" (DECOMPOSE-EQUALITY) NIL NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (ASSERT) NIL NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|Hurwitz_prod_charac2| FORMULA-DECL NIL |quaternions_Hurwitz_rings| NIL)
    (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|rat_minus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|expt| DEF-DECL "real" |exponentiation| NIL)
    (|neg_mult| FORMULA-DECL NIL |extra_tegies| NIL)
    (|rem_neg| FORMULA-DECL NIL |quaternions_Hurwitz_isomorphism| NIL)
    (|phi_Ht_charac| FORMULA-DECL NIL |quaternions_Hurwitz_isomorphism| NIL)
    (|phi_Hy_charac| FORMULA-DECL NIL |quaternions_Hurwitz_isomorphism| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|neg_one_times| FORMULA-DECL NIL |extra_tegies| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|prod_identity_aux| FORMULA-DECL NIL |quaternions_Hurwitz_isomorphism|
     NIL)
    (|nzrat_times_nzrat_is_nzrat| APPLICATION-JUDGEMENT "nzrat" |rationals|
     NIL)
    (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|lhs| SKOLEM-CONST-DECL "int" |quaternions_Hurwitz_isomorphism| NIL)
    (|rem_prod_sum_aux1| FORMULA-DECL NIL |quaternions_Hurwitz_isomorphism|
     NIL)
    (|p| SKOLEM-CONST-DECL "(prime?)" |quaternions_Hurwitz_isomorphism| NIL)
    (|phi_Hx_charac| FORMULA-DECL NIL |quaternions_Hurwitz_isomorphism| NIL)
    (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|four_prod_sum_rem_split| FORMULA-DECL NIL
     |quaternions_Hurwitz_isomorphism| NIL)
    (|minus_add| FORMULA-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|phi_Hz_charac| FORMULA-DECL NIL |quaternions_Hurwitz_isomorphism| NIL)
    (|posnat_expt| APPLICATION-JUDGEMENT "posnat" |exponentiation| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|negate_nz_T_is_nz_T| APPLICATION-JUDGEMENT "nz_T[rational,
     restrict[[numfield, numfield], [rational, rational], numfield](+),
     restrict[[numfield, numfield], [rational, rational], numfield](*), 0]"
     |quaternions_Hurwitz_rings| NIL)
    (|rat_plus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|hurwitz_prod| APPLICATION-JUDGEMENT "Hurwitz_ring"
     |quaternions_Hurwitz_rings| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|equal_cosets_rem| FORMULA-DECL NIL |ring_zn_extra| |algebra_examples|)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|quat| TYPE-EQ-DECL NIL |quaternions_def| |algebra|)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|Hurwitz_ring| CONST-DECL "set[quat[rational,
         restrict[[numfield, numfield], [rational, rational], numfield](+),
         restrict[[numfield, numfield], [rational, rational], numfield](*),
         0, 1, -1, -1]]"
     |quaternions_Hurwitz_rings| NIL)
    (|Hurwitz_ring| NONEMPTY-TYPE-EQ-DECL NIL |quaternions_Hurwitz_rings| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (|phi_Hz| CONST-DECL "int" |quaternions_Hurwitz_isomorphism| NIL)
    (* CONST-DECL "[quat, quat -> quat]" |quaternions_def| |algebra|)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|phi_Hx| CONST-DECL "int" |quaternions_Hurwitz_isomorphism| NIL)
    (|phi_Hy| CONST-DECL "int" |quaternions_Hurwitz_isomorphism| NIL)
    (|phi_Ht| CONST-DECL "int" |quaternions_Hurwitz_isomorphism| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL))
   SHOSTAK))
 (|iso_quot_Hurwitz_zp_prod4| 0
  (|iso_quot_Hurwitz_zp_prod4-1| NIL 3951674575
   (""
    (STOP-REWRITE "right_identity" "left_identity" "one_left" "one_right"
     "zero_plus" "plus_zero")
    (("" (SKEEP)
      (("" (REWRITE "equal_cosets_rem")
        (("" (CASE "p-2>=0")
          (("1" (TYPEPRED "a" "b")
            (("1" (EXPAND "Hurwitz_ring")
              (("1" (SKOLEM -1 ("x1" "y1" "z1" "t1"))
                (("1" (SKOLEM -2 ("x2" "y2" "z2" "t2"))
                  (("1" (CASE "a = (x1/2, x1/2+y1, x1/2+z1, x1/2+t1)")
                    (("1" (CASE "b = (x2/2, x2/2+y2, x2/2+z2, x2/2+t2)")
                      (("1" (HIDE -3 -4)
                        (("1" (LEMMA "Hurwitz_prod_charac2")
                          (("1"
                            (INST -1 "x1" "y1" "z1" "t1" "x2" "y2" "z2" "t2")
                            (("1" (REPLACE -2 -1 RL)
                              (("1" (REPLACE -3 -1 RL)
                                (("1" (REPLACES -1)
                                  (("1" (REWRITE "phi_Ht_charac")
                                    (("1"
                                      (NAME-REPLACE "lhs"
                                       "expt(2, p - 2) * -(x1 * x2) - 2 * (expt(2, p - 2) * t1 * t2) -
           2 * (expt(2, p - 2) * y1 * y2)
           - 2 * (expt(2, p - 2) * z1 * z2)
           - expt(2, p - 2) * t1 * x2
           - expt(2, p - 2) * t2 * x1
           - expt(2, p - 2) * x1 * y2
           - expt(2, p - 2) * x1 * z2
           - expt(2, p - 2) * x2 * y1
           - expt(2, p - 2) * x2 * z1
           - y2 * z1
           + t1 * t2
           + x1 * t2
           + x1 * x2
           + x1 * z2
           + x2 * t1
           + x2 * y1
           + y1 * y2
           + y1 * z2
           + z1 * z2")
                                      (("1" (LEMMA "minus_add")
                                        (("1"
                                          (INST -1
                                           "phi_Ht(a, p) * phi_Hx(b, p) + phi_Hx(a, p) * phi_Ht(b, p) +
            phi_Hy(a, p) * phi_Hz(b, p)"
                                           "phi_Hz(a, p) * phi_Hy(b, p)")
                                          (("1" (REPLACES -1)
                                            (("1" (REWRITE "neg_mult" :DIR RL)
                                              (("1"
                                                (REWRITE
                                                 "four_prod_sum_rem_split")
                                                (("1" (REWRITE "rem_neg")
                                                  (("1" (REPLACES -)
                                                    (("1"
                                                      (REWRITE*
                                                       "phi_Ht_charac")
                                                      (("1"
                                                        (REWRITE*
                                                         "phi_Hz_charac")
                                                        (("1"
                                                          (REWRITE*
                                                           "phi_Hy_charac")
                                                          (("1"
                                                            (REWRITE*
                                                             "phi_Hx_charac")
                                                            (("1"
                                                              (LEMMA "rem_neg")
                                                              (("1"
                                                                (INST -1 "p"
                                                                 "expt(2, p - 2) * x1 + z1")
                                                                (("1"
                                                                  (REPLACE -1 2
                                                                           RL
                                                                           HIDE)
                                                                  (("1"
                                                                    (LEMMA
                                                                     "four_prod_sum_rem_split")
                                                                    (("1"
                                                                      (INST -1
                                                                       "p"
                                                                       "-(expt(2, p - 2) * x1 + z1)"
                                                                       "expt(2, p - 2) * x2 + y2"
                                                                       "expt(2, p - 2) * x1 + t1"
                                                                       "expt(2, p - 2) * x2"
                                                                       "expt(2, p - 2) * x1"
                                                                       "expt(2, p - 2) * x2 + t2"
                                                                       "expt(2, p - 2) * x1 + y1"
                                                                       "expt(2, p - 2) * x2 + z2")
                                                                      (("1"
                                                                        (REPLACE
                                                                         -1 2
                                                                         RL
                                                                         HIDE)
                                                                        (("1"
                                                                          (REWRITE
                                                                           "neg_one_times"
                                                                           :DIR
                                                                           RL)
                                                                          (("1"
                                                                            (SIMPLIFY)
                                                                            (("1"
                                                                              (LEMMA
                                                                               "prod_identity_aux")
                                                                              (("1"
                                                                                (INST
                                                                                 -1
                                                                                 "p"
                                                                                 "expt(2, p - 2) * x1"
                                                                                 "x2")
                                                                                (("1"
                                                                                  (REPLACES
                                                                                   -1)
                                                                                  (("1"
                                                                                    (REWRITE
                                                                                     "rem_prod_sum_aux1")
                                                                                    (("1"
                                                                                      (EXPAND
                                                                                       "lhs")
                                                                                      (("1"
                                                                                        (LEMMA
                                                                                         "rem_prod_sum_aux1")
                                                                                        (("1"
                                                                                          (INST-CP
                                                                                           -1
                                                                                           "p"
                                                                                           "expt(2, p - 2) * -(x1 * x2) - 2 * (expt(2, p - 2) * t1 * t2) -
           2 * (expt(2, p - 2) * y1 * y2)
           - 2 * (expt(2, p - 2) * z1 * z2)
           - expt(2, p - 2) * t1 * x2
           - expt(2, p - 2) * t2 * x1
           - expt(2, p - 2) * x1 * y2
           - expt(2, p - 2) * x1 * z2
           - expt(2, p - 2) * x2 * y1
           - expt(2, p - 2) * x2 * z1"
                                                                                           "t1 * t2
           + x1 * t2
           + x1 * x2
           + x1 * z2
           + x2 * t1
           + x2 * y1
           + y1 * y2
           + z1 * z2"
                                                                                           "- y2 * z1 + y1 * z2")
                                                                                          (("1"
                                                                                            (PROP)
                                                                                            (("1"
                                                                                              (REPLACES
                                                                                               -1)
                                                                                              (("1"
                                                                                                (ASSERT)
                                                                                                NIL
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (DECOMPOSE-EQUALITY) NIL NIL))
                      NIL)
                     ("2" (DECOMPOSE-EQUALITY) NIL NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (ASSERT) NIL NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|Hurwitz_prod_charac2| FORMULA-DECL NIL |quaternions_Hurwitz_rings| NIL)
    (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|rat_minus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|expt| DEF-DECL "real" |exponentiation| NIL)
    (|neg_mult| FORMULA-DECL NIL |extra_tegies| NIL)
    (|rem_neg| FORMULA-DECL NIL |quaternions_Hurwitz_isomorphism| NIL)
    (|phi_Hy_charac| FORMULA-DECL NIL |quaternions_Hurwitz_isomorphism| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|neg_one_times| FORMULA-DECL NIL |extra_tegies| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|prod_identity_aux| FORMULA-DECL NIL |quaternions_Hurwitz_isomorphism|
     NIL)
    (|lhs| SKOLEM-CONST-DECL "int" |quaternions_Hurwitz_isomorphism| NIL)
    (|nzrat_times_nzrat_is_nzrat| APPLICATION-JUDGEMENT "nzrat" |rationals|
     NIL)
    (|rem_prod_sum_aux1| FORMULA-DECL NIL |quaternions_Hurwitz_isomorphism|
     NIL)
    (|p| SKOLEM-CONST-DECL "(prime?)" |quaternions_Hurwitz_isomorphism| NIL)
    (|phi_Hx_charac| FORMULA-DECL NIL |quaternions_Hurwitz_isomorphism| NIL)
    (|phi_Hz_charac| FORMULA-DECL NIL |quaternions_Hurwitz_isomorphism| NIL)
    (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|four_prod_sum_rem_split| FORMULA-DECL NIL
     |quaternions_Hurwitz_isomorphism| NIL)
    (|minus_add| FORMULA-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|phi_Ht_charac| FORMULA-DECL NIL |quaternions_Hurwitz_isomorphism| NIL)
    (|posnat_expt| APPLICATION-JUDGEMENT "posnat" |exponentiation| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|negate_nz_T_is_nz_T| APPLICATION-JUDGEMENT "nz_T[rational,
     restrict[[numfield, numfield], [rational, rational], numfield](+),
     restrict[[numfield, numfield], [rational, rational], numfield](*), 0]"
     |quaternions_Hurwitz_rings| NIL)
    (|rat_plus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|hurwitz_prod| APPLICATION-JUDGEMENT "Hurwitz_ring"
     |quaternions_Hurwitz_rings| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|equal_cosets_rem| FORMULA-DECL NIL |ring_zn_extra| |algebra_examples|)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|quat| TYPE-EQ-DECL NIL |quaternions_def| |algebra|)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|Hurwitz_ring| CONST-DECL "set[quat[rational,
         restrict[[numfield, numfield], [rational, rational], numfield](+),
         restrict[[numfield, numfield], [rational, rational], numfield](*),
         0, 1, -1, -1]]"
     |quaternions_Hurwitz_rings| NIL)
    (|Hurwitz_ring| NONEMPTY-TYPE-EQ-DECL NIL |quaternions_Hurwitz_rings| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (|phi_Ht| CONST-DECL "int" |quaternions_Hurwitz_isomorphism| NIL)
    (* CONST-DECL "[quat, quat -> quat]" |quaternions_def| |algebra|)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|phi_Hx| CONST-DECL "int" |quaternions_Hurwitz_isomorphism| NIL)
    (|phi_Hy| CONST-DECL "int" |quaternions_Hurwitz_isomorphism| NIL)
    (|phi_Hz| CONST-DECL "int" |quaternions_Hurwitz_isomorphism| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL))
   SHOSTAK))
 (|isomorphism_quot_Hurwitz_zp_prod| 0
  (|isomorphism_quot_Hurwitz_zp_prod-1| NIL 3935060920
   ("" (SKEEP)
    (("" (REWRITE "iso_quot_Hurwitz_zp_prod1" :DIR RL)
      (("" (REWRITE "iso_quot_Hurwitz_zp_prod2" :DIR RL)
        (("" (REWRITE "iso_quot_Hurwitz_zp_prod3" :DIR RL)
          (("" (REWRITE "iso_quot_Hurwitz_zp_prod4" :DIR RL) NIL NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|iso_quot_Hurwitz_zp_prod1| FORMULA-DECL NIL
     |quaternions_Hurwitz_isomorphism| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|quat| TYPE-EQ-DECL NIL |quaternions_def| |algebra|)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|Hurwitz_ring| CONST-DECL "set[quat[rational,
         restrict[[numfield, numfield], [rational, rational], numfield](+),
         restrict[[numfield, numfield], [rational, rational], numfield](*),
         0, 1, -1, -1]]"
     |quaternions_Hurwitz_rings| NIL)
    (|Hurwitz_ring| NONEMPTY-TYPE-EQ-DECL NIL |quaternions_Hurwitz_rings| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|hurwitz_prod| APPLICATION-JUDGEMENT "Hurwitz_ring"
     |quaternions_Hurwitz_rings| NIL)
    (|iso_quot_Hurwitz_zp_prod3| FORMULA-DECL NIL
     |quaternions_Hurwitz_isomorphism| NIL)
    (|iso_quot_Hurwitz_zp_prod4| FORMULA-DECL NIL
     |quaternions_Hurwitz_isomorphism| NIL)
    (|iso_quot_Hurwitz_zp_prod2| FORMULA-DECL NIL
     |quaternions_Hurwitz_isomorphism| NIL))
   SHOSTAK))
 (|phi_Hurwitz_quat_zp_TCC1| 0
  (|phi_Hurwitz_quat_zp_TCC1-1| NIL 3935244908
   ("" (SKEEP) (("" (REWRITE "zn_identity") NIL NIL)) NIL)
   ((|zn_identity| FORMULA-DECL NIL |ring_zn_extra| |algebra_examples|)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|quat| TYPE-EQ-DECL NIL |quaternions_def| |algebra|)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|Hurwitz_ring| CONST-DECL "set[quat[rational,
         restrict[[numfield, numfield], [rational, rational], numfield](+),
         restrict[[numfield, numfield], [rational, rational], numfield](*),
         0, 1, -1, -1]]"
     |quaternions_Hurwitz_rings| NIL)
    (|Hurwitz_ring| NONEMPTY-TYPE-EQ-DECL NIL |quaternions_Hurwitz_rings| NIL)
    (|phi_Ht| CONST-DECL "int" |quaternions_Hurwitz_isomorphism| NIL))
   NIL
   (|phi_Hurwitz_quat_zp| SUBTYPE
    "(cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].+)(quaternions_Hurwitz_isomorphism.phi_Ht(quaternions_Hurwitz_isomorphism.q, quaternions_Hurwitz_isomorphism.p), ring_zn.nZ(quaternions_Hurwitz_isomorphism.p))"
    "(cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].coset?(ring_zn.Z, ring_zn.nZ(quaternions_Hurwitz_isomorphism.p)))")))
 (|phi_Hurwitz_quat_zp_TCC2| 0
  (|phi_Hurwitz_quat_zp_TCC2-1| NIL 3935244908
   ("" (SKEEP) (("" (REWRITE "zn_identity") NIL NIL)) NIL)
   ((|zn_identity| FORMULA-DECL NIL |ring_zn_extra| |algebra_examples|)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|quat| TYPE-EQ-DECL NIL |quaternions_def| |algebra|)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|Hurwitz_ring| CONST-DECL "set[quat[rational,
         restrict[[numfield, numfield], [rational, rational], numfield](+),
         restrict[[numfield, numfield], [rational, rational], numfield](*),
         0, 1, -1, -1]]"
     |quaternions_Hurwitz_rings| NIL)
    (|Hurwitz_ring| NONEMPTY-TYPE-EQ-DECL NIL |quaternions_Hurwitz_rings| NIL)
    (|phi_Hx| CONST-DECL "int" |quaternions_Hurwitz_isomorphism| NIL))
   NIL
   (|phi_Hurwitz_quat_zp| SUBTYPE
    "(cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].+)(quaternions_Hurwitz_isomorphism.phi_Hx(quaternions_Hurwitz_isomorphism.q, quaternions_Hurwitz_isomorphism.p), ring_zn.nZ(quaternions_Hurwitz_isomorphism.p))"
    "(cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].coset?(ring_zn.Z, ring_zn.nZ(quaternions_Hurwitz_isomorphism.p)))")))
 (|phi_Hurwitz_quat_zp_TCC3| 0
  (|phi_Hurwitz_quat_zp_TCC3-1| NIL 3935244908
   ("" (SKEEP) (("" (REWRITE "zn_identity") NIL NIL)) NIL)
   ((|zn_identity| FORMULA-DECL NIL |ring_zn_extra| |algebra_examples|)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|quat| TYPE-EQ-DECL NIL |quaternions_def| |algebra|)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|Hurwitz_ring| CONST-DECL "set[quat[rational,
         restrict[[numfield, numfield], [rational, rational], numfield](+),
         restrict[[numfield, numfield], [rational, rational], numfield](*),
         0, 1, -1, -1]]"
     |quaternions_Hurwitz_rings| NIL)
    (|Hurwitz_ring| NONEMPTY-TYPE-EQ-DECL NIL |quaternions_Hurwitz_rings| NIL)
    (|phi_Hy| CONST-DECL "int" |quaternions_Hurwitz_isomorphism| NIL))
   NIL
   (|phi_Hurwitz_quat_zp| SUBTYPE
    "(cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].+)(quaternions_Hurwitz_isomorphism.phi_Hy(quaternions_Hurwitz_isomorphism.q, quaternions_Hurwitz_isomorphism.p), ring_zn.nZ(quaternions_Hurwitz_isomorphism.p))"
    "(cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].coset?(ring_zn.Z, ring_zn.nZ(quaternions_Hurwitz_isomorphism.p)))")))
 (|phi_Hurwitz_quat_zp_TCC4| 0
  (|phi_Hurwitz_quat_zp_TCC4-1| NIL 3935244908
   ("" (SKEEP) (("" (REWRITE "zn_identity") NIL NIL)) NIL)
   ((|zn_identity| FORMULA-DECL NIL |ring_zn_extra| |algebra_examples|)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|quat| TYPE-EQ-DECL NIL |quaternions_def| |algebra|)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|Hurwitz_ring| CONST-DECL "set[quat[rational,
         restrict[[numfield, numfield], [rational, rational], numfield](+),
         restrict[[numfield, numfield], [rational, rational], numfield](*),
         0, 1, -1, -1]]"
     |quaternions_Hurwitz_rings| NIL)
    (|Hurwitz_ring| NONEMPTY-TYPE-EQ-DECL NIL |quaternions_Hurwitz_rings| NIL)
    (|phi_Hz| CONST-DECL "int" |quaternions_Hurwitz_isomorphism| NIL))
   NIL
   (|phi_Hurwitz_quat_zp| SUBTYPE
    "(cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].+)(quaternions_Hurwitz_isomorphism.phi_Hz(quaternions_Hurwitz_isomorphism.q, quaternions_Hurwitz_isomorphism.p), ring_zn.nZ(quaternions_Hurwitz_isomorphism.p))"
    "(cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].coset?(ring_zn.Z, ring_zn.nZ(quaternions_Hurwitz_isomorphism.p)))")))
 (|isomorphism_quot_Hurwitz_zp_aux_TCC1| 0
  (|isomorphism_quot_Hurwitz_zp_aux_TCC1-1| NIL 3935060471
   ("" (SKEEP)
    (("" (SKEEP) (("" (EXPAND "fullset") (("" (PROPAX) NIL NIL)) NIL)) NIL))
    NIL)
   ((|fullset| CONST-DECL "set" |sets| NIL)) NIL
   (|isomorphism_quot_Hurwitz_zp_aux| SUBTYPE
    "quaternions_Hurwitz_isomorphism.phi_Hurwitz_quat_zp(quaternions_Hurwitz_isomorphism.p)"
    "[(quaternions_Hurwitz_rings.Hurwitz_ring) -> (sets[quat_coset_Zp(quaternions_Hurwitz_isomorphism.p)].fullset)]")))
 (|isomorphism_quot_Hurwitz_zp_aux_TCC2| 0
  (|isomorphism_quot_Hurwitz_zp_aux_TCC9-1| NIL 3935060471
   ("" (SKEEP)
    (("" (INST 2 "0 +nZ(p)")
      (("" (REWRITE "lcoset_iff_coset" :DIR RL)
        (("" (EXPAND "left_coset?")
          (("" (INST 1 "0")
            (("" (EXPAND "Z")
              (("" (EXPAND "fullset") (("" (PROPAX) NIL NIL)) NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (+ CONST-DECL "set[T]" |cosets_def| |algebra|)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (|nZ| CONST-DECL "set[int]" |ring_zn| |algebra_examples|)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (Z CONST-DECL
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     |ring_zn| |algebra_examples|)
    (|ring| NONEMPTY-TYPE-EQ-DECL NIL |ring| |algebra|)
    (|ring?| CONST-DECL "bool" |ring_def| |algebra|)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|coset?| CONST-DECL "bool" |cosets_def| |algebra|)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|p| SKOLEM-CONST-DECL "(prime?)" |quaternions_Hurwitz_isomorphism| NIL)
    (|left_coset?| CONST-DECL "bool" |cosets_def| |algebra|)
    (|fullset| CONST-DECL "set" |sets| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|lcoset_iff_coset| FORMULA-DECL NIL |ring_cosets_lemmas| |algebra|))
   NIL
   (|isomorphism_quot_Hurwitz_zp_aux| EXISTENCE ""
    "(cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].coset?(ring_zn.Z, ring_zn.nZ(quaternions_Hurwitz_isomorphism.p)))")))
 (|isomorphism_quot_Hurwitz_zp_aux_TCC3| 0
  (|isomorphism_quot_Hurwitz_zp_aux_TCC10-1| NIL 3935060471
   ("" (SKEEP) (("" (SKEEP) (("" (REWRITE "zn_add_pair") NIL NIL)) NIL)) NIL)
   ((|coset| TYPE-EQ-DECL NIL |cosets_def| |algebra|)
    (|nZ| CONST-DECL "set[int]" |ring_zn| |algebra_examples|)
    (Z CONST-DECL
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     |ring_zn| |algebra_examples|)
    (|ring| NONEMPTY-TYPE-EQ-DECL NIL |ring| |algebra|)
    (|ring?| CONST-DECL "bool" |ring_def| |algebra|)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|coset?| CONST-DECL "bool" |cosets_def| |algebra|)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|zn_add_pair| FORMULA-DECL NIL |ring_zn_extra| |algebra_examples|))
   NIL
   (|isomorphism_quot_Hurwitz_zp_aux| SUBTYPE
    "cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].add(ring_zn.Z, ring_zn.nZ(quaternions_Hurwitz_isomorphism.p))"
    "[[(cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].coset?(ring_zn.Z, ring_zn.nZ(quaternions_Hurwitz_isomorphism.p))), (cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].coset?(ring_zn.Z, ring_zn.nZ(quaternions_Hurwitz_isomorphism.p)))] -> (cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].coset?(ring_zn.Z, ring_zn.nZ(quaternions_Hurwitz_isomorphism.p)))]")))
 (|isomorphism_quot_Hurwitz_zp_aux_TCC4| 0
  (|isomorphism_quot_Hurwitz_zp_aux_TCC11-1| NIL 3935060471
   ("" (SKEEP) (("" (SKEEP) (("" (REWRITE "zn_product_pair") NIL NIL)) NIL))
    NIL)
   ((|coset| TYPE-EQ-DECL NIL |cosets_def| |algebra|)
    (|nZ| CONST-DECL "set[int]" |ring_zn| |algebra_examples|)
    (Z CONST-DECL
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     |ring_zn| |algebra_examples|)
    (|ring| NONEMPTY-TYPE-EQ-DECL NIL |ring| |algebra|)
    (|ring?| CONST-DECL "bool" |ring_def| |algebra|)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|coset?| CONST-DECL "bool" |cosets_def| |algebra|)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|zn_product_pair| FORMULA-DECL NIL |ring_zn_extra| |algebra_examples|))
   NIL
   (|isomorphism_quot_Hurwitz_zp_aux| SUBTYPE
    "product_coset_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.*)].product(ring_zn.Z, ring_zn.nZ(quaternions_Hurwitz_isomorphism.p))"
    "[[(cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].coset?(ring_zn.Z, ring_zn.nZ(quaternions_Hurwitz_isomorphism.p))), (cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].coset?(ring_zn.Z, ring_zn.nZ(quaternions_Hurwitz_isomorphism.p)))] -> (cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].coset?(ring_zn.Z, ring_zn.nZ(quaternions_Hurwitz_isomorphism.p)))]")))
 (|isomorphism_quot_Hurwitz_zp_aux_TCC5| 0
  (|isomorphism_quot_Hurwitz_zp_aux_TCC12-1| NIL 3935060471
   ("" (SKEEP)
    (("" (REWRITE "lcoset_iff_coset" :DIR RL)
      (("" (EXPAND "left_coset?")
        (("" (INST 2 "0")
          (("1" (REWRITE "left_zero") NIL NIL)
           ("2" (EXPAND "Z")
            (("2" (EXPAND "fullset") (("2" (PROPAX) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|lcoset_iff_coset| FORMULA-DECL NIL |ring_cosets_lemmas| |algebra|)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL) (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nZ| CONST-DECL "set[int]" |ring_zn| |algebra_examples|)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (|ring?| CONST-DECL "bool" |ring_def| |algebra|)
    (|ring| NONEMPTY-TYPE-EQ-DECL NIL |ring| |algebra|)
    (Z CONST-DECL
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     |ring_zn| |algebra_examples|)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|left_zero| FORMULA-DECL NIL |ring_cosets_lemmas| |algebra|)
    (|fullset| CONST-DECL "set" |sets| NIL)
    (|left_coset?| CONST-DECL "bool" |cosets_def| |algebra|))
   NIL
   (|isomorphism_quot_Hurwitz_zp_aux| SUBTYPE
    "ring_zn.nZ(quaternions_Hurwitz_isomorphism.p)"
    "(cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].coset?(ring_zn.Z, ring_zn.nZ(quaternions_Hurwitz_isomorphism.p)))")))
 (|isomorphism_quot_Hurwitz_zp_aux_TCC6| 0
  (|isomorphism_quot_Hurwitz_zp_aux_TCC13-1| NIL 3935060471
   ("" (SKEEP) (("" (REWRITE "zn_identity") NIL NIL)) NIL)
   ((|zn_identity| FORMULA-DECL NIL |ring_zn_extra| |algebra_examples|)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|))
   NIL
   (|isomorphism_quot_Hurwitz_zp_aux| SUBTYPE
    "((cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].+)(1, ring_zn.nZ(quaternions_Hurwitz_isomorphism.p)))"
    "(cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].coset?(ring_zn.Z, ring_zn.nZ(quaternions_Hurwitz_isomorphism.p)))")))
 (|isomorphism_quot_Hurwitz_zp_aux_TCC7| 0
  (|isomorphism_quot_Hurwitz_zp_aux_TCC14-1| NIL 3935060471
   ("" (SKEEP) (("" (REWRITE "zn_identity") NIL NIL)) NIL)
   ((- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|zn_identity| FORMULA-DECL NIL |ring_zn_extra| |algebra_examples|)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL))
   NIL
   (|isomorphism_quot_Hurwitz_zp_aux| SUBTYPE
    "((cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].+)((number_fields.-)(quaternions_Hurwitz_isomorphism.p, 1), ring_zn.nZ(quaternions_Hurwitz_isomorphism.p)))"
    "(cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].coset?(ring_zn.Z, ring_zn.nZ(quaternions_Hurwitz_isomorphism.p)))")))
 (|isomorphism_quot_Hurwitz_zp_aux_TCC8| 0
  (|isomorphism_quot_Hurwitz_zp_aux_TCC15-1| NIL 3935060471
   ("" (SKEEP) (("" (REWRITE "zn_add_group") NIL NIL)) NIL)
   ((|zn_add_group| FORMULA-DECL NIL |ring_zn_extra| |algebra_examples|)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|))
   NIL
   (|isomorphism_quot_Hurwitz_zp_aux| ASSUMING
    "algebra@quaternions_def[(cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].coset?(ring_zn.Z, ring_zn.nZ(quaternions_Hurwitz_isomorphism.p))), cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].add(ring_zn.Z, ring_zn.nZ(quaternions_Hurwitz_isomorphism.p)), product_coset_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.*)].product(ring_zn.Z, ring_zn.nZ(quaternions_Hurwitz_isomorphism.p)), ring_zn.nZ(quaternions_Hurwitz_isomorphism.p), ((cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].+)(1, ring_zn.nZ(quaternions_Hurwitz_isomorphism.p))), ((cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].+)((number_fields.-)(quaternions_Hurwitz_isomorphism.p, 1), ring_zn.nZ(quaternions_Hurwitz_isomorphism.p))), ((cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].+)((number_fields.-)(quaternions_Hurwitz_isomorphism.p, 1), ring_zn.nZ(quaternions_Hurwitz_isomorphism.p)))].quaternions_def"
    "fullset_is_group: ASSUMPTION group_def[quaternions_def.T, quaternions_def.+, quaternions_def.zero].group?(sets[quaternions_def.T].fullset)")))
 (|isomorphism_quot_Hurwitz_zp_aux| 0
  (|isomorphism_quot_Hurwitz_zp_aux-1| NIL 3935061070
   (""
    (STOP-REWRITE "right_identity" "left_identity" "one_left" "one_right"
     "zero_plus" "plus_zero")
    (("" (SKEEP)
      (("" (EXPAND "R_epimorphism?")
        (("" (CASE "rem(p)(expt(2, p-1)) = 1")
          (("1" (SPLIT)
            (("1" (EXPAND "surjective?")
              (("1" (SKEEP)
                (("1" (TYPEPRED "y`x")
                  (("1" (TYPEPRED "y`y")
                    (("1" (TYPEPRED "y`z")
                      (("1" (TYPEPRED "y`t")
                        (("1" (EXPAND "coset?")
                          (("1" (FLATTEN)
                            (("1" (HIDE -2 -4 -6 -8)
                              (("1" (EXPAND "left_coset?")
                                (("1" (SKEEP)
                                  (("1" (SKEEP)
                                    (("1" (SKEEP)
                                      (("1" (SKEEP)
                                        (("1"
                                          (INST 1
                                           "mk_Hurwitz(2*a!3, a!2-a!3, a!1-a!3, a-a!3)")
                                          (("1" (EXPAND "phi_Hurwitz_quat_zp")
                                            (("1" (EXPAND "phi_Ht")
                                              (("1" (EXPAND "phi_Hz")
                                                (("1" (EXPAND "phi_Hy")
                                                  (("1" (EXPAND "phi_Hx")
                                                    (("1"
                                                      (LEMMA
                                                       "real_props.div_cancel1")
                                                      (("1" (INST -1 "2" "a!3")
                                                        (("1" (REPLACES -1)
                                                          (("1"
                                                            (DECOMPOSE-EQUALITY
                                                             1)
                                                            (("1" (REPLACES -)
                                                              (("1"
                                                                (REWRITE
                                                                 "equal_cosets_rem")
                                                                (("1"
                                                                  (HIDE-ALL-BUT
                                                                   (-4 1))
                                                                  (("1"
                                                                    (REWRITE
                                                                     "rem_sum_elim2")
                                                                    (("1"
                                                                      (REWRITE
                                                                       "rem_diff1"
                                                                       :DIR RL)
                                                                      (("1"
                                                                        (REWRITE
                                                                         "rem_prod1"
                                                                         :DIR
                                                                         RL)
                                                                        (("1"
                                                                          (REPLACES
                                                                           -1)
                                                                          (("1"
                                                                            (REWRITE
                                                                             "rem_diff1")
                                                                            NIL
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL)
                                                             ("2" (REPLACES -)
                                                              (("2"
                                                                (REWRITE
                                                                 "equal_cosets_rem")
                                                                (("2"
                                                                  (HIDE-ALL-BUT
                                                                   (-4 1))
                                                                  (("2"
                                                                    (REWRITE
                                                                     "rem_prod1"
                                                                     :DIR RL)
                                                                    (("2"
                                                                      (REPLACES
                                                                       -1)
                                                                      (("2"
                                                                        (ASSERT)
                                                                        NIL
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL)
                                                             ("3" (REPLACES -)
                                                              (("3"
                                                                (REWRITE
                                                                 "equal_cosets_rem")
                                                                (("3"
                                                                  (HIDE-ALL-BUT
                                                                   (-4 1))
                                                                  (("3"
                                                                    (REWRITE
                                                                     "rem_sum_elim2")
                                                                    (("3"
                                                                      (REWRITE
                                                                       "rem_diff1"
                                                                       :DIR RL)
                                                                      (("3"
                                                                        (REWRITE
                                                                         "rem_prod1"
                                                                         :DIR
                                                                         RL)
                                                                        (("3"
                                                                          (REPLACES
                                                                           -1)
                                                                          (("3"
                                                                            (REWRITE
                                                                             "rem_diff1")
                                                                            NIL
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL)
                                                             ("4" (REPLACES -)
                                                              (("4"
                                                                (REWRITE
                                                                 "equal_cosets_rem")
                                                                (("4"
                                                                  (HIDE-ALL-BUT
                                                                   (-4 1))
                                                                  (("4"
                                                                    (REWRITE
                                                                     "rem_sum_elim2")
                                                                    (("4"
                                                                      (REWRITE
                                                                       "rem_diff1"
                                                                       :DIR RL)
                                                                      (("4"
                                                                        (REWRITE
                                                                         "rem_prod1"
                                                                         :DIR
                                                                         RL)
                                                                        (("4"
                                                                          (REPLACES
                                                                           -1)
                                                                          (("4"
                                                                            (REWRITE
                                                                             "rem_diff1")
                                                                            NIL
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (EXPAND "R_homomorphism?")
              (("2" (SPLIT)
                (("1" (LEMMA "Hurwitz_sum_closed") (("1" (PROPAX) NIL NIL))
                  NIL)
                 ("2" (EXPAND "star_closed?")
                  (("2" (SKEEP)
                    (("2" (EXPAND "member") (("2" (PROPAX) NIL NIL)) NIL))
                    NIL))
                  NIL)
                 ("3" (LEMMA "Hurwitz_prod_closed")
                  (("3" (EXPAND "star_closed?")
                    (("3" (SKEEP)
                      (("3" (EXPAND "member")
                        (("3" (EXPAND "fullset") (("3" (PROPAX) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("4" (EXPAND "star_closed?")
                  (("4" (SKEEP)
                    (("4" (EXPAND "member")
                      (("4" (EXPAND "fullset") (("4" (PROPAX) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("5" (EXPAND "homomorphism?")
                  (("5" (SKEEP)
                    (("5" (EXPAND "phi_Hurwitz_quat_zp")
                      (("5" (EXPAND "quaternions_def.+")
                        (("5" (REWRITE "add_charac")
                          (("1" (REWRITE "add_charac")
                            (("1" (REWRITE "add_charac")
                              (("1" (REWRITE "add_charac")
                                (("1" (EXPAND "phi_Ht")
                                  (("1" (EXPAND "phi_Hz")
                                    (("1" (EXPAND "phi_Hy")
                                      (("1" (EXPAND "phi_Hx")
                                        (("1" (PROPAX) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (EXPAND "Z")
                                  (("2" (EXPAND "fullset")
                                    (("2" (PROPAX) NIL NIL)) NIL))
                                  NIL)
                                 ("3" (EXPAND "Z")
                                  (("3" (EXPAND "fullset")
                                    (("3" (PROPAX) NIL NIL)) NIL))
                                  NIL)
                                 ("4" (REWRITE "nZ_ideal") NIL NIL))
                                NIL)
                               ("2" (EXPAND "Z")
                                (("2" (EXPAND "fullset")
                                  (("2" (PROPAX) NIL NIL)) NIL))
                                NIL)
                               ("3" (EXPAND "Z")
                                (("3" (EXPAND "fullset")
                                  (("3" (PROPAX) NIL NIL)) NIL))
                                NIL)
                               ("4" (REWRITE "nZ_ideal") NIL NIL))
                              NIL)
                             ("2" (EXPAND "Z")
                              (("2" (EXPAND "fullset") (("2" (PROPAX) NIL NIL))
                                NIL))
                              NIL)
                             ("3" (EXPAND "Z")
                              (("3" (EXPAND "fullset") (("3" (PROPAX) NIL NIL))
                                NIL))
                              NIL)
                             ("4" (REWRITE "nZ_ideal") NIL NIL))
                            NIL)
                           ("2" (EXPAND "Z")
                            (("2" (EXPAND "fullset") (("2" (PROPAX) NIL NIL))
                              NIL))
                            NIL)
                           ("3" (EXPAND "Z")
                            (("3" (EXPAND "fullset") (("3" (PROPAX) NIL NIL))
                              NIL))
                            NIL)
                           ("4" (REWRITE "nZ_ideal") NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("6" (EXPAND "homomorphism?")
                  (("6" (SKEEP)
                    (("6" (EXPAND "phi_Hurwitz_quat_zp")
                      (("6" (LEMMA "quat_Zp_prod_charac")
                        (("6"
                          (INST -1 "p" "phi_Hx(a, p)" "phi_Hy(a, p)"
                           "phi_Hz(a, p)" "phi_Ht(a, p)" "phi_Hx(b, p)"
                           "phi_Hy(b, p)" "phi_Hz(b, p)" "phi_Ht(b, p)")
                          (("6" (REPLACES -1)
                            (("6" (REWRITE "isomorphism_quot_Hurwitz_zp_prod")
                              NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (HIDE 3)
            (("2" (LEMMA "fermats_little_theorem3")
              (("2" (INST -1 "2" "p")
                (("2" (SPLIT)
                  (("1" (EXPAND "^")
                    (("1" (LIFT-IF)
                      (("1" (PROP)
                        (("1" (REWRITE "modulo_arithmetic.rem_one")
                          (("1" (EXPAND "/=")
                            (("1" (TYPEPRED "p")
                              (("1" (EXPAND "prime?") (("1" (PROPAX) NIL NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (TYPEPRED "p")
                          (("2" (EXPAND "prime?")
                            (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (LEMMA "divisor_smaller")
                    (("2" (INST -1 "p" "2")
                      (("2" (SPLIT)
                        (("1" (ASSERT) NIL NIL)
                         ("2" (TYPEPRED "p")
                          (("2" (EXPAND "prime?")
                            (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL))
                            NIL))
                          NIL)
                         ("3" (PROPAX) NIL NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("3" (TYPEPRED "p")
            (("3" (EXPAND "prime?")
              (("3" (FLATTEN) (("3" (ASSERT) NIL NIL)) NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|posnat_expt| APPLICATION-JUDGEMENT "posnat" |exponentiation| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|mod| NONEMPTY-TYPE-EQ-DECL NIL |euclidean_division| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|rem| CONST-DECL "{r: mod(b) | EXISTS q: x = b * q + r}"
     |modulo_arithmetic| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (|expt| DEF-DECL "real" |exponentiation| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|R_homomorphism?| CONST-DECL "bool" |ring_homomorphisms_def| |algebra|)
    (|isomorphism_quot_Hurwitz_zp_prod| FORMULA-DECL NIL
     |quaternions_Hurwitz_isomorphism| NIL)
    (|quat_Zp_prod_charac| FORMULA-DECL NIL |quaternions_zp| NIL)
    (|homomorphism?| CONST-DECL "bool" |homomorphisms_def| |algebra|)
    (|add_charac| FORMULA-DECL NIL |quotient_rings| |algebra|)
    (|ideal?| CONST-DECL "bool" |ring_ideal_def| |algebra|)
    (|ideal| TYPE-EQ-DECL NIL |ring_ideal_def| |algebra|)
    (|Hurwitz_ring| NONEMPTY-TYPE-EQ-DECL NIL |quaternions_Hurwitz_rings| NIL)
    (|nZ_ideal| FORMULA-DECL NIL |ring_zn| |algebra_examples|)
    (+ CONST-DECL "quat" |quaternions_def| |algebra|)
    (|Hurwitz_prod_closed| FORMULA-DECL NIL |quaternions_Hurwitz_rings| NIL)
    (|star_closed?| CONST-DECL "bool" |groupoid_def| |algebra|)
    (|hurwitz_prod| APPLICATION-JUDGEMENT "Hurwitz_ring"
     |quaternions_Hurwitz_rings| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|Hurwitz_sum_closed| FORMULA-DECL NIL |quaternions_Hurwitz_rings| NIL)
    (|surjective?| CONST-DECL "bool" |functions| NIL)
    (|fullset| CONST-DECL "set" |sets| NIL)
    (|quat_coset_Zp| TYPE-EQ-DECL NIL |quaternions_zp| NIL)
    (|nZ| CONST-DECL "set[int]" |ring_zn| |algebra_examples|)
    (Z CONST-DECL
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     |ring_zn| |algebra_examples|)
    (|ring| NONEMPTY-TYPE-EQ-DECL NIL |ring| |algebra|)
    (|ring?| CONST-DECL "bool" |ring_def| |algebra|)
    (|coset?| CONST-DECL "bool" |cosets_def| |algebra|)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|rat_plus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|quat| TYPE-EQ-DECL NIL |quaternions_def| |algebra|)
    (|Hurwitz_ring| CONST-DECL "set[quat[rational,
         restrict[[numfield, numfield], [rational, rational], numfield](+),
         restrict[[numfield, numfield], [rational, rational], numfield](*),
         0, 1, -1, -1]]"
     |quaternions_Hurwitz_rings| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|rat_minus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|phi_Ht| CONST-DECL "int" |quaternions_Hurwitz_isomorphism| NIL)
    (|phi_Hy| CONST-DECL "int" |quaternions_Hurwitz_isomorphism| NIL)
    (|div_cancel1| FORMULA-DECL NIL |real_props| NIL)
    (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|rem_diff1| FORMULA-DECL NIL |modulo_arithmetic| NIL)
    (|one_times| FORMULA-DECL NIL |ring_with_one| |algebra|)
    (|rem_prod1| FORMULA-DECL NIL |modulo_arithmetic| NIL)
    (|rem_sum_elim2| FORMULA-DECL NIL |modulo_arithmetic| NIL)
    (|equal_cosets_rem| FORMULA-DECL NIL |ring_zn_extra| |algebra_examples|)
    (|negate_nz_T_is_nz_T| APPLICATION-JUDGEMENT "nz_T[rational,
     restrict[[numfield, numfield], [rational, rational], numfield](+),
     restrict[[numfield, numfield], [rational, rational], numfield](*), 0]"
     |quaternions_Hurwitz_rings| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|p| SKOLEM-CONST-DECL "(prime?)" |quaternions_Hurwitz_isomorphism| NIL)
    (+ CONST-DECL "set[T]" |cosets_def| |algebra|)
    (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|phi_Hx| CONST-DECL "int" |quaternions_Hurwitz_isomorphism| NIL)
    (|phi_Hz| CONST-DECL "int" |quaternions_Hurwitz_isomorphism| NIL)
    (|phi_Hurwitz_quat_zp| CONST-DECL "quat_coset_Zp(p)"
     |quaternions_Hurwitz_isomorphism| NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|left_coset?| CONST-DECL "bool" |cosets_def| |algebra|)
    (|fermats_little_theorem3| FORMULA-DECL NIL |fermats_little_theorem|
     |numbers|)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|rem_one| FORMULA-DECL NIL |modulo_arithmetic| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|divisor_smaller| FORMULA-DECL NIL |divides| NIL)
    (|R_epimorphism?| CONST-DECL "bool" |ring_homomorphisms_def| |algebra|))
   SHOSTAK))
 (|isomorphism_quot_Hurwitz_zp_aux2_TCC1| 0
  (|isomorphism_quot_Hurwitz_zp_aux2_TCC1-1| NIL 3935060471
   ("" (SKEEP)
    (("" (SPLIT)
      (("1" (SKEEP) (("1" (EXPAND "fullset") (("1" (PROPAX) NIL NIL)) NIL))
        NIL)
       ("2" (LEMMA "isomorphism_quot_Hurwitz_zp_aux")
        (("2" (INST -1 "p")
          (("2" (PROP)
            (("2" (EXPAND "R_epimorphism?") (("2" (FLATTEN) NIL NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|fullset| CONST-DECL "set" |sets| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (|R_epimorphism?| CONST-DECL "bool" |ring_homomorphisms_def| |algebra|)
    (|isomorphism_quot_Hurwitz_zp_aux| FORMULA-DECL NIL
     |quaternions_Hurwitz_isomorphism| NIL))
   NIL
   (|isomorphism_quot_Hurwitz_zp_aux2| SUBTYPE
    "quaternions_Hurwitz_isomorphism.phi_Hurwitz_quat_zp(quaternions_Hurwitz_isomorphism.p)"
    "R_homomorphism[quat[rational, restrict[[numfield, numfield], [rational, rational], numfield](+), restrict[[numfield, numfield], [rational, rational], numfield](*), 0, 1, -1, -1], quaternions_def[rational, restrict[[numfield, numfield], [rational, rational], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [rational, rational], numfield].restrict(number_fields.*), 0, 1, -1, -1].+, quaternions_def[rational, restrict[[numfield, numfield], [rational, rational], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [rational, rational], numfield].restrict(number_fields.*), 0, 1, -1, -1].*, quaternions_def[rational, restrict[[numfield, numfield], [rational, rational], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [rational, rational], numfield].restrict(number_fields.*), 0, 1, -1, -1].zero_q, quat_coset_Zp(quaternions_Hurwitz_isomorphism.p), algebra@quaternions_def[(cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].coset?(ring_zn.Z, ring_zn.nZ(quaternions_Hurwitz_isomorphism.p))), cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].add(ring_zn.Z, ring_zn.nZ(quaternions_Hurwitz_isomorphism.p)), product_coset_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.*)].product(ring_zn.Z, ring_zn.nZ(quaternions_Hurwitz_isomorphism.p)), ring_zn.nZ(quaternions_Hurwitz_isomorphism.p), ((cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].+)(1, ring_zn.nZ(quaternions_Hurwitz_isomorphism.p))), ((cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].+)((number_fields.-)(quaternions_Hurwitz_isomorphism.p, 1), ring_zn.nZ(quaternions_Hurwitz_isomorphism.p))), ((cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].+)((number_fields.-)(quaternions_Hurwitz_isomorphism.p, 1), ring_zn.nZ(quaternions_Hurwitz_isomorphism.p)))].+, algebra@quaternions_def[(cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].coset?(ring_zn.Z, ring_zn.nZ(quaternions_Hurwitz_isomorphism.p))), cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].add(ring_zn.Z, ring_zn.nZ(quaternions_Hurwitz_isomorphism.p)), product_coset_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.*)].product(ring_zn.Z, ring_zn.nZ(quaternions_Hurwitz_isomorphism.p)), ring_zn.nZ(quaternions_Hurwitz_isomorphism.p), ((cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].+)(1, ring_zn.nZ(quaternions_Hurwitz_isomorphism.p))), ((cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].+)((number_fields.-)(quaternions_Hurwitz_isomorphism.p, 1), ring_zn.nZ(quaternions_Hurwitz_isomorphism.p))), ((cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].+)((number_fields.-)(quaternions_Hurwitz_isomorphism.p, 1), ring_zn.nZ(quaternions_Hurwitz_isomorphism.p)))].*, algebra@quaternions_def[(cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].coset?(ring_zn.Z, ring_zn.nZ(quaternions_Hurwitz_isomorphism.p))), cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].add(ring_zn.Z, ring_zn.nZ(quaternions_Hurwitz_isomorphism.p)), product_coset_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.*)].product(ring_zn.Z, ring_zn.nZ(quaternions_Hurwitz_isomorphism.p)), ring_zn.nZ(quaternions_Hurwitz_isomorphism.p), ((cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].+)(1, ring_zn.nZ(quaternions_Hurwitz_isomorphism.p))), ((cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].+)((number_fields.-)(quaternions_Hurwitz_isomorphism.p, 1), ring_zn.nZ(quaternions_Hurwitz_isomorphism.p))), ((cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].+)((number_fields.-)(quaternions_Hurwitz_isomorphism.p, 1), ring_zn.nZ(quaternions_Hurwitz_isomorphism.p)))].zero_q](quaternions_Hurwitz_rings.Hurwitz_ring, sets[quat_coset_Zp(quaternions_Hurwitz_isomorphism.p)].fullset)")))
 (|isomorphism_quot_Hurwitz_zp_aux2| 0
  (|isomorphism_quot_Hurwitz_zp_aux2-1| NIL 3935061276
   (""
    (STOP-REWRITE "right_identity" "left_identity" "one_left" "one_right"
     "zero_plus" "plus_zero")
    (("" (SKEEP)
      (("" (EXPAND "R_kernel")
        (("" (DECOMPOSE-EQUALITY)
          (("1" (EXPAND "phi_Hurwitz_quat_zp")
            (("1" (EXPAND "zero_q")
              (("1" (EXPAND "fullset")
                (("1" (IFF)
                  (("1" (SPLIT)
                    (("1" (FLATTEN)
                      (("1" (NAME-REPLACE "xhu" "phi_Hx(x!1, p) + nZ(p)")
                        (("1" (NAME-REPLACE "yhu" "phi_Hy(x!1, p) + nZ(p)")
                          (("1" (NAME-REPLACE "zhu" "phi_Hz(x!1, p) + nZ(p)")
                            (("1" (NAME-REPLACE "thu" "phi_Ht(x!1, p) + nZ(p)")
                              (("1" (CASE-REPLACE "nZ(p) = 0+nZ(p)")
                                (("1" (EXPAND "xhu")
                                  (("1" (EXPAND "yhu")
                                    (("1" (EXPAND "zhu")
                                      (("1" (EXPAND "thu")
                                        (("1" (REWRITE " equal_cosets_rem")
                                          (("1" (REWRITE " equal_cosets_rem")
                                            (("1" (REWRITE " equal_cosets_rem")
                                              (("1"
                                                (REWRITE " equal_cosets_rem")
                                                (("1"
                                                  (EXPAND "prime_mult_Hurwitz")
                                                  (("1" (EXPAND "extend")
                                                    (("1" (PROP)
                                                      (("1" (HIDE -1 -2)
                                                        (("1"
                                                          (EXPAND
                                                           "Hurwitz_ring")
                                                          (("1" (SKEEP)
                                                            (("1"
                                                              (CASE
                                                                  "x!1 = (# x := x / 2,
                      y := x / 2 + y,
                      z := x / 2 + z,
                      t := x / 2 + t #)")
                                                              (("1"
                                                                (REPLACE -1
                                                                         (-6 -7
                                                                          -8
                                                                          -9))
                                                                (("1"
                                                                  (REWRITE
                                                                   "phi_Hx_charac")
                                                                  (("1"
                                                                    (REWRITE
                                                                     "phi_Hy_charac")
                                                                    (("1"
                                                                      (REWRITE
                                                                       "phi_Hz_charac")
                                                                      (("1"
                                                                        (REWRITE
                                                                         "phi_Ht_charac")
                                                                        (("1"
                                                                          (REWRITE
                                                                           "modulo_arithmetic.rem_zero")
                                                                          (("1"
                                                                            (REWRITE
                                                                             "rem_sum1"
                                                                             :DIR
                                                                             RL)
                                                                            (("1"
                                                                              (REPLACE
                                                                               -6
                                                                               -7)
                                                                              (("1"
                                                                                (SIMPLIFY)
                                                                                (("1"
                                                                                  (REWRITE
                                                                                   "rem_sum1"
                                                                                   :DIR
                                                                                   RL)
                                                                                  (("1"
                                                                                    (REPLACE
                                                                                     -6
                                                                                     -8)
                                                                                    (("1"
                                                                                      (SIMPLIFY)
                                                                                      (("1"
                                                                                        (REWRITE
                                                                                         "rem_sum1"
                                                                                         :DIR
                                                                                         RL)
                                                                                        (("1"
                                                                                          (REPLACE
                                                                                           -6
                                                                                           -9)
                                                                                          (("1"
                                                                                            (SIMPLIFY)
                                                                                            (("1"
                                                                                              (CASE
                                                                                                  "divides(p, x)")
                                                                                              (("1"
                                                                                                (HIDE
                                                                                                 -7)
                                                                                                (("1"
                                                                                                  (REWRITE
                                                                                                   "rem_def2")
                                                                                                  (("1"
                                                                                                    (REWRITE
                                                                                                     "rem_def2")
                                                                                                    (("1"
                                                                                                      (REWRITE
                                                                                                       "rem_def2")
                                                                                                      (("1"
                                                                                                        (EXPAND
                                                                                                         "divides")
                                                                                                        (("1"
                                                                                                          (SKEEP)
                                                                                                          (("1"
                                                                                                            (SKEEP)
                                                                                                            (("1"
                                                                                                              (SKEEP)
                                                                                                              (("1"
                                                                                                                (SKEEP)
                                                                                                                (("1"
                                                                                                                  (INST
                                                                                                                   1
                                                                                                                   "x_1"
                                                                                                                   "x!2"
                                                                                                                   "x!3"
                                                                                                                   "x!4")
                                                                                                                  (("1"
                                                                                                                    (REPLACES
                                                                                                                     -)
                                                                                                                    NIL
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL)
                                                                                               ("2"
                                                                                                (HIDE-ALL-BUT
                                                                                                 (-6
                                                                                                  1
                                                                                                  3))
                                                                                                (("2"
                                                                                                  (REWRITE
                                                                                                   "rem_def2")
                                                                                                  (("1"
                                                                                                    (LEMMA
                                                                                                     "prime_divides_prod")
                                                                                                    (("1"
                                                                                                      (INST
                                                                                                       -1
                                                                                                       "p")
                                                                                                      (("1"
                                                                                                        (TYPEPRED
                                                                                                         "p")
                                                                                                        (("1"
                                                                                                          (SPLIT)
                                                                                                          (("1"
                                                                                                            (INST?)
                                                                                                            (("1"
                                                                                                              (SPLIT)
                                                                                                              (("1"
                                                                                                                (CASE
                                                                                                                    "FORALL(n: posnat): NOT divides(p, 2) => NOT divides(p, expt(2, n))")
                                                                                                                (("1"
                                                                                                                  (INST?)
                                                                                                                  (("1"
                                                                                                                    (CASE
                                                                                                                        "NOT divides(p, 2)")
                                                                                                                    (("1"
                                                                                                                      (PROP)
                                                                                                                      NIL
                                                                                                                      NIL)
                                                                                                                     ("2"
                                                                                                                      (LEMMA
                                                                                                                       "divisor_smaller")
                                                                                                                      (("2"
                                                                                                                        (INST
                                                                                                                         -1
                                                                                                                         "p"
                                                                                                                         "2")
                                                                                                                        (("2"
                                                                                                                          (SPLIT)
                                                                                                                          (("1"
                                                                                                                            (ASSERT)
                                                                                                                            NIL
                                                                                                                            NIL)
                                                                                                                           ("2"
                                                                                                                            (EXPAND
                                                                                                                             "prime?")
                                                                                                                            (("2"
                                                                                                                              (FLATTEN)
                                                                                                                              (("2"
                                                                                                                                (ASSERT)
                                                                                                                                NIL
                                                                                                                                NIL))
                                                                                                                              NIL))
                                                                                                                            NIL)
                                                                                                                           ("3"
                                                                                                                            (PROPAX)
                                                                                                                            NIL
                                                                                                                            NIL))
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL)
                                                                                                                   ("2"
                                                                                                                    (TYPEPRED
                                                                                                                     "p")
                                                                                                                    (("2"
                                                                                                                      (EXPAND
                                                                                                                       "prime?")
                                                                                                                      (("2"
                                                                                                                        (FLATTEN)
                                                                                                                        (("2"
                                                                                                                          (ASSERT)
                                                                                                                          NIL
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL)
                                                                                                                 ("2"
                                                                                                                  (MEASURE-INDUCT+
                                                                                                                   "n"
                                                                                                                   "n"
                                                                                                                   1)
                                                                                                                  (("2"
                                                                                                                    (HIDE
                                                                                                                     -3
                                                                                                                     -5)
                                                                                                                    (("2"
                                                                                                                      (EXPAND
                                                                                                                       "expt"
                                                                                                                       -2)
                                                                                                                      (("2"
                                                                                                                        (LEMMA
                                                                                                                         "prime_divides_prod")
                                                                                                                        (("2"
                                                                                                                          (INST
                                                                                                                           -1
                                                                                                                           "p")
                                                                                                                          (("2"
                                                                                                                            (PROP)
                                                                                                                            (("2"
                                                                                                                              (INST
                                                                                                                               -1
                                                                                                                               "2"
                                                                                                                               "expt(2, x!2 - 1)")
                                                                                                                              (("2"
                                                                                                                                (PROP)
                                                                                                                                (("2"
                                                                                                                                  (INST
                                                                                                                                   -2
                                                                                                                                   "x!2 - 1")
                                                                                                                                  (("1"
                                                                                                                                    (PROP)
                                                                                                                                    (("1"
                                                                                                                                      (ASSERT)
                                                                                                                                      NIL
                                                                                                                                      NIL))
                                                                                                                                    NIL)
                                                                                                                                   ("2"
                                                                                                                                    (ASSERT)
                                                                                                                                    (("2"
                                                                                                                                      (TYPEPRED
                                                                                                                                       "x!2")
                                                                                                                                      (("2"
                                                                                                                                        (CASE-REPLACE
                                                                                                                                         "x!2 = 1")
                                                                                                                                        (("1"
                                                                                                                                          (SIMPLIFY
                                                                                                                                           -4)
                                                                                                                                          (("1"
                                                                                                                                            (EXPAND
                                                                                                                                             "expt")
                                                                                                                                            (("1"
                                                                                                                                              (PROPAX)
                                                                                                                                              NIL
                                                                                                                                              NIL))
                                                                                                                                            NIL))
                                                                                                                                          NIL)
                                                                                                                                         ("2"
                                                                                                                                          (ASSERT)
                                                                                                                                          NIL
                                                                                                                                          NIL))
                                                                                                                                        NIL))
                                                                                                                                      NIL))
                                                                                                                                    NIL))
                                                                                                                                  NIL))
                                                                                                                                NIL))
                                                                                                                              NIL))
                                                                                                                            NIL))
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL)
                                                                                                               ("2"
                                                                                                                (PROPAX)
                                                                                                                NIL
                                                                                                                NIL)
                                                                                                               ("3"
                                                                                                                (PROPAX)
                                                                                                                NIL
                                                                                                                NIL))
                                                                                                              NIL)
                                                                                                             ("2"
                                                                                                              (EXPAND
                                                                                                               "prime?")
                                                                                                              (("2"
                                                                                                                (FLATTEN)
                                                                                                                (("2"
                                                                                                                  (ASSERT)
                                                                                                                  NIL
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL)
                                                                                                           ("2"
                                                                                                            (PROPAX)
                                                                                                            NIL
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL)
                                                                                                   ("2"
                                                                                                    (TYPEPRED
                                                                                                     "p")
                                                                                                    (("2"
                                                                                                      (EXPAND
                                                                                                       "prime?")
                                                                                                      (("2"
                                                                                                        (PROPAX)
                                                                                                        NIL
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL)
                                                                                         ("2"
                                                                                          (HIDE-ALL-BUT
                                                                                           (1
                                                                                            3))
                                                                                          (("2"
                                                                                            (TYPEPRED
                                                                                             "p")
                                                                                            (("2"
                                                                                              (EXPAND
                                                                                               "prime?")
                                                                                              (("2"
                                                                                                (PROPAX)
                                                                                                NIL
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL)
                                                                                   ("2"
                                                                                    (HIDE-ALL-BUT
                                                                                     (1
                                                                                      3))
                                                                                    (("2"
                                                                                      (TYPEPRED
                                                                                       "p")
                                                                                      (("2"
                                                                                        (EXPAND
                                                                                         "prime?")
                                                                                        (("2"
                                                                                          (PROPAX)
                                                                                          NIL
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL)
                                                                             ("2"
                                                                              (HIDE-ALL-BUT
                                                                               (1
                                                                                3))
                                                                              (("2"
                                                                                (TYPEPRED
                                                                                 "p")
                                                                                (("2"
                                                                                  (EXPAND
                                                                                   "prime?")
                                                                                  (("2"
                                                                                    (PROPAX)
                                                                                    NIL
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL)
                                                               ("2"
                                                                (DECOMPOSE-EQUALITY)
                                                                NIL NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (REWRITE "left_zero") NIL NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (FLATTEN)
                      (("2" (NAME-REPLACE "xhu" "phi_Hx(x!1, p) + nZ(p)")
                        (("1" (NAME-REPLACE "yhu" "phi_Hy(x!1, p) + nZ(p)")
                          (("1" (NAME-REPLACE "zhu" "phi_Hz(x!1, p) + nZ(p)")
                            (("1" (NAME-REPLACE "thu" "phi_Ht(x!1, p) + nZ(p)")
                              (("1" (CASE-REPLACE "nZ(p) = 0+nZ(p)")
                                (("1" (EXPAND "xhu")
                                  (("1" (EXPAND "yhu")
                                    (("1" (EXPAND "zhu")
                                      (("1" (EXPAND "thu")
                                        (("1" (EXPAND "prime_mult_Hurwitz")
                                          (("1" (EXPAND "extend")
                                            (("1" (SPLIT)
                                              (("1" (FLATTEN)
                                                (("1" (HIDE -3)
                                                  (("1"
                                                    (REWRITE
                                                     " equal_cosets_rem")
                                                    (("1"
                                                      (REWRITE
                                                       " equal_cosets_rem")
                                                      (("1"
                                                        (REWRITE
                                                         " equal_cosets_rem")
                                                        (("1"
                                                          (REWRITE
                                                           " equal_cosets_rem")
                                                          (("1" (SKEEP)
                                                            (("1" (REPLACES -2)
                                                              (("1"
                                                                (REWRITE
                                                                 "phi_Hx_charac")
                                                                (("1"
                                                                  (REWRITE
                                                                   "phi_Hy_charac")
                                                                  (("1"
                                                                    (REWRITE
                                                                     "phi_Hz_charac")
                                                                    (("1"
                                                                      (REWRITE
                                                                       "phi_Ht_charac")
                                                                      (("1"
                                                                        (CASE-REPLACE
                                                                         "rem(p)(expt(2, p - 2) * (p * x)) = 0")
                                                                        (("1"
                                                                          (REWRITE
                                                                           "rem_sum1"
                                                                           :DIR
                                                                           RL)
                                                                          (("1"
                                                                            (REPLACE
                                                                             -1
                                                                             1)
                                                                            (("1"
                                                                              (SIMPLIFY)
                                                                              (("1"
                                                                                (REWRITE
                                                                                 "rem_sum1"
                                                                                 :DIR
                                                                                 RL)
                                                                                (("1"
                                                                                  (REPLACE
                                                                                   -1
                                                                                   1)
                                                                                  (("1"
                                                                                    (SIMPLIFY)
                                                                                    (("1"
                                                                                      (REWRITE
                                                                                       "rem_sum1"
                                                                                       :DIR
                                                                                       RL)
                                                                                      (("1"
                                                                                        (REPLACE
                                                                                         -1
                                                                                         1)
                                                                                        (("1"
                                                                                          (SIMPLIFY)
                                                                                          (("1"
                                                                                            (REWRITE
                                                                                             "modulo_arithmetic.rem_zero")
                                                                                            (("1"
                                                                                              (REWRITE
                                                                                               "rem_multiple1")
                                                                                              (("1"
                                                                                                (REWRITE
                                                                                                 "rem_multiple1")
                                                                                                (("1"
                                                                                                  (REWRITE
                                                                                                   "rem_multiple1")
                                                                                                  NIL
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL)
                                                                         ("2"
                                                                          (HIDE
                                                                           2)
                                                                          (("2"
                                                                            (REWRITE
                                                                             "rem_prod2"
                                                                             :DIR
                                                                             RL)
                                                                            (("2"
                                                                              (REWRITE
                                                                               "rem_multiple1")
                                                                              (("2"
                                                                                (SIMPLIFY)
                                                                                (("2"
                                                                                  (REWRITE
                                                                                   "modulo_arithmetic.rem_zero")
                                                                                  NIL
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL)
                                                                         ("3"
                                                                          (TYPEPRED
                                                                           "p")
                                                                          (("3"
                                                                            (EXPAND
                                                                             "prime?")
                                                                            (("3"
                                                                              (FLATTEN)
                                                                              (("3"
                                                                                (ASSERT)
                                                                                NIL
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (PROPAX) NIL NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (REWRITE "left_zero") NIL NIL))
                                NIL)
                               ("2" (EXPAND "prime_mult_Hurwitz")
                                (("2" (EXPAND "extend") (("2" (PROP) NIL NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (EXPAND "prime_mult_Hurwitz")
                              (("2" (EXPAND "extend") (("2" (PROP) NIL NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (EXPAND "prime_mult_Hurwitz")
                            (("2" (EXPAND "extend") (("2" (PROP) NIL NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (EXPAND "prime_mult_Hurwitz")
                          (("2" (EXPAND "extend") (("2" (PROP) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (SKEEP) (("2" (REWRITE "zn_add_group") NIL NIL)) NIL)
           ("3" (SKEEP) (("3" (REWRITE "zn_identity") NIL NIL)) NIL)
           ("4" (SKEEP) (("4" (REWRITE "zn_identity") NIL NIL)) NIL)
           ("5" (SKEEP)
            (("5" (REWRITE "ideal_is_coset")
              (("5" (REWRITE "nZ_ideal") NIL NIL)) NIL))
            NIL)
           ("6" (SKEEP)
            (("6" (SKEEP) (("6" (REWRITE "zn_product_pair") NIL NIL)) NIL))
            NIL)
           ("7" (SKEEP)
            (("7" (SKEEP) (("7" (REWRITE "zn_add_pair") NIL NIL)) NIL)) NIL)
           ("8" (SKEEP) (("8" (REWRITE "zn_add_group") NIL NIL)) NIL)
           ("9" (SKEEP) (("9" (REWRITE "zn_identity") NIL NIL)) NIL)
           ("10" (SKEEP) (("10" (REWRITE "zn_identity") NIL NIL)) NIL)
           ("11" (SKEEP)
            (("11" (REWRITE "ideal_is_coset")
              (("11" (REWRITE "nZ_ideal") NIL NIL)) NIL))
            NIL)
           ("12" (SKEEP)
            (("12" (SKEEP) (("12" (REWRITE "zn_product_pair") NIL NIL)) NIL))
            NIL)
           ("13" (SKEEP)
            (("13" (SKEEP) (("13" (REWRITE "zn_add_pair") NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|Hurwitz_ring| NONEMPTY-TYPE-EQ-DECL NIL |quaternions_Hurwitz_rings| NIL)
    (|phi_Hurwitz_quat_zp| CONST-DECL "quat_coset_Zp(p)"
     |quaternions_Hurwitz_isomorphism| NIL)
    (+ CONST-DECL "quat" |quaternions_def| |algebra|)
    (* CONST-DECL "[quat, quat -> quat]" |quaternions_def| |algebra|)
    (|ideal?| CONST-DECL "bool" |ring_ideal_def| |algebra|)
    (|Hurwitz_ideal| NONEMPTY-TYPE-EQ-DECL NIL |quaternions_Hurwitz_rings| NIL)
    (|prime_mult_Hurwitz| CONST-DECL "Hurwitz_ideal"
     |quaternions_Hurwitz_rings| NIL)
    (|zero_q| CONST-DECL "quat" |quaternions_def| |algebra|)
    (|quat_coset_Zp| TYPE-EQ-DECL NIL |quaternions_zp| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|fullset| CONST-DECL "set" |sets| NIL)
    (|group?| CONST-DECL "bool" |group_def| |algebra|)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (+ CONST-DECL "set[T]" |cosets_def| |algebra|)
    (|product| CONST-DECL "set[T]" |product_coset_def| |algebra|)
    (|add| CONST-DECL "set[T]" |cosets_def| |algebra|)
    (|coset| TYPE-EQ-DECL NIL |cosets_def| |algebra|)
    (|p| SKOLEM-CONST-DECL "(prime?)" |quaternions_Hurwitz_isomorphism| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (|nZ| CONST-DECL "set[int]" |ring_zn| |algebra_examples|)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (Z CONST-DECL
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     |ring_zn| |algebra_examples|)
    (|ring| NONEMPTY-TYPE-EQ-DECL NIL |ring| |algebra|)
    (|ring?| CONST-DECL "bool" |ring_def| |algebra|)
    (|coset?| CONST-DECL "bool" |cosets_def| |algebra|)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|Hurwitz_ring| CONST-DECL "set[quat[rational,
         restrict[[numfield, numfield], [rational, rational], numfield](+),
         restrict[[numfield, numfield], [rational, rational], numfield](*),
         0, 1, -1, -1]]"
     |quaternions_Hurwitz_rings| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|rat_plus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|quat| TYPE-EQ-DECL NIL |quaternions_def| |algebra|)
    (|xhu| SKOLEM-CONST-DECL "set[int]" |quaternions_Hurwitz_isomorphism| NIL)
    (|zhu| SKOLEM-CONST-DECL "set[int]" |quaternions_Hurwitz_isomorphism| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|rem_prod2| FORMULA-DECL NIL |modulo_arithmetic| NIL)
    (|rem_multiple1| FORMULA-DECL NIL |modulo_arithmetic| NIL)
    (|rem| CONST-DECL "{r: mod(b) | EXISTS q: x = b * q + r}"
     |modulo_arithmetic| NIL)
    (|thu| SKOLEM-CONST-DECL "set[int]" |quaternions_Hurwitz_isomorphism| NIL)
    (|yhu| SKOLEM-CONST-DECL "set[int]" |quaternions_Hurwitz_isomorphism| NIL)
    (|phi_Hy| CONST-DECL "int" |quaternions_Hurwitz_isomorphism| NIL)
    (|phi_Ht| CONST-DECL "int" |quaternions_Hurwitz_isomorphism| NIL)
    (|left_zero| FORMULA-DECL NIL |ring_cosets_lemmas| |algebra|)
    (|xhu| SKOLEM-CONST-DECL "set[int]" |quaternions_Hurwitz_isomorphism| NIL)
    (|zhu| SKOLEM-CONST-DECL "set[int]" |quaternions_Hurwitz_isomorphism| NIL)
    (|equal_cosets_rem| FORMULA-DECL NIL |ring_zn_extra| |algebra_examples|)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|posnat_expt| APPLICATION-JUDGEMENT "posnat" |exponentiation| NIL)
    (|phi_Hx_charac| FORMULA-DECL NIL |quaternions_Hurwitz_isomorphism| NIL)
    (|negate_nz_T_is_nz_T| APPLICATION-JUDGEMENT "nz_T[rational,
     restrict[[numfield, numfield], [rational, rational], numfield](+),
     restrict[[numfield, numfield], [rational, rational], numfield](*), 0]"
     |quaternions_Hurwitz_rings| NIL)
    (|phi_Hz_charac| FORMULA-DECL NIL |quaternions_Hurwitz_isomorphism| NIL)
    (|rem_zero| FORMULA-DECL NIL |modulo_arithmetic| NIL)
    (|divides| CONST-DECL "bool" |divides| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|rem_def2| FORMULA-DECL NIL |modulo_arithmetic| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|mod| NONEMPTY-TYPE-EQ-DECL NIL |euclidean_division| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|well_founded?| CONST-DECL "bool" |orders| NIL)
    (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL)
    (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|x!2| SKOLEM-CONST-DECL "posnat" |quaternions_Hurwitz_isomorphism| NIL)
    (|minus_u8_u8| APPLICATION-JUDGEMENT "int16" |integertypes| NIL)
    (|minus_i32_u32| APPLICATION-JUDGEMENT "int64" |integertypes| NIL)
    (|minus_i16_u16| APPLICATION-JUDGEMENT "int32" |integertypes| NIL)
    (|odd_minus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|divisor_smaller| FORMULA-DECL NIL |divides| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|prime_divides_prod| FORMULA-DECL NIL |primes| |ints|)
    (|expt| DEF-DECL "real" |exponentiation| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|rem_sum1| FORMULA-DECL NIL |modulo_arithmetic| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|phi_Ht_charac| FORMULA-DECL NIL |quaternions_Hurwitz_isomorphism| NIL)
    (|phi_Hy_charac| FORMULA-DECL NIL |quaternions_Hurwitz_isomorphism| NIL)
    (|extend| CONST-DECL "R" |extend| NIL)
    (|thu| SKOLEM-CONST-DECL "set[int]" |quaternions_Hurwitz_isomorphism| NIL)
    (|yhu| SKOLEM-CONST-DECL "set[int]" |quaternions_Hurwitz_isomorphism| NIL)
    (|phi_Hz| CONST-DECL "int" |quaternions_Hurwitz_isomorphism| NIL)
    (|phi_Hx| CONST-DECL "int" |quaternions_Hurwitz_isomorphism| NIL)
    (|zn_add_group| FORMULA-DECL NIL |ring_zn_extra| |algebra_examples|)
    (|zn_identity| FORMULA-DECL NIL |ring_zn_extra| |algebra_examples|)
    (|ideal_is_coset| FORMULA-DECL NIL |ring_cosets_lemmas| |algebra|)
    (|ideal| TYPE-EQ-DECL NIL |ring_ideal_def| |algebra|)
    (|nZ_ideal| FORMULA-DECL NIL |ring_zn| |algebra_examples|)
    (|zn_product_pair| FORMULA-DECL NIL |ring_zn_extra| |algebra_examples|)
    (|zn_add_pair| FORMULA-DECL NIL |ring_zn_extra| |algebra_examples|)
    (|R_kernel| CONST-DECL "set[T1]" |ring_homomorphisms_def| |algebra|))
   SHOSTAK))
 (|isomorphism_quot_Hurwitz_zp_TCC1| 0
  (|isomorphism_quot_Hurwitz_zp_TCC1-1| NIL 3935060471
   ("" (SKEEP)
    (("" (INST 2 "prime_mult_Hurwitz(p)")
      (("" (REWRITE "lcoset_iff_coset" :DIR RL)
        (("" (EXPAND "left_coset?")
          (("" (INST 1 "zero_q")
            (("1" (REWRITE "left_zero") NIL NIL)
             ("2" (EXPAND "zero_q")
              (("2" (EXPAND "Hurwitz_ring")
                (("2" (INST 1 "0" "0" "0" "0") (("2" (ASSERT) NIL NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|quat| TYPE-EQ-DECL NIL |quaternions_def| |algebra|)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (+ CONST-DECL "quat" |quaternions_def| |algebra|)
    (|coset?| CONST-DECL "bool" |cosets_def| |algebra|)
    (|Hurwitz_ring| CONST-DECL "set[quat[rational,
         restrict[[numfield, numfield], [rational, rational], numfield](+),
         restrict[[numfield, numfield], [rational, rational], numfield](*),
         0, 1, -1, -1]]"
     |quaternions_Hurwitz_rings| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (* CONST-DECL "[quat, quat -> quat]" |quaternions_def| |algebra|)
    (|zero_q| CONST-DECL "quat" |quaternions_def| |algebra|)
    (|ring?| CONST-DECL "bool" |ring_def| |algebra|)
    (|ideal?| CONST-DECL "bool" |ring_ideal_def| |algebra|)
    (|Hurwitz_ideal| NONEMPTY-TYPE-EQ-DECL NIL |quaternions_Hurwitz_rings| NIL)
    (|prime_mult_Hurwitz| CONST-DECL "Hurwitz_ideal"
     |quaternions_Hurwitz_rings| NIL)
    (|coset| TYPE-EQ-DECL NIL |cosets_def| |algebra|)
    (|p| SKOLEM-CONST-DECL "(prime?)" |quaternions_Hurwitz_isomorphism| NIL)
    (|left_coset?| CONST-DECL "bool" |cosets_def| |algebra|)
    (|nnrat_plus_nnrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals|
     NIL)
    (|nnrat_div_posrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals|
     NIL)
    (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|left_zero| FORMULA-DECL NIL |ring_cosets_lemmas| |algebra|)
    (|rat_plus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|lcoset_iff_coset| FORMULA-DECL NIL |ring_cosets_lemmas| |algebra|))
   NIL
   (|isomorphism_quot_Hurwitz_zp| EXISTENCE ""
    "coset[quat[rational, restrict[[numfield, numfield], [rational, rational], numfield](+), restrict[[numfield, numfield], [rational, rational], numfield](*), 0, 1, -1, -1], quaternions_def[rational, restrict[[numfield, numfield], [rational, rational], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [rational, rational], numfield].restrict(number_fields.*), 0, 1, -1, -1].+](quaternions_Hurwitz_rings.Hurwitz_ring, quaternions_Hurwitz_rings.prime_mult_Hurwitz(quaternions_Hurwitz_isomorphism.p))")))
 (|isomorphism_quot_Hurwitz_zp_TCC2| 0
  (|isomorphism_quot_Hurwitz_zp_TCC2-1| NIL 3935060471
   ("" (SKEEP)
    (("" (SKEEP)
      ((""
        (CASE-REPLACE "add[quat[rational,
                    restrict
                        [[numfield, numfield], [rational, rational],
                         numfield]
                        (+),
                    restrict
                        [[numfield, numfield], [rational, rational],
                         numfield]
                        (*),
                    0, 1, -1, -1],
               +[rational,
                 restrict
                     [[numfield, numfield], [rational, rational], numfield]
                     (+),
                 restrict
                     [[numfield, numfield], [rational, rational], numfield]
                     (*),
                 0, 1, -1, -1]]
               (Hurwitz_ring, prime_mult_Hurwitz(p))(x1) = add[quat[rational,
                    restrict
                        [[numfield, numfield], [rational, rational],
                         numfield]
                        (+),
                    restrict
                        [[numfield, numfield], [rational, rational],
                         numfield]
                        (*),
                    0, 1, -1, -1],
               +[rational,
                 restrict
                     [[numfield, numfield], [rational, rational], numfield]
                     (+),
                 restrict
                     [[numfield, numfield], [rational, rational], numfield]
                     (*),
                 0, 1, -1, -1]]
               (Hurwitz_ring, prime_mult_Hurwitz(p))(x1`1, x1`2)")
        (("1" (REWRITE "coset_add")
          (("1" (LEMMA "Hurwitz_ring_is_ring") (("1" (PROPAX) NIL NIL)) NIL))
          NIL)
         ("2" (ASSERT) NIL NIL)
         ("3" (SKEEP) (("3" (EXPAND "restrict") (("3" (PROPAX) NIL NIL)) NIL))
          NIL)
         ("4" (EXPAND "restrict") (("4" (PROPAX) NIL NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|rat_plus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|coset_add| FORMULA-DECL NIL |quotient_rings| |algebra|)
    (|ring| NONEMPTY-TYPE-EQ-DECL NIL |ring| |algebra|)
    (|ideal| TYPE-EQ-DECL NIL |ring_ideal_def| |algebra|)
    (|Hurwitz_ring_is_ring| FORMULA-DECL NIL |quaternions_Hurwitz_rings| NIL)
    (|prime_mult_Hurwitz| CONST-DECL "Hurwitz_ideal"
     |quaternions_Hurwitz_rings| NIL)
    (|Hurwitz_ideal| NONEMPTY-TYPE-EQ-DECL NIL |quaternions_Hurwitz_rings| NIL)
    (|ideal?| CONST-DECL "bool" |ring_ideal_def| |algebra|)
    (|ring?| CONST-DECL "bool" |ring_def| |algebra|)
    (|zero_q| CONST-DECL "quat" |quaternions_def| |algebra|)
    (* CONST-DECL "[quat, quat -> quat]" |quaternions_def| |algebra|)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|Hurwitz_ring| CONST-DECL "set[quat[rational,
         restrict[[numfield, numfield], [rational, rational], numfield](+),
         restrict[[numfield, numfield], [rational, rational], numfield](*),
         0, 1, -1, -1]]"
     |quaternions_Hurwitz_rings| NIL)
    (|add| CONST-DECL "set[T]" |cosets_def| |algebra|)
    (|coset| TYPE-EQ-DECL NIL |cosets_def| |algebra|)
    (|coset?| CONST-DECL "bool" |cosets_def| |algebra|)
    (+ CONST-DECL "quat" |quaternions_def| |algebra|)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|quat| TYPE-EQ-DECL NIL |quaternions_def| |algebra|)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL))
   NIL
   (|isomorphism_quot_Hurwitz_zp| SUBTYPE
    "cosets_def[quat[rational, restrict[[numfield, numfield], [rational, rational], numfield](+), restrict[[numfield, numfield], [rational, rational], numfield](*), 0, 1, -1, -1], quaternions_def[rational, restrict[[numfield, numfield], [rational, rational], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [rational, rational], numfield].restrict(number_fields.*), 0, 1, -1, -1].+].add(quaternions_Hurwitz_rings.Hurwitz_ring, quaternions_Hurwitz_rings.prime_mult_Hurwitz(quaternions_Hurwitz_isomorphism.p))"
    "[[coset[quat[rational, restrict[[numfield, numfield], [rational, rational], numfield](+), restrict[[numfield, numfield], [rational, rational], numfield](*), 0, 1, -1, -1], quaternions_def[rational, restrict[[numfield, numfield], [rational, rational], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [rational, rational], numfield].restrict(number_fields.*), 0, 1, -1, -1].+](quaternions_Hurwitz_rings.Hurwitz_ring, quaternions_Hurwitz_rings.prime_mult_Hurwitz(quaternions_Hurwitz_isomorphism.p)), coset[quat[rational, restrict[[numfield, numfield], [rational, rational], numfield](+), restrict[[numfield, numfield], [rational, rational], numfield](*), 0, 1, -1, -1], quaternions_def[rational, restrict[[numfield, numfield], [rational, rational], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [rational, rational], numfield].restrict(number_fields.*), 0, 1, -1, -1].+](quaternions_Hurwitz_rings.Hurwitz_ring, quaternions_Hurwitz_rings.prime_mult_Hurwitz(quaternions_Hurwitz_isomorphism.p))] -> coset[quat[rational, restrict[[numfield, numfield], [rational, rational], numfield](+), restrict[[numfield, numfield], [rational, rational], numfield](*), 0, 1, -1, -1], quaternions_def[rational, restrict[[numfield, numfield], [rational, rational], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [rational, rational], numfield].restrict(number_fields.*), 0, 1, -1, -1].+](quaternions_Hurwitz_rings.Hurwitz_ring, quaternions_Hurwitz_rings.prime_mult_Hurwitz(quaternions_Hurwitz_isomorphism.p))]")))
 (|isomorphism_quot_Hurwitz_zp_TCC3| 0
  (|isomorphism_quot_Hurwitz_zp_TCC3-1| NIL 3935060471
   ("" (SKEEP)
    (("" (SKEEP)
      ((""
        (CASE-REPLACE "product
               [quat[rational,
                     restrict
                         [[numfield, numfield], [rational, rational],
                          numfield]
                         (+),
                     restrict
                         [[numfield, numfield], [rational, rational],
                          numfield]
                         (*),
                     0, 1, -1, -1],
                +[rational,
                  restrict
                      [[numfield, numfield], [rational, rational], numfield]
                      (+),
                  restrict
                      [[numfield, numfield], [rational, rational], numfield]
                      (*),
                  0, 1, -1, -1],
                *[rational,
                  restrict
                      [[numfield, numfield], [rational, rational], numfield]
                      (+),
                  restrict
                      [[numfield, numfield], [rational, rational], numfield]
                      (*),
                  0, 1, -1, -1]]
               (Hurwitz_ring, prime_mult_Hurwitz(p))(x1) = product
               [quat[rational,
                     restrict
                         [[numfield, numfield], [rational, rational],
                          numfield]
                         (+),
                     restrict
                         [[numfield, numfield], [rational, rational],
                          numfield]
                         (*),
                     0, 1, -1, -1],
                +[rational,
                  restrict
                      [[numfield, numfield], [rational, rational], numfield]
                      (+),
                  restrict
                      [[numfield, numfield], [rational, rational], numfield]
                      (*),
                  0, 1, -1, -1],
                *[rational,
                  restrict
                      [[numfield, numfield], [rational, rational], numfield]
                      (+),
                  restrict
                      [[numfield, numfield], [rational, rational], numfield]
                      (*),
                  0, 1, -1, -1]]
               (Hurwitz_ring, prime_mult_Hurwitz(p))(x1`1, x1`2)")
        (("1" (REWRITE "coset_product")
          (("1" (LEMMA "Hurwitz_ring_is_ring") (("1" (PROPAX) NIL NIL)) NIL))
          NIL)
         ("2" (ASSERT) NIL NIL)
         ("3" (SKEEP) (("3" (EXPAND "restrict") (("3" (PROPAX) NIL NIL)) NIL))
          NIL)
         ("4" (SKEEP) (("4" (EXPAND "restrict") (("4" (PROPAX) NIL NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|rat_plus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|coset_product| FORMULA-DECL NIL |quotient_rings| |algebra|)
    (|ring| NONEMPTY-TYPE-EQ-DECL NIL |ring| |algebra|)
    (|ideal| TYPE-EQ-DECL NIL |ring_ideal_def| |algebra|)
    (|Hurwitz_ring_is_ring| FORMULA-DECL NIL |quaternions_Hurwitz_rings| NIL)
    (|prime_mult_Hurwitz| CONST-DECL "Hurwitz_ideal"
     |quaternions_Hurwitz_rings| NIL)
    (|Hurwitz_ideal| NONEMPTY-TYPE-EQ-DECL NIL |quaternions_Hurwitz_rings| NIL)
    (|ideal?| CONST-DECL "bool" |ring_ideal_def| |algebra|)
    (|ring?| CONST-DECL "bool" |ring_def| |algebra|)
    (|zero_q| CONST-DECL "quat" |quaternions_def| |algebra|)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|Hurwitz_ring| CONST-DECL "set[quat[rational,
         restrict[[numfield, numfield], [rational, rational], numfield](+),
         restrict[[numfield, numfield], [rational, rational], numfield](*),
         0, 1, -1, -1]]"
     |quaternions_Hurwitz_rings| NIL)
    (|product| CONST-DECL "set[T]" |product_coset_def| |algebra|)
    (* CONST-DECL "[quat, quat -> quat]" |quaternions_def| |algebra|)
    (|coset| TYPE-EQ-DECL NIL |cosets_def| |algebra|)
    (|coset?| CONST-DECL "bool" |cosets_def| |algebra|)
    (+ CONST-DECL "quat" |quaternions_def| |algebra|)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|quat| TYPE-EQ-DECL NIL |quaternions_def| |algebra|)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL))
   NIL
   (|isomorphism_quot_Hurwitz_zp| SUBTYPE
    "product_coset_def[quat[rational, restrict[[numfield, numfield], [rational, rational], numfield](+), restrict[[numfield, numfield], [rational, rational], numfield](*), 0, 1, -1, -1], quaternions_def[rational, restrict[[numfield, numfield], [rational, rational], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [rational, rational], numfield].restrict(number_fields.*), 0, 1, -1, -1].+, quaternions_def[rational, restrict[[numfield, numfield], [rational, rational], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [rational, rational], numfield].restrict(number_fields.*), 0, 1, -1, -1].*].product(quaternions_Hurwitz_rings.Hurwitz_ring, quaternions_Hurwitz_rings.prime_mult_Hurwitz(quaternions_Hurwitz_isomorphism.p))"
    "[[coset[quat[rational, restrict[[numfield, numfield], [rational, rational], numfield](+), restrict[[numfield, numfield], [rational, rational], numfield](*), 0, 1, -1, -1], quaternions_def[rational, restrict[[numfield, numfield], [rational, rational], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [rational, rational], numfield].restrict(number_fields.*), 0, 1, -1, -1].+](quaternions_Hurwitz_rings.Hurwitz_ring, quaternions_Hurwitz_rings.prime_mult_Hurwitz(quaternions_Hurwitz_isomorphism.p)), coset[quat[rational, restrict[[numfield, numfield], [rational, rational], numfield](+), restrict[[numfield, numfield], [rational, rational], numfield](*), 0, 1, -1, -1], quaternions_def[rational, restrict[[numfield, numfield], [rational, rational], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [rational, rational], numfield].restrict(number_fields.*), 0, 1, -1, -1].+](quaternions_Hurwitz_rings.Hurwitz_ring, quaternions_Hurwitz_rings.prime_mult_Hurwitz(quaternions_Hurwitz_isomorphism.p))] -> coset[quat[rational, restrict[[numfield, numfield], [rational, rational], numfield](+), restrict[[numfield, numfield], [rational, rational], numfield](*), 0, 1, -1, -1], quaternions_def[rational, restrict[[numfield, numfield], [rational, rational], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [rational, rational], numfield].restrict(number_fields.*), 0, 1, -1, -1].+](quaternions_Hurwitz_rings.Hurwitz_ring, quaternions_Hurwitz_rings.prime_mult_Hurwitz(quaternions_Hurwitz_isomorphism.p))]")))
 (|isomorphism_quot_Hurwitz_zp_TCC4| 0
  (|isomorphism_quot_Hurwitz_zp_TCC4-1| NIL 3935060471
   ("" (SKEEP)
    (("" (REWRITE "lcoset_iff_coset" :DIR RL)
      (("" (EXPAND "left_coset?")
        (("" (INST 2 "zero_q")
          (("1" (REWRITE "left_zero") NIL NIL)
           ("2" (EXPAND "zero_q")
            (("2" (EXPAND "Hurwitz_ring")
              (("2" (INST 1 "0" "0" "0" "0") (("2" (ASSERT) NIL NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|lcoset_iff_coset| FORMULA-DECL NIL |ring_cosets_lemmas| |algebra|)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (|ring?| CONST-DECL "bool" |ring_def| |algebra|)
    (|ideal?| CONST-DECL "bool" |ring_ideal_def| |algebra|)
    (|Hurwitz_ring| CONST-DECL "set[quat[rational,
         restrict[[numfield, numfield], [rational, rational], numfield](+),
         restrict[[numfield, numfield], [rational, rational], numfield](*),
         0, 1, -1, -1]]"
     |quaternions_Hurwitz_rings| NIL)
    (|Hurwitz_ideal| NONEMPTY-TYPE-EQ-DECL NIL |quaternions_Hurwitz_rings| NIL)
    (|prime_mult_Hurwitz| CONST-DECL "Hurwitz_ideal"
     |quaternions_Hurwitz_rings| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|quat| TYPE-EQ-DECL NIL |quaternions_def| |algebra|)
    (+ CONST-DECL "quat" |quaternions_def| |algebra|)
    (* CONST-DECL "[quat, quat -> quat]" |quaternions_def| |algebra|)
    (|zero_q| CONST-DECL "quat" |quaternions_def| |algebra|)
    (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|rat_plus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|left_zero| FORMULA-DECL NIL |ring_cosets_lemmas| |algebra|)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|nnrat_div_posrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals|
     NIL)
    (|nnrat_plus_nnrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals|
     NIL)
    (|left_coset?| CONST-DECL "bool" |cosets_def| |algebra|))
   NIL
   (|isomorphism_quot_Hurwitz_zp| SUBTYPE
    "quaternions_Hurwitz_rings.prime_mult_Hurwitz(quaternions_Hurwitz_isomorphism.p)"
    "coset[quat[rational, restrict[[numfield, numfield], [rational, rational], numfield](+), restrict[[numfield, numfield], [rational, rational], numfield](*), 0, 1, -1, -1], quaternions_def[rational, restrict[[numfield, numfield], [rational, rational], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [rational, rational], numfield].restrict(number_fields.*), 0, 1, -1, -1].+](quaternions_Hurwitz_rings.Hurwitz_ring, quaternions_Hurwitz_rings.prime_mult_Hurwitz(quaternions_Hurwitz_isomorphism.p))")))
 (|isomorphism_quot_Hurwitz_zp| 0
  (|isomorphism_quot_Hurwitz_zp-1| NIL 3935243622
   ("" (SKEEP)
    ((""
      (LEMMA
       "ring_1st_isomorphism_theorem[quat[rational,+,*,0,1,-1,-1],+, *, zero_q,
    				   quat_coset_Zp(p),
    				   add_qcZp(p),
    		                   mul_qcZp(p),
    		                   zero_qcZp(p)].first_isomorphism_th_aux_6")
      (("1"
        (INST -1 "Hurwitz_ring" "fullset[quat_coset_Zp(p)]"
         "phi_Hurwitz_quat_zp(p)" "prime_mult_Hurwitz(p)")
        (("1" (SPLIT)
          (("1" (SKEEP)
            (("1" (HIDE -1 -2)
              (("1" (SPLIT)
                (("1" (EXPAND "R_isomorphic?") (("1" (INST 2 "f") NIL NIL))
                  NIL)
                 ("2" (HIDE 3)
                  (("2" (LEMMA "isomorphism_quot_Hurwitz_zp_aux")
                    (("2" (INST -1 "p") (("2" (PROP) NIL NIL)) NIL)) NIL))
                  NIL)
                 ("3" (HIDE 3)
                  (("3" (LEMMA "isomorphism_quot_Hurwitz_zp_aux2")
                    (("3" (INST -1 "p") (("3" (PROP) NIL NIL)) NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (HIDE 3)
            (("2" (LEMMA "isomorphism_quot_Hurwitz_zp_aux2")
              (("2" (INST -1 "p")
                (("2" (PROP)
                  (("2" (REPLACES -1)
                    (("2" (EXPAND "subset?")
                      (("2" (EXPAND "member") (("2" (SKEEP) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (HIDE 3)
          (("2" (SPLIT)
            (("1" (SKEEP)
              (("1" (EXPAND "fullset") (("1" (PROPAX) NIL NIL)) NIL)) NIL)
             ("2" (LEMMA "isomorphism_quot_Hurwitz_zp_aux")
              (("2" (INST -1 "p")
                (("2" (PROP)
                  (("2" (EXPAND "R_epimorphism?") (("2" (FLATTEN) NIL NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("3" (HIDE 3)
          (("3" (LEMMA "quat_zp_is_ring_w_one")
            (("3" (INST -1 "p")
              (("3" (EXPAND "quat_Zp")
                (("3" (EXPAND "ring_with_one?") (("3" (FLATTEN) NIL NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("4" (HIDE 3) (("4" (REWRITE "Hurwitz_ring_is_ring") NIL NIL)) NIL))
        NIL)
       ("2" (HIDE 3)
        (("2" (LEMMA "quat_zp_is_ring_w_one")
          (("2" (INST -1 "p")
            (("2" (EXPAND "quat_Zp")
              (("2" (EXPAND "ring_with_one?") (("2" (FLATTEN) NIL NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("3" (HIDE 3)
        (("3" (LEMMA "quat_is_ring_w_one")
          (("3" (EXPAND "ring_with_one?") (("3" (FLATTEN) NIL NIL)) NIL)) NIL))
        NIL)
       ("4" (REWRITE "zn_add_group") NIL NIL)
       ("5" (REWRITE "zn_identity") NIL NIL)
       ("6" (REWRITE "zn_identity") NIL NIL)
       ("7" (REWRITE "ideal_is_coset") (("7" (REWRITE "nZ_ideal") NIL NIL))
        NIL)
       ("8" (SKEEP) (("8" (REWRITE "zn_product_pair") NIL NIL)) NIL)
       ("9" (SKEEP) (("9" (REWRITE "zn_add_pair") NIL NIL)) NIL)
       ("10" (INST 1 "0+nZ(p)") (("10" (REWRITE "zn_identity") NIL NIL)) NIL))
      NIL))
    NIL)
   ((|rat_plus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|first_isomorphism_th_aux_6| FORMULA-DECL NIL
     |ring_1st_isomorphism_theorem| |algebra|)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|quat| TYPE-EQ-DECL NIL |quaternions_def| |algebra|)
    (+ CONST-DECL "quat" |quaternions_def| |algebra|)
    (* CONST-DECL "[quat, quat -> quat]" |quaternions_def| |algebra|)
    (|zero_q| CONST-DECL "quat" |quaternions_def| |algebra|)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|coset?| CONST-DECL "bool" |cosets_def| |algebra|)
    (|ring?| CONST-DECL "bool" |ring_def| |algebra|)
    (|ring| NONEMPTY-TYPE-EQ-DECL NIL |ring| |algebra|)
    (Z CONST-DECL
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     |ring_zn| |algebra_examples|)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nZ| CONST-DECL "set[int]" |ring_zn| |algebra_examples|)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (|quat_coset_Zp| TYPE-EQ-DECL NIL |quaternions_zp| NIL)
    (|coset| TYPE-EQ-DECL NIL |cosets_def| |algebra|)
    (|add| CONST-DECL "set[T]" |cosets_def| |algebra|)
    (|product| CONST-DECL "set[T]" |product_coset_def| |algebra|)
    (+ CONST-DECL "set[T]" |cosets_def| |algebra|)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|group?| CONST-DECL "bool" |group_def| |algebra|)
    (|fullset| CONST-DECL "set" |sets| NIL)
    (|Hurwitz_ring_is_ring| FORMULA-DECL NIL |quaternions_Hurwitz_rings| NIL)
    (|ring_with_one?| CONST-DECL "bool" |ring_with_one_def| |algebra|)
    (|quat_Zp| CONST-DECL "set[quat_coset_Zp(p)]" |quaternions_zp| NIL)
    (|quat_zp_is_ring_w_one| FORMULA-DECL NIL |quaternions_zp| NIL)
    (|R_epimorphism?| CONST-DECL "bool" |ring_homomorphisms_def| |algebra|)
    (|isomorphism_quot_Hurwitz_zp_aux2| FORMULA-DECL NIL
     |quaternions_Hurwitz_isomorphism| NIL)
    (|isomorphism_quot_Hurwitz_zp_aux| FORMULA-DECL NIL
     |quaternions_Hurwitz_isomorphism| NIL)
    (|R_isomorphic?| CONST-DECL "bool" |ring_homomorphisms_def| |algebra|)
    (/ CONST-DECL "setof[set[T]]" |cosets_def| |algebra|)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|subset?| CONST-DECL "bool" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|prime_mult_Hurwitz| CONST-DECL "Hurwitz_ideal"
     |quaternions_Hurwitz_rings| NIL)
    (|Hurwitz_ideal| NONEMPTY-TYPE-EQ-DECL NIL |quaternions_Hurwitz_rings| NIL)
    (|ideal| TYPE-EQ-DECL NIL |ring_ideal_def| |algebra|)
    (|ideal?| CONST-DECL "bool" |ring_ideal_def| |algebra|)
    (|R_homomorphism| TYPE-EQ-DECL NIL |ring_homomorphisms_def| |algebra|)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|Hurwitz_ring| NONEMPTY-TYPE-EQ-DECL NIL |quaternions_Hurwitz_rings| NIL)
    (|phi_Hurwitz_quat_zp| CONST-DECL "quat_coset_Zp(p)"
     |quaternions_Hurwitz_isomorphism| NIL)
    (|R_homomorphism?| CONST-DECL "bool" |ring_homomorphisms_def| |algebra|)
    (|p| SKOLEM-CONST-DECL "(prime?)" |quaternions_Hurwitz_isomorphism| NIL)
    (|Hurwitz_ring| CONST-DECL "set[quat[rational,
         restrict[[numfield, numfield], [rational, rational], numfield](+),
         restrict[[numfield, numfield], [rational, rational], numfield](*),
         0, 1, -1, -1]]"
     |quaternions_Hurwitz_rings| NIL)
    (|quat_is_ring_w_one| FORMULA-DECL NIL |quaternions| |algebra|)
    (|zn_add_group| FORMULA-DECL NIL |ring_zn_extra| |algebra_examples|)
    (|zn_identity| FORMULA-DECL NIL |ring_zn_extra| |algebra_examples|)
    (|nZ_ideal| FORMULA-DECL NIL |ring_zn| |algebra_examples|)
    (|ideal_is_coset| FORMULA-DECL NIL |ring_cosets_lemmas| |algebra|)
    (|zn_product_pair| FORMULA-DECL NIL |ring_zn_extra| |algebra_examples|)
    (|zn_add_pair| FORMULA-DECL NIL |ring_zn_extra| |algebra_examples|))
   SHOSTAK))
 (|quot_zp_is_not_div_ring_TCC1| 0
  (|quot_zp_is_not_div_ring_TCC1-1| NIL 3935060471
   ("" (SKEEP)
    (("" (REWRITE "lcoset_iff_coset" :DIR RL)
      (("" (EXPAND "left_coset?")
        (("" (INST 2 "one_q")
          (("" (EXPAND "one_q")
            (("" (EXPAND "Hurwitz_ring")
              (("" (INST 1 "2" "-1" "-1" "-1") (("" (ASSERT) NIL NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|zero_q| CONST-DECL "quat" |quaternions_def| |algebra|)
    (* CONST-DECL "[quat, quat -> quat]" |quaternions_def| |algebra|)
    (+ CONST-DECL "quat" |quaternions_def| |algebra|)
    (|quat| TYPE-EQ-DECL NIL |quaternions_def| |algebra|)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|prime_mult_Hurwitz| CONST-DECL "Hurwitz_ideal"
     |quaternions_Hurwitz_rings| NIL)
    (|Hurwitz_ideal| NONEMPTY-TYPE-EQ-DECL NIL |quaternions_Hurwitz_rings| NIL)
    (|Hurwitz_ring| CONST-DECL "set[quat[rational,
         restrict[[numfield, numfield], [rational, rational], numfield](+),
         restrict[[numfield, numfield], [rational, rational], numfield](*),
         0, 1, -1, -1]]"
     |quaternions_Hurwitz_rings| NIL)
    (|ideal?| CONST-DECL "bool" |ring_ideal_def| |algebra|)
    (|ring?| CONST-DECL "bool" |ring_def| |algebra|)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|one_q| CONST-DECL "quat" |quaternions_def| |algebra|)
    (+ CONST-DECL "set[T]" |cosets_def| |algebra|)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|lcoset_iff_coset| FORMULA-DECL NIL |ring_cosets_lemmas| |algebra|)
    (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|rat_plus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|left_coset?| CONST-DECL "bool" |cosets_def| |algebra|))
   NIL
   (|quot_zp_is_not_div_ring| SUBTYPE
    "((cosets_def[quat[rational, restrict[[numfield, numfield], [rational, rational], numfield](+), restrict[[numfield, numfield], [rational, rational], numfield](*), 0, 1, -1, -1], quaternions_def[rational, restrict[[numfield, numfield], [rational, rational], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [rational, rational], numfield].restrict(number_fields.*), 0, 1, -1, -1].+].+)(quaternions_def[rational, restrict[[numfield, numfield], [rational, rational], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [rational, rational], numfield].restrict(number_fields.*), 0, 1, -1, -1].one_q, quaternions_Hurwitz_rings.prime_mult_Hurwitz(quaternions_Hurwitz_isomorphism.p)))"
    "coset[quat[rational, restrict[[numfield, numfield], [rational, rational], numfield](+), restrict[[numfield, numfield], [rational, rational], numfield](*), 0, 1, -1, -1], quaternions_def[rational, restrict[[numfield, numfield], [rational, rational], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [rational, rational], numfield].restrict(number_fields.*), 0, 1, -1, -1].+](quaternions_Hurwitz_rings.Hurwitz_ring, quaternions_Hurwitz_rings.prime_mult_Hurwitz(quaternions_Hurwitz_isomorphism.p))")))
 (|quot_zp_is_not_div_ring| 0
  (|quot_zp_is_not_div_ring-1| NIL 3935240547
   ("" (SKEEP)
    ((""
      (LEMMA "isomorphic_division_ring[
                    coset[quat[rational,+,*,0,1,-1,-1],+](Hurwitz_ring,prime_mult_Hurwitz(p)),
                    add[quat[rational,+,*,0,1,-1,-1],+](Hurwitz_ring,prime_mult_Hurwitz(p)),
                    product[quat[rational,+,*,0,1,-1,-1],+,*](Hurwitz_ring,prime_mult_Hurwitz(p)),
                    prime_mult_Hurwitz(p),
		    +[quat[rational,+,*,0,1,-1,-1],+](one_q,prime_mult_Hurwitz(p)),
    			           quat_coset_Zp(p),
    				   add_qcZp(p),
    		                   mul_qcZp(p),
    		                   zero_qcZp(p),
				   one_qcZp(p)] ")
      (("1" (LEMMA "isomorphism_quot_Hurwitz_zp")
        (("1" (INST -1 "p")
          (("1" (PROP)
            (("1"
              (INST -2
               "/[quat[rational,+,*,0,1,-1,-1],+](Hurwitz_ring,prime_mult_Hurwitz(p))"
               "fullset[quat_coset_Zp(p)]")
              (("1" (SPLIT)
                (("1" (HIDE -2 -3)
                  (("1" (LEMMA "quat_Zp_odd_not_div_ring")
                    (("1" (INST -1 "p")
                      (("1" (PROP)
                        (("1"
                          (CASE-REPLACE
                           "fullset[quat_coset_Zp(p)] = quat_Zp(p)")
                          (("1" (HIDE-ALL-BUT 1)
                            (("1" (EXPAND "quat_Zp") (("1" (PROPAX) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (PROPAX) NIL NIL) ("3" (PROPAX) NIL NIL))
                NIL)
               ("2" (HIDE -)
                (("2" (REWRITE "quat_is_ring_w_one")
                  (("1" (HIDE 2)
                    (("1" (LEMMA "Zp_prime_is_field")
                      (("1" (INST -1 "p")
                        (("1" (FLATTEN)
                          (("1" (HIDE -2)
                            (("1" (SPLIT)
                              (("1"
                                (CASE-REPLACE "restrict
               [setof[int],
                coset[int,
                      restrict[[numfield, numfield], [int, int], numfield]
                          (+)](Z, nZ(p)),
                bool]
               (Z(p)) = fullset
               [(coset?
                     [int,
                      restrict[[numfield, numfield], [int, int], numfield]
                          (+)]
                     (Z, nZ(p)))]")
                                (("1" (HIDE-ALL-BUT 1)
                                  (("1" (DECOMPOSE-EQUALITY)
                                    (("1" (IFF)
                                      (("1" (SPLIT)
                                        (("1" (EXPAND "restrict")
                                          (("1" (EXPAND "fullset")
                                            (("1" (PROPAX) NIL NIL)) NIL))
                                          NIL)
                                         ("2" (EXPAND "restrict")
                                          (("2" (EXPAND "fullset")
                                            (("2" (EXPAND "Z")
                                              (("2" (EXPAND "/")
                                                (("2" (PROPAX) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (SKEEP)
                                      (("2" (EXPAND "restrict")
                                        (("2" (PROPAX) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (HIDE-ALL-BUT 1)
                                  (("2" (SKEEP)
                                    (("2" (EXPAND "restrict")
                                      (("2" (PROPAX) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (TYPEPRED "p") (("2" (PROPAX) NIL NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (HIDE-ALL-BUT 1)
                    (("2" (SPLIT)
                      (("1" (REWRITE "zn_identity") NIL NIL)
                       ("2" (EXPAND "remove")
                        (("2" (EXPAND "member")
                          (("2" (EXPAND "fullset")
                            (("2" (EXPAND "/=")
                              (("2"
                                (NAME-REPLACE "rhs"
                                 "((+[int, restrict[[numfield, numfield], [int, int], numfield](+)])
            (p - 1, nZ(p)))")
                                (("1" (REWRITE "left_zero" :DIR RL)
                                  (("1" (EXPAND "rhs")
                                    (("1" (REWRITE "equal_cosets_rem")
                                      (("1"
                                        (REWRITE "modulo_arithmetic.rem_zero")
                                        (("1" (REWRITE "rem_mod")
                                          (("1" (ASSERT)
                                            (("1" (TYPEPRED "p")
                                              (("1" (EXPAND "prime?")
                                                (("1" (PROPAX) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (SKEEP)
                                  (("2" (EXPAND "restrict")
                                    (("2" (PROPAX) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("3" (HIDE -)
                (("3" (REWRITE "quotient_ring_with_one")
                  (("3" (REWRITE "Hurwitz_ring_is_ring_w_one") NIL NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (LEMMA "quat_zp_is_ring_w_one")
        (("2" (INST -1 "p")
          (("2" (EXPAND "quat_Zp") (("2" (PROPAX) NIL NIL)) NIL)) NIL))
        NIL)
       ("3" (REWRITE "fullset_quot_ring_with_one")
        (("3" (REWRITE "Hurwitz_ring_is_ring_w_one") NIL NIL)) NIL)
       ("4" (REWRITE "zn_add_group") NIL NIL)
       ("5" (REWRITE "zn_identity") NIL NIL)
       ("6" (REWRITE "zn_identity") NIL NIL)
       ("7" (REWRITE "ideal_is_coset") (("7" (REWRITE "nZ_ideal") NIL NIL))
        NIL)
       ("8" (SKEEP) (("8" (REWRITE "zn_product_pair") NIL NIL)) NIL)
       ("9" (SKEEP) (("9" (REWRITE "zn_add_pair") NIL NIL)) NIL)
       ("10" (INST 1 "0+nZ(p)") (("10" (REWRITE "zn_identity") NIL NIL)) NIL)
       ("11" (HIDE-ALL-BUT 1)
        (("11" (REWRITE "lcoset_iff_coset" :DIR RL)
          (("11" (EXPAND "left_coset?")
            (("11" (INST 1 "one_q")
              (("11" (EXPAND "one_q")
                (("11" (EXPAND "Hurwitz_ring")
                  (("11" (INST 1 "2" "-1" "-1" "-1") (("11" (ASSERT) NIL NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("12" (HIDE-ALL-BUT 1)
        (("12" (REWRITE "lcoset_iff_coset" :DIR RL)
          (("12" (EXPAND "left_coset?")
            (("12" (INST 1 "zero_q")
              (("1" (REWRITE "left_zero") NIL NIL)
               ("2" (EXPAND "zero_q")
                (("2" (EXPAND "Hurwitz_ring")
                  (("2" (INST 1 "0" "0" "0" "0") (("2" (ASSERT) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("13" (HIDE -)
        (("13" (SKEEP)
          (("13"
            (CASE-REPLACE "product
               [quat[rational,
                     restrict
                         [[numfield, numfield], [rational, rational],
                          numfield]
                         (+),
                     restrict
                         [[numfield, numfield], [rational, rational],
                          numfield]
                         (*),
                     0, 1, -1, -1],
                +[rational,
                  restrict
                      [[numfield, numfield], [rational, rational], numfield]
                      (+),
                  restrict
                      [[numfield, numfield], [rational, rational], numfield]
                      (*),
                  0, 1, -1, -1],
                *[rational,
                  restrict
                      [[numfield, numfield], [rational, rational], numfield]
                      (+),
                  restrict
                      [[numfield, numfield], [rational, rational], numfield]
                      (*),
                  0, 1, -1, -1]]
               (Hurwitz_ring, prime_mult_Hurwitz(p))(x1) = product
               [quat[rational,
                     restrict
                         [[numfield, numfield], [rational, rational],
                          numfield]
                         (+),
                     restrict
                         [[numfield, numfield], [rational, rational],
                          numfield]
                         (*),
                     0, 1, -1, -1],
                +[rational,
                  restrict
                      [[numfield, numfield], [rational, rational], numfield]
                      (+),
                  restrict
                      [[numfield, numfield], [rational, rational], numfield]
                      (*),
                  0, 1, -1, -1],
                *[rational,
                  restrict
                      [[numfield, numfield], [rational, rational], numfield]
                      (+),
                  restrict
                      [[numfield, numfield], [rational, rational], numfield]
                      (*),
                  0, 1, -1, -1]]
               (Hurwitz_ring, prime_mult_Hurwitz(p))(x1`1, x1`2)")
            (("1" (REWRITE "coset_product")
              (("1" (LEMMA "Hurwitz_ring_is_ring") (("1" (PROPAX) NIL NIL))
                NIL))
              NIL)
             ("2" (ASSERT) NIL NIL)
             ("3" (SKEEP)
              (("3" (EXPAND "restrict") (("3" (PROPAX) NIL NIL)) NIL)) NIL)
             ("4" (SKEEP)
              (("4" (EXPAND "restrict") (("4" (PROPAX) NIL NIL)) NIL)) NIL))
            NIL))
          NIL))
        NIL)
       ("14" (SKEEP)
        (("14"
          (CASE-REPLACE "add[quat[rational,
                    restrict
                        [[numfield, numfield], [rational, rational],
                         numfield]
                        (+),
                    restrict
                        [[numfield, numfield], [rational, rational],
                         numfield]
                        (*),
                    0, 1, -1, -1],
               +[rational,
                 restrict
                     [[numfield, numfield], [rational, rational], numfield]
                     (+),
                 restrict
                     [[numfield, numfield], [rational, rational], numfield]
                     (*),
                 0, 1, -1, -1]]
               (Hurwitz_ring, prime_mult_Hurwitz(p))(x1) = add[quat[rational,
                    restrict
                        [[numfield, numfield], [rational, rational],
                         numfield]
                        (+),
                    restrict
                        [[numfield, numfield], [rational, rational],
                         numfield]
                        (*),
                    0, 1, -1, -1],
               +[rational,
                 restrict
                     [[numfield, numfield], [rational, rational], numfield]
                     (+),
                 restrict
                     [[numfield, numfield], [rational, rational], numfield]
                     (*),
                 0, 1, -1, -1]]
               (Hurwitz_ring, prime_mult_Hurwitz(p))(x1`1, x1`2)")
          (("1" (REWRITE "coset_add")
            (("1" (LEMMA "Hurwitz_ring_is_ring") (("1" (PROPAX) NIL NIL)) NIL))
            NIL)
           ("2" (ASSERT) NIL NIL)
           ("3" (SKEEP)
            (("3" (EXPAND "restrict") (("3" (PROPAX) NIL NIL)) NIL)) NIL)
           ("4" (EXPAND "restrict") (("4" (PROPAX) NIL NIL)) NIL))
          NIL))
        NIL)
       ("15" (INST 1 "prime_mult_Hurwitz(p)")
        (("15" (REWRITE "lcoset_iff_coset" :DIR RL)
          (("15" (EXPAND "left_coset?")
            (("15" (INST 1 "zero_q")
              (("1" (REWRITE "left_zero") NIL NIL)
               ("2" (EXPAND "zero_q")
                (("2" (EXPAND "Hurwitz_ring")
                  (("2" (INST 1 "0" "0" "0" "0")
                    (("2" (HIDE-ALL-BUT 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|rat_plus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|isomorphic_division_ring| FORMULA-DECL NIL |ring_with_one_homomorphism|
     |algebra|)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|quat| TYPE-EQ-DECL NIL |quaternions_def| |algebra|)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (+ CONST-DECL "quat" |quaternions_def| |algebra|)
    (|coset?| CONST-DECL "bool" |cosets_def| |algebra|)
    (|Hurwitz_ring| CONST-DECL "set[quat[rational,
         restrict[[numfield, numfield], [rational, rational], numfield](+),
         restrict[[numfield, numfield], [rational, rational], numfield](*),
         0, 1, -1, -1]]"
     |quaternions_Hurwitz_rings| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (* CONST-DECL "[quat, quat -> quat]" |quaternions_def| |algebra|)
    (|zero_q| CONST-DECL "quat" |quaternions_def| |algebra|)
    (|ring?| CONST-DECL "bool" |ring_def| |algebra|)
    (|ideal?| CONST-DECL "bool" |ring_ideal_def| |algebra|)
    (|Hurwitz_ideal| NONEMPTY-TYPE-EQ-DECL NIL |quaternions_Hurwitz_rings| NIL)
    (|prime_mult_Hurwitz| CONST-DECL "Hurwitz_ideal"
     |quaternions_Hurwitz_rings| NIL)
    (|coset| TYPE-EQ-DECL NIL |cosets_def| |algebra|)
    (|add| CONST-DECL "set[T]" |cosets_def| |algebra|)
    (|product| CONST-DECL "set[T]" |product_coset_def| |algebra|)
    (+ CONST-DECL "set[T]" |cosets_def| |algebra|)
    (|one_q| CONST-DECL "quat" |quaternions_def| |algebra|)
    (|ring| NONEMPTY-TYPE-EQ-DECL NIL |ring| |algebra|)
    (Z CONST-DECL
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     |ring_zn| |algebra_examples|)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nZ| CONST-DECL "set[int]" |ring_zn| |algebra_examples|)
    (|quat_coset_Zp| TYPE-EQ-DECL NIL |quaternions_zp| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|group?| CONST-DECL "bool" |group_def| |algebra|)
    (|fullset| CONST-DECL "set" |sets| NIL)
    (|ring_with_one?| CONST-DECL "bool" |ring_with_one_def| |algebra|)
    (/ CONST-DECL "setof[set[T]]" |cosets_def| |algebra|)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|p| SKOLEM-CONST-DECL "(prime?)" |quaternions_Hurwitz_isomorphism| NIL)
    (|ring_with_one| NONEMPTY-TYPE-EQ-DECL NIL |ring_with_one| |algebra|)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|quat_Zp| CONST-DECL "set[quat_coset_Zp(p)]" |quaternions_zp| NIL)
    (|quat_Zp_odd_not_div_ring| FORMULA-DECL NIL |quaternions_zp| NIL)
    (|field?| CONST-DECL "bool" |field_def| |algebra|)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|remove| CONST-DECL "set" |sets| NIL)
    (|quat_is_ring_w_one| FORMULA-DECL NIL |quaternions| |algebra|)
    (|Zp_prime_is_field| FORMULA-DECL NIL |ring_zn| |algebra_examples|)
    (Z CONST-DECL "setofsets[int]" |ring_zn| |algebra_examples|)
    (|setofsets| TYPE-EQ-DECL NIL |sets| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|zn_identity| FORMULA-DECL NIL |ring_zn_extra| |algebra_examples|)
    (|member| CONST-DECL "bool" |sets| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|left_zero| FORMULA-DECL NIL |ring_cosets_lemmas| |algebra|)
    (|equal_cosets_rem| FORMULA-DECL NIL |ring_zn_extra| |algebra_examples|)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|rem_mod| FORMULA-DECL NIL |modulo_arithmetic| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|mod| NONEMPTY-TYPE-EQ-DECL NIL |euclidean_division| NIL)
    (|rem_zero| FORMULA-DECL NIL |modulo_arithmetic| NIL)
    (|rhs| SKOLEM-CONST-DECL "set[int]" |quaternions_Hurwitz_isomorphism| NIL)
    (|quotient_ring_with_one| FORMULA-DECL NIL |quotient_rings_with_one|
     |algebra|)
    (|ideal| TYPE-EQ-DECL NIL |ring_ideal_def| |algebra|)
    (|Hurwitz_ring_is_ring_w_one| FORMULA-DECL NIL |quaternions_Hurwitz_rings|
     NIL)
    (|isomorphism_quot_Hurwitz_zp| FORMULA-DECL NIL
     |quaternions_Hurwitz_isomorphism| NIL)
    (|quat_zp_is_ring_w_one| FORMULA-DECL NIL |quaternions_zp| NIL)
    (|fullset_quot_ring_with_one| FORMULA-DECL NIL |quotient_rings_with_one|
     |algebra|)
    (|zn_add_group| FORMULA-DECL NIL |ring_zn_extra| |algebra_examples|)
    (|nZ_ideal| FORMULA-DECL NIL |ring_zn| |algebra_examples|)
    (|ideal_is_coset| FORMULA-DECL NIL |ring_cosets_lemmas| |algebra|)
    (|zn_product_pair| FORMULA-DECL NIL |ring_zn_extra| |algebra_examples|)
    (|zn_add_pair| FORMULA-DECL NIL |ring_zn_extra| |algebra_examples|)
    (|lcoset_iff_coset| FORMULA-DECL NIL |ring_cosets_lemmas| |algebra|)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|left_coset?| CONST-DECL "bool" |cosets_def| |algebra|)
    (|nnrat_div_posrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals|
     NIL)
    (|nnrat_plus_nnrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals|
     NIL)
    (|coset_product| FORMULA-DECL NIL |quotient_rings| |algebra|)
    (|Hurwitz_ring_is_ring| FORMULA-DECL NIL |quaternions_Hurwitz_rings| NIL)
    (|coset_add| FORMULA-DECL NIL |quotient_rings| |algebra|))
   SHOSTAK)))

