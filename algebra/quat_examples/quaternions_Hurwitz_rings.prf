(|quaternions_Hurwitz_rings|
 (|IMP_quaternions_TCC1| 0
  (|IMP_quaternions_TCC1-0| "" 3933736354 ("" (SUBTYPE-TCC) NIL NIL)
   ((|fullset| CONST-DECL "set" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|remove| CONST-DECL "set" |sets| NIL))
   SHOSTAK
   (|IMP_quaternions| SUBTYPE "-1"
    "(sets[rational].remove(0, sets[rational].fullset))"))
  (|IMP_quaternions_TCC1-1| NIL 3923224648 ("" (SUBTYPE-TCC) NIL NIL)
   ((|remove| CONST-DECL "set" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|fullset| CONST-DECL "set" |sets| NIL))
   NIL
   (|IMP_quaternions| SUBTYPE "-1"
    "(sets[rational].remove(0, sets[rational].fullset))")))
 (|IMP_quaternions_TCC2| 0
  (|IMP_quaternions_TCC2-0| "" 3933736355
   ("" (EXPAND "field?")
    (("" (SPLIT)
      (("1" (EXPAND "division_ring?")
        (("1" (SPLIT)
          (("1" (EXPAND "ring_with_one?")
            (("1" (SPLIT)
              (("1" (EXPAND "ring?")
                (("1" (GRIND)
                  (("1" (EXPAND "right_distributive?") (("1" (GRIND) NIL NIL))
                    NIL)
                   ("2" (EXPAND "left_distributive?") (("2" (GRIND) NIL NIL))
                    NIL)
                   ("3" (EXPAND "star_closed?") (("3" (GRIND) NIL NIL)) NIL)
                   ("4" (EXPAND "abelian_group?")
                    (("4" (GRIND)
                      (("4" (EXPAND "group?")
                        (("4" (GRIND)
                          (("1" (EXPAND "inv_exists?")
                            (("1" (SKEEP)
                              (("1" (INST 1 "-x") (("1" (GRIND) NIL NIL)) NIL))
                              NIL))
                            NIL)
                           ("2" (EXPAND "monoid?")
                            (("2" (GRIND)
                              (("2" (EXPAND "monad?")
                                (("2" (GRIND)
                                  (("2" (EXPAND "star_closed?")
                                    (("2" (GRIND) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (EXPAND "monoid?")
                (("2" (GRIND)
                  (("2" (EXPAND "monad?")
                    (("2" (GRIND)
                      (("2" (EXPAND "star_closed?")
                        (("2" (SKEEP) (("2" (GRIND) NIL NIL)) NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (EXPAND "group?")
            (("2" (GRIND)
              (("1" (EXPAND "inv_exists?")
                (("1" (SKEEP)
                  (("1" (INST 1 "1/x")
                    (("1" (GRIND) NIL NIL)
                     ("2" (TYPEPRED "x") (("2" (GRIND) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (EXPAND "monoid?")
                (("2" (GRIND)
                  (("2" (EXPAND "monad?")
                    (("2" (GRIND)
                      (("2" (EXPAND "star_closed?")
                        (("2" (SKEEP)
                          (("2" (GRIND)
                            (("2" (LEMMA "zero_times3")
                              (("2" (INST?)
                                (("2" (TYPEPRED "x")
                                  (("2" (TYPEPRED "y") (("2" (GRIND) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (GRIND) NIL NIL))
      NIL))
    NIL)
   ((|restrict| CONST-DECL "R" |restrict| NIL)
    (|associative?| CONST-DECL "bool" |operator_defs| NIL)
    (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|right_distributive?| CONST-DECL "bool" |operator_defs_more| |algebra|)
    (|left_distributive?| CONST-DECL "bool" |operator_defs_more| |algebra|)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|fullset| CONST-DECL "set" |sets| NIL)
    (|star_closed?| CONST-DECL "bool" |groupoid_def| |algebra|)
    (|commutative?| CONST-DECL "bool" |operator_defs| NIL)
    (|rat_plus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|minus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|inv_exists?| CONST-DECL "bool" |group_def| |algebra|)
    (|identity?| CONST-DECL "bool" |operator_defs| NIL)
    (|monad?| CONST-DECL "bool" |monad_def| |algebra|)
    (|monoid?| CONST-DECL "bool" |monoid_def| |algebra|)
    (|group?| CONST-DECL "bool" |group_def| |algebra|)
    (|abelian_group?| CONST-DECL "bool" |group_def| |algebra|)
    (|ring?| CONST-DECL "bool" |ring_def| |algebra|)
    (|ring_with_one?| CONST-DECL "bool" |ring_with_one_def| |algebra|)
    (|nzrat_div_nzrat_is_nzrat| APPLICATION-JUDGEMENT "nzrat" |rationals| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|remove| CONST-DECL "set" |sets| NIL)
    (|x| SKOLEM-CONST-DECL "(remove[rational](0, fullset[rational]))"
     |quaternions_Hurwitz_rings| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|zero_times3| FORMULA-DECL NIL |real_props| NIL)
    (|division_ring?| CONST-DECL "bool" |division_ring_def| |algebra|)
    (|field?| CONST-DECL "bool" |field_def| |algebra|))
   SHOSTAK
   (|IMP_quaternions| ASSUMING
    "algebra@quaternions[rational, restrict[[numfield, numfield], [rational, rational], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [rational, rational], numfield].restrict(number_fields.*), 0, 1, -1, -1].quaternions"
    "fullset_is_field: ASSUMPTION field_def[quaternions.T, quaternions.+, quaternions.*, quaternions.zero, quaternions.one].field?(sets[quaternions.T].fullset)"))
  (|IMP_quaternions_TCC2-1| NIL 3923224648
   ("" (EXPAND "field?")
    (("" (SPLIT)
      (("1" (EXPAND "division_ring?")
        (("1" (SPLIT)
          (("1" (EXPAND "ring_with_one?")
            (("1" (SPLIT)
              (("1" (EXPAND "ring?")
                (("1" (GRIND)
                  (("1" (EXPAND "right_distributive?") (("1" (GRIND) NIL NIL))
                    NIL)
                   ("2" (EXPAND "left_distributive?") (("2" (GRIND) NIL NIL))
                    NIL)
                   ("3" (EXPAND "star_closed?") (("3" (GRIND) NIL NIL)) NIL)
                   ("4" (EXPAND "abelian_group?")
                    (("4" (GRIND)
                      (("4" (EXPAND "group?")
                        (("4" (GRIND)
                          (("1" (EXPAND "inv_exists?")
                            (("1" (SKEEP)
                              (("1" (INST 1 "-x") (("1" (GRIND) NIL NIL)) NIL))
                              NIL))
                            NIL)
                           ("2" (EXPAND "monoid?")
                            (("2" (GRIND)
                              (("2" (EXPAND "monad?")
                                (("2" (GRIND)
                                  (("2" (EXPAND "star_closed?")
                                    (("2" (GRIND) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (EXPAND "monoid?")
                (("2" (GRIND)
                  (("2" (EXPAND "monad?")
                    (("2" (GRIND)
                      (("2" (EXPAND "star_closed?")
                        (("2" (SKEEP) (("2" (GRIND) NIL NIL)) NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (EXPAND "group?")
            (("2" (GRIND)
              (("1" (EXPAND "inv_exists?")
                (("1" (SKEEP)
                  (("1" (INST 1 "1/x")
                    (("1" (GRIND) NIL NIL)
                     ("2" (TYPEPRED "x") (("2" (GRIND) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (EXPAND "monoid?")
                (("2" (GRIND)
                  (("2" (EXPAND "monad?")
                    (("2" (GRIND)
                      (("2" (EXPAND "star_closed?")
                        (("2" (SKEEP)
                          (("2" (GRIND)
                            (("2" (LEMMA "zero_times3")
                              (("2" (INST?)
                                (("2" (TYPEPRED "x")
                                  (("2" (TYPEPRED "y") (("2" (GRIND) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (GRIND) NIL NIL))
      NIL))
    NIL)
   ((|restrict| CONST-DECL "R" |restrict| NIL)
    (|associative?| CONST-DECL "bool" |operator_defs| NIL)
    (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|right_distributive?| CONST-DECL "bool" |operator_defs_more| |algebra|)
    (|left_distributive?| CONST-DECL "bool" |operator_defs_more| |algebra|)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|fullset| CONST-DECL "set" |sets| NIL)
    (|star_closed?| CONST-DECL "bool" |groupoid_def| |algebra|)
    (|commutative?| CONST-DECL "bool" |operator_defs| NIL)
    (|rat_plus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|minus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|inv_exists?| CONST-DECL "bool" |group_def| |algebra|)
    (|identity?| CONST-DECL "bool" |operator_defs| NIL)
    (|monad?| CONST-DECL "bool" |monad_def| |algebra|)
    (|monoid?| CONST-DECL "bool" |monoid_def| |algebra|)
    (|group?| CONST-DECL "bool" |group_def| |algebra|)
    (|abelian_group?| CONST-DECL "bool" |group_def| |algebra|)
    (|ring?| CONST-DECL "bool" |ring_def| |algebra|)
    (|ring_with_one?| CONST-DECL "bool" |ring_with_one_def| |algebra|)
    (|nzrat_div_nzrat_is_nzrat| APPLICATION-JUDGEMENT "nzrat" |rationals| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|remove| CONST-DECL "set" |sets| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|zero_times3| FORMULA-DECL NIL |real_props| NIL)
    (|division_ring?| CONST-DECL "bool" |division_ring_def| |algebra|)
    (|field?| CONST-DECL "bool" |field_def| |algebra|))
   NIL
   (|IMP_quaternions| ASSUMING
    "algebra@quaternions[rational, restrict[[numfield, numfield], [rational, rational], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [rational, rational], numfield].restrict(number_fields.*), 0, 1, -1, -1].quaternions"
    "fullset_is_field: ASSUMPTION field_def[quaternions.T, quaternions.+, quaternions.*, quaternions.zero, quaternions.one].field?(sets[quaternions.T].fullset)")))
 (|Hurwitz_ring_TCC1| 0
  (|Hurwitz_ring_TCC1-0| "" 3933736356
   ("" (EXPAND "zero_q")
    (("" (EXPAND "Hurwitz_ring")
      (("" (INST 1 "0" "0" "0" "0") (("" (ASSERT) NIL NIL)) NIL)) NIL))
    NIL)
   ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|Hurwitz_ring| CONST-DECL "set[quat[rational,
         restrict[[numfield, numfield], [rational, rational], numfield](+),
         restrict[[numfield, numfield], [rational, rational], numfield](*),
         0, 1, -1, -1]]"
     |quaternions_Hurwitz_rings| NIL)
    (|nnrat_plus_nnrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals|
     NIL)
    (|nnrat_div_posrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals|
     NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|zero_q| CONST-DECL "quat" |quaternions_def| |algebra|))
   SHOSTAK
   (|Hurwitz_ring| SUBTYPE
    "quaternions_def[rational, restrict[[numfield, numfield], [rational, rational], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [rational, rational], numfield].restrict(number_fields.*), 0, 1, -1, -1].zero_q"
    "Hurwitz_ring"))
  (|Hurwitz_ring_TCC1-1| NIL 3926502309
   ("" (EXPAND "zero_q")
    (("" (EXPAND "Hurwitz_ring")
      (("" (INST 1 "0" "0" "0" "0") (("" (ASSERT) NIL NIL)) NIL)) NIL))
    NIL)
   ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|Hurwitz_ring| CONST-DECL "set[quat[rational,
         restrict[[numfield, numfield], [rational, rational], numfield](+),
         restrict[[numfield, numfield], [rational, rational], numfield](*),
         0, 1, -1, -1]]"
     |quaternions_Hurwitz_rings| NIL)
    (|nnrat_plus_nnrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals|
     NIL)
    (|nnrat_div_posrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals|
     NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|zero_q| CONST-DECL "quat" |quaternions_def| |algebra|))
   NIL
   (|Hurwitz_ring| SUBTYPE
    "quaternions_def[rational, restrict[[numfield, numfield], [rational, rational], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [rational, rational], numfield].restrict(number_fields.*), 0, 1, -1, -1].zero_q"
    "Hurwitz_ring")))
 (|Hurwitz_prod_charac| 0
  (|Hurwitz_prod_charac-1| NIL 3935054186
   ("" (SKEEP)
    ((""
      (STOP-REWRITE "right_identity" "left_identity" "one_left" "one_right"
       "zero_plus" "plus_zero")
      (("" (REWRITE "q_prod_charac")
        (("" (CASE-REPLACE "inv(-1) = 1")
          (("1" (CASE-REPLACE "inv(u`z * v`y) = -(u`z * v`y)")
            (("1" (SIMPLIFY) (("1" (PROPAX) NIL NIL)) NIL)
             ("2" (ASSERT) NIL NIL))
            NIL)
           ("2" (ASSERT) NIL NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|inv| CONST-DECL "{y | x * y = one AND y * x = one}" |group| |algebra|)
    (|rat_minus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|minus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|Hurwitz_ring| NONEMPTY-TYPE-EQ-DECL NIL |quaternions_Hurwitz_rings| NIL)
    (|Hurwitz_ring| CONST-DECL "set[quat[rational,
         restrict[[numfield, numfield], [rational, rational], numfield](+),
         restrict[[numfield, numfield], [rational, rational], numfield](*),
         0, 1, -1, -1]]"
     |quaternions_Hurwitz_rings| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|quat| TYPE-EQ-DECL NIL |quaternions_def| |algebra|)
    (|q_prod_charac| FORMULA-DECL NIL |quaternions| |algebra|)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|nzrat_times_nzrat_is_nzrat| APPLICATION-JUDGEMENT "nzrat" |rationals|
     NIL)
    (|negate_nz_T_is_nz_T| APPLICATION-JUDGEMENT "nz_T[rational,
     restrict[[numfield, numfield], [rational, rational], numfield](+),
     restrict[[numfield, numfield], [rational, rational], numfield](*), 0]"
     |quaternions_Hurwitz_rings| NIL)
    (|rat_plus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL))
   SHOSTAK))
 (|mk_Hurwitz_TCC1| 0
  (|mk_Hurwitz_TCC1-0| "" 3933736360
   ("" (SKEEP)
    (("" (EXPAND "Hurwitz_ring")
      (("" (INST 1 "x" "y" "z" "t")
        (("" (SIMPLIFY) (("" (PROPAX) NIL NIL)) NIL)) NIL))
      NIL))
    NIL)
   ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|Hurwitz_ring| CONST-DECL "set[quat[rational,
         restrict[[numfield, numfield], [rational, rational], numfield](+),
         restrict[[numfield, numfield], [rational, rational], numfield](*),
         0, 1, -1, -1]]"
     |quaternions_Hurwitz_rings| NIL)
    (|rat_plus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   SHOSTAK
   (|mk_Hurwitz| SUBTYPE
    "(# x := number_fields./(quaternions_Hurwitz_rings.x, 2), y := (number_fields.+)(number_fields./(quaternions_Hurwitz_rings.x, 2), quaternions_Hurwitz_rings.y), z := (number_fields.+)(number_fields./(quaternions_Hurwitz_rings.x, 2), quaternions_Hurwitz_rings.z), t := (number_fields.+)(number_fields./(quaternions_Hurwitz_rings.x, 2), quaternions_Hurwitz_rings.t) #)"
    "(quaternions_Hurwitz_rings.Hurwitz_ring)"))
  (|mk_Hurwitz_TCC1-1| NIL 3924296381
   ("" (SKEEP)
    (("" (EXPAND "Hurwitz_ring")
      (("" (INST 1 "x" "y" "z" "t")
        (("" (SIMPLIFY) (("" (PROPAX) NIL NIL)) NIL)) NIL))
      NIL))
    NIL)
   ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|Hurwitz_ring| CONST-DECL "set[quat[rational,
         restrict[[numfield, numfield], [rational, rational], numfield](+),
         restrict[[numfield, numfield], [rational, rational], numfield](*),
         0, 1, -1, -1]]"
     |quaternions_Hurwitz_rings| NIL)
    (|rat_plus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   NIL
   (|mk_Hurwitz| SUBTYPE
    "(# x := number_fields./(quaternions_Hurwitz_rings.x, 2), y := (number_fields.+)(number_fields./(quaternions_Hurwitz_rings.x, 2), quaternions_Hurwitz_rings.y), z := (number_fields.+)(number_fields./(quaternions_Hurwitz_rings.x, 2), quaternions_Hurwitz_rings.z), t := (number_fields.+)(number_fields./(quaternions_Hurwitz_rings.x, 2), quaternions_Hurwitz_rings.t) #)"
    "(quaternions_Hurwitz_rings.Hurwitz_ring)")))
 (|Hurwitz_prod_charac2| 0
  (|Hurwitz_prod_charac2-1| NIL 3935054211
   (""
    (STOP-REWRITE "right_identity" "left_identity" "one_left" "one_right"
     "zero_plus" "plus_zero")
    (("" (SKEEP)
      (("" (REWRITE "Hurwitz_prod_charac") (("" (DECOMPOSE-EQUALITY) NIL NIL))
        NIL))
      NIL))
    NIL)
   ((- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|rat_minus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|negate_nz_T_is_nz_T| APPLICATION-JUDGEMENT "nz_T[rational,
     restrict[[numfield, numfield], [rational, rational], numfield](+),
     restrict[[numfield, numfield], [rational, rational], numfield](*), 0]"
     |quaternions_Hurwitz_rings| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|rat_plus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|Hurwitz_prod_charac| FORMULA-DECL NIL |quaternions_Hurwitz_rings| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|quat| TYPE-EQ-DECL NIL |quaternions_def| |algebra|)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|Hurwitz_ring| CONST-DECL "set[quat[rational,
         restrict[[numfield, numfield], [rational, rational], numfield](+),
         restrict[[numfield, numfield], [rational, rational], numfield](*),
         0, 1, -1, -1]]"
     |quaternions_Hurwitz_rings| NIL)
    (|Hurwitz_ring| NONEMPTY-TYPE-EQ-DECL NIL |quaternions_Hurwitz_rings| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL))
   SHOSTAK))
 (|Hurwitz_sum_closed| 0
  (|Hurwitz_sum_closed-3| "" 3933736299
   ("" (EXPAND "star_closed?")
    (("" (SKEEP)
      (("" (EXPAND "member")
        (("" (TYPEPRED "x")
          (("" (TYPEPRED "y")
            (("" (EXPAND "Hurwitz_ring")
              (("" (SKOLEM -1 ("x1" "y1" "z1" "t1"))
                (("" (SKOLEM -2 ("x2" "y2" "z2" "t2"))
                  (("" (FLATTEN)
                    (("" (INST 1 "x1+x2" "y1+y2" "z1+z2" "t1+t2")
                      (("" (EXPAND "+ ")
                        (("" (REPLACES -)
                          (("" (LEMMA "real_props.div_distributes")
                            (("" (INST?)
                              (("" (REPLACE -1 1)
                                (("" (SPLIT)
                                  (("1" (LEMMA "commutative_add")
                                    (("1" (INST?) (("1" (REPLACES -1) NIL NIL))
                                      NIL))
                                    NIL)
                                   ("2" (LEMMA "commutative_add")
                                    (("2" (INST?) (("2" (REPLACES -1) NIL NIL))
                                      NIL))
                                    NIL)
                                   ("3" (LEMMA "commutative_add")
                                    (("3" (INST?) (("3" (REPLACES -1) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|quat| TYPE-EQ-DECL NIL |quaternions_def| |algebra|)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|Hurwitz_ring| CONST-DECL "set[quat[rational,
         restrict[[numfield, numfield], [rational, rational], numfield](+),
         restrict[[numfield, numfield], [rational, rational], numfield](*),
         0, 1, -1, -1]]"
     |quaternions_Hurwitz_rings| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|commutative_add| FORMULA-DECL NIL |number_fields| NIL)
    (|div_distributes| FORMULA-DECL NIL |real_props| NIL)
    (+ CONST-DECL "quat" |quaternions_def| |algebra|)
    (|rat_plus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|star_closed?| CONST-DECL "bool" |groupoid_def| |algebra|))
   SHOSTAK)
  (|Hurwitz_sum_closed-2| NIL 3921657707
   ("" (EXPAND "star_closed?")
    (("" (SKEEP)
      (("" (EXPAND "member")
        (("" (TYPEPRED "x")
          (("" (TYPEPRED "y")
            (("" (EXPAND "Hurwitz_ring")
              (("" (SKOLEM -1 ("x1" "y1" "z1" "t1"))
                (("" (SKOLEM -2 ("x2" "y2" "z2" "t2"))
                  (("" (FLATTEN)
                    (("" (INST 1 "x1+x2" "y1+y2" "z1+z2" "t1+t2")
                      (("" (EXPAND "+ ")
                        (("" (REPLACES -)
                          (("" (LEMMA "real_props.div_distributes")
                            (("" (INST?)
                              (("" (REPLACE -1 1)
                                (("" (SPLIT)
                                  (("1" (LEMMA "commutative_add")
                                    (("1" (INST?) (("1" (REPLACES -1) NIL NIL))
                                      NIL))
                                    NIL)
                                   ("2" (LEMMA "commutative_add")
                                    (("2" (INST?) (("2" (REPLACES -1) NIL NIL))
                                      NIL))
                                    NIL)
                                   ("3" (LEMMA "commutative_add")
                                    (("3" (INST?) (("3" (REPLACES -1) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|quat| TYPE-EQ-DECL NIL |quaternions_def| |algebra|)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|Hurwitz_ring| CONST-DECL "set[quat[rational,
         restrict[[numfield, numfield], [rational, rational], numfield](+),
         restrict[[numfield, numfield], [rational, rational], numfield](*),
         0, 1, -1, -1]]"
     |quaternions_Hurwitz_rings| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|commutative_add| FORMULA-DECL NIL |number_fields| NIL)
    (|div_distributes| FORMULA-DECL NIL |real_props| NIL)
    (+ CONST-DECL "quat" |quaternions_def| |algebra|)
    (|rat_plus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|star_closed?| CONST-DECL "bool" |groupoid_def| |algebra|))
   NIL)
  (|Hurwitz_sum_closed-1| NIL 3921591502
   ("" (EXPAND "star_closed?")
    (("" (SKEEP)
      (("" (EXPAND "member")
        (("" (TYPEPRED "x" "y")
          (("" (EXPAND "Hurwitz_ring")
            (("" (SKEEP*)
              (("" (INST 1 "x_1 + x!1" "y!1 + y_1" " z + z!1" " t + t!1")
                (("" (EXPAND "+" 1)
                  (("" (SPLIT)
                    (("1" (REPLACES -1)
                      (("1" (REPLACES -4)
                        (("1" (LEMMA "commutative_add")
                          (("1" (INST -1 "x!1" "x_1")
                            (("1" (REPLACES -1)
                              (("1" (LEMMA "div_distributes")
                                (("1" (INST -1 "2" "x_1" "x!1")
                                  (("1" (REWRITE "conversion_quot")
                                    (("1" (REWRITE "conversion_quot")
                                      (("1" (POSTPONE) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (POSTPONE) NIL NIL) ("3" (POSTPONE) NIL NIL)
                     ("4" (POSTPONE) NIL NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|Hurwitz_prod_closed| 0
  (|Hurwitz_prod_closed-0| "" 3933736307
   ("" (EXPAND "star_closed?")
    (("" (SKEEP)
      (("" (EXPAND "member")
        (("" (TYPEPRED "x" "y")
          (("" (EXPAND "Hurwitz_ring")
            (("" (SKOLEM -1 ("x1" "y1" "z1" "t1"))
              (("" (SKOLEM -2 ("x2" "y2" "z2" "t2"))
                (("" (FLATTEN)
                  (("" (LEMMA "q_prod_charac")
                    (("" (INST -1 "x" "y")
                      (("" (REPLACES -1)
                        (("" (BETA)
                          ((""
                            (NAME-REPLACE "xy_x"
                             "x`x * y`x + x`y * y`y * (-1) + x`z * y`z * (-1) + x`t * y`t * inv(-1) * (-1)")
                            ((""
                              (NAME-REPLACE "xy_y"
                               "x`x * y`y + x`y * y`x + (inv(-1)) * x`z * y`t + -1 * x`t * y`z")
                              ((""
                                (NAME-REPLACE "xy_z"
                                 "x`x * y`z + x`z * y`x + -1 * x`y * y`t + inv(-1) * x`t * y`y")
                                ((""
                                  (NAME-REPLACE "invxz_yy" " inv(x`z * y`y)")
                                  ((""
                                    (NAME-REPLACE "xy_t"
                                     "x`x * y`t + x`y * y`z + invxz_yy + x`t * y`x")
                                    ((""
                                      (CASE
                                          "integer?(2* xy_x) AND integer?(xy_y - xy_x) AND integer?(xy_z - xy_x) AND integer?(xy_t - xy_x)")
                                      (("1" (FLATTEN)
                                        (("1"
                                          (INST 1 "2* xy_x" "xy_y - xy_x"
                                           "xy_z - xy_x" "xy_t - xy_x")
                                          (("1" (SPLIT)
                                            (("1" (GRIND) NIL NIL)
                                             ("2" (GRIND) NIL NIL)
                                             ("3" (GRIND) NIL NIL)
                                             ("4" (GRIND) NIL NIL))
                                            NIL)
                                           ("2" (EXPAND "integer?")
                                            (("2" (PROPAX) NIL NIL)) NIL)
                                           ("3" (EXPAND "integer?")
                                            (("3" (PROPAX) NIL NIL)) NIL)
                                           ("4" (EXPAND "integer?")
                                            (("4" (PROPAX) NIL NIL)) NIL)
                                           ("5" (EXPAND "integer?")
                                            (("5" (PROPAX) NIL NIL)) NIL))
                                          NIL))
                                        NIL)
                                       ("2" (HIDE 2)
                                        (("2" (EXPAND "xy_x")
                                          (("2" (EXPAND "xy_y")
                                            (("2" (EXPAND "xy_t")
                                              (("2" (EXPAND "invxz_yy")
                                                (("2" (EXPAND "xy_z")
                                                  (("2" (CASE "inv(-1) = 1")
                                                    (("1" (REPLACES -1)
                                                      (("1"
                                                        (CASE
                                                            "inv(x`z * y`y) = - (x`z * y`y)")
                                                        (("1" (SIMPLIFY)
                                                          (("1" (REPLACES -)
                                                            (("1"
                                                              (TYPEPRED "x1"
                                                               "y1" "z1" "t1"
                                                               "x2" "y2" "z2"
                                                               "t2")
                                                              (("1" (SIMPLIFY)
                                                                (("1"
                                                                  (CASE
                                                                      "FORALL (a,b:int) : 2 * (a/2 * b) = a * b")
                                                                  (("1"
                                                                    (INST? -1
                                                                     :COPY? T)
                                                                    (("1"
                                                                      (REPLACES
                                                                       -2)
                                                                      (("1"
                                                                        (INST?
                                                                         -1
                                                                         :COPY?
                                                                         T)
                                                                        (("1"
                                                                          (REPLACES
                                                                           -2)
                                                                          (("1"
                                                                            (INST?
                                                                             -1
                                                                             :COPY?
                                                                             T)
                                                                            (("1"
                                                                              (REPLACES
                                                                               -2)
                                                                              (("1"
                                                                                (INST?
                                                                                 -1
                                                                                 :COPY?
                                                                                 T)
                                                                                (("1"
                                                                                  (REPLACES
                                                                                   -2)
                                                                                  (("1"
                                                                                    (INST?
                                                                                     -1
                                                                                     :COPY?
                                                                                     T)
                                                                                    (("1"
                                                                                      (REPLACES
                                                                                       -2)
                                                                                      (("1"
                                                                                        (INST?
                                                                                         -1
                                                                                         :COPY?
                                                                                         T)
                                                                                        (("1"
                                                                                          (REPLACES
                                                                                           -2)
                                                                                          (("1"
                                                                                            (SIMPLIFY)
                                                                                            (("1"
                                                                                              (REWRITE
                                                                                               "neg_mult")
                                                                                              (("1"
                                                                                                (CASE-REPLACE
                                                                                                 "4 * (x1 / 2 * (x2 / 2)) = x1 * x2")
                                                                                                (("1"
                                                                                                  (EXPAND
                                                                                                   "integer?"
                                                                                                   1
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (EXPAND
                                                                                                     "integer?"
                                                                                                     1
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (EXPAND
                                                                                                       "integer?"
                                                                                                       1
                                                                                                       1)
                                                                                                      (("1"
                                                                                                        (CASE-REPLACE
                                                                                                         "-(x1 / 2 * (x2 / 2) + x1 / 2 * y2 + (x2 / 2 * z1 + y2 * z1)) = - x1 / 2 * (x2 / 2) - x1 / 2 * y2 - (x2 / 2 * z1 + y2 * z1)")
                                                                                                        (("1"
                                                                                                          (SIMPLIFY)
                                                                                                          (("1"
                                                                                                            (REWRITE
                                                                                                             "neg_div"
                                                                                                             1)
                                                                                                            (("1"
                                                                                                              (SIMPLIFY)
                                                                                                              (("1"
                                                                                                                (REWRITE
                                                                                                                 "neg_mult"
                                                                                                                 1)
                                                                                                                (("1"
                                                                                                                  (SIMPLIFY)
                                                                                                                  (("1"
                                                                                                                    (CASE-REPLACE
                                                                                                                     "-((x1 / 2) * (x2 / 2)) - y2 * z1 + 5 * (x1 / 2 * (x2 / 2)) = 4 * (x1 / 2 * (x2 / 2)) - y2 * z1")
                                                                                                                    (("1"
                                                                                                                      (REPLACES
                                                                                                                       -3)
                                                                                                                      (("1"
                                                                                                                        (EXPAND
                                                                                                                         "integer?")
                                                                                                                        (("1"
                                                                                                                          (PROPAX)
                                                                                                                          NIL
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL)
                                                                                                                     ("2"
                                                                                                                      (HIDE-ALL-BUT
                                                                                                                       1)
                                                                                                                      (("2"
                                                                                                                        (LEMMA
                                                                                                                         "commutative_add")
                                                                                                                        (("2"
                                                                                                                          (INST?)
                                                                                                                          (("2"
                                                                                                                            (REPLACES
                                                                                                                             -1)
                                                                                                                            NIL
                                                                                                                            NIL))
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL)
                                                                                                         ("2"
                                                                                                          (HIDE-ALL-BUT
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (LEMMA
                                                                                                             "minus_add")
                                                                                                            (("2"
                                                                                                              (INST
                                                                                                               -1
                                                                                                               "0"
                                                                                                               "(x1 / 2 * (x2 / 2) + x1 / 2 * y2 + (x2 / 2 * z1 + y2 * z1))")
                                                                                                              (("2"
                                                                                                                (REPLACES
                                                                                                                 -1)
                                                                                                                NIL
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL)
                                                                                                 ("2"
                                                                                                  (HIDE-ALL-BUT
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (REWRITE
                                                                                                     "real_props.div_times")
                                                                                                    (("2"
                                                                                                      (REWRITE
                                                                                                       "div_cancel1")
                                                                                                      NIL
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL)
                                                                   ("2"
                                                                    (HIDE-ALL-BUT
                                                                     1)
                                                                    (("2"
                                                                      (SKEEP)
                                                                      (("2"
                                                                        (GRIND)
                                                                        NIL
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL)
                                                         ("2" (HIDE-ALL-BUT 1)
                                                          (("2" (GRIND) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL)
                                                     ("2" (HIDE-ALL-BUT 1)
                                                      (("2" (GRIND) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|quat| TYPE-EQ-DECL NIL |quaternions_def| |algebra|)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|Hurwitz_ring| CONST-DECL "set[quat[rational,
         restrict[[numfield, numfield], [rational, rational], numfield](+),
         restrict[[numfield, numfield], [rational, rational], numfield](*),
         0, 1, -1, -1]]"
     |quaternions_Hurwitz_rings| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|integer?| CONST-DECL "bool" |integers| NIL)
    (|rat_minus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|xy_x| SKOLEM-CONST-DECL "rat" |quaternions_Hurwitz_rings| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|xy_y| SKOLEM-CONST-DECL "rat" |quaternions_Hurwitz_rings| NIL)
    (|xy_z| SKOLEM-CONST-DECL "rat" |quaternions_Hurwitz_rings| NIL)
    (|xy_t| SKOLEM-CONST-DECL "rat" |quaternions_Hurwitz_rings| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|left_identity| FORMULA-DECL NIL |monad| |algebra|)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|neg_mult| FORMULA-DECL NIL |extra_tegies| NIL)
    (|even_minus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|div_cancel1| FORMULA-DECL NIL |real_props| NIL)
    (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|times_u8_u8| APPLICATION-JUDGEMENT "uint16" |integertypes| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|div_times| FORMULA-DECL NIL |real_props| NIL)
    (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_add| FORMULA-DECL NIL |number_fields| NIL)
    (|commutative_add| FORMULA-DECL NIL |number_fields| NIL)
    (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|neg_div| FORMULA-DECL NIL |extra_tegies| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|invxz_yy| SKOLEM-CONST-DECL
     "{y_1 | y_1 + x`z * y`y = 0 AND y_1 + x`z * y`y = 0}"
     |quaternions_Hurwitz_rings| NIL)
    (|negate_nz_T_is_nz_T| APPLICATION-JUDGEMENT "nz_T[rational,
     restrict[[numfield, numfield], [rational, rational], numfield](+),
     restrict[[numfield, numfield], [rational, rational], numfield](*), 0]"
     |quaternions_Hurwitz_rings| NIL)
    (|rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL)
    (|inv| CONST-DECL "{y | x * y = one AND y * x = one}" |group| |algebra|)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|rat_plus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|q_prod_charac| FORMULA-DECL NIL |quaternions| |algebra|)
    (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|star_closed?| CONST-DECL "bool" |groupoid_def| |algebra|))
   SHOSTAK)
  (|Hurwitz_prod_closed-3| "second test" 3922873795
   ("" (EXPAND "star_closed?")
    (("" (SKEEP)
      (("" (EXPAND "member")
        (("" (TYPEPRED "x" "y")
          (("" (EXPAND "Hurwitz_ring")
            (("" (SKOLEM -1 ("x1" "y1" "z1" "t1"))
              (("" (SKOLEM -2 ("x2" "y2" "z2" "t2"))
                (("" (FLATTEN)
                  (("" (LEMMA "q_prod_charac")
                    (("" (INST -1 "x" "y")
                      (("" (REPLACES -1)
                        (("" (BETA)
                          ((""
                            (NAME-REPLACE "xy_x"
                             "x`x * y`x + x`y * y`y * (-1) + x`z * y`z * (-1) +
          x`t * y`t * inv(-1) * (-1)")
                            ((""
                              (NAME-REPLACE "xy_y"
                               "x`x * y`y + x`y * y`x + (inv(-1)) * x`z * y`t + -1 * x`t * y`z")
                              ((""
                                (NAME-REPLACE "xy_z"
                                 "x`x * y`z + x`z * y`x + -1 * x`y * y`t + inv(-1) * x`t * y`y")
                                ((""
                                  (NAME-REPLACE "invxz_yy" " inv(x`z * y`y)")
                                  ((""
                                    (NAME-REPLACE "xy_t"
                                     "x`x * y`t + x`y * y`z + invxz_yy + x`t * y`x")
                                    ((""
                                      (CASE
                                          "integer?(2* xy_x) AND integer?(xy_y - xy_x) AND integer?(xy_z - xy_x) AND integer?(xy_t - xy_x)")
                                      (("1" (FLATTEN)
                                        (("1"
                                          (INST 1 "2* xy_x" "xy_y - xy_x"
                                           "xy_z - xy_x" "xy_t - xy_x")
                                          (("1" (SPLIT)
                                            (("1" (GRIND) NIL NIL)
                                             ("2" (GRIND) NIL NIL)
                                             ("3" (GRIND) NIL NIL)
                                             ("4" (GRIND) NIL NIL))
                                            NIL)
                                           ("2" (EXPAND "integer?")
                                            (("2" (PROPAX) NIL NIL)) NIL)
                                           ("3" (EXPAND "integer?")
                                            (("3" (PROPAX) NIL NIL)) NIL)
                                           ("4" (EXPAND "integer?")
                                            (("4" (PROPAX) NIL NIL)) NIL)
                                           ("5" (EXPAND "integer?")
                                            (("5" (PROPAX) NIL NIL)) NIL))
                                          NIL))
                                        NIL)
                                       ("2" (HIDE 2)
                                        (("2" (EXPAND "xy_x")
                                          (("2" (EXPAND "xy_y")
                                            (("2" (EXPAND "xy_t")
                                              (("2" (EXPAND "invxz_yy")
                                                (("2" (EXPAND "xy_z")
                                                  (("2" (CASE "inv(-1) = 1")
                                                    (("1" (REPLACES -1)
                                                      (("1"
                                                        (CASE
                                                            "inv(x`z * y`y) = - (x`z * y`y)")
                                                        (("1" (SIMPLIFY)
                                                          (("1" (REPLACES -)
                                                            (("1"
                                                              (TYPEPRED "x1"
                                                               "y1" "z1" "t1"
                                                               "x2" "y2" "z2"
                                                               "t2")
                                                              (("1" (SIMPLIFY)
                                                                (("1"
                                                                  (CASE
                                                                      "FORALL (a,b:int) : 2 * (a/2 * b)  =  a * b")
                                                                  (("1"
                                                                    (INST? -1
                                                                     :COPY? T)
                                                                    (("1"
                                                                      (REPLACES
                                                                       -2)
                                                                      (("1"
                                                                        (INST?
                                                                         -1
                                                                         :COPY?
                                                                         T)
                                                                        (("1"
                                                                          (REPLACES
                                                                           -2)
                                                                          (("1"
                                                                            (INST?
                                                                             -1
                                                                             :COPY?
                                                                             T)
                                                                            (("1"
                                                                              (REPLACES
                                                                               -2)
                                                                              (("1"
                                                                                (INST?
                                                                                 -1
                                                                                 :COPY?
                                                                                 T)
                                                                                (("1"
                                                                                  (REPLACES
                                                                                   -2)
                                                                                  (("1"
                                                                                    (INST?
                                                                                     -1
                                                                                     :COPY?
                                                                                     T)
                                                                                    (("1"
                                                                                      (REPLACES
                                                                                       -2)
                                                                                      (("1"
                                                                                        (INST?
                                                                                         -1
                                                                                         :COPY?
                                                                                         T)
                                                                                        (("1"
                                                                                          (REPLACES
                                                                                           -2)
                                                                                          (("1"
                                                                                            (SIMPLIFY)
                                                                                            (("1"
                                                                                              (REWRITE
                                                                                               "neg_mult")
                                                                                              (("1"
                                                                                                (CASE-REPLACE
                                                                                                 "4 * (x1 / 2 * (x2 / 2)) =  x1 * x2")
                                                                                                (("1"
                                                                                                  (EXPAND
                                                                                                   "integer?"
                                                                                                   1
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (EXPAND
                                                                                                     "integer?"
                                                                                                     1
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (EXPAND
                                                                                                       "integer?"
                                                                                                       1
                                                                                                       1)
                                                                                                      (("1"
                                                                                                        (CASE-REPLACE
                                                                                                         "-(x1 / 2 * (x2 / 2) + x1 / 2 * y2 +
                      (x2 / 2 * z1 + y2 * z1)) = - x1 / 2 * (x2 / 2) - x1 / 2 * y2 -
                      (x2 / 2 * z1 + y2 * z1)")
                                                                                                        (("1"
                                                                                                          (SIMPLIFY)
                                                                                                          (("1"
                                                                                                            (REWRITE
                                                                                                             "neg_div"
                                                                                                             1)
                                                                                                            (("1"
                                                                                                              (SIMPLIFY)
                                                                                                              (("1"
                                                                                                                (REWRITE
                                                                                                                 "neg_mult"
                                                                                                                 1)
                                                                                                                (("1"
                                                                                                                  (SIMPLIFY)
                                                                                                                  (("1"
                                                                                                                    (CASE-REPLACE
                                                                                                                     "-((x1 / 2) * (x2 / 2)) - y2 * z1 +
                    5 * (x1 / 2 * (x2 / 2)) =  4 * (x1 / 2 * (x2 / 2))   - y2 * z1")
                                                                                                                    (("1"
                                                                                                                      (REPLACES
                                                                                                                       -3)
                                                                                                                      (("1"
                                                                                                                        (EXPAND
                                                                                                                         "integer?")
                                                                                                                        (("1"
                                                                                                                          (PROPAX)
                                                                                                                          NIL
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL)
                                                                                                                     ("2"
                                                                                                                      (HIDE-ALL-BUT
                                                                                                                       1)
                                                                                                                      (("2"
                                                                                                                        (LEMMA
                                                                                                                         "commutative_add")
                                                                                                                        (("2"
                                                                                                                          (INST?)
                                                                                                                          (("2"
                                                                                                                            (REPLACES
                                                                                                                             -1)
                                                                                                                            NIL
                                                                                                                            NIL))
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL)
                                                                                                         ("2"
                                                                                                          (HIDE-ALL-BUT
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (LEMMA
                                                                                                             "minus_add")
                                                                                                            (("2"
                                                                                                              (INST
                                                                                                               -1
                                                                                                               "0"
                                                                                                               "(x1 / 2 * (x2 / 2) + x1 / 2 * y2 + (x2 / 2 * z1 + y2 * z1))")
                                                                                                              (("2"
                                                                                                                (REPLACES
                                                                                                                 -1)
                                                                                                                NIL
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL)
                                                                                                 ("2"
                                                                                                  (HIDE-ALL-BUT
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (REWRITE
                                                                                                     "real_props.div_times")
                                                                                                    (("2"
                                                                                                      (REWRITE
                                                                                                       "div_cancel1")
                                                                                                      NIL
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL)
                                                                   ("2"
                                                                    (HIDE-ALL-BUT
                                                                     1)
                                                                    (("2"
                                                                      (SKEEP)
                                                                      (("2"
                                                                        (GRIND)
                                                                        NIL
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL)
                                                         ("2" (HIDE-ALL-BUT 1)
                                                          (("2" (GRIND) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL)
                                                     ("2" (HIDE-ALL-BUT 1)
                                                      (("2" (GRIND) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|quat| TYPE-EQ-DECL NIL |quaternions_def| |algebra|)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|Hurwitz_ring| CONST-DECL "set[quat[rational,
         restrict[[numfield, numfield], [rational, rational], numfield](+),
         restrict[[numfield, numfield], [rational, rational], numfield](*),
         0, 1, -1, -1]]"
     |quaternions_Hurwitz_rings| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|integer?| CONST-DECL "bool" |integers| NIL)
    (|rat_minus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|left_identity| FORMULA-DECL NIL |monad| |algebra|)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|neg_mult| FORMULA-DECL NIL |extra_tegies| NIL)
    (|even_minus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|div_cancel1| FORMULA-DECL NIL |real_props| NIL)
    (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|times_u8_u8| APPLICATION-JUDGEMENT "uint16" |integertypes| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|div_times| FORMULA-DECL NIL |real_props| NIL)
    (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_add| FORMULA-DECL NIL |number_fields| NIL)
    (|commutative_add| FORMULA-DECL NIL |number_fields| NIL)
    (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|neg_div| FORMULA-DECL NIL |extra_tegies| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL)
    (|inv| CONST-DECL "{y | x * y = one AND y * x = one}" |group| |algebra|)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|rat_plus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|q_prod_charac| FORMULA-DECL NIL |quaternions| |algebra|)
    (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|star_closed?| CONST-DECL "bool" |groupoid_def| |algebra|))
   SHOSTAK)
  (|Hurwitz_prod_closed-2| "second proof" 3922872826
   ("" (EXPAND "star_closed?")
    (("" (SKEEP)
      (("" (EXPAND "member")
        (("" (TYPEPRED "x" "y")
          (("" (EXPAND "Hurwitz_ring")
            (("" (SKOLEM -1 ("x1" "y1" "z1" "t1"))
              (("" (SKOLEM -2 ("x2" "y2" "z2" "t2"))
                (("" (FLATTEN)
                  (("" (LEMMA "q_prod_charac")
                    (("" (INST -1 "x" "y")
                      (("" (REPLACES -1)
                        (("" (BETA)
                          ((""
                            (NAME-REPLACE "xy_x"
                             "x`x * y`x + x`y * y`y * (-1) + x`z * y`z * (-1) +
          x`t * y`t * inv(-1) * (-1)")
                            ((""
                              (NAME-REPLACE "xy_y"
                               "x`x * y`y + x`y * y`x + (inv(-1)) * x`z * y`t + -1 * x`t * y`z")
                              ((""
                                (NAME-REPLACE "xy_z"
                                 "x`x * y`z + x`z * y`x + -1 * x`y * y`t + inv(-1) * x`t * y`y")
                                ((""
                                  (NAME-REPLACE "invxz_yy" " inv(x`z * y`y)")
                                  ((""
                                    (NAME-REPLACE "xy_t"
                                     "x`x * y`t + x`y * y`z + invxz_yy + x`t * y`x")
                                    ((""
                                      (CASE
                                          "integer?(2* xy_x) AND integer?(xy_y - xy_x) AND integer?(xy_z - xy_x) AND integer?(xy_t - xy_x)")
                                      (("1" (FLATTEN)
                                        (("1"
                                          (INST 1 "2* xy_x" "xy_y - xy_x"
                                           "xy_z - xy_x" "xy_t - xy_x")
                                          (("1" (SPLIT)
                                            (("1" (GRIND) NIL NIL)
                                             ("2" (GRIND) NIL NIL)
                                             ("3" (GRIND) NIL NIL)
                                             ("4" (GRIND) NIL NIL))
                                            NIL)
                                           ("2" (EXPAND "integer?")
                                            (("2" (PROPAX) NIL NIL)) NIL)
                                           ("3" (EXPAND "integer?")
                                            (("3" (PROPAX) NIL NIL)) NIL)
                                           ("4" (EXPAND "integer?")
                                            (("4" (PROPAX) NIL NIL)) NIL)
                                           ("5" (EXPAND "integer?")
                                            (("5" (PROPAX) NIL NIL)) NIL))
                                          NIL))
                                        NIL)
                                       ("2" (HIDE 2)
                                        (("2" (EXPAND "xy_x")
                                          (("2" (EXPAND "xy_y")
                                            (("2" (EXPAND "xy_t")
                                              (("2" (EXPAND "invxz_yy")
                                                (("2" (EXPAND "xy_z")
                                                  (("2" (CASE "inv(-1) = 1")
                                                    (("1" (REPLACES -1)
                                                      (("1"
                                                        (CASE
                                                            "inv(x`z * y`y) = - (x`z * y`y)")
                                                        (("1"
                                                          (REWRITE "one_times")
                                                          (("1" (REPLACES -1)
                                                            (("1" (REPLACES -1)
                                                              (("1"
                                                                (REPLACES -1)
                                                                (("1"
                                                                  (REPLACES -1)
                                                                  (("1"
                                                                    (REPLACES
                                                                     -1)
                                                                    (("1"
                                                                      (REPLACES
                                                                       -1)
                                                                      (("1"
                                                                        (REPLACES
                                                                         -1)
                                                                        (("1"
                                                                          (REPLACES
                                                                           -1)
                                                                          (("1"
                                                                            (REPLACES
                                                                             -1)
                                                                            (("1"
                                                                              (TYPEPRED
                                                                               "x1"
                                                                               "y1"
                                                                               "z1"
                                                                               "t1"
                                                                               "x2"
                                                                               "y2"
                                                                               "z2"
                                                                               "t2")
                                                                              (("1"
                                                                                (CASE
                                                                                    "2 * (x1 / 2 * (x2 / 2)) -
                2 * ((y1 + x1 / 2) * (y2 + x2 / 2))
                - 2 * ((z1 + x1 / 2) * (z2 + x2 / 2))
                - 2 * ((t1 + x1 / 2) * (t2 + x2 / 2)) =   - (2 * y1 * y2 + y1 * x2 + y2 * x1  +  2* z1 * z2 + z1 * x2 + z2 * x1 + 2 * t1 * t2 + t1 * x2 +  x1 * t2 +  x1 * x2)")
                                                                                (("1"
                                                                                  (REPLACES)
                                                                                  (("1"
                                                                                    (EXPAND
                                                                                     "integer?"
                                                                                     1
                                                                                     1)
                                                                                    (("1"
                                                                                      (POSTPONE)
                                                                                      NIL
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL)
                                                                                 ("2"
                                                                                  (HIDE
                                                                                   2)
                                                                                  (("2"
                                                                                    (CASE
                                                                                        "FORALL (a,b,c,d:int) : 2 * ((a +b/2) * (c+d/2)) = 2 * a * c + a * d + b *c + b*d/2")
                                                                                    (("1"
                                                                                      (INST?
                                                                                       -1
                                                                                       :COPY?
                                                                                       T)
                                                                                      (("1"
                                                                                        (REPLACES
                                                                                         -2)
                                                                                        (("1"
                                                                                          (INST?
                                                                                           -1
                                                                                           :COPY?
                                                                                           T)
                                                                                          (("1"
                                                                                            (REPLACES
                                                                                             -2)
                                                                                            (("1"
                                                                                              (INST?
                                                                                               -1
                                                                                               :COPY?
                                                                                               T)
                                                                                              (("1"
                                                                                                (REPLACES
                                                                                                 -2)
                                                                                                (("1"
                                                                                                  (CASE-REPLACE
                                                                                                   "2 * (x1 / 2 * (x2 / 2)) =  x1 * x2 / 2")
                                                                                                  (("1"
                                                                                                    (HIDE
                                                                                                     -1
                                                                                                     -2)
                                                                                                    (("1"
                                                                                                      (LEMMA
                                                                                                       "times_commutative")
                                                                                                      (("1"
                                                                                                        (INST
                                                                                                         -1
                                                                                                         "x1 "
                                                                                                         "y2")
                                                                                                        (("1"
                                                                                                          (REPLACES
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (SIMPLIFY)
                                                                                                            (("1"
                                                                                                              (CASE-REPLACE
                                                                                                               "2 * (x1 * x2 / 2) = x1 * x2")
                                                                                                              (("1"
                                                                                                                (POSTPONE)
                                                                                                                NIL
                                                                                                                NIL)
                                                                                                               ("2"
                                                                                                                (POSTPONE)
                                                                                                                NIL
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL)
                                                                                                   ("2"
                                                                                                    (POSTPONE)
                                                                                                    NIL
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL)
                                                                                     ("2"
                                                                                      (POSTPONE)
                                                                                      NIL
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL)
                                                         ("2" (POSTPONE) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL)
                                                     ("2" (POSTPONE) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK)
  (|Hurwitz_prod_closed-1| NIL 3922265002
   ("" (EXPAND "star_closed?")
    (("" (SKEEP)
      (("" (EXPAND "member")
        (("" (TYPEPRED "x" "y")
          (("" (EXPAND "Hurwitz_ring")
            (("" (SKOLEM -1 ("x1" "y1" "z1" "t1"))
              (("" (SKOLEM -2 ("x2" "y2" "z2" "t2"))
                (("" (FLATTEN)
                  (("" (LEMMA "q_prod_charac")
                    (("" (INST -1 "x" "y")
                      (("" (REPLACES -1)
                        (("" (BETA)
                          ((""
                            (NAME-REPLACE "xy_x"
                             "x`x * y`x + x`y * y`y * (-1) + x`z * y`z * (-1) +
          x`t * y`t * inv(-1) * (-1)")
                            ((""
                              (NAME-REPLACE "xy_y"
                               "x`x * y`y + x`y * y`x + (inv(-1)) * x`z * y`t + -1 * x`t * y`z")
                              ((""
                                (NAME-REPLACE "xy_z"
                                 "x`x * y`z + x`z * y`x + -1 * x`y * y`t + inv(-1) * x`t * y`y")
                                ((""
                                  (NAME-REPLACE "invxz_yy" " inv(x`z * y`y)")
                                  ((""
                                    (NAME-REPLACE "xy_t"
                                     "x`x * y`t + x`y * y`z + invxz_yy + x`t * y`x")
                                    ((""
                                      (CASE
                                          "integer?(2* xy_x) AND integer?(xy_y - xy_x) AND integer?(xy_z - xy_x) AND integer?(xy_t - xy_x)")
                                      (("1" (FLATTEN)
                                        (("1"
                                          (INST 1 "2* xy_x" "xy_y - xy_x"
                                           "xy_z - xy_x" "xy_t - xy_x")
                                          (("1" (SPLIT)
                                            (("1" (GRIND) NIL NIL)
                                             ("2" (GRIND) NIL NIL)
                                             ("3" (GRIND) NIL NIL)
                                             ("4" (GRIND) NIL NIL))
                                            NIL)
                                           ("2" (EXPAND "integer?")
                                            (("2" (PROPAX) NIL NIL)) NIL)
                                           ("3" (EXPAND "integer?")
                                            (("3" (PROPAX) NIL NIL)) NIL)
                                           ("4" (EXPAND "integer?")
                                            (("4" (PROPAX) NIL NIL)) NIL)
                                           ("5" (EXPAND "integer?")
                                            (("5" (PROPAX) NIL NIL)) NIL))
                                          NIL))
                                        NIL)
                                       ("2" (HIDE 2)
                                        (("2" (EXPAND "xy_x")
                                          (("2" (EXPAND "xy_y")
                                            (("2" (EXPAND "xy_t")
                                              (("2" (EXPAND "invxz_yy")
                                                (("2" (EXPAND "xy_z")
                                                  (("2" (CASE "inv(-1) = 1")
                                                    (("1" (REPLACES -1)
                                                      (("1"
                                                        (CASE
                                                            "inv(x`z * y`y) = - (x`z * y`y)")
                                                        (("1" (REPLACES -1)
                                                          (("1" (REPLACES -1)
                                                            (("1" (REPLACES -1)
                                                              (("1"
                                                                (REPLACES -1)
                                                                (("1"
                                                                  (REPLACES -1)
                                                                  (("1"
                                                                    (REPLACES
                                                                     -1)
                                                                    (("1"
                                                                      (REPLACES
                                                                       -1)
                                                                      (("1"
                                                                        (REPLACES
                                                                         -1)
                                                                        (("1"
                                                                          (REPLACES
                                                                           -1)
                                                                          (("1"
                                                                            (TYPEPRED
                                                                             "x1"
                                                                             "y1"
                                                                             "z1"
                                                                             "t1"
                                                                             "x2"
                                                                             "y2"
                                                                             "z2"
                                                                             "t2")
                                                                            (("1"
                                                                              (SPLIT)
                                                                              (("1"
                                                                                (POSTPONE)
                                                                                NIL
                                                                                NIL)
                                                                               ("2"
                                                                                (POSTPONE)
                                                                                NIL
                                                                                NIL)
                                                                               ("3"
                                                                                (POSTPONE)
                                                                                NIL
                                                                                NIL)
                                                                               ("4"
                                                                                (POSTPONE)
                                                                                NIL
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL)
                                                         ("2" (REPLACES -1)
                                                          (("2" (REPLACES -1)
                                                            (("2" (REPLACES -1)
                                                              (("2"
                                                                (REPLACES -1)
                                                                (("2"
                                                                  (REPLACES -1)
                                                                  (("2"
                                                                    (REPLACES
                                                                     -1)
                                                                    (("2"
                                                                      (REPLACES
                                                                       -1)
                                                                      (("2"
                                                                        (REPLACES
                                                                         -1)
                                                                        (("2"
                                                                          (HIDE
                                                                           2)
                                                                          (("2"
                                                                            (POSTPONE)
                                                                            NIL
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL)
                                                     ("2" (HIDE-ALL-BUT 1)
                                                      (("2" (POSTPONE) NIL
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|Hurwitz_ring_is_ring| 0
  (|Hurwitz_ring_is_ring-0| "" 3933736309
   ("" (EXPAND "ring?")
    (("" (SPLIT)
      (("1" (EXPAND "abelian_group?")
        (("1" (SPLIT)
          (("1" (EXPAND "group?")
            (("1" (SPLIT)
              (("1" (EXPAND "monoid?")
                (("1" (SPLIT)
                  (("1" (EXPAND "monad?")
                    (("1" (SPLIT)
                      (("1" (LEMMA "Hurwitz_sum_closed")
                        (("1" (PROPAX) NIL NIL)) NIL)
                       ("2" (EXPAND "member")
                        (("2" (EXPAND "Hurwitz_ring")
                          (("2" (EXPAND "zero_q")
                            (("2" (INST 1 "0" "0" "0" "0")
                              (("2" (ASSERT) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("3" (EXPAND "identity?")
                        (("3" (SKEEP)
                          (("3" (SPLIT)
                            (("1" (EXPAND "restrict")
                              (("1" (REWRITE "plus_zero_q") NIL NIL)) NIL)
                             ("2" (EXPAND "restrict")
                              (("2" (REWRITE "zero_q_plus") NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (EXPAND "associative?")
                    (("2" (SKEEP)
                      (("2" (EXPAND "restrict")
                        (("2" (EXPAND "+ ") (("2" (PROPAX) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (EXPAND "inv_exists?")
                (("2" (SKEEP)
                  (("2" (INST 1 "(-1)*x")
                    (("1" (GRIND) NIL NIL)
                     ("2" (TYPEPRED "x")
                      (("2" (EXPAND "Hurwitz_ring")
                        (("2" (EXPAND "*")
                          (("2" (SKOLEM -1 ("x1" "y1" "z1" "t1"))
                            (("2" (FLATTEN)
                              (("2"
                                (INST 1 "-1 * x1" "-1 *y1" "-1 *z1" "-1 *t1")
                                (("2" (REPLACES -)
                                  (("2" (SIMPLIFY) (("2" (PROPAX) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (EXPAND "restrict")
            (("2" (EXPAND "commutative?")
              (("2" (SKEEP) (("2" (EXPAND "+ ") (("2" (PROPAX) NIL NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (LEMMA "Hurwitz_prod_closed") (("2" (PROPAX) NIL NIL)) NIL)
       ("3" (EXPAND "restrict")
        (("3" (EXPAND "associative?")
          (("3" (SKEEP)
            (("3" (LEMMA "q_assoc")
              (("3" (EXPAND "associative?") (("3" (INST?) NIL NIL)) NIL)) NIL))
            NIL))
          NIL))
        NIL)
       ("4" (EXPAND "restrict")
        (("4" (EXPAND "left_distributive?")
          (("4" (LEMMA "q_distrl") (("4" (SKEEP) (("4" (INST?) NIL NIL)) NIL))
            NIL))
          NIL))
        NIL)
       ("5" (EXPAND "restrict")
        (("5" (EXPAND "right_distributive?")
          (("5" (SKEEP)
            (("5" (LEMMA "q_distr")
              (("5" (EXPAND "distributive?") (("5" (INST?) NIL NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|Hurwitz_sum_closed| FORMULA-DECL NIL |quaternions_Hurwitz_rings| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|Hurwitz_ring| CONST-DECL "set[quat[rational,
         restrict[[numfield, numfield], [rational, rational], numfield](+),
         restrict[[numfield, numfield], [rational, rational], numfield](*),
         0, 1, -1, -1]]"
     |quaternions_Hurwitz_rings| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nnrat_div_posrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals|
     NIL)
    (|nnrat_plus_nnrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals|
     NIL)
    (|zero_q| CONST-DECL "quat" |quaternions_def| |algebra|)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|zero_q_plus| FORMULA-DECL NIL |quaternions| |algebra|)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|quat| TYPE-EQ-DECL NIL |quaternions_def| |algebra|)
    (|plus_zero_q| FORMULA-DECL NIL |quaternions| |algebra|)
    (|identity?| CONST-DECL "bool" |operator_defs| NIL)
    (|monad?| CONST-DECL "bool" |monad_def| |algebra|)
    (+ CONST-DECL "quat" |quaternions_def| |algebra|)
    (|associative?| CONST-DECL "bool" |operator_defs| NIL)
    (|monoid?| CONST-DECL "bool" |monoid_def| |algebra|)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|negate_nz_T_is_nz_T| APPLICATION-JUDGEMENT "nz_T[rational,
     restrict[[numfield, numfield], [rational, rational], numfield](+),
     restrict[[numfield, numfield], [rational, rational], numfield](*), 0]"
     |quaternions_Hurwitz_rings| NIL)
    (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|rat_plus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (* CONST-DECL "quat" |quaternions_def| |algebra|)
    (|x| SKOLEM-CONST-DECL "(Hurwitz_ring)" |quaternions_Hurwitz_rings| NIL)
    (|inv_exists?| CONST-DECL "bool" |group_def| |algebra|)
    (|group?| CONST-DECL "bool" |group_def| |algebra|)
    (|commutative?| CONST-DECL "bool" |operator_defs| NIL)
    (|abelian_group?| CONST-DECL "bool" |group_def| |algebra|)
    (|Hurwitz_prod_closed| FORMULA-DECL NIL |quaternions_Hurwitz_rings| NIL)
    (|q_assoc| FORMULA-DECL NIL |quaternions_def| |algebra|)
    (|left_distributive?| CONST-DECL "bool" |operator_defs_more| |algebra|)
    (|q_distrl| FORMULA-DECL NIL |quaternions_def| |algebra|)
    (|right_distributive?| CONST-DECL "bool" |operator_defs_more| |algebra|)
    (|q_distr| FORMULA-DECL NIL |quaternions_def| |algebra|)
    (|distributive?| CONST-DECL "bool" |operator_defs| NIL)
    (|ring?| CONST-DECL "bool" |ring_def| |algebra|))
   SHOSTAK)
  (|Hurwitz_ring_is_ring-1| NIL 3922880105
   ("" (EXPAND "ring?")
    (("" (SPLIT)
      (("1" (EXPAND "abelian_group?")
        (("1" (SPLIT)
          (("1" (EXPAND "group?")
            (("1" (SPLIT)
              (("1" (EXPAND "monoid?")
                (("1" (SPLIT)
                  (("1" (EXPAND "monad?")
                    (("1" (SPLIT)
                      (("1" (LEMMA "Hurwitz_sum_closed")
                        (("1" (PROPAX) NIL NIL)) NIL)
                       ("2" (EXPAND "member")
                        (("2" (EXPAND "Hurwitz_ring")
                          (("2" (EXPAND "zero_q")
                            (("2" (INST 1 "0" "0" "0" "0")
                              (("2" (ASSERT) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("3" (EXPAND "identity?")
                        (("3" (SKEEP)
                          (("3" (SPLIT)
                            (("1" (EXPAND "restrict")
                              (("1" (REWRITE "plus_zero_q") NIL NIL)) NIL)
                             ("2" (EXPAND "restrict")
                              (("2" (REWRITE "zero_q_plus") NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (EXPAND "associative?")
                    (("2" (SKEEP)
                      (("2" (EXPAND "restrict")
                        (("2" (EXPAND "+ ") (("2" (PROPAX) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (EXPAND "inv_exists?")
                (("2" (SKEEP)
                  (("2" (INST 1 "(-1)*x")
                    (("1" (GRIND) NIL NIL)
                     ("2" (TYPEPRED "x")
                      (("2" (EXPAND "Hurwitz_ring")
                        (("2" (EXPAND "*")
                          (("2" (SKOLEM -1 ("x1" "y1" "z1" "t1"))
                            (("2" (FLATTEN)
                              (("2"
                                (INST 1 "-1 * x1" "-1 *y1" "-1 *z1" "-1 *t1")
                                (("2" (REPLACES -)
                                  (("2" (SIMPLIFY) (("2" (PROPAX) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (EXPAND "restrict")
            (("2" (EXPAND "commutative?")
              (("2" (SKEEP) (("2" (EXPAND "+ ") (("2" (PROPAX) NIL NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (LEMMA "Hurwitz_prod_closed") (("2" (PROPAX) NIL NIL)) NIL)
       ("3" (EXPAND "restrict")
        (("3" (EXPAND "associative?")
          (("3" (SKEEP)
            (("3" (LEMMA "q_assoc")
              (("3" (EXPAND "associative?") (("3" (INST?) NIL NIL)) NIL)) NIL))
            NIL))
          NIL))
        NIL)
       ("4" (EXPAND "restrict")
        (("4" (EXPAND "left_distributive?")
          (("4" (LEMMA "q_distrl") (("4" (SKEEP) (("4" (INST?) NIL NIL)) NIL))
            NIL))
          NIL))
        NIL)
       ("5" (EXPAND "restrict")
        (("5" (EXPAND "right_distributive?")
          (("5" (SKEEP)
            (("5" (LEMMA "q_distr")
              (("5" (EXPAND "distributive?") (("5" (INST?) NIL NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|Hurwitz_sum_closed| FORMULA-DECL NIL |quaternions_Hurwitz_rings| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|Hurwitz_ring| CONST-DECL "set[quat[rational,
         restrict[[numfield, numfield], [rational, rational], numfield](+),
         restrict[[numfield, numfield], [rational, rational], numfield](*),
         0, 1, -1, -1]]"
     |quaternions_Hurwitz_rings| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nnrat_div_posrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals|
     NIL)
    (|nnrat_plus_nnrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals|
     NIL)
    (|zero_q| CONST-DECL "quat" |quaternions_def| |algebra|)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|zero_q_plus| FORMULA-DECL NIL |quaternions| |algebra|)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|quat| TYPE-EQ-DECL NIL |quaternions_def| |algebra|)
    (|plus_zero_q| FORMULA-DECL NIL |quaternions| |algebra|)
    (|identity?| CONST-DECL "bool" |operator_defs| NIL)
    (|monad?| CONST-DECL "bool" |monad_def| |algebra|)
    (+ CONST-DECL "quat" |quaternions_def| |algebra|)
    (|associative?| CONST-DECL "bool" |operator_defs| NIL)
    (|monoid?| CONST-DECL "bool" |monoid_def| |algebra|)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|rat_plus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (* CONST-DECL "quat" |quaternions_def| |algebra|)
    (|inv_exists?| CONST-DECL "bool" |group_def| |algebra|)
    (|group?| CONST-DECL "bool" |group_def| |algebra|)
    (|commutative?| CONST-DECL "bool" |operator_defs| NIL)
    (|abelian_group?| CONST-DECL "bool" |group_def| |algebra|)
    (|Hurwitz_prod_closed| FORMULA-DECL NIL |quaternions_Hurwitz_rings| NIL)
    (|q_assoc| FORMULA-DECL NIL |quaternions_def| |algebra|)
    (|left_distributive?| CONST-DECL "bool" |operator_defs_more| |algebra|)
    (|q_distrl| FORMULA-DECL NIL |quaternions_def| |algebra|)
    (|right_distributive?| CONST-DECL "bool" |operator_defs_more| |algebra|)
    (|q_distr| FORMULA-DECL NIL |quaternions_def| |algebra|)
    (|distributive?| CONST-DECL "bool" |operator_defs| NIL)
    (|ring?| CONST-DECL "bool" |ring_def| |algebra|))
   SHOSTAK))
 (|Hurwitz_ring_is_ring_w_one| 0
  (|Hurwitz_ring_is_ring_w_one-0| "" 3933736309
   ("" (EXPAND "ring_with_one?")
    (("" (SPLIT)
      (("1" (REWRITE "Hurwitz_ring_is_ring") NIL NIL)
       ("2" (EXPAND "monoid?")
        (("2" (SPLIT)
          (("1" (EXPAND "monad?")
            (("1" (SPLIT)
              (("1" (REWRITE "Hurwitz_prod_closed") NIL NIL)
               ("2"
                (STOP-REWRITE "right_identity" "left_identity" "one_left"
                 "one_right" "zero_plus" "plus_zero")
                (("2" (EXPAND "member")
                  (("2" (EXPAND "one_q")
                    (("2" (EXPAND "Hurwitz_ring")
                      (("2" (INST 1 "2" "-1" "-1" "-1")
                        (("2" (ASSERT) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("3" (EXPAND "identity?")
                (("3" (EXPAND "restrict")
                  (("3" (SKEEP)
                    (("3" (REWRITE "one_q_times")
                      (("3" (REWRITE "times_one_q") NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (EXPAND "associative?")
            (("2" (EXPAND "restrict")
              (("2" (SKEEP)
                (("2" (LEMMA "Hurwitz_ring_is_ring")
                  (("2" (EXPAND "ring?")
                    (("2" (EXPAND "restrict")
                      (("2" (FLATTEN)
                        (("2" (EXPAND "associative?") (("2" (INST?) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|Hurwitz_ring_is_ring| FORMULA-DECL NIL |quaternions_Hurwitz_rings| NIL)
    (|Hurwitz_prod_closed| FORMULA-DECL NIL |quaternions_Hurwitz_rings| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|Hurwitz_ring| CONST-DECL "set[quat[rational,
         restrict[[numfield, numfield], [rational, rational], numfield](+),
         restrict[[numfield, numfield], [rational, rational], numfield](*),
         0, 1, -1, -1]]"
     |quaternions_Hurwitz_rings| NIL)
    (|rat_plus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|one_q| CONST-DECL "quat" |quaternions_def| |algebra|)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (|one_q_times| FORMULA-DECL NIL |quaternions_def| |algebra|)
    (|quat| TYPE-EQ-DECL NIL |quaternions_def| |algebra|)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|times_one_q| FORMULA-DECL NIL |quaternions_def| |algebra|)
    (|identity?| CONST-DECL "bool" |operator_defs| NIL)
    (|monad?| CONST-DECL "bool" |monad_def| |algebra|)
    (|ring?| CONST-DECL "bool" |ring_def| |algebra|)
    (|associative?| CONST-DECL "bool" |operator_defs| NIL)
    (|monoid?| CONST-DECL "bool" |monoid_def| |algebra|)
    (|ring_with_one?| CONST-DECL "bool" |ring_with_one_def| |algebra|))
   SHOSTAK)
  (|Hurwitz_ring_is_ring_w_one-1| NIL 3926506069
   ("" (EXPAND "ring_with_one?")
    (("" (SPLIT)
      (("1" (REWRITE "Hurwitz_ring_is_ring") NIL NIL)
       ("2" (EXPAND "monoid?")
        (("2" (SPLIT)
          (("1" (EXPAND "monad?")
            (("1" (SPLIT)
              (("1" (REWRITE "Hurwitz_prod_closed") NIL NIL)
               ("2"
                (STOP-REWRITE "right_identity" "left_identity" "one_left"
                 "one_right" "zero_plus" "plus_zero")
                (("2" (EXPAND "member")
                  (("2" (EXPAND "one_q")
                    (("2" (EXPAND "Hurwitz_ring")
                      (("2" (INST 1 "2" "-1" "-1" "-1")
                        (("2" (ASSERT) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("3" (EXPAND "identity?")
                (("3" (EXPAND "restrict")
                  (("3" (SKEEP)
                    (("3" (REWRITE "one_q_times")
                      (("3" (REWRITE "times_one_q") NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (EXPAND "associative?")
            (("2" (EXPAND "restrict")
              (("2" (SKEEP)
                (("2" (LEMMA "Hurwitz_ring_is_ring")
                  (("2" (EXPAND "ring?")
                    (("2" (EXPAND "restrict")
                      (("2" (FLATTEN)
                        (("2" (EXPAND "associative?") (("2" (INST?) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|Hurwitz_ring_is_ring| FORMULA-DECL NIL |quaternions_Hurwitz_rings| NIL)
    (|Hurwitz_prod_closed| FORMULA-DECL NIL |quaternions_Hurwitz_rings| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|Hurwitz_ring| CONST-DECL "set[quat[rational,
         restrict[[numfield, numfield], [rational, rational], numfield](+),
         restrict[[numfield, numfield], [rational, rational], numfield](*),
         0, 1, -1, -1]]"
     |quaternions_Hurwitz_rings| NIL)
    (|rat_plus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|one_q| CONST-DECL "quat" |quaternions_def| |algebra|)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (|one_q_times| FORMULA-DECL NIL |quaternions_def| |algebra|)
    (|quat| TYPE-EQ-DECL NIL |quaternions_def| |algebra|)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|times_one_q| FORMULA-DECL NIL |quaternions_def| |algebra|)
    (|identity?| CONST-DECL "bool" |operator_defs| NIL)
    (|monad?| CONST-DECL "bool" |monad_def| |algebra|)
    (|ring?| CONST-DECL "bool" |ring_def| |algebra|)
    (|associative?| CONST-DECL "bool" |operator_defs| NIL)
    (|monoid?| CONST-DECL "bool" |monoid_def| |algebra|)
    (|ring_with_one?| CONST-DECL "bool" |ring_with_one_def| |algebra|))
   SHOSTAK))
 (|Hurwitz_red_norm_charac| 0
  (|Hurwitz_red_norm_charac-0| "" 3933736310
   (""
    (STOP-REWRITE "right_identity" "left_identity" "one_left" "one_right"
     "zero_plus" "plus_zero")
    (("" (SKEEP)
      (("" (REWRITE "red_norm_charac") (("" (DECOMPOSE-EQUALITY) NIL NIL))
        NIL))
      NIL))
    NIL)
   ((AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|inv| CONST-DECL "{y | x * y = one AND y * x = one}" |group| |algebra|)
    (|one_times| FORMULA-DECL NIL |ring_with_one| |algebra|)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|rat_plus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|negate_nz_T_is_nz_T| APPLICATION-JUDGEMENT "nz_T[rational,
     restrict[[numfield, numfield], [rational, rational], numfield](+),
     restrict[[numfield, numfield], [rational, rational], numfield](*), 0]"
     |quaternions_Hurwitz_rings| NIL)
    (|odd_times_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|Hurwitz_ring| NONEMPTY-TYPE-EQ-DECL NIL |quaternions_Hurwitz_rings| NIL)
    (|Hurwitz_ring| CONST-DECL "set[quat[rational,
         restrict[[numfield, numfield], [rational, rational], numfield](+),
         restrict[[numfield, numfield], [rational, rational], numfield](*),
         0, 1, -1, -1]]"
     |quaternions_Hurwitz_rings| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|quat| TYPE-EQ-DECL NIL |quaternions_def| |algebra|)
    (|red_norm_charac| FORMULA-DECL NIL |quaternions| |algebra|))
   SHOSTAK)
  (|Hurwitz_red_norm_charac-1| NIL 3923331766
   (""
    (STOP-REWRITE "right_identity" "left_identity" "one_left" "one_right"
     "zero_plus" "plus_zero")
    (("" (SKEEP)
      (("" (REWRITE "red_norm_charac") (("" (DECOMPOSE-EQUALITY) NIL NIL))
        NIL))
      NIL))
    NIL)
   ((AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|inv| CONST-DECL "{y | x * y = one AND y * x = one}" |group| |algebra|)
    (|one_times| FORMULA-DECL NIL |ring_with_one| |algebra|)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|rat_plus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|odd_times_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|Hurwitz_ring| NONEMPTY-TYPE-EQ-DECL NIL |quaternions_Hurwitz_rings| NIL)
    (|Hurwitz_ring| CONST-DECL "set[quat[rational,
         restrict[[numfield, numfield], [rational, rational], numfield](+),
         restrict[[numfield, numfield], [rational, rational], numfield](*),
         0, 1, -1, -1]]"
     |quaternions_Hurwitz_rings| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|quat| TYPE-EQ-DECL NIL |quaternions_def| |algebra|)
    (|red_norm_charac| FORMULA-DECL NIL |quaternions| |algebra|))
   SHOSTAK))
 (|Hurwitz_red_norm_is_posint| 0
  (|Hurwitz_red_norm_is_posint-0| "" 3933736312
   (""
    (STOP-REWRITE "right_identity" "left_identity" "one_left" "one_right"
     "zero_plus" "plus_zero")
    (("" (SKEEP)
      (("" (REWRITE "Hurwitz_red_norm_charac")
        (("" (BETA)
          (("" (TYPEPRED "q")
            (("" (EXPAND "Hurwitz_ring")
              (("" (SKEEP)
                (("" (REPLACES -)
                  (("" (SPLIT)
                    (("1" (SIMPLIFY)
                      (("1" (SIMPLIFY)
                        (("1" (REWRITE "real_props.div_times")
                          (("1" (LEMMA "associative_mult")
                            (("1" (COPY -1)
                              (("1" (COPY -1)
                                (("1" (INST?)
                                  (("1" (REPLACES -1)
                                    (("1" (INST?)
                                      (("1" (REPLACES -1)
                                        (("1" (INST?)
                                          (("1" (REPLACES -1)
                                            (("1"
                                              (REWRITE*
                                               "real_props.div_cancel1")
                                              (("1" (EXPAND "integer?")
                                                (("1" (PROPAX) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (LEMMA "abs_square")
                      (("2" (COPY -1)
                        (("2" (COPY -1)
                          (("2" (COPY -1)
                            (("2" (INST?)
                              (("2" (REPLACE -1 1 RL HIDE)
                                (("2" (INST -1 "y + x / 2")
                                  (("2" (REPLACE -1 1 RL HIDE)
                                    (("2" (INST -1 "z + x / 2")
                                      (("2" (REPLACE -1 1 RL HIDE)
                                        (("2" (INST -1 "t + x / 2")
                                          (("2" (REPLACE -1 1 RL HIDE)
                                            (("2"
                                              (REWRITE
                                               "nonneg_real_add_closed")
                                              NIL NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|abs_square| FORMULA-DECL NIL |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nonneg_real_add_closed| FORMULA-DECL NIL |real_types| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (|nnrat_plus_nnrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals|
     NIL)
    (|rat_abs_is_nonneg| APPLICATION-JUDGEMENT "{r: nonneg_rat | r >= q}"
     |real_defs| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|div_times| FORMULA-DECL NIL |real_props| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|times_u8_u8| APPLICATION-JUDGEMENT "uint16" |integertypes| NIL)
    (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|div_cancel1| FORMULA-DECL NIL |real_props| NIL)
    (|integer?| CONST-DECL "bool" |integers| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|associative_mult| FORMULA-DECL NIL |number_fields| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|rat_plus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|negate_nz_T_is_nz_T| APPLICATION-JUDGEMENT "nz_T[rational,
     restrict[[numfield, numfield], [rational, rational], numfield](+),
     restrict[[numfield, numfield], [rational, rational], numfield](*), 0]"
     |quaternions_Hurwitz_rings| NIL)
    (|Hurwitz_ring| NONEMPTY-TYPE-EQ-DECL NIL |quaternions_Hurwitz_rings| NIL)
    (|Hurwitz_ring| CONST-DECL "set[quat[rational,
         restrict[[numfield, numfield], [rational, rational], numfield](+),
         restrict[[numfield, numfield], [rational, rational], numfield](*),
         0, 1, -1, -1]]"
     |quaternions_Hurwitz_rings| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|quat| TYPE-EQ-DECL NIL |quaternions_def| |algebra|)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|Hurwitz_red_norm_charac| FORMULA-DECL NIL |quaternions_Hurwitz_rings|
     NIL))
   SHOSTAK)
  (|Hurwitz_red_norm_is_posint-1| NIL 3924298221
   (""
    (STOP-REWRITE "right_identity" "left_identity" "one_left" "one_right"
     "zero_plus" "plus_zero")
    (("" (SKEEP)
      (("" (REWRITE "Hurwitz_red_norm_charac")
        (("" (BETA)
          (("" (TYPEPRED "q")
            (("" (EXPAND "Hurwitz_ring")
              (("" (SKEEP)
                (("" (REPLACES -)
                  (("" (SPLIT)
                    (("1" (SIMPLIFY)
                      (("1" (SIMPLIFY)
                        (("1" (REWRITE "real_props.div_times")
                          (("1" (LEMMA "associative_mult")
                            (("1" (COPY -1)
                              (("1" (COPY -1)
                                (("1" (INST?)
                                  (("1" (REPLACES -1)
                                    (("1" (INST?)
                                      (("1" (REPLACES -1)
                                        (("1" (INST?)
                                          (("1" (REPLACES -1)
                                            (("1"
                                              (REWRITE*
                                               "real_props.div_cancel1")
                                              (("1" (EXPAND "integer?")
                                                (("1" (PROPAX) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (LEMMA "abs_square")
                      (("2" (COPY -1)
                        (("2" (COPY -1)
                          (("2" (COPY -1)
                            (("2" (INST?)
                              (("2" (REPLACE -1 1 RL HIDE)
                                (("2" (INST -1 "y + x / 2")
                                  (("2" (REPLACE -1 1 RL HIDE)
                                    (("2" (INST -1 "z + x / 2")
                                      (("2" (REPLACE -1 1 RL HIDE)
                                        (("2" (INST -1 "t + x / 2")
                                          (("2" (REPLACE -1 1 RL HIDE)
                                            (("2"
                                              (REWRITE
                                               "nonneg_real_add_closed")
                                              NIL NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|abs_square| FORMULA-DECL NIL |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nonneg_real_add_closed| FORMULA-DECL NIL |real_types| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (|nnrat_plus_nnrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals|
     NIL)
    (|rat_abs_is_nonneg| APPLICATION-JUDGEMENT "{r: nonneg_rat | r >= q}"
     |real_defs| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|div_times| FORMULA-DECL NIL |real_props| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|times_u8_u8| APPLICATION-JUDGEMENT "uint16" |integertypes| NIL)
    (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|div_cancel1| FORMULA-DECL NIL |real_props| NIL)
    (|integer?| CONST-DECL "bool" |integers| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|associative_mult| FORMULA-DECL NIL |number_fields| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|rat_plus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|Hurwitz_ring| NONEMPTY-TYPE-EQ-DECL NIL |quaternions_Hurwitz_rings| NIL)
    (|Hurwitz_ring| CONST-DECL "set[quat[rational,
         restrict[[numfield, numfield], [rational, rational], numfield](+),
         restrict[[numfield, numfield], [rational, rational], numfield](*),
         0, 1, -1, -1]]"
     |quaternions_Hurwitz_rings| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|quat| TYPE-EQ-DECL NIL |quaternions_def| |algebra|)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|Hurwitz_red_norm_charac| FORMULA-DECL NIL |quaternions_Hurwitz_rings|
     NIL))
   SHOSTAK))
 (|hurwitz_sum| 0
  (|hurwitz_sum-0| "" 3933736357
   ("" (SKEEP)
    (("" (LEMMA "Hurwitz_sum_closed")
      (("" (EXPAND "star_closed?")
        (("" (INST?) (("" (EXPAND "member") (("" (PROPAX) NIL NIL)) NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|Hurwitz_sum_closed| FORMULA-DECL NIL |quaternions_Hurwitz_rings| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|quat| TYPE-EQ-DECL NIL |quaternions_def| |algebra|)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|Hurwitz_ring| CONST-DECL "set[quat[rational,
         restrict[[numfield, numfield], [rational, rational], numfield](+),
         restrict[[numfield, numfield], [rational, rational], numfield](*),
         0, 1, -1, -1]]"
     |quaternions_Hurwitz_rings| NIL)
    (|Hurwitz_ring| NONEMPTY-TYPE-EQ-DECL NIL |quaternions_Hurwitz_rings| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|star_closed?| CONST-DECL "bool" |groupoid_def| |algebra|))
   SHOSTAK
   (|hurwitz_sum| SUBTYPE
    "(quaternions_def[rational, restrict[[numfield, numfield], [rational, rational], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [rational, rational], numfield].restrict(number_fields.*), 0, 1, -1, -1].+)(quaternions_Hurwitz_rings.h1, quaternions_Hurwitz_rings.h2)"
    "Hurwitz_ring"))
  (|hurwitz_sum-1| NIL 3924295028
   ("" (SKEEP)
    (("" (LEMMA "Hurwitz_sum_closed")
      (("" (EXPAND "star_closed?")
        (("" (INST?) (("" (EXPAND "member") (("" (PROPAX) NIL NIL)) NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|Hurwitz_sum_closed| FORMULA-DECL NIL |quaternions_Hurwitz_rings| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|quat| TYPE-EQ-DECL NIL |quaternions_def| |algebra|)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|Hurwitz_ring| CONST-DECL "set[quat[rational,
         restrict[[numfield, numfield], [rational, rational], numfield](+),
         restrict[[numfield, numfield], [rational, rational], numfield](*),
         0, 1, -1, -1]]"
     |quaternions_Hurwitz_rings| NIL)
    (|Hurwitz_ring| NONEMPTY-TYPE-EQ-DECL NIL |quaternions_Hurwitz_rings| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|star_closed?| CONST-DECL "bool" |groupoid_def| |algebra|))
   NIL
   (|hurwitz_sum| SUBTYPE
    "(quaternions_def[rational, restrict[[numfield, numfield], [rational, rational], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [rational, rational], numfield].restrict(number_fields.*), 0, 1, -1, -1].+)(quaternions_Hurwitz_rings.h1, quaternions_Hurwitz_rings.h2)"
    "Hurwitz_ring")))
 (|hurwitz_prod| 0
  (|hurwitz_prod-0| "" 3933736357
   ("" (SKEEP)
    (("" (LEMMA "Hurwitz_prod_closed")
      (("" (EXPAND "star_closed?")
        (("" (INST?) (("" (EXPAND "member") (("" (PROPAX) NIL NIL)) NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|Hurwitz_prod_closed| FORMULA-DECL NIL |quaternions_Hurwitz_rings| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|quat| TYPE-EQ-DECL NIL |quaternions_def| |algebra|)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|Hurwitz_ring| CONST-DECL "set[quat[rational,
         restrict[[numfield, numfield], [rational, rational], numfield](+),
         restrict[[numfield, numfield], [rational, rational], numfield](*),
         0, 1, -1, -1]]"
     |quaternions_Hurwitz_rings| NIL)
    (|Hurwitz_ring| NONEMPTY-TYPE-EQ-DECL NIL |quaternions_Hurwitz_rings| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|star_closed?| CONST-DECL "bool" |groupoid_def| |algebra|))
   SHOSTAK
   (|hurwitz_prod| SUBTYPE
    "quaternions_def[rational, restrict[[numfield, numfield], [rational, rational], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [rational, rational], numfield].restrict(number_fields.*), 0, 1, -1, -1].*(quaternions_Hurwitz_rings.h1, quaternions_Hurwitz_rings.h2)"
    "Hurwitz_ring"))
  (|hurwitz_prod-1| NIL 3924295028
   ("" (SKEEP)
    (("" (LEMMA "Hurwitz_prod_closed")
      (("" (EXPAND "star_closed?")
        (("" (INST?) (("" (EXPAND "member") (("" (PROPAX) NIL NIL)) NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|Hurwitz_prod_closed| FORMULA-DECL NIL |quaternions_Hurwitz_rings| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|quat| TYPE-EQ-DECL NIL |quaternions_def| |algebra|)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|Hurwitz_ring| CONST-DECL "set[quat[rational,
         restrict[[numfield, numfield], [rational, rational], numfield](+),
         restrict[[numfield, numfield], [rational, rational], numfield](*),
         0, 1, -1, -1]]"
     |quaternions_Hurwitz_rings| NIL)
    (|Hurwitz_ring| NONEMPTY-TYPE-EQ-DECL NIL |quaternions_Hurwitz_rings| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|star_closed?| CONST-DECL "bool" |groupoid_def| |algebra|))
   NIL
   (|hurwitz_prod| SUBTYPE
    "quaternions_def[rational, restrict[[numfield, numfield], [rational, rational], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [rational, rational], numfield].restrict(number_fields.*), 0, 1, -1, -1].*(quaternions_Hurwitz_rings.h1, quaternions_Hurwitz_rings.h2)"
    "Hurwitz_ring")))
 (|hurwitz_conjugate| 0
  (|hurwitz_conjugate-0| "" 3933736358
   ("" (SKEEP)
    (("" (TYPEPRED "h")
      (("" (EXPAND "Hurwitz_ring")
        (("" (SKEEP)
          (("" (INST 1 "x" "-x-y" "-x-z" "-x-t")
            (("" (EXPAND "conjugate")
              (("" (REPLACES -)
                (("" (CASE "FORALL (a, b:real): -(b + a/2) = a / 2 + -a-b")
                  (("1" (CASE "FORALL (a: rational): inv(a) = -a")
                    (("1" (SPLIT)
                      (("1" (INST?)
                        (("1" (INST?) (("1" (REPLACES -1 1) NIL NIL)) NIL))
                        NIL)
                       ("2" (INST?)
                        (("2" (INST?) (("2" (REPLACES -1 1) NIL NIL)) NIL))
                        NIL)
                       ("3" (INST?)
                        (("3" (INST?) (("3" (REPLACES -1 1) NIL NIL)) NIL))
                        NIL))
                      NIL)
                     ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL))
                    NIL)
                   ("2" (HIDE 2)
                    (("2" (SKEEP)
                      (("2" (LEMMA "add_neg")
                        (("2" (INST -1 "0" "(b+a/2)")
                          (("2" (REPLACES -1) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|Hurwitz_ring| NONEMPTY-TYPE-EQ-DECL NIL |quaternions_Hurwitz_rings| NIL)
    (|Hurwitz_ring| CONST-DECL "set[quat[rational,
         restrict[[numfield, numfield], [rational, rational], numfield](+),
         restrict[[numfield, numfield], [rational, rational], numfield](*),
         0, 1, -1, -1]]"
     |quaternions_Hurwitz_rings| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|quat| TYPE-EQ-DECL NIL |quaternions_def| |algebra|)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|rat_plus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|conjugate| CONST-DECL "quat" |quaternions_def| |algebra|)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|minus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|inv| CONST-DECL "{y | x * y = one AND y * x = one}" |group| |algebra|)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|add_neg| FORMULA-DECL NIL |extra_tegies| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL))
   SHOSTAK
   (|hurwitz_conjugate| SUBTYPE
    "quaternions_def[rational, restrict[[numfield, numfield], [rational, rational], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [rational, rational], numfield].restrict(number_fields.*), 0, 1, -1, -1].conjugate(quaternions_Hurwitz_rings.h)"
    "Hurwitz_ring"))
  (|hurwitz_conjugate-1| NIL 3924295028
   ("" (SKEEP)
    (("" (TYPEPRED "h")
      (("" (EXPAND "Hurwitz_ring")
        (("" (SKEEP)
          (("" (INST 1 "x" "-x-y" "-x-z" "-x-t")
            (("" (EXPAND "conjugate")
              (("" (REPLACES -)
                (("" (CASE "FORALL (a, b:real): -(b + a/2) = a / 2 + -a-b")
                  (("1" (CASE "FORALL (a: rational): inv(a) = -a")
                    (("1" (SPLIT)
                      (("1" (INST?)
                        (("1" (INST?) (("1" (REPLACES -1 1) NIL NIL)) NIL))
                        NIL)
                       ("2" (INST?)
                        (("2" (INST?) (("2" (REPLACES -1 1) NIL NIL)) NIL))
                        NIL)
                       ("3" (INST?)
                        (("3" (INST?) (("3" (REPLACES -1 1) NIL NIL)) NIL))
                        NIL))
                      NIL)
                     ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL))
                    NIL)
                   ("2" (HIDE 2)
                    (("2" (SKEEP)
                      (("2" (LEMMA "add_neg")
                        (("2" (INST -1 "0" "(b+a/2)")
                          (("2" (REPLACES -1) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|Hurwitz_ring| NONEMPTY-TYPE-EQ-DECL NIL |quaternions_Hurwitz_rings| NIL)
    (|Hurwitz_ring| CONST-DECL "set[quat[rational,
         restrict[[numfield, numfield], [rational, rational], numfield](+),
         restrict[[numfield, numfield], [rational, rational], numfield](*),
         0, 1, -1, -1]]"
     |quaternions_Hurwitz_rings| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|quat| TYPE-EQ-DECL NIL |quaternions_def| |algebra|)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|rat_plus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|conjugate| CONST-DECL "quat" |quaternions_def| |algebra|)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|minus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|inv| CONST-DECL "{y | x * y = one AND y * x = one}" |group| |algebra|)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|add_neg| FORMULA-DECL NIL |extra_tegies| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL))
   NIL
   (|hurwitz_conjugate| SUBTYPE
    "quaternions_def[rational, restrict[[numfield, numfield], [rational, rational], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [rational, rational], numfield].restrict(number_fields.*), 0, 1, -1, -1].conjugate(quaternions_Hurwitz_rings.h)"
    "Hurwitz_ring")))
 (|hurwitz_inv| 0
  (|hurwitz_inv-0| "" 3933736360
   ("" (SKEEP)
    (("" (TYPEPRED "h")
      (("" (EXPAND "inv")
        (("" (CASE "FORALL(x: rational): inv(x) = -x")
          (("1" (COPY -1)
            (("1" (COPY -1)
              (("1" (COPY -1)
                (("1" (INST?)
                  (("1" (REPLACES -1)
                    (("1" (INST?)
                      (("1" (REPLACES -1)
                        (("1" (INST?)
                          (("1" (REPLACES -1)
                            (("1" (INST?)
                              (("1" (REPLACES -1)
                                (("1" (EXPAND "Hurwitz_ring")
                                  (("1" (SKEEP)
                                    (("1" (REPLACES -)
                                      (("1" (INST 1 "-x" "-y" "-z" "-t")
                                        (("1" (SIMPLIFY)
                                          (("1" (PROPAX) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|Hurwitz_ring| NONEMPTY-TYPE-EQ-DECL NIL |quaternions_Hurwitz_rings| NIL)
    (|Hurwitz_ring| CONST-DECL "set[quat[rational,
         restrict[[numfield, numfield], [rational, rational], numfield](+),
         restrict[[numfield, numfield], [rational, rational], numfield](*),
         0, 1, -1, -1]]"
     |quaternions_Hurwitz_rings| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|quat| TYPE-EQ-DECL NIL |quaternions_def| |algebra|)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|inv| CONST-DECL "{y | x * y = one AND y * x = one}" |group| |algebra|)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|rat_plus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|minus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|inv| CONST-DECL "quat" |quaternions_def| |algebra|))
   SHOSTAK
   (|hurwitz_inv| SUBTYPE
    "quaternions_def[rational, restrict[[numfield, numfield], [rational, rational], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [rational, rational], numfield].restrict(number_fields.*), 0, 1, -1, -1].inv(quaternions_Hurwitz_rings.h)"
    "Hurwitz_ring"))
  (|hurwitz_inv-1| NIL 3924295028
   ("" (SKEEP)
    (("" (TYPEPRED "h")
      (("" (EXPAND "inv")
        (("" (CASE "FORALL(x: rational): inv(x) = -x")
          (("1" (COPY -1)
            (("1" (COPY -1)
              (("1" (COPY -1)
                (("1" (INST?)
                  (("1" (REPLACES -1)
                    (("1" (INST?)
                      (("1" (REPLACES -1)
                        (("1" (INST?)
                          (("1" (REPLACES -1)
                            (("1" (INST?)
                              (("1" (REPLACES -1)
                                (("1" (EXPAND "Hurwitz_ring")
                                  (("1" (SKEEP)
                                    (("1" (REPLACES -)
                                      (("1" (INST 1 "-x" "-y" "-z" "-t")
                                        (("1" (SIMPLIFY)
                                          (("1" (PROPAX) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|Hurwitz_ring| NONEMPTY-TYPE-EQ-DECL NIL |quaternions_Hurwitz_rings| NIL)
    (|Hurwitz_ring| CONST-DECL "set[quat[rational,
         restrict[[numfield, numfield], [rational, rational], numfield](+),
         restrict[[numfield, numfield], [rational, rational], numfield](*),
         0, 1, -1, -1]]"
     |quaternions_Hurwitz_rings| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|quat| TYPE-EQ-DECL NIL |quaternions_def| |algebra|)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|inv| CONST-DECL "{y | x * y = one AND y * x = one}" |group| |algebra|)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|rat_plus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|minus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|inv| CONST-DECL "quat" |quaternions_def| |algebra|))
   NIL
   (|hurwitz_inv| SUBTYPE
    "quaternions_def[rational, restrict[[numfield, numfield], [rational, rational], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [rational, rational], numfield].restrict(number_fields.*), 0, 1, -1, -1].inv(quaternions_Hurwitz_rings.h)"
    "Hurwitz_ring")))
 (|Hurwitz_remainder_ineq1| 0
  (|Hurwitz_remainder_ineq1-0| "" 3933736313
   ("" (SKEEP)
    (("" (LEMMA "euclid_int")
      (("" (INST -1 "n" "t")
        (("" (SKEEP)
          (("" (CASE "r <= n/2")
            (("1" (INST 1 "q")
              (("1" (REPLACES -2)
                (("1" (SIMPLIFY)
                  (("1" (EXPAND "abs") (("1" (PROPAX) NIL NIL)) NIL)) NIL))
                NIL))
              NIL)
             ("2" (INST 2 "q+1")
              (("2" (REPLACES -1)
                (("2" (SIMPLIFY)
                  (("2" (EXPAND "abs")
                    (("2" (TYPEPRED "r") (("2" (ASSERT) NIL NIL)) NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|euclid_int| FORMULA-DECL NIL |euclidean_division| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_abs_is_nonneg| APPLICATION-JUDGEMENT "{j: nonneg_int | j >= i}"
     |real_defs| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|mod| NONEMPTY-TYPE-EQ-DECL NIL |euclidean_division| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|posint| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL))
   SHOSTAK)
  (|Hurwitz_remainder_ineq1-1| NIL 3923332141
   ("" (SKEEP)
    (("" (LEMMA "euclid_int")
      (("" (INST -1 "n" "t")
        (("" (SKEEP)
          (("" (CASE "r <= n/2")
            (("1" (INST 1 "q")
              (("1" (REPLACES -2)
                (("1" (SIMPLIFY)
                  (("1" (EXPAND "abs") (("1" (PROPAX) NIL NIL)) NIL)) NIL))
                NIL))
              NIL)
             ("2" (INST 2 "q+1")
              (("2" (REPLACES -1)
                (("2" (SIMPLIFY)
                  (("2" (EXPAND "abs")
                    (("2" (TYPEPRED "r") (("2" (ASSERT) NIL NIL)) NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|euclid_int| FORMULA-DECL NIL |euclidean_division| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_abs_is_nonneg| APPLICATION-JUDGEMENT "{j: nonneg_int | j >= i}"
     |real_defs| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|mod| NONEMPTY-TYPE-EQ-DECL NIL |euclidean_division| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|posint| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL))
   SHOSTAK))
 (|Hurwitz_remainder_ineq2| 0
  (|Hurwitz_remainder_ineq2-0| "" 3933736314
   (""
    (STOP-REWRITE "right_identity" "left_identity" "one_left" "one_right"
     "zero_plus" "plus_zero")
    (("" (SKEEP)
      (("" (LEMMA "euclid_int")
        (("" (INST -1 "n" "t0 + 2 * t1")
          (("" (SKEEP)
            (("" (REPLACES -1)
              (("" (LEMMA "euclid_int")
                (("" (INST -1 "2" "q-x0")
                  (("" (SKEEP)
                    (("" (CASE "r!1 = 0")
                      (("1" (REPLACES -1)
                        (("1" (SIMPLIFY -1)
                          (("1" (INST 1 "(q-x0)/2")
                            (("1" (REWRITE "real_props.div_cancel1")
                              (("1" (SIMPLIFY)
                                (("1" (TYPEPRED "r")
                                  (("1" (HIDE -2)
                                    (("1" (EXPAND "abs")
                                      (("1" (ASSERT) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (REPLACES -1) (("2" (ASSERT) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (CASE-REPLACE "r!1 = 1")
                        (("1" (HIDE -1 1)
                          (("1" (NAME-REPLACE "x1" "(q-x0+1)/2")
                            (("1" (INST 1 "x1")
                              (("1" (REPLACE -1 1 RL HIDE)
                                (("1" (REWRITE "real_props.div_cancel1")
                                  (("1" (SIMPLIFY)
                                    (("1" (EXPAND "abs")
                                      (("1" (TYPEPRED "r")
                                        (("1" (HIDE -2) (("1" (GRIND) NIL NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (REPLACES -2)
                                (("2" (SIMPLIFY)
                                  (("2" (LEMMA "real_props.div_distributes")
                                    (("2" (INST?)
                                      (("2" (REPLACE -1 -2 RL HIDE)
                                        (("2" (LEMMA "real_props.div_cancel1")
                                          (("2" (INST -1 "2" "q_1")
                                            (("2" (REPLACES -1)
                                              (("2" (SIMPLIFY)
                                                (("2" (REPLACE -1 1 RL HIDE)
                                                  (("2" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (HIDE -1 3)
                          (("2" (TYPEPRED "r!1") (("2" (ASSERT) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|posint| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|mod| NONEMPTY-TYPE-EQ-DECL NIL |euclidean_division| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|negate_nz_T_is_nz_T| APPLICATION-JUDGEMENT "nz_T[rational,
     restrict[[numfield, numfield], [rational, rational], numfield](+),
     restrict[[numfield, numfield], [rational, rational], numfield](*), 0]"
     |quaternions_Hurwitz_rings| NIL)
    (|div_cancel1| FORMULA-DECL NIL |real_props| NIL)
    (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_abs_is_nonneg| APPLICATION-JUDGEMENT "{j: nonneg_int | j >= i}"
     |real_defs| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|q| SKOLEM-CONST-DECL "int" |quaternions_Hurwitz_rings| NIL)
    (|x0| SKOLEM-CONST-DECL "int" |quaternions_Hurwitz_rings| NIL)
    (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|rat_minus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|rat_plus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|x1| SKOLEM-CONST-DECL "rat" |quaternions_Hurwitz_rings| NIL)
    (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|odd_plus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|div_distributes| FORMULA-DECL NIL |real_props| NIL)
    (|rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL)
    (|euclid_int| FORMULA-DECL NIL |euclidean_division| NIL))
   SHOSTAK)
  (|Hurwitz_remainder_ineq2-1| NIL 3923332231
   (""
    (STOP-REWRITE "right_identity" "left_identity" "one_left" "one_right"
     "zero_plus" "plus_zero")
    (("" (SKEEP)
      (("" (LEMMA "euclid_int")
        (("" (INST -1 "n" "t0 + 2 * t1")
          (("" (SKEEP)
            (("" (REPLACES -1)
              (("" (LEMMA "euclid_int")
                (("" (INST -1 "2" "q-x0")
                  (("" (SKEEP)
                    (("" (CASE "r!1 = 0")
                      (("1" (REPLACES -1)
                        (("1" (SIMPLIFY -1)
                          (("1" (INST 1 "(q-x0)/2")
                            (("1" (REWRITE "real_props.div_cancel1")
                              (("1" (SIMPLIFY)
                                (("1" (TYPEPRED "r")
                                  (("1" (HIDE -2)
                                    (("1" (EXPAND "abs")
                                      (("1" (ASSERT) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (REPLACES -1) (("2" (ASSERT) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (CASE-REPLACE "r!1 = 1")
                        (("1" (HIDE -1 1)
                          (("1" (NAME-REPLACE "x1" "(q-x0+1)/2")
                            (("1" (INST 1 "x1")
                              (("1" (REPLACE -1 1 RL HIDE)
                                (("1" (REWRITE "real_props.div_cancel1")
                                  (("1" (SIMPLIFY)
                                    (("1" (EXPAND "abs")
                                      (("1" (TYPEPRED "r")
                                        (("1" (HIDE -2) (("1" (GRIND) NIL NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (REPLACES -2)
                                (("2" (SIMPLIFY)
                                  (("2" (LEMMA "real_props.div_distributes")
                                    (("2" (INST?)
                                      (("2" (REPLACE -1 -2 RL HIDE)
                                        (("2" (LEMMA "real_props.div_cancel1")
                                          (("2" (INST -1 "2" "q_1")
                                            (("2" (REPLACES -1)
                                              (("2" (SIMPLIFY)
                                                (("2" (REPLACE -1 1 RL HIDE)
                                                  (("2" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (HIDE -1 3)
                          (("2" (TYPEPRED "r!1") (("2" (ASSERT) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|posint| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|mod| NONEMPTY-TYPE-EQ-DECL NIL |euclidean_division| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|div_cancel1| FORMULA-DECL NIL |real_props| NIL)
    (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_abs_is_nonneg| APPLICATION-JUDGEMENT "{j: nonneg_int | j >= i}"
     |real_defs| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|rat_minus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|rat_plus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|odd_plus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|div_distributes| FORMULA-DECL NIL |real_props| NIL)
    (|rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL)
    (|euclid_int| FORMULA-DECL NIL |euclidean_division| NIL))
   SHOSTAK))
 (|Hurwitz_left_division_scalar| 0
  (|Hurwitz_left_division_scalar-0| "" 3933736323
   (""
    (STOP-REWRITE "right_identity" "left_identity" "one_left" "one_right"
     "zero_plus" "plus_zero")
    (("" (SKEEP)
      (("" (TYPEPRED "b")
        (("" (HIDE -1)
          (("" (EXPAND "scalar_F")
            (("" (FLATTEN)
              (("" (NAME "n" "b`x")
                (("" (REPLACE -1 -5)
                  (("" (TYPEPRED "a")
                    (("" (EXPAND "Hurwitz_ring")
                      (("" (SKOLEM -1 ("t0" "t1" "t2" "t3"))
                        (("" (FLATTEN)
                          (("" (REPLACE -5 -10)
                            (("" (CASE "integer_pred(n) AND n >= 0 AND n > 0")
                              (("1" (LEMMA "Hurwitz_remainder_ineq1")
                                (("1" (INST -1 "t0" "n")
                                  (("1" (SKOLEM -1 "x0")
                                    (("1" (LEMMA "Hurwitz_remainder_ineq2")
                                      (("1" (COPY -1)
                                        (("1" (COPY -1)
                                          (("1" (INST -1 "t0" "t1" "x0" "n")
                                            (("1" (INST -2 "t0" "t2" "x0" "n")
                                              (("1"
                                                (INST -3 "t0" "t3" "x0" "n")
                                                (("1" (SKOLEM -1 "x1")
                                                  (("1" (SKOLEM -2 "x2")
                                                    (("1" (SKOLEM -3 "x3")
                                                      (("1"
                                                        (NAME "c"
                                                              "mk_Hurwitz(x0, x1, x2, x3)")
                                                        (("1"
                                                          (NAME "d"
                                                                "mk_Hurwitz(t0-x0*n, t1-x1*n, t2-x2*n, t3-x3*n)")
                                                          (("1"
                                                            (INST 1 "c" "d")
                                                            (("1"
                                                              (LEMMA
                                                               "q_prod_charac")
                                                              (("1" (INST?)
                                                                (("1"
                                                                  (REPLACES -1)
                                                                  (("1"
                                                                    (REPLACE
                                                                     -12 1)
                                                                    (("1"
                                                                      (REPLACE
                                                                       -13 1)
                                                                      (("1"
                                                                        (REPLACE
                                                                         -14 1)
                                                                        (("1"
                                                                          (REPLACE
                                                                           -15
                                                                           1)
                                                                          (("1"
                                                                            (EXPAND
                                                                             "c")
                                                                            (("1"
                                                                              (EXPAND
                                                                               "d")
                                                                              (("1"
                                                                                (HIDE
                                                                                 -1
                                                                                 -2)
                                                                                (("1"
                                                                                  (EXPAND
                                                                                   "+ ")
                                                                                  (("1"
                                                                                    (SPLIT)
                                                                                    (("1"
                                                                                      (REWRITE
                                                                                       "times_div2")
                                                                                      (("1"
                                                                                        (CASE-REPLACE
                                                                                         "inv(0) = 0")
                                                                                        (("1"
                                                                                          (SIMPLIFY)
                                                                                          (("1"
                                                                                            (REWRITE
                                                                                             "real_props.div_distributes")
                                                                                            (("1"
                                                                                              (HIDE-ALL-BUT
                                                                                               (-7
                                                                                                -8
                                                                                                -9
                                                                                                -10
                                                                                                1))
                                                                                              (("1"
                                                                                                (DECOMPOSE-EQUALITY)
                                                                                                NIL
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL)
                                                                                         ("2"
                                                                                          (HIDE-ALL-BUT
                                                                                           1)
                                                                                          (("2"
                                                                                            (GRIND)
                                                                                            NIL
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL)
                                                                                     ("2"
                                                                                      (HIDE
                                                                                       -5
                                                                                       -6
                                                                                       -7
                                                                                       -8
                                                                                       -9
                                                                                       -14
                                                                                       -15)
                                                                                      (("2"
                                                                                        (LEMMA
                                                                                         "Hurwitz_red_norm_charac")
                                                                                        (("2"
                                                                                          (INST
                                                                                           -1
                                                                                           "b")
                                                                                          (("2"
                                                                                            (REPLACES
                                                                                             -1)
                                                                                            (("2"
                                                                                              (BETA)
                                                                                              (("2"
                                                                                                (REPLACES
                                                                                                 -)
                                                                                                (("2"
                                                                                                  (SIMPLIFY
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (LEMMA
                                                                                                     "real_props.add_div")
                                                                                                    (("2"
                                                                                                      (INST?)
                                                                                                      (("2"
                                                                                                        (COPY
                                                                                                         -1)
                                                                                                        (("2"
                                                                                                          (COPY
                                                                                                           -1)
                                                                                                          (("2"
                                                                                                            (INST
                                                                                                             -1
                                                                                                             "1"
                                                                                                             "- x1 * n + t1")
                                                                                                            (("2"
                                                                                                              (INST
                                                                                                               -2
                                                                                                               "1"
                                                                                                               "- x2 * n + t2")
                                                                                                              (("2"
                                                                                                                (INST
                                                                                                                 -3
                                                                                                                 "1"
                                                                                                                 "- x3 * n + t3")
                                                                                                                (("2"
                                                                                                                  (REPLACES
                                                                                                                   -)
                                                                                                                  (("2"
                                                                                                                    (SIMPLIFY)
                                                                                                                    (("2"
                                                                                                                      (NAME-REPLACE
                                                                                                                       "y0"
                                                                                                                       "t0 - n * x0")
                                                                                                                      (("2"
                                                                                                                        (NAME-REPLACE
                                                                                                                         "y1"
                                                                                                                         "-2 * (n * x1) - n * x0 + t0 + 2 * t1")
                                                                                                                        (("2"
                                                                                                                          (NAME-REPLACE
                                                                                                                           "y2"
                                                                                                                           "-2 * (n * x2) - n * x0 + t0 + 2 * t2")
                                                                                                                          (("2"
                                                                                                                            (NAME-REPLACE
                                                                                                                             "y3"
                                                                                                                             "-2 * (n * x3) - n * x0 + t0 + 2 * t3")
                                                                                                                            (("2"
                                                                                                                              (LEMMA
                                                                                                                               "Hurwitz_red_norm_charac")
                                                                                                                              (("2"
                                                                                                                                (INST?)
                                                                                                                                (("2"
                                                                                                                                  (REPLACES
                                                                                                                                   -1)
                                                                                                                                  (("2"
                                                                                                                                    (BETA)
                                                                                                                                    (("2"
                                                                                                                                      (CASE
                                                                                                                                          "FORALL (x, y: real): abs(x) <= y IMPLIES (x/2)*(x/2) <= (y*y)/4")
                                                                                                                                      (("1"
                                                                                                                                        (COPY
                                                                                                                                         -1)
                                                                                                                                        (("1"
                                                                                                                                          (COPY
                                                                                                                                           -1)
                                                                                                                                          (("1"
                                                                                                                                            (COPY
                                                                                                                                             -1)
                                                                                                                                            (("1"
                                                                                                                                              (INST?)
                                                                                                                                              (("1"
                                                                                                                                                (INST
                                                                                                                                                 -2
                                                                                                                                                 "y2"
                                                                                                                                                 "n")
                                                                                                                                                (("1"
                                                                                                                                                  (INST
                                                                                                                                                   -3
                                                                                                                                                   "y3"
                                                                                                                                                   "n")
                                                                                                                                                  (("1"
                                                                                                                                                    (INST
                                                                                                                                                     -4
                                                                                                                                                     "y0"
                                                                                                                                                     "n/2")
                                                                                                                                                    (("1"
                                                                                                                                                      (SPLIT)
                                                                                                                                                      (("1"
                                                                                                                                                        (SPLIT)
                                                                                                                                                        (("1"
                                                                                                                                                          (SPLIT)
                                                                                                                                                          (("1"
                                                                                                                                                            (SPLIT)
                                                                                                                                                            (("1"
                                                                                                                                                              (HIDE
                                                                                                                                                               -5
                                                                                                                                                               -6
                                                                                                                                                               -7
                                                                                                                                                               -8)
                                                                                                                                                              (("1"
                                                                                                                                                                (REWRITE*
                                                                                                                                                                 "real_props.div_times")
                                                                                                                                                                (("1"
                                                                                                                                                                  (REWRITE*
                                                                                                                                                                   "real_props.div_div2")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (LEMMA
                                                                                                                                                                     "le_plus_le")
                                                                                                                                                                    (("1"
                                                                                                                                                                      (COPY
                                                                                                                                                                       -1)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (INST
                                                                                                                                                                         -1
                                                                                                                                                                         "(n * n) / 4"
                                                                                                                                                                         "(y2 * y2) / 4"
                                                                                                                                                                         " (n * n) / 4"
                                                                                                                                                                         "(y3 * y3) / 4")
                                                                                                                                                                        (("1"
                                                                                                                                                                          (SIMPLIFY
                                                                                                                                                                           -1)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (SPLIT)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (HIDE
                                                                                                                                                                               -4
                                                                                                                                                                               -5)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (COPY
                                                                                                                                                                                 -2)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (INST
                                                                                                                                                                                   -1
                                                                                                                                                                                   " 2 * ((n * n) / 4)"
                                                                                                                                                                                   "(y1 * y1) / 4"
                                                                                                                                                                                   "(n * n) / 4"
                                                                                                                                                                                   "(y2 * y2) / 4 + (y3 * y3) / 4")
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (SIMPLIFY
                                                                                                                                                                                     -1)
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (SPLIT)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (HIDE
                                                                                                                                                                                         -2)
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (INST
                                                                                                                                                                                           -2
                                                                                                                                                                                           " 3 * ((n * n) / 4)"
                                                                                                                                                                                           "(y0 * y0) / 4"
                                                                                                                                                                                           "(n * n) / 16"
                                                                                                                                                                                           "(y1 * y1) / 4 + (y2 * y2) / 4 + (y3 * y3) / 4")
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (SPLIT)
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (HIDE
                                                                                                                                                                                               -2
                                                                                                                                                                                               -3
                                                                                                                                                                                               -4)
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (REWRITE
                                                                                                                                                                                                 "real_props.times_div1")
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (LEMMA
                                                                                                                                                                                                   "real_props.add_div")
                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                    (INST
                                                                                                                                                                                                     -1
                                                                                                                                                                                                     "16"
                                                                                                                                                                                                     "4"
                                                                                                                                                                                                     "n * n"
                                                                                                                                                                                                     "(3*(n*n))")
                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                      (REPLACES
                                                                                                                                                                                                       -1)
                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                        (SIMPLIFY
                                                                                                                                                                                                         -1)
                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                          (CASE
                                                                                                                                                                                                              "52 * (n * n) / 64 < n * n")
                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                            (CASE
                                                                                                                                                                                                                "FORALL (x, y, z: real): x <= y AND y < z => x < z")
                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                              (INST
                                                                                                                                                                                                               -1
                                                                                                                                                                                                               "(y0 * y0) / 4 + (y1 * y1) / 4 + (y2 * y2) / 4 + (y3 * y3) / 4"
                                                                                                                                                                                                               "52 * (n * n) / 64"
                                                                                                                                                                                                               "n * n")
                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                (SPLIT)
                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                  (PROPAX)
                                                                                                                                                                                                                  NIL
                                                                                                                                                                                                                  NIL)
                                                                                                                                                                                                                 ("2"
                                                                                                                                                                                                                  (PROPAX)
                                                                                                                                                                                                                  NIL
                                                                                                                                                                                                                  NIL)
                                                                                                                                                                                                                 ("3"
                                                                                                                                                                                                                  (PROPAX)
                                                                                                                                                                                                                  NIL
                                                                                                                                                                                                                  NIL))
                                                                                                                                                                                                                NIL))
                                                                                                                                                                                                              NIL)
                                                                                                                                                                                                             ("2"
                                                                                                                                                                                                              (HIDE-ALL-BUT
                                                                                                                                                                                                               1)
                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                (GRIND)
                                                                                                                                                                                                                NIL
                                                                                                                                                                                                                NIL))
                                                                                                                                                                                                              NIL))
                                                                                                                                                                                                            NIL)
                                                                                                                                                                                                           ("2"
                                                                                                                                                                                                            (HIDE-ALL-BUT
                                                                                                                                                                                                             1)
                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                              (REWRITE
                                                                                                                                                                                                               " div_mult_pos_lt1")
                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                (REWRITE
                                                                                                                                                                                                                 "both_sides_times_pos_lt1")
                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                  (HIDE
                                                                                                                                                                                                                   2)
                                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                                    (EXPAND
                                                                                                                                                                                                                     "n")
                                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                                      (TYPEPRED
                                                                                                                                                                                                                       "b")
                                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                                        (HIDE
                                                                                                                                                                                                                         -1
                                                                                                                                                                                                                         -2
                                                                                                                                                                                                                         -3
                                                                                                                                                                                                                         -4)
                                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                                          (REWRITE
                                                                                                                                                                                                                           " posreal_mult_closed")
                                                                                                                                                                                                                          NIL
                                                                                                                                                                                                                          NIL))
                                                                                                                                                                                                                        NIL))
                                                                                                                                                                                                                      NIL))
                                                                                                                                                                                                                    NIL))
                                                                                                                                                                                                                  NIL))
                                                                                                                                                                                                                NIL))
                                                                                                                                                                                                              NIL))
                                                                                                                                                                                                            NIL))
                                                                                                                                                                                                          NIL))
                                                                                                                                                                                                        NIL))
                                                                                                                                                                                                      NIL))
                                                                                                                                                                                                    NIL))
                                                                                                                                                                                                  NIL))
                                                                                                                                                                                                NIL))
                                                                                                                                                                                              NIL)
                                                                                                                                                                                             ("2"
                                                                                                                                                                                              (PROPAX)
                                                                                                                                                                                              NIL
                                                                                                                                                                                              NIL)
                                                                                                                                                                                             ("3"
                                                                                                                                                                                              (PROPAX)
                                                                                                                                                                                              NIL
                                                                                                                                                                                              NIL))
                                                                                                                                                                                            NIL))
                                                                                                                                                                                          NIL))
                                                                                                                                                                                        NIL)
                                                                                                                                                                                       ("2"
                                                                                                                                                                                        (PROPAX)
                                                                                                                                                                                        NIL
                                                                                                                                                                                        NIL)
                                                                                                                                                                                       ("3"
                                                                                                                                                                                        (PROPAX)
                                                                                                                                                                                        NIL
                                                                                                                                                                                        NIL))
                                                                                                                                                                                      NIL))
                                                                                                                                                                                    NIL))
                                                                                                                                                                                  NIL))
                                                                                                                                                                                NIL))
                                                                                                                                                                              NIL)
                                                                                                                                                                             ("2"
                                                                                                                                                                              (PROPAX)
                                                                                                                                                                              NIL
                                                                                                                                                                              NIL)
                                                                                                                                                                             ("3"
                                                                                                                                                                              (PROPAX)
                                                                                                                                                                              NIL
                                                                                                                                                                              NIL))
                                                                                                                                                                            NIL))
                                                                                                                                                                          NIL))
                                                                                                                                                                        NIL))
                                                                                                                                                                      NIL))
                                                                                                                                                                    NIL))
                                                                                                                                                                  NIL))
                                                                                                                                                                NIL))
                                                                                                                                                              NIL)
                                                                                                                                                             ("2"
                                                                                                                                                              (PROPAX)
                                                                                                                                                              NIL
                                                                                                                                                              NIL))
                                                                                                                                                            NIL)
                                                                                                                                                           ("2"
                                                                                                                                                            (PROPAX)
                                                                                                                                                            NIL
                                                                                                                                                            NIL))
                                                                                                                                                          NIL)
                                                                                                                                                         ("2"
                                                                                                                                                          (PROPAX)
                                                                                                                                                          NIL
                                                                                                                                                          NIL))
                                                                                                                                                        NIL)
                                                                                                                                                       ("2"
                                                                                                                                                        (PROPAX)
                                                                                                                                                        NIL
                                                                                                                                                        NIL))
                                                                                                                                                      NIL))
                                                                                                                                                    NIL))
                                                                                                                                                  NIL))
                                                                                                                                                NIL))
                                                                                                                                              NIL))
                                                                                                                                            NIL))
                                                                                                                                          NIL))
                                                                                                                                        NIL)
                                                                                                                                       ("2"
                                                                                                                                        (HIDE-ALL-BUT
                                                                                                                                         1)
                                                                                                                                        (("2"
                                                                                                                                          (SKEEP)
                                                                                                                                          (("2"
                                                                                                                                            (REWRITE
                                                                                                                                             "real_props.div_times")
                                                                                                                                            (("2"
                                                                                                                                              (REWRITE
                                                                                                                                               " both_sides_div_pos_le1")
                                                                                                                                              (("2"
                                                                                                                                                (LEMMA
                                                                                                                                                 "le_times_le_pos")
                                                                                                                                                (("2"
                                                                                                                                                  (INST
                                                                                                                                                   -1
                                                                                                                                                   "abs(x)"
                                                                                                                                                   "abs(x)"
                                                                                                                                                   "y"
                                                                                                                                                   "y")
                                                                                                                                                  (("2"
                                                                                                                                                    (SPLIT)
                                                                                                                                                    (("1"
                                                                                                                                                      (LEMMA
                                                                                                                                                       "abs_mult")
                                                                                                                                                      (("1"
                                                                                                                                                        (INST
                                                                                                                                                         -1
                                                                                                                                                         "x"
                                                                                                                                                         "x")
                                                                                                                                                        (("1"
                                                                                                                                                          (REPLACE
                                                                                                                                                           -1
                                                                                                                                                           -2
                                                                                                                                                           RL
                                                                                                                                                           HIDE)
                                                                                                                                                          (("1"
                                                                                                                                                            (REWRITE
                                                                                                                                                             "abs_square")
                                                                                                                                                            NIL
                                                                                                                                                            NIL))
                                                                                                                                                          NIL))
                                                                                                                                                        NIL))
                                                                                                                                                      NIL)
                                                                                                                                                     ("2"
                                                                                                                                                      (PROPAX)
                                                                                                                                                      NIL
                                                                                                                                                      NIL)
                                                                                                                                                     ("3"
                                                                                                                                                      (PROPAX)
                                                                                                                                                      NIL
                                                                                                                                                      NIL))
                                                                                                                                                    NIL))
                                                                                                                                                  NIL))
                                                                                                                                                NIL))
                                                                                                                                              NIL))
                                                                                                                                            NIL))
                                                                                                                                          NIL))
                                                                                                                                        NIL))
                                                                                                                                      NIL))
                                                                                                                                    NIL))
                                                                                                                                  NIL))
                                                                                                                                NIL))
                                                                                                                              NIL))
                                                                                                                            NIL))
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (HIDE-ALL-BUT (-9 -10 1))
                                (("2" (EXPAND "integer?")
                                  (("2" (ASSERT) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|rat_minus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|n| SKOLEM-CONST-DECL "rational" |quaternions_Hurwitz_rings| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|posint| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|Hurwitz_remainder_ineq2| FORMULA-DECL NIL |quaternions_Hurwitz_rings|
     NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|q_prod_charac| FORMULA-DECL NIL |quaternions| |algebra|)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|d| SKOLEM-CONST-DECL "(Hurwitz_ring)" |quaternions_Hurwitz_rings| NIL)
    (+ CONST-DECL "quat" |quaternions_def| |algebra|)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal"
     |real_types| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|div_div2| FORMULA-DECL NIL |real_props| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|div_mult_pos_lt1| FORMULA-DECL NIL |real_props| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|posreal_mult_closed| FORMULA-DECL NIL |real_axioms| NIL)
    (|both_sides_times_pos_lt1| FORMULA-DECL NIL |real_props| NIL)
    (|times_div1| FORMULA-DECL NIL |real_props| NIL)
    (|le_plus_le| FORMULA-DECL NIL |real_props| NIL)
    (|div_times| FORMULA-DECL NIL |real_props| NIL)
    (|both_sides_div_pos_le1| FORMULA-DECL NIL |real_props| NIL)
    (|abs_mult| FORMULA-DECL NIL |real_props| NIL)
    (|abs_square| FORMULA-DECL NIL |real_props| NIL)
    (|le_times_le_pos| FORMULA-DECL NIL |real_props| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|add_div| FORMULA-DECL NIL |real_props| NIL)
    (|times_u8_u8| APPLICATION-JUDGEMENT "uint16" |integertypes| NIL)
    (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|Hurwitz_red_norm_charac| FORMULA-DECL NIL |quaternions_Hurwitz_rings|
     NIL)
    (|times_div2| FORMULA-DECL NIL |real_props| NIL)
    (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|inv_one| FORMULA-DECL NIL |group| |algebra|)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|rat_abs_is_nonneg| APPLICATION-JUDGEMENT "{r: nonneg_rat | r >= q}"
     |real_defs| NIL)
    (|div_distributes| FORMULA-DECL NIL |real_props| NIL)
    (|inv| CONST-DECL "{y | x * y = one AND y * x = one}" |group| |algebra|)
    (|c| SKOLEM-CONST-DECL "(Hurwitz_ring)" |quaternions_Hurwitz_rings| NIL)
    (|negate_nz_T_is_nz_T| APPLICATION-JUDGEMENT "nz_T[rational,
     restrict[[numfield, numfield], [rational, rational], numfield](+),
     restrict[[numfield, numfield], [rational, rational], numfield](*), 0]"
     |quaternions_Hurwitz_rings| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|rat_plus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|Hurwitz_remainder_ineq1| FORMULA-DECL NIL |quaternions_Hurwitz_rings|
     NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|quat| TYPE-EQ-DECL NIL |quaternions_def| |algebra|)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|Hurwitz_ring| CONST-DECL "set[quat[rational,
         restrict[[numfield, numfield], [rational, rational], numfield](+),
         restrict[[numfield, numfield], [rational, rational], numfield](*),
         0, 1, -1, -1]]"
     |quaternions_Hurwitz_rings| NIL)
    (|Hurwitz_ring| NONEMPTY-TYPE-EQ-DECL NIL |quaternions_Hurwitz_rings| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|scalar_F| CONST-DECL "set[quat]" |quaternions_def| |algebra|)
    (|integer?| CONST-DECL "bool" |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL))
   SHOSTAK)
  (|Hurwitz_left_division_scalar-1| NIL 3924294656
   (""
    (STOP-REWRITE "right_identity" "left_identity" "one_left" "one_right"
     "zero_plus" "plus_zero")
    (("" (SKEEP)
      (("" (TYPEPRED "b")
        (("" (HIDE -1)
          (("" (EXPAND "scalar_F")
            (("" (FLATTEN)
              (("" (NAME "n" "b`x")
                (("" (REPLACE -1 -5)
                  (("" (TYPEPRED "a")
                    (("" (EXPAND "Hurwitz_ring")
                      (("" (SKOLEM -1 ("t0" "t1" "t2" "t3"))
                        (("" (FLATTEN)
                          (("" (REPLACE -5 -10)
                            (("" (CASE "integer_pred(n) AND n >= 0 AND n > 0")
                              (("1" (LEMMA "Hurwitz_remainder_ineq1")
                                (("1" (INST -1 "t0" "n")
                                  (("1" (SKOLEM -1 "x0")
                                    (("1" (LEMMA "Hurwitz_remainder_ineq2")
                                      (("1" (COPY -1)
                                        (("1" (COPY -1)
                                          (("1" (INST -1 "t0" "t1" "x0" "n")
                                            (("1" (INST -2 "t0" "t2" "x0" "n")
                                              (("1"
                                                (INST -3 "t0" "t3" "x0" "n")
                                                (("1" (SKOLEM -1 "x1")
                                                  (("1" (SKOLEM -2 "x2")
                                                    (("1" (SKOLEM -3 "x3")
                                                      (("1"
                                                        (NAME "c"
                                                              "mk_Hurwitz(x0, x1, x2, x3)")
                                                        (("1"
                                                          (NAME "d"
                                                                "mk_Hurwitz(t0-x0*n, t1-x1*n, t2-x2*n, t3-x3*n)")
                                                          (("1"
                                                            (INST 1 "c" "d")
                                                            (("1"
                                                              (LEMMA
                                                               "q_prod_charac")
                                                              (("1" (INST?)
                                                                (("1"
                                                                  (REPLACES -1)
                                                                  (("1"
                                                                    (REPLACE
                                                                     -12 1)
                                                                    (("1"
                                                                      (REPLACE
                                                                       -13 1)
                                                                      (("1"
                                                                        (REPLACE
                                                                         -14 1)
                                                                        (("1"
                                                                          (REPLACE
                                                                           -15
                                                                           1)
                                                                          (("1"
                                                                            (EXPAND
                                                                             "c")
                                                                            (("1"
                                                                              (EXPAND
                                                                               "d")
                                                                              (("1"
                                                                                (HIDE
                                                                                 -1
                                                                                 -2)
                                                                                (("1"
                                                                                  (EXPAND
                                                                                   "+
")
                                                                                  (("1"
                                                                                    (SPLIT)
                                                                                    (("1"
                                                                                      (REWRITE
                                                                                       "times_div2")
                                                                                      (("1"
                                                                                        (CASE-REPLACE
                                                                                         "inv(0) = 0")
                                                                                        (("1"
                                                                                          (SIMPLIFY)
                                                                                          (("1"
                                                                                            (REWRITE
                                                                                             "real_props.div_distributes")
                                                                                            (("1"
                                                                                              (HIDE-ALL-BUT
                                                                                               (-7
                                                                                                -8
                                                                                                -9
                                                                                                -10
                                                                                                1))
                                                                                              (("1"
                                                                                                (DECOMPOSE-EQUALITY)
                                                                                                NIL
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL)
                                                                                         ("2"
                                                                                          (HIDE-ALL-BUT
                                                                                           1)
                                                                                          (("2"
                                                                                            (GRIND)
                                                                                            NIL
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL)
                                                                                     ("2"
                                                                                      (HIDE
                                                                                       -5
                                                                                       -6
                                                                                       -7
                                                                                       -8
                                                                                       -9
                                                                                       -14
                                                                                       -15)
                                                                                      (("2"
                                                                                        (LEMMA
                                                                                         "Hurwitz_red_norm_charac")
                                                                                        (("2"
                                                                                          (INST
                                                                                           -1
                                                                                           "b")
                                                                                          (("2"
                                                                                            (REPLACES
                                                                                             -1)
                                                                                            (("2"
                                                                                              (BETA)
                                                                                              (("2"
                                                                                                (REPLACES
                                                                                                 -)
                                                                                                (("2"
                                                                                                  (SIMPLIFY
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (LEMMA
                                                                                                     "real_props.add_div")
                                                                                                    (("2"
                                                                                                      (INST?)
                                                                                                      (("2"
                                                                                                        (COPY
                                                                                                         -1)
                                                                                                        (("2"
                                                                                                          (COPY
                                                                                                           -1)
                                                                                                          (("2"
                                                                                                            (INST
                                                                                                             -1
                                                                                                             "1"
                                                                                                             "- x1 * n + t1")
                                                                                                            (("2"
                                                                                                              (INST
                                                                                                               -2
                                                                                                               "1"
                                                                                                               "- x2 * n + t2")
                                                                                                              (("2"
                                                                                                                (INST
                                                                                                                 -3
                                                                                                                 "1"
                                                                                                                 "- x3 * n + t3")
                                                                                                                (("2"
                                                                                                                  (REPLACES
                                                                                                                   -)
                                                                                                                  (("2"
                                                                                                                    (SIMPLIFY)
                                                                                                                    (("2"
                                                                                                                      (NAME-REPLACE
                                                                                                                       "y0"
                                                                                                                       "t0 - n * x0")
                                                                                                                      (("2"
                                                                                                                        (NAME-REPLACE
                                                                                                                         "y1"
                                                                                                                         "-2 * (n * x1) - n * x0 + t0 + 2 * t1")
                                                                                                                        (("2"
                                                                                                                          (NAME-REPLACE
                                                                                                                           "y2"
                                                                                                                           "-2 * (n * x2) - n * x0 + t0 + 2 * t2")
                                                                                                                          (("2"
                                                                                                                            (NAME-REPLACE
                                                                                                                             "y3"
                                                                                                                             "-2 * (n * x3) - n * x0 + t0 + 2 * t3")
                                                                                                                            (("2"
                                                                                                                              (LEMMA
                                                                                                                               "Hurwitz_red_norm_charac")
                                                                                                                              (("2"
                                                                                                                                (INST?)
                                                                                                                                (("2"
                                                                                                                                  (REPLACES
                                                                                                                                   -1)
                                                                                                                                  (("2"
                                                                                                                                    (BETA)
                                                                                                                                    (("2"
                                                                                                                                      (CASE
                                                                                                                                          "FORALL (x, y: real): abs(x) <= y IMPLIES (x/2)*(x/2) <= (y*y)/4")
                                                                                                                                      (("1"
                                                                                                                                        (COPY
                                                                                                                                         -1)
                                                                                                                                        (("1"
                                                                                                                                          (COPY
                                                                                                                                           -1)
                                                                                                                                          (("1"
                                                                                                                                            (COPY
                                                                                                                                             -1)
                                                                                                                                            (("1"
                                                                                                                                              (INST?)
                                                                                                                                              (("1"
                                                                                                                                                (INST
                                                                                                                                                 -2
                                                                                                                                                 "y2"
                                                                                                                                                 "n")
                                                                                                                                                (("1"
                                                                                                                                                  (INST
                                                                                                                                                   -3
                                                                                                                                                   "y3"
                                                                                                                                                   "n")
                                                                                                                                                  (("1"
                                                                                                                                                    (INST
                                                                                                                                                     -4
                                                                                                                                                     "y0"
                                                                                                                                                     "n/2")
                                                                                                                                                    (("1"
                                                                                                                                                      (SPLIT)
                                                                                                                                                      (("1"
                                                                                                                                                        (SPLIT)
                                                                                                                                                        (("1"
                                                                                                                                                          (SPLIT)
                                                                                                                                                          (("1"
                                                                                                                                                            (SPLIT)
                                                                                                                                                            (("1"
                                                                                                                                                              (HIDE
                                                                                                                                                               -5
                                                                                                                                                               -6
                                                                                                                                                               -7
                                                                                                                                                               -8)
                                                                                                                                                              (("1"
                                                                                                                                                                (REWRITE*
                                                                                                                                                                 "real_props.div_times")
                                                                                                                                                                (("1"
                                                                                                                                                                  (REWRITE*
                                                                                                                                                                   "real_props.div_div2")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (LEMMA
                                                                                                                                                                     "le_plus_le")
                                                                                                                                                                    (("1"
                                                                                                                                                                      (COPY
                                                                                                                                                                       -1)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (INST
                                                                                                                                                                         -1
                                                                                                                                                                         "(n * n) / 4"
                                                                                                                                                                         "(y2 * y2) / 4"
                                                                                                                                                                         " (n * n) / 4"
                                                                                                                                                                         "(y3 * y3) / 4")
                                                                                                                                                                        (("1"
                                                                                                                                                                          (SIMPLIFY
                                                                                                                                                                           -1)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (SPLIT)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (HIDE
                                                                                                                                                                               -4
                                                                                                                                                                               -5)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (COPY
                                                                                                                                                                                 -2)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (INST
                                                                                                                                                                                   -1
                                                                                                                                                                                   " 2 * ((n * n) / 4)"
                                                                                                                                                                                   "(y1 * y1) / 4"
                                                                                                                                                                                   "(n * n) / 4"
                                                                                                                                                                                   "(y2 * y2) / 4 + (y3 * y3) / 4")
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (SIMPLIFY
                                                                                                                                                                                     -1)
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (SPLIT)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (HIDE
                                                                                                                                                                                         -2)
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (INST
                                                                                                                                                                                           -2
                                                                                                                                                                                           " 3 * ((n * n) / 4)"
                                                                                                                                                                                           "(y0 * y0) / 4"
                                                                                                                                                                                           "(n * n) / 16"
                                                                                                                                                                                           "(y1 * y1) / 4 + (y2 * y2) / 4 + (y3 * y3) / 4")
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (SPLIT)
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (HIDE
                                                                                                                                                                                               -2
                                                                                                                                                                                               -3
                                                                                                                                                                                               -4)
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (REWRITE
                                                                                                                                                                                                 "real_props.times_div1")
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (LEMMA
                                                                                                                                                                                                   "real_props.add_div")
                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                    (INST
                                                                                                                                                                                                     -1
                                                                                                                                                                                                     "16"
                                                                                                                                                                                                     "4"
                                                                                                                                                                                                     "n * n"
                                                                                                                                                                                                     "(3*(n*n))")
                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                      (REPLACES
                                                                                                                                                                                                       -1)
                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                        (SIMPLIFY
                                                                                                                                                                                                         -1)
                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                          (CASE
                                                                                                                                                                                                              "52 * (n * n) / 64 < n * n")
                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                            (CASE
                                                                                                                                                                                                                "FORALL (x, y, z: real): x <= y AND y < z => x < z")
                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                              (INST
                                                                                                                                                                                                               -1
                                                                                                                                                                                                               "(y0 * y0) / 4 + (y1 * y1) / 4 + (y2 * y2) / 4 + (y3 * y3) / 4"
                                                                                                                                                                                                               "52 * (n * n) / 64"
                                                                                                                                                                                                               "n * n")
                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                (SPLIT)
                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                  (PROPAX)
                                                                                                                                                                                                                  NIL
                                                                                                                                                                                                                  NIL)
                                                                                                                                                                                                                 ("2"
                                                                                                                                                                                                                  (PROPAX)
                                                                                                                                                                                                                  NIL
                                                                                                                                                                                                                  NIL)
                                                                                                                                                                                                                 ("3"
                                                                                                                                                                                                                  (PROPAX)
                                                                                                                                                                                                                  NIL
                                                                                                                                                                                                                  NIL))
                                                                                                                                                                                                                NIL))
                                                                                                                                                                                                              NIL)
                                                                                                                                                                                                             ("2"
                                                                                                                                                                                                              (HIDE-ALL-BUT
                                                                                                                                                                                                               1)
                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                (GRIND)
                                                                                                                                                                                                                NIL
                                                                                                                                                                                                                NIL))
                                                                                                                                                                                                              NIL))
                                                                                                                                                                                                            NIL)
                                                                                                                                                                                                           ("2"
                                                                                                                                                                                                            (HIDE-ALL-BUT
                                                                                                                                                                                                             1)
                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                              (REWRITE
                                                                                                                                                                                                               " div_mult_pos_lt1")
                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                (REWRITE
                                                                                                                                                                                                                 "both_sides_times_pos_lt1")
                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                  (HIDE
                                                                                                                                                                                                                   2)
                                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                                    (EXPAND
                                                                                                                                                                                                                     "n")
                                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                                      (TYPEPRED
                                                                                                                                                                                                                       "b")
                                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                                        (HIDE
                                                                                                                                                                                                                         -1
                                                                                                                                                                                                                         -2
                                                                                                                                                                                                                         -3
                                                                                                                                                                                                                         -4)
                                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                                          (REWRITE
                                                                                                                                                                                                                           " posreal_mult_closed")
                                                                                                                                                                                                                          NIL
                                                                                                                                                                                                                          NIL))
                                                                                                                                                                                                                        NIL))
                                                                                                                                                                                                                      NIL))
                                                                                                                                                                                                                    NIL))
                                                                                                                                                                                                                  NIL))
                                                                                                                                                                                                                NIL))
                                                                                                                                                                                                              NIL))
                                                                                                                                                                                                            NIL))
                                                                                                                                                                                                          NIL))
                                                                                                                                                                                                        NIL))
                                                                                                                                                                                                      NIL))
                                                                                                                                                                                                    NIL))
                                                                                                                                                                                                  NIL))
                                                                                                                                                                                                NIL))
                                                                                                                                                                                              NIL)
                                                                                                                                                                                             ("2"
                                                                                                                                                                                              (PROPAX)
                                                                                                                                                                                              NIL
                                                                                                                                                                                              NIL)
                                                                                                                                                                                             ("3"
                                                                                                                                                                                              (PROPAX)
                                                                                                                                                                                              NIL
                                                                                                                                                                                              NIL))
                                                                                                                                                                                            NIL))
                                                                                                                                                                                          NIL))
                                                                                                                                                                                        NIL)
                                                                                                                                                                                       ("2"
                                                                                                                                                                                        (PROPAX)
                                                                                                                                                                                        NIL
                                                                                                                                                                                        NIL)
                                                                                                                                                                                       ("3"
                                                                                                                                                                                        (PROPAX)
                                                                                                                                                                                        NIL
                                                                                                                                                                                        NIL))
                                                                                                                                                                                      NIL))
                                                                                                                                                                                    NIL))
                                                                                                                                                                                  NIL))
                                                                                                                                                                                NIL))
                                                                                                                                                                              NIL)
                                                                                                                                                                             ("2"
                                                                                                                                                                              (PROPAX)
                                                                                                                                                                              NIL
                                                                                                                                                                              NIL)
                                                                                                                                                                             ("3"
                                                                                                                                                                              (PROPAX)
                                                                                                                                                                              NIL
                                                                                                                                                                              NIL))
                                                                                                                                                                            NIL))
                                                                                                                                                                          NIL))
                                                                                                                                                                        NIL))
                                                                                                                                                                      NIL))
                                                                                                                                                                    NIL))
                                                                                                                                                                  NIL))
                                                                                                                                                                NIL))
                                                                                                                                                              NIL)
                                                                                                                                                             ("2"
                                                                                                                                                              (PROPAX)
                                                                                                                                                              NIL
                                                                                                                                                              NIL))
                                                                                                                                                            NIL)
                                                                                                                                                           ("2"
                                                                                                                                                            (PROPAX)
                                                                                                                                                            NIL
                                                                                                                                                            NIL))
                                                                                                                                                          NIL)
                                                                                                                                                         ("2"
                                                                                                                                                          (PROPAX)
                                                                                                                                                          NIL
                                                                                                                                                          NIL))
                                                                                                                                                        NIL)
                                                                                                                                                       ("2"
                                                                                                                                                        (PROPAX)
                                                                                                                                                        NIL
                                                                                                                                                        NIL))
                                                                                                                                                      NIL))
                                                                                                                                                    NIL))
                                                                                                                                                  NIL))
                                                                                                                                                NIL))
                                                                                                                                              NIL))
                                                                                                                                            NIL))
                                                                                                                                          NIL))
                                                                                                                                        NIL)
                                                                                                                                       ("2"
                                                                                                                                        (HIDE-ALL-BUT
                                                                                                                                         1)
                                                                                                                                        (("2"
                                                                                                                                          (SKEEP)
                                                                                                                                          (("2"
                                                                                                                                            (REWRITE
                                                                                                                                             "real_props.div_times")
                                                                                                                                            (("2"
                                                                                                                                              (REWRITE
                                                                                                                                               " both_sides_div_pos_le1")
                                                                                                                                              (("2"
                                                                                                                                                (LEMMA
                                                                                                                                                 "le_times_le_pos")
                                                                                                                                                (("2"
                                                                                                                                                  (INST
                                                                                                                                                   -1
                                                                                                                                                   "abs(x)"
                                                                                                                                                   "abs(x)"
                                                                                                                                                   "y"
                                                                                                                                                   "y")
                                                                                                                                                  (("2"
                                                                                                                                                    (SPLIT)
                                                                                                                                                    (("1"
                                                                                                                                                      (LEMMA
                                                                                                                                                       "abs_mult")
                                                                                                                                                      (("1"
                                                                                                                                                        (INST
                                                                                                                                                         -1
                                                                                                                                                         "x"
                                                                                                                                                         "x")
                                                                                                                                                        (("1"
                                                                                                                                                          (REPLACE
                                                                                                                                                           -1
                                                                                                                                                           -2
                                                                                                                                                           RL
                                                                                                                                                           HIDE)
                                                                                                                                                          (("1"
                                                                                                                                                            (REWRITE
                                                                                                                                                             "abs_square")
                                                                                                                                                            NIL
                                                                                                                                                            NIL))
                                                                                                                                                          NIL))
                                                                                                                                                        NIL))
                                                                                                                                                      NIL)
                                                                                                                                                     ("2"
                                                                                                                                                      (PROPAX)
                                                                                                                                                      NIL
                                                                                                                                                      NIL)
                                                                                                                                                     ("3"
                                                                                                                                                      (PROPAX)
                                                                                                                                                      NIL
                                                                                                                                                      NIL))
                                                                                                                                                    NIL))
                                                                                                                                                  NIL))
                                                                                                                                                NIL))
                                                                                                                                              NIL))
                                                                                                                                            NIL))
                                                                                                                                          NIL))
                                                                                                                                        NIL))
                                                                                                                                      NIL))
                                                                                                                                    NIL))
                                                                                                                                  NIL))
                                                                                                                                NIL))
                                                                                                                              NIL))
                                                                                                                            NIL))
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (HIDE-ALL-BUT (-9 -10 1))
                                (("2" (EXPAND "integer?")
                                  (("2" (ASSERT) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|rat_minus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|posint| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|Hurwitz_remainder_ineq2| FORMULA-DECL NIL |quaternions_Hurwitz_rings|
     NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|q_prod_charac| FORMULA-DECL NIL |quaternions| |algebra|)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (+ CONST-DECL "quat" |quaternions_def| |algebra|)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal"
     |real_types| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|div_div2| FORMULA-DECL NIL |real_props| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|div_mult_pos_lt1| FORMULA-DECL NIL |real_props| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|posreal_mult_closed| FORMULA-DECL NIL |real_axioms| NIL)
    (|both_sides_times_pos_lt1| FORMULA-DECL NIL |real_props| NIL)
    (|times_div1| FORMULA-DECL NIL |real_props| NIL)
    (|le_plus_le| FORMULA-DECL NIL |real_props| NIL)
    (|div_times| FORMULA-DECL NIL |real_props| NIL)
    (|both_sides_div_pos_le1| FORMULA-DECL NIL |real_props| NIL)
    (|abs_mult| FORMULA-DECL NIL |real_props| NIL)
    (|abs_square| FORMULA-DECL NIL |real_props| NIL)
    (|le_times_le_pos| FORMULA-DECL NIL |real_props| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|add_div| FORMULA-DECL NIL |real_props| NIL)
    (|times_u8_u8| APPLICATION-JUDGEMENT "uint16" |integertypes| NIL)
    (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|Hurwitz_red_norm_charac| FORMULA-DECL NIL |quaternions_Hurwitz_rings|
     NIL)
    (|times_div2| FORMULA-DECL NIL |real_props| NIL)
    (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|inv_one| FORMULA-DECL NIL |group| |algebra|)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|rat_abs_is_nonneg| APPLICATION-JUDGEMENT "{r: nonneg_rat | r >= q}"
     |real_defs| NIL)
    (|div_distributes| FORMULA-DECL NIL |real_props| NIL)
    (|inv| CONST-DECL "{y | x * y = one AND y * x = one}" |group| |algebra|)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|rat_plus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|Hurwitz_remainder_ineq1| FORMULA-DECL NIL |quaternions_Hurwitz_rings|
     NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|quat| TYPE-EQ-DECL NIL |quaternions_def| |algebra|)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|Hurwitz_ring| CONST-DECL "set[quat[rational,
         restrict[[numfield, numfield], [rational, rational], numfield](+),
         restrict[[numfield, numfield], [rational, rational], numfield](*),
         0, 1, -1, -1]]"
     |quaternions_Hurwitz_rings| NIL)
    (|Hurwitz_ring| NONEMPTY-TYPE-EQ-DECL NIL |quaternions_Hurwitz_rings| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|scalar_F| CONST-DECL "set[quat]" |quaternions_def| |algebra|)
    (|integer?| CONST-DECL "bool" |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL))
   SHOSTAK))
 (|Hurwitz_left_division| 0
  (|Hurwitz_left_division-0| "" 3933736328
   (""
    (STOP-REWRITE "right_identity" "left_identity" "one_left" "one_right"
     "zero_plus" "plus_zero")
    (("" (LEMMA "Hurwitz_left_division_scalar")
      (("" (SKEEP)
        (("" (TYPEPRED "b")
          (("" (HIDE -1)
            (("" (INST -2 "a * conjugate(b)" "red_norm(b)")
              (("1" (SKEEP)
                (("1" (CASE "red_norm(b) = b * conjugate(b)")
                  (("1" (REPLACE -1 (-3 -4) LR HIDE)
                    (("1" (NAME "r" "a+inv(c*b)")
                      (("1" (CASE "d = r * conjugate(b)")
                        (("1" (REPLACE -1 -5 LR HIDE)
                          (("1" (HIDE -1 -3)
                            (("1" (INST 1 "c" "r")
                              (("1" (SPLIT)
                                (("1" (HIDE-ALL-BUT 1)
                                  (("1" (EXPAND "r")
                                    (("1" (GRIND)
                                      (("1" (DECOMPOSE-EQUALITY) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (LEMMA "red_norm_prod")
                                  (("2" (INST-CP -1 "r" "conjugate(b)")
                                    (("2" (INST -1 "b" "conjugate(b)")
                                      (("2" (REPLACES -)
                                        (("2"
                                          (CASE
                                              "FORALL (u: quat, v: quat| scalar_F(v)): (u*v)`x = u`x * v`x")
                                          (("1"
                                            (INST-CP -1 "red_norm(r)"
                                             "red_norm(conjugate(b))")
                                            (("1"
                                              (INST -1 "red_norm(b)"
                                               "red_norm(conjugate(b))")
                                              (("1" (REPLACES -)
                                                (("1"
                                                  (LEMMA
                                                   "real_props.both_sides_times_pos_lt1")
                                                  (("1"
                                                    (INST -1
                                                     "red_norm(conjugate(b))`x"
                                                     "red_norm(r)`x"
                                                     "red_norm(b)`x")
                                                    (("1" (FLATTEN)
                                                      (("1" (HIDE -2)
                                                        (("1" (PROP) NIL NIL))
                                                        NIL))
                                                      NIL)
                                                     ("2" (HIDE -2 2)
                                                      (("2"
                                                        (LEMMA "red_norm_conj")
                                                        (("2" (INST -1 "b")
                                                          (("2" (REPLACES -1)
                                                            (("2" (ASSERT) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (HIDE-ALL-BUT 1)
                                                (("2"
                                                  (REWRITE "red_norm_charac")
                                                  (("2" (EXPAND "scalar_F")
                                                    (("2" (PROPAX) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2" (HIDE-ALL-BUT 1)
                                              (("2" (REWRITE "red_norm_charac")
                                                (("2" (EXPAND "scalar_F")
                                                  (("2" (PROPAX) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("2" (HIDE-ALL-BUT 1)
                                            (("2" (SKEEP)
                                              (("2" (TYPEPRED "v")
                                                (("2" (EXPAND "scalar_F")
                                                  (("2" (LEMMA "q_prod_charac")
                                                    (("2" (INST?)
                                                      (("2" (REPLACES -1)
                                                        (("2" (FLATTEN)
                                                          (("2" (REPLACES -)
                                                            (("2" (SIMPLIFY)
                                                              (("2" (PROPAX)
                                                                NIL NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (HIDE -1 -2 -4 2)
                          (("2" (EXPAND "r")
                            (("2"
                              (LEMMA
                               "ring[quat, +, *, zero_q].left_distributive")
                              (("2" (INST?)
                                (("2" (REPLACES -1)
                                  (("2" (REPLACES -1)
                                    (("2"
                                      (REWRITE
                                       "ring[quat, +, *, zero_q].plus_commutative")
                                      (("2"
                                        (LEMMA
                                         "ring[quat, +, *, zero_q].times_associative")
                                        (("2" (INST?)
                                          (("2" (REPLACE -1 1 RL HIDE)
                                            (("2"
                                              (LEMMA
                                               "ring[quat, +, *, zero_q].left_distributive")
                                              (("2"
                                                (INST -1 "c * b" "inv(c * b)"
                                                 "conjugate(b)")
                                                (("2"
                                                  (REWRITE
                                                   "ring[quat, +, *, zero_q].plus_associative")
                                                  (("2" (REPLACE -1 1 RL HIDE)
                                                    (("2"
                                                      (CASE-REPLACE
                                                       "(c * b) + inv(c * b) = zero_q")
                                                      (("1" (HIDE -1)
                                                        (("1"
                                                          (REWRITE
                                                           "zero_q_times")
                                                          (("1"
                                                            (REWRITE
                                                             "plus_zero_q")
                                                            NIL NIL))
                                                          NIL))
                                                        NIL)
                                                       ("2" (HIDE-ALL-BUT 1)
                                                        (("2" (GRIND) NIL NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (LEMMA "quat_is_ring_w_one")
                    (("2" (EXPAND "ring_with_one?")
                      (("2" (FLATTEN)
                        (("2" (HIDE-ALL-BUT 1)
                          (("2" (EXPAND "red_norm") (("2" (PROPAX) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (HIDE 2)
                (("2" (LEMMA "Hurwitz_red_norm_is_posint")
                  (("2" (INST -1 "b")
                    (("2" (SPLIT)
                      (("1" (HIDE-ALL-BUT 1)
                        (("1" (EXPAND "red_norm") (("1" (PROPAX) NIL NIL))
                          NIL))
                        NIL)
                       ("2" (LEMMA "red_norm_charac")
                        (("2" (INST -1 "b")
                          (("2" (REPLACES -1)
                            (("2" (HIDE -)
                              (("2" (EXPAND "scalar_F")
                                (("2" (PROPAX) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("3" (ASSERT) NIL NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|Hurwitz_left_division_scalar| FORMULA-DECL NIL
     |quaternions_Hurwitz_rings| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|quat| TYPE-EQ-DECL NIL |quaternions_def| |algebra|)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|Hurwitz_ring| CONST-DECL "set[quat[rational,
         restrict[[numfield, numfield], [rational, rational], numfield](+),
         restrict[[numfield, numfield], [rational, rational], numfield](*),
         0, 1, -1, -1]]"
     |quaternions_Hurwitz_rings| NIL)
    (|Hurwitz_ring| NONEMPTY-TYPE-EQ-DECL NIL |quaternions_Hurwitz_rings| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|red_norm| CONST-DECL "quat" |quaternions_def| |algebra|)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|hurwitz_prod| APPLICATION-JUDGEMENT "Hurwitz_ring"
     |quaternions_Hurwitz_rings| NIL)
    (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|rat_plus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|hurwitz_conjugate| APPLICATION-JUDGEMENT "Hurwitz_ring"
     |quaternions_Hurwitz_rings| NIL)
    (|integer?| CONST-DECL "bool" |integers| NIL)
    (|scalar_F| CONST-DECL "set[quat]" |quaternions_def| |algebra|)
    (|b| SKOLEM-CONST-DECL "{b: Hurwitz_ring | red_norm(b)`x > 0}"
     |quaternions_Hurwitz_rings| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (* CONST-DECL "[quat, quat -> quat]" |quaternions_def| |algebra|)
    (|conjugate| CONST-DECL "quat" |quaternions_def| |algebra|)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|hurwitz_inv| APPLICATION-JUDGEMENT "Hurwitz_ring"
     |quaternions_Hurwitz_rings| NIL)
    (|hurwitz_sum| APPLICATION-JUDGEMENT "Hurwitz_ring"
     |quaternions_Hurwitz_rings| NIL)
    (|inv| CONST-DECL "quat" |quaternions_def| |algebra|)
    (+ CONST-DECL "quat" |quaternions_def| |algebra|)
    (|zero_q| CONST-DECL "quat" |quaternions_def| |algebra|)
    (|left_distributive| FORMULA-DECL NIL |ring| |algebra|)
    (|plus_commutative| FORMULA-DECL NIL |ring| |algebra|)
    (|plus_associative| FORMULA-DECL NIL |ring| |algebra|)
    (|zero_q_times| FORMULA-DECL NIL |quaternions| |algebra|)
    (|plus_zero_q| FORMULA-DECL NIL |quaternions| |algebra|)
    (|inv_right| FORMULA-DECL NIL |group| |algebra|)
    (|times_associative| FORMULA-DECL NIL |ring| |algebra|)
    (|red_norm_prod| FORMULA-DECL NIL |quaternions| |algebra|)
    (|both_sides_times_pos_lt1| FORMULA-DECL NIL |real_props| NIL)
    (|red_norm_conj| FORMULA-DECL NIL |quaternions| |algebra|)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|red_norm_charac| FORMULA-DECL NIL |quaternions| |algebra|)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|odd_times_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|negate_nz_T_is_nz_T| APPLICATION-JUDGEMENT "nz_T[rational,
     restrict[[numfield, numfield], [rational, rational], numfield](+),
     restrict[[numfield, numfield], [rational, rational], numfield](*), 0]"
     |quaternions_Hurwitz_rings| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|one_times| FORMULA-DECL NIL |ring_with_one| |algebra|)
    (|q_prod_charac| FORMULA-DECL NIL |quaternions| |algebra|)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|inv| CONST-DECL "{y | x * y = one AND y * x = one}" |group| |algebra|)
    (|r| SKOLEM-CONST-DECL "Hurwitz_ring" |quaternions_Hurwitz_rings| NIL)
    (|ring_with_one?| CONST-DECL "bool" |ring_with_one_def| |algebra|)
    (|quat_is_ring_w_one| FORMULA-DECL NIL |quaternions| |algebra|)
    (|Hurwitz_red_norm_is_posint| FORMULA-DECL NIL |quaternions_Hurwitz_rings|
     NIL))
   SHOSTAK)
  (|Hurwitz_left_division-1| NIL 3924297671
   (""
    (STOP-REWRITE "right_identity" "left_identity" "one_left" "one_right"
     "zero_plus" "plus_zero")
    (("" (LEMMA "Hurwitz_left_division_scalar")
      (("" (SKEEP)
        (("" (TYPEPRED "b")
          (("" (HIDE -1)
            (("" (INST -2 "a * conjugate(b)" "red_norm(b)")
              (("1" (SKEEP)
                (("1" (CASE "red_norm(b) = b * conjugate(b)")
                  (("1" (REPLACE -1 (-3 -4) LR HIDE)
                    (("1" (NAME "r" "a+inv(c*b)")
                      (("1" (CASE "d = r * conjugate(b)")
                        (("1" (REPLACE -1 -5 LR HIDE)
                          (("1" (HIDE -1 -3)
                            (("1" (INST 1 "c" "r")
                              (("1" (SPLIT)
                                (("1" (HIDE-ALL-BUT 1)
                                  (("1" (EXPAND "r")
                                    (("1" (GRIND)
                                      (("1" (DECOMPOSE-EQUALITY) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (LEMMA "red_norm_prod")
                                  (("2" (INST-CP -1 "r" "conjugate(b)")
                                    (("2" (INST -1 "b" "conjugate(b)")
                                      (("2" (REPLACES -)
                                        (("2"
                                          (CASE
                                              "FORALL (u: quat, v: quat| scalar_F(v)): (u*v)`x = u`x * v`x")
                                          (("1"
                                            (INST-CP -1 "red_norm(r)"
                                             "red_norm(conjugate(b))")
                                            (("1"
                                              (INST -1 "red_norm(b)"
                                               "red_norm(conjugate(b))")
                                              (("1" (REPLACES -)
                                                (("1"
                                                  (LEMMA
                                                   "real_props.both_sides_times_pos_lt1")
                                                  (("1"
                                                    (INST -1
                                                     "red_norm(conjugate(b))`x"
                                                     "red_norm(r)`x"
                                                     "red_norm(b)`x")
                                                    (("1" (FLATTEN)
                                                      (("1" (HIDE -2)
                                                        (("1" (PROP) NIL NIL))
                                                        NIL))
                                                      NIL)
                                                     ("2" (HIDE -2 2)
                                                      (("2"
                                                        (LEMMA "red_norm_conj")
                                                        (("2" (INST -1 "b")
                                                          (("2" (REPLACES -1)
                                                            (("2" (ASSERT) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (HIDE-ALL-BUT 1)
                                                (("2"
                                                  (REWRITE "red_norm_charac")
                                                  (("2" (EXPAND "scalar_F")
                                                    (("2" (PROPAX) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2" (HIDE-ALL-BUT 1)
                                              (("2" (REWRITE "red_norm_charac")
                                                (("2" (EXPAND "scalar_F")
                                                  (("2" (PROPAX) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("2" (HIDE-ALL-BUT 1)
                                            (("2" (SKEEP)
                                              (("2" (TYPEPRED "v")
                                                (("2" (EXPAND "scalar_F")
                                                  (("2" (LEMMA "q_prod_charac")
                                                    (("2" (INST?)
                                                      (("2" (REPLACES -1)
                                                        (("2" (FLATTEN)
                                                          (("2" (REPLACES -)
                                                            (("2" (SIMPLIFY)
                                                              (("2" (PROPAX)
                                                                NIL NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (HIDE -1 -2 -4 2)
                          (("2" (EXPAND "r")
                            (("2"
                              (LEMMA
                               "ring[quat, +, *, zero_q].left_distributive")
                              (("2" (INST?)
                                (("2" (REPLACES -1)
                                  (("2" (REPLACES -1)
                                    (("2"
                                      (REWRITE
                                       "ring[quat, +, *, zero_q].plus_commutative")
                                      (("2"
                                        (LEMMA
                                         "ring[quat, +, *, zero_q].times_associative")
                                        (("2" (INST?)
                                          (("2" (REPLACE -1 1 RL HIDE)
                                            (("2"
                                              (LEMMA
                                               "ring[quat, +, *, zero_q].left_distributive")
                                              (("2"
                                                (INST -1 "c * b" "inv(c * b)"
                                                 "conjugate(b)")
                                                (("2"
                                                  (REWRITE
                                                   "ring[quat, +, *, zero_q].plus_associative")
                                                  (("2" (REPLACE -1 1 RL HIDE)
                                                    (("2"
                                                      (CASE-REPLACE
                                                       "(c * b) + inv(c * b) = zero_q")
                                                      (("1" (HIDE -1)
                                                        (("1"
                                                          (REWRITE
                                                           "zero_q_times")
                                                          (("1"
                                                            (REWRITE
                                                             "plus_zero_q")
                                                            NIL NIL))
                                                          NIL))
                                                        NIL)
                                                       ("2" (HIDE-ALL-BUT 1)
                                                        (("2" (GRIND) NIL NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (LEMMA "quat_is_ring_w_one")
                    (("2" (EXPAND "ring_with_one?")
                      (("2" (FLATTEN)
                        (("2" (HIDE-ALL-BUT 1)
                          (("2" (EXPAND "red_norm") (("2" (PROPAX) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (HIDE 2)
                (("2" (LEMMA "Hurwitz_red_norm_is_posint")
                  (("2" (INST -1 "b")
                    (("2" (SPLIT)
                      (("1" (HIDE-ALL-BUT 1)
                        (("1" (EXPAND "red_norm") (("1" (PROPAX) NIL NIL))
                          NIL))
                        NIL)
                       ("2" (LEMMA "red_norm_charac")
                        (("2" (INST -1 "b")
                          (("2" (REPLACES -1)
                            (("2" (HIDE -)
                              (("2" (EXPAND "scalar_F")
                                (("2" (PROPAX) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("3" (ASSERT) NIL NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|Hurwitz_left_division_scalar| FORMULA-DECL NIL
     |quaternions_Hurwitz_rings| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|quat| TYPE-EQ-DECL NIL |quaternions_def| |algebra|)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|Hurwitz_ring| CONST-DECL "set[quat[rational,
         restrict[[numfield, numfield], [rational, rational], numfield](+),
         restrict[[numfield, numfield], [rational, rational], numfield](*),
         0, 1, -1, -1]]"
     |quaternions_Hurwitz_rings| NIL)
    (|Hurwitz_ring| NONEMPTY-TYPE-EQ-DECL NIL |quaternions_Hurwitz_rings| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|red_norm| CONST-DECL "quat" |quaternions_def| |algebra|)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|hurwitz_prod| APPLICATION-JUDGEMENT "Hurwitz_ring"
     |quaternions_Hurwitz_rings| NIL)
    (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|rat_plus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|hurwitz_conjugate| APPLICATION-JUDGEMENT "Hurwitz_ring"
     |quaternions_Hurwitz_rings| NIL)
    (|integer?| CONST-DECL "bool" |integers| NIL)
    (|scalar_F| CONST-DECL "set[quat]" |quaternions_def| |algebra|)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (* CONST-DECL "[quat, quat -> quat]" |quaternions_def| |algebra|)
    (|conjugate| CONST-DECL "quat" |quaternions_def| |algebra|)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|hurwitz_inv| APPLICATION-JUDGEMENT "Hurwitz_ring"
     |quaternions_Hurwitz_rings| NIL)
    (|hurwitz_sum| APPLICATION-JUDGEMENT "Hurwitz_ring"
     |quaternions_Hurwitz_rings| NIL)
    (|inv| CONST-DECL "quat" |quaternions_def| |algebra|)
    (+ CONST-DECL "quat" |quaternions_def| |algebra|)
    (|zero_q| CONST-DECL "quat" |quaternions_def| |algebra|)
    (|left_distributive| FORMULA-DECL NIL |ring| |algebra|)
    (|plus_commutative| FORMULA-DECL NIL |ring| |algebra|)
    (|plus_associative| FORMULA-DECL NIL |ring| |algebra|)
    (|zero_q_times| FORMULA-DECL NIL |quaternions| |algebra|)
    (|plus_zero_q| FORMULA-DECL NIL |quaternions| |algebra|)
    (|inv_right| FORMULA-DECL NIL |group| |algebra|)
    (|times_associative| FORMULA-DECL NIL |ring| |algebra|)
    (|red_norm_prod| FORMULA-DECL NIL |quaternions| |algebra|)
    (|both_sides_times_pos_lt1| FORMULA-DECL NIL |real_props| NIL)
    (|red_norm_conj| FORMULA-DECL NIL |quaternions| |algebra|)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|red_norm_charac| FORMULA-DECL NIL |quaternions| |algebra|)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|odd_times_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|one_times| FORMULA-DECL NIL |ring_with_one| |algebra|)
    (|q_prod_charac| FORMULA-DECL NIL |quaternions| |algebra|)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|inv| CONST-DECL "{y | x * y = one AND y * x = one}" |group| |algebra|)
    (|ring_with_one?| CONST-DECL "bool" |ring_with_one_def| |algebra|)
    (|quat_is_ring_w_one| FORMULA-DECL NIL |quaternions| |algebra|)
    (|Hurwitz_red_norm_is_posint| FORMULA-DECL NIL |quaternions_Hurwitz_rings|
     NIL))
   SHOSTAK))
 (|IMP_ring_ideal_TCC1| 0
  (|IMP_ring_ideal_TCC1-0| "" 3933736361
   ("" (LEMMA "quat_is_ring_w_one")
    (("" (EXPAND "ring_with_one?") (("" (FLATTEN) NIL NIL)) NIL)) NIL)
   ((|ring_with_one?| CONST-DECL "bool" |ring_with_one_def| |algebra|)
    (|quat_is_ring_w_one| FORMULA-DECL NIL |quaternions| |algebra|)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL))
   SHOSTAK
   (|IMP_ring_ideal| ASSUMING
    "algebra@ring_ideal[quat[rational, restrict[[numfield, numfield], [rational, rational], numfield](+), restrict[[numfield, numfield], [rational, rational], numfield](*), 0, 1, -1, -1], quaternions_def[rational, restrict[[numfield, numfield], [rational, rational], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [rational, rational], numfield].restrict(number_fields.*), 0, 1, -1, -1].+, quaternions_def[rational, restrict[[numfield, numfield], [rational, rational], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [rational, rational], numfield].restrict(number_fields.*), 0, 1, -1, -1].*, quaternions_def[rational, restrict[[numfield, numfield], [rational, rational], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [rational, rational], numfield].restrict(number_fields.*), 0, 1, -1, -1].zero_q].ring_ideal"
    "fullset_is_ring: ASSUMPTION ring_def[ring_ideal.T, ring_ideal.+, ring_ideal.*, ring_ideal.zero].ring?(sets[ring_ideal.T].fullset)"))
  (|IMP_ring_ideal_TCC1-1| NIL 3926524319
   ("" (LEMMA "quat_is_ring_w_one")
    (("" (EXPAND "ring_with_one?") (("" (FLATTEN) NIL NIL)) NIL)) NIL)
   ((|ring_with_one?| CONST-DECL "bool" |ring_with_one_def| |algebra|)
    (|quat_is_ring_w_one| FORMULA-DECL NIL |quaternions| |algebra|)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL))
   NIL
   (|IMP_ring_ideal| ASSUMING
    "algebra@ring_ideal[quat[rational, restrict[[numfield, numfield], [rational, rational], numfield](+), restrict[[numfield, numfield], [rational, rational], numfield](*), 0, 1, -1, -1], quaternions_def[rational, restrict[[numfield, numfield], [rational, rational], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [rational, rational], numfield].restrict(number_fields.*), 0, 1, -1, -1].+, quaternions_def[rational, restrict[[numfield, numfield], [rational, rational], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [rational, rational], numfield].restrict(number_fields.*), 0, 1, -1, -1].*, quaternions_def[rational, restrict[[numfield, numfield], [rational, rational], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [rational, rational], numfield].restrict(number_fields.*), 0, 1, -1, -1].zero_q].ring_ideal"
    "fullset_is_ring: ASSUMPTION ring_def[ring_ideal.T, ring_ideal.+, ring_ideal.*, ring_ideal.zero].ring?(sets[ring_ideal.T].fullset)")))
 (|Hurwitz_ideal_TCC1| 0
  (|Hurwitz_ideal_TCC1-0| "" 3933736361
   ("" (LEMMA "Hurwitz_ring_is_ring") (("" (PROPAX) NIL NIL)) NIL)
   ((|Hurwitz_ring_is_ring| FORMULA-DECL NIL |quaternions_Hurwitz_rings| NIL))
   SHOSTAK
   (|Hurwitz_ideal| SUBTYPE "quaternions_Hurwitz_rings.Hurwitz_ring"
    "(ring_def[quat[rational, restrict[[numfield, numfield], [rational, rational], numfield](+), restrict[[numfield, numfield], [rational, rational], numfield](*), 0, 1, -1, -1], quaternions_def[rational, restrict[[numfield, numfield], [rational, rational], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [rational, rational], numfield].restrict(number_fields.*), 0, 1, -1, -1].+, quaternions_def[rational, restrict[[numfield, numfield], [rational, rational], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [rational, rational], numfield].restrict(number_fields.*), 0, 1, -1, -1].*, quaternions_def[rational, restrict[[numfield, numfield], [rational, rational], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [rational, rational], numfield].restrict(number_fields.*), 0, 1, -1, -1].zero_q].ring?)"))
  (|Hurwitz_ideal_TCC1-1| NIL 3926503102
   ("" (LEMMA "Hurwitz_ring_is_ring") (("" (PROPAX) NIL NIL)) NIL)
   ((|Hurwitz_ring_is_ring| FORMULA-DECL NIL |quaternions_Hurwitz_rings| NIL))
   NIL
   (|Hurwitz_ideal| SUBTYPE "quaternions_Hurwitz_rings.Hurwitz_ring"
    "(ring_def[quat[rational, restrict[[numfield, numfield], [rational, rational], numfield](+), restrict[[numfield, numfield], [rational, rational], numfield](*), 0, 1, -1, -1], quaternions_def[rational, restrict[[numfield, numfield], [rational, rational], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [rational, rational], numfield].restrict(number_fields.*), 0, 1, -1, -1].+, quaternions_def[rational, restrict[[numfield, numfield], [rational, rational], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [rational, rational], numfield].restrict(number_fields.*), 0, 1, -1, -1].*, quaternions_def[rational, restrict[[numfield, numfield], [rational, rational], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [rational, rational], numfield].restrict(number_fields.*), 0, 1, -1, -1].zero_q].ring?)")))
 (|Hurwitz_ideal_TCC2| 0
  (|Hurwitz_ideal_TCC2-0| "" 3933736362
   ("" (LEMMA "zero_ideal") (("" (INST -1 "Hurwitz_ring") NIL NIL)) NIL)
   ((|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|ring?| CONST-DECL "bool" |ring_def| |algebra|)
    (|ring| NONEMPTY-TYPE-EQ-DECL NIL |ring| |algebra|)
    (|Hurwitz_ring| CONST-DECL "set[quat[rational,
         restrict[[numfield, numfield], [rational, rational], numfield](+),
         restrict[[numfield, numfield], [rational, rational], numfield](*),
         0, 1, -1, -1]]"
     |quaternions_Hurwitz_rings| NIL)
    (|zero_ideal| FORMULA-DECL NIL |ring_ideal| |algebra|)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|quat| TYPE-EQ-DECL NIL |quaternions_def| |algebra|)
    (+ CONST-DECL "quat" |quaternions_def| |algebra|)
    (* CONST-DECL "[quat, quat -> quat]" |quaternions_def| |algebra|)
    (|zero_q| CONST-DECL "quat" |quaternions_def| |algebra|))
   SHOSTAK
   (|Hurwitz_ideal| SUBTYPE
    "sets[quat[rational, restrict[[numfield, numfield], [rational, rational], numfield](+), restrict[[numfield, numfield], [rational, rational], numfield](*), 0, 1, -1, -1]].singleton(quaternions_def[rational, restrict[[numfield, numfield], [rational, rational], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [rational, rational], numfield].restrict(number_fields.*), 0, 1, -1, -1].zero_q)"
    "Hurwitz_ideal"))
  (|Hurwitz_ideal_TCC2-1| NIL 3926503102
   ("" (LEMMA "zero_ideal") (("" (INST -1 "Hurwitz_ring") NIL NIL)) NIL)
   ((|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|ring?| CONST-DECL "bool" |ring_def| |algebra|)
    (|ring| NONEMPTY-TYPE-EQ-DECL NIL |ring| |algebra|)
    (|Hurwitz_ring| CONST-DECL "set[quat[rational,
         restrict[[numfield, numfield], [rational, rational], numfield](+),
         restrict[[numfield, numfield], [rational, rational], numfield](*),
         0, 1, -1, -1]]"
     |quaternions_Hurwitz_rings| NIL)
    (|zero_ideal| FORMULA-DECL NIL |ring_ideal| |algebra|)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|quat| TYPE-EQ-DECL NIL |quaternions_def| |algebra|)
    (+ CONST-DECL "quat" |quaternions_def| |algebra|)
    (* CONST-DECL "[quat, quat -> quat]" |quaternions_def| |algebra|)
    (|zero_q| CONST-DECL "quat" |quaternions_def| |algebra|))
   NIL
   (|Hurwitz_ideal| SUBTYPE
    "sets[quat[rational, restrict[[numfield, numfield], [rational, rational], numfield](+), restrict[[numfield, numfield], [rational, rational], numfield](*), 0, 1, -1, -1]].singleton(quaternions_def[rational, restrict[[numfield, numfield], [rational, rational], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [rational, rational], numfield].restrict(number_fields.*), 0, 1, -1, -1].zero_q)"
    "Hurwitz_ideal")))
 (|Hurwitz_left_ideal_TCC1| 0
  (|Hurwitz_left_ideal_TCC1-0| "" 3933736363
   ("" (LEMMA "zero_ideal")
    (("" (INST -1 "Hurwitz_ring")
      (("" (EXPAND "ideal?") (("" (PROP) NIL NIL)) NIL)) NIL))
    NIL)
   ((|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|ring?| CONST-DECL "bool" |ring_def| |algebra|)
    (|ring| NONEMPTY-TYPE-EQ-DECL NIL |ring| |algebra|)
    (|Hurwitz_ring| CONST-DECL "set[quat[rational,
         restrict[[numfield, numfield], [rational, rational], numfield](+),
         restrict[[numfield, numfield], [rational, rational], numfield](*),
         0, 1, -1, -1]]"
     |quaternions_Hurwitz_rings| NIL)
    (|ideal?| CONST-DECL "bool" |ring_ideal_def| |algebra|)
    (|zero_ideal| FORMULA-DECL NIL |ring_ideal| |algebra|)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|quat| TYPE-EQ-DECL NIL |quaternions_def| |algebra|)
    (+ CONST-DECL "quat" |quaternions_def| |algebra|)
    (* CONST-DECL "[quat, quat -> quat]" |quaternions_def| |algebra|)
    (|zero_q| CONST-DECL "quat" |quaternions_def| |algebra|))
   SHOSTAK
   (|Hurwitz_left_ideal| SUBTYPE
    "sets[quat[rational, restrict[[numfield, numfield], [rational, rational], numfield](+), restrict[[numfield, numfield], [rational, rational], numfield](*), 0, 1, -1, -1]].singleton(quaternions_def[rational, restrict[[numfield, numfield], [rational, rational], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [rational, rational], numfield].restrict(number_fields.*), 0, 1, -1, -1].zero_q)"
    "Hurwitz_left_ideal"))
  (|Hurwitz_left_ideal_TCC1-1| NIL 3930734055
   ("" (LEMMA "zero_ideal")
    (("" (INST -1 "Hurwitz_ring")
      (("" (EXPAND "ideal?") (("" (PROP) NIL NIL)) NIL)) NIL))
    NIL)
   ((|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|ring?| CONST-DECL "bool" |ring_def| |algebra|)
    (|ring| NONEMPTY-TYPE-EQ-DECL NIL |ring| |algebra|)
    (|Hurwitz_ring| CONST-DECL "set[quat[rational,
         restrict[[numfield, numfield], [rational, rational], numfield](+),
         restrict[[numfield, numfield], [rational, rational], numfield](*),
         0, 1, -1, -1]]"
     |quaternions_Hurwitz_rings| NIL)
    (|ideal?| CONST-DECL "bool" |ring_ideal_def| |algebra|)
    (|zero_ideal| FORMULA-DECL NIL |ring_ideal| |algebra|)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|quat| TYPE-EQ-DECL NIL |quaternions_def| |algebra|)
    (+ CONST-DECL "quat" |quaternions_def| |algebra|)
    (* CONST-DECL "[quat, quat -> quat]" |quaternions_def| |algebra|)
    (|zero_q| CONST-DECL "quat" |quaternions_def| |algebra|))
   NIL
   (|Hurwitz_left_ideal| SUBTYPE
    "sets[quat[rational, restrict[[numfield, numfield], [rational, rational], numfield](+), restrict[[numfield, numfield], [rational, rational], numfield](*), 0, 1, -1, -1]].singleton(quaternions_def[rational, restrict[[numfield, numfield], [rational, rational], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [rational, rational], numfield].restrict(number_fields.*), 0, 1, -1, -1].zero_q)"
    "Hurwitz_left_ideal")))
 (|prime_mult_Hurwitz_TCC1| 0
  (|prime_mult_Hurwitz_TCC1-0| "" 3933736373
   (""
    (STOP-REWRITE "right_identity" "left_identity" "one_left" "one_right"
     "zero_plus" "plus_zero")
    (("" (SKEEP)
      (("" (EXPAND "ideal?")
        (("" (EXPAND "left_ideal?")
          (("" (EXPAND "right_ideal?")
            ((""
              (CASE
                  "left_swallow?(extend [quat[rational, restrict [[numfield, numfield], [rational, rational], numfield] (+), restrict [[numfield, numfield], [rational, rational], numfield] (*), 0, 1, -1, -1], Hurwitz_ring, bool, FALSE] ({q: Hurwitz_ring | EXISTS (x, y, z, t: int): q = (# x := p * x / 2, y := p * x / 2 + p * y, z := p * x / 2 + p * z, t := p * x / 2 + p * t #)}), Hurwitz_ring)")
              (("1"
                (CASE
                    "subring?(extend [quat[rational, restrict [[numfield, numfield], [rational, rational], numfield] (+), restrict [[numfield, numfield], [rational, rational], numfield] (*), 0, 1, -1, -1], Hurwitz_ring, bool, FALSE] ({q: Hurwitz_ring | EXISTS (x, y, z, t: int): q = (# x := p * x / 2, y := p * x / 2 + p * y, z := p * x / 2 + p * z, t := p * x / 2 + p * t #)}), Hurwitz_ring)")
                (("1" (PROP)
                  (("1" (HIDE-ALL-BUT 1)
                    (("1" (EXPAND "right_swallow?")
                      (("1" (SKEEP)
                        (("1" (EXPAND "member")
                          (("1" (EXPAND "extend")
                            (("1" (PROP)
                              (("1" (TYPEPRED "r")
                                (("1" (TYPEPRED "x_1")
                                  (("1" (HIDE -3)
                                    (("1" (EXPAND "extend")
                                      (("1" (PROP)
                                        (("1" (HIDE -1)
                                          (("1" (SKEEP)
                                            (("1"
                                              (CASE
                                                  "x_1 = mk_Hurwitz(2*p,-p,-p,-p) * mk_Hurwitz(x, y, z, t)")
                                              (("1" (HIDE -2)
                                                (("1"
                                                  (LEMMA
                                                   "real_props.div_cancel1")
                                                  (("1" (INST -1 "2" "p")
                                                    (("1" (REPLACES -1)
                                                      (("1" (REWRITE "add_neg")
                                                        (("1" (REPLACES -1)
                                                          (("1"
                                                            (REWRITE
                                                             "times_associative[quat,+,*,zero_q]")
                                                            (("1"
                                                              (LEMMA
                                                               "hurwitz_prod")
                                                              (("1" (INST?)
                                                                (("1"
                                                                  (NAME-REPLACE
                                                                   "m"
                                                                   "(# x := x / 2, y := x / 2 + y, z := x / 2 + z, t := x / 2 + t #) * r")
                                                                  (("1"
                                                                    (HIDE -2)
                                                                    (("1"
                                                                      (EXPAND
                                                                       "Hurwitz_ring")
                                                                      (("1"
                                                                        (SKEEP)
                                                                        (("1"
                                                                          (INST
                                                                           1
                                                                           "x!1"
                                                                           "y!1"
                                                                           "z!1"
                                                                           "t!1")
                                                                          (("1"
                                                                            (REWRITE
                                                                             "q_prod_charac")
                                                                            (("1"
                                                                              (REPLACES
                                                                               -)
                                                                              (("1"
                                                                                (DECOMPOSE-EQUALITY)
                                                                                NIL
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (HIDE -2 2)
                                                (("2"
                                                  (LEMMA
                                                   "real_props.div_cancel1")
                                                  (("2" (INST -1 "2" "p")
                                                    (("2" (REPLACES -1)
                                                      (("2" (REWRITE "add_neg")
                                                        (("2"
                                                          (REWRITE
                                                           "q_prod_charac")
                                                          (("2" (REPLACES -1)
                                                            (("2"
                                                              (DECOMPOSE-EQUALITY)
                                                              NIL NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (TYPEPRED "x_1")
                                (("2" (TYPEPRED "r")
                                  (("2" (EXPAND "extend")
                                    (("2" (PROP)
                                      (("2" (HIDE -2)
                                        (("2" (REWRITE "hurwitz_prod") NIL
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (HIDE 2)
                  (("2" (EXPAND "subring?")
                    (("2" (SPLIT)
                      (("1" (EXPAND "subset?")
                        (("1" (EXPAND "member")
                          (("1" (EXPAND "extend")
                            (("1" (SKEEP) (("1" (PROP) NIL NIL)) NIL)) NIL))
                          NIL))
                        NIL)
                       ("2" (EXPAND "ring?")
                        (("2" (PROP)
                          (("1" (EXPAND "abelian_group?")
                            (("1" (PROP)
                              (("1" (EXPAND "group?")
                                (("1" (PROP)
                                  (("1" (EXPAND "monoid?")
                                    (("1" (EXPAND "monad?")
                                      (("1" (PROP)
                                        (("1" (EXPAND "star_closed?")
                                          (("1" (EXPAND "member")
                                            (("1" (EXPAND "extend")
                                              (("1" (SKEEP)
                                                (("1" (PROP)
                                                  (("1" (TYPEPRED "x_1")
                                                    (("1" (TYPEPRED "y_1")
                                                      (("1" (EXPAND "extend")
                                                        (("1" (PROP)
                                                          (("1" (SKEEP)
                                                            (("1" (SKEEP)
                                                              (("1"
                                                                (INST 1 "x+x!1"
                                                                 "y+y!1"
                                                                 "z+z!1"
                                                                 "t+t!1")
                                                                (("1"
                                                                  (REPLACES -)
                                                                  (("1"
                                                                    (EXPAND
                                                                     "+ ")
                                                                    (("1"
                                                                      (PROPAX)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (TYPEPRED "x_1")
                                                    (("2" (TYPEPRED "y_1")
                                                      (("2" (EXPAND "extend")
                                                        (("2" (PROP)
                                                          (("2"
                                                            (LEMMA
                                                             "hurwitz_sum")
                                                            (("2" (INST?) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (EXPAND "member")
                                          (("2" (EXPAND "extend")
                                            (("2" (PROP)
                                              (("1" (INST 1 "0" "0" "0" "0")
                                                (("1" (EXPAND "zero_q")
                                                  (("1" (PROPAX) NIL NIL))
                                                  NIL))
                                                NIL)
                                               ("2"
                                                (LEMMA
                                                 "zero_is_member_R[quat,+,*,zero_q]")
                                                (("2" (INST?)
                                                  (("2" (EXPAND "member")
                                                    (("2" (PROPAX) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("3" (LEMMA "Hurwitz_ring_is_ring")
                                          (("3" (EXPAND "identity?")
                                            (("3" (EXPAND "restrict")
                                              (("3" (SKEEP)
                                                (("3" (REWRITE "zero_q_plus")
                                                  (("3" (REWRITE "plus_zero_q")
                                                    NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("4" (EXPAND "associative?")
                                          (("4" (EXPAND "restrict")
                                            (("4" (SKEEP)
                                              (("4"
                                                (REWRITE "plus_associative")
                                                NIL NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (EXPAND "inv_exists?")
                                    (("2" (SKEEP)
                                      (("2" (TYPEPRED "x_1")
                                        (("2" (EXPAND "extend")
                                          (("2" (HIDE -2)
                                            (("2" (PROP)
                                              (("2" (SKEEP)
                                                (("2"
                                                  (INST 1
                                                   "mk_Hurwitz(-(p*x), -(p*y), -(p*z), -(p*t))")
                                                  (("1" (REPLACES -2)
                                                    (("1" (EXPAND "+ ")
                                                      (("1"
                                                        (REWRITE "inverse_add")
                                                        (("1" (EXPAND "zero_q")
                                                          (("1" (PROPAX) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (EXPAND "extend")
                                                    (("2"
                                                      (INST 1 "-x" "-y" "-z"
                                                       "-t")
                                                      (("2" (SIMPLIFY)
                                                        (("2" (PROPAX) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (EXPAND "commutative?")
                                (("2" (EXPAND "restrict")
                                  (("2" (SKEEP)
                                    (("2" (REWRITE "plus_commutative") NIL
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (EXPAND "star_closed?")
                            (("2" (EXPAND "member")
                              (("2" (SKEEP)
                                (("2" (EXPAND "left_swallow?")
                                  (("2" (EXPAND "member")
                                    (("2" (INST -1 "x_1" "y_1")
                                      (("2" (TYPEPRED "x_1")
                                        (("2" (EXPAND "extend")
                                          (("2" (PROP) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("3" (EXPAND "associative?")
                            (("3" (EXPAND "restrict")
                              (("3" (SKEEP)
                                (("3" (REWRITE "times_associative") NIL NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("4" (EXPAND "left_distributive?")
                            (("4" (EXPAND "restrict")
                              (("4" (SKEEP)
                                (("4" (REWRITE "left_distributive") NIL NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("5" (EXPAND "right_distributive?")
                            (("5" (EXPAND "restrict")
                              (("5" (SKEEP)
                                (("5" (REWRITE "right_distributive") NIL NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (HIDE 2)
                (("2" (EXPAND "left_swallow?")
                  (("2" (SKEEP)
                    (("2" (EXPAND "member")
                      (("2" (EXPAND "extend")
                        (("2" (PROP)
                          (("1" (TYPEPRED "r")
                            (("1" (TYPEPRED "x_1")
                              (("1" (HIDE -3)
                                (("1" (EXPAND "extend")
                                  (("1" (PROP)
                                    (("1" (HIDE -1)
                                      (("1" (SKEEP)
                                        (("1"
                                          (CASE
                                              "x_1 = mk_Hurwitz(2*p,-p,-p,-p) * mk_Hurwitz(x, y, z, t)")
                                          (("1" (HIDE -2)
                                            (("1"
                                              (LEMMA "real_props.div_cancel1")
                                              (("1" (INST -1 "2" "p")
                                                (("1" (REPLACES -1)
                                                  (("1" (REWRITE "inverse_add")
                                                    (("1" (REPLACES -1)
                                                      (("1"
                                                        (LEMMA
                                                         "times_associative[quat,+,*,zero_q]")
                                                        (("1" (INST?)
                                                          (("1"
                                                            (REPLACE -1 1 RL
                                                                     HIDE)
                                                            (("1"
                                                              (LEMMA
                                                               "sc_F_commutes")
                                                              (("1"
                                                                (INST -1
                                                                 "(# x := p, y := 0, z := 0, t := 0 #)"
                                                                 "r")
                                                                (("1"
                                                                  (REPLACE -1 1
                                                                           RL
                                                                           HIDE)
                                                                  (("1"
                                                                    (REWRITE
                                                                     "times_associative[quat,+,*,zero_q]")
                                                                    (("1"
                                                                      (LEMMA
                                                                       "hurwitz_prod")
                                                                      (("1"
                                                                        (INST
                                                                         -1 "r"
                                                                         "(# x := x / 2, y := x / 2 + y, z := x / 2 + z, t := x / 2 + t #)")
                                                                        (("1"
                                                                          (NAME-REPLACE
                                                                           "m"
                                                                           "r * (# x := x / 2, y := x / 2 + y, z := x / 2 + z, t := x / 2 + t #)")
                                                                          (("1"
                                                                            (EXPAND
                                                                             "Hurwitz_ring")
                                                                            (("1"
                                                                              (SKEEP)
                                                                              (("1"
                                                                                (INST
                                                                                 1
                                                                                 "x!1"
                                                                                 "y!1"
                                                                                 "z!1"
                                                                                 "t!1")
                                                                                (("1"
                                                                                  (HIDE
                                                                                   -5)
                                                                                  (("1"
                                                                                    (REWRITE
                                                                                     "q_prod_charac")
                                                                                    (("1"
                                                                                      (REPLACES
                                                                                       -)
                                                                                      (("1"
                                                                                        (SIMPLIFY)
                                                                                        (("1"
                                                                                          (PROPAX)
                                                                                          NIL
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL)
                                                                 ("2"
                                                                  (HIDE-ALL-BUT
                                                                   1)
                                                                  (("2"
                                                                    (EXPAND
                                                                     "scalar_F")
                                                                    (("2"
                                                                      (PROPAX)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("2" (HIDE -2 2)
                                            (("2"
                                              (LEMMA "real_props.div_cancel1")
                                              (("2" (INST -1 "2" "p")
                                                (("2" (REPLACES -1)
                                                  (("2" (REWRITE "add_neg")
                                                    (("2"
                                                      (REWRITE "q_prod_charac")
                                                      (("2" (REPLACES -1)
                                                        (("2" (GRIND) NIL NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (TYPEPRED "r")
                            (("2" (TYPEPRED "x_1")
                              (("2" (EXPAND "extend")
                                (("2" (PROP)
                                  (("2" (LEMMA "hurwitz_prod")
                                    (("2" (INST?) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("3" (HIDE 2)
                (("3" (LEMMA "Hurwitz_ring_is_ring") (("3" (PROPAX) NIL NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|left_ideal?| CONST-DECL "bool" |ring_ideal_def| |algebra|)
    (|rat_plus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|quat| TYPE-EQ-DECL NIL |quaternions_def| |algebra|)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (+ CONST-DECL "quat" |quaternions_def| |algebra|)
    (* CONST-DECL "[quat, quat -> quat]" |quaternions_def| |algebra|)
    (|zero_q| CONST-DECL "quat" |quaternions_def| |algebra|)
    (|ring?| CONST-DECL "bool" |ring_def| |algebra|)
    (|left_swallow?| CONST-DECL "bool" |ring_ideal_def| |algebra|)
    (|Hurwitz_ring| CONST-DECL "set[quat[rational,
         restrict[[numfield, numfield], [rational, rational], numfield](+),
         restrict[[numfield, numfield], [rational, rational], numfield](*),
         0, 1, -1, -1]]"
     |quaternions_Hurwitz_rings| NIL)
    (|Hurwitz_ring| NONEMPTY-TYPE-EQ-DECL NIL |quaternions_Hurwitz_rings| NIL)
    (FALSE CONST-DECL "bool" |booleans| NIL)
    (|extend| CONST-DECL "R" |extend| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (|subset?| CONST-DECL "bool" |sets| NIL)
    (|monad?| CONST-DECL "bool" |monad_def| |algebra|)
    (|associative?| CONST-DECL "bool" |operator_defs| NIL)
    (|plus_associative| FORMULA-DECL NIL |ring| |algebra|)
    (|Hurwitz_ring_is_ring| FORMULA-DECL NIL |quaternions_Hurwitz_rings| NIL)
    (|zero_q_plus| FORMULA-DECL NIL |quaternions| |algebra|)
    (|plus_zero_q| FORMULA-DECL NIL |quaternions| |algebra|)
    (|identity?| CONST-DECL "bool" |operator_defs| NIL)
    (|zero_is_member_R| FORMULA-DECL NIL |ring_basic_properties| |algebra|)
    (|star_closed?| CONST-DECL "bool" |groupoid_def| |algebra|)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|x_1| SKOLEM-CONST-DECL "(extend
     [quat[rational,
           restrict[[numfield, numfield], [rational, rational], numfield]
               (+),
           restrict[[numfield, numfield], [rational, rational], numfield]
               (*),
           0, 1, -1, -1],
      Hurwitz_ring, bool, FALSE]
     ({q: Hurwitz_ring |
         EXISTS (x, y, z, t: int):
           q =
            (# x := p * x / 2,
               y := p * x / 2 + p * y,
               z := p * x / 2 + p * z,
               t := p * x / 2 + p * t #)}))"
     |quaternions_Hurwitz_rings| NIL)
    (|p| SKOLEM-CONST-DECL "(prime?)" |quaternions_Hurwitz_rings| NIL)
    (|y_1| SKOLEM-CONST-DECL "(extend
     [quat[rational,
           restrict[[numfield, numfield], [rational, rational], numfield]
               (+),
           restrict[[numfield, numfield], [rational, rational], numfield]
               (*),
           0, 1, -1, -1],
      Hurwitz_ring, bool, FALSE]
     ({q: Hurwitz_ring |
         EXISTS (x, y, z, t: int):
           q =
            (# x := p * x / 2,
               y := p * x / 2 + p * y,
               z := p * x / 2 + p * z,
               t := p * x / 2 + p * t #)}))"
     |quaternions_Hurwitz_rings| NIL)
    (|hurwitz_sum| JUDGEMENT-TCC NIL |quaternions_Hurwitz_rings| NIL)
    (|monoid?| CONST-DECL "bool" |monoid_def| |algebra|)
    (|t| SKOLEM-CONST-DECL "int" |quaternions_Hurwitz_rings| NIL)
    (|z| SKOLEM-CONST-DECL "int" |quaternions_Hurwitz_rings| NIL)
    (|y| SKOLEM-CONST-DECL "int" |quaternions_Hurwitz_rings| NIL)
    (|x| SKOLEM-CONST-DECL "int" |quaternions_Hurwitz_rings| NIL)
    (|minus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|inverse_add| FORMULA-DECL NIL |number_fields| NIL)
    (|inv_exists?| CONST-DECL "bool" |group_def| |algebra|)
    (|group?| CONST-DECL "bool" |group_def| |algebra|)
    (|plus_commutative| FORMULA-DECL NIL |ring| |algebra|)
    (|commutative?| CONST-DECL "bool" |operator_defs| NIL)
    (|abelian_group?| CONST-DECL "bool" |group_def| |algebra|)
    (|x_1| SKOLEM-CONST-DECL "(extend
     [quat[rational,
           restrict[[numfield, numfield], [rational, rational], numfield]
               (+),
           restrict[[numfield, numfield], [rational, rational], numfield]
               (*),
           0, 1, -1, -1],
      Hurwitz_ring, bool, FALSE]
     ({q: Hurwitz_ring |
         EXISTS (x, y, z, t: int):
           q =
            (# x := p * x / 2,
               y := p * x / 2 + p * y,
               z := p * x / 2 + p * z,
               t := p * x / 2 + p * t #)}))"
     |quaternions_Hurwitz_rings| NIL)
    (|left_distributive| FORMULA-DECL NIL |ring| |algebra|)
    (|left_distributive?| CONST-DECL "bool" |operator_defs_more| |algebra|)
    (|right_distributive| FORMULA-DECL NIL |ring| |algebra|)
    (|right_distributive?| CONST-DECL "bool" |operator_defs_more| |algebra|)
    (|right_swallow?| CONST-DECL "bool" |ring_ideal_def| |algebra|)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|hurwitz_prod| APPLICATION-JUDGEMENT "Hurwitz_ring"
     |quaternions_Hurwitz_rings| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|div_cancel1| FORMULA-DECL NIL |real_props| NIL)
    (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|hurwitz_prod| JUDGEMENT-TCC NIL |quaternions_Hurwitz_rings| NIL)
    (|zero_times| FORMULA-DECL NIL |ring| |algebra|)
    (|inv_one| FORMULA-DECL NIL |group| |algebra|)
    (|negate_nz_T_is_nz_T| APPLICATION-JUDGEMENT "nz_T[rational,
     restrict[[numfield, numfield], [rational, rational], numfield](+),
     restrict[[numfield, numfield], [rational, rational], numfield](*), 0]"
     |quaternions_Hurwitz_rings| NIL)
    (|times_i8_u8| APPLICATION-JUDGEMENT "int16" |integertypes| NIL)
    (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|q_prod_charac| FORMULA-DECL NIL |quaternions| |algebra|)
    (|times_associative| FORMULA-DECL NIL |ring| |algebra|)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|add_neg| FORMULA-DECL NIL |extra_tegies| NIL)
    (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|subring?| CONST-DECL "bool" |ring_def| |algebra|)
    (|sc_F_commutes| FORMULA-DECL NIL |quaternions| |algebra|)
    (|scalar_F| CONST-DECL "set[quat]" |quaternions_def| |algebra|)
    (|x_1| SKOLEM-CONST-DECL "(extend
     [quat[rational,
           restrict[[numfield, numfield], [rational, rational], numfield]
               (+),
           restrict[[numfield, numfield], [rational, rational], numfield]
               (*),
           0, 1, -1, -1],
      Hurwitz_ring, bool, FALSE]
     ({q: Hurwitz_ring |
         EXISTS (x, y, z, t: int):
           q =
            (# x := p * x / 2,
               y := p * x / 2 + p * y,
               z := p * x / 2 + p * z,
               t := p * x / 2 + p * t #)}))"
     |quaternions_Hurwitz_rings| NIL)
    (|right_ideal?| CONST-DECL "bool" |ring_ideal_def| |algebra|)
    (|ideal?| CONST-DECL "bool" |ring_ideal_def| |algebra|)
    (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL))
   SHOSTAK
   (|prime_mult_Hurwitz| SUBTYPE
    "extend[quat[rational, restrict[[numfield, numfield], [rational, rational], numfield](+), restrict[[numfield, numfield], [rational, rational], numfield](*), 0, 1, -1, -1], Hurwitz_ring, bool, booleans.FALSE].extend({q: quaternions_Hurwitz_rings.Hurwitz_ring | EXISTS (x, y, z, t: integers.int): q = (# x := number_fields./(number_fields.*(quaternions_Hurwitz_rings.p, x), 2), y := (number_fields.+)(number_fields./(number_fields.*(quaternions_Hurwitz_rings.p, x), 2), number_fields.*(quaternions_Hurwitz_rings.p, y)), z := (number_fields.+)(number_fields./(number_fields.*(quaternions_Hurwitz_rings.p, x), 2), number_fields.*(quaternions_Hurwitz_rings.p, z)), t := (number_fields.+)(number_fields./(number_fields.*(quaternions_Hurwitz_rings.p, x), 2), number_fields.*(quaternions_Hurwitz_rings.p, t)) #)})"
    "Hurwitz_ideal"))
  (|prime_mult_Hurwitz_TCC1-1| NIL 3928912575
   (""
    (STOP-REWRITE "right_identity" "left_identity" "one_left" "one_right"
     "zero_plus" "plus_zero")
    (("" (SKEEP)
      (("" (EXPAND "ideal?")
        (("" (EXPAND "left_ideal?")
          (("" (EXPAND "right_ideal?")
            ((""
              (CASE "left_swallow?(extend
                        [quat[rational,
                              restrict
                                  [[numfield, numfield],
                                   [rational, rational], numfield]
                                  (+),
                              restrict
                                  [[numfield, numfield],
                                   [rational, rational], numfield]
                                  (*),
                              0, 1, -1, -1],
                         Hurwitz_ring, bool, FALSE]
                        ({q: Hurwitz_ring |
                            EXISTS (x, y, z, t: int):
                              q =
                               (# x := p * x / 2,
                                  y := p * x / 2 + p * y,
                                  z := p * x / 2 + p * z,
                                  t := p * x / 2 + p * t #)}),
                    Hurwitz_ring)")
              (("1"
                (CASE "subring?(extend
                   [quat[rational,
                         restrict
                             [[numfield, numfield], [rational, rational],
                              numfield]
                             (+),
                         restrict
                             [[numfield, numfield], [rational, rational],
                              numfield]
                             (*),
                         0, 1, -1, -1],
                    Hurwitz_ring, bool, FALSE]
                   ({q: Hurwitz_ring |
                       EXISTS (x, y, z, t: int):
                         q =
                          (# x := p * x / 2,
                             y := p * x / 2 + p * y,
                             z := p * x / 2 + p * z,
                             t := p * x / 2 + p * t #)}),
               Hurwitz_ring)")
                (("1" (PROP)
                  (("1" (HIDE-ALL-BUT 1)
                    (("1" (EXPAND "right_swallow?")
                      (("1" (SKEEP)
                        (("1" (EXPAND "member")
                          (("1" (EXPAND "extend")
                            (("1" (PROP)
                              (("1" (TYPEPRED "r")
                                (("1" (TYPEPRED "x_1")
                                  (("1" (HIDE -3)
                                    (("1" (EXPAND "extend")
                                      (("1" (PROP)
                                        (("1" (HIDE -1)
                                          (("1" (SKEEP)
                                            (("1"
                                              (CASE
                                                  "x_1 = mk_Hurwitz(2*p,-p,-p,-p) * mk_Hurwitz(x, y, z, t)")
                                              (("1" (HIDE -2)
                                                (("1"
                                                  (LEMMA
                                                   "real_props.div_cancel1")
                                                  (("1" (INST -1 "2" "p")
                                                    (("1" (REPLACES -1)
                                                      (("1" (REWRITE "add_neg")
                                                        (("1" (REPLACES -1)
                                                          (("1"
                                                            (REWRITE
                                                             "times_associative[quat,+,*,zero_q]")
                                                            (("1"
                                                              (LEMMA
                                                               "hurwitz_prod")
                                                              (("1" (INST?)
                                                                (("1"
                                                                  (NAME-REPLACE
                                                                   "m"
                                                                   "(# x := x / 2, y := x / 2 + y, z := x / 2 + z, t := x / 2 + t #) * r")
                                                                  (("1"
                                                                    (HIDE -2)
                                                                    (("1"
                                                                      (EXPAND
                                                                       "Hurwitz_ring")
                                                                      (("1"
                                                                        (SKEEP)
                                                                        (("1"
                                                                          (INST
                                                                           1
                                                                           "x!1"
                                                                           "y!1"
                                                                           "z!1"
                                                                           "t!1")
                                                                          (("1"
                                                                            (REWRITE
                                                                             "q_prod_charac")
                                                                            (("1"
                                                                              (REPLACES
                                                                               -)
                                                                              (("1"
                                                                                (DECOMPOSE-EQUALITY)
                                                                                NIL
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (HIDE -2 2)
                                                (("2"
                                                  (LEMMA
                                                   "real_props.div_cancel1")
                                                  (("2" (INST -1 "2" "p")
                                                    (("2" (REPLACES -1)
                                                      (("2" (REWRITE "add_neg")
                                                        (("2"
                                                          (REWRITE
                                                           "q_prod_charac")
                                                          (("2" (REPLACES -1)
                                                            (("2"
                                                              (DECOMPOSE-EQUALITY)
                                                              NIL NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (TYPEPRED "x_1")
                                (("2" (TYPEPRED "r")
                                  (("2" (EXPAND "extend")
                                    (("2" (PROP)
                                      (("2" (HIDE -2)
                                        (("2" (REWRITE "hurwitz_prod") NIL
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (HIDE 2)
                  (("2" (EXPAND "subring?")
                    (("2" (SPLIT)
                      (("1" (EXPAND "subset?")
                        (("1" (EXPAND "member")
                          (("1" (EXPAND "extend")
                            (("1" (SKEEP) (("1" (PROP) NIL NIL)) NIL)) NIL))
                          NIL))
                        NIL)
                       ("2" (EXPAND "ring?")
                        (("2" (PROP)
                          (("1" (EXPAND "abelian_group?")
                            (("1" (PROP)
                              (("1" (EXPAND "group?")
                                (("1" (PROP)
                                  (("1" (EXPAND "monoid?")
                                    (("1" (EXPAND "monad?")
                                      (("1" (PROP)
                                        (("1" (EXPAND "star_closed?")
                                          (("1" (EXPAND "member")
                                            (("1" (EXPAND "extend")
                                              (("1" (SKEEP)
                                                (("1" (PROP)
                                                  (("1" (TYPEPRED "x_1")
                                                    (("1" (TYPEPRED "y_1")
                                                      (("1" (EXPAND "extend")
                                                        (("1" (PROP)
                                                          (("1" (SKEEP)
                                                            (("1" (SKEEP)
                                                              (("1"
                                                                (INST 1 "x+x!1"
                                                                 "y+y!1"
                                                                 "z+z!1"
                                                                 "t+t!1")
                                                                (("1"
                                                                  (REPLACES -)
                                                                  (("1"
                                                                    (EXPAND "+
")
                                                                    (("1"
                                                                      (PROPAX)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (TYPEPRED "x_1")
                                                    (("2" (TYPEPRED "y_1")
                                                      (("2" (EXPAND "extend")
                                                        (("2" (PROP)
                                                          (("2"
                                                            (LEMMA
                                                             "hurwitz_sum")
                                                            (("2" (INST?) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (EXPAND "member")
                                          (("2" (EXPAND "extend")
                                            (("2" (PROP)
                                              (("1" (INST 1 "0" "0" "0" "0")
                                                (("1" (EXPAND "zero_q")
                                                  (("1" (PROPAX) NIL NIL))
                                                  NIL))
                                                NIL)
                                               ("2"
                                                (LEMMA
                                                 "zero_is_member_R[quat,+,*,zero_q]")
                                                (("2" (INST?)
                                                  (("2" (EXPAND "member")
                                                    (("2" (PROPAX) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("3" (LEMMA "Hurwitz_ring_is_ring")
                                          (("3" (EXPAND "identity?")
                                            (("3" (EXPAND "restrict")
                                              (("3" (SKEEP)
                                                (("3" (REWRITE "zero_q_plus")
                                                  (("3" (REWRITE "plus_zero_q")
                                                    NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("4" (EXPAND "associative?")
                                          (("4" (EXPAND "restrict")
                                            (("4" (SKEEP)
                                              (("4"
                                                (REWRITE "plus_associative")
                                                NIL NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (EXPAND "inv_exists?")
                                    (("2" (SKEEP)
                                      (("2" (TYPEPRED "x_1")
                                        (("2" (EXPAND "extend")
                                          (("2" (HIDE -2)
                                            (("2" (PROP)
                                              (("2" (SKEEP)
                                                (("2"
                                                  (INST 1
                                                   "mk_Hurwitz(-(p*x), -(p*y), -(p*z), -(p*t))")
                                                  (("1" (REPLACES -2)
                                                    (("1"
                                                      (EXPAND "+
")
                                                      (("1"
                                                        (REWRITE "inverse_add")
                                                        (("1" (EXPAND "zero_q")
                                                          (("1" (PROPAX) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (EXPAND "extend")
                                                    (("2"
                                                      (INST 1 "-x" "-y" "-z"
                                                       "-t")
                                                      (("2" (SIMPLIFY)
                                                        (("2" (PROPAX) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (EXPAND "commutative?")
                                (("2" (EXPAND "restrict")
                                  (("2" (SKEEP)
                                    (("2" (REWRITE "plus_commutative") NIL
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (EXPAND "star_closed?")
                            (("2" (EXPAND "member")
                              (("2" (SKEEP)
                                (("2" (EXPAND "left_swallow?")
                                  (("2" (EXPAND "member")
                                    (("2" (INST -1 "x_1" "y_1")
                                      (("2" (TYPEPRED "x_1")
                                        (("2" (EXPAND "extend")
                                          (("2" (PROP) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("3" (EXPAND "associative?")
                            (("3" (EXPAND "restrict")
                              (("3" (SKEEP)
                                (("3" (REWRITE "times_associative") NIL NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("4" (EXPAND "left_distributive?")
                            (("4" (EXPAND "restrict")
                              (("4" (SKEEP)
                                (("4" (REWRITE "left_distributive") NIL NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("5" (EXPAND "right_distributive?")
                            (("5" (EXPAND "restrict")
                              (("5" (SKEEP)
                                (("5" (REWRITE "right_distributive") NIL NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (HIDE 2)
                (("2" (EXPAND "left_swallow?")
                  (("2" (SKEEP)
                    (("2" (EXPAND "member")
                      (("2" (EXPAND "extend")
                        (("2" (PROP)
                          (("1" (TYPEPRED "r")
                            (("1" (TYPEPRED "x_1")
                              (("1" (HIDE -3)
                                (("1" (EXPAND "extend")
                                  (("1" (PROP)
                                    (("1" (HIDE -1)
                                      (("1" (SKEEP)
                                        (("1"
                                          (CASE
                                              "x_1 = mk_Hurwitz(2*p,-p,-p,-p) * mk_Hurwitz(x, y, z, t)")
                                          (("1" (HIDE -2)
                                            (("1"
                                              (LEMMA "real_props.div_cancel1")
                                              (("1" (INST -1 "2" "p")
                                                (("1" (REPLACES -1)
                                                  (("1" (REWRITE "inverse_add")
                                                    (("1" (REPLACES -1)
                                                      (("1"
                                                        (LEMMA
                                                         "times_associative[quat,+,*,zero_q]")
                                                        (("1" (INST?)
                                                          (("1"
                                                            (REPLACE -1 1 RL
                                                                     HIDE)
                                                            (("1"
                                                              (LEMMA
                                                               "sc_F_commutes")
                                                              (("1"
                                                                (INST -1
                                                                 "(# x := p, y := 0, z := 0, t := 0 #)"
                                                                 "r")
                                                                (("1"
                                                                  (REPLACE -1 1
                                                                           RL
                                                                           HIDE)
                                                                  (("1"
                                                                    (REWRITE
                                                                     "times_associative[quat,+,*,zero_q]")
                                                                    (("1"
                                                                      (LEMMA
                                                                       "hurwitz_prod")
                                                                      (("1"
                                                                        (INST
                                                                         -1 "r"
                                                                         "(# x := x / 2,
              y := x / 2 + y,
              z := x / 2 + z,
              t := x / 2 + t #)")
                                                                        (("1"
                                                                          (NAME-REPLACE
                                                                           "m"
                                                                           "r *
           (# x := x / 2,
              y := x / 2 + y,
              z := x / 2 + z,
              t := x / 2 + t #)")
                                                                          (("1"
                                                                            (EXPAND
                                                                             "Hurwitz_ring")
                                                                            (("1"
                                                                              (SKEEP)
                                                                              (("1"
                                                                                (INST
                                                                                 1
                                                                                 "x!1"
                                                                                 "y!1"
                                                                                 "z!1"
                                                                                 "t!1")
                                                                                (("1"
                                                                                  (HIDE
                                                                                   -5)
                                                                                  (("1"
                                                                                    (REWRITE
                                                                                     "q_prod_charac")
                                                                                    (("1"
                                                                                      (REPLACES
                                                                                       -)
                                                                                      (("1"
                                                                                        (SIMPLIFY)
                                                                                        (("1"
                                                                                          (PROPAX)
                                                                                          NIL
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL)
                                                                 ("2"
                                                                  (HIDE-ALL-BUT
                                                                   1)
                                                                  (("2"
                                                                    (EXPAND
                                                                     "scalar_F")
                                                                    (("2"
                                                                      (PROPAX)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("2" (HIDE -2 2)
                                            (("2"
                                              (LEMMA "real_props.div_cancel1")
                                              (("2" (INST -1 "2" "p")
                                                (("2" (REPLACES -1)
                                                  (("2" (REWRITE "add_neg")
                                                    (("2"
                                                      (REWRITE "q_prod_charac")
                                                      (("2" (REPLACES -1)
                                                        (("2" (GRIND) NIL NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (TYPEPRED "r")
                            (("2" (TYPEPRED "x_1")
                              (("2" (EXPAND "extend")
                                (("2" (PROP)
                                  (("2" (LEMMA "hurwitz_prod")
                                    (("2" (INST?) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("3" (HIDE 2)
                (("3" (LEMMA "Hurwitz_ring_is_ring") (("3" (PROPAX) NIL NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|left_ideal?| CONST-DECL "bool" |ring_ideal_def| |algebra|)
    (|rat_plus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|quat| TYPE-EQ-DECL NIL |quaternions_def| |algebra|)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (+ CONST-DECL "quat" |quaternions_def| |algebra|)
    (* CONST-DECL "[quat, quat -> quat]" |quaternions_def| |algebra|)
    (|zero_q| CONST-DECL "quat" |quaternions_def| |algebra|)
    (|ring?| CONST-DECL "bool" |ring_def| |algebra|)
    (|left_swallow?| CONST-DECL "bool" |ring_ideal_def| |algebra|)
    (|Hurwitz_ring| CONST-DECL "set[quat[rational,
         restrict[[numfield, numfield], [rational, rational], numfield](+),
         restrict[[numfield, numfield], [rational, rational], numfield](*),
         0, 1, -1, -1]]"
     |quaternions_Hurwitz_rings| NIL)
    (|Hurwitz_ring| NONEMPTY-TYPE-EQ-DECL NIL |quaternions_Hurwitz_rings| NIL)
    (FALSE CONST-DECL "bool" |booleans| NIL)
    (|extend| CONST-DECL "R" |extend| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (|subset?| CONST-DECL "bool" |sets| NIL)
    (|monad?| CONST-DECL "bool" |monad_def| |algebra|)
    (|associative?| CONST-DECL "bool" |operator_defs| NIL)
    (|plus_associative| FORMULA-DECL NIL |ring| |algebra|)
    (|Hurwitz_ring_is_ring| FORMULA-DECL NIL |quaternions_Hurwitz_rings| NIL)
    (|zero_q_plus| FORMULA-DECL NIL |quaternions| |algebra|)
    (|plus_zero_q| FORMULA-DECL NIL |quaternions| |algebra|)
    (|identity?| CONST-DECL "bool" |operator_defs| NIL)
    (|zero_is_member_R| FORMULA-DECL NIL |ring_basic_properties| |algebra|)
    (|star_closed?| CONST-DECL "bool" |groupoid_def| |algebra|)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|hurwitz_sum| JUDGEMENT-TCC NIL |quaternions_Hurwitz_rings| NIL)
    (|monoid?| CONST-DECL "bool" |monoid_def| |algebra|)
    (|minus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|inverse_add| FORMULA-DECL NIL |number_fields| NIL)
    (|inv_exists?| CONST-DECL "bool" |group_def| |algebra|)
    (|group?| CONST-DECL "bool" |group_def| |algebra|)
    (|plus_commutative| FORMULA-DECL NIL |ring| |algebra|)
    (|commutative?| CONST-DECL "bool" |operator_defs| NIL)
    (|abelian_group?| CONST-DECL "bool" |group_def| |algebra|)
    (|left_distributive| FORMULA-DECL NIL |ring| |algebra|)
    (|left_distributive?| CONST-DECL "bool" |operator_defs_more| |algebra|)
    (|right_distributive| FORMULA-DECL NIL |ring| |algebra|)
    (|right_distributive?| CONST-DECL "bool" |operator_defs_more| |algebra|)
    (|right_swallow?| CONST-DECL "bool" |ring_ideal_def| |algebra|)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|hurwitz_prod| APPLICATION-JUDGEMENT "Hurwitz_ring"
     |quaternions_Hurwitz_rings| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|div_cancel1| FORMULA-DECL NIL |real_props| NIL)
    (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|hurwitz_prod| JUDGEMENT-TCC NIL |quaternions_Hurwitz_rings| NIL)
    (|zero_times| FORMULA-DECL NIL |ring| |algebra|)
    (|inv_one| FORMULA-DECL NIL |group| |algebra|)
    (|times_i8_u8| APPLICATION-JUDGEMENT "int16" |integertypes| NIL)
    (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|q_prod_charac| FORMULA-DECL NIL |quaternions| |algebra|)
    (|times_associative| FORMULA-DECL NIL |ring| |algebra|)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|add_neg| FORMULA-DECL NIL |extra_tegies| NIL)
    (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|subring?| CONST-DECL "bool" |ring_def| |algebra|)
    (|sc_F_commutes| FORMULA-DECL NIL |quaternions| |algebra|)
    (|scalar_F| CONST-DECL "set[quat]" |quaternions_def| |algebra|)
    (|right_ideal?| CONST-DECL "bool" |ring_ideal_def| |algebra|)
    (|ideal?| CONST-DECL "bool" |ring_ideal_def| |algebra|)
    (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL))
   NIL
   (|prime_mult_Hurwitz| SUBTYPE
    "extend[quat[rational, restrict[[numfield, numfield], [rational, rational], numfield](+), restrict[[numfield, numfield], [rational, rational], numfield](*), 0, 1, -1, -1], Hurwitz_ring, bool, booleans.FALSE].extend({q: quaternions_Hurwitz_rings.Hurwitz_ring | EXISTS (x, y, z, t: integers.int): q = (# x := number_fields./(number_fields.*(quaternions_Hurwitz_rings.p, x), 2), y := (number_fields.+)(number_fields./(number_fields.*(quaternions_Hurwitz_rings.p, x), 2), number_fields.*(quaternions_Hurwitz_rings.p, y)), z := (number_fields.+)(number_fields./(number_fields.*(quaternions_Hurwitz_rings.p, x), 2), number_fields.*(quaternions_Hurwitz_rings.p, z)), t := (number_fields.+)(number_fields./(number_fields.*(quaternions_Hurwitz_rings.p, x), 2), number_fields.*(quaternions_Hurwitz_rings.p, t)) #)})"
    "Hurwitz_ideal")))
 (|minimal_nz_norm_TCC1| 1
  (|minimal_nz_norm_TCC1-0| "" 3933736374
   (""
    (STOP-REWRITE "right_identity" "left_identity" "one_left" "one_right"
     "zero_plus" "plus_zero")
    (("" (SKEEP)
      (("" (CASE "EXISTS(a: (L)): a /= zero_q")
        (("1" (SKEEP)
          (("1" (HIDE 2)
            (("1" (EXPAND "nonempty?")
              (("1" (EXPAND "empty?")
                (("1" (CASE "Hurwitz_ring(a)")
                  (("1" (LEMMA "Hurwitz_red_norm_is_posint")
                    (("1" (INST -1 "a")
                      (("1" (FLATTEN)
                        (("1" (NAME-REPLACE "b" "red_norm(a)`x")
                          (("1" (INST -4 "b")
                            (("1" (EXPAND "member")
                              (("1" (INST 2 "a")
                                (("1" (EXPAND "b") (("1" (PROPAX) NIL NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (CASE "b = 0 => a = zero_q")
                              (("1" (GRIND) NIL NIL)
                               ("2" (HIDE-ALL-BUT (-3 1))
                                (("2" (FLATTEN)
                                  (("2" (EXPAND "b")
                                    (("2" (LEMMA "Hurwitz_red_norm_charac")
                                      (("2" (INST?)
                                        (("2" (REPLACES -1)
                                          (("2" (BETA)
                                            (("2"
                                              (LEMMA "four_squares_eq_zero")
                                              (("2" (INST?)
                                                (("2" (SPLIT)
                                                  (("1" (FLATTEN)
                                                    (("1" (HIDE -5)
                                                      (("1" (EXPAND "zero_q")
                                                        (("1"
                                                          (DECOMPOSE-EQUALITY)
                                                          NIL NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (PROPAX) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (HIDE-ALL-BUT 1)
                    (("2" (TYPEPRED "a")
                      (("2" (TYPEPRED "L")
                        (("2" (EXPAND "left_ideal?")
                          (("2" (FLATTEN)
                            (("2" (EXPAND "subring?")
                              (("2" (FLATTEN)
                                (("2" (HIDE -2 -3 -4) (("2" (GRIND) NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (HIDE 3)
          (("2" (SPLIT)
            (("1" (LEMMA "infinite_def")
              (("1" (INST?)
                (("1" (FLATTEN)
                  (("1" (HIDE -2)
                    (("1" (SPLIT)
                      (("1" (SKEEP)
                        (("1" (CASE "f(1) = zero_q")
                          (("1" (HIDE 1)
                            (("1" (INST 1 "f(2)")
                              (("1" (TYPEPRED "f")
                                (("1" (EXPAND "/=")
                                  (("1" (EXPAND "injective?")
                                    (("1" (INST -1 "1" "2")
                                      (("1" (SPLIT)
                                        (("1" (ASSERT) NIL NIL)
                                         ("2" (ASSERT) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (INST 3 "f(1)") (("2" (ASSERT) NIL NIL)) NIL))
                          NIL))
                        NIL)
                       ("2" (PROPAX) NIL NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (CASE "card(L) >= 2")
              (("1" (HIDE 1)
                (("1" (LEMMA "finite_sets[quat].card_2_has_2")
                  (("1" (INST?) (("1" (POSTPONE) NIL NIL)) NIL)) NIL))
                NIL)
               ("2" (POSTPONE) NIL NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK
   (|minimal_nz_norm| SUBTYPE
    "{t: integers.posnat | EXISTS (l: (quaternions_Hurwitz_rings.L)): t = quaternions_def[rational, restrict[[numfield, numfield], [rational, rational], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [rational, rational], numfield].restrict(number_fields.*), 0, 1, -1, -1].red_norm(l)`x}"
    "(sets[posnat].nonempty?)"))
  (|minimal_nz_norm_TCC1-1| NIL 3926503102
   (""
    (STOP-REWRITE "right_identity" "left_identity" "one_left" "one_right"
     "zero_plus" "plus_zero")
    (("" (SKEEP)
      (("" (CASE "EXISTS(a: (L)): a /= zero_q")
        (("1" (SKEEP)
          (("1" (HIDE 2)
            (("1" (EXPAND "nonempty?")
              (("1" (EXPAND "empty?")
                (("1" (CASE "Hurwitz_ring(a)")
                  (("1" (LEMMA "Hurwitz_red_norm_is_posint")
                    (("1" (INST -1 "a")
                      (("1" (FLATTEN)
                        (("1" (NAME-REPLACE "b" "red_norm(a)`x")
                          (("1" (INST -4 "b")
                            (("1" (EXPAND "member")
                              (("1" (INST 2 "a")
                                (("1" (EXPAND "b") (("1" (PROPAX) NIL NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (CASE "b = 0 => a = zero_q")
                              (("1" (GRIND) NIL NIL)
                               ("2" (PROP)
                                (("1" (ASSERT) NIL NIL)
                                 ("2" (HIDE-ALL-BUT (-3 1 2))
                                  (("2" (EXPAND "b")
                                    (("2" (LEMMA "Hurwitz_red_norm_charac")
                                      (("2" (INST?)
                                        (("1" (REPLACES -1)
                                          (("1" (BETA)
                                            (("1"
                                              (LEMMA "four_squares_eq_zero")
                                              (("1" (INST?)
                                                (("1" (SPLIT)
                                                  (("1" (FLATTEN)
                                                    (("1" (HIDE -5)
                                                      (("1" (EXPAND "zero_q")
                                                        (("1"
                                                          (DECOMPOSE-EQUALITY)
                                                          NIL NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (HIDE-ALL-BUT 1)
                                          (("2" (TYPEPRED "a")
                                            (("2" (TYPEPRED "L")
                                              (("2" (EXPAND "left_ideal?")
                                                (("2" (FLATTEN)
                                                  (("2" (EXPAND "subring?")
                                                    (("2" (FLATTEN)
                                                      (("2" (HIDE -2 -3)
                                                        (("2" (GRIND) NIL NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (TYPEPRED "a")
                    (("2" (HIDE-ALL-BUT (-1 1))
                      (("2" (TYPEPRED "L")
                        (("2" (EXPAND "left_ideal?")
                          (("2" (FLATTEN)
                            (("2" (EXPAND "subring?")
                              (("2" (FLATTEN)
                                (("2" (HIDE -2 -3) (("2" (GRIND) NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (HIDE 3)
          (("2" (SPLIT)
            (("1" (LEMMA "infinite_def")
              (("1" (INST?)
                (("1" (FLATTEN)
                  (("1" (HIDE -2)
                    (("1" (SPLIT)
                      (("1" (SKEEP)
                        (("1" (CASE "f(1) = zero_q")
                          (("1" (HIDE 1)
                            (("1" (INST 1 "f(2)")
                              (("1" (TYPEPRED "f")
                                (("1" (EXPAND "/=")
                                  (("1" (EXPAND "injective?")
                                    (("1" (INST -1 "1" "2")
                                      (("1" (SPLIT)
                                        (("1" (ASSERT) NIL NIL)
                                         ("2" (ASSERT) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (INST 3 "f(1)") (("2" (ASSERT) NIL NIL)) NIL))
                          NIL))
                        NIL)
                       ("2" (PROPAX) NIL NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (CASE "card(L) >= 2")
              (("1" (HIDE 1)
                (("1" (LEMMA "finite_sets[quat].card_2_has_2")
                  (("1" (INST?)
                    (("1" (ASSERT)
                      (("1" (SKEEP)
                        (("1" (CASE-REPLACE "x = zero_q")
                          (("1" (INST 2 "y") (("1" (ASSERT) NIL NIL)) NIL)
                           ("2" (INST 3 "x") (("2" (ASSERT) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (ASSERT) NIL NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|card| CONST-DECL "{n: nat | n = Card(S)}" |finite_sets| NIL)
    (|Card| CONST-DECL "nat" |finite_sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|card_2_has_2| FORMULA-DECL NIL |finite_sets| NIL)
    (|y| SKOLEM-CONST-DECL "quat[rational,
     restrict[[numfield, numfield], [rational, rational], numfield](+),
     restrict[[numfield, numfield], [rational, rational], numfield](*), 0,
     1, -1, -1]"
     |quaternions_Hurwitz_rings| NIL)
    (|x| SKOLEM-CONST-DECL "quat[rational,
     restrict[[numfield, numfield], [rational, rational], numfield](+),
     restrict[[numfield, numfield], [rational, rational], numfield](*), 0,
     1, -1, -1]"
     |quaternions_Hurwitz_rings| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|infinite_def| FORMULA-DECL NIL |infinite_nat_def| |sets_aux|)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (|a| SKOLEM-CONST-DECL "(L)" |quaternions_Hurwitz_rings| NIL)
    (L SKOLEM-CONST-DECL "Hurwitz_left_ideal" |quaternions_Hurwitz_rings| NIL)
    (|Hurwitz_ring| NONEMPTY-TYPE-EQ-DECL NIL |quaternions_Hurwitz_rings| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|red_norm| CONST-DECL "quat" |quaternions_def| |algebra|)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|integer?| CONST-DECL "bool" |integers| NIL)
    (|Hurwitz_red_norm_charac| FORMULA-DECL NIL |quaternions_Hurwitz_rings|
     NIL)
    (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])"
     |sets_lemmas| NIL)
    (|subset?| CONST-DECL "bool" |sets| NIL)
    (|subring?| CONST-DECL "bool" |ring_def| |algebra|)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|four_squares_eq_zero| FORMULA-DECL NIL |four_int_squares_aux| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|negate_nz_T_is_nz_T| APPLICATION-JUDGEMENT "nz_T[rational,
     restrict[[numfield, numfield], [rational, rational], numfield](+),
     restrict[[numfield, numfield], [rational, rational], numfield](*), 0]"
     |quaternions_Hurwitz_rings| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|b| SKOLEM-CONST-DECL "rational" |quaternions_Hurwitz_rings| NIL)
    (>= CONST-DECL "bool" |reals| NIL) (> CONST-DECL "bool" |reals| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|Hurwitz_red_norm_is_posint| FORMULA-DECL NIL |quaternions_Hurwitz_rings|
     NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|Hurwitz_left_ideal| NONEMPTY-TYPE-EQ-DECL NIL |quaternions_Hurwitz_rings|
     NIL)
    (|Hurwitz_ring| CONST-DECL "set[quat[rational,
         restrict[[numfield, numfield], [rational, rational], numfield](+),
         restrict[[numfield, numfield], [rational, rational], numfield](*),
         0, 1, -1, -1]]"
     |quaternions_Hurwitz_rings| NIL)
    (|left_ideal?| CONST-DECL "bool" |ring_ideal_def| |algebra|)
    (|ring?| CONST-DECL "bool" |ring_def| |algebra|)
    (|zero_q| CONST-DECL "quat" |quaternions_def| |algebra|)
    (* CONST-DECL "[quat, quat -> quat]" |quaternions_def| |algebra|)
    (+ CONST-DECL "quat" |quaternions_def| |algebra|)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|quat| TYPE-EQ-DECL NIL |quaternions_def| |algebra|)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|rat_plus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL))
   NIL
   (|minimal_nz_norm| SUBTYPE
    "{t: integers.posnat | EXISTS (l: (quaternions_Hurwitz_rings.L)): t = quaternions_def[rational, restrict[[numfield, numfield], [rational, rational], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [rational, rational], numfield].restrict(number_fields.*), 0, 1, -1, -1].red_norm(l)`x}"
    "(sets[posnat].nonempty?)")))
 (|Hurwitz_prod_inv_exists| 0
  (|Hurwitz_prod_inv_exists-0| "" 3933736330
   (""
    (STOP-REWRITE "right_identity" "left_identity" "one_left" "one_right"
     "zero_plus" "plus_zero")
    (("" (SKEEP)
      (("" (SPLIT)
        (("1" (FLATTEN)
          (("1" (INST 1 "conjugate(h)")
            (("1" (LEMMA "q_x_cq_commutes")
              (("1" (INST -1 "h")
                (("1" (REPLACE -1 1 RL HIDE)
                  (("1" (CASE "h * conjugate(h) = one_q")
                    (("1" (SPLIT)
                      (("1" (PROPAX) NIL NIL) ("2" (PROPAX) NIL NIL)) NIL)
                     ("2" (HIDE 2)
                      (("2" (CASE-REPLACE "h * conjugate(h) = red_norm(h)")
                        (("1" (HIDE -1)
                          (("1" (REWRITE* "Hurwitz_red_norm_charac")
                            (("1" (BETA)
                              (("1" (REPLACES -1)
                                (("1" (EXPAND "one_q") (("1" (PROPAX) NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (HIDE-ALL-BUT 1)
                          (("2" (EXPAND "red_norm") (("2" (PROPAX) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (FLATTEN)
          (("2" (SKEEP)
            (("2" (HIDE -2)
              (("2" (CASE "red_norm(h * r)`x = red_norm(one_q)`x")
                (("1" (CASE-REPLACE "red_norm(one_q)`x = 1")
                  (("1" (HIDE -1)
                    (("1" (REWRITE "red_norm_prod")
                      (("1"
                        (CASE
                            "FORALL(a, b: (Hurwitz_ring)): (red_norm(a) * red_norm(b))`x = red_norm(a)`x * red_norm(b)`x")
                        (("1" (INST?)
                          (("1" (REPLACES -1)
                            (("1" (LEMMA "Hurwitz_red_norm_is_posint")
                              (("1" (INST-CP -1 "r")
                                (("1" (INST -1 "h")
                                  (("1" (FLATTEN)
                                    (("1" (HIDE -6)
                                      (("1" (NAME-REPLACE "h1" "red_norm(h)`x")
                                        (("1"
                                          (NAME-REPLACE "r1" "red_norm(r)`x")
                                          (("1" (LEMMA "product_one")
                                            (("1" (INST?)
                                              (("1" (PROP)
                                                (("1" (ASSERT) NIL NIL)) NIL)
                                               ("2" (HIDE -5 2)
                                                (("2" (GRIND) NIL NIL)) NIL)
                                               ("3" (HIDE -5 2)
                                                (("3" (GRIND) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (HIDE-ALL-BUT 1)
                          (("2" (SKEEP)
                            (("2" (REWRITE* "Hurwitz_red_norm_charac")
                              (("2" (REWRITE "q_prod_charac")
                                (("2" (BETA) (("2" (ASSERT) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (HIDE-ALL-BUT 1)
                    (("2" (EXPAND "one_q")
                      (("2" (REWRITE "Hurwitz_red_norm_charac")
                        (("1" (BETA) (("1" (PROPAX) NIL NIL)) NIL)
                         ("2" (HIDE 2)
                          (("2" (EXPAND "Hurwitz_ring")
                            (("2" (INST 1 "2" "-1" "-1" "-1")
                              (("2" (GRIND) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (HIDE 2) (("2" (REPLACES -1) NIL NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|red_norm_prod| FORMULA-DECL NIL |quaternions| |algebra|)
    (|zero_times| FORMULA-DECL NIL |ring| |algebra|)
    (|inv_one| FORMULA-DECL NIL |group| |algebra|)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|times_u8_u8| APPLICATION-JUDGEMENT "uint16" |integertypes| NIL)
    (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|times_i16_u16| APPLICATION-JUDGEMENT "int32" |integertypes| NIL)
    (|times_i8_u8| APPLICATION-JUDGEMENT "int16" |integertypes| NIL)
    (|q_prod_charac| FORMULA-DECL NIL |quaternions| |algebra|)
    (|Hurwitz_red_norm_is_posint| FORMULA-DECL NIL |quaternions_Hurwitz_rings|
     NIL)
    (|h1| SKOLEM-CONST-DECL "rational" |quaternions_Hurwitz_rings| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|r1| SKOLEM-CONST-DECL "rational" |quaternions_Hurwitz_rings| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|integer?| CONST-DECL "bool" |integers| NIL)
    (|product_one| FORMULA-DECL NIL |divides| NIL)
    (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|plus_u32_i32| APPLICATION-JUDGEMENT "int64" |integertypes| NIL)
    (|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (|plus_u16_u16| APPLICATION-JUDGEMENT "uint32" |integertypes| NIL)
    (|odd_times_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|q_x_cq_commutes| FORMULA-DECL NIL |quaternions| |algebra|)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|Hurwitz_red_norm_charac| FORMULA-DECL NIL |quaternions_Hurwitz_rings|
     NIL)
    (|Hurwitz_ring| NONEMPTY-TYPE-EQ-DECL NIL |quaternions_Hurwitz_rings| NIL)
    (|negate_nz_T_is_nz_T| APPLICATION-JUDGEMENT "nz_T[rational,
     restrict[[numfield, numfield], [rational, rational], numfield](+),
     restrict[[numfield, numfield], [rational, rational], numfield](*), 0]"
     |quaternions_Hurwitz_rings| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|red_norm| CONST-DECL "quat" |quaternions_def| |algebra|)
    (|hurwitz_prod| APPLICATION-JUDGEMENT "Hurwitz_ring"
     |quaternions_Hurwitz_rings| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (* CONST-DECL "[quat, quat -> quat]" |quaternions_def| |algebra|)
    (|one_q| CONST-DECL "quat" |quaternions_def| |algebra|)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|quat| TYPE-EQ-DECL NIL |quaternions_def| |algebra|)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|Hurwitz_ring| CONST-DECL "set[quat[rational,
         restrict[[numfield, numfield], [rational, rational], numfield](+),
         restrict[[numfield, numfield], [rational, rational], numfield](*),
         0, 1, -1, -1]]"
     |quaternions_Hurwitz_rings| NIL)
    (|conjugate| CONST-DECL "quat" |quaternions_def| |algebra|)
    (|rat_plus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|hurwitz_conjugate| APPLICATION-JUDGEMENT "Hurwitz_ring"
     |quaternions_Hurwitz_rings| NIL))
   SHOSTAK)
  (|Hurwitz_prod_inv_exists-1| NIL 3926503678
   (""
    (STOP-REWRITE "right_identity" "left_identity" "one_left" "one_right"
     "zero_plus" "plus_zero")
    (("" (SKEEP)
      (("" (SPLIT)
        (("1" (FLATTEN)
          (("1" (INST 1 "conjugate(h)")
            (("1" (LEMMA "q_x_cq_commutes")
              (("1" (INST -1 "h")
                (("1" (REPLACE -1 1 RL HIDE)
                  (("1" (CASE "h * conjugate(h) = one_q")
                    (("1" (SPLIT)
                      (("1" (PROPAX) NIL NIL) ("2" (PROPAX) NIL NIL)) NIL)
                     ("2" (HIDE 2)
                      (("2" (CASE-REPLACE "h * conjugate(h) = red_norm(h)")
                        (("1" (HIDE -1)
                          (("1" (REWRITE* "Hurwitz_red_norm_charac")
                            (("1" (BETA)
                              (("1" (REPLACES -1)
                                (("1" (EXPAND "one_q") (("1" (PROPAX) NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (HIDE-ALL-BUT 1)
                          (("2" (EXPAND "red_norm") (("2" (PROPAX) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (FLATTEN)
          (("2" (SKEEP)
            (("2" (HIDE -2)
              (("2" (CASE "red_norm(h * r)`x = red_norm(one_q)`x")
                (("1" (CASE-REPLACE "red_norm(one_q)`x = 1")
                  (("1" (HIDE -1)
                    (("1" (REWRITE "red_norm_prod")
                      (("1"
                        (CASE
                            "FORALL(a, b: (Hurwitz_ring)): (red_norm(a) * red_norm(b))`x = red_norm(a)`x * red_norm(b)`x")
                        (("1" (INST?)
                          (("1" (REPLACES -1)
                            (("1" (LEMMA "Hurwitz_red_norm_is_posint")
                              (("1" (INST-CP -1 "r")
                                (("1" (INST -1 "h")
                                  (("1" (FLATTEN)
                                    (("1" (HIDE -6)
                                      (("1" (NAME-REPLACE "h1" "red_norm(h)`x")
                                        (("1"
                                          (NAME-REPLACE "r1" "red_norm(r)`x")
                                          (("1" (LEMMA "product_one")
                                            (("1" (INST?)
                                              (("1" (PROP)
                                                (("1" (ASSERT) NIL NIL)) NIL)
                                               ("2" (HIDE -5 2)
                                                (("2" (GRIND) NIL NIL)) NIL)
                                               ("3" (HIDE -5 2)
                                                (("3" (GRIND) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (HIDE-ALL-BUT 1)
                          (("2" (SKEEP)
                            (("2" (REWRITE* "Hurwitz_red_norm_charac")
                              (("2" (REWRITE "q_prod_charac")
                                (("2" (BETA) (("2" (ASSERT) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (HIDE-ALL-BUT 1)
                    (("2" (EXPAND "one_q")
                      (("2" (REWRITE "Hurwitz_red_norm_charac")
                        (("1" (BETA) (("1" (PROPAX) NIL NIL)) NIL)
                         ("2" (HIDE 2)
                          (("2" (EXPAND "Hurwitz_ring")
                            (("2" (INST 1 "2" "-1" "-1" "-1")
                              (("2" (GRIND) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (HIDE 2) (("2" (REPLACES -1) NIL NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|red_norm_prod| FORMULA-DECL NIL |quaternions| |algebra|)
    (|zero_times| FORMULA-DECL NIL |ring| |algebra|)
    (|inv_one| FORMULA-DECL NIL |group| |algebra|)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|times_u8_u8| APPLICATION-JUDGEMENT "uint16" |integertypes| NIL)
    (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|times_i16_u16| APPLICATION-JUDGEMENT "int32" |integertypes| NIL)
    (|times_i8_u8| APPLICATION-JUDGEMENT "int16" |integertypes| NIL)
    (|q_prod_charac| FORMULA-DECL NIL |quaternions| |algebra|)
    (|Hurwitz_red_norm_is_posint| FORMULA-DECL NIL |quaternions_Hurwitz_rings|
     NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|integer?| CONST-DECL "bool" |integers| NIL)
    (|product_one| FORMULA-DECL NIL |divides| NIL)
    (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|plus_u32_i32| APPLICATION-JUDGEMENT "int64" |integertypes| NIL)
    (|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (|plus_u16_u16| APPLICATION-JUDGEMENT "uint32" |integertypes| NIL)
    (|odd_times_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|q_x_cq_commutes| FORMULA-DECL NIL |quaternions| |algebra|)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|Hurwitz_red_norm_charac| FORMULA-DECL NIL |quaternions_Hurwitz_rings|
     NIL)
    (|Hurwitz_ring| NONEMPTY-TYPE-EQ-DECL NIL |quaternions_Hurwitz_rings| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|red_norm| CONST-DECL "quat" |quaternions_def| |algebra|)
    (|hurwitz_prod| APPLICATION-JUDGEMENT "Hurwitz_ring"
     |quaternions_Hurwitz_rings| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (* CONST-DECL "[quat, quat -> quat]" |quaternions_def| |algebra|)
    (|one_q| CONST-DECL "quat" |quaternions_def| |algebra|)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|quat| TYPE-EQ-DECL NIL |quaternions_def| |algebra|)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|Hurwitz_ring| CONST-DECL "set[quat[rational,
         restrict[[numfield, numfield], [rational, rational], numfield](+),
         restrict[[numfield, numfield], [rational, rational], numfield](*),
         0, 1, -1, -1]]"
     |quaternions_Hurwitz_rings| NIL)
    (|conjugate| CONST-DECL "quat" |quaternions_def| |algebra|)
    (|rat_plus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|hurwitz_conjugate| APPLICATION-JUDGEMENT "Hurwitz_ring"
     |quaternions_Hurwitz_rings| NIL))
   SHOSTAK))
 (|left_product_generator| 0
  (|left_product_generator-0| "" 3933736338
   (""
    (STOP-REWRITE "right_identity" "left_identity" "one_left" "one_right"
     "zero_plus" "plus_zero")
    (("" (SKEEP)
      (("" (NAME "m" "minimal_nz_norm(L)")
        (("" (EXPAND "minimal_nz_norm")
          (("" (LIFT-IF)
            (("" (SPLIT)
              (("1" (FLATTEN)
                (("1" (CASE "L(zero_q) AND Hurwitz_ring(zero_q)")
                  (("1" (FLATTEN)
                    (("1" (INST 1 "zero_q")
                      (("1" (SKEEP)
                        (("1" (INST 1 "zero_q")
                          (("1" (HIDE -2 -3 -5)
                            (("1" (TYPEPRED "x")
                              (("1" (REWRITE "zero_q_times")
                                (("1" (CASE "card(L) = 0")
                                  (("1" (LEMMA "empty_card[quat]")
                                    (("1" (INST?)
                                      (("1" (PROP)
                                        (("1" (HIDE-ALL-BUT (-1 -5))
                                          (("1" (GRIND) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (CASE "card(L) = 1")
                                    (("1" (LEMMA "card_one[quat]")
                                      (("1" (INST?)
                                        (("1" (PROP)
                                          (("1" (SKEEP)
                                            (("1" (EXPAND "singleton")
                                              (("1" (HIDE-ALL-BUT (-2 -4 -5 2))
                                                (("1" (REPLACES -1)
                                                  (("1" (BETA)
                                                    (("1" (ASSERT) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (HIDE -1 -2 3)
                                      (("2" (GRIND) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (HIDE-ALL-BUT 1)
                    (("2" (TYPEPRED "L")
                      (("2" (EXPAND "left_ideal?")
                        (("2" (EXPAND "subring?")
                          (("2" (FLATTEN)
                            (("2" (LEMMA "zero_is_member_R[quat,+,*,zero_q]")
                              (("2" (INST-CP -1 "L")
                                (("2" (INST -1 "Hurwitz_ring")
                                  (("2" (ASSERT) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (LEMMA "minimal_nz_norm_TCC1")
                (("2" (INST -1 "L")
                  (("2"
                    (CASE
                        "nonempty?[posnat] ({t: posnat | EXISTS (l: (L)): t = red_norm [rational, restrict [[numfield, numfield], [rational, rational], numfield] (+), restrict [[numfield, numfield], [rational, rational], numfield] (*), 0, 1, -1, -1] (l)`x}) => EXISTS (u: (L)): FORALL (x: (L)): EXISTS (r: (Hurwitz_ring)): x = r * u")
                    (("1" (PROP) NIL NIL)
                     ("2" (FLATTEN)
                      (("2" (HIDE -2 2 3)
                        (("2"
                          (TYPEPRED
                           "min({t: posnat | EXISTS (l: (L)): t = red_norm(l)`x})")
                          (("1" (REPLACES -5)
                            (("1" (SKEEP)
                              (("1" (INST 1 "l_1")
                                (("1" (SKEEP)
                                  (("1" (LEMMA "Hurwitz_left_division")
                                    (("1" (INST -1 "x" "l_1")
                                      (("1" (SKEEP)
                                        (("1" (INST 1 "c")
                                          (("1" (CASE-REPLACE "d = zero_q")
                                            (("1" (HIDE-ALL-BUT (-2 1))
                                              (("1" (REWRITE "plus_zero_q") NIL
                                                NIL))
                                              NIL)
                                             ("2" (REPLACE -4 -2 RL HIDE)
                                              (("2"
                                                (LEMMA
                                                 "Hurwitz_red_norm_is_posint")
                                                (("2" (INST -1 "d")
                                                  (("2" (FLATTEN)
                                                    (("2"
                                                      (CASE
                                                          "red_norm(d)`x = 0 => d = zero_q")
                                                      (("1" (SPLIT)
                                                        (("1" (PROPAX) NIL NIL)
                                                         ("2"
                                                          (INST -6
                                                           "(red_norm(d))`x")
                                                          (("1" (SPLIT)
                                                            (("1"
                                                              (HIDE-ALL-BUT
                                                               (-1 -5))
                                                              (("1" (ASSERT)
                                                                NIL NIL))
                                                              NIL)
                                                             ("2" (INST 1 "d")
                                                              (("2"
                                                                (HIDE-ALL-BUT
                                                                 (-3 1))
                                                                (("2"
                                                                  (TYPEPRED
                                                                   "x")
                                                                  (("2"
                                                                    (TYPEPRED
                                                                     "l_1")
                                                                    (("2"
                                                                      (TYPEPRED
                                                                       "L")
                                                                      (("2"
                                                                        (EXPAND
                                                                         "left_ideal?")
                                                                        (("2"
                                                                          (FLATTEN)
                                                                          (("2"
                                                                            (EXPAND
                                                                             "left_swallow?")
                                                                            (("2"
                                                                              (INST
                                                                               -2
                                                                               "c"
                                                                               "l_1")
                                                                              (("2"
                                                                                (EXPAND
                                                                                 "member")
                                                                                (("2"
                                                                                  (HIDE
                                                                                   -3)
                                                                                  (("2"
                                                                                    (EXPAND
                                                                                     "subring?")
                                                                                    (("2"
                                                                                      (FLATTEN)
                                                                                      (("2"
                                                                                        (HIDE
                                                                                         -1)
                                                                                        (("2"
                                                                                          (EXPAND
                                                                                           "ring?")
                                                                                          (("2"
                                                                                            (FLATTEN)
                                                                                            (("2"
                                                                                              (HIDE
                                                                                               -2
                                                                                               -3
                                                                                               -4
                                                                                               -5)
                                                                                              (("2"
                                                                                                (EXPAND
                                                                                                 "abelian_group?")
                                                                                                (("2"
                                                                                                  (FLATTEN)
                                                                                                  (("2"
                                                                                                    (HIDE
                                                                                                     -2)
                                                                                                    (("2"
                                                                                                      (EXPAND
                                                                                                       "group?")
                                                                                                      (("2"
                                                                                                        (FLATTEN)
                                                                                                        (("2"
                                                                                                          (EXPAND
                                                                                                           "monoid?")
                                                                                                          (("2"
                                                                                                            (FLATTEN)
                                                                                                            (("2"
                                                                                                              (HIDE
                                                                                                               -2)
                                                                                                              (("2"
                                                                                                                (EXPAND
                                                                                                                 "monad?")
                                                                                                                (("2"
                                                                                                                  (FLATTEN)
                                                                                                                  (("2"
                                                                                                                    (HIDE
                                                                                                                     -2
                                                                                                                     -3)
                                                                                                                    (("2"
                                                                                                                      (EXPAND
                                                                                                                       "star_closed?")
                                                                                                                      (("2"
                                                                                                                        (EXPAND
                                                                                                                         "inv_exists?")
                                                                                                                        (("2"
                                                                                                                          (INST
                                                                                                                           -2
                                                                                                                           "c * l_1")
                                                                                                                          (("2"
                                                                                                                            (SKEEP)
                                                                                                                            (("2"
                                                                                                                              (CASE
                                                                                                                                  "y = inv(c * l_1)")
                                                                                                                              (("1"
                                                                                                                                (HIDE
                                                                                                                                 -3
                                                                                                                                 -4)
                                                                                                                                (("1"
                                                                                                                                  (TYPEPRED
                                                                                                                                   "y")
                                                                                                                                  (("1"
                                                                                                                                    (REPLACES
                                                                                                                                     -2)
                                                                                                                                    (("1"
                                                                                                                                      (INST
                                                                                                                                       -2
                                                                                                                                       "x"
                                                                                                                                       "inv(c * l_1)")
                                                                                                                                      (("1"
                                                                                                                                        (EXPAND
                                                                                                                                         "member")
                                                                                                                                        (("1"
                                                                                                                                          (CASE-REPLACE
                                                                                                                                           "x + inv(c * l_1) = d")
                                                                                                                                          (("1"
                                                                                                                                            (HIDE-ALL-BUT
                                                                                                                                             (-5
                                                                                                                                              1))
                                                                                                                                            (("1"
                                                                                                                                              (REPLACES
                                                                                                                                               -1)
                                                                                                                                              (("1"
                                                                                                                                                (REWRITE
                                                                                                                                                 "plus_commutative")
                                                                                                                                                (("1"
                                                                                                                                                  (REWRITE
                                                                                                                                                   "plus_associative")
                                                                                                                                                  (("1"
                                                                                                                                                    (CASE-REPLACE
                                                                                                                                                     "c * l_1 + inv(c * l_1) = zero_q")
                                                                                                                                                    (("1"
                                                                                                                                                      (REWRITE
                                                                                                                                                       "plus_zero_q")
                                                                                                                                                      NIL
                                                                                                                                                      NIL)
                                                                                                                                                     ("2"
                                                                                                                                                      (HIDE
                                                                                                                                                       2)
                                                                                                                                                      (("2"
                                                                                                                                                        (ASSERT)
                                                                                                                                                        NIL
                                                                                                                                                        NIL))
                                                                                                                                                      NIL))
                                                                                                                                                    NIL))
                                                                                                                                                  NIL))
                                                                                                                                                NIL))
                                                                                                                                              NIL))
                                                                                                                                            NIL))
                                                                                                                                          NIL))
                                                                                                                                        NIL))
                                                                                                                                      NIL))
                                                                                                                                    NIL))
                                                                                                                                  NIL))
                                                                                                                                NIL)
                                                                                                                               ("2"
                                                                                                                                (HIDE-ALL-BUT
                                                                                                                                 (-2
                                                                                                                                  1))
                                                                                                                                (("2"
                                                                                                                                  (CASE
                                                                                                                                      "inv(c * l_1)+ c * l_1 + y =inv(c * l_1) +zero_q")
                                                                                                                                  (("1"
                                                                                                                                    (HIDE
                                                                                                                                     -2)
                                                                                                                                    (("1"
                                                                                                                                      (REWRITE
                                                                                                                                       "plus_zero_q")
                                                                                                                                      (("1"
                                                                                                                                        (CASE-REPLACE
                                                                                                                                         "inv(c * l_1) + c * l_1 = zero_q")
                                                                                                                                        (("1"
                                                                                                                                          (HIDE
                                                                                                                                           -1)
                                                                                                                                          (("1"
                                                                                                                                            (REWRITE
                                                                                                                                             "zero_q_plus")
                                                                                                                                            NIL
                                                                                                                                            NIL))
                                                                                                                                          NIL)
                                                                                                                                         ("2"
                                                                                                                                          (HIDE-ALL-BUT
                                                                                                                                           1)
                                                                                                                                          (("2"
                                                                                                                                            (ASSERT)
                                                                                                                                            NIL
                                                                                                                                            NIL))
                                                                                                                                          NIL))
                                                                                                                                        NIL))
                                                                                                                                      NIL))
                                                                                                                                    NIL)
                                                                                                                                   ("2"
                                                                                                                                    (HIDE
                                                                                                                                     2)
                                                                                                                                    (("2"
                                                                                                                                      (REPLACE
                                                                                                                                       -1
                                                                                                                                       1
                                                                                                                                       RL
                                                                                                                                       HIDE)
                                                                                                                                      (("2"
                                                                                                                                        (REWRITE
                                                                                                                                         "plus_associative")
                                                                                                                                        NIL
                                                                                                                                        NIL))
                                                                                                                                      NIL))
                                                                                                                                    NIL))
                                                                                                                                  NIL))
                                                                                                                                NIL))
                                                                                                                              NIL))
                                                                                                                            NIL))
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL)
                                                           ("2"
                                                            (HIDE-ALL-BUT
                                                             (-1 -2 1 2))
                                                            (("2" (GRIND) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL)
                                                       ("2" (HIDE-ALL-BUT 1)
                                                        (("2" (FLATTEN)
                                                          (("2"
                                                            (REWRITE
                                                             "Hurwitz_red_norm_charac")
                                                            (("2" (BETA)
                                                              (("2"
                                                                (LEMMA
                                                                 "four_squares_eq_zero")
                                                                (("2" (INST?)
                                                                  (("2" (SPLIT)
                                                                    (("1"
                                                                      (FLATTEN)
                                                                      (("1"
                                                                        (HIDE
                                                                         -5)
                                                                        (("1"
                                                                          (EXPAND
                                                                           "zero_q")
                                                                          (("1"
                                                                            (DECOMPOSE-EQUALITY)
                                                                            NIL
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL)
                                                                     ("2"
                                                                      (PROPAX)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (REPLACES -2)
                                        (("2" (HIDE-ALL-BUT (-1 1))
                                          (("2" (TYPEPRED "l_1")
                                            (("2" (TYPEPRED "L")
                                              (("2" (EXPAND "left_ideal?")
                                                (("2" (EXPAND "subring?")
                                                  (("2" (FLATTEN)
                                                    (("2"
                                                      (HIDE-ALL-BUT
                                                       (-1 -4 -5 1))
                                                      (("2" (GRIND) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("3" (HIDE-ALL-BUT 1)
                                        (("3" (TYPEPRED "x")
                                          (("3" (TYPEPRED "L")
                                            (("3" (EXPAND "left_ideal?")
                                              (("3" (EXPAND "subring?")
                                                (("3" (FLATTEN)
                                                  (("3"
                                                    (HIDE-ALL-BUT (-1 -4 1))
                                                    (("3" (GRIND) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (PROPAX) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|rat_plus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (L SKOLEM-CONST-DECL "Hurwitz_left_ideal" |quaternions_Hurwitz_rings| NIL)
    (|Hurwitz_ring| NONEMPTY-TYPE-EQ-DECL NIL |quaternions_Hurwitz_rings| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|card| CONST-DECL "{n: nat | n = Card(S)}" |finite_sets| NIL)
    (|Card| CONST-DECL "nat" |finite_sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|empty_card| FORMULA-DECL NIL |finite_sets| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|card_one| FORMULA-DECL NIL |finite_sets| NIL)
    (|singleton| CONST-DECL "(singleton?)" |sets| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|zero_q_times| FORMULA-DECL NIL |quaternions| |algebra|)
    (|subring?| CONST-DECL "bool" |ring_def| |algebra|)
    (|zero_is_member_R| FORMULA-DECL NIL |ring_basic_properties| |algebra|)
    (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])"
     |sets_lemmas| NIL)
    (|min| CONST-DECL "{a | S(a) AND (FORALL x: S(x) IMPLIES a <= x)}"
     |min_nat| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|x| SKOLEM-CONST-DECL "(L)" |quaternions_Hurwitz_rings| NIL)
    (|l_1| SKOLEM-CONST-DECL "(L)" |quaternions_Hurwitz_rings| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|d| SKOLEM-CONST-DECL "Hurwitz_ring" |quaternions_Hurwitz_rings| NIL)
    (|group?| CONST-DECL "bool" |group_def| |algebra|)
    (|monoid?| CONST-DECL "bool" |monoid_def| |algebra|)
    (|star_closed?| CONST-DECL "bool" |groupoid_def| |algebra|)
    (|c| SKOLEM-CONST-DECL "Hurwitz_ring" |quaternions_Hurwitz_rings| NIL)
    (|inv| CONST-DECL "{y | x * y = one AND y * x = one}" |group| |algebra|)
    (|plus_associative| FORMULA-DECL NIL |ring| |algebra|)
    (|inv_right| FORMULA-DECL NIL |group| |algebra|)
    (|plus_commutative| FORMULA-DECL NIL |ring| |algebra|)
    (|inv_left| FORMULA-DECL NIL |group| |algebra|)
    (|zero_q_plus| FORMULA-DECL NIL |quaternions| |algebra|)
    (|inv_exists?| CONST-DECL "bool" |group_def| |algebra|)
    (|monad?| CONST-DECL "bool" |monad_def| |algebra|)
    (|abelian_group?| CONST-DECL "bool" |group_def| |algebra|)
    (|left_swallow?| CONST-DECL "bool" |ring_ideal_def| |algebra|)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|conjugate| CONST-DECL "quat" |quaternions_def| |algebra|)
    (|hurwitz_conjugate| APPLICATION-JUDGEMENT "Hurwitz_ring"
     |quaternions_Hurwitz_rings| NIL)
    (|hurwitz_prod| APPLICATION-JUDGEMENT "Hurwitz_ring"
     |quaternions_Hurwitz_rings| NIL)
    (|integer?| CONST-DECL "bool" |integers| NIL)
    (|four_squares_eq_zero| FORMULA-DECL NIL |four_int_squares_aux| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|negate_nz_T_is_nz_T| APPLICATION-JUDGEMENT "nz_T[rational,
     restrict[[numfield, numfield], [rational, rational], numfield](+),
     restrict[[numfield, numfield], [rational, rational], numfield](*), 0]"
     |quaternions_Hurwitz_rings| NIL)
    (|Hurwitz_red_norm_charac| FORMULA-DECL NIL |quaternions_Hurwitz_rings|
     NIL)
    (|Hurwitz_red_norm_is_posint| FORMULA-DECL NIL |quaternions_Hurwitz_rings|
     NIL)
    (|plus_zero_q| FORMULA-DECL NIL |quaternions| |algebra|)
    (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|subset?| CONST-DECL "bool" |sets| NIL)
    (|Hurwitz_left_division| FORMULA-DECL NIL |quaternions_Hurwitz_rings| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (|red_norm| CONST-DECL "quat" |quaternions_def| |algebra|)
    (|minimal_nz_norm_TCC1| SUBTYPE-TCC NIL |quaternions_Hurwitz_rings| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|quat| TYPE-EQ-DECL NIL |quaternions_def| |algebra|)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (+ CONST-DECL "quat" |quaternions_def| |algebra|)
    (* CONST-DECL "[quat, quat -> quat]" |quaternions_def| |algebra|)
    (|zero_q| CONST-DECL "quat" |quaternions_def| |algebra|)
    (|ring?| CONST-DECL "bool" |ring_def| |algebra|)
    (|left_ideal?| CONST-DECL "bool" |ring_ideal_def| |algebra|)
    (|Hurwitz_ring| CONST-DECL "set[quat[rational,
         restrict[[numfield, numfield], [rational, rational], numfield](+),
         restrict[[numfield, numfield], [rational, rational], numfield](*),
         0, 1, -1, -1]]"
     |quaternions_Hurwitz_rings| NIL)
    (|Hurwitz_left_ideal| NONEMPTY-TYPE-EQ-DECL NIL |quaternions_Hurwitz_rings|
     NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|minimal_nz_norm| CONST-DECL "int" |quaternions_Hurwitz_rings| NIL))
   SHOSTAK)
  (|left_product_generator-1| NIL 3926503769
   (""
    (STOP-REWRITE "right_identity" "left_identity" "one_left" "one_right"
     "zero_plus" "plus_zero")
    (("" (SKEEP)
      (("" (NAME "m" "minimal_nz_norm(L)")
        (("" (EXPAND "minimal_nz_norm")
          (("" (LIFT-IF)
            (("" (SPLIT)
              (("1" (FLATTEN)
                (("1" (CASE "L(zero_q) AND Hurwitz_ring(zero_q)")
                  (("1" (FLATTEN)
                    (("1" (INST 1 "zero_q")
                      (("1" (SKEEP)
                        (("1" (INST 1 "zero_q")
                          (("1" (HIDE -2 -3 -5)
                            (("1" (TYPEPRED "x")
                              (("1" (REWRITE "zero_q_times")
                                (("1" (CASE "card(L) = 0")
                                  (("1" (LEMMA "empty_card[quat]")
                                    (("1" (INST?)
                                      (("1" (PROP)
                                        (("1" (HIDE-ALL-BUT (-1 -5))
                                          (("1" (GRIND) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (CASE "card(L) = 1")
                                    (("1" (LEMMA "card_one[quat]")
                                      (("1" (INST?)
                                        (("1" (PROP)
                                          (("1" (SKEEP)
                                            (("1" (EXPAND "singleton")
                                              (("1" (HIDE-ALL-BUT (-2 -4 -5 2))
                                                (("1" (REPLACES -1)
                                                  (("1" (BETA)
                                                    (("1" (ASSERT) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (HIDE -1 -2 3)
                                      (("2" (GRIND) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (HIDE-ALL-BUT 1)
                    (("2" (TYPEPRED "L")
                      (("2" (EXPAND "left_ideal?")
                        (("2" (EXPAND "subring?")
                          (("2" (FLATTEN)
                            (("2" (LEMMA "zero_is_member_R[quat,+,*,zero_q]")
                              (("2" (INST-CP -1 "L")
                                (("2" (INST -1 "Hurwitz_ring")
                                  (("2" (ASSERT) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (LEMMA "minimal_nz_norm_TCC1")
                (("2" (INST -1 "L")
                  (("2"
                    (CASE "nonempty?[posnat]
           ({t: posnat |
               EXISTS (l: (L)):
                 t =
                  red_norm
                      [rational,
                       restrict
                           [[numfield, numfield], [rational, rational],
                            numfield]
                           (+),
                       restrict
                           [[numfield, numfield], [rational, rational],
                            numfield]
                           (*),
                       0, 1, -1, -1]
                      (l)`x}) => EXISTS (u: (L)):
        FORALL (x: (L)): EXISTS (r: (Hurwitz_ring)): x = r * u")
                    (("1" (PROP) NIL NIL)
                     ("2" (FLATTEN)
                      (("2" (HIDE -2 2 3)
                        (("2"
                          (TYPEPRED
                           "min({t: posnat | EXISTS (l: (L)): t = red_norm(l)`x})")
                          (("1" (REPLACES -5)
                            (("1" (SKEEP)
                              (("1" (INST 1 "l_1")
                                (("1" (SKEEP)
                                  (("1" (LEMMA "Hurwitz_left_division")
                                    (("1" (INST -1 "x" "l_1")
                                      (("1" (SKEEP)
                                        (("1" (INST 1 "c")
                                          (("1" (CASE-REPLACE "d = zero_q")
                                            (("1" (HIDE-ALL-BUT (-2 1))
                                              (("1" (REWRITE "plus_zero_q") NIL
                                                NIL))
                                              NIL)
                                             ("2" (REPLACE -4 -2 RL HIDE)
                                              (("2"
                                                (LEMMA
                                                 "Hurwitz_red_norm_is_posint")
                                                (("2" (INST -1 "d")
                                                  (("2" (FLATTEN)
                                                    (("2"
                                                      (CASE
                                                          "red_norm(d)`x = 0 => d = zero_q")
                                                      (("1" (SPLIT)
                                                        (("1" (PROPAX) NIL NIL)
                                                         ("2"
                                                          (INST -6
                                                           "(red_norm(d))`x")
                                                          (("1" (SPLIT)
                                                            (("1"
                                                              (HIDE-ALL-BUT
                                                               (-1 -5))
                                                              (("1" (ASSERT)
                                                                NIL NIL))
                                                              NIL)
                                                             ("2" (INST 1 "d")
                                                              (("2"
                                                                (HIDE-ALL-BUT
                                                                 (-3 1))
                                                                (("2"
                                                                  (TYPEPRED
                                                                   "x")
                                                                  (("2"
                                                                    (TYPEPRED
                                                                     "l_1")
                                                                    (("2"
                                                                      (TYPEPRED
                                                                       "L")
                                                                      (("2"
                                                                        (EXPAND
                                                                         "left_ideal?")
                                                                        (("2"
                                                                          (FLATTEN)
                                                                          (("2"
                                                                            (EXPAND
                                                                             "left_swallow?")
                                                                            (("2"
                                                                              (INST
                                                                               -2
                                                                               "c"
                                                                               "l_1")
                                                                              (("2"
                                                                                (EXPAND
                                                                                 "member")
                                                                                (("2"
                                                                                  (HIDE
                                                                                   -3)
                                                                                  (("2"
                                                                                    (EXPAND
                                                                                     "subring?")
                                                                                    (("2"
                                                                                      (FLATTEN)
                                                                                      (("2"
                                                                                        (HIDE
                                                                                         -1)
                                                                                        (("2"
                                                                                          (EXPAND
                                                                                           "ring?")
                                                                                          (("2"
                                                                                            (FLATTEN)
                                                                                            (("2"
                                                                                              (HIDE
                                                                                               -2
                                                                                               -3
                                                                                               -4
                                                                                               -5)
                                                                                              (("2"
                                                                                                (EXPAND
                                                                                                 "abelian_group?")
                                                                                                (("2"
                                                                                                  (FLATTEN)
                                                                                                  (("2"
                                                                                                    (HIDE
                                                                                                     -2)
                                                                                                    (("2"
                                                                                                      (EXPAND
                                                                                                       "group?")
                                                                                                      (("2"
                                                                                                        (FLATTEN)
                                                                                                        (("2"
                                                                                                          (EXPAND
                                                                                                           "monoid?")
                                                                                                          (("2"
                                                                                                            (FLATTEN)
                                                                                                            (("2"
                                                                                                              (HIDE
                                                                                                               -2)
                                                                                                              (("2"
                                                                                                                (EXPAND
                                                                                                                 "monad?")
                                                                                                                (("2"
                                                                                                                  (FLATTEN)
                                                                                                                  (("2"
                                                                                                                    (HIDE
                                                                                                                     -2
                                                                                                                     -3)
                                                                                                                    (("2"
                                                                                                                      (EXPAND
                                                                                                                       "star_closed?")
                                                                                                                      (("2"
                                                                                                                        (EXPAND
                                                                                                                         "inv_exists?")
                                                                                                                        (("2"
                                                                                                                          (INST
                                                                                                                           -2
                                                                                                                           "c * l_1")
                                                                                                                          (("2"
                                                                                                                            (SKEEP)
                                                                                                                            (("2"
                                                                                                                              (CASE
                                                                                                                                  "y = inv(c * l_1)")
                                                                                                                              (("1"
                                                                                                                                (HIDE
                                                                                                                                 -3
                                                                                                                                 -4)
                                                                                                                                (("1"
                                                                                                                                  (TYPEPRED
                                                                                                                                   "y")
                                                                                                                                  (("1"
                                                                                                                                    (REPLACES
                                                                                                                                     -2)
                                                                                                                                    (("1"
                                                                                                                                      (INST
                                                                                                                                       -2
                                                                                                                                       "x"
                                                                                                                                       "inv(c * l_1)")
                                                                                                                                      (("1"
                                                                                                                                        (EXPAND
                                                                                                                                         "member")
                                                                                                                                        (("1"
                                                                                                                                          (CASE-REPLACE
                                                                                                                                           "x + inv(c * l_1) = d")
                                                                                                                                          (("1"
                                                                                                                                            (HIDE-ALL-BUT
                                                                                                                                             (-5
                                                                                                                                              1))
                                                                                                                                            (("1"
                                                                                                                                              (REPLACES
                                                                                                                                               -1)
                                                                                                                                              (("1"
                                                                                                                                                (REWRITE
                                                                                                                                                 "plus_commutative")
                                                                                                                                                (("1"
                                                                                                                                                  (REWRITE
                                                                                                                                                   "plus_associative")
                                                                                                                                                  (("1"
                                                                                                                                                    (REWRITE
                                                                                                                                                     "plus_zero_q")
                                                                                                                                                    NIL
                                                                                                                                                    NIL))
                                                                                                                                                  NIL))
                                                                                                                                                NIL))
                                                                                                                                              NIL))
                                                                                                                                            NIL))
                                                                                                                                          NIL))
                                                                                                                                        NIL))
                                                                                                                                      NIL))
                                                                                                                                    NIL))
                                                                                                                                  NIL))
                                                                                                                                NIL)
                                                                                                                               ("2"
                                                                                                                                (HIDE-ALL-BUT
                                                                                                                                 (-2
                                                                                                                                  1))
                                                                                                                                (("2"
                                                                                                                                  (CASE
                                                                                                                                      "inv(c * l_1)+ c * l_1 + y =inv(c * l_1) +zero_q")
                                                                                                                                  (("1"
                                                                                                                                    (HIDE
                                                                                                                                     -2)
                                                                                                                                    (("1"
                                                                                                                                      (REWRITE
                                                                                                                                       "negate_is_left_inv")
                                                                                                                                      (("1"
                                                                                                                                        (REWRITE
                                                                                                                                         "zero_q_plus")
                                                                                                                                        (("1"
                                                                                                                                          (REWRITE
                                                                                                                                           "plus_zero_q")
                                                                                                                                          NIL
                                                                                                                                          NIL))
                                                                                                                                        NIL))
                                                                                                                                      NIL))
                                                                                                                                    NIL)
                                                                                                                                   ("2"
                                                                                                                                    (HIDE
                                                                                                                                     2)
                                                                                                                                    (("2"
                                                                                                                                      (REPLACE
                                                                                                                                       -1
                                                                                                                                       1
                                                                                                                                       RL
                                                                                                                                       HIDE)
                                                                                                                                      (("2"
                                                                                                                                        (REWRITE
                                                                                                                                         "plus_associative")
                                                                                                                                        NIL
                                                                                                                                        NIL))
                                                                                                                                      NIL))
                                                                                                                                    NIL))
                                                                                                                                  NIL))
                                                                                                                                NIL))
                                                                                                                              NIL))
                                                                                                                            NIL))
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL)
                                                           ("2"
                                                            (HIDE-ALL-BUT
                                                             (-1 -2 1 2))
                                                            (("2" (GRIND) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL)
                                                       ("2" (HIDE-ALL-BUT 1)
                                                        (("2" (FLATTEN)
                                                          (("2"
                                                            (REWRITE
                                                             "Hurwitz_red_norm_charac")
                                                            (("2" (BETA)
                                                              (("2"
                                                                (LEMMA
                                                                 "four_squares_eq_zero")
                                                                (("2" (INST?)
                                                                  (("2" (SPLIT)
                                                                    (("1"
                                                                      (FLATTEN)
                                                                      (("1"
                                                                        (HIDE
                                                                         -5)
                                                                        (("1"
                                                                          (EXPAND
                                                                           "zero_q")
                                                                          (("1"
                                                                            (DECOMPOSE-EQUALITY)
                                                                            NIL
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL)
                                                                     ("2"
                                                                      (PROPAX)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (REPLACES -2)
                                        (("2" (HIDE-ALL-BUT (-1 1))
                                          (("2" (TYPEPRED "l_1")
                                            (("2" (TYPEPRED "L")
                                              (("2" (EXPAND "left_ideal?")
                                                (("2" (EXPAND "subring?")
                                                  (("2" (FLATTEN)
                                                    (("2"
                                                      (HIDE-ALL-BUT
                                                       (-1 -4 -5 1))
                                                      (("2" (GRIND) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("3" (HIDE-ALL-BUT 1)
                                        (("3" (TYPEPRED "x")
                                          (("3" (TYPEPRED "L")
                                            (("3" (EXPAND "left_ideal?")
                                              (("3" (EXPAND "subring?")
                                                (("3" (FLATTEN)
                                                  (("3"
                                                    (HIDE-ALL-BUT (-1 -4 1))
                                                    (("3" (GRIND) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (PROPAX) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|rat_plus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|Hurwitz_ring| NONEMPTY-TYPE-EQ-DECL NIL |quaternions_Hurwitz_rings| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|card| CONST-DECL "{n: nat | n = Card(S)}" |finite_sets| NIL)
    (|Card| CONST-DECL "nat" |finite_sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|empty_card| FORMULA-DECL NIL |finite_sets| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|card_one| FORMULA-DECL NIL |finite_sets| NIL)
    (|singleton| CONST-DECL "(singleton?)" |sets| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|zero_q_times| FORMULA-DECL NIL |quaternions| |algebra|)
    (|subring?| CONST-DECL "bool" |ring_def| |algebra|)
    (|zero_is_member_R| FORMULA-DECL NIL |ring_basic_properties| |algebra|)
    (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])"
     |sets_lemmas| NIL)
    (|min| CONST-DECL "{a | S(a) AND (FORALL x: S(x) IMPLIES a <= x)}"
     |min_nat| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|group?| CONST-DECL "bool" |group_def| |algebra|)
    (|monoid?| CONST-DECL "bool" |monoid_def| |algebra|)
    (|star_closed?| CONST-DECL "bool" |groupoid_def| |algebra|)
    (|inv| CONST-DECL "{y | x * y = one AND y * x = one}" |group| |algebra|)
    (|plus_associative| FORMULA-DECL NIL |ring| |algebra|)
    (|inv_right| FORMULA-DECL NIL |group| |algebra|)
    (|plus_commutative| FORMULA-DECL NIL |ring| |algebra|)
    (|negate_is_left_inv| FORMULA-DECL NIL |ring| |algebra|)
    (|zero_q_plus| FORMULA-DECL NIL |quaternions| |algebra|)
    (|inv_exists?| CONST-DECL "bool" |group_def| |algebra|)
    (|monad?| CONST-DECL "bool" |monad_def| |algebra|)
    (|abelian_group?| CONST-DECL "bool" |group_def| |algebra|)
    (|left_swallow?| CONST-DECL "bool" |ring_ideal_def| |algebra|)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|conjugate| CONST-DECL "quat" |quaternions_def| |algebra|)
    (|hurwitz_conjugate| APPLICATION-JUDGEMENT "Hurwitz_ring"
     |quaternions_Hurwitz_rings| NIL)
    (|hurwitz_prod| APPLICATION-JUDGEMENT "Hurwitz_ring"
     |quaternions_Hurwitz_rings| NIL)
    (|integer?| CONST-DECL "bool" |integers| NIL) NIL
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|Hurwitz_red_norm_charac| FORMULA-DECL NIL |quaternions_Hurwitz_rings|
     NIL)
    (|Hurwitz_red_norm_is_posint| FORMULA-DECL NIL |quaternions_Hurwitz_rings|
     NIL)
    (|plus_zero_q| FORMULA-DECL NIL |quaternions| |algebra|)
    (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|subset?| CONST-DECL "bool" |sets| NIL)
    (|Hurwitz_left_division| FORMULA-DECL NIL |quaternions_Hurwitz_rings| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (|red_norm| CONST-DECL "quat" |quaternions_def| |algebra|)
    (|minimal_nz_norm_TCC1| SUBTYPE-TCC NIL |quaternions_Hurwitz_rings| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|quat| TYPE-EQ-DECL NIL |quaternions_def| |algebra|)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (+ CONST-DECL "quat" |quaternions_def| |algebra|)
    (* CONST-DECL "[quat, quat -> quat]" |quaternions_def| |algebra|)
    (|zero_q| CONST-DECL "quat" |quaternions_def| |algebra|)
    (|ring?| CONST-DECL "bool" |ring_def| |algebra|)
    (|left_ideal?| CONST-DECL "bool" |ring_ideal_def| |algebra|)
    (|Hurwitz_ring| CONST-DECL "set[quat[rational,
         restrict[[numfield, numfield], [rational, rational], numfield](+),
         restrict[[numfield, numfield], [rational, rational], numfield](*),
         0, 1, -1, -1]]"
     |quaternions_Hurwitz_rings| NIL)
    (|Hurwitz_left_ideal| NONEMPTY-TYPE-EQ-DECL NIL |quaternions_Hurwitz_rings|
     NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|minimal_nz_norm| CONST-DECL "int" |quaternions_Hurwitz_rings| NIL))
   SHOSTAK))
 (|two_ideals_eq_four_sq| 0
  (|two_ideals_eq_four_sq-0| "" 3933736346
   (""
    (STOP-REWRITE "right_identity" "left_identity" "one_left" "one_right"
     "zero_plus" "plus_zero")
    (("" (SKEEP)
      (("" (LEMMA "div_cancel1")
        (("" (INST -1 "2" "p")
          (("" (REPLACES -1)
            (("" (REWRITE "inverse_add")
              ((""
                (NAME-REPLACE "p_quat" "(# x := p, y := 0, z := 0, t := 0 #)")
                (("" (LEMMA "left_product_generator")
                  (("" (INST -1 "L")
                    (("" (SKEEP)
                      (("" (TYPEPRED "u")
                        (("" (CASE "Hurwitz_ring(u)")
                          (("1" (CASE "NOT V(u)")
                            (("1" (INST -3 "p_quat")
                              (("1" (SKEEP)
                                (("1"
                                  (CASE
                                      "FORALL(q: (Hurwitz_ring)): red_norm(q)`x = 0 => q = zero_q")
                                  (("1" (CASE "NOT red_norm(r)`x = 0")
                                    (("1" (CASE "NOT red_norm(u)`x = 0")
                                      (("1" (HIDE -1)
                                        (("1"
                                          (CASE
                                              "red_norm(p_quat)`x = red_norm(r * u)`x")
                                          (("1" (REWRITE "red_norm_prod")
                                            (("1"
                                              (CASE
                                                  "FORALL(a, b: (Hurwitz_ring)): (red_norm(a) * red_norm(b))`x = red_norm(a)`x * red_norm(b)`x")
                                              (("1" (INST?)
                                                (("1" (REPLACES -1)
                                                  (("1"
                                                    (LEMMA
                                                     "Hurwitz_red_norm_charac")
                                                    (("1" (INST -1 "p_quat")
                                                      (("1"
                                                        (EXPAND "p_quat"
                                                                (-1 -2))
                                                        (("1" (REPLACES -1)
                                                          (("1" (BETA)
                                                            (("1"
                                                              (CASE
                                                                  "red_norm(u)`x > 1")
                                                              (("1"
                                                                (CASE
                                                                    "red_norm(r)`x > 1")
                                                                (("1"
                                                                  (HIDE-ALL-BUT
                                                                   (-1 -2 -3 -4
                                                                    4))
                                                                  (("1"
                                                                    (LEMMA
                                                                     "prime_sq_decomp_eq_prime_prod")
                                                                    (("1"
                                                                      (LEMMA
                                                                       "Hurwitz_red_norm_is_posint")
                                                                      (("1"
                                                                        (INST-CP
                                                                         -1
                                                                         "u")
                                                                        (("1"
                                                                          (INST
                                                                           -1
                                                                           "r")
                                                                          (("1"
                                                                            (FLATTEN)
                                                                            (("1"
                                                                              (HIDE
                                                                               -2
                                                                               -4)
                                                                              (("1"
                                                                                (INST
                                                                                 -3
                                                                                 "(red_norm(r))`x"
                                                                                 "(red_norm(u))`x"
                                                                                 "p")
                                                                                (("1"
                                                                                  (SPLIT)
                                                                                  (("1"
                                                                                    (FLATTEN)
                                                                                    (("1"
                                                                                      (HIDE-ALL-BUT
                                                                                       (-1
                                                                                        1))
                                                                                      (("1"
                                                                                        (TYPEPRED
                                                                                         "r")
                                                                                        (("1"
                                                                                          (EXPAND
                                                                                           "Hurwitz_ring")
                                                                                          (("1"
                                                                                            (SKEEP)
                                                                                            (("1"
                                                                                              (REWRITE
                                                                                               "red_norm_charac")
                                                                                              (("1"
                                                                                                (BETA)
                                                                                                (("1"
                                                                                                  (REPLACES
                                                                                                   -)
                                                                                                  (("1"
                                                                                                    (CASE-REPLACE
                                                                                                     "inv(-1) = 1")
                                                                                                    (("1"
                                                                                                      (HIDE
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (CASE
                                                                                                            "(2*y+x)*(2*y+x) + (2*z+x)*(2*z+x) + (2*t+x)*(2*t+x) + x*x = 4*p")
                                                                                                        (("1"
                                                                                                          (HIDE
                                                                                                           -2)
                                                                                                          (("1"
                                                                                                            (LEMMA
                                                                                                             "Euler_trick")
                                                                                                            (("1"
                                                                                                              (INST
                                                                                                               -1
                                                                                                               "2 * y + x"
                                                                                                               "2 * z + x"
                                                                                                               "2 * t + x"
                                                                                                               "x"
                                                                                                               "2*p")
                                                                                                              (("1"
                                                                                                                (SPLIT)
                                                                                                                (("1"
                                                                                                                  (HIDE
                                                                                                                   -2)
                                                                                                                  (("1"
                                                                                                                    (SKEEP)
                                                                                                                    (("1"
                                                                                                                      (LEMMA
                                                                                                                       "Euler_trick")
                                                                                                                      (("1"
                                                                                                                        (INST?)
                                                                                                                        (("1"
                                                                                                                          (SPLIT)
                                                                                                                          (("1"
                                                                                                                            (PROPAX)
                                                                                                                            NIL
                                                                                                                            NIL)
                                                                                                                           ("2"
                                                                                                                            (PROPAX)
                                                                                                                            NIL
                                                                                                                            NIL))
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL)
                                                                                                                 ("2"
                                                                                                                  (HIDE
                                                                                                                   2)
                                                                                                                  (("2"
                                                                                                                    (ASSERT)
                                                                                                                    NIL
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL)
                                                                                                         ("2"
                                                                                                          (HIDE
                                                                                                           2)
                                                                                                          (("2"
                                                                                                            (REPLACE
                                                                                                             -1
                                                                                                             1
                                                                                                             RL
                                                                                                             HIDE)
                                                                                                            (("2"
                                                                                                              (ASSERT)
                                                                                                              NIL
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL)
                                                                                                     ("2"
                                                                                                      (HIDE-ALL-BUT
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (GRIND)
                                                                                                        NIL
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL)
                                                                                   ("2"
                                                                                    (PROPAX)
                                                                                    NIL
                                                                                    NIL))
                                                                                  NIL)
                                                                                 ("2"
                                                                                  (HIDE-ALL-BUT
                                                                                   (-2
                                                                                    -4
                                                                                    1))
                                                                                  (("2"
                                                                                    (GRIND)
                                                                                    NIL
                                                                                    NIL))
                                                                                  NIL)
                                                                                 ("3"
                                                                                  (HIDE-ALL-BUT
                                                                                   (-1
                                                                                    -3
                                                                                    1))
                                                                                  (("3"
                                                                                    (GRIND)
                                                                                    NIL
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL)
                                                                 ("2"
                                                                  (CASE
                                                                      "red_norm(r)`x = 1")
                                                                  (("1"
                                                                    (HIDE-ALL-BUT
                                                                     (-1 -4 -6
                                                                      -8 4))
                                                                    (("1"
                                                                      (LEMMA
                                                                       "Hurwitz_prod_inv_exists")
                                                                      (("1"
                                                                        (INST
                                                                         -1
                                                                         "r")
                                                                        (("1"
                                                                          (FLATTEN)
                                                                          (("1"
                                                                            (SPLIT)
                                                                            (("1"
                                                                              (SKEEP)
                                                                              (("1"
                                                                                (HIDE
                                                                                 -1
                                                                                 -3)
                                                                                (("1"
                                                                                  (CASE
                                                                                      "r_1 * p_quat = r_1 * r * u")
                                                                                  (("1"
                                                                                    (REPLACES
                                                                                     -2)
                                                                                    (("1"
                                                                                      (CASE-REPLACE
                                                                                       "one_q * u = u")
                                                                                      (("1"
                                                                                        (TYPEPRED
                                                                                         "V")
                                                                                        (("1"
                                                                                          (EXPAND
                                                                                           "ideal?")
                                                                                          (("1"
                                                                                            (EXPAND
                                                                                             "left_ideal?")
                                                                                            (("1"
                                                                                              (EXPAND
                                                                                               "left_swallow?")
                                                                                              (("1"
                                                                                                (FLATTEN)
                                                                                                (("1"
                                                                                                  (HIDE-ALL-BUT
                                                                                                   (-2
                                                                                                    -5
                                                                                                    -7
                                                                                                    -9
                                                                                                    1))
                                                                                                  (("1"
                                                                                                    (INST?)
                                                                                                    (("1"
                                                                                                      (REPLACES
                                                                                                       -2)
                                                                                                      (("1"
                                                                                                        (EXPAND
                                                                                                         "member")
                                                                                                        (("1"
                                                                                                          (PROPAX)
                                                                                                          NIL
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL)
                                                                                       ("2"
                                                                                        (HIDE-ALL-BUT
                                                                                         1)
                                                                                        (("2"
                                                                                          (EXPAND
                                                                                           "one_q")
                                                                                          (("2"
                                                                                            (REWRITE
                                                                                             "q_prod_charac")
                                                                                            (("2"
                                                                                              (DECOMPOSE-EQUALITY)
                                                                                              NIL
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL)
                                                                                   ("2"
                                                                                    (REPLACES
                                                                                     -4)
                                                                                    (("2"
                                                                                      (HIDE-ALL-BUT
                                                                                       (-3
                                                                                        1))
                                                                                      (("2"
                                                                                        (LEMMA
                                                                                         "Hurwitz_ring_is_ring")
                                                                                        (("2"
                                                                                          (EXPAND
                                                                                           "ring?")
                                                                                          (("2"
                                                                                            (FLATTEN)
                                                                                            (("2"
                                                                                              (HIDE-ALL-BUT
                                                                                               (-3
                                                                                                -6
                                                                                                1))
                                                                                              (("2"
                                                                                                (EXPAND
                                                                                                 "restrict")
                                                                                                (("2"
                                                                                                  (EXPAND
                                                                                                   "associative?")
                                                                                                  (("2"
                                                                                                    (INST?)
                                                                                                    (("2"
                                                                                                      (REPLACES
                                                                                                       -1)
                                                                                                      NIL
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL)
                                                                             ("2"
                                                                              (PROPAX)
                                                                              NIL
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL)
                                                                   ("2"
                                                                    (HIDE-ALL-BUT
                                                                     (1 2 4))
                                                                    (("2"
                                                                      (LEMMA
                                                                       "Hurwitz_red_norm_is_posint")
                                                                      (("2"
                                                                        (INST?)
                                                                        (("2"
                                                                          (FLATTEN)
                                                                          (("2"
                                                                            (ASSERT)
                                                                            (("2"
                                                                              (NAME-REPLACE
                                                                               "r_norm"
                                                                               "red_norm(r)`x")
                                                                              (("2"
                                                                                (EXPAND
                                                                                 ">=")
                                                                                (("2"
                                                                                  (EXPAND
                                                                                   "<=")
                                                                                  (("2"
                                                                                    (GRIND)
                                                                                    NIL
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL)
                                                               ("2"
                                                                (CASE
                                                                    "red_norm(u)`x = 1")
                                                                (("1"
                                                                  (HIDE-ALL-BUT
                                                                   (-1 -3 -4
                                                                    -5))
                                                                  (("1"
                                                                    (CASE
                                                                        "L = Hurwitz_ring")
                                                                    (("1"
                                                                      (TYPEPRED
                                                                       "L")
                                                                      (("1"
                                                                        (ASSERT)
                                                                        NIL
                                                                        NIL))
                                                                      NIL)
                                                                     ("2"
                                                                      (DECOMPOSE-EQUALITY)
                                                                      (("2"
                                                                        (IFF)
                                                                        (("2"
                                                                          (SPLIT)
                                                                          (("1"
                                                                            (FLATTEN)
                                                                            (("1"
                                                                              (TYPEPRED
                                                                               "L")
                                                                              (("1"
                                                                                (EXPAND
                                                                                 "left_ideal?")
                                                                                (("1"
                                                                                  (EXPAND
                                                                                   "subring?")
                                                                                  (("1"
                                                                                    (FLATTEN)
                                                                                    (("1"
                                                                                      (HIDE-ALL-BUT
                                                                                       (-1
                                                                                        -4
                                                                                        2))
                                                                                      (("1"
                                                                                        (GRIND)
                                                                                        NIL
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL)
                                                                           ("2"
                                                                            (LEMMA
                                                                             "Hurwitz_prod_inv_exists")
                                                                            (("2"
                                                                              (INST?)
                                                                              (("2"
                                                                                (FLATTEN)
                                                                                (("2"
                                                                                  (SPLIT)
                                                                                  (("1"
                                                                                    (SKEEP)
                                                                                    (("1"
                                                                                      (HIDE
                                                                                       -1
                                                                                       -3
                                                                                       -5
                                                                                       -8)
                                                                                      (("1"
                                                                                        (TYPEPRED
                                                                                         "L")
                                                                                        (("1"
                                                                                          (EXPAND
                                                                                           "left_ideal?")
                                                                                          (("1"
                                                                                            (FLATTEN)
                                                                                            (("1"
                                                                                              (EXPAND
                                                                                               "left_swallow?")
                                                                                              (("1"
                                                                                                (EXPAND
                                                                                                 "member")
                                                                                                (("1"
                                                                                                  (COPY
                                                                                                   -2)
                                                                                                  (("1"
                                                                                                    (INST
                                                                                                     -1
                                                                                                     "x!1"
                                                                                                     "one_q")
                                                                                                    (("1"
                                                                                                      (REWRITE
                                                                                                       "times_one_q")
                                                                                                      NIL
                                                                                                      NIL)
                                                                                                     ("2"
                                                                                                      (INST
                                                                                                       -2
                                                                                                       "r!1"
                                                                                                       "u")
                                                                                                      (("2"
                                                                                                        (REPLACES
                                                                                                         -3)
                                                                                                        NIL
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL)
                                                                                   ("2"
                                                                                    (PROPAX)
                                                                                    NIL
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL)
                                                                 ("2"
                                                                  (HIDE-ALL-BUT
                                                                   (-2 1 2 3))
                                                                  (("2"
                                                                    (LEMMA
                                                                     "Hurwitz_red_norm_is_posint")
                                                                    (("2"
                                                                      (INST?)
                                                                      (("2"
                                                                        (FLATTEN)
                                                                        (("2"
                                                                          (NAME-REPLACE
                                                                           "u_norm"
                                                                           "red_norm(u)`x")
                                                                          (("2"
                                                                            (HIDE
                                                                             -3)
                                                                            (("2"
                                                                              (EXPAND
                                                                               ">=")
                                                                              (("2"
                                                                                (EXPAND
                                                                                 "<=")
                                                                                (("2"
                                                                                  (GRIND)
                                                                                  NIL
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL)
                                                       ("2"
                                                        (HIDE-ALL-BUT (-6 1))
                                                        (("2" (TYPEPRED "V")
                                                          (("2"
                                                            (EXPAND "ideal?")
                                                            (("2"
                                                              (EXPAND
                                                               "left_ideal?")
                                                              (("2"
                                                                (EXPAND
                                                                 "subring?")
                                                                (("2" (FLATTEN)
                                                                  (("2"
                                                                    (HIDE -2 -3
                                                                     -4)
                                                                    (("2"
                                                                      (GRIND)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (HIDE-ALL-BUT 1)
                                                (("2" (SKEEP)
                                                  (("2"
                                                    (REWRITE*
                                                     "Hurwitz_red_norm_charac")
                                                    (("2" (BETA)
                                                      (("2"
                                                        (REWRITE
                                                         "q_prod_charac")
                                                        (("2" (BETA)
                                                          (("2" (GRIND) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("2" (REPLACES -3) NIL NIL))
                                          NIL))
                                        NIL)
                                       ("2" (HIDE-ALL-BUT (-1 -2 -3 -5))
                                        (("2" (INST?)
                                          (("2" (PROP)
                                            (("2" (REPLACES -1)
                                              (("2" (HIDE-ALL-BUT -3)
                                                (("2" (REWRITE "times_zero_q")
                                                  (("2" (EXPAND "p_quat")
                                                    (("2" (EXPAND "zero_q")
                                                      (("2" (TYPEPRED "p")
                                                        (("2" (EXPAND "prime?")
                                                          (("2" (FLATTEN)
                                                            (("2" (ASSERT) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (HIDE-ALL-BUT (-1 -2 -5))
                                      (("2" (INST?)
                                        (("2" (PROP)
                                          (("2" (REPLACES -1)
                                            (("2" (REWRITE "zero_q_times")
                                              (("2" (EXPAND "p_quat")
                                                (("2" (HIDE -1)
                                                  (("2" (EXPAND "zero_q")
                                                    (("2" (TYPEPRED "p")
                                                      (("2" (EXPAND "prime?")
                                                        (("2" (FLATTEN)
                                                          (("2" (ASSERT) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (HIDE-ALL-BUT 1)
                                    (("2" (SKEEP)
                                      (("2" (REWRITE "Hurwitz_red_norm_charac")
                                        (("2" (BETA)
                                          (("2" (LEMMA "four_squares_eq_zero")
                                            (("2" (INST?)
                                              (("2" (SPLIT)
                                                (("1" (FLATTEN)
                                                  (("1" (HIDE -5)
                                                    (("1" (EXPAND "zero_q")
                                                      (("1"
                                                        (DECOMPOSE-EQUALITY)
                                                        NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (PROPAX) NIL NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (HIDE-ALL-BUT (-3 -4 1))
                                (("2" (GRIND) NIL NIL)) NIL))
                              NIL)
                             ("2" (HIDE -6 1)
                              (("2" (CASE "V = L")
                                (("1" (EXPAND "strict_subset?")
                                  (("1" (FLATTEN) NIL NIL)) NIL)
                                 ("2" (DECOMPOSE-EQUALITY)
                                  (("2" (IFF)
                                    (("2" (SPLIT)
                                      (("1" (GRIND) NIL NIL)
                                       ("2" (FLATTEN)
                                        (("2" (INST -5 "x!1")
                                          (("2" (SKEEP)
                                            (("2" (TYPEPRED "V")
                                              (("2" (EXPAND "ideal?")
                                                (("2" (EXPAND "left_ideal?")
                                                  (("2" (FLATTEN)
                                                    (("2"
                                                      (HIDE-ALL-BUT
                                                       (-2 -5 -8 1))
                                                      (("2"
                                                        (EXPAND
                                                         "left_swallow?")
                                                        (("2" (INST?)
                                                          (("2" (REPLACES -3)
                                                            (("2"
                                                              (EXPAND "member")
                                                              (("2" (PROPAX)
                                                                NIL NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (HIDE-ALL-BUT (-1 1))
                            (("2" (TYPEPRED "L")
                              (("2" (EXPAND "left_ideal?")
                                (("2" (EXPAND "subring?")
                                  (("2" (FLATTEN)
                                    (("2" (HIDE -2 -3 -4)
                                      (("2" (GRIND) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|inverse_add| FORMULA-DECL NIL |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|left_product_generator| FORMULA-DECL NIL |quaternions_Hurwitz_rings| NIL)
    (|x!1| SKOLEM-CONST-DECL "quat[rational,
     restrict[[numfield, numfield], [rational, rational], numfield](+),
     restrict[[numfield, numfield], [rational, rational], numfield](*), 0,
     1, -1, -1]"
     |quaternions_Hurwitz_rings| NIL)
    (|p_quat| SKOLEM-CONST-DECL
     "[# t: even_uint8, x: (prime?), y: even_uint8, z: even_uint8 #]"
     |quaternions_Hurwitz_rings| NIL)
    (L SKOLEM-CONST-DECL "{L: Hurwitz_left_ideal | L /= Hurwitz_ring}"
     |quaternions_Hurwitz_rings| NIL)
    (|red_norm| CONST-DECL "quat" |quaternions_def| |algebra|)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|rat_plus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|zero_q_times| FORMULA-DECL NIL |quaternions| |algebra|)
    (|Hurwitz_prod_inv_exists| FORMULA-DECL NIL |quaternions_Hurwitz_rings|
     NIL)
    (|one_q| CONST-DECL "quat" |quaternions_def| |algebra|)
    (|left_swallow?| CONST-DECL "bool" |ring_ideal_def| |algebra|)
    (|member| CONST-DECL "bool" |sets| NIL)
    (V SKOLEM-CONST-DECL "Hurwitz_ideal" |quaternions_Hurwitz_rings| NIL)
    (|zero_times| FORMULA-DECL NIL |ring| |algebra|)
    (|inv_one| FORMULA-DECL NIL |group| |algebra|)
    (|times_i8_u8| APPLICATION-JUDGEMENT "int16" |integertypes| NIL)
    (|q_prod_charac| FORMULA-DECL NIL |quaternions| |algebra|)
    (|associative?| CONST-DECL "bool" |operator_defs| NIL)
    (|Hurwitz_ring_is_ring| FORMULA-DECL NIL |quaternions_Hurwitz_rings| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|Hurwitz_red_norm_is_posint| FORMULA-DECL NIL |quaternions_Hurwitz_rings|
     NIL)
    (|hurwitz_prod| APPLICATION-JUDGEMENT "Hurwitz_ring"
     |quaternions_Hurwitz_rings| NIL)
    (|hurwitz_conjugate| APPLICATION-JUDGEMENT "Hurwitz_ring"
     |quaternions_Hurwitz_rings| NIL)
    (|integer?| CONST-DECL "bool" |integers| NIL)
    (|conjugate| CONST-DECL "quat" |quaternions_def| |algebra|)
    (|red_norm_charac| FORMULA-DECL NIL |quaternions| |algebra|)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|odd_times_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|negate_nz_T_is_nz_T| APPLICATION-JUDGEMENT "nz_T[rational,
     restrict[[numfield, numfield], [rational, rational], numfield](+),
     restrict[[numfield, numfield], [rational, rational], numfield](*), 0]"
     |quaternions_Hurwitz_rings| NIL)
    (|one_times| FORMULA-DECL NIL |ring_with_one| |algebra|)
    (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|Euler_trick| FORMULA-DECL NIL |four_int_squares_aux| NIL)
    (|inv| CONST-DECL "{y | x * y = one AND y * x = one}" |group| |algebra|)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|r| SKOLEM-CONST-DECL "Hurwitz_ring" |quaternions_Hurwitz_rings| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|prime_sq_decomp_eq_prime_prod| FORMULA-DECL NIL |number_util| |ints|)
    (|subring?| CONST-DECL "bool" |ring_def| |algebra|)
    (|subset?| CONST-DECL "bool" |sets| NIL)
    (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])"
     |sets_lemmas| NIL)
    (|times_one_q| FORMULA-DECL NIL |quaternions_def| |algebra|)
    (|x!1| SKOLEM-CONST-DECL "quat[rational,
     restrict[[numfield, numfield], [rational, rational], numfield](+),
     restrict[[numfield, numfield], [rational, rational], numfield](*), 0,
     1, -1, -1]"
     |quaternions_Hurwitz_rings| NIL)
    (|Hurwitz_red_norm_charac| FORMULA-DECL NIL |quaternions_Hurwitz_rings|
     NIL)
    (|u| SKOLEM-CONST-DECL "(L)" |quaternions_Hurwitz_rings| NIL)
    (|times_u8_u8| APPLICATION-JUDGEMENT "uint16" |integertypes| NIL)
    (|times_i16_u16| APPLICATION-JUDGEMENT "int32" |integertypes| NIL)
    (|red_norm_prod| FORMULA-DECL NIL |quaternions| |algebra|)
    (|times_zero_q| FORMULA-DECL NIL |quaternions| |algebra|)
    (|Hurwitz_ring| NONEMPTY-TYPE-EQ-DECL NIL |quaternions_Hurwitz_rings| NIL)
    (|four_squares_eq_zero| FORMULA-DECL NIL |four_int_squares_aux| NIL)
    (|strict_subset_is_strict_order| NAME-JUDGEMENT "(strict_order?[set[T]])"
     |sets_lemmas| NIL)
    (|strict_subset?| CONST-DECL "bool" |sets| NIL)
    (|ideal?| CONST-DECL "bool" |ring_ideal_def| |algebra|)
    (|Hurwitz_ideal| NONEMPTY-TYPE-EQ-DECL NIL |quaternions_Hurwitz_rings| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|Hurwitz_left_ideal| NONEMPTY-TYPE-EQ-DECL NIL |quaternions_Hurwitz_rings|
     NIL)
    (|Hurwitz_ring| CONST-DECL "set[quat[rational,
         restrict[[numfield, numfield], [rational, rational], numfield](+),
         restrict[[numfield, numfield], [rational, rational], numfield](*),
         0, 1, -1, -1]]"
     |quaternions_Hurwitz_rings| NIL)
    (|left_ideal?| CONST-DECL "bool" |ring_ideal_def| |algebra|)
    (|ring?| CONST-DECL "bool" |ring_def| |algebra|)
    (|zero_q| CONST-DECL "quat" |quaternions_def| |algebra|)
    (* CONST-DECL "[quat, quat -> quat]" |quaternions_def| |algebra|)
    (+ CONST-DECL "quat" |quaternions_def| |algebra|)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|quat| TYPE-EQ-DECL NIL |quaternions_def| |algebra|)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|even_uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|even?| CONST-DECL "bool" |integers| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|div_cancel1| FORMULA-DECL NIL |real_props| NIL))
   SHOSTAK)
  (|two_ideals_eq_four_sq-1| NIL 3926527890
   (""
    (STOP-REWRITE "right_identity" "left_identity" "one_left" "one_right"
     "zero_plus" "plus_zero")
    (("" (SKEEP)
      (("" (LEMMA "div_cancel1")
        (("" (INST -1 "2" "p")
          (("" (REPLACES -1)
            (("" (REWRITE "inverse_add")
              ((""
                (NAME-REPLACE "p_quat" "(# x := p, y := 0, z := 0, t := 0 #)")
                (("" (LEMMA "left_product_generator")
                  (("" (INST -1 "L")
                    (("" (SKEEP)
                      (("" (TYPEPRED "u")
                        (("" (CASE "Hurwitz_ring(u)")
                          (("1" (CASE "NOT V(u)")
                            (("1" (INST -3 "p_quat")
                              (("1" (SKEEP)
                                (("1"
                                  (CASE
                                      "FORALL(q: (Hurwitz_ring)): red_norm(q)`x = 0 => q = zero_q")
                                  (("1" (CASE "NOT red_norm(r)`x = 0")
                                    (("1" (CASE "NOT red_norm(u)`x = 0")
                                      (("1" (HIDE -1)
                                        (("1"
                                          (CASE
                                              "red_norm(p_quat)`x = red_norm(r * u)`x")
                                          (("1" (REWRITE "red_norm_prod")
                                            (("1"
                                              (CASE
                                                  "FORALL(a, b: (Hurwitz_ring)): (red_norm(a) * red_norm(b))`x = red_norm(a)`x * red_norm(b)`x")
                                              (("1" (INST?)
                                                (("1" (REPLACES -1)
                                                  (("1"
                                                    (LEMMA
                                                     "Hurwitz_red_norm_charac")
                                                    (("1" (INST -1 "p_quat")
                                                      (("1"
                                                        (EXPAND "p_quat"
                                                                (-1 -2))
                                                        (("1" (REPLACES -1)
                                                          (("1" (BETA)
                                                            (("1"
                                                              (CASE
                                                                  "red_norm(u)`x > 1")
                                                              (("1"
                                                                (CASE
                                                                    "red_norm(r)`x > 1")
                                                                (("1"
                                                                  (HIDE-ALL-BUT
                                                                   (-1 -2 -3 -4
                                                                    4))
                                                                  (("1"
                                                                    (LEMMA
                                                                     "prime_sq_decomp_eq_prime_prod")
                                                                    (("1"
                                                                      (LEMMA
                                                                       "Hurwitz_red_norm_is_posint")
                                                                      (("1"
                                                                        (INST-CP
                                                                         -1
                                                                         "u")
                                                                        (("1"
                                                                          (INST
                                                                           -1
                                                                           "r")
                                                                          (("1"
                                                                            (FLATTEN)
                                                                            (("1"
                                                                              (HIDE
                                                                               -2
                                                                               -4)
                                                                              (("1"
                                                                                (INST
                                                                                 -3
                                                                                 "(red_norm(r))`x"
                                                                                 "(red_norm(u))`x"
                                                                                 "p")
                                                                                (("1"
                                                                                  (SPLIT)
                                                                                  (("1"
                                                                                    (FLATTEN)
                                                                                    (("1"
                                                                                      (HIDE-ALL-BUT
                                                                                       (-1
                                                                                        1))
                                                                                      (("1"
                                                                                        (TYPEPRED
                                                                                         "r")
                                                                                        (("1"
                                                                                          (EXPAND
                                                                                           "Hurwitz_ring")
                                                                                          (("1"
                                                                                            (SKEEP)
                                                                                            (("1"
                                                                                              (REWRITE
                                                                                               "red_norm_charac")
                                                                                              (("1"
                                                                                                (BETA)
                                                                                                (("1"
                                                                                                  (REPLACES
                                                                                                   -)
                                                                                                  (("1"
                                                                                                    (CASE-REPLACE
                                                                                                     "inv(-1) = 1")
                                                                                                    (("1"
                                                                                                      (HIDE
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (CASE
                                                                                                            "(2*y+x)*(2*y+x) + (2*z+x)*(2*z+x) + (2*t+x)*(2*t+x) + x*x = 4*p")
                                                                                                        (("1"
                                                                                                          (HIDE
                                                                                                           -2)
                                                                                                          (("1"
                                                                                                            (LEMMA
                                                                                                             "Euler_trick")
                                                                                                            (("1"
                                                                                                              (INST
                                                                                                               -1
                                                                                                               "2 * y + x"
                                                                                                               "2 * z + x"
                                                                                                               "2 * t + x"
                                                                                                               "x"
                                                                                                               "2*p")
                                                                                                              (("1"
                                                                                                                (SPLIT)
                                                                                                                (("1"
                                                                                                                  (HIDE
                                                                                                                   -2)
                                                                                                                  (("1"
                                                                                                                    (SKEEP)
                                                                                                                    (("1"
                                                                                                                      (LEMMA
                                                                                                                       "Euler_trick")
                                                                                                                      (("1"
                                                                                                                        (INST?)
                                                                                                                        (("1"
                                                                                                                          (SPLIT)
                                                                                                                          (("1"
                                                                                                                            (PROPAX)
                                                                                                                            NIL
                                                                                                                            NIL)
                                                                                                                           ("2"
                                                                                                                            (PROPAX)
                                                                                                                            NIL
                                                                                                                            NIL))
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL)
                                                                                                                 ("2"
                                                                                                                  (HIDE
                                                                                                                   2)
                                                                                                                  (("2"
                                                                                                                    (ASSERT)
                                                                                                                    NIL
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL)
                                                                                                         ("2"
                                                                                                          (HIDE
                                                                                                           2)
                                                                                                          (("2"
                                                                                                            (REPLACE
                                                                                                             -1
                                                                                                             1
                                                                                                             RL
                                                                                                             HIDE)
                                                                                                            (("2"
                                                                                                              (ASSERT)
                                                                                                              NIL
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL)
                                                                                                     ("2"
                                                                                                      (HIDE-ALL-BUT
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (GRIND)
                                                                                                        NIL
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL)
                                                                                   ("2"
                                                                                    (PROPAX)
                                                                                    NIL
                                                                                    NIL))
                                                                                  NIL)
                                                                                 ("2"
                                                                                  (HIDE-ALL-BUT
                                                                                   (-2
                                                                                    -4
                                                                                    1))
                                                                                  (("2"
                                                                                    (GRIND)
                                                                                    NIL
                                                                                    NIL))
                                                                                  NIL)
                                                                                 ("3"
                                                                                  (HIDE-ALL-BUT
                                                                                   (-1
                                                                                    -3
                                                                                    1))
                                                                                  (("3"
                                                                                    (GRIND)
                                                                                    NIL
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL)
                                                                 ("2"
                                                                  (CASE
                                                                      "red_norm(r)`x = 1")
                                                                  (("1"
                                                                    (HIDE-ALL-BUT
                                                                     (-1 -4 -6
                                                                      -8 4))
                                                                    (("1"
                                                                      (LEMMA
                                                                       "Hurwitz_prod_inv_exists")
                                                                      (("1"
                                                                        (INST
                                                                         -1
                                                                         "r")
                                                                        (("1"
                                                                          (FLATTEN)
                                                                          (("1"
                                                                            (SPLIT)
                                                                            (("1"
                                                                              (SKEEP)
                                                                              (("1"
                                                                                (HIDE
                                                                                 -1
                                                                                 -3)
                                                                                (("1"
                                                                                  (CASE
                                                                                      "r_1 * p_quat = r_1 * r * u")
                                                                                  (("1"
                                                                                    (REPLACES
                                                                                     -2)
                                                                                    (("1"
                                                                                      (CASE-REPLACE
                                                                                       "one_q * u = u")
                                                                                      (("1"
                                                                                        (TYPEPRED
                                                                                         "V")
                                                                                        (("1"
                                                                                          (EXPAND
                                                                                           "ideal?")
                                                                                          (("1"
                                                                                            (EXPAND
                                                                                             "left_ideal?")
                                                                                            (("1"
                                                                                              (EXPAND
                                                                                               "left_swallow?")
                                                                                              (("1"
                                                                                                (FLATTEN)
                                                                                                (("1"
                                                                                                  (HIDE-ALL-BUT
                                                                                                   (-2
                                                                                                    -5
                                                                                                    -7
                                                                                                    -9
                                                                                                    1))
                                                                                                  (("1"
                                                                                                    (INST?)
                                                                                                    (("1"
                                                                                                      (REPLACES
                                                                                                       -2)
                                                                                                      (("1"
                                                                                                        (EXPAND
                                                                                                         "member")
                                                                                                        (("1"
                                                                                                          (PROPAX)
                                                                                                          NIL
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL)
                                                                                       ("2"
                                                                                        (HIDE-ALL-BUT
                                                                                         1)
                                                                                        (("2"
                                                                                          (EXPAND
                                                                                           "one_q")
                                                                                          (("2"
                                                                                            (REWRITE
                                                                                             "q_prod_charac")
                                                                                            (("2"
                                                                                              (DECOMPOSE-EQUALITY)
                                                                                              NIL
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL)
                                                                                   ("2"
                                                                                    (REPLACES
                                                                                     -4)
                                                                                    (("2"
                                                                                      (HIDE-ALL-BUT
                                                                                       (-3
                                                                                        1))
                                                                                      (("2"
                                                                                        (LEMMA
                                                                                         "Hurwitz_ring_is_ring")
                                                                                        (("2"
                                                                                          (EXPAND
                                                                                           "ring?")
                                                                                          (("2"
                                                                                            (FLATTEN)
                                                                                            (("2"
                                                                                              (HIDE-ALL-BUT
                                                                                               (-3
                                                                                                -6
                                                                                                1))
                                                                                              (("2"
                                                                                                (EXPAND
                                                                                                 "restrict")
                                                                                                (("2"
                                                                                                  (EXPAND
                                                                                                   "associative?")
                                                                                                  (("2"
                                                                                                    (INST?)
                                                                                                    (("2"
                                                                                                      (REPLACES
                                                                                                       -1)
                                                                                                      NIL
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL)
                                                                             ("2"
                                                                              (PROPAX)
                                                                              NIL
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL)
                                                                   ("2"
                                                                    (HIDE-ALL-BUT
                                                                     (1 2 4))
                                                                    (("2"
                                                                      (LEMMA
                                                                       "Hurwitz_red_norm_is_posint")
                                                                      (("2"
                                                                        (INST?)
                                                                        (("2"
                                                                          (FLATTEN)
                                                                          (("2"
                                                                            (ASSERT)
                                                                            (("2"
                                                                              (NAME-REPLACE
                                                                               "r_norm"
                                                                               "red_norm(r)`x")
                                                                              (("2"
                                                                                (EXPAND
                                                                                 ">=")
                                                                                (("2"
                                                                                  (EXPAND
                                                                                   "<=")
                                                                                  (("2"
                                                                                    (GRIND)
                                                                                    NIL
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL)
                                                               ("2"
                                                                (CASE
                                                                    "red_norm(u)`x = 1")
                                                                (("1"
                                                                  (HIDE-ALL-BUT
                                                                   (-1 -3 -4
                                                                    -5))
                                                                  (("1"
                                                                    (CASE
                                                                        "L = Hurwitz_ring")
                                                                    (("1"
                                                                      (TYPEPRED
                                                                       "L")
                                                                      (("1"
                                                                        (ASSERT)
                                                                        NIL
                                                                        NIL))
                                                                      NIL)
                                                                     ("2"
                                                                      (DECOMPOSE-EQUALITY)
                                                                      (("2"
                                                                        (IFF)
                                                                        (("2"
                                                                          (SPLIT)
                                                                          (("1"
                                                                            (FLATTEN)
                                                                            (("1"
                                                                              (TYPEPRED
                                                                               "L")
                                                                              (("1"
                                                                                (EXPAND
                                                                                 "left_ideal?")
                                                                                (("1"
                                                                                  (EXPAND
                                                                                   "subring?")
                                                                                  (("1"
                                                                                    (FLATTEN)
                                                                                    (("1"
                                                                                      (HIDE-ALL-BUT
                                                                                       (-1
                                                                                        -4
                                                                                        2))
                                                                                      (("1"
                                                                                        (GRIND)
                                                                                        NIL
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL)
                                                                           ("2"
                                                                            (LEMMA
                                                                             "Hurwitz_prod_inv_exists")
                                                                            (("2"
                                                                              (INST?)
                                                                              (("2"
                                                                                (FLATTEN)
                                                                                (("2"
                                                                                  (SPLIT)
                                                                                  (("1"
                                                                                    (SKEEP)
                                                                                    (("1"
                                                                                      (HIDE
                                                                                       -1
                                                                                       -3
                                                                                       -5
                                                                                       -8)
                                                                                      (("1"
                                                                                        (TYPEPRED
                                                                                         "L")
                                                                                        (("1"
                                                                                          (EXPAND
                                                                                           "left_ideal?")
                                                                                          (("1"
                                                                                            (FLATTEN)
                                                                                            (("1"
                                                                                              (EXPAND
                                                                                               "left_swallow?")
                                                                                              (("1"
                                                                                                (EXPAND
                                                                                                 "member")
                                                                                                (("1"
                                                                                                  (COPY
                                                                                                   -2)
                                                                                                  (("1"
                                                                                                    (INST
                                                                                                     -1
                                                                                                     "x!1"
                                                                                                     "one_q")
                                                                                                    (("1"
                                                                                                      (REWRITE
                                                                                                       "times_one_q")
                                                                                                      NIL
                                                                                                      NIL)
                                                                                                     ("2"
                                                                                                      (INST
                                                                                                       -2
                                                                                                       "r!1"
                                                                                                       "u")
                                                                                                      (("2"
                                                                                                        (REPLACES
                                                                                                         -3)
                                                                                                        NIL
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL)
                                                                                   ("2"
                                                                                    (PROPAX)
                                                                                    NIL
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL)
                                                                 ("2"
                                                                  (HIDE-ALL-BUT
                                                                   (-2 1 2 3))
                                                                  (("2"
                                                                    (LEMMA
                                                                     "Hurwitz_red_norm_is_posint")
                                                                    (("2"
                                                                      (INST?)
                                                                      (("2"
                                                                        (FLATTEN)
                                                                        (("2"
                                                                          (NAME-REPLACE
                                                                           "u_norm"
                                                                           "red_norm(u)`x")
                                                                          (("2"
                                                                            (HIDE
                                                                             -3)
                                                                            (("2"
                                                                              (EXPAND
                                                                               ">=")
                                                                              (("2"
                                                                                (EXPAND
                                                                                 "<=")
                                                                                (("2"
                                                                                  (GRIND)
                                                                                  NIL
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL)
                                                       ("2"
                                                        (HIDE-ALL-BUT (-6 1))
                                                        (("2" (TYPEPRED "V")
                                                          (("2"
                                                            (EXPAND "ideal?")
                                                            (("2"
                                                              (EXPAND
                                                               "left_ideal?")
                                                              (("2"
                                                                (EXPAND
                                                                 "subring?")
                                                                (("2" (FLATTEN)
                                                                  (("2"
                                                                    (HIDE -2 -3
                                                                     -4)
                                                                    (("2"
                                                                      (GRIND)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (HIDE-ALL-BUT 1)
                                                (("2" (SKEEP)
                                                  (("2"
                                                    (REWRITE*
                                                     "Hurwitz_red_norm_charac")
                                                    (("2" (BETA)
                                                      (("2"
                                                        (REWRITE
                                                         "q_prod_charac")
                                                        (("2" (BETA)
                                                          (("2" (GRIND) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("2" (REPLACES -3) NIL NIL))
                                          NIL))
                                        NIL)
                                       ("2" (HIDE-ALL-BUT (-1 -2 -3 -5))
                                        (("2" (INST?)
                                          (("2" (PROP)
                                            (("2" (REPLACES -1)
                                              (("2" (HIDE-ALL-BUT -3)
                                                (("2" (REWRITE "times_zero_q")
                                                  (("2" (EXPAND "p_quat")
                                                    (("2" (EXPAND "zero_q")
                                                      (("2" (TYPEPRED "p")
                                                        (("2" (EXPAND "prime?")
                                                          (("2" (FLATTEN)
                                                            (("2" (ASSERT) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (HIDE-ALL-BUT (-1 -2 -5))
                                      (("2" (INST?)
                                        (("2" (PROP)
                                          (("2" (REPLACES -1)
                                            (("2" (REWRITE "zero_q_times")
                                              (("2" (EXPAND "p_quat")
                                                (("2" (HIDE -1)
                                                  (("2" (EXPAND "zero_q")
                                                    (("2" (TYPEPRED "p")
                                                      (("2" (EXPAND "prime?")
                                                        (("2" (FLATTEN)
                                                          (("2" (ASSERT) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (HIDE-ALL-BUT 1)
                                    (("2" (SKEEP)
                                      (("2" (REWRITE "Hurwitz_red_norm_charac")
                                        (("2" (BETA)
                                          (("2" (LEMMA "four_squares_eq_zero")
                                            (("2" (INST?)
                                              (("2" (SPLIT)
                                                (("1" (FLATTEN)
                                                  (("1" (HIDE -5)
                                                    (("1" (EXPAND "zero_q")
                                                      (("1"
                                                        (DECOMPOSE-EQUALITY)
                                                        NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (PROPAX) NIL NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (HIDE-ALL-BUT (-3 -4 1))
                                (("2" (GRIND) NIL NIL)) NIL))
                              NIL)
                             ("2" (HIDE -6 1)
                              (("2" (CASE "V = L")
                                (("1" (EXPAND "strict_subset?")
                                  (("1" (FLATTEN) NIL NIL)) NIL)
                                 ("2" (DECOMPOSE-EQUALITY)
                                  (("2" (IFF)
                                    (("2" (SPLIT)
                                      (("1" (GRIND) NIL NIL)
                                       ("2" (FLATTEN)
                                        (("2" (INST -5 "x!1")
                                          (("2" (SKEEP)
                                            (("2" (TYPEPRED "V")
                                              (("2" (EXPAND "ideal?")
                                                (("2" (EXPAND "left_ideal?")
                                                  (("2" (FLATTEN)
                                                    (("2"
                                                      (HIDE-ALL-BUT
                                                       (-2 -5 -8 1))
                                                      (("2"
                                                        (EXPAND
                                                         "left_swallow?")
                                                        (("2" (INST?)
                                                          (("2" (REPLACES -3)
                                                            (("2"
                                                              (EXPAND "member")
                                                              (("2" (PROPAX)
                                                                NIL NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (HIDE-ALL-BUT (-1 1))
                            (("2" (TYPEPRED "L")
                              (("2" (EXPAND "left_ideal?")
                                (("2" (EXPAND "subring?")
                                  (("2" (FLATTEN)
                                    (("2" (HIDE -2 -3 -4)
                                      (("2" (GRIND) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|inverse_add| FORMULA-DECL NIL |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|left_product_generator| FORMULA-DECL NIL |quaternions_Hurwitz_rings| NIL)
    (|red_norm| CONST-DECL "quat" |quaternions_def| |algebra|)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|rat_plus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|zero_q_times| FORMULA-DECL NIL |quaternions| |algebra|)
    (|Hurwitz_prod_inv_exists| FORMULA-DECL NIL |quaternions_Hurwitz_rings|
     NIL)
    (|one_q| CONST-DECL "quat" |quaternions_def| |algebra|)
    (|left_swallow?| CONST-DECL "bool" |ring_ideal_def| |algebra|)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|zero_times| FORMULA-DECL NIL |ring| |algebra|)
    (|inv_one| FORMULA-DECL NIL |group| |algebra|)
    (|times_i8_u8| APPLICATION-JUDGEMENT "int16" |integertypes| NIL)
    (|q_prod_charac| FORMULA-DECL NIL |quaternions| |algebra|)
    (|associative?| CONST-DECL "bool" |operator_defs| NIL)
    (|Hurwitz_ring_is_ring| FORMULA-DECL NIL |quaternions_Hurwitz_rings| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|Hurwitz_red_norm_is_posint| FORMULA-DECL NIL |quaternions_Hurwitz_rings|
     NIL)
    (|hurwitz_prod| APPLICATION-JUDGEMENT "Hurwitz_ring"
     |quaternions_Hurwitz_rings| NIL)
    (|hurwitz_conjugate| APPLICATION-JUDGEMENT "Hurwitz_ring"
     |quaternions_Hurwitz_rings| NIL)
    (|integer?| CONST-DECL "bool" |integers| NIL)
    (|conjugate| CONST-DECL "quat" |quaternions_def| |algebra|)
    (|red_norm_charac| FORMULA-DECL NIL |quaternions| |algebra|)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|odd_times_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|one_times| FORMULA-DECL NIL |ring_with_one| |algebra|)
    (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    NIL
    (|inv| CONST-DECL "{y | x * y = one AND y * x = one}" |group| |algebra|)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    NIL (|subring?| CONST-DECL "bool" |ring_def| |algebra|)
    (|subset?| CONST-DECL "bool" |sets| NIL)
    (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])"
     |sets_lemmas| NIL)
    (|times_one_q| FORMULA-DECL NIL |quaternions_def| |algebra|)
    (|Hurwitz_red_norm_charac| FORMULA-DECL NIL |quaternions_Hurwitz_rings|
     NIL)
    (|times_u8_u8| APPLICATION-JUDGEMENT "uint16" |integertypes| NIL)
    (|times_i16_u16| APPLICATION-JUDGEMENT "int32" |integertypes| NIL)
    (|red_norm_prod| FORMULA-DECL NIL |quaternions| |algebra|)
    (|times_zero_q| FORMULA-DECL NIL |quaternions| |algebra|)
    (|Hurwitz_ring| NONEMPTY-TYPE-EQ-DECL NIL |quaternions_Hurwitz_rings| NIL)
    NIL
    (|strict_subset_is_strict_order| NAME-JUDGEMENT "(strict_order?[set[T]])"
     |sets_lemmas| NIL)
    (|strict_subset?| CONST-DECL "bool" |sets| NIL)
    (|ideal?| CONST-DECL "bool" |ring_ideal_def| |algebra|)
    (|Hurwitz_ideal| NONEMPTY-TYPE-EQ-DECL NIL |quaternions_Hurwitz_rings| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|Hurwitz_left_ideal| NONEMPTY-TYPE-EQ-DECL NIL |quaternions_Hurwitz_rings|
     NIL)
    (|Hurwitz_ring| CONST-DECL "set[quat[rational,
         restrict[[numfield, numfield], [rational, rational], numfield](+),
         restrict[[numfield, numfield], [rational, rational], numfield](*),
         0, 1, -1, -1]]"
     |quaternions_Hurwitz_rings| NIL)
    (|left_ideal?| CONST-DECL "bool" |ring_ideal_def| |algebra|)
    (|ring?| CONST-DECL "bool" |ring_def| |algebra|)
    (|zero_q| CONST-DECL "quat" |quaternions_def| |algebra|)
    (* CONST-DECL "[quat, quat -> quat]" |quaternions_def| |algebra|)
    (+ CONST-DECL "quat" |quaternions_def| |algebra|)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|quat| TYPE-EQ-DECL NIL |quaternions_def| |algebra|)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|even_uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|even?| CONST-DECL "bool" |integers| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|div_cancel1| FORMULA-DECL NIL |real_props| NIL))
   SHOSTAK)))

