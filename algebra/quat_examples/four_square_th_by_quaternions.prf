(|four_square_th_by_quaternions|
 (|four_squares_primes| 0
  (|four_squares_primes-1| NIL 3934433785
   (""
    (STOP-REWRITE "right_identity" "left_identity" "one_left" "one_right"
     "zero_plus" "plus_zero")
    (("" (SKEEP)
      (("" (LEMMA "quot_zp_is_not_div_ring")
        (("" (INST -1 "p")
          (("" (PROP)
            (("1" (LEMMA "maximal_ideal_charac2")
              (("1" (INST?)
                (("1" (SPLIT)
                  (("1" (PROPAX) NIL NIL) ("2" (ASSERT) NIL NIL)
                   ("3" (HIDE 2)
                    (("3" (EXPAND "maximal_left_ideal?")
                      (("3" (PROP)
                        (("1" (TYPEPRED "prime_mult_Hurwitz(p)")
                          (("1" (EXPAND "ideal?") (("1" (PROP) NIL NIL)) NIL))
                          NIL)
                         ("2" (CASE "p = 2")
                          (("1" (REPLACES -1)
                            (("1" (INST 1 "1" "1" "0" "0")
                              (("1" (ASSERT) NIL NIL)) NIL))
                            NIL)
                           ("2" (DECOMPOSE-EQUALITY)
                            (("2" (INST -1 "one_q")
                              (("2" (IFF)
                                (("2" (FLATTEN)
                                  (("2" (HIDE -1)
                                    (("2" (SPLIT)
                                      (("1" (EXPAND "prime_mult_Hurwitz")
                                        (("1" (EXPAND "extend")
                                          (("1" (PROP)
                                            (("1" (EXPAND "one_q")
                                              (("1" (SKEEP)
                                                (("1"
                                                  (LEMMA "both_sides_times1")
                                                  (("1"
                                                    (INST -1 "2" "1" "p*x / 2")
                                                    (("1" (FLATTEN)
                                                      (("1" (HIDE -1)
                                                        (("1" (SPLIT)
                                                          (("1" (SIMPLIFY -1)
                                                            (("1"
                                                              (REWRITE
                                                               "real_props.div_cancel1")
                                                              (("1"
                                                                (CASE
                                                                    "divides(p, 2)")
                                                                (("1"
                                                                  (LEMMA
                                                                   "prime_2")
                                                                  (("1"
                                                                    (EXPAND
                                                                     "prime?")
                                                                    (("1"
                                                                      (INST -1
                                                                       "p")
                                                                      (("1"
                                                                        (PROP)
                                                                        (("1"
                                                                          (TYPEPRED
                                                                           "p")
                                                                          (("1"
                                                                            (EXPAND
                                                                             "prime?")
                                                                            (("1"
                                                                              (FLATTEN)
                                                                              (("1"
                                                                                (ASSERT)
                                                                                NIL
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL)
                                                                 ("2"
                                                                  (EXPAND
                                                                   "divides")
                                                                  (("2"
                                                                    (INST 1
                                                                     "x")
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL)
                                                           ("2" (PROPAX) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (EXPAND "one_q")
                                        (("2" (EXPAND "Hurwitz_ring")
                                          (("2" (INST 1 "2" "-1" "-1" "-1")
                                            (("2" (ASSERT) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("3" (SKEEP)
                          (("3" (TYPEPRED "N")
                            (("3" (LEMMA "two_ideals_eq_four_sq")
                              (("3" (INST -1 "prime_mult_Hurwitz(p)" "N" "p")
                                (("1" (SPLIT)
                                  (("1" (PROPAX) NIL NIL)
                                   ("2" (EXPAND "strict_subset?")
                                    (("2" (PROP) (("2" (ASSERT) NIL NIL)) NIL))
                                    NIL)
                                   ("3" (HIDE-ALL-BUT 1)
                                    (("3" (EXPAND "prime_mult_Hurwitz")
                                      (("3" (EXPAND "extend")
                                        (("3" (INST 1 "2" "-1" "-1" "-1")
                                          (("3" (ASSERT) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (EXPAND "/=") (("2" (PROPAX) NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (LEMMA "Hurwitz_ring_is_ring_w_one")
                  (("2" (PROPAX) NIL NIL)) NIL))
                NIL))
              NIL)
             ("2" (INST 1 "1" "1" "0" "0") (("2" (ASSERT) NIL NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (|maximal_ideal_charac2| FORMULA-DECL NIL |ring_w_one_maximal_extra| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|quat| TYPE-EQ-DECL NIL |quaternions_def| |algebra|)
    (+ CONST-DECL "quat" |quaternions_def| |algebra|)
    (* CONST-DECL "[quat, quat -> quat]" |quaternions_def| |algebra|)
    (|zero_q| CONST-DECL "quat" |quaternions_def| |algebra|)
    (|one_q| CONST-DECL "quat" |quaternions_def| |algebra|)
    (|Hurwitz_ring_is_ring_w_one| FORMULA-DECL NIL |quaternions_Hurwitz_rings|
     NIL)
    (|maximal_left_ideal?| CONST-DECL "bool" |ring_w_one_maximal_extra| NIL)
    (|two_ideals_eq_four_sq| FORMULA-DECL NIL |quaternions_Hurwitz_rings| NIL)
    (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])"
     |sets_lemmas| NIL)
    (|strict_subset?| CONST-DECL "bool" |sets| NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|Hurwitz_left_ideal| NONEMPTY-TYPE-EQ-DECL NIL |quaternions_Hurwitz_rings|
     NIL)
    (N SKOLEM-CONST-DECL "left_ideal
    [quat[rational,
          restrict[[numfield, numfield], [rational, rational], numfield]
              (+),
          restrict[[numfield, numfield], [rational, rational], numfield]
              (*),
          0, 1, -1, -1],
     +, *, zero_q](Hurwitz_ring)"
     |four_square_th_by_quaternions| NIL)
    (|left_ideal?| CONST-DECL "bool" |ring_ideal_def| |algebra|)
    (|left_ideal| TYPE-EQ-DECL NIL |ring_ideal_def| |algebra|)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|plus_u32_i32| APPLICATION-JUDGEMENT "int64" |integertypes| NIL)
    (|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (|odd_plus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|plus_u16_u16| APPLICATION-JUDGEMENT "uint32" |integertypes| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|odd_times_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|times_u8_u8| APPLICATION-JUDGEMENT "uint16" |integertypes| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|extend| CONST-DECL "R" |extend| NIL)
    (|both_sides_times1| FORMULA-DECL NIL |real_props| NIL)
    (|div_cancel1| FORMULA-DECL NIL |real_props| NIL)
    (|prime_2| FORMULA-DECL NIL |primes| |ints|)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|divides| CONST-DECL "bool" |divides| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|negate_nz_T_is_nz_T| APPLICATION-JUDGEMENT "nz_T[rational,
     restrict[[numfield, numfield], [rational, rational], numfield](+),
     restrict[[numfield, numfield], [rational, rational], numfield](*), 0]"
     |quaternions_Hurwitz_rings| NIL)
    (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|rat_plus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|ring_with_one| NONEMPTY-TYPE-EQ-DECL NIL |ring_with_one| |algebra|)
    (|prime_mult_Hurwitz| CONST-DECL "Hurwitz_ideal"
     |quaternions_Hurwitz_rings| NIL)
    (|Hurwitz_ideal| NONEMPTY-TYPE-EQ-DECL NIL |quaternions_Hurwitz_rings| NIL)
    (|ideal?| CONST-DECL "bool" |ring_ideal_def| |algebra|)
    (|ring?| CONST-DECL "bool" |ring_def| |algebra|)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|ring_with_one?| CONST-DECL "bool" |ring_with_one_def| |algebra|)
    (|Hurwitz_ring| CONST-DECL "set[quat[rational,
         restrict[[numfield, numfield], [rational, rational], numfield](+),
         restrict[[numfield, numfield], [rational, rational], numfield](*),
         0, 1, -1, -1]]"
     |quaternions_Hurwitz_rings| NIL)
    (|quot_zp_is_not_div_ring| FORMULA-DECL NIL
     |quaternions_Hurwitz_isomorphism| NIL))
   SHOSTAK))
 (|four_squares_nat| 0
  (|four_squares_nat-1| NIL 3935107108
   (""
    (STOP-REWRITE "right_identity" "left_identity" "one_left" "one_right"
     "zero_plus" "plus_zero")
    (("" (MEASURE-INDUCT+ "n" "n")
      (("" (CASE "prime?(x!1)")
        (("1" (HIDE -2)
          (("1" (LEMMA "four_squares_primes") (("1" (INST?) NIL NIL)) NIL))
          NIL)
         ("2" (EXPAND "prime?")
          (("2" (SPLIT)
            (("1" (SKEEP)
              (("1" (EXPAND "divides")
                (("1" (SKEEP)
                  (("1" (INST-CP -2 "j")
                    (("1" (INST -2 "x")
                      (("1" (PROP)
                        (("1" (LEMMA "Lagrange_identity")
                          (("1" (SKEEP)
                            (("1" (SKEEP)
                              (("1"
                                (INST -1 "x!2" "y" "z" "t" "x_1" "y!1" "z!1"
                                 "t!1")
                                (("1" (REPLACES -2)
                                  (("1" (REPLACES -2)
                                    (("1" (REPLACES -2)
                                      (("1"
                                        (INST 3
                                         "x!2 * x_1 - y * y!1 - z * z!1 - t * t!1"
                                         "x!2 * y!1 + y * x_1 + z * t!1 - t * z!1"
                                         "x!2 * z!1 - y * t!1 + z * x_1 + t * y!1"
                                         "x!2 * t!1 + y * z!1 - z * y!1 + t * x_1")
                                        (("1" (REPLACE -1 3 LR HIDE)
                                          (("1" (PROPAX) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (HIDE -1)
                          (("2" (CASE "divides(j, x!1)")
                            (("1" (LEMMA "divisor_smaller")
                              (("1" (INST?)
                                (("1" (SPLIT)
                                  (("1" (REPLACES -1)
                                    (("1" (INST 4 "0" "0" "0" "0")
                                      (("1" (ASSERT) NIL NIL)) NIL))
                                    NIL)
                                   ("2" (ASSERT) NIL NIL)
                                   ("3" (PROPAX) NIL NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (EXPAND "divides")
                              (("2" (INST 1 "x") NIL NIL)) NIL))
                            NIL))
                          NIL)
                         ("3" (HIDE -1)
                          (("3" (CASE "divides(x, x!1)")
                            (("1" (LEMMA "divisor_smaller")
                              (("1" (INST?)
                                (("1" (SPLIT)
                                  (("1" (INST 4 "0" "0" "0" "0")
                                    (("1" (ASSERT) NIL NIL)) NIL)
                                   ("2" (EXPAND "<=")
                                    (("2" (SPLIT)
                                      (("1" (PROPAX) NIL NIL)
                                       ("2" (REPLACES -1)
                                        (("2" (TYPEPRED "x!1")
                                          (("2" (LEMMA " both_sides_times1")
                                            (("2" (INST -1 "x!1" "1" "j")
                                              (("1" (FLATTEN)
                                                (("1" (HIDE -2)
                                                  (("1" (SPLIT)
                                                    (("1" (ASSERT) NIL NIL)
                                                     ("2" (ASSERT) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (EXPAND "/=")
                                                (("2" (REPLACES -1)
                                                  (("2"
                                                    (INST 4 "0" "0" "0" "0")
                                                    (("2" (ASSERT) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("3" (PROPAX) NIL NIL))
                                  NIL)
                                 ("2" (CASE-REPLACE "x = x!1")
                                  (("1" (TYPEPRED "x!1")
                                    (("1" (PROPAX) NIL NIL)) NIL)
                                   ("2" (LEMMA "divisor_smaller")
                                    (("2" (INST?)
                                      (("1" (SPLIT)
                                        (("1" (ASSERT) NIL NIL)
                                         ("2" (ASSERT) NIL NIL)
                                         ("3" (PROPAX) NIL NIL))
                                        NIL)
                                       ("2" (ASSERT) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (EXPAND "divides")
                              (("2" (INST 1 "j") (("2" (ASSERT) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("4" (CASE "divides(j, x!1)")
                          (("1" (LEMMA "divisor_smaller")
                            (("1" (INST?)
                              (("1" (SPLIT)
                                (("1" (REPLACES -1)
                                  (("1" (INST 5 "0" "0" "0" "0")
                                    (("1" (ASSERT) NIL NIL)) NIL))
                                  NIL)
                                 ("2" (ASSERT) NIL NIL) ("3" (PROPAX) NIL NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (EXPAND "divides") (("2" (INST 1 "x") NIL NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (HIDE-ALL-BUT (-1 1))
                        (("2" (TYPEPRED "x!1")
                          (("2" (TYPEPRED "j")
                            (("2" (CASE "x < 0")
                              (("1" (LEMMA "neg_times_lt")
                                (("1" (INST -1 "j" "x")
                                  (("1" (FLATTEN)
                                    (("1" (HIDE -1)
                                      (("1" (SIMPLIFY)
                                        (("1" (SPLIT)
                                          (("1" (REPLACES -5)
                                            (("1" (ASSERT) NIL NIL)) NIL)
                                           ("2" (PROPAX) NIL NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (ASSERT) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (CASE-REPLACE "x!1 = 0")
              (("1" (INST 2 "0" "0" "0" "0") (("1" (ASSERT) NIL NIL)) NIL)
               ("2" (CASE-REPLACE "x!1 = 1")
                (("1" (INST 3 "1" "0" "0" "0") (("1" (ASSERT) NIL NIL)) NIL)
                 ("2" (TYPEPRED "x!1") (("2" (ASSERT) NIL NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|well_founded?| CONST-DECL "bool" |orders| NIL)
    (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|odd_times_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    NIL (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|one_times| FORMULA-DECL NIL |ring_with_one| |algebra|)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (|both_sides_times1| FORMULA-DECL NIL |real_props| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|divisor_smaller| FORMULA-DECL NIL |divides| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) NIL
    (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (|plus_u32_i32| APPLICATION-JUDGEMENT "int64" |integertypes| NIL)
    (|plus_u16_u16| APPLICATION-JUDGEMENT "uint32" |integertypes| NIL)
    (|times_u8_u8| APPLICATION-JUDGEMENT "uint16" |integertypes| NIL)
    (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|Lagrange_identity| FORMULA-DECL NIL |four_int_squares| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|neg_times_lt| FORMULA-DECL NIL |real_props| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) NIL NIL
    (|four_squares_primes| FORMULA-DECL NIL |four_square_th_by_quaternions|
     NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|))
   SHOSTAK)))

