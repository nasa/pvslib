(|four_int_squares_aux|
 (|Lagrange_identity| 0
  (|Lagrange_identity-1| NIL 3953123740 ("" (GRIND) NIL NIL)
   ((|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL))
   SHOSTAK))
 (|four_squares_eq_zero| 0
  (|four_squares_eq_zero-1| NIL 3953123996
   ("" (SKEEP)
    (("" (LEMMA "abs_square")
      (("" (INST-CP -1 "x")
        (("" (INST-CP -1 "y")
          (("" (INST-CP -1 "z")
            (("" (INST -1 "t")
              (("" (REPLACE -1 -5 RL HIDE)
                (("" (REPLACE -1 -4 RL HIDE)
                  (("" (REPLACE -1 -3 RL HIDE)
                    (("" (REPLACE -1 -2 RL HIDE)
                      ((""
                        (CASE
                            "FORALL(a: real | a >= 0, b: real | b >= 0): a+b = 0 => a = 0 AND b = 0")
                        (("1"
                          (NAME-REPLACE "r1"
                           "abs(x * x) + abs(y * y) + abs(z * z)")
                          (("1" (INST-CP -1 "r1" "abs(t * t)")
                            (("1" (SPLIT)
                              (("1" (FLATTEN)
                                (("1" (HIDE -4)
                                  (("1" (EXPAND "r1")
                                    (("1"
                                      (NAME-REPLACE "r2"
                                       "abs(x * x) + abs(y * y)")
                                      (("1" (INST-CP -3 "r2" "abs(z * z)")
                                        (("1" (SPLIT)
                                          (("1" (FLATTEN)
                                            (("1" (HIDE -3)
                                              (("1" (EXPAND "r2")
                                                (("1"
                                                  (INST -4 "abs(x * x)"
                                                   "abs(y * y)")
                                                  (("1" (SPLIT)
                                                    (("1" (FLATTEN)
                                                      (("1" (HIDE -3)
                                                        (("1"
                                                          (REWRITE*
                                                           "abs_square")
                                                          (("1"
                                                            (LEMMA
                                                             "zero_times3")
                                                            (("1"
                                                              (INST-CP -1 "x"
                                                               "x")
                                                              (("1"
                                                                (INST-CP -1 "y"
                                                                 "y")
                                                                (("1"
                                                                  (INST-CP -1
                                                                   "z" "z")
                                                                  (("1"
                                                                    (INST -1
                                                                     "t" "t")
                                                                    (("1"
                                                                      (PROP)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL)
                                                     ("2" (PROPAX) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("2" (PROPAX) NIL NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (PROPAX) NIL NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (HIDE-ALL-BUT 1)
                          (("2" (SKEEP)
                            (("2" (TYPEPRED "b")
                              (("2" (CASE "a > 0")
                                (("1" (LEMMA "gt_plus_gt2")
                                  (("1" (INST -1 "0" "a" "0" "b")
                                    (("1" (SPLIT)
                                      (("1" (ASSERT) NIL NIL)
                                       ("2" (PROPAX) NIL NIL)
                                       ("3" (PROPAX) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (CASE "b > 0")
                                  (("1" (TYPEPRED "a")
                                    (("1" (LEMMA "gt_plus_gt1")
                                      (("1" (INST -1 "0" "a" "0" "b")
                                        (("1" (SPLIT)
                                          (("1" (ASSERT) NIL NIL)
                                           ("2" (PROPAX) NIL NIL)
                                           ("3" (PROPAX) NIL NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (SPLIT)
                                    (("1" (TYPEPRED "a")
                                      (("1" (ASSERT) NIL NIL)) NIL)
                                     ("2" (ASSERT) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|abs_square| FORMULA-DECL NIL |real_props| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|gt_plus_gt1| FORMULA-DECL NIL |real_props| NIL)
    (|gt_plus_gt2| FORMULA-DECL NIL |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|plus_u8_u8| APPLICATION-JUDGEMENT "uint16" |integertypes| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|zero_times3| FORMULA-DECL NIL |real_props| NIL)
    (|r2| SKOLEM-CONST-DECL "nnreal" |four_int_squares_aux| NIL)
    (|r1| SKOLEM-CONST-DECL "nnreal" |four_int_squares_aux| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types|
     NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   SHOSTAK))
 (|four_squares_prod_closed| 0
  (|four_squares_prod_closed-1| NIL 3953124052
   ("" (SKEEP)
    (("" (TYPEPRED "k")
      (("" (TYPEPRED "n")
        (("" (EXPAND "four_int_squares")
          (("" (SKOLEM -1 ("a0" "a1" "a2" "a3"))
            (("" (SKOLEM -2 ("b0" "b1" "b2" "b3"))
              (("" (LEMMA "Lagrange_identity")
                (("" (INST -1 "a0" "a1" "a2" "a3" "b0" "b1" "b2" "b3")
                  (("" (REPLACE -2 -1 RL HIDE)
                    (("" (REPLACE -2 -1 RL HIDE)
                      ((""
                        (INST 1 "a0 * b0 - a1 * b1 - a2 * b2 - a3 * b3"
                         "a0 * b1 + a1 * b0 + a2 * b3 - a3 * b2"
                         "a0 * b2 - a1 * b3 + a2 * b0 + a3 * b1"
                         "a0 * b3 + a1 * b2 - a2 * b1 + a3 * b0")
                        NIL NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|four_int_squares| CONST-DECL "set[int]" |four_int_squares_aux| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|Lagrange_identity| FORMULA-DECL NIL |four_int_squares_aux| NIL))
   SHOSTAK))
 (|even_sum_even_sq_sum| 0
  (|even_sum_even_sq_sum-1| NIL 3953124085
   ("" (SKEEP)
    (("" (SPLIT)
      (("1" (FLATTEN)
        (("1" (EXPAND "even?")
          (("1" (SKEEP)
            (("1" (INST 1 "j * (2 * j) - x * y")
              (("1" (REPLACE -1 1 RL)
                (("1" (SIMPLIFY)
                  (("1" (LEMMA "associative_mult")
                    (("1" (COPY -1)
                      (("1" (INST -1 "2" "j" "x")
                        (("1" (INST -2 "2" "j" "y")
                          (("1" (REPLACES -)
                            (("1" (REPLACE -1 1 RL HIDE)
                              (("1" (GRIND) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (FLATTEN)
        (("2" (EXPAND "even?")
          (("2" (CASE "rem(2)(x) = rem(2)(y)")
            (("1" (CASE "rem(2)(x+y) = 0")
              (("1" (HIDE -2 -3)
                (("1" (LEMMA "same_remainder")
                  (("1" (INST -1 "2" "x+y" "0")
                    (("1" (FLATTEN)
                      (("1" (HIDE -2)
                        (("1" (SPLIT)
                          (("1" (EXPAND "divides") (("1" (PROPAX) NIL NIL))
                            NIL)
                           ("2" (REWRITE "rem_zero") NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (HIDE -2 2)
                (("2" (LEMMA "rem_sum1")
                  (("2" (INST -1 "2" "x" "y")
                    (("2" (REPLACES -2)
                      (("2" (REWRITE "rem_sum1")
                        (("2" (REPLACE -1 1 RL HIDE)
                          (("2" (LEMMA "same_remainder")
                            (("2" (INST -1 "2" "2 * y" "0")
                              (("2" (FLATTEN)
                                (("2" (HIDE -1)
                                  (("2" (SPLIT)
                                    (("1" (REPLACES -1)
                                      (("1" (REWRITE "rem_zero") NIL NIL)) NIL)
                                     ("2" (HIDE 2)
                                      (("2" (EXPAND "divides")
                                        (("2" (INST 1 "y") NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (SKEEP)
              (("2" (HIDE 2)
                (("2" (LEMMA "both_sides_minus1")
                  (("2" (INST -1 "x * x + y * y" "2 * j" "2 * y * y")
                    (("2" (FLATTEN)
                      (("2" (HIDE -1)
                        (("2" (SPLIT)
                          (("1" (SIMPLIFY)
                            (("1" (LEMMA "distributive")
                              (("1" (INST -1 "2" "j" "- y * y")
                                (("1" (REPLACE -1 -2 RL HIDE)
                                  (("1" (HIDE -2)
                                    (("1"
                                      (CASE
                                          "FORALL (a: int): rem(2)(a) = rem(2)(a*a)")
                                      (("1" (COPY -1)
                                        (("1" (INST -2 "y")
                                          (("1" (INST -1 "x")
                                            (("1" (REPLACES -)
                                              (("1" (REWRITE "same_remainder")
                                                (("1" (EXPAND "divides")
                                                  (("1" (INST 1 "j + -y * y")
                                                    NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (HIDE -1 2)
                                        (("2" (SKEEP)
                                          (("2" (LEMMA "euclid_int")
                                            (("2" (INST -1 "2" "a")
                                              (("2" (SKEEP)
                                                (("2" (TYPEPRED "r")
                                                  (("2" (CASE "rem(2)(a) = r")
                                                    (("1"
                                                      (CASE "rem(2)(a) = 0")
                                                      (("1" (LEMMA "rem_prod1")
                                                        (("1"
                                                          (INST -1 "2" "a" "a")
                                                          (("1" (REPLACES -2)
                                                            (("1"
                                                              (REWRITE
                                                               "zero_times1")
                                                              (("1"
                                                                (REWRITE
                                                                 "rem_zero")
                                                                NIL NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL)
                                                       ("2"
                                                        (CASE "rem(2)(a) = 1")
                                                        (("1"
                                                          (LEMMA "rem_prod1")
                                                          (("1"
                                                            (INST -1 "2" "a"
                                                             "a")
                                                            (("1"
                                                              (REPLACE -2 -1)
                                                              (("1"
                                                                (REWRITE
                                                                 "one_times")
                                                                NIL NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL)
                                                         ("2" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL)
                                                     ("2" (HIDE 2)
                                                      (("2" (REPLACES -2)
                                                        (("2"
                                                          (LEMMA "rem_sum1")
                                                          (("2"
                                                            (INST -1 "2"
                                                             "2 * q" "r")
                                                            (("2"
                                                              (REPLACE -1 1 RL
                                                                       HIDE)
                                                              (("2"
                                                                (REWRITE
                                                                 "rem_multiple1")
                                                                (("2"
                                                                  (SIMPLIFY)
                                                                  (("2"
                                                                    (REWRITE
                                                                     "rem_mod")
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (PROPAX) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|even?| CONST-DECL "bool" |integers| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|even_minus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|associative_mult| FORMULA-DECL NIL |number_fields| NIL)
    (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|both_sides_minus1| FORMULA-DECL NIL |real_props| NIL)
    (|distributive| FORMULA-DECL NIL |number_fields| NIL)
    (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|rem_mod| FORMULA-DECL NIL |modulo_arithmetic| NIL)
    (|rem_multiple1| FORMULA-DECL NIL |modulo_arithmetic| NIL)
    (|zero_times1| FORMULA-DECL NIL |real_props| NIL)
    (|rem_prod1| FORMULA-DECL NIL |modulo_arithmetic| NIL)
    (|one_times| FORMULA-DECL NIL |extra_tegies| NIL)
    (|euclid_int| FORMULA-DECL NIL |euclidean_division| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|same_remainder| FORMULA-DECL NIL |modulo_arithmetic| NIL)
    (|divides| CONST-DECL "bool" |divides| NIL)
    (|rem_zero| FORMULA-DECL NIL |modulo_arithmetic| NIL)
    (|rem_sum1| FORMULA-DECL NIL |modulo_arithmetic| NIL)
    (|rem| CONST-DECL "{r: mod(b) | EXISTS q: x = b * q + r}"
     |modulo_arithmetic| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|mod| NONEMPTY-TYPE-EQ-DECL NIL |euclidean_division| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL))
   SHOSTAK))
 (|Euler_trick_lemma| 0
  (|Euler_trick_lemma-1| NIL 3953124152
   ("" (SKEEP)
    (("" (CASE "even?(c+d)")
      (("1" (CASE "FORALL(x, y:int): even?(x+y) => even?(x-y)")
        (("1" (INST 1 "(a+b)/2" "(a-b)/2" "(c+d)/2" "(c-d)/2")
          (("1" (REWRITE* "real_props.div_times")
            (("1" (REWRITE* "real_props.div_distributes")
              (("1" (REWRITE * "distributive")
                (("1" (LEMMA "distributive")
                  (("1" (COPY -1)
                    (("1" (COPY -1)
                      (("1" (INST?)
                        (("1" (REPLACE -1 1 RL HIDE)
                          (("1" (INST -1 "2" "a * a + b * b" "c * c")
                            (("1" (REPLACE -1 1 RL HIDE)
                              (("1"
                                (INST -1 "2" "a * a + b * b + c *c" "d * d")
                                (("1" (REPLACE -1 1 RL HIDE)
                                  (("1" (REPLACES -2) (("1" (ASSERT) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (INST?)
            (("2" (HIDE -3 -4)
              (("2" (SPLIT)
                (("1" (HIDE -2)
                  (("1" (EXPAND "even?")
                    (("1" (SKEEP)
                      (("1" (REPLACES -1) (("1" (ASSERT) NIL NIL)) NIL)) NIL))
                    NIL))
                  NIL)
                 ("2" (PROPAX) NIL NIL))
                NIL))
              NIL))
            NIL)
           ("3" (HIDE -1 -3 -4)
            (("3" (EXPAND "even?")
              (("3" (SKEEP) (("3" (REPLACES -1) (("3" (ASSERT) NIL NIL)) NIL))
                NIL))
              NIL))
            NIL)
           ("4" (HIDE -2 -3)
            (("4" (INST?)
              (("4" (SPLIT)
                (("1" (HIDE -2)
                  (("1" (EXPAND "even?")
                    (("1" (SKEEP)
                      (("1" (REPLACES -1) (("1" (ASSERT) NIL NIL)) NIL)) NIL))
                    NIL))
                  NIL)
                 ("2" (PROPAX) NIL NIL))
                NIL))
              NIL))
            NIL)
           ("5" (HIDE -1 -2 -3)
            (("5" (EXPAND "even?")
              (("5" (SKEEP) (("5" (REPLACES -1) (("5" (ASSERT) NIL NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (HIDE-ALL-BUT 1)
          (("2" (SKOLEM 1 ("u" "v"))
            (("2" (EXPAND "even?")
              (("2" (FLATTEN)
                (("2" (SKEEP)
                  (("2" (INST 1 "j-v")
                    (("2" (SIMPLIFY)
                      (("2" (REPLACE -1 1 RL HIDE)
                        (("2" (SIMPLIFY) (("2" (PROPAX) NIL NIL)) NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (HIDE 2)
        (("2" (LEMMA "even_sum_even_sq_sum")
          (("2" (COPY -1)
            (("2" (INST -1 "a" "b")
              (("2" (FLATTEN)
                (("2" (HIDE -2)
                  (("2" (SPLIT)
                    (("1" (HIDE -4)
                      (("1" (EXPAND "even?" -1)
                        (("1" (SKEEP)
                          (("1" (REPLACES -1)
                            (("1" (INST -1 "c" "d")
                              (("1" (FLATTEN)
                                (("1" (HIDE -1)
                                  (("1" (SPLIT)
                                    (("1" (PROPAX) NIL NIL)
                                     ("2" (HIDE 2)
                                      (("2" (EXPAND "even?")
                                        (("2" (INST 1 "n-j")
                                          (("2" (SIMPLIFY)
                                            (("2" (LEMMA "both_sides_minus1")
                                              (("2"
                                                (INST -1
                                                 "c * c + d * d + 2 * j"
                                                 "2 * n" "2 * j")
                                                (("2" (FLATTEN)
                                                  (("2" (HIDE -1)
                                                    (("2" (SPLIT)
                                                      (("1" (SIMPLIFY -1)
                                                        (("1" (PROPAX) NIL
                                                          NIL))
                                                        NIL)
                                                       ("2" (PROPAX) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (PROPAX) NIL NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|even?| CONST-DECL "bool" |integers| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|c| SKOLEM-CONST-DECL "int" |four_int_squares_aux| NIL)
    (|d| SKOLEM-CONST-DECL "int" |four_int_squares_aux| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|a| SKOLEM-CONST-DECL "int" |four_int_squares_aux| NIL)
    (|b| SKOLEM-CONST-DECL "int" |four_int_squares_aux| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|div_distributes| FORMULA-DECL NIL |real_props| NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|distributive| FORMULA-DECL NIL |number_fields| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|div_times| FORMULA-DECL NIL |real_props| NIL)
    (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|rat_plus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|times_u8_u8| APPLICATION-JUDGEMENT "uint16" |integertypes| NIL)
    (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|even_sum_even_sq_sum| FORMULA-DECL NIL |four_int_squares_aux| NIL)
    (|both_sides_minus1| FORMULA-DECL NIL |real_props| NIL)
    (|even_minus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers|
     NIL))
   SHOSTAK))
 (|Euler_trick| 0
  (|Euler_trick-1| NIL 3953124191
   ("" (SKEEP)
    (("" (LEMMA "Euler_trick_lemma")
      (("" (LEMMA "euclid_int")
        (("" (COPY -1)
          (("" (COPY -1)
            (("" (INST -1 "2" "a")
              (("" (INST -2 "2" "b")
                (("" (INST -3 "2" "c")
                  (("" (SKEEP)
                    (("" (SKEEP)
                      (("" (SKEEP)
                        (("" (CASE "r = 0")
                          (("1" (CASE "r!1 = 0")
                            (("1" (INST -6 "a" "b" "c" "d" "n")
                              (("1" (SPLIT)
                                (("1" (PROPAX) NIL NIL) ("2" (PROPAX) NIL NIL)
                                 ("3" (HIDE -5 -6 2)
                                  (("3" (REPLACES -)
                                    (("3" (SIMPLIFY) (("3" (PROPAX) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (CASE "r!1 = 1")
                              (("1" (CASE "r!2 = 0")
                                (("1" (INST -7 "a" "c" "b" "d" "n")
                                  (("1" (SPLIT)
                                    (("1" (PROPAX) NIL NIL)
                                     ("2" (HIDE-ALL-BUT (-7 1))
                                      (("2" (ASSERT) NIL NIL)) NIL)
                                     ("3" (HIDE-ALL-BUT (-1 -3 -4 -6 1))
                                      (("3" (REPLACES -)
                                        (("3" (SIMPLIFY)
                                          (("3" (PROPAX) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (CASE "r!2 = 1")
                                  (("1" (INST -7 "b" "c" "a" "d" "n")
                                    (("1" (SPLIT)
                                      (("1" (PROPAX) NIL NIL)
                                       ("2" (HIDE-ALL-BUT (-7 1))
                                        (("2" (ASSERT) NIL NIL)) NIL)
                                       ("3" (HIDE-ALL-BUT (-1 -2 -5 -6 1))
                                        (("3" (REPLACES -)
                                          (("3" (SIMPLIFY)
                                            (("3" (PROPAX) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (TYPEPRED "r!2")
                                    (("2" (HIDE-ALL-BUT (-1 1 2))
                                      (("2" (ASSERT) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (TYPEPRED "r!1")
                                (("2" (HIDE-ALL-BUT (-1 1 2))
                                  (("2" (ASSERT) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (CASE "r = 1")
                            (("1" (CASE "r!1 = 0")
                              (("1" (CASE "r!2 = 0")
                                (("1" (INST -7 "b" "c" "a" "d" "n")
                                  (("1" (SPLIT)
                                    (("1" (PROPAX) NIL NIL)
                                     ("2" (HIDE-ALL-BUT (-7 1))
                                      (("2" (ASSERT) NIL NIL)) NIL)
                                     ("3" (HIDE-ALL-BUT (-1 -2 -5 -6 1))
                                      (("3" (REPLACES -)
                                        (("3" (SIMPLIFY)
                                          (("3" (PROPAX) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (CASE "r!2 = 1")
                                  (("1" (INST -7 "a" "c" "b" "d" "n")
                                    (("1" (SPLIT)
                                      (("1" (PROPAX) NIL NIL)
                                       ("2" (HIDE-ALL-BUT (-7 1))
                                        (("2" (ASSERT) NIL NIL)) NIL)
                                       ("3" (HIDE-ALL-BUT (-1 -3 -4 -6 1))
                                        (("3" (REPLACES -)
                                          (("3" (SIMPLIFY)
                                            (("3" (PROPAX) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (TYPEPRED "r!2")
                                    (("2" (HIDE-ALL-BUT (-1 1 2))
                                      (("2" (ASSERT) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (CASE "r!1 = 1")
                                (("1" (INST -6 "a" "b" "c" "d" "n")
                                  (("1" (SPLIT)
                                    (("1" (PROPAX) NIL NIL)
                                     ("2" (PROPAX) NIL NIL)
                                     ("3" (HIDE-ALL-BUT (-1 -2 -3 -4 1))
                                      (("3" (REPLACES -)
                                        (("3" (SIMPLIFY)
                                          (("3" (PROPAX) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (TYPEPRED "r!1")
                                  (("2" (HIDE-ALL-BUT (-1 1 2))
                                    (("2" (ASSERT) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (TYPEPRED "r")
                              (("2" (HIDE-ALL-BUT (-1 1 2))
                                (("2" (ASSERT) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|Euler_trick_lemma| FORMULA-DECL NIL |four_int_squares_aux| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|mod| NONEMPTY-TYPE-EQ-DECL NIL |euclidean_division| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|odd_plus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|euclid_int| FORMULA-DECL NIL |euclidean_division| NIL))
   SHOSTAK)))

