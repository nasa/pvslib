(|zp_diophantine|
 (|prime_nat| 0
  (|prime_nat-1| NIL 3953254644 ("" (JUDGEMENT-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (> CONST-DECL "bool" |reals| NIL)
    (|x!1| SKOLEM-CONST-DECL "(prime?)" |zp_diophantine| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|divides| CONST-DECL "bool" |divides| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL))
   NIL (|prime_nat| SUBTYPE "zp_diophantine.x" "posnat")))
 (|bij_prime_square_TCC1| 0
  (|bij_prime_square_TCC1-1| NIL 3953246409
   ("" (SKEEP)
    (("" (EXPAND "is_finite")
      (("" (INST 1 "p" "LAMBDA(x:(prime_square(p))):x")
        (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL))
      NIL))
    NIL)
   ((|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|extend| CONST-DECL "R" |extend| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|prime_square| CONST-DECL "set[nat]" |zp_diophantine| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|p| SKOLEM-CONST-DECL "{p: (prime?) | p > 2}" |zp_diophantine| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL))
   NIL
   (|bij_prime_square| SUBTYPE "zp_diophantine.prime_square(zp_diophantine.p)"
    "finite_set[nat]")))
 (|bij_prime_square| 0
  (|bij_prime_square-1| NIL 3953246410
   ("" (SKEEP)
    (("" (LEMMA "card_equal[below[(p+1)/2], nat]")
      (("" (CASE "integer_pred((1 + p) / 2)")
        (("1" (INST -2 "fullset[below[(p+1)/2]]" "prime_square(p)")
          (("1" (FLATTEN)
            (("1" (HIDE -2)
              (("1" (PROP)
                (("1"
                  (CASE-REPLACE "card(fullset[below[(p + 1) / 2]]) = (p+1)/2")
                  (("1" (ASSERT) NIL NIL)
                   ("2" (HIDE -1 2)
                    (("2" (REWRITE "card_bij")
                      (("2"
                        (INST 1 "LAMBDA(x : (fullset[below[(p + 1) / 2]])): x")
                        (("2" (GRIND) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (HIDE -1)
                  (("2" (EXPAND "card_eq")
                    (("2"
                      (INST 1
                       "LAMBDA(x: (fullset[below[(p + 1) / 2]])): rem(p)(x*x)")
                      (("1" (HIDE 2)
                        (("1" (EXPAND "bijective?")
                          (("1" (PROP)
                            (("1" (EXPAND "injective?")
                              (("1" (SKEEP)
                                (("1" (TYPEPRED "x1")
                                  (("1" (TYPEPRED "x2")
                                    (("1" (HIDE -2 -4)
                                      (("1" (REWRITE "same_remainder")
                                        (("1"
                                          (CASE-REPLACE
                                           "x1*x1 - x2*x2 = (x1-x2) * (x1+x2)")
                                          (("1" (HIDE -1)
                                            (("1" (LEMMA "prime_divides_prod")
                                              (("1" (INST -1 "p")
                                                (("1" (PROP)
                                                  (("1" (INST?)
                                                    (("1" (ASSERT)
                                                      (("1" (PROP)
                                                        (("1"
                                                          (REWRITE
                                                           "same_remainder"
                                                           :DIR RL)
                                                          (("1"
                                                            (REWRITE "rem_mod")
                                                            (("1"
                                                              (REWRITE
                                                               "rem_mod")
                                                              NIL NIL))
                                                            NIL))
                                                          NIL)
                                                         ("2"
                                                          (LEMMA
                                                           "same_remainder")
                                                          (("2"
                                                            (INST -1 "p" "x1"
                                                             "-x2")
                                                            (("2" (FLATTEN)
                                                              (("2" (HIDE -1)
                                                                (("2" (ASSERT)
                                                                  (("2"
                                                                    (HIDE -2
                                                                     -5)
                                                                    (("2"
                                                                      (REWRITE
                                                                       "rem_mod")
                                                                      (("2"
                                                                        (CASE-REPLACE
                                                                         "rem(p)(-x2) = rem(p)(p-x2)")
                                                                        (("1"
                                                                          (HIDE
                                                                           -1)
                                                                          (("1"
                                                                            (REWRITE
                                                                             "rem_mod")
                                                                            (("1"
                                                                              (ASSERT)
                                                                              NIL
                                                                              NIL)
                                                                             ("2"
                                                                              (CASE-REPLACE
                                                                               "x2 = 0")
                                                                              (("1"
                                                                                (SIMPLIFY)
                                                                                (("1"
                                                                                  (REWRITE
                                                                                   "rem_self")
                                                                                  NIL
                                                                                  NIL))
                                                                                NIL)
                                                                               ("2"
                                                                                (ASSERT)
                                                                                NIL
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL)
                                                                         ("2"
                                                                          (REWRITE
                                                                           "rem_diff1"
                                                                           :DIR
                                                                           RL)
                                                                          (("2"
                                                                            (REWRITE
                                                                             "rem_self")
                                                                            (("2"
                                                                              (ASSERT)
                                                                              NIL
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (TYPEPRED "p")
                                                    (("2" (PROPAX) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("2" (ASSERT) NIL NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (EXPAND "surjective?")
                              (("2" (SKEEP)
                                (("2" (TYPEPRED "y")
                                  (("2" (EXPAND "prime_square")
                                    (("2" (EXPAND "extend")
                                      (("2" (PROP)
                                        (("2" (SKOLEM -2 "z")
                                          (("2" (CASE "z < (p+1)/2")
                                            (("1" (INST 1 "z")
                                              (("1" (ASSERT)
                                                (("1" (EXPAND "fullset")
                                                  (("1" (PROPAX) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2" (INST 2 "p-z")
                                              (("1" (LEMMA "rem_prod")
                                                (("1"
                                                  (INST -1 "p" "-z" "p-z" "-z"
                                                   "p-z")
                                                  (("1"
                                                    (CASE
                                                        "rem(p)(p - z) = rem(p)(-z)")
                                                    (("1" (ASSERT) NIL NIL)
                                                     ("2" (HIDE-ALL-BUT 1)
                                                      (("2"
                                                        (REWRITE "rem_diff1"
                                                         :DIR RL)
                                                        (("2"
                                                          (REWRITE "rem_self")
                                                          (("2" (ASSERT) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (ASSERT)
                                                (("2" (EXPAND "fullset")
                                                  (("2" (PROPAX) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (SKEEP)
                        (("2" (HIDE 2)
                          (("2" (EXPAND "prime_square")
                            (("2" (EXPAND "extend")
                              (("2" (PROP)
                                (("1" (INST 1 "x") NIL NIL)
                                 ("2" (ASSERT) NIL NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (HIDE 2)
            (("2" (EXPAND "is_finite")
              (("2"
                (INST 1 "p+1" "LAMBDA(x: (fullset[below[(p + 1) / 2]])): x")
                (("2" (EXPAND "injective?") (("2" (SKEEP) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL)
         ("2" (HIDE-ALL-BUT 1)
          (("2" (TYPEPRED "p")
            (("2" (CASE "odd?(p)")
              (("1" (EXPAND "odd?")
                (("1" (SKEEP)
                  (("1" (REPLACES -1)
                    (("1" (CASE-REPLACE "1 + (1 + 2 * j) = 2*(1+j)")
                      (("1"
                        (CASE-REPLACE "2 * (1 + j) / 2 = 2 * ((1 + j) / 2)")
                        (("1" (HIDE -)
                          (("1" (REWRITE "real_props.div_cancel1")
                            (("1" (ASSERT) NIL NIL)) NIL))
                          NIL)
                         ("2" (ASSERT) NIL NIL))
                        NIL)
                       ("2" (ASSERT) NIL NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (REWRITE "odd_iff_not_even")
                (("2" (EXPAND "even?")
                  (("2" (SKEEP)
                    (("2" (EXPAND "prime?")
                      (("2" (INST -2 "j")
                        (("1" (PROP)
                          (("1" (EXPAND "divides")
                            (("1" (INST 1 "2") (("1" (ASSERT) NIL NIL)) NIL))
                            NIL)
                           ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL))
                          NIL)
                         ("2" (ASSERT) NIL NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|card_equal| FORMULA-DECL NIL |card_finite| |sets_aux|)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (> CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|odd?| CONST-DECL "bool" |integers| NIL)
    (|odd_plus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|rat_minus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|odd_minus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|div_cancel1| FORMULA-DECL NIL |real_props| NIL)
    (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|even?| CONST-DECL "bool" |integers| NIL)
    (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|divides| CONST-DECL "bool" |divides| NIL)
    (|j| SKOLEM-CONST-DECL "int" |zp_diophantine| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|odd_iff_not_even| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|p| SKOLEM-CONST-DECL "{p: (prime?) | p > 2}" |zp_diophantine| NIL)
    (|fullset| CONST-DECL "set" |sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|prime_square| CONST-DECL "set[nat]" |zp_diophantine| NIL)
    (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|rem| CONST-DECL "{r: mod(b) | EXISTS q: x = b * q + r}"
     |modulo_arithmetic| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|mod| NONEMPTY-TYPE-EQ-DECL NIL |euclidean_division| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|extend| CONST-DECL "R" |extend| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|rem_prod| FORMULA-DECL NIL |modulo_arithmetic| NIL)
    (|z| SKOLEM-CONST-DECL "below[p]" |zp_diophantine| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|prime_divides_prod| FORMULA-DECL NIL |primes| |ints|)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|rem_diff1| FORMULA-DECL NIL |modulo_arithmetic| NIL)
    (|rem_self| FORMULA-DECL NIL |modulo_arithmetic| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|rem_mod| FORMULA-DECL NIL |modulo_arithmetic| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|same_remainder| FORMULA-DECL NIL |modulo_arithmetic| NIL)
    (|card_eq| CONST-DECL "bool" |card_comp_set| |sets_aux|)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|Card| CONST-DECL "nat" |finite_sets| NIL)
    (|card| CONST-DECL "{n: nat | n = Card(S)}" |finite_sets| NIL)
    (|card_bij| FORMULA-DECL NIL |finite_sets| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|surjective?| CONST-DECL "bool" |functions| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL))
   SHOSTAK))
 (|bij_prime_square_comp_TCC1| 0
  (|bij_prime_square_comp_TCC1-1| NIL 3953246409
   ("" (SKEEP)
    (("" (EXPAND "is_finite")
      (("" (INST 1 "p" "LAMBDA(x:(prime_square_comp(p, k))):x")
        (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL))
      NIL))
    NIL)
   ((|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|extend| CONST-DECL "R" |extend| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|prime_square_comp| CONST-DECL "set[nat]" |zp_diophantine| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|p| SKOLEM-CONST-DECL "{p: (prime?) | p > 2}" |zp_diophantine| NIL)
    (|k| SKOLEM-CONST-DECL "int" |zp_diophantine| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL))
   NIL
   (|bij_prime_square_comp| SUBTYPE
    "zp_diophantine.prime_square_comp(zp_diophantine.p, zp_diophantine.k)"
    "finite_set[nat]")))
 (|bij_prime_square_comp| 0
  (|bij_prime_square_comp-1| NIL 3953249897
   ("" (SKEEP)
    (("" (LEMMA "card_equal[nat, nat]")
      (("" (INST -1 "prime_square(p)" "prime_square_comp(p, k)")
        (("1" (FLATTEN)
          (("1" (HIDE -1)
            (("1" (PROP)
              (("1" (REWRITE "bij_prime_square") (("1" (ASSERT) NIL NIL)) NIL)
               ("2" (HIDE 2)
                (("2" (EXPAND "card_eq")
                  (("2" (INST 1 "LAMBDA(x:(prime_square(p))): rem(p)(-x+k)")
                    (("1" (EXPAND "bijective?")
                      (("1" (PROP)
                        (("1" (EXPAND "injective?")
                          (("1" (SKEEP)
                            (("1" (REWRITE "same_remainder")
                              (("1" (CASE-REPLACE "-x1 - -x2 = x2 - x1")
                                (("1" (HIDE -1)
                                  (("1" (REWRITE "same_remainder" :DIR RL)
                                    (("1" (TYPEPRED "x2")
                                      (("1" (TYPEPRED "x1")
                                        (("1" (EXPAND "prime_square")
                                          (("1" (EXPAND "extend")
                                            (("1" (PROP)
                                              (("1" (REWRITE* "rem_mod")
                                                (("1" (ASSERT) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (ASSERT) NIL NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (EXPAND "surjective?")
                          (("2" (SKEEP)
                            (("2" (TYPEPRED "y")
                              (("2" (EXPAND "prime_square_comp")
                                (("2" (EXPAND "extend")
                                  (("2" (PROP)
                                    (("2" (SKOLEM -2 "z")
                                      (("2" (INST 1 "rem(p)(z*z)")
                                        (("1" (REPLACE -2 1 RL HIDE)
                                          (("1" (LEMMA "rem_opposite_elim")
                                            (("1"
                                              (INST -1 "p" "-rem(p)(z * z) + k"
                                               "-z * z + k")
                                              (("1" (REPLACE -1 1 RL HIDE)
                                                (("1"
                                                  (CASE-REPLACE
                                                   "-(-rem(p)(z * z) + k) = rem(p)(z * z) - k")
                                                  (("1"
                                                    (CASE-REPLACE
                                                     "-(-rem(p)(z * z) + k) = rem(p)(z * z) - k")
                                                    (("1" (HIDE -1)
                                                      (("1"
                                                        (CASE-REPLACE
                                                         "-(-z * z + k) = z * z - k")
                                                        (("1" (HIDE -1)
                                                          (("1"
                                                            (REWRITE
                                                             "rem_diff1")
                                                            NIL NIL))
                                                          NIL)
                                                         ("2" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (EXPAND "prime_square")
                                          (("2" (EXPAND "extend")
                                            (("2" (PROP)
                                              (("1" (INST 1 "z") NIL NIL)
                                               ("2" (ASSERT) NIL NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (SKEEP)
                      (("2" (EXPAND "prime_square_comp")
                        (("2" (EXPAND "extend")
                          (("2" (PROP)
                            (("1" (TYPEPRED "x")
                              (("1" (EXPAND "prime_square")
                                (("1" (EXPAND "extend")
                                  (("1" (PROP)
                                    (("1" (SKEEP)
                                      (("1" (INST 1 "y")
                                        (("1"
                                          (REWRITE "rem_opposite_elim" :DIR RL)
                                          (("1"
                                            (CASE-REPLACE
                                             "-(-y * y + k) = y * y - k")
                                            (("1"
                                              (CASE-REPLACE
                                               "-(-x + k) = x - k")
                                              (("1" (HIDE -1 -2)
                                                (("1"
                                                  (REWRITE "rem_diff1" :DIR RL)
                                                  (("1" (REPLACES -2) NIL NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (ASSERT) NIL NIL))
                                              NIL)
                                             ("2" (ASSERT) NIL NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (ASSERT) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (EXPAND "is_finite")
          (("2" (INST 1 "p" "LAMBDA(x: (prime_square(p))): x")
            (("1" (EXPAND "injective?") (("1" (GRIND) NIL NIL)) NIL)
             ("2" (GRIND) NIL NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|card_equal| FORMULA-DECL NIL |card_finite| |sets_aux|)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|bij_prime_square| FORMULA-DECL NIL |zp_diophantine| NIL)
    (|card_eq| CONST-DECL "bool" |card_comp_set| |sets_aux|)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|surjective?| CONST-DECL "bool" |functions| NIL)
    (|rem_diff1| FORMULA-DECL NIL |modulo_arithmetic| NIL)
    (|rem_opposite_elim| FORMULA-DECL NIL |modulo_arithmetic| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|z| SKOLEM-CONST-DECL "below[p]" |zp_diophantine| NIL)
    (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|same_remainder| FORMULA-DECL NIL |modulo_arithmetic| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|rem_mod| FORMULA-DECL NIL |modulo_arithmetic| NIL)
    (|extend| CONST-DECL "R" |extend| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|k| SKOLEM-CONST-DECL "int" |zp_diophantine| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|mod| NONEMPTY-TYPE-EQ-DECL NIL |euclidean_division| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|rem| CONST-DECL "{r: mod(b) | EXISTS q: x = b * q + r}"
     |modulo_arithmetic| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (|prime_square| CONST-DECL "set[nat]" |zp_diophantine| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|p| SKOLEM-CONST-DECL "{p: (prime?) | p > 2}" |zp_diophantine| NIL)
    (|prime_square_comp| CONST-DECL "set[nat]" |zp_diophantine| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL))
   SHOSTAK))
 (|not_disjoint_prime_squares| 0
  (|not_disjoint_prime_squares-1| NIL 3953251948
   ("" (SKEEP)
    (("" (LEMMA "card_disj_union[nat]")
      (("" (INST?)
        (("1" (ASSERT)
          (("1" (HIDE -2)
            (("1" (REWRITE "bij_prime_square")
              (("1" (REWRITE "bij_prime_square_comp")
                (("1" (SIMPLIFY)
                  (("1" (REWRITE "real_props.div_cancel1")
                    (("1" (LEMMA "card_less_than_equal[nat, below[p]]")
                      (("1"
                        (INST -1
                         "union(prime_square(p), prime_square_comp(p, k))"
                         "fullset[below[p]]")
                        (("1" (FLATTEN)
                          (("1" (HIDE -1)
                            (("1" (PROP)
                              (("1"
                                (CASE-REPLACE "card(fullset[below[p]]) = p")
                                (("1" (ASSERT) NIL NIL)
                                 ("2" (HIDE -)
                                  (("2" (REWRITE "card_bij")
                                    (("2"
                                      (INST 1
                                       "LAMBDA(x: (fullset[below[p]])): x")
                                      (("2" (GRIND) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (EXPAND "card_le")
                                (("2" (HIDE -1)
                                  (("2"
                                    (INST 1
                                     "LAMBDA(x: (union(prime_square(p), prime_square_comp(p, k)))): x")
                                    (("1" (GRIND) NIL NIL)
                                     ("2" (GRIND) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (HIDE -1)
                          (("2" (EXPAND "is_finite")
                            (("2"
                              (INST 1 "p" "LAMBDA(x:(fullset[below[p]])):x")
                              (("2" (GRIND) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (HIDE -1)
          (("2" (EXPAND "is_finite")
            (("2" (INST 1 "p" "LAMBDA(x:(prime_square_comp(p,k))):x")
              (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL))
            NIL))
          NIL)
         ("3" (HIDE -1)
          (("3" (EXPAND "is_finite")
            (("3" (INST 1 "p" "LAMBDA(x: (prime_square(p))): x")
              (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|card_disj_union| FORMULA-DECL NIL |finite_sets| NIL)
    (|bij_prime_square| FORMULA-DECL NIL |zp_diophantine| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|nnrat_plus_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|card_less_than_equal| FORMULA-DECL NIL |card_finite| |sets_aux|)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|surjective?| CONST-DECL "bool" |functions| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|card_bij| FORMULA-DECL NIL |finite_sets| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|card| CONST-DECL "{n: nat | n = Card(S)}" |finite_sets| NIL)
    (|Card| CONST-DECL "nat" |finite_sets| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|extend| CONST-DECL "R" |extend| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|card_le| CONST-DECL "bool" |card_comp_set| |sets_aux|)
    (|union| CONST-DECL "set" |sets| NIL)
    (|fullset| CONST-DECL "set" |sets| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|div_cancel1| FORMULA-DECL NIL |real_props| NIL)
    (|bij_prime_square_comp| FORMULA-DECL NIL |zp_diophantine| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (|prime_square| CONST-DECL "set[nat]" |zp_diophantine| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|p| SKOLEM-CONST-DECL "{p: (prime?) | p > 2}" |zp_diophantine| NIL)
    (|prime_square_comp| CONST-DECL "set[nat]" |zp_diophantine| NIL)
    (|k| SKOLEM-CONST-DECL "int" |zp_diophantine| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL))
   SHOSTAK))
 (|sum_squares_mod_p_eq_int| 0
  (|sum_squares_mod_p_eq_int-1| NIL 3953285965
   ("" (SKEEP)
    (("" (CASE-REPLACE "p = 2")
      (("1" (CASE-REPLACE "rem(2)(k) = 0")
        (("1" (INST 1 "0" "0")
          (("1" (ASSERT) (("1" (REWRITE "modulo_arithmetic.rem_zero") NIL NIL))
            NIL))
          NIL)
         ("2" (CASE-REPLACE "rem(2)(k) = 1")
          (("1" (INST 2 "1" "0")
            (("1" (ASSERT) (("1" (REWRITE "rem_one") NIL NIL)) NIL)) NIL)
           ("2" (ASSERT) NIL NIL))
          NIL))
        NIL)
       ("2" (LEMMA "not_disjoint_prime_squares")
        (("2" (INST -1 "p" "k")
          (("1" (EXPAND "disjoint?")
            (("1" (EXPAND "empty?")
              (("1" (SKOLEM 1 "z")
                (("1" (EXPAND "member")
                  (("1" (EXPAND "intersection")
                    (("1" (EXPAND "member")
                      (("1" (FLATTEN)
                        (("1" (EXPAND "prime_square")
                          (("1" (EXPAND "prime_square_comp")
                            (("1" (EXPAND "extend")
                              (("1" (PROP)
                                (("1" (SKEEP)
                                  (("1" (SKOLEM -4 "x")
                                    (("1" (REPLACE -2 -4 RL HIDE)
                                      (("1" (INST 2 "x" "y")
                                        (("1" (REWRITE "same_remainder")
                                          (("1" (REWRITE "same_remainder")
                                            (("1" (ASSERT) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (TYPEPRED "p")
            (("2" (EXPAND "prime?") (("2" (ASSERT) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|odd_times_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|rem_one| FORMULA-DECL NIL |modulo_arithmetic| NIL)
    (|rem_zero| FORMULA-DECL NIL |modulo_arithmetic| NIL)
    (|plus_u16_u16| APPLICATION-JUDGEMENT "uint32" |integertypes| NIL)
    (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|times_u8_u8| APPLICATION-JUDGEMENT "uint16" |integertypes| NIL)
    (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|rem| CONST-DECL "{r: mod(b) | EXISTS q: x = b * q + r}"
     |modulo_arithmetic| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|mod| NONEMPTY-TYPE-EQ-DECL NIL |euclidean_division| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|p| SKOLEM-CONST-DECL "(prime?)" |zp_diophantine| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|prime_square| CONST-DECL "set[nat]" |zp_diophantine| NIL)
    (|extend| CONST-DECL "R" |extend| NIL)
    (|same_remainder| FORMULA-DECL NIL |modulo_arithmetic| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|prime_square_comp| CONST-DECL "set[nat]" |zp_diophantine| NIL)
    (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|intersection| CONST-DECL "set" |sets| NIL)
    (|disjoint?| CONST-DECL "bool" |sets| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|not_disjoint_prime_squares| FORMULA-DECL NIL |zp_diophantine| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL))
   SHOSTAK)))

