(|group_def|
 (|abelian_group?_TCC1| 0
  (|abelian_group?_TCC1-2| "" 3790093323
   ("" (EXPAND "group?")
    (("" (EXPAND "monoid?")
      (("" (EXPAND "monad?")
        (("" (EXPAND "star_closed?")
          (("" (EXPAND "member") (("" (SKOSIMP*) NIL NIL)) NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|monoid?| CONST-DECL "bool" |monoid_def| NIL)
    (|star_closed?| CONST-DECL "bool" |groupoid_def| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|monad?| CONST-DECL "bool" |monad_def| NIL)
    (|group?| CONST-DECL "bool" |group_def| NIL))
   SHOSTAK
   (|abelian_group?| SUBTYPE
    "restrict[[group_def.T, group_def.T], [(group_def.S), (group_def.S)], group_def.T].restrict(group_def.*)"
    "[[(group_def.S), (group_def.S)] -> (group_def.S)]"))
  (|abelian_group?_TCC1-1| |nil| 3301142328
   ("" (EXPAND "group?")
    (("" (EXPAND "monoid?")
      (("" (EXPAND "monad?")
        (("" (EXPAND "groupoid?")
          (("" (EXPAND "star_closed?")
            (("" (EXPAND "member") (("" (SKOSIMP*) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|monoid?| CONST-DECL "bool" |monoid_def| NIL)
    (|star_closed?| CONST-DECL "bool" |groupoid_def| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|monad?| CONST-DECL "bool" |monad_def| NIL)
    (|group?| CONST-DECL "bool" |group_def| NIL))
   SHOSTAK
   (|abelian_group?| SUBTYPE
    "restrict[[group_def.T, group_def.T], [(group_def.S), (group_def.S)], group_def.T].restrict(group_def.*)"
    "[[(group_def.S), (group_def.S)] -> (group_def.S)]")))
 (|finite_abelian_group?_TCC1| 0
  (|finite_abelian_group?_TCC1-2| "" 3790093323
   ("" (EXPAND "finite_group?")
    (("" (EXPAND "group?")
      (("" (EXPAND "monoid?")
        (("" (EXPAND "monad?")
          (("" (EXPAND "star_closed?")
            (("" (EXPAND "member") (("" (SKOSIMP*) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|group?| CONST-DECL "bool" |group_def| NIL)
    (|monad?| CONST-DECL "bool" |monad_def| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|star_closed?| CONST-DECL "bool" |groupoid_def| NIL)
    (|monoid?| CONST-DECL "bool" |monoid_def| NIL)
    (|finite_group?| CONST-DECL "bool" |group_def| NIL))
   SHOSTAK
   (|finite_abelian_group?| SUBTYPE
    "restrict[[group_def.T, group_def.T], [(group_def.S), (group_def.S)], group_def.T].restrict(group_def.*)"
    "[[(group_def.S), (group_def.S)] -> (group_def.S)]"))
  (|finite_abelian_group?_TCC1-1| |nil| 3301142328
   ("" (EXPAND "finite_group?")
    (("" (EXPAND "group?")
      (("" (EXPAND "monoid?")
        (("" (EXPAND "monad?")
          (("" (EXPAND "groupoid?")
            (("" (EXPAND "star_closed?")
              (("" (EXPAND "member") (("" (SKOSIMP*) NIL NIL)) NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|group?| CONST-DECL "bool" |group_def| NIL)
    (|monad?| CONST-DECL "bool" |monad_def| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|star_closed?| CONST-DECL "bool" |groupoid_def| NIL)
    (|monoid?| CONST-DECL "bool" |monoid_def| NIL)
    (|finite_group?| CONST-DECL "bool" |group_def| NIL))
   SHOSTAK
   (|finite_abelian_group?| SUBTYPE
    "restrict[[group_def.T, group_def.T], [(group_def.S), (group_def.S)], group_def.T].restrict(group_def.*)"
    "[[(group_def.S), (group_def.S)] -> (group_def.S)]")))
 (|finite_group_surj| 0
  (|finite_group_surj-1| |nil| 3407003514
   ("" (SKOSIMP*)
    (("" (EXPAND "finite_group?")
      (("" (ASSERT)
        (("" (LEMMA "is_finite_surj[T]")
          (("" (INST?)
            (("" (FLATTEN)
              (("" (HIDE -2)
                (("" (ASSERT) (("" (INST + "N!1" "f!1") NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|finite_group?| CONST-DECL "bool" |group_def| NIL)
    (T FORMAL-NONEMPTY-TYPE-DECL NIL |group_def| NIL)
    (|is_finite_surj| FORMULA-DECL NIL |finite_sets| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   SHOSTAK))
 (|group_def_equiv| 0
  (|group_def_equiv-1| NIL 3953114191
   ("" (SKEEP)
    (("" (EXPAND "group?")
      (("" (PROP)
        (("1" (EXPAND "inv_exists?")
          (("1" (EXPAND "left_inv_exists?")
            (("1" (SKEEP)
              (("1" (INST -2 "x")
                (("1" (SKEEP) (("1" (INST 1 "y") NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL)
         ("2" (EXPAND "inv_exists?")
          (("2" (EXPAND "left_inv_exists?")
            (("2" (SKEEP)
              (("2" (INST-CP -2 "x")
                (("2" (SKEEP)
                  (("2" (INST 1 "y")
                    (("2" (PROP)
                      (("2" (CASE "y * x * y = y")
                        (("1" (INST -3 "y")
                          (("1" (SKEEP)
                            (("1" (CASE "y_1 * y * x * y = y_1 * y")
                              (("1" (REPLACES -4)
                                (("1" (EXPAND "monoid?")
                                  (("1" (EXPAND "monad?")
                                    (("1" (EXPAND "identity?")
                                      (("1" (EXPAND "restrict")
                                        (("1" (PROP)
                                          (("1" (INST?)
                                            (("1" (PROP)
                                              (("1" (REPLACES -6) NIL NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (EXPAND "monoid?")
                                (("2" (EXPAND "associative?")
                                  (("2" (EXPAND "restrict")
                                    (("2" (PROP)
                                      (("2" (INST?)
                                        (("2" (REPLACES -3)
                                          (("2" (REPLACES -4)
                                            (("2" (EXPAND "monad?")
                                              (("2" (EXPAND "identity?")
                                                (("2" (EXPAND "restrict")
                                                  (("2" (PROP)
                                                    (("2" (INST?)
                                                      (("2" (PROP)
                                                        (("2" (REPLACES -4) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (REPLACES -3)
                          (("2" (EXPAND "monoid?")
                            (("2" (EXPAND "monad?")
                              (("2" (EXPAND "identity?")
                                (("2" (EXPAND "restrict")
                                  (("2" (PROP)
                                    (("2" (INST?) (("2" (PROP) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|group?| CONST-DECL "bool" |group_def| NIL)
    (|monoid?| CONST-DECL "bool" |monoid_def| NIL)
    (|identity?| CONST-DECL "bool" |operator_defs| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (|monad?| CONST-DECL "bool" |monad_def| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|associative?| CONST-DECL "bool" |operator_defs| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (* FORMAL-CONST-DECL "[T, T -> T]" |group_def| NIL)
    (|inv_exists?| CONST-DECL "bool" |group_def| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (T FORMAL-NONEMPTY-TYPE-DECL NIL |group_def| NIL)
    (|left_inv_exists?| CONST-DECL "bool" |group_def| NIL))
   SHOSTAK)))

