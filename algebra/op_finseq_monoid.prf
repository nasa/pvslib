(|op_finseq_monoid|
 (|IMP_monoid_TCC1| 0
  (|IMP_monoid_TCC1-1| |nil| 3884351573
   ("" (REWRITE "fullset_is_monoid") NIL NIL)
   ((|fullset_is_monoid| FORMULA-DECL NIL |op_finseq_monoid| NIL)) NIL
   (|IMP_monoid| ASSUMING
    "monoid[op_finseq_monoid.T, op_finseq_monoid.*, op_finseq_monoid.one].monoid"
    "fullset_is_monoid: ASSUMPTION monoid_def[monoid.T, monoid.*, monoid.one].monoid?(sets[monoid.T].fullset)")))
 (|op_fseq_singleton| 0
  (|op_fseq_singleton-1| |nil| 3839583770
   ("" (SKEEP) (("" (GRIND) NIL NIL)) NIL)
   ((|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|int_min| APPLICATION-JUDGEMENT "{k: int | k <= i AND k <= j}" |real_defs|
     NIL)
    (|nat_min| APPLICATION-JUDGEMENT "{k: nat | k <= i AND k <= j}" |real_defs|
     NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|right_identity| FORMULA-DECL NIL |monad| NIL)
    (|op_fseq| DEF-DECL "T" |op_finseq_monoid_def| NIL)
    (* FORMAL-CONST-DECL "[T, T -> T]" |op_finseq_monoid| NIL)
    (|one| FORMAL-CONST-DECL "T" |op_finseq_monoid| NIL)
    (^ CONST-DECL "finseq" |finite_sequences| NIL)
    (|empty_seq| CONST-DECL "finseq" |finite_sequences| NIL)
    (|#| CONST-DECL "finite_sequence[T]" |set2seq| |structures|)
    (T FORMAL-NONEMPTY-TYPE-DECL NIL |op_finseq_monoid| NIL))
   SHOSTAK))
 (|op_fseq_composition| 0
  (|op_fseq_composition-1| |nil| 3839582105
   ("" (MEASURE-INDUCT "length(fs1)" "fs1")
    (("" (SKEEP*)
      (("" (CASE "x = empty_seq")
        (("1" (REPLACES -1)
          (("1" (REWRITE "empty_o_seq")
            (("1" (HIDE -1) (("1" (GRIND) NIL NIL)) NIL)) NIL))
          NIL)
         ("2" (EXPAND "op_fseq" 2 1)
          (("2" (LIFT-IF)
            (("2" (PROP)
              (("1" (HIDE -2 2) (("1" (GRIND) NIL NIL)) NIL)
               ("2" (EXPAND "o" 2 1)
                (("2" (ASSERT)
                  (("2" (REWRITE "empty_0")
                    (("2" (LIFT-IF)
                      (("2" (PROP)
                        (("1"
                          (CASE
                              "(x o fs2) ^ (1, length(x o fs2) - 1) = x^(1,length(x)-1) o fs2")
                          (("1" (REPLACES -1)
                            (("1" (INST -2 "x ^ (1, length(x) - 1)")
                              (("1" (ASSERT)
                                (("1" (PROP)
                                  (("1" (INST?)
                                    (("1" (REPLACES -1)
                                      (("1" (EXPAND "op_fseq" 1 3)
                                        (("1" (ASSERT)
                                          (("1" (LEMMA "fullset_is_monoid")
                                            (("1" (EXPAND "monoid?")
                                              (("1" (FLATTEN)
                                                (("1" (HIDE -1)
                                                  (("1" (EXPAND "associative?")
                                                    (("1" (INST?)
                                                      (("1"
                                                        (INST -1
                                                         "op_fseq(x ^ (1, length(x) - 1))"
                                                         "op_fseq(fs2)")
                                                        (("1"
                                                          (EXPAND "restrict")
                                                          (("1" (ASSERT) NIL
                                                            NIL))
                                                          NIL)
                                                         ("2"
                                                          (EXPAND "fullset")
                                                          (("2" (PROPAX) NIL
                                                            NIL))
                                                          NIL)
                                                         ("3"
                                                          (EXPAND "fullset")
                                                          (("3" (PROPAX) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL)
                                                       ("2" (EXPAND "fullset")
                                                        (("2" (PROPAX) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (HIDE 2 3) (("2" (GRIND) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (HIDE 2 3) (("2" (GRIND) NIL NIL)) NIL))
                              NIL))
                            NIL)
                           ("2" (HIDE -2 2 3)
                            (("2" (DECOMPOSE-EQUALITY)
                              (("1" (GRIND) NIL NIL)
                               ("2" (DECOMPOSE-EQUALITY)
                                (("2" (EXPAND "o" 1 3)
                                  (("2" (LIFT-IF)
                                    (("2" (PROP)
                                      (("1" (GRIND) NIL NIL)
                                       ("2" (TYPEPRED "x!1")
                                        (("2" (GRIND) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("3" (HIDE -2 2 3) (("3" (GRIND) NIL NIL)) NIL))
                          NIL)
                         ("2" (HIDE-ALL-BUT (1 4))
                          (("2" (REWRITE "empty_0" :DIR RL)
                            (("2" (GRIND) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((TRUE CONST-DECL "bool" |booleans| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|right_identity| FORMULA-DECL NIL |monad| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (^ CONST-DECL "finseq" |finite_sequences| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|x| SKOLEM-CONST-DECL "finseq[T]" |op_finseq_monoid| NIL)
    (|monoid?| CONST-DECL "bool" |monoid_def| NIL)
    (|fullset| CONST-DECL "set" |sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (|fs2| SKOLEM-CONST-DECL "finseq[T]" |op_finseq_monoid| NIL)
    (|associative?| CONST-DECL "bool" |operator_defs| NIL)
    (|fullset_is_monoid| FORMULA-DECL NIL |op_finseq_monoid| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_min| APPLICATION-JUDGEMENT "{k: int | k <= i AND k <= j}" |real_defs|
     NIL)
    (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|minus_i16_u16| APPLICATION-JUDGEMENT "int32" |integertypes| NIL)
    (|minus_i32_u32| APPLICATION-JUDGEMENT "int64" |integertypes| NIL)
    (|minus_u8_u8| APPLICATION-JUDGEMENT "int16" |integertypes| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|empty_0| FORMULA-DECL NIL |seq_extras| |structures|)
    (|left_identity| FORMULA-DECL NIL |monad| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|empty_o_seq| FORMULA-DECL NIL |seq_extras| |structures|)
    (|empty_seq| CONST-DECL "finseq" |finite_sequences| NIL)
    (O CONST-DECL "finseq" |finite_sequences| NIL)
    (|op_fseq| DEF-DECL "T" |op_finseq_monoid_def| NIL)
    (|one| FORMAL-CONST-DECL "T" |op_finseq_monoid| NIL)
    (* FORMAL-CONST-DECL "[T, T -> T]" |op_finseq_monoid| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (T FORMAL-NONEMPTY-TYPE-DECL NIL |op_finseq_monoid| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL)
    (|well_founded?| CONST-DECL "bool" |orders| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL))
   SHOSTAK))
 (|op_subfseq_closed| 0
  (|op_subfseq_closed-1| |nil| 3840810338
   ("" (SKOLEM 1 ("S" "fs" _ _))
    (("" (MEASURE-INDUCT+ "abs(j-i)" ("i" "j"))
      (("" (CASE-REPLACE "x!1 = x!2")
        (("1" (HIDE -)
          (("1" (EXPAND "^")
            (("1" (EXPAND "op_fseq")
              (("1" (GRIND)
                (("1" (TYPEPRED "fs" ("x!2"))
                  (("1" (GRIND)
                    (("1" (TYPEPRED "fs(x!2)")
                      (("1" (EXPAND "finseq_appl") (("1" (PROPAX) NIL NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (CASE "x!1 > x!2")
          (("1" (HIDE -2)
            (("1" (GRIND)
              (("1" (TYPEPRED "S")
                (("1" (EXPAND "monad?")
                  (("1" (FLATTEN)
                    (("1" (EXPAND "member") (("1" (PROPAX) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (INST -1 "x!1+1" "x!2")
            (("1" (EXPAND "op_fseq" 3)
              (("1" (ASSERT)
                (("1" (SPLIT 3)
                  (("1" (SPLIT)
                    (("1" (FLATTEN)
                      (("1" (TYPEPRED "S")
                        (("1" (EXPAND "monad?")
                          (("1" (FLATTEN)
                            (("1" (EXPAND "member") (("1" (PROPAX) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL))
                    NIL)
                   ("2" (PROP)
                    (("1"
                      (CASE
                          "fs ^ (1 + x!1, x!2) = fs ^ (x!1, x!2) ^ (1, length(fs ^ (x!1, x!2)) - 1)")
                      (("1" (REPLACE -1 2 RL)
                        (("1" (TYPEPRED "S")
                          (("1" (EXPAND "monad?")
                            (("1" (FLATTEN)
                              (("1" (HIDE -2 -3)
                                (("1" (EXPAND "star_closed?")
                                  (("1" (INST?)
                                    (("1" (EXPAND "member")
                                      (("1" (PROPAX) NIL NIL)) NIL)
                                     ("2" (HIDE-ALL-BUT (1 4 5))
                                      (("2" (GRIND)
                                        (("2" (TYPEPRED "fs(x!1)")
                                          (("2" (EXPAND "finseq_appl")
                                            (("2" (PROPAX) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (DECOMPOSE-EQUALITY)
                        (("1" (HIDE -1 2 3) (("1" (GRIND) NIL NIL)) NIL)
                         ("2" (DECOMPOSE-EQUALITY)
                          (("2" (HIDE -1 2 3) (("2" (GRIND) NIL NIL)) NIL))
                          NIL))
                        NIL)
                       ("3" (HIDE -1 3) (("3" (GRIND) NIL NIL)) NIL))
                      NIL)
                     ("2" (HIDE 2 3) (("2" (GRIND) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (HIDE 4) (("2" (GRIND) NIL NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (^ CONST-DECL "finseq" |finite_sequences| NIL)
    (|op_fseq| DEF-DECL "T" |op_finseq_monoid_def| NIL)
    (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|int_abs_is_nonneg| APPLICATION-JUDGEMENT "{j: nonneg_int | j >= i}"
     |real_defs| NIL)
    (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (T FORMAL-NONEMPTY-TYPE-DECL NIL |op_finseq_monoid| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (* FORMAL-CONST-DECL "[T, T -> T]" |op_finseq_monoid| NIL)
    (|one| FORMAL-CONST-DECL "T" |op_finseq_monoid| NIL)
    (|monad?| CONST-DECL "bool" |monad_def| NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|well_founded?| CONST-DECL "bool" |orders| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (> CONST-DECL "bool" |reals| NIL) (|member| CONST-DECL "bool" |sets| NIL)
    (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|star_closed?| CONST-DECL "bool" |groupoid_def| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|x!2| SKOLEM-CONST-DECL "below[length(fs)]" |op_finseq_monoid| NIL)
    (|odd_minus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|minus_i16_u16| APPLICATION-JUDGEMENT "int32" |integertypes| NIL)
    (|minus_i32_u32| APPLICATION-JUDGEMENT "int64" |integertypes| NIL)
    (|minus_u8_u8| APPLICATION-JUDGEMENT "int16" |integertypes| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (S SKOLEM-CONST-DECL "(monad?)" |op_finseq_monoid| NIL)
    (|fs| SKOLEM-CONST-DECL "finseq[(S)]" |op_finseq_monoid| NIL)
    (|x!1| SKOLEM-CONST-DECL "below[length(fs)]" |op_finseq_monoid| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nat_min| APPLICATION-JUDGEMENT "{k: nat | k <= i AND k <= j}" |real_defs|
     NIL)
    (|right_identity| FORMULA-DECL NIL |monad| NIL)
    (|empty_seq| CONST-DECL "finseq" |finite_sequences| NIL)
    (|int_min| APPLICATION-JUDGEMENT "{k: int | k <= i AND k <= j}" |real_defs|
     NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL))
   SHOSTAK))
 (|op_fseq_closed| 0
  (|op_fseq_closed-1| |nil| 3840205115
   ("" (LEMMA "op_subfseq_closed")
    (("" (SKEEP)
      (("" (CASE "length(fs) = 0")
        (("1" (HIDE -2)
          (("1" (EXPAND "op_fseq")
            (("1" (ASSERT)
              (("1" (TYPEPRED "S")
                (("1" (EXPAND "monad?")
                  (("1" (EXPAND "member") (("1" (PROPAX) NIL NIL)) NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (INST -1 "S" "fs" "0" "length(fs)-1")
          (("1" (CASE " fs ^ (0, length(fs) - 1) = fs")
            (("1" (ASSERT) NIL NIL)
             ("2" (HIDE-ALL-BUT (1 2))
              (("2" (DECOMPOSE-EQUALITY)
                (("1" (GRIND) NIL NIL)
                 ("2" (DECOMPOSE-EQUALITY) (("2" (GRIND) NIL NIL)) NIL))
                NIL))
              NIL)
             ("3" (HIDE -1 -2) (("3" (GRIND) NIL NIL)) NIL))
            NIL)
           ("2" (HIDE 3) (("2" (ASSERT) NIL NIL)) NIL) ("3" (ASSERT) NIL NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|fs| SKOLEM-CONST-DECL "finseq[(S)]" |op_finseq_monoid| NIL)
    (S SKOLEM-CONST-DECL "(monad?)" |op_finseq_monoid| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|int_min| APPLICATION-JUDGEMENT "{k: int | k <= i AND k <= j}" |real_defs|
     NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL)
    (^ CONST-DECL "finseq" |finite_sequences| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|op_fseq| DEF-DECL "T" |op_finseq_monoid_def| NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|monad?| CONST-DECL "bool" |monad_def| NIL)
    (|one| FORMAL-CONST-DECL "T" |op_finseq_monoid| NIL)
    (* FORMAL-CONST-DECL "[T, T -> T]" |op_finseq_monoid| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (T FORMAL-NONEMPTY-TYPE-DECL NIL |op_finseq_monoid| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|op_subfseq_closed| FORMULA-DECL NIL |op_finseq_monoid| NIL))
   SHOSTAK))
 (|op_fseq_split_TCC1| 0
  (|op_fseq_split_TCC1-1| |nil| 3855169136 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|op_fseq_split| SUBTYPE "(number_fields.-)(op_finseq_monoid.i, 1)" "nat")))
 (|op_fseq_split_TCC2| 0
  (|op_fseq_split_TCC2-1| |nil| 3855169136 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|op_fseq_split| SUBTYPE "(number_fields.-)(length(op_finseq_monoid.fs), 1)"
    "nat")))
 (|op_fseq_split| 0
  (|op_fseq_split-1| |nil| 3855169219
   ("" (SKOSIMP*)
    (("" (EXPAND "finseq_appl")
      (("" (CASE-REPLACE "i!1 = length(fs!1) - 1" :HIDE? T)
        (("1" (ASSERT)
          (("1" (EXPAND "^" 1 2)
            (("1" (EXPAND "op_fseq" 1 3)
              (("1" (LIFT-IF)
                (("1" (PROP)
                  (("1" (ASSERT)
                    (("1" (LEMMA "caret_o_caret")
                      (("1"
                        (INST -1 "length(fs!1) - 2" "length(fs!1) - 1" "fs!1")
                        (("1" (ASSERT)
                          (("1"
                            (CASE-REPLACE "fs!1 ^ (0, length(fs!1) - 1) = fs!1"
                             :HIDE? T)
                            (("1"
                              (NAME-REPLACE "RLS"
                               "op_fseq(fs!1 ^ (0, length(fs!1) - 2)) * fs!1`seq(length(fs!1) - 1)")
                              (("1" (REPLACES -1)
                                (("1" (EXPAND "RLS")
                                  (("1" (REWRITE "op_fseq_composition")
                                    (("1"
                                      (CASE-REPLACE
                                       "fs!1 ^ (length(fs!1) - 1, length(fs!1) - 1) = #(fs!1`seq(length(fs!1) - 1))"
                                       :HIDE? T)
                                      (("1" (REWRITE "op_fseq_singleton") NIL
                                        NIL)
                                       ("2" (HIDE 2)
                                        (("2" (DECOMPOSE-EQUALITY 1)
                                          (("1" (GRIND) NIL NIL)
                                           ("2" (DECOMPOSE-EQUALITY 1)
                                            (("2" (TYPEPRED "x!1")
                                              (("2" (GRIND) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (HIDE (- 2))
                              (("2" (DECOMPOSE-EQUALITY 1)
                                (("1" (EXPAND "^")
                                  (("1" (EXPAND "min") (("1" (PROPAX) NIL NIL))
                                    NIL))
                                  NIL)
                                 ("2" (DECOMPOSE-EQUALITY 1)
                                  (("2" (EXPAND "^") (("2" (PROPAX) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (LEMMA "caret_o")
          (("2" (INST -1 "i!1 - 1" "fs!1")
            (("2" (ASSERT)
              (("2" (LEMMA "add_first_is_o")
                (("2"
                  (INST -1 "fs!1 ^ (1 + i!1, length(fs!1) - 1)"
                   "fs!1`seq(i!1)")
                  (("2"
                    (CASE-REPLACE
                     "add_first(fs!1`seq(i!1), fs!1 ^ (1 + i!1, length(fs!1) - 1)) = fs!1 ^ (i!1, length(fs!1) - 1)"
                     :HIDE? T)
                    (("1" (REPLACES -1)
                      (("1" (NAME-REPLACE "FS!1" "fs!1 ^ (0, i!1 - 1)")
                        (("1" (NAME-REPLACE "FS!2" " fs!1`seq(i!1)")
                          (("1"
                            (NAME-REPLACE "FS!3"
                             "fs!1 ^ (1 + i!1, length(fs!1) - 1)")
                            (("1" (REPLACE -1 2)
                              (("1" (HIDE -)
                                (("1" (REWRITE "op_fseq_composition")
                                  (("1" (REWRITE "op_fseq_composition")
                                    (("1" (REWRITE "op_fseq_singleton")
                                      (("1" (TYPEPRED "S!1")
                                        (("1" (EXPAND "monoid?")
                                          (("1" (FLATTEN)
                                            (("1" (EXPAND "associative?")
                                              (("1" (EXPAND "restrict")
                                                (("1" (INST?)
                                                  (("1" (ASSERT) NIL NIL)
                                                   ("2" (HIDE 3)
                                                    (("2" (EXPAND "FS!3")
                                                      (("2"
                                                        (LEMMA
                                                         "op_subfseq_closed")
                                                        (("2" (INST?) NIL NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("3" (HIDE 3)
                                                    (("3" (EXPAND "FS!1")
                                                      (("3"
                                                        (LEMMA
                                                         "op_subfseq_closed")
                                                        (("3" (INST?) NIL NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (HIDE (- 3))
                      (("2" (DECOMPOSE-EQUALITY 1)
                        (("1" (GRIND) NIL NIL)
                         ("2" (DECOMPOSE-EQUALITY 1) (("2" (GRIND) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|caret_o| FORMULA-DECL NIL |seq_extras| |structures|)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|insert?| CONST-DECL "finseq" |seq_extras| |structures|)
    (O CONST-DECL "finseq" |finite_sequences| NIL)
    (|associative?| CONST-DECL "bool" |operator_defs| NIL)
    (FS!1 SKOLEM-CONST-DECL "finseq[(S!1)]" |op_finseq_monoid| NIL)
    (S!1 SKOLEM-CONST-DECL "(monoid?)" |op_finseq_monoid| NIL)
    (FS!3 SKOLEM-CONST-DECL "finseq[(S!1)]" |op_finseq_monoid| NIL)
    (|monad?| CONST-DECL "bool" |monad_def| NIL)
    (|op_subfseq_closed| FORMULA-DECL NIL |op_finseq_monoid| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (|add_first| CONST-DECL "finseq" |seq_extras| |structures|)
    (|add_first_is_o| FORMULA-DECL NIL |seq_extras| |structures|)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|op_fseq| DEF-DECL "T" |op_finseq_monoid_def| NIL)
    (|caret_o_caret| FORMULA-DECL NIL |seq_extras| |structures|)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (RLS SKOLEM-CONST-DECL "T" |op_finseq_monoid| NIL)
    (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|#| CONST-DECL "finite_sequence[T]" |set2seq| |structures|)
    (|op_fseq_singleton| FORMULA-DECL NIL |op_finseq_monoid| NIL)
    (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL)
    (|int_min| APPLICATION-JUDGEMENT "{k: int | k <= i AND k <= j}" |real_defs|
     NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|op_fseq_composition| FORMULA-DECL NIL |op_finseq_monoid| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|right_identity| FORMULA-DECL NIL |monad| NIL)
    (|empty_seq| CONST-DECL "finseq" |finite_sequences| NIL)
    (^ CONST-DECL "finseq" |finite_sequences| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|monoid?| CONST-DECL "bool" |monoid_def| NIL)
    (|one| FORMAL-CONST-DECL "T" |op_finseq_monoid| NIL)
    (* FORMAL-CONST-DECL "[T, T -> T]" |op_finseq_monoid| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (T FORMAL-NONEMPTY-TYPE-DECL NIL |op_finseq_monoid| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL))
   SHOSTAK))
 (|op_fseq_split_commute_TCC1| 0
  (|op_fseq_split_commute_TCC1-1| |nil| 3855172382 ("" (SUBTYPE-TCC) NIL NIL)
   NIL NIL
   (|op_fseq_split_commute| SUBTYPE "(number_fields.-)(op_finseq_monoid.i, 1)"
    "nat")))
 (|op_fseq_split_commute_TCC2| 0
  (|op_fseq_split_commute_TCC2-1| |nil| 3855172382 ("" (SUBTYPE-TCC) NIL NIL)
   NIL NIL
   (|op_fseq_split_commute| SUBTYPE
    "(number_fields.-)(length(op_finseq_monoid.fs), 1)" "nat")))
 (|op_fseq_split_commute| 0
  (|op_fseq_split_commute-1| |nil| 3855172385
   ("" (SKOSIMP)
    (("" (EXPAND "finseq_appl")
      (("" (REWRITE "op_fseq_composition")
        (("" (LEMMA "op_fseq_split")
          (("" (INST?)
            (("" (EXPAND "finseq_appl")
              (("" (REPLACES -1)
                (("" (TYPEPRED "S!1")
                  (("" (EXPAND "commutative_monoid?")
                    (("" (EXPAND "monoid?")
                      (("" (FLATTEN)
                        (("" (HIDE -1)
                          (("" (EXPAND "associative?")
                            (("" (EXPAND "commutative?")
                              (("" (EXPAND "restrict")
                                ((""
                                  (INST -2 "op_fseq(fs!1 ^ (0, i!1 - 1))"
                                   "fs!1`seq(i!1)")
                                  (("1" (REPLACES -2)
                                    (("1" (INST?)
                                      (("1" (HIDE 2)
                                        (("1" (LEMMA "op_fseq_closed")
                                          (("1"
                                            (INST -1 "S!1"
                                             "^[T](fs!1, (1 + i!1, length(fs!1) - 1))")
                                            (("1" (HIDE 2)
                                              (("1" (SKOSIMP)
                                                (("1" (EXPAND "^")
                                                  (("1" (PROP)
                                                    (("1"
                                                      (TYPEPRED "i!1" "x1!1")
                                                      (("1" (GRIND) NIL NIL))
                                                      NIL)
                                                     ("2"
                                                      (TYPEPRED "i!1" "x1!1")
                                                      (("2" (GRIND) NIL NIL))
                                                      NIL)
                                                     ("3"
                                                      (TYPEPRED
                                                       "fs!1`seq(1 + i!1 + x1!1)")
                                                      (("3" (PROPAX) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (HIDE 2)
                                        (("2" (LEMMA "op_fseq_closed")
                                          (("2"
                                            (INST -1 "S!1"
                                             "^[T](fs!1, (0, i!1 - 1))")
                                            (("2" (HIDE 2)
                                              (("2" (SKOSIMP)
                                                (("2" (EXPAND "^")
                                                  (("2"
                                                    (TYPEPRED "fs!1`seq(x1!1)")
                                                    (("2" (PROPAX) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (HIDE (-1 2))
                                    (("2" (LEMMA "op_fseq_closed")
                                      (("2"
                                        (INST -1 "S!1"
                                         "^[T](fs!1, (0, i!1 - 1))")
                                        (("2" (HIDE 2)
                                          (("2" (SKOSIMP)
                                            (("2" (EXPAND "^")
                                              (("2" (TYPEPRED "fs!1`seq(x1!1)")
                                                (("2" (PROPAX) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|op_fseq_split| FORMULA-DECL NIL |op_finseq_monoid| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|commutative?| CONST-DECL "bool" |operator_defs| NIL)
    (|i!1| SKOLEM-CONST-DECL "{i: below[length(fs!1)] | i /= 0}"
     |op_finseq_monoid| NIL)
    (|fs!1| SKOLEM-CONST-DECL "finseq[(S!1)]" |op_finseq_monoid| NIL)
    (|op_fseq| DEF-DECL "T" |op_finseq_monoid_def| NIL)
    (S!1 SKOLEM-CONST-DECL "(commutative_monoid?)" |op_finseq_monoid| NIL)
    (|op_fseq_closed| FORMULA-DECL NIL |op_finseq_monoid| NIL)
    (|monad?| CONST-DECL "bool" |monad_def| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (|associative?| CONST-DECL "bool" |operator_defs| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|monoid?| CONST-DECL "bool" |monoid_def| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL) (< CONST-DECL "bool" |reals| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|commutative_monoid?| CONST-DECL "bool" |monoid_def| NIL)
    (|one| FORMAL-CONST-DECL "T" |op_finseq_monoid| NIL)
    (* FORMAL-CONST-DECL "[T, T -> T]" |op_finseq_monoid| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (^ CONST-DECL "finseq" |finite_sequences| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (T FORMAL-NONEMPTY-TYPE-DECL NIL |op_finseq_monoid| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|op_fseq_composition| FORMULA-DECL NIL |op_finseq_monoid| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL))
   SHOSTAK))
 (|op_fseq_split_delete| 0
  (|op_fseq_split_delete-1| |nil| 3856625009
   ("" (SKOSIMP)
    (("" (EXPAND "finseq_appl")
      (("" (CASE-REPLACE "i!1 = 0" :HIDE? T)
        (("1" (LEMMA "delete_rest")
          (("1" (INST?)
            (("1" (ASSERT)
              (("1" (REPLACES -1)
                (("1" (EXPAND "op_fseq" 1 1)
                  (("1"
                    (CASE-REPLACE "rest(fs!1) = fs!1 ^ (1, length(fs!1) - 1)")
                    (("1" (HIDE -1)
                      (("1" (TYPEPRED "S!1")
                        (("1" (EXPAND "commutative_monoid?")
                          (("1" (FLATTEN)
                            (("1" (EXPAND "commutative?")
                              (("1" (EXPAND "restrict")
                                (("1" (INST?)
                                  (("1" (HIDE 2)
                                    (("1" (LEMMA "op_fseq_closed")
                                      (("1"
                                        (INST -1 "S!1"
                                         "^(fs!1, (1, length(fs!1) - 1))")
                                        (("1" (HIDE 2)
                                          (("1" (SKOSIMP)
                                            (("1" (TYPEPRED "x1!1")
                                              (("1" (EXPAND "^")
                                                (("1" (LIFT-IF)
                                                  (("1" (PROP)
                                                    (("1" (GRIND) NIL NIL)
                                                     ("2" (GRIND) NIL NIL)
                                                     ("3" (GRIND) NIL NIL)
                                                     ("4" (GRIND) NIL NIL)
                                                     ("5"
                                                      (TYPEPRED
                                                       "fs!1`seq(1 + x1!1)")
                                                      (("5" (PROPAX) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (HIDE 2)
                      (("2" (DECOMPOSE-EQUALITY 1)
                        (("1" (GRIND) NIL NIL)
                         ("2" (DECOMPOSE-EQUALITY 1)
                          (("2" (EXPAND "^")
                            (("2" (LIFT-IF)
                              (("2" (PROP)
                                (("1" (LEMMA "length_rest_0")
                                  (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL))
                                  NIL)
                                 ("2" (LEMMA "length_rest_0")
                                  (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL))
                                  NIL)
                                 ("3" (LEMMA "rest_pos")
                                  (("3" (INST?)
                                    (("3" (ASSERT)
                                      (("3" (EXPAND "finseq_appl")
                                        (("3" (INST?)
                                          (("1" (ASSERT) NIL NIL)
                                           ("2" (TYPEPRED "x!1")
                                            (("2" (HIDE (-2 4))
                                              (("2" (GRIND) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (LEMMA "op_fseq_split_commute")
          (("2" (INST -1 "S!1" "fs!1" "i!1")
            (("1" (EXPAND "finseq_appl")
              (("1" (REPLACES -1)
                (("1" (TYPEPRED "S!1")
                  (("1" (EXPAND "commutative_monoid?")
                    (("1" (FLATTEN)
                      (("1" (EXPAND "commutative?")
                        (("1" (EXPAND "restrict")
                          (("1" (INST?)
                            (("1" (REPLACES -2)
                              (("1"
                                (CASE-REPLACE
                                 "fs!1 ^ (0, i!1 - 1) o fs!1 ^ (i!1 + 1, length(fs!1) - 1) = delete(fs!1, i!1)"
                                 :HIDE? T)
                                (("1" (HIDE (- 3))
                                  (("1" (DECOMPOSE-EQUALITY 1)
                                    (("1" (EXPAND "delete")
                                      (("1" (EXPAND "o ")
                                        (("1" (GRIND) NIL NIL)) NIL))
                                      NIL)
                                     ("2" (DECOMPOSE-EQUALITY 1)
                                      (("2" (EXPAND "o ")
                                        (("2" (EXPAND "delete")
                                          (("2" (LIFT-IF)
                                            (("2" (LIFT-IF)
                                              (("2" (LIFT-IF)
                                                (("2" (PROP)
                                                  (("1" (EXPAND "finseq_appl")
                                                    (("1" (EXPAND "^")
                                                      (("1" (PROPAX) NIL NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (EXPAND "finseq_appl")
                                                    (("2" (EXPAND "^")
                                                      (("2" (ASSERT) NIL NIL))
                                                      NIL))
                                                    NIL)
                                                   ("3" (EXPAND "finseq_appl")
                                                    (("3" (EXPAND "^")
                                                      (("3" (LIFT-IF)
                                                        (("3" (PROP)
                                                          (("1" (GRIND) NIL
                                                            NIL)
                                                           ("2" (GRIND) NIL
                                                            NIL)
                                                           ("3" (GRIND) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("4" (EXPAND "finseq_appl")
                                                    (("4" (EXPAND "^")
                                                      (("4" (LIFT-IF)
                                                        (("4" (PROP)
                                                          (("1"
                                                            (TYPEPRED "x!1")
                                                            (("1" (GRIND) NIL
                                                              NIL))
                                                            NIL)
                                                           ("2"
                                                            (TYPEPRED "x!1")
                                                            (("2" (GRIND) NIL
                                                              NIL))
                                                            NIL)
                                                           ("3"
                                                            (TYPEPRED "i!1")
                                                            (("3" (GRIND) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (ASSERT) NIL NIL))
                                NIL))
                              NIL)
                             ("2" (HIDE 3)
                              (("2" (LEMMA "op_fseq_closed")
                                (("2"
                                  (INST -1 "S!1"
                                   "o[T] (^[T](fs!1, (0, i!1 - 1)), ^[T](fs!1, (1 + i!1, length(fs!1) - 1)))")
                                  (("1" (HIDE 2)
                                    (("1" (SKOSIMP)
                                      (("1" (EXPAND "o")
                                        (("1" (PROP)
                                          (("1" (EXPAND "^")
                                            (("1" (PROP)
                                              (("1" (ASSERT) NIL NIL)
                                               ("2" (TYPEPRED "fs!1`seq(x1!1)")
                                                (("2" (PROPAX) NIL NIL)) NIL))
                                              NIL))
                                            NIL)
                                           ("2" (EXPAND "^")
                                            (("2" (LIFT-IF)
                                              (("2" (LIFT-IF)
                                                (("2" (ASSERT)
                                                  (("2" (PROP)
                                                    (("1" (TYPEPRED "x1!1")
                                                      (("1" (GRIND) NIL NIL))
                                                      NIL)
                                                     ("2" (TYPEPRED "x1!1")
                                                      (("2" (GRIND) NIL NIL))
                                                      NIL)
                                                     ("3"
                                                      (TYPEPRED
                                                       "fs!1`seq(1 - min(i!1, fs!1`length) + i!1 + x1!1)")
                                                      (("3" (PROPAX) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (ASSERT) NIL NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("3" (ASSERT) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (ASSERT) NIL NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|op_fseq_split_commute| FORMULA-DECL NIL |op_finseq_monoid| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|star_closed?| CONST-DECL "bool" |groupoid_def| NIL)
    (|right_identity| FORMULA-DECL NIL |monad| NIL)
    (|left_identity| FORMULA-DECL NIL |monad| NIL)
    (|identity?| CONST-DECL "bool" |operator_defs| NIL)
    (|associative?| CONST-DECL "bool" |operator_defs| NIL)
    (|monoid?| CONST-DECL "bool" |monoid_def| NIL)
    (|nat_min| APPLICATION-JUDGEMENT "{k: nat | k <= i AND k <= j}" |real_defs|
     NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|delete| CONST-DECL "finseq" |seq_extras| |structures|)
    (O CONST-DECL "finseq" |finite_sequences| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|i!1| SKOLEM-CONST-DECL "below[length(fs!1)]" |op_finseq_monoid| NIL)
    (|delete_rest| FORMULA-DECL NIL |seq_extras| |structures|)
    (|op_fseq| DEF-DECL "T" |op_finseq_monoid_def| NIL)
    (|rest_pos| FORMULA-DECL NIL |seq_extras| |structures|)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|x!1| SKOLEM-CONST-DECL "below[rest(fs!1)`length]" |op_finseq_monoid| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|length_rest_0| FORMULA-DECL NIL |seq_extras| |structures|)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|int_min| APPLICATION-JUDGEMENT "{k: int | k <= i AND k <= j}" |real_defs|
     NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL)
    (|empty_seq| CONST-DECL "finseq" |finite_sequences| NIL)
    (|commutative?| CONST-DECL "bool" |operator_defs| NIL)
    (|fs!1| SKOLEM-CONST-DECL "finseq[(S!1)]" |op_finseq_monoid| NIL)
    (S!1 SKOLEM-CONST-DECL "(commutative_monoid?)" |op_finseq_monoid| NIL)
    (|op_fseq_closed| FORMULA-DECL NIL |op_finseq_monoid| NIL)
    (|monad?| CONST-DECL "bool" |monad_def| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (^ CONST-DECL "finseq" |finite_sequences| NIL)
    (|rest| CONST-DECL "finseq" |seq_extras| |structures|)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|commutative_monoid?| CONST-DECL "bool" |monoid_def| NIL)
    (|one| FORMAL-CONST-DECL "T" |op_finseq_monoid| NIL)
    (* FORMAL-CONST-DECL "[T, T -> T]" |op_finseq_monoid| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (T FORMAL-NONEMPTY-TYPE-DECL NIL |op_finseq_monoid| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   SHOSTAK))
 (|op_fseq_same_replace_first_TCC1| 0
  (|op_fseq_same_replace_first_TCC1-1| |nil| 3856625143
   ("" (SUBTYPE-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (T FORMAL-NONEMPTY-TYPE-DECL NIL |op_finseq_monoid| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (* FORMAL-CONST-DECL "[T, T -> T]" |op_finseq_monoid| NIL)
    (|one| FORMAL-CONST-DECL "T" |op_finseq_monoid| NIL)
    (|monoid?| CONST-DECL "bool" |monoid_def| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|star_closed?| CONST-DECL "bool" |groupoid_def| NIL)
    (|right_identity| FORMULA-DECL NIL |monad| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (|left_identity| FORMULA-DECL NIL |monad| NIL)
    (|identity?| CONST-DECL "bool" |operator_defs| NIL)
    (|monad?| CONST-DECL "bool" |monad_def| NIL)
    (|associative?| CONST-DECL "bool" |operator_defs| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL))
   NIL (|op_fseq_same_replace_first| SUBTYPE "0" "below[length(fs)]")))
 (|op_fseq_same_replace_first| 0
  (|op_fseq_same_replace_first-1| |nil| 3856625146
   ("" (SKOSIMP)
    (("" (EXPAND "finseq_appl")
      (("" (EXPAND "op_fseq")
        (("" (LIFT-IF)
          (("" (PROP)
            (("1" (GRIND) NIL NIL)
             ("2" (LEMMA "nth_x")
              (("2" (EXPAND "finseq_appl")
                (("2" (INST?)
                  (("2" (REPLACES -1)
                    (("2"
                      (CASE-REPLACE
                       "replace(x!1 * fs!1`seq(0), fs!1, 0) ^ (1, length(replace(x!1 * fs!1`seq(0), fs!1, 0)) - 1) = fs!1 ^ (1, length(fs!1) - 1)"
                       :HIDE? T)
                      (("1" (TYPEPRED "S!1")
                        (("1" (EXPAND "monoid?")
                          (("1" (FLATTEN)
                            (("1" (HIDE -1)
                              (("1" (EXPAND "associative?")
                                (("1" (EXPAND "restrict")
                                  (("1" (INST?)
                                    (("1" (REPLACES -1) NIL NIL)
                                     ("2" (HIDE 3)
                                      (("2" (LEMMA "op_fseq_closed")
                                        (("2"
                                          (INST -1 "S!1"
                                           "^[T](fs!1, (1, length(fs!1) - 1))")
                                          (("2" (ASSERT) NIL NIL)) NIL))
                                        NIL))
                                      NIL)
                                     ("3" (ASSERT) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (HIDE 3)
                        (("2" (DECOMPOSE-EQUALITY 1)
                          (("1" (GRIND) NIL NIL)
                           ("2" (DECOMPOSE-EQUALITY 1)
                            (("2" (EXPAND "^")
                              (("2" (LIFT-IF)
                                (("2" (LIFT-IF)
                                  (("2" (LIFT-IF)
                                    (("2" (PROP)
                                      (("1" (GRIND) NIL NIL)
                                       ("2" (GRIND) NIL NIL)
                                       ("3" (GRIND) NIL NIL)
                                       ("4" (GRIND) NIL NIL)
                                       ("5" (EXPAND "replace")
                                        (("5" (EXPAND "finseq_appl")
                                          (("5" (PROPAX) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("3" (ASSERT) NIL NIL) ("4" (ASSERT) NIL NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|nth_x| FORMULA-DECL NIL |seq_extras| |structures|)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (* FORMAL-CONST-DECL "[T, T -> T]" |op_finseq_monoid| NIL)
    (|one| FORMAL-CONST-DECL "T" |op_finseq_monoid| NIL)
    (|monoid?| CONST-DECL "bool" |monoid_def| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL) (< CONST-DECL "bool" |reals| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (^ CONST-DECL "finseq" |finite_sequences| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (|monad?| CONST-DECL "bool" |monad_def| NIL)
    (|op_fseq_closed| FORMULA-DECL NIL |op_finseq_monoid| NIL)
    (S!1 SKOLEM-CONST-DECL "(monoid?)" |op_finseq_monoid| NIL)
    (|fs!1| SKOLEM-CONST-DECL "{fs: finseq[(S!1)] | length(fs) /= 0}"
     |op_finseq_monoid| NIL)
    (|associative?| CONST-DECL "bool" |operator_defs| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|x!1| SKOLEM-CONST-DECL "(S!1)" |op_finseq_monoid| NIL)
    (|empty_seq| CONST-DECL "finseq" |finite_sequences| NIL)
    (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_min| APPLICATION-JUDGEMENT "{k: int | k <= i AND k <= j}" |real_defs|
     NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|replace| CONST-DECL "finseq" |seq_extras| |structures|)
    (T FORMAL-NONEMPTY-TYPE-DECL NIL |op_finseq_monoid| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|op_fseq| DEF-DECL "T" |op_finseq_monoid_def| NIL))
   SHOSTAK))
 (|op_fseq_same_replace_last_TCC1| 0
  (|op_fseq_same_replace_last_TCC1-1| |nil| 3856625143
   ("" (SUBTYPE-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (T FORMAL-NONEMPTY-TYPE-DECL NIL |op_finseq_monoid| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (* FORMAL-CONST-DECL "[T, T -> T]" |op_finseq_monoid| NIL)
    (|one| FORMAL-CONST-DECL "T" |op_finseq_monoid| NIL)
    (|monoid?| CONST-DECL "bool" |monoid_def| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|star_closed?| CONST-DECL "bool" |groupoid_def| NIL)
    (|right_identity| FORMULA-DECL NIL |monad| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (|left_identity| FORMULA-DECL NIL |monad| NIL)
    (|identity?| CONST-DECL "bool" |operator_defs| NIL)
    (|monad?| CONST-DECL "bool" |monad_def| NIL)
    (|associative?| CONST-DECL "bool" |operator_defs| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL))
   NIL
   (|op_fseq_same_replace_last| SUBTYPE
    "(number_fields.-)(length(op_finseq_monoid.fs), 1)" "below[length(fs)]")))
 (|op_fseq_same_replace_last| 0
  (|op_fseq_same_replace_last-1| |nil| 3856625171
   ("" (SKOSIMP)
    (("" (EXPAND "finseq_appl")
      (("" (CASE-REPLACE "length(fs!1) = 1")
        (("1" (ASSERT)
          (("1" (EXPAND "op_fseq")
            (("1" (EXPAND "replace")
              (("1" (EXPAND "^")
                (("1" (EXPAND "op_fseq")
                  (("1" (LIFT-IF)
                    (("1" (PROP)
                      (("1" (ASSERT) NIL NIL)
                       ("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (LEMMA "op_fseq_split")
          (("2" (INST-CP -1 "S!1" "fs!1" "length(fs!1) - 1")
            (("1" (EXPAND "finseq_appl")
              (("1" (EXPAND "^" -2 2)
                (("1" (EXPAND "op_fseq" -2 3)
                  (("1" (LIFT-IF)
                    (("1" (PROP)
                      (("1" (ASSERT)
                        (("1" (REPLACE -2 2)
                          (("1" (HIDE -2)
                            (("1"
                              (INST -2 "S!1"
                               "replace(fs!1`seq(length(fs!1) - 1) * x!1, fs!1, length(fs!1) - 1)"
                               "length(fs!1) - 1")
                              (("1" (EXPAND "replace" -2 (3 4))
                                (("1" (EXPAND "^" -2 2)
                                  (("1" (EXPAND "op_fseq" -2 3)
                                    (("1" (ASSERT)
                                      (("1"
                                        (CASE-REPLACE
                                         "replace(fs!1`seq(length(fs!1) - 1) * x!1, fs!1, length(fs!1) - 1) ^ (0, length(fs!1) - 2) = fs!1 ^ (0, length(fs!1) - 2)"
                                         :HIDE? T)
                                        (("1" (REPLACES -2)
                                          (("1" (TYPEPRED "S!1")
                                            (("1" (EXPAND "monoid?")
                                              (("1" (FLATTEN)
                                                (("1" (HIDE (-1 -3))
                                                  (("1" (EXPAND "associative?")
                                                    (("1" (EXPAND "restrict")
                                                      (("1" (INST?)
                                                        (("1" (HIDE 3)
                                                          (("1"
                                                            (LEMMA
                                                             "op_fseq_closed")
                                                            (("1"
                                                              (INST -1 "S!1"
                                                               "^[T](fs!1, (0, length(fs!1) - 2))")
                                                              (("1" (HIDE 2)
                                                                (("1" (SKOSIMP)
                                                                  (("1"
                                                                    (EXPAND
                                                                     "^")
                                                                    (("1"
                                                                      (TYPEPRED
                                                                       "fs!1`seq(x1!1)")
                                                                      (("1"
                                                                        (PROPAX)
                                                                        NIL
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (HIDE (-2 3))
                                          (("2" (DECOMPOSE-EQUALITY 1)
                                            (("1" (GRIND) NIL NIL)
                                             ("2" (DECOMPOSE-EQUALITY 1)
                                              (("2" (EXPAND "^")
                                                (("2" (LIFT-IF)
                                                  (("2" (PROP)
                                                    (("1" (GRIND) NIL NIL)
                                                     ("2" (TYPEPRED "x!2")
                                                      (("2" (GRIND) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (HIDE 3) (("2" (GRIND) NIL NIL)) NIL)
                               ("3" (SKOSIMP)
                                (("3" (HIDE 3)
                                  (("3" (EXPAND "replace")
                                    (("3" (PROP)
                                      (("1" (EXPAND "finseq_appl")
                                        (("1" (TYPEPRED "fs!1`seq(x1!1)")
                                          (("1" (PROPAX) NIL NIL)) NIL))
                                        NIL)
                                       ("2" (TYPEPRED "S!1")
                                        (("2" (EXPAND "monoid?")
                                          (("2" (EXPAND "monad?")
                                            (("2" (FLATTEN)
                                              (("2" (HIDE (-2 -3 -4))
                                                (("2" (EXPAND "star_closed?")
                                                  (("2" (INST?)
                                                    (("2" (EXPAND "member")
                                                      (("2" (PROPAX) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (HIDE (- 3)) (("2" (GRIND) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (ASSERT) NIL NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|op_fseq_split| FORMULA-DECL NIL |op_finseq_monoid| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|x!1| SKOLEM-CONST-DECL "(S!1)" |op_finseq_monoid| NIL)
    (|int_min| APPLICATION-JUDGEMENT "{k: int | k <= i AND k <= j}" |real_defs|
     NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (|monad?| CONST-DECL "bool" |monad_def| NIL)
    (|op_fseq_closed| FORMULA-DECL NIL |op_finseq_monoid| NIL)
    (|associative?| CONST-DECL "bool" |operator_defs| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|star_closed?| CONST-DECL "bool" |groupoid_def| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (S!1 SKOLEM-CONST-DECL "(monoid?)" |op_finseq_monoid| NIL)
    (|fs!1| SKOLEM-CONST-DECL "{fs: finseq[(S!1)] | length(fs) /= 0}"
     |op_finseq_monoid| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|minus_u8_u8| APPLICATION-JUDGEMENT "int16" |integertypes| NIL)
    (|minus_i32_u32| APPLICATION-JUDGEMENT "int64" |integertypes| NIL)
    (|minus_i16_u16| APPLICATION-JUDGEMENT "int32" |integertypes| NIL)
    (|odd_minus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|replace| CONST-DECL "finseq" |seq_extras| |structures|)
    (|right_identity| FORMULA-DECL NIL |monad| NIL)
    (|empty_seq| CONST-DECL "finseq" |finite_sequences| NIL)
    (^ CONST-DECL "finseq" |finite_sequences| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|op_fseq| DEF-DECL "T" |op_finseq_monoid_def| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|monoid?| CONST-DECL "bool" |monoid_def| NIL)
    (|one| FORMAL-CONST-DECL "T" |op_finseq_monoid| NIL)
    (* FORMAL-CONST-DECL "[T, T -> T]" |op_finseq_monoid| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (T FORMAL-NONEMPTY-TYPE-DECL NIL |op_finseq_monoid| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   SHOSTAK))
 (|heading_fseq_TCC1| 0
  (|heading_fseq_TCC1-1| |nil| 3884348736 ("" (SUBTYPE-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (T FORMAL-NONEMPTY-TYPE-DECL NIL |op_finseq_monoid| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (< CONST-DECL "bool" |reals| NIL))
   NIL
   (|heading_fseq| SUBTYPE "(number_fields.-)(op_finseq_monoid.i, 1)"
    "below[fs`length]")))
 (|heading_fseq_TCC2| 0
  (|heading_fseq_TCC2-1| |nil| 3884348736 ("" (SUBTYPE-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (T FORMAL-NONEMPTY-TYPE-DECL NIL |op_finseq_monoid| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (< CONST-DECL "bool" |reals| NIL))
   NIL (|heading_fseq| SUBTYPE "op_finseq_monoid.n" "below[fs`length]")))
 (|times_heading_fseq| 0
  (|times_heading_fseq-1| |nil| 3884348785
   ("" (SKEEP)
    (("" (CASE "length(fs) = 0")
      (("1" (GRIND) NIL NIL)
       ("2" (CASE "n >= length(fs)")
        (("1" (GRIND) NIL NIL)
         ("2" (CASE "n=0")
          (("1" (GRIND) NIL NIL)
           ("2" (EXPAND "heading_fseq")
            (("2" (LIFT-IF)
              (("2" (PROP)
                (("2" (HIDE 1)
                  (("2" (LEMMA "op_fseq_split_commute")
                    (("2" (EXPAND "finseq_appl")
                      (("2" (INST?)
                        (("1" (REPLACES -1)
                          (("1" (LEMMA "op_fseq_composition")
                            (("1"
                              (INST -1 "#(fs`seq(n))"
                               "fs ^ (0, n - 1) o fs ^ (1 + n,
 length(fs) - 1)")
                              (("1"
                                (CASE-REPLACE
                                 "op_fseq( #(fs`seq(n))) = fs`seq(n)")
                                (("1" (REPLACE -2 1 RL)
                                  (("1" (HIDE -)
                                    (("1"
                                      (CASE "#(fs`seq(n)) o
               (fs ^ (0, n - 1) o fs ^ (1 + n, length(fs) - 1)) = (# length := length(fs),
                  seq
                    := LAMBDA (i: below[length(fs)]):
                        
 IF i > n THEN fs`seq(i)
                         ELSIF i > 0 THEN fs`seq(i - 1)
                         ELSE fs`seq(n)
      
                   ENDIF #)")
                                      (("1" (ASSERT)
                                        (("1" (REPLACES -1) NIL NIL)) NIL)
                                       ("2" (HIDE 2)
                                        (("2" (DECOMPOSE-EQUALITY)
                                          (("1" (GRIND) NIL NIL)
                                           ("2" (DECOMPOSE-EQUALITY)
                                            (("1" (GRIND)
                                              (("1" (TYPEPRED "x!1")
                                                (("1" (GRIND) NIL NIL)) NIL)
                                               ("2" (TYPEPRED "x!1")
                                                (("2" (GRIND) NIL NIL)) NIL))
                                              NIL)
                                             ("2" (SKEEP)
                                              (("2" (GRIND) NIL NIL)) NIL)
                                             ("3" (GRIND) NIL NIL))
                                            NIL)
                                           ("3" (GRIND) NIL NIL))
                                          NIL))
                                        NIL)
                                       ("3" (HIDE 2) (("3" (GRIND) NIL NIL))
                                        NIL)
                                       ("4" (ASSERT) NIL NIL)
                                       ("5" (ASSERT) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (HIDE -1 2)
                                  (("2" (EXPAND "op_fseq")
                                    (("2" (GRIND) NIL NIL)) NIL))
                                  NIL))
                                NIL)
                               ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (ASSERT) NIL NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|commutative_monoid?| CONST-DECL "bool" |monoid_def| NIL)
    (|one| FORMAL-CONST-DECL "T" |op_finseq_monoid| NIL)
    (* FORMAL-CONST-DECL "[T, T -> T]" |op_finseq_monoid| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (T FORMAL-NONEMPTY-TYPE-DECL NIL |op_finseq_monoid| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|op_fseq| DEF-DECL "T" |op_finseq_monoid_def| NIL)
    (|heading_fseq| CONST-DECL "finseq[T]" |op_finseq_monoid| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|#| CONST-DECL "finite_sequence[T]" |set2seq| |structures|)
    (O CONST-DECL "finseq" |finite_sequences| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|nat_min| APPLICATION-JUDGEMENT "{k: nat | k <= i AND k <= j}" |real_defs|
     NIL)
    (|right_identity| FORMULA-DECL NIL |monad| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|op_fseq_composition| FORMULA-DECL NIL |op_finseq_monoid| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|n| SKOLEM-CONST-DECL "nat" |op_finseq_monoid| NIL)
    (S SKOLEM-CONST-DECL "(commutative_monoid?)" |op_finseq_monoid| NIL)
    (|fs| SKOLEM-CONST-DECL "finseq[(S)]" |op_finseq_monoid| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|op_fseq_split_commute| FORMULA-DECL NIL |op_finseq_monoid| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|int_min| APPLICATION-JUDGEMENT "{k: int | k <= i AND k <= j}" |real_defs|
     NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (^ CONST-DECL "finseq" |finite_sequences| NIL)
    (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL)
    (|empty_seq| CONST-DECL "finseq" |finite_sequences| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL))
   SHOSTAK)))

