(|cyclic_group| (|IMP_group_TCC1| 0 (|IMP_group_TCC1-1| |nil| 3407083357 ("" (LEMMA "fullset_is_group") (("" (PROPAX) NIL NIL)) NIL) ((|fullset_is_group| FORMULA-DECL NIL |cyclic_group| NIL)) NIL (|IMP_group| ASSUMING "group[cyclic_group.T, cyclic_group.*, cyclic_group.one].group" "fullset_is_group: ASSUMPTION group_def[group.T, group.*, group.one].group?(sets[group.T].fullset)"))) (|generated_by_lem| 0 (|generated_by_lem-1| |nil| 3396976913 ("" (SKOSIMP*) (("" (EXPAND "generated_by") (("" (INST?) NIL NIL)) NIL)) NIL) ((|generated_by| CONST-DECL "group" |group| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)) SHOSTAK)) (|generated_is_subgroup| 0 (|generated_is_subgroup-2| "" 3790093321 ("" (SKOSIMP*) (("" (TYPEPRED "generated_by(a!1)") (("" (EXPAND "subgroup?") (("" (EXPAND "subset?") (("" (SKOSIMP*) (("" (ASSERT) (("" (EXPAND "generated_by" -3) (("" (SKOSIMP) (("" (LEMMA "expt_member" ("G" "G!1" "a" "a!1" "i" "i!1")) (("" (EXPAND "member") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|generated_by| CONST-DECL "group" |group| NIL) (|group| NONEMPTY-TYPE-EQ-DECL NIL |group| NIL) (|group?| CONST-DECL "bool" |group_def| NIL) (|one| FORMAL-CONST-DECL "T" |cyclic_group| NIL) (* FORMAL-CONST-DECL "[T, T -> T]" |cyclic_group| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (T FORMAL-NONEMPTY-TYPE-DECL NIL |cyclic_group| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|subset?| CONST-DECL "bool" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|expt_member| FORMULA-DECL NIL |group| NIL) (|subgroup?| CONST-DECL "bool" |group_def| NIL)) SHOSTAK) (|generated_is_subgroup-1| |nil| 3293271210 ("" (SKOSIMP*) (("" (TYPEPRED "generated_by(a!1)") (("" (EXPAND "subgroup?") (("" (EXPAND "subset?") (("" (SKOSIMP*) (("" (ASSERT) (("" (EXPAND "generated_by" -3) (("" (EXPAND "member") (("" (SKOSIMP) (("" (LEMMA "expt_member" ("G" "G!1" "a" "a!1" "i" "i!1")) (("" (EXPAND "member") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) SHOSTAK)) (|generated_by_is_finite| 0 (|generated_by_is_finite-2| |nil| 3407003916 ("" (SKOSIMP*) (("" (ASSERT) (("" (REWRITE "finite_group_surj") (("" (HIDE 2) (("" (EXPAND "generated_by") (("" (INST + "k!1" "(LAMBDA (n: below[k!1]): a!1^n)") (("1" (EXPAND "surjective?") (("1" (SKOSIMP*) (("1" (TYPEPRED "y!1") (("1" (REPLACE -2) (("1" (ASSERT) (("1" (SKOSIMP*) (("1" (REPLACE -1) (("1" (LEMMA "euclid_int") (("1" (INST - "k!1" "i!1") (("1" (SKOSIMP*) (("1" (REPLACE -1) (("1" (TYPEPRED "r!1") (("1" (INST + "r!1") (("1" (LEMMA "expt_mult") (("1" (INST - "a!1" "k!1*q!1" "r!1") (("1" (ASSERT) (("1" (REPLACE -1 + RL) (("1" (LEMMA "expt_expt") (("1" (INST?) (("1" (REPLACE -1 + RL) (("1" (REPLACE -7) (("1" (ASSERT) (("1" (REWRITE "one_expt") (("1" (REWRITE "left_identity") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (REPLACE -1) (("2" (ASSERT) (("2" (INST + "n!1") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|a!1| SKOLEM-CONST-DECL "T" |cyclic_group| NIL) (^ CONST-DECL "T" |group| NIL) (S!1 SKOLEM-CONST-DECL "set[T]" |cyclic_group| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|k!1| SKOLEM-CONST-DECL "posnat" |cyclic_group| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (< CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|euclid_int| FORMULA-DECL NIL |euclidean_division| NIL) (|mod| NONEMPTY-TYPE-EQ-DECL NIL |euclidean_division| NIL) (|expt_mult| FORMULA-DECL NIL |group| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|expt_expt| FORMULA-DECL NIL |group| NIL) (|left_identity| FORMULA-DECL NIL |monad| NIL) (|one_expt| FORMULA-DECL NIL |group| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|surjective?| CONST-DECL "bool" |functions| NIL) (|generated_by| CONST-DECL "group" |group| NIL) (|one| FORMAL-CONST-DECL "T" |cyclic_group| NIL) (* FORMAL-CONST-DECL "[T, T -> T]" |cyclic_group| NIL) (T FORMAL-NONEMPTY-TYPE-DECL NIL |cyclic_group| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|finite_group_surj| FORMULA-DECL NIL |group_def| NIL)) NIL) (|generated_by_is_finite-1| |nil| 3407003019 ("" (SKOSIMP*) (("" (ASSERT) (("" (REWRITE "finite_group_surj") (("" (HIDE 2) (("" (EXPAND "generated_by") (("" (INST + "k!1" "(LAMBDA (n: below[k!1]): group[T,*,one].^(a!1,n))") (("1" (EXPAND "surjective?") (("1" (SKOSIMP*) (("1" (TYPEPRED "y!1") (("1" (REPLACE -2) (("1" (ASSERT) (("1" (SKOSIMP*) (("1" (REPLACE -1) (("1" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|cyclic_abelian| 0 (|cyclic_abelian-1| |nil| 3407083506 ("" (SKOSIMP*) (("" (EXPAND "abelian_group?") (("" (ASSERT) (("" (EXPAND "cyclic?") (("" (SKOSIMP*) (("" (ASSERT) (("" (EXPAND "commutative?") (("" (SKOSIMP*) (("" (EXPAND "restrict") (("" (TYPEPRED "x!1") (("" (TYPEPRED "y!1") (("" (REPLACE -3) (("" (HIDE -3) (("" (EXPAND "generated_by") (("" (SKOSIMP*) (("" (REPLACE -1) (("" (HIDE -1) (("" (REPLACE -1) (("" (HIDE -1) (("" (REWRITE "expt_mult") (("" (REWRITE "expt_mult") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|abelian_group?| CONST-DECL "bool" |group_def| NIL) (|cyclic?| CONST-DECL "boolean" |group| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (T FORMAL-NONEMPTY-TYPE-DECL NIL |cyclic_group| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (* FORMAL-CONST-DECL "[T, T -> T]" |cyclic_group| NIL) (|one| FORMAL-CONST-DECL "T" |cyclic_group| NIL) (|group?| CONST-DECL "bool" |group_def| NIL) (|group| NONEMPTY-TYPE-EQ-DECL NIL |group| NIL) (|generated_by| CONST-DECL "group" |group| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|expt_mult| FORMULA-DECL NIL |group| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (|commutative?| CONST-DECL "bool" |operator_defs| NIL)) NIL)) (|cyclic_subgroup| 0 (|cyclic_subgroup-4| "" 3883107718 ("" (SKOSIMP*) (("" (CASE "H!1 = one_group") (("1" (EXPAND "cyclic?" 1) (("1" (INST + "one") (("1" (HIDE -2 -3) (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("1" (EXPAND "one_group") (("1" (EXPAND "singleton") (("1" (EXPAND "generated_by") (("1" (IFF 1) (("1" (PROP) (("1" (INST + "1") (("1" (GRIND) NIL NIL)) NIL) ("2" (SKOSIMP*) (("2" (REPLACE -1) (("2" (HIDE -1) (("2" (REWRITE "one_expt") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "one_in") NIL NIL)) NIL)) NIL) ("2" (EXPAND "cyclic?") (("2" (SKOSIMP*) (("2" (CASE "(EXISTS (h:T),(m:posnat): H!1(h) AND h /= one AND h = a!1^m)") (("1" (SKOSIMP*) (("1" (NAME "s" "min({n: posnat | H!1(a!1^n)})") (("1" (INST + "a!1^s") (("1" (APPLY-EXTENSIONALITY 3 :HIDE? T) (("1" (IFF 1) (("1" (PROP) (("1" (EXPAND "subgroup?") (("1" (EXPAND "subset?") (("1" (ASSERT) (("1" (INST?) (("1" (ASSERT) (("1" (REPLACE -6 -5) (("1" (EXPAND "generated_by") (("1" (SKOSIMP*) (("1" (LEMMA "euclid_int") (("1" (INST - "s" "i!1") (("1" (SKOSIMP*) (("1" (TYPEPRED "r!1") (("1" (CASE "a!1^r!1 = (a!1^i!1)*(a!1^s)^(-q!1)") (("1" (INST + "q!1") (("1" (CASE "r!1 = 0") (("1" (ASSERT) (("1" (REPLACE -1) (("1" (ASSERT) (("1" (REPLACE -4) (("1" (REWRITE "expt_expt") (("1" (REWRITE "expt_expt") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "min({n: posnat | H!1(a!1 ^ n)})") (("2" (INST -3 "r!1") (("1" (ASSERT) (("1" (REPLACE -7) (("1" (LEMMA "expt_member") (("1" (INST - "H!1" "a!1^s" "-q!1") (("1" (ASSERT) (("1" (REPLACE -4) (("1" (REWRITE "star_closed") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -6 -7 -8 2 3 4) (("2" (CASE "a!1 ^ i!1 = a!1^(s * q!1 + r!1)") (("1" (HIDE -3 -4) (("1" (REWRITE "expt_mult" - :DIR RL) (("1" (REWRITE "expt_expt" - :DIR RL) (("1" (LEMMA "cancel_left") (("1" (INST - "a!1 ^ i!1" "(a!1 ^ s) ^ q!1 * a!1 ^ r!1" "(a!1 ^ s) ^ (-q!1)") (("1" (FLATTEN) (("1" (HIDE -1) (("1" (SPLIT -1) (("1" (CASE-REPLACE "(a!1 ^ s) ^ (-q!1) * ((a!1 ^ s) ^ q!1 * a!1 ^ r!1) = a!1^r!1") (("1" (HIDE -1) (("1" (LEMMA "cyclic_abelian") (("1" (INST - "G!1") (("1" (ASSERT) (("1" (SPLIT -1) (("1" (EXPAND "abelian_group?") (("1" (GROUND) (("1" (EXPAND "commutative?") (("1" (ASSERT) (("1" (EXPAND "restrict") (("1" (ASSERT) (("1" (INST - "(a!1 ^ s) ^ (-q!1)" "a!1 ^ i!1") (("1" (ASSERT) NIL NIL) ("2" (HIDE 2) (("2" (REVEAL -10) (("2" (REPLACE -1 +) (("2" (ASSERT) (("2" (INST + "i!1") NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (REVEAL -10) (("3" (REPLACE -1 +) (("3" (ASSERT) (("3" (INST + "-s*q!1") (("3" (ASSERT) (("3" (REWRITE "expt_expt") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "cyclic?") (("2" (REVEAL -9) (("2" (EXPAND "generated_by") (("2" (ASSERT) (("2" (INST + "a!1") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (REWRITE "assoc") (("2" (REWRITE "expt_neg") (("2" (REWRITE "expt_inv_left") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "generated_by") (("2" (SKOSIMP*) (("2" (TYPEPRED "min({n: posnat | H!1(a!1 ^ n)})") (("2" (REPLACE -5) (("2" (LEMMA "expt_member") (("2" (ASSERT) (("2" (INST - "H!1" "a!1^s" "i!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "min({n: posnat | H!1(a!1 ^ n)})") (("2" (REPLACE -4) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "nonempty?") (("2" (EXPAND "empty?") (("2" (ASSERT) (("2" (INST - "m!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (APPLY-EXTENSIONALITY 2 :HIDE? T) (("2" (EXPAND "one_group") (("2" (EXPAND "singleton") (("2" (IFF 1) (("2" (PROP) (("1" (EXPAND "subgroup?") (("1" (EXPAND "subset?") (("1" (ASSERT) (("1" (INST? -) (("1" (ASSERT) (("1" (REPLACE -3 -) (("1" (EXPAND "generated_by") (("1" (SKOSIMP*) (("1" (CASE "i!1 >= 0") (("1" (INST + "a!1^i!1" "i!1") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) (("2" (CASE-REPLACE "i!1 = 0") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (INST + "inv(a!1)^i!1" "-i!1") (("1" (REWRITE "expt_neg") (("1" (REPLACE -2) (("1" (LEMMA "inv_in") (("1" (INST - "H!1" "a!1^i!1") (("1" (ASSERT) (("1" (REWRITE "inv_expt") (("1" (ASSERT) (("1" (FLATTEN) (("1" (LEMMA "cancel_left") (("1" (INST - "x!1" "a!1 ^ i!1" "one") (("1" (FLATTEN) (("1" (HIDE -1) (("1" (SPLIT -1) (("1" (REWRITE "one_left" -1) (("1" (REPLACE -4 - :DIR RL) (("1" (REWRITE "expt_inv_left") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (REPLACE -1) (("2" (REWRITE "one_in") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|cyclic_subgroup-3| "" 3790093323 ("" (SKOSIMP*) (("" (CASE "H!1 = one_group") (("1" (EXPAND "cyclic?" 1) (("1" (INST + "one") (("1" (HIDE -2 -3) (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("1" (EXPAND "one_group") (("1" (EXPAND "singleton") (("1" (EXPAND "generated_by") (("1" (IFF 1) (("1" (PROP) (("1" (INST + "1") (("1" (GRIND) NIL NIL)) NIL) ("2" (SKOSIMP*) (("2" (REPLACE -1) (("2" (HIDE -1) (("2" (REWRITE "one_expt") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "one_in") NIL NIL)) NIL)) NIL) ("2" (EXPAND "cyclic?") (("2" (SKOSIMP*) (("2" (CASE "(EXISTS (h:T),(m:posnat): H!1(h) AND h /= one AND h = a!1^m)") (("1" (SKOSIMP*) (("1" (NAME S "min({n: posnat | H!1(a!1^n)})") (("1" (INST + "a!1^s") (("1" (APPLY-EXTENSIONALITY 3 :HIDE? T) (("1" (IFF 1) (("1" (PROP) (("1" (EXPAND "subgroup?") (("1" (EXPAND "subset?") (("1" (ASSERT) (("1" (INST?) (("1" (ASSERT) (("1" (REPLACE -6 -5) (("1" (EXPAND "generated_by") (("1" (SKOSIMP*) (("1" (LEMMA "euclid_int") (("1" (INST - "s" "i!1") (("1" (SKOSIMP*) (("1" (TYPEPRED "r!1") (("1" (CASE "a!1^r!1 = (a!1^i!1)*(a!1^s)^(-q!1)") (("1" (INST + "q!1") (("1" (CASE "r!1 = 0") (("1" (ASSERT) (("1" (REPLACE -1) (("1" (ASSERT) (("1" (REPLACE -4) (("1" (REWRITE "expt_expt") (("1" (REWRITE "expt_expt") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "min({n: posnat | H!1(a!1 ^ n)})") (("2" (INST -3 "r!1") (("1" (ASSERT) (("1" (REPLACE -7) (("1" (LEMMA "expt_member") (("1" (INST - "H!1" "a!1^s" "-q!1") (("1" (ASSERT) (("1" (REPLACE -4) (("1" (REWRITE "star_closed") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -6 -7 -8 2 3 4) (("2" (CASE "a!1 ^ i!1 = a!1^(s * q!1 + r!1)") (("1" (HIDE -3 -4) (("1" (REWRITE "expt_mult" - :DIR RL) (("1" (REWRITE "expt_expt" - :DIR RL) (("1" (LEMMA "cancel_left") (("1" (INST - "a!1 ^ i!1" "(a!1 ^ s) ^ q!1 * a!1 ^ r!1" "(a!1 ^ s) ^ (-q!1)") (("1" (FLATTEN) (("1" (HIDE -1) (("1" (SPLIT -1) (("1" (CASE-REPLACE "(a!1 ^ s) ^ (-q!1) * ((a!1 ^ s) ^ q!1 * a!1 ^ r!1) = a!1^r!1") (("1" (HIDE -1) (("1" (LEMMA "cyclic_abelian") (("1" (INST - "G!1") (("1" (ASSERT) (("1" (SPLIT -1) (("1" (EXPAND "abelian_group?") (("1" (GROUND) (("1" (EXPAND "commutative?") (("1" (ASSERT) (("1" (EXPAND "restrict") (("1" (ASSERT) (("1" (INST - "(a!1 ^ s) ^ (-q!1)" "a!1 ^ i!1") (("1" (ASSERT) NIL NIL) ("2" (HIDE 2) (("2" (REVEAL -10) (("2" (REPLACE -1 +) (("2" (ASSERT) (("2" (INST + "i!1") NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (REVEAL -10) (("3" (REPLACE -1 +) (("3" (ASSERT) (("3" (INST + "-s*q!1") (("3" (ASSERT) (("3" (REWRITE "expt_expt") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "cyclic?") (("2" (REVEAL -9) (("2" (EXPAND "generated_by") (("2" (ASSERT) (("2" (INST + "a!1") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (REWRITE "assoc") (("2" (REWRITE "expt_neg") (("2" (REWRITE "expt_inv_left") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "generated_by") (("2" (SKOSIMP*) (("2" (TYPEPRED "min({n: posnat | H!1(a!1 ^ n)})") (("2" (REPLACE -5) (("2" (LEMMA "expt_member") (("2" (ASSERT) (("2" (INST - "H!1" "a!1^s" "i!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "min({n: posnat | H!1(a!1 ^ n)})") (("2" (REPLACE -4) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "nonempty?") (("2" (EXPAND "empty?") (("2" (ASSERT) (("2" (INST - "m!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (APPLY-EXTENSIONALITY 2 :HIDE? T) (("2" (EXPAND "one_group") (("2" (EXPAND "singleton") (("2" (IFF 1) (("2" (PROP) (("1" (EXPAND "subgroup?") (("1" (EXPAND "subset?") (("1" (ASSERT) (("1" (INST? -) (("1" (ASSERT) (("1" (REPLACE -3 -) (("1" (EXPAND "generated_by") (("1" (SKOSIMP*) (("1" (CASE "i!1 >= 0") (("1" (INST + "a!1^i!1" "i!1") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) (("2" (CASE-REPLACE "i!1 = 0") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (INST + "inv(a!1)^i!1" "-i!1") (("1" (REWRITE "expt_neg") (("1" (REPLACE -2) (("1" (LEMMA "inv_in") (("1" (INST - "H!1" "a!1^i!1") (("1" (ASSERT) (("1" (REWRITE "inv_expt") (("1" (ASSERT) (("1" (FLATTEN) (("1" (LEMMA "cancel_left") (("1" (INST - "x!1" "a!1 ^ i!1" "one") (("1" (FLATTEN) (("1" (HIDE -1) (("1" (SPLIT -1) (("1" (REWRITE "one_left" -1) (("1" (REPLACE -4 - :DIR RL) (("1" (REWRITE "expt_inv_left") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (REPLACE -1) (("2" (REWRITE "one_in") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|one_group| CONST-DECL "finite_group" |group| NIL) (|finite_group| NONEMPTY-TYPE-EQ-DECL NIL |group| NIL) (|finite_group?| CONST-DECL "bool" |group_def| NIL) (|group| NONEMPTY-TYPE-EQ-DECL NIL |group| NIL) (|group?| CONST-DECL "bool" |group_def| NIL) (|one| FORMAL-CONST-DECL "T" |cyclic_group| NIL) (* FORMAL-CONST-DECL "[T, T -> T]" |cyclic_group| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (T FORMAL-NONEMPTY-TYPE-DECL NIL |cyclic_group| NIL) (H!1 SKOLEM-CONST-DECL "group[T, *, one]" |cyclic_group| NIL) (|generated_by| CONST-DECL "group" |group| NIL) (|singleton| CONST-DECL "(singleton?)" |sets| NIL) (|one_expt| FORMULA-DECL NIL |group| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|power| DEF-DECL "T" |monoid_def| NIL) (|one_right| FORMULA-DECL NIL |group| NIL) (^ CONST-DECL "T" |group| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|one_in| FORMULA-DECL NIL |monad| NIL) (|monad?| CONST-DECL "bool" |monad_def| NIL) (|monad| NONEMPTY-TYPE-EQ-DECL NIL |monad| NIL) (|cyclic?| CONST-DECL "boolean" |group| NIL) (|i!1| SKOLEM-CONST-DECL "int" |cyclic_group| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|inv_in| FORMULA-DECL NIL |group| NIL) (|inv_expt| FORMULA-DECL NIL |group| NIL) (|inv| CONST-DECL "{y | x * y = one AND y * x = one}" |group| NIL) (|empty?| CONST-DECL "bool" |sets| NIL) (|s| SKOLEM-CONST-DECL "{a | H!1(a!1 ^ a) AND FORALL (x: posnat): H!1(a!1 ^ x) IMPLIES a <= x}" |cyclic_group| NIL) (|a!1| SKOLEM-CONST-DECL "(G!1)" |cyclic_group| NIL) (G!1 SKOLEM-CONST-DECL "group[T, *, one]" |cyclic_group| NIL) (|subgroup?| CONST-DECL "bool" |group_def| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|euclid_int| FORMULA-DECL NIL |euclidean_division| NIL) (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|expt_expt| FORMULA-DECL NIL |group| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|r!1| SKOLEM-CONST-DECL "mod(s)" |cyclic_group| NIL) (|groupoid| NONEMPTY-TYPE-EQ-DECL NIL |groupoid| NIL) (|star_closed?| CONST-DECL "bool" |groupoid_def| NIL) (|star_closed| FORMULA-DECL NIL |groupoid| NIL) (|expt_member| FORMULA-DECL NIL |group| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|expt_mult| FORMULA-DECL NIL |group| NIL) (|cancel_left| FORMULA-DECL NIL |group| NIL) (|expt_neg| FORMULA-DECL NIL |group| NIL) (|one_left| FORMULA-DECL NIL |group| NIL) (|expt_inv_left| FORMULA-DECL NIL |group| NIL) (|assoc| FORMULA-DECL NIL |group| NIL) (|i!1| SKOLEM-CONST-DECL "int" |cyclic_group| NIL) (|q!1| SKOLEM-CONST-DECL "int" |cyclic_group| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (|commutative?| CONST-DECL "bool" |operator_defs| NIL) (|abelian_group?| CONST-DECL "bool" |group_def| NIL) (|cyclic_abelian| FORMULA-DECL NIL |cyclic_group| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (< CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|mod| NONEMPTY-TYPE-EQ-DECL NIL |euclidean_division| NIL) (|subset?| CONST-DECL "bool" |sets| NIL) (|nonempty?| CONST-DECL "bool" |sets| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|min| CONST-DECL "{a | S(a) AND (FORALL x: S(x) IMPLIES a <= x)}" |min_nat| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL)) SHOSTAK) (|cyclic_subgroup-2| "" 3754923813 ("" (SKOSIMP*) (("" (CASE "H!1 = one_group") (("1" (EXPAND "cyclic?" 1) (("1" (INST + "one") (("1" (HIDE -2 -3) (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("1" (EXPAND "one_group") (("1" (EXPAND "singleton") (("1" (EXPAND "generated_by") (("1" (IFF 1) (("1" (PROP) (("1" (INST + "1") (("1" (GRIND) NIL NIL)) NIL) ("2" (SKOSIMP*) (("2" (REPLACE -1) (("2" (HIDE -1) (("2" (REWRITE "one_expt") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "one_in") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "cyclic?") (("2" (SKOSIMP*) (("2" (CASE "(EXISTS (h:T),(m:posnat): H!1(h) AND h /= one AND h = a!1^m)") (("1" (SKOSIMP*) (("1" (NAME S "min({n: posnat | H!1(a!1^n)})") (("1" (INST + "a!1^s") (("1" (APPLY-EXTENSIONALITY 3 :HIDE? T) (("1" (IFF 1) (("1" (PROP) (("1" (EXPAND "subgroup?") (("1" (EXPAND "subset?") (("1" (ASSERT) (("1" (INST?) (("1" (ASSERT) (("1" (REPLACE -6 -5) (("1" (EXPAND "generated_by") (("1" (SKOSIMP*) (("1" (LEMMA "euclid_int") (("1" (INST - "s" "i!1") (("1" (SKOSIMP*) (("1" (TYPEPRED "r!1") (("1" (CASE "a!1^r!1 = (a!1^i!1)*(a!1^s)^(-q!1)") (("1" (INST + "q!1") (("1" (CASE "r!1 = 0") (("1" (ASSERT) (("1" (REPLACE -1) (("1" (ASSERT) (("1" (REPLACE -4) (("1" (REWRITE "expt_expt") (("1" (REWRITE "expt_expt") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "min({n: posnat | H!1(a!1 ^ n)})") (("2" (INST -3 "r!1") (("1" (ASSERT) (("1" (REPLACE -7) (("1" (LEMMA "expt_member") (("1" (INST - "H!1" "a!1^s" "-q!1") (("1" (ASSERT) (("1" (REPLACE -4) (("1" (REWRITE "star_closed") (("1" (TYPEPRED "H!1") (("1" (HIDE-ALL-BUT (-1 1)) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -6 -7 -8 2 3 4) (("2" (CASE "a!1 ^ i!1 = a!1^(s * q!1 + r!1)") (("1" (HIDE -3 -4) (("1" (REWRITE "expt_mult" - :DIR RL) (("1" (REWRITE "expt_expt" - :DIR RL) (("1" (LEMMA "cancel_left") (("1" (INST - "a!1 ^ i!1" "(a!1 ^ s) ^ q!1 * a!1 ^ r!1" "(a!1 ^ s) ^ (-q!1)") (("1" (FLATTEN) (("1" (HIDE -1) (("1" (SPLIT -1) (("1" (CASE-REPLACE "(a!1 ^ s) ^ (-q!1) * ((a!1 ^ s) ^ q!1 * a!1 ^ r!1) = a!1^r!1") (("1" (HIDE -1) (("1" (LEMMA "cyclic_abelian") (("1" (INST - "G!1") (("1" (ASSERT) (("1" (SPLIT -1) (("1" (EXPAND "abelian_group?") (("1" (GROUND) (("1" (EXPAND "commutative?") (("1" (ASSERT) (("1" (EXPAND "restrict") (("1" (ASSERT) (("1" (INST - "(a!1 ^ s) ^ (-q!1)" "a!1 ^ i!1") (("1" (ASSERT) NIL NIL) ("2" (HIDE 2) (("2" (REVEAL -10) (("2" (REPLACE -1 +) (("2" (ASSERT) (("2" (INST + "i!1") NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (REVEAL -10) (("3" (REPLACE -1 +) (("3" (ASSERT) (("3" (INST + "-s*q!1") (("3" (ASSERT) (("3" (REWRITE "expt_expt") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "cyclic?") (("2" (REVEAL -9) (("2" (EXPAND "generated_by") (("2" (ASSERT) (("2" (INST + "a!1") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (REWRITE "assoc") (("2" (REWRITE "expt_neg") (("2" (REWRITE "expt_inv_left") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "generated_by") (("2" (SKOSIMP*) (("2" (TYPEPRED "min({n: posnat | H!1(a!1 ^ n)})") (("2" (REPLACE -5) (("2" (LEMMA "expt_member") (("2" (ASSERT) (("2" (INST - "H!1" "a!1^s" "i!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "min({n: posnat | H!1(a!1 ^ n)})") (("2" (REPLACE -4) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "nonempty?") (("2" (EXPAND "empty?") (("2" (ASSERT) (("2" (INST - "m!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (APPLY-EXTENSIONALITY 2 :HIDE? T) (("2" (EXPAND "one_group") (("2" (EXPAND "singleton") (("2" (IFF 1) (("2" (PROP) (("1" (EXPAND "subgroup?") (("1" (EXPAND "subset?") (("1" (ASSERT) (("1" (INST? -) (("1" (ASSERT) (("1" (REPLACE -3 -) (("1" (EXPAND "generated_by") (("1" (SKOSIMP*) (("1" (CASE "i!1 >= 0") (("1" (INST + "a!1^i!1" "i!1") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) (("2" (CASE-REPLACE "i!1 = 0") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (INST + "inv(a!1)^i!1" "-i!1") (("1" (REWRITE "expt_neg") (("1" (REPLACE -2) (("1" (LEMMA "inv_in") (("1" (INST - "H!1" "a!1^i!1") (("1" (ASSERT) (("1" (REWRITE "inv_expt") (("1" (ASSERT) (("1" (FLATTEN) (("1" (LEMMA "cancel_left") (("1" (INST - "x!1" "a!1 ^ i!1" "one") (("1" (FLATTEN) (("1" (HIDE -1) (("1" (SPLIT -1) (("1" (REWRITE "one_left" -1) (("1" (REPLACE -4 - :DIR RL) (("1" (REWRITE "expt_inv_left") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (REPLACE -1) (("2" (REWRITE "one_in") (("2" (TYPEPRED "H!1") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) SHOSTAK) (|cyclic_subgroup-1| |nil| 3407147440 ("" (SKOSIMP*) (("" (CASE "H!1 = one_group") (("1" (EXPAND "cyclic?" 1) (("1" (INST + "one") (("1" (HIDE -2 -3) (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("1" (EXPAND "one_group") (("1" (EXPAND "singleton") (("1" (EXPAND "generated_by") (("1" (IFF 1) (("1" (PROP) (("1" (INST + "1") (("1" (GRIND) (("1" (REWRITE "right_identity") NIL NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (REPLACE -1) (("2" (HIDE -1) (("2" (REWRITE "one_expt") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "one_in") NIL NIL)) NIL)) NIL) ("2" (EXPAND "cyclic?") (("2" (SKOSIMP*) (("2" (CASE "(EXISTS (h:T),(m:posnat): H!1(h) AND h /= one AND h = a!1^m)") (("1" (SKOSIMP*) (("1" (NAME S "min({n: posnat | H!1(a!1^n)})") (("1" (INST + "a!1^s") (("1" (APPLY-EXTENSIONALITY 3 :HIDE? T) (("1" (IFF 1) (("1" (PROP) (("1" (EXPAND "subgroup?") (("1" (EXPAND "subset?") (("1" (ASSERT) (("1" (INST?) (("1" (ASSERT) (("1" (REPLACE -6 -5) (("1" (EXPAND "generated_by") (("1" (SKOSIMP*) (("1" (LEMMA "euclid_int") (("1" (INST - "s" "i!1") (("1" (SKOSIMP*) (("1" (TYPEPRED "r!1") (("1" (CASE "a!1^r!1 = (a!1^i!1)*(a!1^s)^(-q!1)") (("1" (INST + "q!1") (("1" (CASE "r!1 = 0") (("1" (ASSERT) (("1" (REPLACE -1) (("1" (ASSERT) (("1" (REPLACE -4) (("1" (REWRITE "expt_expt") (("1" (REWRITE "expt_expt") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "min({n: posnat | H!1(a!1 ^ n)})") (("2" (INST -3 "r!1") (("1" (ASSERT) (("1" (REPLACE -7) (("1" (LEMMA "expt_member") (("1" (INST - "H!1" "a!1^s" "-q!1") (("1" (ASSERT) (("1" (REPLACE -4) (("1" (REWRITE "star_closed") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -6 -7 -8 2 3 4) (("2" (CASE "a!1 ^ i!1 = a!1^(s * q!1 + r!1)") (("1" (HIDE -3 -4) (("1" (REWRITE "expt_mult" - :DIR RL) (("1" (REWRITE "expt_expt" - :DIR RL) (("1" (LEMMA "cancel_left") (("1" (INST - "a!1 ^ i!1" "(a!1 ^ s) ^ q!1 * a!1 ^ r!1" "(a!1 ^ s) ^ (-q!1)") (("1" (FLATTEN) (("1" (HIDE -1) (("1" (SPLIT -1) (("1" (CASE-REPLACE "(a!1 ^ s) ^ (-q!1) * ((a!1 ^ s) ^ q!1 * a!1 ^ r!1) = a!1^r!1") (("1" (HIDE -1) (("1" (LEMMA "cyclic_abelian") (("1" (INST - "G!1") (("1" (ASSERT) (("1" (SPLIT -1) (("1" (EXPAND "abelian_group?") (("1" (GROUND) (("1" (EXPAND "commutative?") (("1" (ASSERT) (("1" (EXPAND "restrict") (("1" (ASSERT) (("1" (INST - "(a!1 ^ s) ^ (-q!1)" "a!1 ^ i!1") (("1" (ASSERT) NIL NIL) ("2" (HIDE 2) (("2" (REVEAL -10) (("2" (REPLACE -1 +) (("2" (ASSERT) (("2" (INST + "i!1") NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (REVEAL -10) (("3" (REPLACE -1 +) (("3" (ASSERT) (("3" (INST + "-s*q!1") (("3" (ASSERT) (("3" (REWRITE "expt_expt") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "cyclic?") (("2" (REVEAL -9) (("2" (EXPAND "generated_by") (("2" (ASSERT) (("2" (INST + "a!1") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (REWRITE "assoc") (("2" (REWRITE "expt_neg") (("2" (REWRITE "expt_inv_left") (("2" (ASSERT) (("2" (REWRITE "one_left") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "generated_by") (("2" (SKOSIMP*) (("2" (TYPEPRED "min({n: posnat | H!1(a!1 ^ n)})") (("2" (REPLACE -5) (("2" (LEMMA "expt_member") (("2" (ASSERT) (("2" (INST - "H!1" "a!1^s" "i!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "min({n: posnat | H!1(a!1 ^ n)})") (("2" (REPLACE -4) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "nonempty?") (("2" (EXPAND "empty?") (("2" (ASSERT) (("2" (INST - "m!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (APPLY-EXTENSIONALITY 2 :HIDE? T) (("2" (EXPAND "one_group") (("2" (EXPAND "singleton") (("2" (IFF 1) (("2" (PROP) (("1" (EXPAND "subgroup?") (("1" (EXPAND "subset?") (("1" (ASSERT) (("1" (INST? -) (("1" (ASSERT) (("1" (REPLACE -3 -) (("1" (EXPAND "generated_by") (("1" (SKOSIMP*) (("1" (CASE "i!1 >= 0") (("1" (INST + "a!1^i!1" "i!1") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) (("2" (CASE-REPLACE "i!1 = 0") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (INST + "inv(a!1)^i!1" "-i!1") (("1" (REWRITE "expt_neg") (("1" (REPLACE -2) (("1" (LEMMA "inv_in") (("1" (INST - "H!1" "a!1^i!1") (("1" (ASSERT) (("1" (REWRITE "inv_expt") (("1" (ASSERT) (("1" (FLATTEN) (("1" (LEMMA "cancel_left") (("1" (INST - "x!1" "a!1 ^ i!1" "one") (("1" (FLATTEN) (("1" (HIDE -1) (("1" (SPLIT -1) (("1" (REWRITE "one_left" -1) (("1" (REPLACE -4 - :DIR RL) (("1" (REWRITE "expt_inv_left") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (REPLACE -1) (("2" (REWRITE "one_in") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) SHOSTAK)) (|is_cyclic| 0 (|is_cyclic-1| |nil| 3407083622 ("" (SKOSIMP*) (("" (EXPAND "cyclic?") (("" (INST + "a!1") (("" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("" (IFF 1) (("" (INST?) (("1" (SKOSIMP*) (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (GROUND) (("1" (EXPAND "generated_by") (("1" (INST?) NIL NIL)) NIL) ("2" (LEMMA "generated_is_subgroup") (("2" (INST?) (("2" (ASSERT) (("2" (INST - "G!1") (("2" (ASSERT) (("2" (EXPAND "subgroup?") (("2" (EXPAND "subset?") (("2" (INST - "a!1 ^ n!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (LEMMA "generated_is_subgroup") (("2" (INST - "G!1" "a!1") (("2" (ASSERT) (("2" (EXPAND "subgroup?") (("2" (EXPAND "subset?") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|cyclic?| CONST-DECL "boolean" |group| NIL) (|generated_by| CONST-DECL "group" |group| NIL) (|x!1| SKOLEM-CONST-DECL "T" |cyclic_group| NIL) (G!1 SKOLEM-CONST-DECL "group[T, *, one]" |cyclic_group| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|subgroup?| CONST-DECL "bool" |group_def| NIL) (^ CONST-DECL "T" |group| NIL) (|subset?| CONST-DECL "bool" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|generated_is_subgroup| FORMULA-DECL NIL |cyclic_group| NIL) (|group| NONEMPTY-TYPE-EQ-DECL NIL |group| NIL) (|group?| CONST-DECL "bool" |group_def| NIL) (|one| FORMAL-CONST-DECL "T" |cyclic_group| NIL) (* FORMAL-CONST-DECL "[T, T -> T]" |cyclic_group| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (T FORMAL-NONEMPTY-TYPE-DECL NIL |cyclic_group| NIL)) NIL)))
