(|quaternions_Hamilton_extra|
 (|IMP_quaternions_TCC1| 0
  (|IMP_quaternions_TCC1-1| |nil| 3907404476 ("" (SUBTYPE-TCC) NIL NIL)
   ((|remove| CONST-DECL "set" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|fullset| CONST-DECL "set" |sets| NIL))
   NIL
   (|IMP_quaternions| SUBTYPE "-1" "(sets[real].remove(0, sets[real].fullset))"
    (29 35 29 37))))
 (|IMP_quaternions_TCC2| 0
  (|IMP_quaternions_TCC2-1| |nil| 3907411643
   ("" (EXPAND "field?")
    (("" (PROP)
      (("1" (EXPAND "division_ring?")
        (("1" (PROP)
          (("1" (EXPAND "ring_with_one?")
            (("1" (PROP)
              (("1" (EXPAND "ring?")
                (("1" (PROP)
                  (("1" (EXPAND "abelian_group?")
                    (("1" (PROP)
                      (("1" (EXPAND "group?")
                        (("1" (PROP)
                          (("1" (EXPAND "monoid?")
                            (("1" (PROP)
                              (("1" (EXPAND "monad?")
                                (("1" (PROP)
                                  (("1" (EXPAND "star_closed?")
                                    (("1" (SKEEP)
                                      (("1" (EXPAND "member")
                                        (("1" (EXPAND "fullset")
                                          (("1" (PROPAX) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (EXPAND "member")
                                    (("2" (EXPAND "fullset")
                                      (("2" (PROPAX) NIL NIL)) NIL))
                                    NIL)
                                   ("3" (EXPAND "identity?")
                                    (("3" (SKEEP)
                                      (("3" (EXPAND "restrict")
                                        (("3" (PROPAX) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (EXPAND "associative?")
                                (("2" (SKEEP)
                                  (("2" (EXPAND "restrict")
                                    (("2" (PROPAX) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (EXPAND "inv_exists?")
                            (("2" (SKEEP)
                              (("2" (INST 1 "-x")
                                (("1" (ASSERT) NIL NIL)
                                 ("2" (EXPAND "fullset")
                                  (("2" (PROPAX) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (EXPAND "commutative?")
                        (("2" (SKEEP)
                          (("2" (EXPAND "restrict") (("2" (PROPAX) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (EXPAND "star_closed?")
                    (("2" (SKEEP)
                      (("2" (EXPAND "member")
                        (("2" (EXPAND "fullset") (("2" (PROPAX) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("3" (EXPAND "associative?")
                    (("3" (SKEEP)
                      (("3" (EXPAND "restrict") (("3" (ASSERT) NIL NIL)) NIL))
                      NIL))
                    NIL)
                   ("4" (EXPAND "left_distributive?")
                    (("4" (SKEEP)
                      (("4" (EXPAND "restrict") (("4" (PROPAX) NIL NIL)) NIL))
                      NIL))
                    NIL)
                   ("5" (EXPAND "right_distributive?")
                    (("5" (SKEEP)
                      (("5" (EXPAND "restrict") (("5" (PROPAX) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (EXPAND "monoid?")
                (("2" (PROP)
                  (("1" (EXPAND "monad?")
                    (("1" (PROP)
                      (("1" (EXPAND "star_closed?")
                        (("1" (SKEEP)
                          (("1" (EXPAND "member")
                            (("1" (EXPAND "fullset") (("1" (PROPAX) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (EXPAND "member")
                        (("2" (EXPAND "fullset") (("2" (PROPAX) NIL NIL)) NIL))
                        NIL)
                       ("3" (EXPAND "identity?")
                        (("3" (SKEEP)
                          (("3" (EXPAND "restrict") (("3" (PROPAX) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (EXPAND "associative?")
                    (("2" (SKEEP)
                      (("2" (EXPAND "restrict") (("2" (ASSERT) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (EXPAND "group?")
            (("2" (PROP)
              (("1" (EXPAND "monoid?")
                (("1" (PROP)
                  (("1" (EXPAND "monad?")
                    (("1" (PROP)
                      (("1" (EXPAND "star_closed?")
                        (("1" (SKEEP)
                          (("1" (TYPEPRED "x" "y")
                            (("1" (EXPAND "remove")
                              (("1" (EXPAND "member")
                                (("1" (EXPAND "fullset")
                                  (("1" (ASSERT) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (EXPAND "member")
                        (("2" (EXPAND "remove")
                          (("2" (EXPAND "member")
                            (("2" (EXPAND "fullset") (("2" (PROPAX) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("3" (EXPAND "identity?")
                        (("3" (SKEEP)
                          (("3" (EXPAND "restrict") (("3" (PROPAX) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (EXPAND "associative?")
                    (("2" (SKEEP)
                      (("2" (EXPAND "restrict") (("2" (ASSERT) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (EXPAND "inv_exists?")
                (("2" (SKEEP)
                  (("2" (INST 1 "1/x")
                    (("1" (ASSERT) NIL NIL)
                     ("2" (TYPEPRED "x")
                      (("2" (EXPAND "remove")
                        (("2" (EXPAND "member")
                          (("2" (EXPAND "fullset") (("2" (PROPAX) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("3" (TYPEPRED "x")
                      (("3" (EXPAND "remove") (("3" (ASSERT) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (EXPAND "commutative?")
        (("2" (SKEEP) (("2" (EXPAND "restrict") (("2" (ASSERT) NIL NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|fullset| CONST-DECL "set" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|star_closed?| CONST-DECL "bool" |groupoid_def| NIL)
    (|monad?| CONST-DECL "bool" |monad_def| NIL)
    (|monoid?| CONST-DECL "bool" |monoid_def| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|inv_exists?| CONST-DECL "bool" |group_def| NIL)
    (|group?| CONST-DECL "bool" |group_def| NIL)
    (|abelian_group?| CONST-DECL "bool" |group_def| NIL)
    (|left_distributive?| CONST-DECL "bool" |operator_defs_more| NIL)
    (|right_distributive?| CONST-DECL "bool" |operator_defs_more| NIL)
    (|ring?| CONST-DECL "bool" |ring_def| NIL)
    (|ring_with_one?| CONST-DECL "bool" |ring_with_one_def| NIL)
    (|remove| CONST-DECL "set" |sets| NIL)
    (|division_ring?| CONST-DECL "bool" |division_ring_def| NIL)
    (|field?| CONST-DECL "bool" |field_def| NIL))
   NIL
   (|IMP_quaternions| ASSUMING
    "quaternions[real, restrict[[numfield, numfield], [real, real], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [real, real], numfield].restrict(number_fields.*), 0, 1, -1, -1].quaternions"
    "fullset_is_field: ASSUMPTION field_def[quaternions.T, quaternions.+, quaternions.*, quaternions.zero, quaternions.one].field?(sets[quaternions.T].fullset)"
    (29 10 29 41))))
 (|sc_part_red_norm_nnegreal| 0
  (|sc_part_red_norm_nnegreal-1| |nil| 3907407865
   ("" (SKEEP)
    (("" (LEMMA "red_norm_charac")
      (("" (INST?)
        (("" (DECOMPOSE-EQUALITY)
          (("" (REPLACES -2)
            (("" (HIDE -)
              (("" (CASE-REPLACE "inv(-1) = 1")
                (("1" (TYPEPRED "1")
                  (("1" (REWRITE "identity_mult")
                    (("1" (REWRITE "identity_mult")
                      (("1" (TYPEPRED "q`t * q`t")
                        (("1" (TYPEPRED "(q`y * q`y) + (q`z * q`z) ")
                          (("1" (LEMMA "nnreal_plus_nnreal_is_nnreal")
                            (("1" (INST -1 "q`y * q`y" "q`z * q`z")
                              (("1" (NAME-REPLACE "a" "q`y * q`y + q`z * q`z")
                                (("1" (LEMMA "nnreal_plus_nnreal_is_nnreal")
                                  (("1" (INST -1 "a" "q`t * q`t")
                                    (("1" (NAME-REPLACE "b" "a + q`t * q`t")
                                      (("1"
                                        (LEMMA "nnreal_plus_nnreal_is_nnreal")
                                        (("1" (INST -1 "b" "q`x*q`x") NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|red_norm_charac| FORMULA-DECL NIL |quaternions| NIL)
    (|red_norm| CONST-DECL "quat" |quaternions_def| NIL)
    (|inv| CONST-DECL "{y | x * y = one AND y * x = one}" |group| NIL)
    (|quat| TYPE-EQ-DECL NIL |quaternions_def| NIL))
   SHOSTAK))
 (|QH_norm_TCC1| 0
  (|QH_norm_TCC1-1| |nil| 3907404476
   ("" (SKEEP)
    (("" (LEMMA "red_norm_charac")
      (("" (INST?)
        (("" (DECOMPOSE-EQUALITY)
          (("" (REPLACES -2)
            (("" (HIDE -)
              (("" (CASE-REPLACE "inv(-1) = 1" :HIDE? T)
                (("1" (REWRITE* "one_times")
                  (("1" (LEMMA "nnreal_plus_nnreal_is_nnreal")
                    (("1" (INST-CP -1 "(q`y * q`y)" "(q`z * q`z)")
                      (("1" (INST-CP -1 "(q`t * q`t)" "(q`x * q`x)")
                        (("1" (LEMMA "associative_add")
                          (("1"
                            (INST -1 "(q`y * q`y) + (q`z * q`z)" "(q`t * q`t)"
                             "(q`x * q`x)")
                            (("1" (REPLACE -1 1 RL)
                              (("1" (HIDE -1)
                                (("1"
                                  (NAME-REPLACE "yz"
                                   "(q`y * q`y) + (q`z * q`z)")
                                  (("1"
                                    (NAME-REPLACE "tx"
                                     "(q`t * q`t) + (q`x * q`x)")
                                    (("1" (INST?) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (HIDE 2) (("2" (ASSERT) NIL NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|red_norm_charac| FORMULA-DECL NIL |quaternions| NIL)
    (|red_norm| CONST-DECL "quat" |quaternions_def| NIL)
    (|inv| CONST-DECL "{y | x * y = one AND y * x = one}" |group| NIL)
    (|one_times| FORMULA-DECL NIL |ring_with_one| NIL)
    (|quat| TYPE-EQ-DECL NIL |quaternions_def| NIL))
   NIL
   (|QH_norm| SUBTYPE
    "quaternions_def[real, restrict[[numfield, numfield], [real, real], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [real, real], numfield].restrict(number_fields.*), 0, 1, -1, -1].red_norm(quaternions_Hamilton_extra.q)`x"
    "nonneg_real" (45 26 45 39))))
 (|sq_QHnorm_charac| 0
  (|sq_QHnorm_charac-1| |nil| 3907407941
   ("" (SKEEP)
    (("" (EXPAND "sq_QHnorm")
      (("" (EXPAND "QH_norm")
        (("" (ASSERT)
          (("" (NAME-REPLACE "A" "red_norm(q)`x") (("" (GRIND) NIL NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|sq| CONST-DECL "nonneg_real" |sq| |reals|)
    (|red_norm| CONST-DECL "quat" |quaternions_def| NIL)
    (|quat| TYPE-EQ-DECL NIL |quaternions_def| NIL))
   SHOSTAK))
 (|red_norm_QH1| 0
  (|red_norm_QH1-1| |nil| 3907407964
   ("" (SKEEP)
    (("" (TYPEPRED "q")
      (("" (EXPAND "QH_1")
        (("" (EXPAND "QH_norm")
          (("" (NAME-REPLACE "A" "red_norm(q)`x") (("" (ASSERT) NIL NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|quat| TYPE-EQ-DECL NIL |quaternions_def| NIL)
    (|red_norm| CONST-DECL "quat" |quaternions_def| NIL))
   SHOSTAK))
 (|norm_decomp| 0
  (|norm_decomp-1| |nil| 3907407985
   ("" (SKEEP)
    (("" (EXPAND "sq_QHnorm")
      (("" (EXPAND "QH_norm")
        (("" (REWRITE* "sq_sqrt")
          (("1" (LEMMA "red_norm_charac")
            (("1" (INST-CP -1 "q")
              (("1" (INST-CP -1 "pure_part(q)")
                (("1" (INST -1 "sc_part(q)")
                  (("1" (DECOMPOSE-EQUALITY)
                    (("1" (DECOMPOSE-EQUALITY)
                      (("1" (DECOMPOSE-EQUALITY)
                        (("1" (REPLACES -2)
                          (("1" (REPLACES -9)
                            (("1" (REPLACES -5)
                              (("1" (HIDE -)
                                (("1" (EXPAND "pure_part")
                                  (("1" (EXPAND "sc_part")
                                    (("1" (PROPAX) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (HIDE 2) (("2" (REWRITE "QH_norm_TCC1") NIL NIL)) NIL)
           ("3" (HIDE 2) (("3" (REWRITE "QH_norm_TCC1") NIL NIL)) NIL)
           ("4" (HIDE 2) (("4" (REWRITE "QH_norm_TCC1") NIL NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|red_norm| CONST-DECL "quat" |quaternions_def| NIL)
    (|quat| TYPE-EQ-DECL NIL |quaternions_def| NIL)
    (|sq_sqrt| FORMULA-DECL NIL |sqrt| |reals|)
    (|pure_part| CONST-DECL "quat" |quaternions_def| NIL)
    (|sc_part| CONST-DECL "quat" |quaternions_def| NIL)
    (|inv| CONST-DECL "{y | x * y = one AND y * x = one}" |group| NIL)
    (|red_norm_charac| FORMULA-DECL NIL |quaternions| NIL))
   SHOSTAK))
 (|norm_decomp_1| 0
  (|norm_decomp_1-1| |nil| 3907408027
   ("" (SKEEP)
    (("" (LEMMA "sq_QHnorm_charac")
      (("" (INST -1 "q")
        (("" (LEMMA "norm_decomp")
          (("" (INST -1 "q")
            (("" (REPLACE -2 -1)
              (("" (HIDE -2)
                (("" (REPLACES -1)
                  ((""
                    (CASE-REPLACE "sq_QHnorm(sc_part(q)) = reals@sq.sq(q`x)")
                    (("" (HIDE 2)
                      (("" (EXPAND "sq_QHnorm")
                        (("" (EXPAND "sc_part")
                          (("" (EXPAND "QH_norm")
                            (("" (REWRITE "red_norm_charac")
                              ((""
                                (CASE-REPLACE
                                 "(# x := q`x * q`x, y := 0, z := 0, t := 0 #)`x = q`x * q`x")
                                (("1" (HIDE -1) (("1" (GRIND) NIL NIL)) NIL)
                                 ("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|red_norm_charac| FORMULA-DECL NIL |quaternions| NIL)
    (|sq| CONST-DECL "nonneg_real" |sq| |reals|)
    (|sc_part| CONST-DECL "quat" |quaternions_def| NIL)
    (|quat| TYPE-EQ-DECL NIL |quaternions_def| NIL))
   SHOSTAK))
 (|QH_nzquat_nznorm| 0
  (|QH_nzquat_nznorm-1| |nil| 3907408053
   ("" (SKEEP)
    (("" (LEMMA "red_norm_charac")
      (("" (INST -1 "q")
        (("" (REPLACES -1)
          (("" (EXPAND "zero_q")
            (("" (CASE-REPLACE "inv(-1) = 1")
              (("1" (CASE-REPLACE "1 * (q`y * q`y) = (q`y * q`y)")
                (("1" (CASE-REPLACE "1 * (q`z * q`z) = (q`z * q`z)")
                  (("1" (LEMMA "sq_plus_pos")
                    (("1" (INST-CP -1 "q`y" "q`z")
                      (("1" (EXPAND "sq" -2)
                        (("1" (NAME-REPLACE "A" " q`y * q`y + q`z * q`z")
                          (("1" (LEMMA "associative_add")
                            (("1" (INST?)
                              (("1" (REPLACE -1 -7 RL)
                                (("1" (HIDE -1)
                                  (("1" (INST -1 "q`t" "q`x")
                                    (("1" (EXPAND "sq")
                                      (("1"
                                        (NAME-REPLACE "B"
                                         "q`t * q`t + q`x * q`x")
                                        (("1" (HIDE -3 -4 -5)
                                          (("1"
                                            (LEMMA "nonneg_real_add_closed")
                                            (("1" (INST -1 "A" "B")
                                              (("1" (EXPAND ">=")
                                                (("1" (EXPAND "<=")
                                                  (("1" (SPLIT -1)
                                                    (("1" (HIDE -2 -3)
                                                      (("1"
                                                        (NAME-REPLACE "C"
                                                         "A+B")
                                                        (("1" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL)
                                                     ("2" (PROP)
                                                      (("1" (HIDE -3)
                                                        (("1"
                                                          (LEMMA
                                                           "posreal_add_closed")
                                                          (("1"
                                                            (INST -1 "A" "B")
                                                            (("1" (PROP)
                                                              (("1"
                                                                (NAME-REPLACE
                                                                 "C" "A+B")
                                                                (("1" (ASSERT)
                                                                  NIL NIL))
                                                                NIL)
                                                               ("2" (ASSERT)
                                                                NIL NIL)
                                                               ("3" (ASSERT)
                                                                NIL NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL)
                                                       ("2" (REPLACE -1 -4 RL)
                                                        (("2" (HIDE -1 -3)
                                                          (("2" (ASSERT) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL)
                                                       ("3" (REPLACE -2 -4 RL)
                                                        (("3" (HIDE -2 -3)
                                                          (("3" (ASSERT) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL)
                                                       ("4" (EXPAND "A" -1)
                                                        (("4" (HIDE -3 -4)
                                                          (("4" (TYPEPRED "q")
                                                            (("4"
                                                              (EXPAND "zero_q")
                                                              (("4"
                                                                (CASE
                                                                    "q`y /=0")
                                                                (("1"
                                                                  (LEMMA
                                                                   "sq_eq_0")
                                                                  (("1"
                                                                    (INST -1
                                                                     "q`y")
                                                                    (("1"
                                                                      (PROP)
                                                                      (("1"
                                                                        (EXPAND
                                                                         "sq")
                                                                        (("1"
                                                                          (LEMMA
                                                                           "sq_pos")
                                                                          (("1"
                                                                            (INST-CP
                                                                             -1
                                                                             "q`z")
                                                                            (("1"
                                                                              (INST
                                                                               -1
                                                                               "q`y")
                                                                              (("1"
                                                                                (EXPAND
                                                                                 "sq")
                                                                                (("1"
                                                                                  (EXPAND
                                                                                   ">=")
                                                                                  (("1"
                                                                                    (EXPAND
                                                                                     "<=")
                                                                                    (("1"
                                                                                      (PROP)
                                                                                      (("1"
                                                                                        (HIDE-ALL-BUT
                                                                                         (-1
                                                                                          -2
                                                                                          -3))
                                                                                        (("1"
                                                                                          (LEMMA
                                                                                           "posreal_add_closed")
                                                                                          (("1"
                                                                                            (INST
                                                                                             -1
                                                                                             "q`y * q`y"
                                                                                             "q`z * q`z")
                                                                                            (("1"
                                                                                              (PROP)
                                                                                              (("1"
                                                                                                (HIDE
                                                                                                 -2
                                                                                                 -3)
                                                                                                (("1"
                                                                                                  (NAME-REPLACE
                                                                                                   "D"
                                                                                                   "q`y * q`y + q`z * q`z")
                                                                                                  (("1"
                                                                                                    (ASSERT)
                                                                                                    NIL
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL)
                                                                                               ("2"
                                                                                                (HIDE
                                                                                                 -1
                                                                                                 -3)
                                                                                                (("2"
                                                                                                  (ASSERT)
                                                                                                  NIL
                                                                                                  NIL))
                                                                                                NIL)
                                                                                               ("3"
                                                                                                (HIDE
                                                                                                 -2
                                                                                                 -3)
                                                                                                (("3"
                                                                                                  (ASSERT)
                                                                                                  NIL
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL)
                                                                                       ("2"
                                                                                        (REPLACE
                                                                                         -1
                                                                                         -3)
                                                                                        (("2"
                                                                                          (REPLACE
                                                                                           -1
                                                                                           -3
                                                                                           RL)
                                                                                          (("2"
                                                                                            (HIDE-ALL-BUT
                                                                                             (-2
                                                                                              -3))
                                                                                            (("2"
                                                                                              (ASSERT)
                                                                                              NIL
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL)
                                                                                       ("3"
                                                                                        (ASSERT)
                                                                                        NIL
                                                                                        NIL)
                                                                                       ("4"
                                                                                        (ASSERT)
                                                                                        NIL
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL)
                                                                 ("2" (PROP)
                                                                  (("2"
                                                                    (REPLACE -1
                                                                             -2)
                                                                    (("2"
                                                                      (ASSERT)
                                                                      (("2"
                                                                        (LEMMA
                                                                         "sq_eq_0")
                                                                        (("2"
                                                                          (INST
                                                                           -1
                                                                           "q`z")
                                                                          (("2"
                                                                            (EXPAND
                                                                             "sq")
                                                                            (("2"
                                                                              (HIDE
                                                                               -3)
                                                                              (("2"
                                                                                (EXPAND
                                                                                 "B")
                                                                                (("2"
                                                                                  (CASE
                                                                                      "q`t/=0")
                                                                                  (("1"
                                                                                    (LEMMA
                                                                                     "sq_eq_0")
                                                                                    (("1"
                                                                                      (INST
                                                                                       -1
                                                                                       "q`t")
                                                                                      (("1"
                                                                                        (PROP)
                                                                                        (("1"
                                                                                          (EXPAND
                                                                                           "sq")
                                                                                          (("1"
                                                                                            (LEMMA
                                                                                             "sq_pos")
                                                                                            (("1"
                                                                                              (INST-CP
                                                                                               -1
                                                                                               "q`t")
                                                                                              (("1"
                                                                                                (INST
                                                                                                 -1
                                                                                                 "q`x")
                                                                                                (("1"
                                                                                                  (EXPAND
                                                                                                   "sq")
                                                                                                  (("1"
                                                                                                    (EXPAND
                                                                                                     ">=")
                                                                                                    (("1"
                                                                                                      (EXPAND
                                                                                                       "<=")
                                                                                                      (("1"
                                                                                                        (PROP)
                                                                                                        (("1"
                                                                                                          (HIDE
                                                                                                           +)
                                                                                                          (("1"
                                                                                                            (LEMMA
                                                                                                             "posreal_add_closed")
                                                                                                            (("1"
                                                                                                              (INST
                                                                                                               -1
                                                                                                               "q`t * q`t"
                                                                                                               "q`x * q`x")
                                                                                                              (("1"
                                                                                                                (PROP)
                                                                                                                (("1"
                                                                                                                  (NAME-REPLACE
                                                                                                                   "E"
                                                                                                                   "q`t * q`t + q`x * q`x")
                                                                                                                  (("1"
                                                                                                                    (ASSERT)
                                                                                                                    NIL
                                                                                                                    NIL))
                                                                                                                  NIL)
                                                                                                                 ("2"
                                                                                                                  (HIDE-ALL-BUT
                                                                                                                   (-1
                                                                                                                    1))
                                                                                                                  (("2"
                                                                                                                    (ASSERT)
                                                                                                                    NIL
                                                                                                                    NIL))
                                                                                                                  NIL)
                                                                                                                 ("3"
                                                                                                                  (HIDE-ALL-BUT
                                                                                                                   (-2
                                                                                                                    1))
                                                                                                                  (("3"
                                                                                                                    (ASSERT)
                                                                                                                    NIL
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL)
                                                                                                         ("2"
                                                                                                          (ASSERT)
                                                                                                          NIL
                                                                                                          NIL)
                                                                                                         ("3"
                                                                                                          (LEMMA
                                                                                                           "sq_eq_0")
                                                                                                          (("3"
                                                                                                            (INST
                                                                                                             -1
                                                                                                             "q`x")
                                                                                                            (("3"
                                                                                                              (EXPAND
                                                                                                               "sq")
                                                                                                              (("3"
                                                                                                                (PROP)
                                                                                                                (("1"
                                                                                                                  (REPLACE
                                                                                                                   -4
                                                                                                                   -7
                                                                                                                   RL)
                                                                                                                  (("1"
                                                                                                                    (HIDE-ALL-BUT
                                                                                                                     (-7
                                                                                                                      2))
                                                                                                                    (("1"
                                                                                                                      (ASSERT)
                                                                                                                      NIL
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL)
                                                                                                                 ("2"
                                                                                                                  (ASSERT)
                                                                                                                  NIL
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL)
                                                                                                         ("4"
                                                                                                          (ASSERT)
                                                                                                          NIL
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL)
                                                                                   ("2"
                                                                                    (PROP)
                                                                                    (("2"
                                                                                      (REPLACE
                                                                                       -1
                                                                                       -4)
                                                                                      (("2"
                                                                                        (ASSERT)
                                                                                        (("2"
                                                                                          (LEMMA
                                                                                           "sq_eq_0")
                                                                                          (("2"
                                                                                            (INST
                                                                                             -1
                                                                                             "q`x")
                                                                                            (("2"
                                                                                              (EXPAND
                                                                                               "sq")
                                                                                              (("2"
                                                                                                (HIDE
                                                                                                 -5)
                                                                                                (("2"
                                                                                                  (ASSERT)
                                                                                                  (("2"
                                                                                                    (GRIND)
                                                                                                    (("2"
                                                                                                      (DECOMPOSE-EQUALITY)
                                                                                                      NIL
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (ASSERT) NIL NIL))
                  NIL)
                 ("2" (ASSERT) NIL NIL))
                NIL)
               ("2" (ASSERT) NIL NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|red_norm_charac| FORMULA-DECL NIL |quaternions| NIL)
    (|inv| CONST-DECL "{y | x * y = one AND y * x = one}" |group| NIL)
    (|sq_eq_0| FORMULA-DECL NIL |sq| |reals|)
    (|sq_pos| FORMULA-DECL NIL |sq| |reals|)
    (|sq| CONST-DECL "nonneg_real" |sq| |reals|)
    (|sq_plus_pos| FORMULA-DECL NIL |sq| |reals|)
    (|left_identity| FORMULA-DECL NIL |monad| NIL)
    (|nz_quat| NONEMPTY-TYPE-EQ-DECL NIL |quaternions| NIL)
    (|zero_q| CONST-DECL "quat" |quaternions_def| NIL)
    (|quat| TYPE-EQ-DECL NIL |quaternions_def| NIL))
   SHOSTAK))
 (|QH_times_is_zero_q| 0
  (|QH_times_is_zero_q-1| |nil| 3907408160
   ("" (SKEEP)
    (("" (LEMMA "ring_nz_closed[quat,+,*,zero_q].times_is_zero")
      (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)
       ("2" (HIDE (-1 2))
        (("2" (LEMMA "div_ring_iff_nz_rednorm")
          (("2" (PROP)
            (("1" (HIDE -2)
              (("1" (EXPAND "division_ring?")
                (("1" (EXPAND "ring_nz_closed?")
                  (("1" (EXPAND "ring_with_one?")
                    (("1" (EXPAND "group?")
                      (("1" (EXPAND "monoid?")
                        (("1" (EXPAND "monad?")
                          (("1" (FLATTEN)
                            (("1" (EXPAND "star_closed?")
                              (("1" (EXPAND "nz_closed?")
                                (("1" (SPLIT)
                                  (("1" (PROPAX) NIL NIL)
                                   ("2" (EXPAND "star_closed?")
                                    (("2" (PROPAX) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (HIDE (2 3 4))
              (("2" (SKEEP)
                (("2" (LEMMA "QH_nzquat_nznorm")
                  (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|zero_q| CONST-DECL "quat" |quaternions_def| NIL)
    (* CONST-DECL "[quat, quat -> quat]" |quaternions_def| NIL)
    (+ CONST-DECL "quat" |quaternions_def| NIL)
    (|quat| TYPE-EQ-DECL NIL |quaternions_def| NIL)
    (|times_is_zero| FORMULA-DECL NIL |ring_nz_closed| NIL)
    (|fullset| CONST-DECL "set" |sets| NIL)
    (|ring_nz_closed?| CONST-DECL "bool" |ring_nz_closed_def| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|nz_quat| NONEMPTY-TYPE-EQ-DECL NIL |quaternions| NIL)
    (|div_ring_iff_nz_rednorm| FORMULA-DECL NIL |quaternions| NIL)
    (|group?| CONST-DECL "bool" |group_def| NIL)
    (|monad?| CONST-DECL "bool" |monad_def| NIL)
    (|star_closed?| CONST-DECL "bool" |groupoid_def| NIL)
    (|nz_closed?| CONST-DECL "bool" |ring_nz_closed_def| NIL)
    (|monoid?| CONST-DECL "bool" |monoid_def| NIL)
    (|ring_with_one?| CONST-DECL "bool" |ring_with_one_def| NIL)
    (|division_ring?| CONST-DECL "bool" |division_ring_def| NIL))
   SHOSTAK))
 (|QH_inv_red_norm_TCC1| 0
  (|QH_inv_red_norm_TCC1-1| |nil| 3907404476
   ("" (SKEEP)
    (("" (LEMMA "QH_nzquat_nznorm") (("" (INST?) (("" (ASSERT) NIL NIL)) NIL))
      NIL))
    NIL)
   ((|nz_quat| NONEMPTY-TYPE-EQ-DECL NIL |quaternions| NIL)
    (|zero_q| CONST-DECL "quat" |quaternions_def| NIL)
    (|quat| TYPE-EQ-DECL NIL |quaternions_def| NIL))
   NIL
   (|QH_inv_red_norm| SUBTYPE
    "quaternions_def[real, restrict[[numfield, numfield], [real, real], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [real, real], numfield].restrict(number_fields.*), 0, 1, -1, -1].red_norm(quaternions_Hamilton_extra.q)"
    "nz_quat[real, restrict[[numfield, numfield], [real, real], numfield](+), restrict[[numfield, numfield], [real, real], numfield](*), 0, 1, -1, -1]"
    (70 46 70 57))))
 (|QH_inv_red_norm_TCC2| 0
  (|QH_inv_red_norm_TCC2-1| |nil| 3907404476
   ("" (SKEEP)
    (("" (LEMMA "inv_q_prod_charac_TCC1")
      (("" (ASSERT)
        (("" (PROP)
          (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)
           ("2" (HIDE -1)
            (("2" (LEMMA "div_ring_iff_nz_rednorm")
              (("2" (ASSERT)
                (("2" (HIDE 2)
                  (("2" (SKEEP)
                    (("2" (LEMMA "QH_nzquat_nznorm")
                      (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|inv_q_prod_charac_TCC1| SUBTYPE-TCC NIL |quaternions| NIL)
    (|nz_quat| NONEMPTY-TYPE-EQ-DECL NIL |quaternions| NIL)
    (|zero_q| CONST-DECL "quat" |quaternions_def| NIL)
    (|quat| TYPE-EQ-DECL NIL |quaternions_def| NIL)
    (|div_ring_iff_nz_rednorm| FORMULA-DECL NIL |quaternions| NIL))
   NIL
   (|QH_inv_red_norm| SUBTYPE
    "restrict[[quat[real, restrict[[numfield, numfield], [real, real], numfield](+), restrict[[numfield, numfield], [real, real], numfield](*), 0, 1, -1, -1], quat[real, restrict[[numfield, numfield], [real, real], numfield](+), restrict[[numfield, numfield], [real, real], numfield](*), 0, 1, -1, -1]], [nz_quat[real, restrict[[numfield, numfield], [real, real], numfield](+), restrict[[numfield, numfield], [real, real], numfield](*), 0, 1, -1, -1], nz_quat[real, restrict[[numfield, numfield], [real, real], numfield](+), restrict[[numfield, numfield], [real, real], numfield](*), 0, 1, -1, -1]], quat[real, restrict[[numfield, numfield], [real, real], numfield](+), restrict[[numfield, numfield], [real, real], numfield](*), 0, 1, -1, -1]].restrict(quaternions_def[real, restrict[[numfield, numfield], [real, real], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [real, real], numfield].restrict(number_fields.*), 0, 1, -1, -1].*)"
    "[[nz_quat[real, restrict[[numfield, numfield], [real, real], numfield](+), restrict[[numfield, numfield], [real, real], numfield](*), 0, 1, -1, -1], nz_quat[real, restrict[[numfield, numfield], [real, real], numfield](+), restrict[[numfield, numfield], [real, real], numfield](*), 0, 1, -1, -1]] -> nz_quat[real, restrict[[numfield, numfield], [real, real], numfield](+), restrict[[numfield, numfield], [real, real], numfield](*), 0, 1, -1, -1]]"
    (70 25 70 45))))
 (|QH_inv_red_norm_TCC3| 0
  (|QH_inv_red_norm_TCC3-1| |nil| 3907404476
   ("" (LEMMA "inv_q_prod_charac_TCC2")
    (("" (ASSERT)
      (("" (HIDE 2)
        (("" (LEMMA "div_ring_iff_nz_rednorm")
          (("" (ASSERT)
            (("" (HIDE 2)
              (("" (SKEEP)
                (("" (LEMMA "QH_nzquat_nznorm")
                  (("" (INST?) (("" (ASSERT) NIL NIL)) NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|div_ring_iff_nz_rednorm| FORMULA-DECL NIL |quaternions| NIL)
    (|nz_quat| NONEMPTY-TYPE-EQ-DECL NIL |quaternions| NIL)
    (|zero_q| CONST-DECL "quat" |quaternions_def| NIL)
    (|quat| TYPE-EQ-DECL NIL |quaternions_def| NIL)
    (|inv_q_prod_charac_TCC2| SUBTYPE-TCC NIL |quaternions| NIL))
   NIL
   (|QH_inv_red_norm| SUBTYPE
    "quaternions_def[real, restrict[[numfield, numfield], [real, real], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [real, real], numfield].restrict(number_fields.*), 0, 1, -1, -1].one_q"
    "nz_quat[real, restrict[[numfield, numfield], [real, real], numfield](+), restrict[[numfield, numfield], [real, real], numfield](*), 0, 1, -1, -1]"
    (70 25 70 45))))
 (|QH_inv_red_norm_TCC4| 0
  (|QH_inv_red_norm_TCC4-1| |nil| 3907404476
   ("" (LEMMA "inv_q_prod_charac_TCC3")
    (("" (ASSERT)
      (("" (HIDE 2)
        (("" (LEMMA "div_ring_iff_nz_rednorm")
          (("" (ASSERT)
            (("" (HIDE 2)
              (("" (SKEEP)
                (("" (LEMMA "QH_nzquat_nznorm")
                  (("" (INST?) (("" (ASSERT) NIL NIL)) NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|div_ring_iff_nz_rednorm| FORMULA-DECL NIL |quaternions| NIL)
    (|nz_quat| NONEMPTY-TYPE-EQ-DECL NIL |quaternions| NIL)
    (|zero_q| CONST-DECL "quat" |quaternions_def| NIL)
    (|quat| TYPE-EQ-DECL NIL |quaternions_def| NIL)
    (|inv_q_prod_charac_TCC3| ASSUMING-TCC NIL |quaternions| NIL))
   NIL
   (|QH_inv_red_norm| ASSUMING
    "group[nz_quat[real, restrict[[numfield, numfield], [real, real], numfield](+), restrict[[numfield, numfield], [real, real], numfield](*), 0, 1, -1, -1], restrict[[quat[real, restrict[[numfield, numfield], [real, real], numfield](+), restrict[[numfield, numfield], [real, real], numfield](*), 0, 1, -1, -1], quat[real, restrict[[numfield, numfield], [real, real], numfield](+), restrict[[numfield, numfield], [real, real], numfield](*), 0, 1, -1, -1]], [nz_quat[real, restrict[[numfield, numfield], [real, real], numfield](+), restrict[[numfield, numfield], [real, real], numfield](*), 0, 1, -1, -1], nz_quat[real, restrict[[numfield, numfield], [real, real], numfield](+), restrict[[numfield, numfield], [real, real], numfield](*), 0, 1, -1, -1]], quat[real, restrict[[numfield, numfield], [real, real], numfield](+), restrict[[numfield, numfield], [real, real], numfield](*), 0, 1, -1, -1]].restrict(quaternions_def[real, restrict[[numfield, numfield], [real, real], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [real, real], numfield].restrict(number_fields.*), 0, 1, -1, -1].*), quaternions_def[real, restrict[[numfield, numfield], [real, real], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [real, real], numfield].restrict(number_fields.*), 0, 1, -1, -1].one_q].group"
    "fullset_is_group: ASSUMPTION group_def[group.T, group.*, group.one].group?(sets[group.T].fullset)"
    (70 25 70 45))))
 (|QH_inv_red_norm_TCC5| 0
  (|QH_inv_red_norm_TCC5-1| |nil| 3907404476
   ("" (SKEEP)
    (("" (LEMMA "QH_nzquat_nznorm")
      (("" (INST?)
        (("" (LEMMA "red_norm_charac")
          (("" (INST?)
            (("" (REPLACES -1)
              (("" (BETA)
                (("" (EXPAND "zero_q")
                  (("" (REWRITE "neg_one_times")
                    (("" (CASE-REPLACE "inv(-1) = 1" :HIDE? T)
                      (("1" (REWRITE* "one_times")
                        (("1" (NAME-REPLACE "a" "q`x * q`x")
                          (("1" (NAME-REPLACE "b" "q`y * q`y")
                            (("1" (NAME-REPLACE "c" " (q`z * q`z)")
                              (("1" (NAME-REPLACE "d" "(q`t * q`t)")
                                (("1" (LEMMA "associative_add")
                                  (("1" (INST?)
                                    (("1" (REPLACES -1)
                                      (("1" (LEMMA "commutative_add")
                                        (("1" (INST -1 "(b + c) + d" "a")
                                          (("1" (REPLACES -1) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (HIDE (-1 2)) (("2" (ASSERT) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|red_norm_charac| FORMULA-DECL NIL |quaternions| NIL)
    (|inv| CONST-DECL "{y | x * y = one AND y * x = one}" |group| NIL)
    (|one_times| FORMULA-DECL NIL |ring_with_one| NIL)
    (|nz_quat| NONEMPTY-TYPE-EQ-DECL NIL |quaternions| NIL)
    (|zero_q| CONST-DECL "quat" |quaternions_def| NIL)
    (|quat| TYPE-EQ-DECL NIL |quaternions_def| NIL))
   NIL
   (|QH_inv_red_norm| SUBTYPE
    "(quaternions_def[real, restrict[[numfield, numfield], [real, real], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [real, real], numfield].restrict(number_fields.*), 0, 1, -1, -1].red_norm(quaternions_Hamilton_extra.q)`x)"
    "nz_T[real, restrict[[numfield, numfield], [real, real], numfield](+), restrict[[numfield, numfield], [real, real], numfield](*), 0]"
    (70 64 70 77))))
 (|QH_inv_red_norm_TCC6| 0
  (|QH_inv_red_norm_TCC6-1| |nil| 3907404476
   ("" (SKEEP) (("" (EXPAND "restrict") (("" (ASSERT) NIL NIL)) NIL)) NIL) NIL
   NIL
   (|QH_inv_red_norm| SUBTYPE
    "restrict[[real, real], [nz_T[real, restrict[[numfield, numfield], [real, real], numfield](+), restrict[[numfield, numfield], [real, real], numfield](*), 0], nz_T[real, restrict[[numfield, numfield], [real, real], numfield](+), restrict[[numfield, numfield], [real, real], numfield](*), 0]], real].restrict(restrict[[numfield, numfield], [real, real], numfield].restrict(number_fields.*))"
    "[[nz_T[real, restrict[[numfield, numfield], [real, real], numfield](+), restrict[[numfield, numfield], [real, real], numfield](*), 0], nz_T[real, restrict[[numfield, numfield], [real, real], numfield](+), restrict[[numfield, numfield], [real, real], numfield](*), 0]] -> nz_T[real, restrict[[numfield, numfield], [real, real], numfield](+), restrict[[numfield, numfield], [real, real], numfield](*), 0]]"
    (33 31 33 46))))
 (|QH_inv_red_norm| 0
  (|QH_inv_red_norm-1| |nil| 3907408183
   ("" (SKEEP)
    (("" (LEMMA "unique_inv[nz_quat,*,one_q]")
      (("1"
        (INST -1 "red_norm(q)"
         "1 * inv[nz_T[real, restrict[[numfield, numfield], [real, real], numfield](+), restrict[[numfield, numfield], [real, real], numfield](*), 0], restrict [[real, real], [nz_T[real, restrict [[numfield, numfield], [real, real], numfield] (+), restrict [[numfield, numfield], [real, real], numfield] (*), 0], nz_T[real, restrict [[numfield, numfield], [real, real], numfield] (+), restrict [[numfield, numfield], [real, real], numfield] (*), 0]], real] (restrict[[numfield, numfield], [real, real], numfield] (*)), 1] ((red_norm(q)`x)) * one_q")
        (("1" (PROP)
          (("1" (REPLACE -3 1 RL) (("1" (PROPAX) NIL NIL)) NIL)
           ("2" (HIDE 1 3)
            (("2" (LEMMA "sc_comm")
              (("2"
                (INST -1
                 "1 * inv[nz_T[real, restrict[[numfield, numfield], [real, real], numfield] (+) , restrict[[numfield, numfield], [real, real], numfield] (*), 0], restrict [[real, real], [nz_T[real, restrict [[numfield, numfield], [real, real], numfield] (+), restrict [[numfield, numfield], [real, real], numfield] (*), 0], nz_T[real, restrict [[numfield, numfield], [real, real], numfield] (+), restrict [[numfield, numfield], [real, real], numfield] (*), 0]], real] (restrict[[numfield, numfield], [real, real], numfield] (*)), 1] ((red_norm(q)`x))"
                 "red_norm(q)" "one_q")
                (("1" (REPLACE -1 1 RL)
                  (("1" (HIDE -1)
                    (("1" (REWRITE "times_one_q")
                      (("1" (EXPAND "*")
                        (("1" (EXPAND "one_q")
                          (("1" (ASSERT)
                            (("1" (SPLIT)
                              (("1" (ASSERT)
                                (("1"
                                  (LEMMA
                                   "inv_left[nz_T[real, restrict[[numfield, numfield], [real, real], numfield](+), restrict[[numfield, numfield], [real, real], numfield](*), 0], restrict [[real, real], [nz_T[real, restrict[[numfield, numfield], [real, real], numfield] (+), restrict[[numfield, numfield], [real, real], numfield] (*), 0], nz_T[real, restrict[[numfield, numfield], [real, real], numfield] (+) , restrict[[numfield, numfield], [real, real], numfield] (*), 0]], real] (restrict[[numfield, numfield], [real, real], numfield](*)), 1]")
                                  (("1" (INST -1 "red_norm(q)`x")
                                    (("1" (EXPAND "restrict")
                                      (("1" (PROPAX) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (LEMMA "red_norm_charac")
                                (("2" (INST -1 "q")
                                  (("2" (CASE-REPLACE "red_norm(q)`y = 0")
                                    (("1"
                                      (NAME-REPLACE "A"
                                       "inv[nz_T[real, restrict[[numfield, numfield], [real, real], numfield](+), restrict[[numfield, numfield], [real, real], numfield](*), 0], restrict [[real, real], [nz_T[real, restrict[[numfield, numfield], [real, real], numfield] (+), restrict[[numfield, numfield], [real, real], numfield] (*), 0], nz_T[real, restrict[[numfield, numfield], [real, real], numfield] (+) , restrict[[numfield, numfield], [real, real], numfield] (*), 0]], real] (restrict[[numfield, numfield], [real, real], numfield](*)), 1] ((red_norm(q)`x))")
                                      (("1" (HIDE -) (("1" (ASSERT) NIL NIL))
                                        NIL)
                                       ("2" (HIDE 2)
                                        (("2" (SKEEP)
                                          (("2" (EXPAND "restrict")
                                            (("2"
                                              (LEMMA
                                               " nzreal_times_nzreal_is_nzreal ")
                                              (("2" (INST -1 "x1`1" "x1`2")
                                                (("2" (HIDE -3 -4)
                                                  (("2" (GRIND) NIL NIL)) NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("3" (HIDE 2)
                                        (("3" (SKEEP)
                                          (("3" (EXPAND "restrict")
                                            (("3" (PROPAX) NIL NIL)) NIL))
                                          NIL))
                                        NIL)
                                       ("4" (HIDE 2)
                                        (("4" (HIDE -)
                                          (("4" (INST 1 "1") NIL NIL)) NIL))
                                        NIL))
                                      NIL)
                                     ("2" (HIDE 2)
                                      (("2"
                                        (NAME-REPLACE "B"
                                         "q`x * q`x + inv(-1) * (q`y * q`y) + inv(-1) * (q`z * q`z) + (-1 * -1) * (q`t * q`t)")
                                        (("2" (ASSERT) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("3" (LEMMA "red_norm_charac")
                                (("3" (INST -1 "q")
                                  (("3" (CASE-REPLACE "red_norm(q)`z = 0")
                                    (("1"
                                      (NAME-REPLACE "A"
                                       "inv[nz_T[real, restrict[[numfield, numfield], [real, real], numfield](+), restrict[[numfield, numfield], [real, real], numfield](*), 0], restrict [[real, real], [nz_T[real, restrict[[numfield, numfield], [real, real], numfield] (+), restrict[[numfield, numfield], [real, real], numfield] (*), 0], nz_T[real, restrict[[numfield, numfield], [real, real], numfield] (+) , restrict[[numfield, numfield], [real, real], numfield] (*), 0]], real] (restrict[[numfield, numfield], [real, real], numfield](*)), 1] ((red_norm(q)`x))")
                                      (("1" (HIDE -) (("1" (ASSERT) NIL NIL))
                                        NIL)
                                       ("2" (HIDE 2)
                                        (("2" (SKEEP)
                                          (("2" (EXPAND "restrict")
                                            (("2"
                                              (LEMMA
                                               " nzreal_times_nzreal_is_nzreal ")
                                              (("2" (INST -1 "x1`1" "x1`2")
                                                (("2" (HIDE -3 -4)
                                                  (("2" (GRIND) NIL NIL)) NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("3" (HIDE 2)
                                        (("3" (SKEEP)
                                          (("3" (EXPAND "restrict")
                                            (("3" (PROPAX) NIL NIL)) NIL))
                                          NIL))
                                        NIL)
                                       ("4" (HIDE 2)
                                        (("4" (INST 1 "1") NIL NIL)) NIL))
                                      NIL)
                                     ("2" (HIDE 2)
                                      (("2"
                                        (NAME-REPLACE "B"
                                         "q`x * q`x + inv(-1) * (q`y * q`y) + inv(-1) * (q`z * q`z) + (-1 * -1) * (q`t * q`t)")
                                        (("2" (ASSERT) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("4" (LEMMA "red_norm_charac")
                                (("4" (INST -1 "q")
                                  (("4" (CASE-REPLACE "red_norm(q)`t = 0")
                                    (("1"
                                      (NAME-REPLACE "A"
                                       "inv[nz_T[real, restrict[[numfield, numfield], [real, real], numfield](+), restrict[[numfield, numfield], [real, real], numfield](*), 0], restrict [[real, real], [nz_T[real, restrict[[numfield, numfield], [real, real], numfield] (+), restrict[[numfield, numfield], [real, real], numfield] (*), 0], nz_T[real, restrict[[numfield, numfield], [real, real], numfield] (+) , restrict[[numfield, numfield], [real, real], numfield] (*), 0]], real] (restrict[[numfield, numfield], [real, real], numfield](*)), 1] ((red_norm(q)`x))")
                                      (("1" (HIDE -) (("1" (ASSERT) NIL NIL))
                                        NIL)
                                       ("2" (HIDE 2)
                                        (("2" (SKEEP)
                                          (("2" (EXPAND "restrict")
                                            (("2"
                                              (LEMMA
                                               " nzreal_times_nzreal_is_nzreal ")
                                              (("2" (INST -1 "x1`1" "x1`2")
                                                (("2" (HIDE -3 -4)
                                                  (("2" (GRIND) NIL NIL)) NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("3" (HIDE 2)
                                        (("3" (SKEEP)
                                          (("3" (EXPAND "restrict")
                                            (("3" (PROPAX) NIL NIL)) NIL))
                                          NIL))
                                        NIL)
                                       ("4" (HIDE 2)
                                        (("4" (INST 1 "1") NIL NIL)) NIL))
                                      NIL)
                                     ("2" (HIDE 2)
                                      (("2"
                                        (NAME-REPLACE "B"
                                         "q`x * q`x + inv(-1) * (q`y * q`y) + inv(-1) * (q`z * q`z) + (-1 * -1) * (q`t * q`t)")
                                        (("2" (ASSERT) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (HIDE 2)
                        (("2" (SKEEP)
                          (("2" (EXPAND "restrict") (("2" (ASSERT) NIL NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("3" (HIDE 2)
                        (("3" (SKEEP) (("3" (GRIND) NIL NIL)) NIL)) NIL)
                       ("4" (HIDE 2) (("4" (INST 1 "1") NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (HIDE 2)
                  (("2" (SKEEP)
                    (("2" (EXPAND "restrict") (("2" (ASSERT) NIL NIL)) NIL))
                    NIL))
                  NIL)
                 ("3" (HIDE 2)
                  (("3" (SKEEP)
                    (("3" (EXPAND "restrict") (("3" (PROPAX) NIL NIL)) NIL))
                    NIL))
                  NIL)
                 ("4" (HIDE 2) (("4" (INST 1 "1") NIL NIL)) NIL))
                NIL))
              NIL))
            NIL)
           ("3" (HIDE 1 3)
            (("3" (LEMMA "sc_comm")
              (("3"
                (INST -1
                 "1 * inv[nz_T[real, restrict[[numfield, numfield], [real, real], numfield] (+) , restrict[[numfield, numfield], [real, real], numfield] (*), 0], restrict [[real, real], [nz_T[real, restrict [[numfield, numfield], [real, real], numfield] (+), restrict [[numfield, numfield], [real, real], numfield] (*), 0], nz_T[real, restrict [[numfield, numfield], [real, real], numfield] (+), restrict [[numfield, numfield], [real, real], numfield] (*), 0]], real] (restrict[[numfield, numfield], [real, real], numfield] (*)), 1] ((red_norm(q)`x))"
                 "one_q" "red_norm(q)")
                (("1" (REPLACE -1 1)
                  (("1" (HIDE -1)
                    (("1" (REWRITE "one_q_times")
                      (("1" (EXPAND "*")
                        (("1" (EXPAND "one_q")
                          (("1" (ASSERT)
                            (("1" (SPLIT)
                              (("1" (ASSERT)
                                (("1"
                                  (LEMMA
                                   "inv_left[nz_T[real, restrict[[numfield, numfield], [real, real], numfield](+), restrict[[numfield, numfield], [real, real], numfield](*), 0], restrict [[real, real], [nz_T[real, restrict[[numfield, numfield], [real, real], numfield] (+), restrict[[numfield, numfield], [real, real], numfield] (*), 0], nz_T[real, restrict[[numfield, numfield], [real, real], numfield] (+) , restrict[[numfield, numfield], [real, real], numfield] (*), 0]], real] (restrict[[numfield, numfield], [real, real], numfield](*)), 1]")
                                  (("1" (INST -1 "red_norm(q)`x")
                                    (("1" (EXPAND "restrict")
                                      (("1" (PROPAX) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (LEMMA "red_norm_charac")
                                (("2" (INST -1 "q")
                                  (("2" (CASE-REPLACE "red_norm(q)`y = 0")
                                    (("1"
                                      (NAME-REPLACE "A"
                                       "inv[nz_T[real, restrict[[numfield, numfield], [real, real], numfield](+), restrict[[numfield, numfield], [real, real], numfield](*), 0], restrict [[real, real], [nz_T[real, restrict[[numfield, numfield], [real, real], numfield] (+), restrict[[numfield, numfield], [real, real], numfield] (*), 0], nz_T[real, restrict[[numfield, numfield], [real, real], numfield] (+) , restrict[[numfield, numfield], [real, real], numfield] (*), 0]], real] (restrict[[numfield, numfield], [real, real], numfield](*)), 1] ((red_norm(q)`x))")
                                      (("1" (HIDE -) (("1" (ASSERT) NIL NIL))
                                        NIL)
                                       ("2" (HIDE 2)
                                        (("2" (SKEEP)
                                          (("2" (EXPAND "restrict")
                                            (("2"
                                              (LEMMA
                                               " nzreal_times_nzreal_is_nzreal ")
                                              (("2" (INST -1 "x1`1" "x1`2")
                                                (("2" (HIDE -3 -4)
                                                  (("2" (GRIND) NIL NIL)) NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("3" (HIDE 2)
                                        (("3" (SKEEP)
                                          (("3" (EXPAND "restrict")
                                            (("3" (PROPAX) NIL NIL)) NIL))
                                          NIL))
                                        NIL)
                                       ("4" (HIDE 2)
                                        (("4" (INST 1 "1") NIL NIL)) NIL))
                                      NIL)
                                     ("2" (HIDE 2)
                                      (("2"
                                        (NAME-REPLACE "B"
                                         "q`x * q`x + inv(-1) * (q`y * q`y) + inv(-1) * (q`z * q`z) + (-1 * -1) * (q`t * q`t)")
                                        (("2" (ASSERT) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("3" (LEMMA "red_norm_charac")
                                (("3" (INST -1 "q")
                                  (("3" (CASE-REPLACE "red_norm(q)`z = 0")
                                    (("1"
                                      (NAME-REPLACE "A"
                                       "inv[nz_T[real, restrict[[numfield, numfield], [real, real], numfield](+), restrict[[numfield, numfield], [real, real], numfield](*), 0], restrict [[real, real], [nz_T[real, restrict[[numfield, numfield], [real, real], numfield] (+), restrict[[numfield, numfield], [real, real], numfield] (*), 0], nz_T[real, restrict[[numfield, numfield], [real, real], numfield] (+) , restrict[[numfield, numfield], [real, real], numfield] (*), 0]], real] (restrict[[numfield, numfield], [real, real], numfield](*)), 1] ((red_norm(q)`x))")
                                      (("1" (HIDE -) (("1" (ASSERT) NIL NIL))
                                        NIL)
                                       ("2" (HIDE 2)
                                        (("2" (SKEEP)
                                          (("2" (EXPAND "restrict")
                                            (("2"
                                              (LEMMA
                                               " nzreal_times_nzreal_is_nzreal ")
                                              (("2" (INST -1 "x1`1" "x1`2")
                                                (("2" (HIDE -3 -4)
                                                  (("2" (GRIND) NIL NIL)) NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("3" (HIDE 2)
                                        (("3" (SKEEP)
                                          (("3" (EXPAND "restrict")
                                            (("3" (PROPAX) NIL NIL)) NIL))
                                          NIL))
                                        NIL)
                                       ("4" (HIDE 2)
                                        (("4" (INST 1 "1") NIL NIL)) NIL))
                                      NIL)
                                     ("2" (HIDE 2)
                                      (("2"
                                        (NAME-REPLACE "B"
                                         "q`x * q`x + inv(-1) * (q`y * q`y) + inv(-1) * (q`z * q`z) + (-1 * -1) * (q`t * q`t)")
                                        (("2" (ASSERT) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("4" (LEMMA "red_norm_charac")
                                (("4" (INST -1 "q")
                                  (("4" (CASE-REPLACE "red_norm(q)`t = 0")
                                    (("1"
                                      (NAME-REPLACE "A"
                                       "inv[nz_T[real, restrict[[numfield, numfield], [real, real], numfield](+), restrict[[numfield, numfield], [real, real], numfield](*), 0], restrict [[real, real], [nz_T[real, restrict[[numfield, numfield], [real, real], numfield] (+), restrict[[numfield, numfield], [real, real], numfield] (*), 0], nz_T[real, restrict[[numfield, numfield], [real, real], numfield] (+) , restrict[[numfield, numfield], [real, real], numfield] (*), 0]], real] (restrict[[numfield, numfield], [real, real], numfield](*)), 1] ((red_norm(q)`x))")
                                      (("1" (HIDE -) (("1" (ASSERT) NIL NIL))
                                        NIL)
                                       ("2" (HIDE 2)
                                        (("2" (SKEEP)
                                          (("2" (EXPAND "restrict")
                                            (("2"
                                              (LEMMA
                                               " nzreal_times_nzreal_is_nzreal ")
                                              (("2" (INST -1 "x1`1" "x1`2")
                                                (("2" (HIDE -3 -4)
                                                  (("2" (GRIND) NIL NIL)) NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("3" (HIDE 2)
                                        (("3" (SKEEP)
                                          (("3" (EXPAND "restrict")
                                            (("3" (PROPAX) NIL NIL)) NIL))
                                          NIL))
                                        NIL)
                                       ("4" (HIDE 2)
                                        (("4" (INST 1 "1") NIL NIL)) NIL))
                                      NIL)
                                     ("2" (HIDE 2)
                                      (("2"
                                        (NAME-REPLACE "B"
                                         "q`x * q`x + inv(-1) * (q`y * q`y) + inv(-1) * (q`z * q`z) + (-1 * -1) * (q`t * q`t)")
                                        (("2" (ASSERT) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (HIDE 2)
                        (("2" (SKEEP)
                          (("2" (EXPAND "restrict") (("2" (ASSERT) NIL NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("3" (HIDE 2)
                        (("3" (SKEEP) (("3" (GRIND) NIL NIL)) NIL)) NIL)
                       ("4" (HIDE 2) (("4" (INST 1 "1") NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (HIDE 2)
                  (("2" (SKEEP)
                    (("2" (EXPAND "restrict") (("2" (ASSERT) NIL NIL)) NIL))
                    NIL))
                  NIL)
                 ("3" (HIDE 2)
                  (("3" (SKEEP)
                    (("3" (EXPAND "restrict") (("3" (PROPAX) NIL NIL)) NIL))
                    NIL))
                  NIL)
                 ("4" (HIDE 2) (("4" (INST 1 "1") NIL NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (HIDE 1)
          (("2" (EXPAND "*")
            (("2" (EXPAND "one_q")
              (("2" (EXPAND "zero_q")
                (("2" (LEMMA "QH_nzquat_nznorm")
                  (("2" (INST -1 "q")
                    (("2" (LEMMA "quotient_pos_lt")
                      (("2"
                        (INST -1
                         "(red_norm [real, restrict[[numfield, numfield], [real, real], numfield](+), restrict[[numfield, numfield], [real, real], numfield](*), 0, 1, -1, -1] (q)`x)")
                        (("2" (ASSERT) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("3" (HIDE 2)
          (("3" (SKEEP)
            (("3" (EXPAND "restrict") (("3" (ASSERT) NIL NIL)) NIL)) NIL))
          NIL)
         ("4" (HIDE 2)
          (("4" (SKEEP)
            (("4" (EXPAND "restrict") (("4" (PROPAX) NIL NIL)) NIL)) NIL))
          NIL)
         ("5" (HIDE 2) (("5" (INST 1 "1") NIL NIL)) NIL))
        NIL)
       ("2" (HIDE 2)
        (("2" (EXPAND "one_q")
          (("2" (EXPAND "zero_q") (("2" (PROPAX) NIL NIL)) NIL)) NIL))
        NIL)
       ("3" (HIDE 2)
        (("3" (SKEEP)
          (("3" (LEMMA "QH_nzquat_nznorm")
            (("3" (LEMMA "div_ring_iff_nz_rednorm")
              (("3" (PROP)
                (("3" (HIDE -2)
                  (("3" (EXPAND "division_ring?")
                    (("3" (EXPAND "group?")
                      (("3" (EXPAND "monoid?")
                        (("3" (EXPAND "monad?")
                          (("3" (FLATTEN)
                            (("3" (HIDE -1 -3 -4 -5 -6)
                              (("3" (EXPAND "star_closed?")
                                (("3" (INST -1 "x1`1" "x1`2")
                                  (("1" (EXPAND "member")
                                    (("1" (EXPAND "remove")
                                      (("1" (FLATTEN)
                                        (("1" (HIDE -1 -2)
                                          (("1" (GRIND) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (EXPAND "remove")
                                    (("2" (EXPAND "member")
                                      (("2" (EXPAND "fullset")
                                        (("2" (HIDE -) (("2" (ASSERT) NIL NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("3" (EXPAND "remove")
                                    (("3" (EXPAND "member")
                                      (("3" (EXPAND "fullset")
                                        (("3" (HIDE -) (("3" (ASSERT) NIL NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|division_ring?| CONST-DECL "bool" |division_ring_def| NIL)
    (|monoid?| CONST-DECL "bool" |monoid_def| NIL)
    (|star_closed?| CONST-DECL "bool" |groupoid_def| NIL)
    (|member| CONST-DECL "bool" |sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|remove| CONST-DECL "set" |sets| NIL)
    (|fullset| CONST-DECL "set" |sets| NIL)
    (|x1| SKOLEM-CONST-DECL "[nz_quat
     [real, restrict[[numfield, numfield], [real, real], numfield](+),
      restrict[[numfield, numfield], [real, real], numfield](*), 0, 1, -1,
      -1],
 nz_quat
     [real, restrict[[numfield, numfield], [real, real], numfield](+),
      restrict[[numfield, numfield], [real, real], numfield](*), 0, 1, -1,
      -1]]"
     |quaternions_Hamilton_extra| NIL)
    (|monad?| CONST-DECL "bool" |monad_def| NIL)
    (|group?| CONST-DECL "bool" |group_def| NIL)
    (|div_ring_iff_nz_rednorm| FORMULA-DECL NIL |quaternions| NIL)
    (|left_identity| FORMULA-DECL NIL |monad| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (* CONST-DECL "quat" |quaternions_def| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|inv| CONST-DECL "{y | x * y = one AND y * x = one}" |group| NIL)
    (|red_norm| CONST-DECL "quat" |quaternions_def| NIL)
    (|q| SKOLEM-CONST-DECL "nz_quat
    [real, restrict[[numfield, numfield], [real, real], numfield](+),
     restrict[[numfield, numfield], [real, real], numfield](*), 0, 1, -1,
     -1]"
     |quaternions_Hamilton_extra| NIL)
    (|nz_T| TYPE-EQ-DECL NIL |ring_nz_closed_def| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal"
     |real_types| NIL)
    (|one_q_times| FORMULA-DECL NIL |quaternions_def| NIL)
    (|negate_nz_T_is_nz_T| APPLICATION-JUDGEMENT
     "nz_T[real, restrict[[numfield, numfield], [real, real], numfield](+),
     restrict[[numfield, numfield], [real, real], numfield](*), 0]"
     |quaternions_Hamilton_extra| NIL)
    (|red_norm_charac| FORMULA-DECL NIL |quaternions| NIL)
    (|odd_times_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|nzreal_times_nzreal_is_nzreal| JUDGEMENT-TCC NIL |real_types| NIL)
    (|inv_left| FORMULA-DECL NIL |group| NIL)
    (|times_one_q| FORMULA-DECL NIL |quaternions_def| NIL)
    (|sc_comm| FORMULA-DECL NIL |quaternions_def| NIL)
    (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|quotient_pos_lt| FORMULA-DECL NIL |real_props| NIL)
    (|QH_nzquat_nznorm| FORMULA-DECL NIL |quaternions_Hamilton_extra| NIL)
    (|one_q| CONST-DECL "quat" |quaternions_def| NIL)
    (* CONST-DECL "[quat, quat -> quat]" |quaternions_def| NIL)
    (|nz_quat| NONEMPTY-TYPE-EQ-DECL NIL |quaternions| NIL)
    (|zero_q| CONST-DECL "quat" |quaternions_def| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|quat| TYPE-EQ-DECL NIL |quaternions_def| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|unique_inv| FORMULA-DECL NIL |group| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL))
   SHOSTAK))
 (|QH_inv_q_prod_charac| 0
  (|QH_inv_q_prod_charac-1| |nil| 3907408492
   ("" (SKEEP)
    (("" (ASSERT)
      (("" (LEMMA "inv_q_prod_charac")
        (("" (PROP)
          (("1" (INST -1 "q")
            (("1" (REPLACES -1)
              (("1" (LEMMA "QH_inv_red_norm")
                (("1" (INST -1 "q")
                  (("1" (REPLACES -1)
                    (("1" (ASSERT)
                      (("1" (LEMMA "sc_comm")
                        (("1"
                          (INST -1
                           " inv[nz_T[real, restrict[[numfield, numfield], [real, real], numfield](+), restrict[[numfield, numfield], [real, real], numfield](*), 0], restrict [[real, real], [nz_T[real, restrict[[numfield, numfield], [real, real], numfield] (+), restrict[[numfield, numfield], [real, real], numfield] (*), 0] , nz_T[real, restrict[[numfield, numfield], [real, real], numfield] (+), restrict[[numfield, numfield], [real, real], numfield] (*), 0]], real] (restrict[[numfield, numfield], [real, real], numfield](*)), 1] ((red_norm(q)`x))"
                           "conjugate(q)" "one_q")
                          (("1" (REPLACE -1 1 RL)
                            (("1" (REWRITE "sc_quat_assoc" :DIR RL)
                              (("1" (REWRITE "times_one_q") NIL NIL)
                               ("2" (HIDE -1 2)
                                (("2" (SKEEP)
                                  (("2" (EXPAND "restrict")
                                    (("2" (ASSERT) NIL NIL)) NIL))
                                  NIL))
                                NIL)
                               ("3" (HIDE -1 2)
                                (("3" (SKEEP)
                                  (("3" (EXPAND "restrict")
                                    (("3" (PROPAX) NIL NIL)) NIL))
                                  NIL))
                                NIL)
                               ("4" (HIDE -1 2) (("4" (INST 1 "1") NIL NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (HIDE -1 2)
                            (("2" (SKEEP)
                              (("2" (EXPAND "restrict")
                                (("2" (ASSERT) NIL NIL)) NIL))
                              NIL))
                            NIL)
                           ("3" (HIDE -1 2)
                            (("3" (SKEEP)
                              (("3" (EXPAND "restrict")
                                (("3" (PROPAX) NIL NIL)) NIL))
                              NIL))
                            NIL)
                           ("4" (HIDE -1 2) (("4" (INST 1 "1") NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (HIDE -1 2)
            (("2" (LEMMA "div_ring_iff_nz_rednorm")
              (("2" (LEMMA "QH_nzquat_nznorm") (("2" (ASSERT) NIL NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|inv_q_prod_charac| FORMULA-DECL NIL |quaternions| NIL)
    (|div_ring_iff_nz_rednorm| FORMULA-DECL NIL |quaternions| NIL)
    (|quat| TYPE-EQ-DECL NIL |quaternions_def| NIL)
    (|zero_q| CONST-DECL "quat" |quaternions_def| NIL)
    (|nz_quat| NONEMPTY-TYPE-EQ-DECL NIL |quaternions| NIL)
    (|sc_comm| FORMULA-DECL NIL |quaternions_def| NIL)
    (|times_one_q| FORMULA-DECL NIL |quaternions_def| NIL)
    (|sc_quat_assoc| FORMULA-DECL NIL |quaternions_def| NIL)
    (|one_q| CONST-DECL "quat" |quaternions_def| NIL)
    (|conjugate| CONST-DECL "quat" |quaternions_def| NIL)
    (|red_norm| CONST-DECL "quat" |quaternions_def| NIL)
    (|inv| CONST-DECL "{y | x * y = one AND y * x = one}" |group| NIL)
    (|nz_T| TYPE-EQ-DECL NIL |ring_nz_closed_def| NIL)
    (|left_identity| FORMULA-DECL NIL |monad| NIL))
   SHOSTAK))
 (|quat_trig_form_aux| 0
  (|quat_trig_form_aux-1| |nil| 3907411117
   ("" (SKEEP)
    (("" (LEMMA "arc_sin_cos")
      (("" (INST -1 "q`x" "QH_norm(pure_part(q))" "1")
        (("" (PROP)
          (("1" (SKEEP) (("1" (INST 1 "d") (("1" (ASSERT) NIL NIL)) NIL)) NIL)
           ("2" (HIDE 2)
            (("2" (TYPEPRED "q")
              (("2" (LEMMA "norm_decomp_1")
                (("2" (INST -1 "q")
                  (("2" (REWRITE "red_norm_QH1")
                    (("2" (EXPAND "sq" 1 3)
                      (("2" (REPLACES -1) (("2" (GRIND) NIL NIL)) NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|arc_sin_cos| FORMULA-DECL NIL |trig_inverses| |trig|)
    (|cos_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|sin_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|left_identity| FORMULA-DECL NIL |monad| NIL)
    (|sq| CONST-DECL "nonneg_real" |sq| |reals|)
    (|conjugate| CONST-DECL "quat" |quaternions_def| NIL)
    (|red_norm| CONST-DECL "quat" |quaternions_def| NIL)
    (|pure_part| CONST-DECL "quat" |quaternions_def| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|quat| TYPE-EQ-DECL NIL |quaternions_def| NIL))
   SHOSTAK))
 (|quat_trig_form| 0
  (|quat_trig_form-1| |nil| 3907411149
   ("" (SKEEP)
    (("" (LEMMA "quat_trig_form_aux")
      (("" (INST -1 "q")
        (("" (SKEEP)
          (("" (LEMMA "trig_eq_prep")
            (("" (INST -1 "t")
              (("" (SKOSIMP)
                (("" (CASE-REPLACE "t+2*i!1*pi = 2*pi")
                  (("1" (INST 1 "0")
                    (("1" (PROP)
                      (("1" (LEMMA "cos_period")
                        (("1" (INST -1 "t" "i!1")
                          (("1" (REPLACE -2 -1)
                            (("1" (LEMMA "cos_2k_pi")
                              (("1" (INST-CP -1 "1")
                                (("1" (INST -1 "0")
                                  (("1" (HIDE (-4 -5 -6 -8))
                                    (("1" (GRIND) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (LEMMA "sin_period")
                        (("2" (INST -1 "t" "i!1")
                          (("2" (REPLACE -2 -1)
                            (("2" (LEMMA "sin_k_pi")
                              (("2" (INST -1 "0")
                                (("2" (LEMMA "sin_2pi")
                                  (("2" (HIDE (-4 -5 -6 -7))
                                    (("2" (GRIND) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (ASSERT) NIL NIL))
                    NIL)
                   ("2" (NAME-REPLACE "a" "t + 2 * i!1 * pi")
                    (("2" (INST 2 "a")
                      (("1" (EXPAND "a")
                        (("1" (PROP)
                          (("1" (LEMMA "cos_period")
                            (("1" (INST -1 "t" "i!1")
                              (("1" (HIDE (-2 -3 -5))
                                (("1" (NAME-REPLACE "b" "t + 2 * i!1 * pi")
                                  (("1" (ASSERT) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (LEMMA "sin_period")
                            (("2" (INST -1 "t" "i!1")
                              (("2" (NAME-REPLACE "c" "t + 2 * i!1 * pi" _)
                                (("2" (ASSERT) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (ASSERT) NIL NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|cos| CONST-DECL "real" |sincos_def| |trig|)
    (|pi| CONST-DECL "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" |pi_def|
     |trig|)
    (|pi_bound| NAME-JUDGEMENT
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| |trig|)
    (|cos_2k_pi| FORMULA-DECL NIL |sincos| |trig|)
    (|zero_times| FORMULA-DECL NIL |ring| NIL)
    (|cos_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|cos_period| FORMULA-DECL NIL |sincos| |trig|)
    (|sin_k_pi| FORMULA-DECL NIL |sincos| |trig|)
    (|sin_2pi| FORMULA-DECL NIL |sincos| |trig|)
    (|pure_part| CONST-DECL "quat" |quaternions_def| NIL)
    (|conjugate| CONST-DECL "quat" |quaternions_def| NIL)
    (|red_norm| CONST-DECL "quat" |quaternions_def| NIL)
    (|sin_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|sin_period| FORMULA-DECL NIL |sincos| |trig|)
    (|nnreal_lt_2pi| NONEMPTY-TYPE-EQ-DECL NIL |trig_types| |trig|)
    (|trig_eq_prep| FORMULA-DECL NIL |trig_basic| |trig|)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|quat| TYPE-EQ-DECL NIL |quaternions_def| NIL))
   SHOSTAK))
 (|QH_norm_is_norm| 0
  (|QH_norm_is_norm-1| |nil| 3907411233
   ("" (SKEEP)
    (("" (EXPAND "QH_norm")
      (("" (EXPAND "norm")
        (("" (LEMMA "red_norm_charac")
          (("" (INST?)
            (("" (REPLACE -1 1)
              (("" (HIDE -1)
                (("" (BETA)
                  (("" (EXPAND "sqv")
                    (("" (EXPAND "*")
                      (("" (CASE-REPLACE "inv(-1) = 1" :HIDE? T)
                        (("1" (TYPEPRED "q")
                          (("1" (EXPAND "pure_quat")
                            (("1" (REPLACES -1)
                              (("1" (REWRITE* "one_times")
                                (("1" (REWRITE* "zero_times")
                                  (("1"
                                    (CASE-REPLACE
                                     " (q`y * q`y) + (q`z * q`z) + q`t * q`t + 0 = (q`y * q`y) + (q`z * q`z) + q`t * q`t ")
                                    (("1" (HIDE 2)
                                      (("1" (LEMMA "plus_zero")
                                        (("1" (INST?) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (ASSERT) NIL NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|red_norm_charac| FORMULA-DECL NIL |quaternions| NIL)
    (* CONST-DECL "real" |vectors_3D| |vectors|)
    (|zero_times| FORMULA-DECL NIL |ring| NIL)
    (|plus_zero| FORMULA-DECL NIL |ring| NIL)
    (|one_times| FORMULA-DECL NIL |ring_with_one| NIL)
    (|inv| CONST-DECL "{y | x * y = one AND y * x = one}" |group| NIL)
    (|sqv| CONST-DECL "nnreal" |vectors_3D| |vectors|)
    (|pure_quat| CONST-DECL "set[quat]" |quaternions_def| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|quat| TYPE-EQ-DECL NIL |quaternions_def| NIL)
    (|norm| CONST-DECL "nnreal" |vectors_3D| |vectors|))
   SHOSTAK)))

