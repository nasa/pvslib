(|ring_zn_extra|
 (|equal_cosets_rem| 0
  (|equal_cosets_rem-1| NIL 3926093196
   ("" (LEMMA "equal_cosets_div")
    (("" (SKEEP)
      (("" (INST -1 "a" "b" "n")
        (("" (LEMMA "same_remainder")
          (("" (INST -1 "n" "b" "a")
            (("" (PROP)
              (("1" (HIDE-ALL-BUT (-4 1)) (("1" (ASSERT) NIL NIL)) NIL)
               ("2" (HIDE-ALL-BUT (-1 5)) (("2" (ASSERT) NIL NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|same_remainder| FORMULA-DECL NIL |modulo_arithmetic| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|equal_cosets_div| FORMULA-DECL NIL |ring_zn| |algebra_examples|))
   SHOSTAK))
 (|zn_identity| 0
  (|zn_identity-1| NIL 3935141502
   ("" (SKEEP)
    (("" (REWRITE "lcoset_iff_coset" :DIR RL)
      (("" (EXPAND "left_coset?")
        (("" (INST 1 "k")
          (("" (EXPAND "Z")
            (("" (EXPAND "fullset") (("" (PROPAX) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (Z CONST-DECL
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     |ring_zn| |algebra_examples|)
    (|ring| NONEMPTY-TYPE-EQ-DECL NIL |ring| |algebra|)
    (|ring?| CONST-DECL "bool" |ring_def| |algebra|)
    (|nZ| CONST-DECL "set[int]" |ring_zn| |algebra_examples|)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (+ CONST-DECL "set[T]" |cosets_def| |algebra|)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|lcoset_iff_coset| FORMULA-DECL NIL |ring_cosets_lemmas| |algebra|)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|k| SKOLEM-CONST-DECL "int" |ring_zn_extra| NIL)
    (|fullset| CONST-DECL "set" |sets| NIL)
    (|left_coset?| CONST-DECL "bool" |cosets_def| |algebra|))
   SHOSTAK))
 (|zn_zero_coset_char| 0
  (|zn_zero_coset_char-1| NIL 3942687239
   ("" (SKEEP)
    (("" (NAME-REPLACE "lhs" "k + nZ(n)")
      (("" (CASE-REPLACE "nZ(n) = 0 + nZ(n)")
        (("1" (EXPAND "lhs")
          (("1" (PROP)
            (("1" (REWRITE "equal_cosets_rem")
              (("1" (REWRITE "modulo_arithmetic.rem_zero")
                (("1" (REWRITE "rem_def2") NIL NIL)) NIL))
              NIL)
             ("2" (REWRITE "equal_cosets_rem")
              (("2" (REWRITE "modulo_arithmetic.rem_zero")
                (("2" (REWRITE "rem_def2") NIL NIL)) NIL))
              NIL))
            NIL))
          NIL)
         ("2" (REWRITE "left_zero") NIL NIL))
        NIL))
      NIL))
    NIL)
   ((|nZ| CONST-DECL "set[int]" |ring_zn| |algebra_examples|)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (+ CONST-DECL "set[T]" |cosets_def| |algebra|)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|left_zero| FORMULA-DECL NIL |ring_cosets_lemmas| |algebra|)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|lhs| SKOLEM-CONST-DECL "set[int]" |ring_zn_extra| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|equal_cosets_rem| FORMULA-DECL NIL |ring_zn_extra| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|rem_def2| FORMULA-DECL NIL |modulo_arithmetic| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|mod| NONEMPTY-TYPE-EQ-DECL NIL |euclidean_division| NIL)
    (|rem_zero| FORMULA-DECL NIL |modulo_arithmetic| NIL))
   SHOSTAK))
 (|zn_add_pair| 0
  (|zn_add_pair-1| NIL 3935141365
   ("" (SKEEP)
    (("" (CASE-REPLACE "add(Z, nZ(n))(x) = add(Z, nZ(n))(x`1, x`2)")
      (("1" (REWRITE "coset_add") (("1" (REWRITE "nZ_ideal") NIL NIL)) NIL)
       ("2" (ASSERT) NIL NIL))
      NIL))
    NIL)
   ((|nZ| CONST-DECL "set[int]" |ring_zn| |algebra_examples|)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (Z CONST-DECL
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     |ring_zn| |algebra_examples|)
    (|ring| NONEMPTY-TYPE-EQ-DECL NIL |ring| |algebra|)
    (|ring?| CONST-DECL "bool" |ring_def| |algebra|)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|add| CONST-DECL "set[T]" |cosets_def| |algebra|)
    (|coset| TYPE-EQ-DECL NIL |cosets_def| |algebra|)
    (|coset?| CONST-DECL "bool" |cosets_def| |algebra|)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|nZ_ideal| FORMULA-DECL NIL |ring_zn| |algebra_examples|)
    (|ideal| TYPE-EQ-DECL NIL |ring_ideal_def| |algebra|)
    (|ideal?| CONST-DECL "bool" |ring_ideal_def| |algebra|)
    (|coset_add| FORMULA-DECL NIL |quotient_rings| |algebra|))
   SHOSTAK))
 (|zn_add_charac_TCC1| 0
  (|zn_add_charac_TCC1-1| NIL 3942691831
   ("" (SKEEP) (("" (REWRITE "zn_identity") NIL NIL)) NIL)
   ((|zn_identity| FORMULA-DECL NIL |ring_zn_extra| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL))
   NIL
   (|zn_add_charac| SUBTYPE
    "(cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].+)(ring_zn_extra.a, ring_zn.nZ(ring_zn_extra.n))"
    "coset[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)](ring_zn.Z, ring_zn.nZ(ring_zn_extra.n))")))
 (|zn_add_charac| 0
  (|zn_add_charac-1| NIL 3942691863
   (""
    (STOP-REWRITE "right_identity" "left_identity" "one_left" "one_right"
     "zero_plus" "plus_zero")
    (("" (SKEEP)
      (("" (EXPAND "add")
        (("" (EXPAND "lc_gen")
          ((""
            (TYPEPRED "choose[int]({a: int | Z(a) AND b + nZ(n) = a + nZ(n)})")
            (("1"
              (TYPEPRED
               "choose[int]({a_1: int | Z(a_1) AND a + nZ(n) = a_1 + nZ(n)})")
              (("1" (HIDE -1 -3)
                (("1" (REWRITE* "equal_cosets_rem")
                  (("1" (LEMMA "rem_sum")
                    (("1"
                      (INST -1 "n"
                       "choose[int]({a: int | Z(a) AND b + nZ(n) = a + nZ(n)})"
                       "a"
                       "choose[int]({a_1: int | Z(a_1) AND a + nZ(n) = a_1 + nZ(n)})"
                       "b")
                      (("1" (PROP) (("1" (ASSERT) NIL NIL)) NIL)
                       ("2" (HIDE-ALL-BUT 1)
                        (("2" (EXPAND "nonempty?")
                          (("2" (EXPAND "empty?")
                            (("2" (INST -1 "a")
                              (("2" (EXPAND "member")
                                (("2" (EXPAND "Z")
                                  (("2" (EXPAND "fullset")
                                    (("2" (PROPAX) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("3" (HIDE-ALL-BUT 1)
                        (("3" (EXPAND "nonempty?")
                          (("3" (EXPAND "empty?")
                            (("3" (INST -1 "b")
                              (("3" (EXPAND "member")
                                (("3" (EXPAND "Z")
                                  (("3" (EXPAND "fullset")
                                    (("3" (PROPAX) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (HIDE-ALL-BUT 1)
                (("2" (EXPAND "nonempty?")
                  (("2" (EXPAND "empty?")
                    (("2" (INST -1 "a")
                      (("2" (EXPAND "member")
                        (("2" (EXPAND "Z")
                          (("2" (EXPAND "fullset") (("2" (PROPAX) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (HIDE-ALL-BUT 1)
              (("2" (EXPAND "nonempty?")
                (("2" (EXPAND "empty?")
                  (("2" (INST -1 "b")
                    (("2" (EXPAND "member")
                      (("2" (EXPAND "Z")
                        (("2" (EXPAND "fullset") (("2" (PROPAX) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|lc_gen| CONST-DECL "T" |cosets_def| |algebra|)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|equal_cosets_rem| FORMULA-DECL NIL |ring_zn_extra| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|n| SKOLEM-CONST-DECL "posnat" |ring_zn_extra| NIL)
    (|b| SKOLEM-CONST-DECL "int" |ring_zn_extra| NIL)
    (|a| SKOLEM-CONST-DECL "int" |ring_zn_extra| NIL)
    (|fullset| CONST-DECL "set" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|rem_sum| FORMULA-DECL NIL |modulo_arithmetic| NIL)
    (|nZ| CONST-DECL "set[int]" |ring_zn| |algebra_examples|)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (+ CONST-DECL "set[T]" |cosets_def| |algebra|)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|choose| CONST-DECL "(p)" |sets| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (Z CONST-DECL
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     |ring_zn| |algebra_examples|)
    (|ring| NONEMPTY-TYPE-EQ-DECL NIL |ring| |algebra|)
    (|ring?| CONST-DECL "bool" |ring_def| |algebra|)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|add| CONST-DECL "set[T]" |cosets_def| |algebra|))
   SHOSTAK))
 (|zn_product_pair| 0
  (|zn_product_pair-1| NIL 3935141410
   ("" (SKEEP)
    (("" (CASE-REPLACE "product(Z, nZ(n))(x) = product(Z, nZ(n))(x`1, x`2)")
      (("1" (REWRITE "coset_product") (("1" (REWRITE "nZ_ideal") NIL NIL)) NIL)
       ("2" (ASSERT) NIL NIL))
      NIL))
    NIL)
   ((|nZ| CONST-DECL "set[int]" |ring_zn| |algebra_examples|)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (Z CONST-DECL
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     |ring_zn| |algebra_examples|)
    (|ring| NONEMPTY-TYPE-EQ-DECL NIL |ring| |algebra|)
    (|ring?| CONST-DECL "bool" |ring_def| |algebra|)
    (|product| CONST-DECL "set[T]" |product_coset_def| |algebra|)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|coset| TYPE-EQ-DECL NIL |cosets_def| |algebra|)
    (|coset?| CONST-DECL "bool" |cosets_def| |algebra|)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|nZ_ideal| FORMULA-DECL NIL |ring_zn| |algebra_examples|)
    (|ideal| TYPE-EQ-DECL NIL |ring_ideal_def| |algebra|)
    (|ideal?| CONST-DECL "bool" |ring_ideal_def| |algebra|)
    (|coset_product| FORMULA-DECL NIL |quotient_rings| |algebra|))
   SHOSTAK))
 (|zn_product_charac| 0
  (|zn_product_charac-1| NIL 3942690936
   ("" (SKEEP)
    (("" (EXPAND "product")
      (("" (EXPAND "lproduct")
        (("" (EXPAND "lc_gen")
          ((""
            (TYPEPRED
             "choose[int]({a_1: int | Z(a_1) AND a + nZ(n) = a_1 + nZ(n)})")
            (("1"
              (TYPEPRED
               "choose[int]({a: int | Z(a) AND b + nZ(n) = a + nZ(n)})")
              (("1" (HIDE -1 -3)
                (("1" (REWRITE* "equal_cosets_rem")
                  (("1" (REWRITE "rem_prod") NIL NIL)) NIL))
                NIL)
               ("2" (HIDE-ALL-BUT 1)
                (("2" (EXPAND "nonempty?")
                  (("2" (EXPAND "empty?")
                    (("2" (INST -1 "b")
                      (("2" (EXPAND "member")
                        (("2" (EXPAND "Z")
                          (("2" (EXPAND "fullset") (("2" (PROPAX) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (HIDE-ALL-BUT 1)
              (("2" (EXPAND "nonempty?")
                (("2" (EXPAND "empty?")
                  (("2" (INST -1 "a")
                    (("2" (EXPAND "member")
                      (("2" (EXPAND "Z")
                        (("2" (EXPAND "fullset") (("2" (PROPAX) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|product| CONST-DECL "set[T]" |product_coset_def| |algebra|)
    (|lc_gen| CONST-DECL "T" |cosets_def| |algebra|)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|equal_cosets_rem| FORMULA-DECL NIL |ring_zn_extra| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|rem_prod| FORMULA-DECL NIL |modulo_arithmetic| NIL)
    (|fullset| CONST-DECL "set" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|nZ| CONST-DECL "set[int]" |ring_zn| |algebra_examples|)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (+ CONST-DECL "set[T]" |cosets_def| |algebra|)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|choose| CONST-DECL "(p)" |sets| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (Z CONST-DECL
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     |ring_zn| |algebra_examples|)
    (|ring| NONEMPTY-TYPE-EQ-DECL NIL |ring| |algebra|)
    (|ring?| CONST-DECL "bool" |ring_def| |algebra|)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|lproduct| CONST-DECL "set[T]" |product_coset_def| |algebra|))
   SHOSTAK))
 (|zn_add_group_TCC1| 0
  (|zn_add_group_TCC1-1| NIL 3935246126
   ("" (SKEEP)
    (("" (INST 1 "0+nZ(n)") (("" (REWRITE "zn_identity") NIL NIL)) NIL)) NIL)
   ((|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (+ CONST-DECL "set[T]" |cosets_def| |algebra|)
    (|nZ| CONST-DECL "set[int]" |ring_zn| |algebra_examples|)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (Z CONST-DECL
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     |ring_zn| |algebra_examples|)
    (|ring| NONEMPTY-TYPE-EQ-DECL NIL |ring| |algebra|)
    (|ring?| CONST-DECL "bool" |ring_def| |algebra|)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|coset?| CONST-DECL "bool" |cosets_def| |algebra|)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|n| SKOLEM-CONST-DECL "posnat" |ring_zn_extra| NIL)
    (|zn_identity| FORMULA-DECL NIL |ring_zn_extra| NIL))
   NIL
   (|zn_add_group| EXISTENCE ""
    "(cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].coset?(ring_zn.Z, ring_zn.nZ(ring_zn_extra.n)))")))
 (|zn_add_group_TCC2| 0
  (|zn_add_group_TCC2-1| NIL 3935246126
   ("" (SKEEP) (("" (SKEEP) (("" (REWRITE "zn_add_pair") NIL NIL)) NIL)) NIL)
   ((|coset| TYPE-EQ-DECL NIL |cosets_def| |algebra|)
    (|nZ| CONST-DECL "set[int]" |ring_zn| |algebra_examples|)
    (Z CONST-DECL
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     |ring_zn| |algebra_examples|)
    (|ring| NONEMPTY-TYPE-EQ-DECL NIL |ring| |algebra|)
    (|ring?| CONST-DECL "bool" |ring_def| |algebra|)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|coset?| CONST-DECL "bool" |cosets_def| |algebra|)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|zn_add_pair| FORMULA-DECL NIL |ring_zn_extra| NIL))
   NIL
   (|zn_add_group| SUBTYPE
    "cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].add(ring_zn.Z, ring_zn.nZ(ring_zn_extra.n))"
    "[[(cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].coset?(ring_zn.Z, ring_zn.nZ(ring_zn_extra.n))), (cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].coset?(ring_zn.Z, ring_zn.nZ(ring_zn_extra.n)))] -> (cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].coset?(ring_zn.Z, ring_zn.nZ(ring_zn_extra.n)))]")))
 (|zn_add_group_TCC3| 0
  (|zn_add_group_TCC3-1| NIL 3935246126
   ("" (SKEEP)
    (("" (REWRITE "ideal_is_coset") (("" (REWRITE "nZ_ideal") NIL NIL)) NIL))
    NIL)
   ((|ideal_is_coset| FORMULA-DECL NIL |ring_cosets_lemmas| |algebra|)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|ring?| CONST-DECL "bool" |ring_def| |algebra|)
    (|ring| NONEMPTY-TYPE-EQ-DECL NIL |ring| |algebra|)
    (Z CONST-DECL
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     |ring_zn| |algebra_examples|)
    (|ideal?| CONST-DECL "bool" |ring_ideal_def| |algebra|)
    (|ideal| TYPE-EQ-DECL NIL |ring_ideal_def| |algebra|)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nZ| CONST-DECL "set[int]" |ring_zn| |algebra_examples|)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|nZ_ideal| FORMULA-DECL NIL |ring_zn| |algebra_examples|))
   NIL
   (|zn_add_group| SUBTYPE "ring_zn.nZ(ring_zn_extra.n)"
    "(cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].coset?(ring_zn.Z, ring_zn.nZ(ring_zn_extra.n)))")))
 (|zn_add_group| 0
  (|zn_add_group-1| NIL 3935246133
   ("" (SKEEP)
    (("" (LEMMA "quotient_group_is_abelian_group")
      (("" (INST -1 "Z" "nZ(n)")
        (("1" (EXPAND "abelian_group?")
          (("1" (FLATTEN)
            (("1" (HIDE -2)
              (("1"
                (CASE-REPLACE "restrict
               [set[int],
                coset[int,
                      restrict[[numfield, numfield], [int, int], numfield]
                          (+)](Z, nZ(n)),
                bool]
               (Z / nZ(n)) = fullset[(coset?(Z, nZ(n)))]")
                (("1" (HIDE-ALL-BUT 1)
                  (("1" (EXPAND "restrict")
                    (("1" (EXPAND "fullset")
                      (("1" (DECOMPOSE-EQUALITY)
                        (("1" (EXPAND "/") (("1" (PROPAX) NIL NIL)) NIL)) NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (SKEEP)
                  (("2" (EXPAND "restrict") (("2" (PROPAX) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (REWRITE "nZ_ideal") NIL NIL))
        NIL))
      NIL))
    NIL)
   ((* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|quotient_group_is_abelian_group| FORMULA-DECL NIL |quotient_rings|
     |algebra|)
    (|nZ_ideal| FORMULA-DECL NIL |ring_zn| |algebra_examples|)
    (|abelian_group?| CONST-DECL "bool" |group_def| |algebra|)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|fullset| CONST-DECL "set" |sets| NIL)
    (/ CONST-DECL "setof[set[T]]" |cosets_def| |algebra|)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|coset| TYPE-EQ-DECL NIL |cosets_def| |algebra|)
    (|coset?| CONST-DECL "bool" |cosets_def| |algebra|)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|ring?| CONST-DECL "bool" |ring_def| |algebra|)
    (|ideal?| CONST-DECL "bool" |ring_ideal_def| |algebra|)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nZ| CONST-DECL "set[int]" |ring_zn| |algebra_examples|)
    (|n| SKOLEM-CONST-DECL "posnat" |ring_zn_extra| NIL)
    (|ring| NONEMPTY-TYPE-EQ-DECL NIL |ring| |algebra|)
    (Z CONST-DECL
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     |ring_zn| |algebra_examples|)
    (|ideal| TYPE-EQ-DECL NIL |ring_ideal_def| |algebra|))
   SHOSTAK))
 (|times_ring_cosets_TCC1| 0
  (|times_ring_cosets_TCC1-1| NIL 3935141186 ("" (SUBTYPE-TCC) NIL NIL)
   ((/= CONST-DECL "boolean" |notequal| NIL)
    (|divides| CONST-DECL "bool" |divides| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|p!1| SKOLEM-CONST-DECL "(prime?)" |ring_zn_extra| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL (|times_ring_cosets| SUBTYPE "ring_zn_extra.p" "posnat")))
 (|times_ring_cosets_TCC2| 0
  (|times_ring_cosets_TCC1-1| NIL 3927806672
   ("" (SKEEP)
    (("" (REWRITE "zn_identity")
      (("" (TYPEPRED "p") (("" (EXPAND "prime?") (("" (PROPAX) NIL NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|zn_identity| FORMULA-DECL NIL |ring_zn_extra| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL))
   NIL
   (|times_ring_cosets| SUBTYPE
    "(cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].+)(ring_zn_extra.a, ring_zn.nZ(ring_zn_extra.p))"
    "coset[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)](ring_zn.Z, ring_zn.nZ(ring_zn_extra.p))")))
 (|times_ring_cosets_TCC3| 0
  (|times_ring_cosets_TCC2-1| NIL 3927806672
   ("" (SKEEP)
    (("" (INST 1 "nZ(p)")
      (("1" (REWRITE "ideal_is_coset")
        (("1" (REWRITE "nZ_ideal")
          (("1" (TYPEPRED "p") (("1" (GRIND) NIL NIL)) NIL)) NIL)
         ("2" (TYPEPRED "p") (("2" (GRIND) NIL NIL)) NIL))
        NIL)
       ("2" (TYPEPRED "p") (("2" (GRIND) NIL NIL)) NIL))
      NIL))
    NIL)
   ((|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|coset| TYPE-EQ-DECL NIL |cosets_def| |algebra|)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (|nZ| CONST-DECL "set[int]" |ring_zn| |algebra_examples|)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (Z CONST-DECL
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     |ring_zn| |algebra_examples|)
    (|ring| NONEMPTY-TYPE-EQ-DECL NIL |ring| |algebra|)
    (|ring?| CONST-DECL "bool" |ring_def| |algebra|)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|coset?| CONST-DECL "bool" |cosets_def| |algebra|)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|p| SKOLEM-CONST-DECL "(prime?)" |ring_zn_extra| NIL)
    (|nZ_ideal| FORMULA-DECL NIL |ring_zn| |algebra_examples|)
    (|divides| CONST-DECL "bool" |divides| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|ideal| TYPE-EQ-DECL NIL |ring_ideal_def| |algebra|)
    (|ideal?| CONST-DECL "bool" |ring_ideal_def| |algebra|)
    (|ideal_is_coset| FORMULA-DECL NIL |ring_cosets_lemmas| |algebra|))
   NIL
   (|times_ring_cosets| EXISTENCE ""
    "coset[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)](ring_zn.Z, ring_zn.nZ(ring_zn_extra.p))")))
 (|times_ring_cosets_TCC4| 0
  (|times_ring_cosets_TCC3-1| NIL 3927806672
   ("" (SKEEP)
    (("" (REWRITE "zn_add_pair")
      (("" (TYPEPRED "p") (("" (EXPAND "prime?") (("" (PROPAX) NIL NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|zn_add_pair| FORMULA-DECL NIL |ring_zn_extra| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|coset?| CONST-DECL "bool" |cosets_def| |algebra|)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|ring?| CONST-DECL "bool" |ring_def| |algebra|)
    (|ring| NONEMPTY-TYPE-EQ-DECL NIL |ring| |algebra|)
    (Z CONST-DECL
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     |ring_zn| |algebra_examples|)
    (|nZ| CONST-DECL "set[int]" |ring_zn| |algebra_examples|)
    (|coset| TYPE-EQ-DECL NIL |cosets_def| |algebra|)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL))
   NIL
   (|times_ring_cosets| SUBTYPE
    "cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].add(ring_zn.Z, ring_zn.nZ(ring_zn_extra.p))"
    "[[coset[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)](ring_zn.Z, ring_zn.nZ(ring_zn_extra.p)), coset[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)](ring_zn.Z, ring_zn.nZ(ring_zn_extra.p))] -> coset[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)](ring_zn.Z, ring_zn.nZ(ring_zn_extra.p))]")))
 (|times_ring_cosets_TCC5| 0
  (|times_ring_cosets_TCC4-1| NIL 3927806672
   ("" (SKEEP)
    (("" (REWRITE "zn_product_pair")
      (("" (TYPEPRED "p") (("" (EXPAND "prime?") (("" (PROPAX) NIL NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|zn_product_pair| FORMULA-DECL NIL |ring_zn_extra| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|coset?| CONST-DECL "bool" |cosets_def| |algebra|)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|ring?| CONST-DECL "bool" |ring_def| |algebra|)
    (|ring| NONEMPTY-TYPE-EQ-DECL NIL |ring| |algebra|)
    (Z CONST-DECL
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     |ring_zn| |algebra_examples|)
    (|nZ| CONST-DECL "set[int]" |ring_zn| |algebra_examples|)
    (|coset| TYPE-EQ-DECL NIL |cosets_def| |algebra|)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL))
   NIL
   (|times_ring_cosets| SUBTYPE
    "product_coset_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.*)].product(ring_zn.Z, ring_zn.nZ(ring_zn_extra.p))"
    "[[coset[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)](ring_zn.Z, ring_zn.nZ(ring_zn_extra.p)), coset[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)](ring_zn.Z, ring_zn.nZ(ring_zn_extra.p))] -> coset[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)](ring_zn.Z, ring_zn.nZ(ring_zn_extra.p))]")))
 (|times_ring_cosets_TCC6| 0
  (|times_ring_cosets_TCC5-1| NIL 3927806672
   ("" (SKEEP)
    (("" (REWRITE "ideal_is_coset")
      (("1" (REWRITE "nZ_ideal")
        (("1" (TYPEPRED "p") (("1" (GRIND) NIL NIL)) NIL)) NIL)
       ("2" (TYPEPRED "p") (("2" (GRIND) NIL NIL)) NIL))
      NIL))
    NIL)
   ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|ideal_is_coset| FORMULA-DECL NIL |ring_cosets_lemmas| |algebra|)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|ring?| CONST-DECL "bool" |ring_def| |algebra|)
    (|ring| NONEMPTY-TYPE-EQ-DECL NIL |ring| |algebra|)
    (Z CONST-DECL
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     |ring_zn| |algebra_examples|)
    (|ideal?| CONST-DECL "bool" |ring_ideal_def| |algebra|)
    (|ideal| TYPE-EQ-DECL NIL |ring_ideal_def| |algebra|)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nZ| CONST-DECL "set[int]" |ring_zn| |algebra_examples|)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|divides| CONST-DECL "bool" |divides| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nZ_ideal| FORMULA-DECL NIL |ring_zn| |algebra_examples|))
   NIL
   (|times_ring_cosets| SUBTYPE "ring_zn.nZ(ring_zn_extra.p)"
    "coset[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)](ring_zn.Z, ring_zn.nZ(ring_zn_extra.p))")))
 (|times_ring_cosets_TCC7| 0
  (|times_ring_cosets_TCC6-1| NIL 3927806672
   ("" (SKEEP)
    (("" (LEMMA "Zn_commutative_ring_w_one")
      (("" (INST?)
        (("1" (EXPAND "commutative_ring_with_one?")
          (("1" (FLATTEN)
            (("1" (HIDE -2)
              (("1" (EXPAND "ring_with_one?")
                (("1" (FLATTEN)
                  (("1" (HIDE -2)
                    (("1" (EXPAND "Z")
                      (("1" (EXPAND "/")
                        (("1" (EXPAND "restrict")
                          (("1" (EXPAND "fullset") (("1" (PROPAX) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (TYPEPRED "p") (("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|Zn_commutative_ring_w_one| FORMULA-DECL NIL |ring_zn| |algebra_examples|)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|divides| CONST-DECL "bool" |divides| NIL)
    (|commutative_ring_with_one?| CONST-DECL "bool" |ring_with_one_def|
     |algebra|)
    (Z CONST-DECL "setofsets[int]" |ring_zn| |algebra_examples|)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (|fullset| CONST-DECL "set" |sets| NIL)
    (/ CONST-DECL "setof[set[T]]" |cosets_def| |algebra|)
    (|ring_with_one?| CONST-DECL "bool" |ring_with_one_def| |algebra|)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (|p| SKOLEM-CONST-DECL "(prime?)" |ring_zn_extra| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL))
   NIL
   (|times_ring_cosets| ASSUMING
    "algebra@ring_basic_properties[coset[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)](ring_zn.Z, ring_zn.nZ(ring_zn_extra.p)), cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].add(ring_zn.Z, ring_zn.nZ(ring_zn_extra.p)), product_coset_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.*)].product(ring_zn.Z, ring_zn.nZ(ring_zn_extra.p)), ring_zn.nZ(ring_zn_extra.p)].ring_basic_properties"
    "fullset_is_ring: ASSUMPTION ring_def[ring_basic_properties.T, ring_basic_properties.+, ring_basic_properties.*, ring_basic_properties.zero].ring?(sets[ring_basic_properties.T].fullset)")))
 (|times_ring_cosets| 0
  (|times_ring_cosets-1| NIL 3927806695
   ("" (SKEEP)
    (("" (TYPEPRED "p")
      (("" (EXPAND "prime?")
        (("" (FLATTEN)
          (("" (HIDE -1)
            (("" (MEASURE-INDUCT "b" "b")
              (("1" (SKEEP)
                (("1" (INST -1 "x-1")
                  (("1" (SIMPLIFY)
                    (("1" (EXPAND "times")
                      (("1" (EXPAND "^")
                        (("1" (EXPAND "power" 1)
                          (("1" (REPLACES -1)
                            (("1" (LEMMA "add_charac")
                              (("1" (INST?)
                                (("1" (REPLACES -1) (("1" (ASSERT) NIL NIL))
                                  NIL)
                                 ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL)
                                 ("4" (REWRITE "nZ_ideal") NIL NIL)
                                 ("5" (ASSERT) NIL NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (CASE-REPLACE "x = 1")
                    (("1" (EXPAND "times")
                      (("1" (EXPAND "^")
                        (("1" (EXPAND "power")
                          (("1" (EXPAND "power")
                            (("1" (NAME-REPLACE "aZ" "a+nZ(p)")
                              (("1" (NAME-REPLACE "addZ" "add(Z, nZ(p))")
                                (("1" (LEMMA "left_zero")
                                  (("1" (INST -1 "nZ(p)")
                                    (("1" (REPLACE -1 2 RL)
                                      (("1" (EXPAND "aZ")
                                        (("1" (EXPAND "addZ")
                                          (("1" (REWRITE "add_charac")
                                            (("1" (GRIND) NIL NIL)
                                             ("2" (GRIND) NIL NIL)
                                             ("3" (REWRITE "nZ_ideal") NIL
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (ASSERT) NIL NIL))
                                    NIL))
                                  NIL)
                                 ("2" (ASSERT) NIL NIL))
                                NIL)
                               ("2" (ASSERT) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (ASSERT) NIL NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (REWRITE "ideal_is_coset")
                (("2" (REWRITE "nZ_ideal") NIL NIL)) NIL)
               ("3" (HIDE 2)
                (("3" (SKEEP)
                  (("3" (LEMMA "coset_product")
                    (("3" (INST -1 "Z" "nZ(p)" "x1`1" "x1`2")
                      (("1" (ASSERT) NIL NIL)
                       ("2" (REWRITE "nZ_ideal") NIL NIL)
                       ("3" (ASSERT) NIL NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("4" (HIDE 2)
                (("4" (SKEEP)
                  (("4" (LEMMA "coset_add")
                    (("4" (INST -1 "Z" "nZ(p)" "x1`1" "x1`2")
                      (("1" (ASSERT) NIL NIL)
                       ("2" (REWRITE "nZ_ideal") NIL NIL)
                       ("3" (ASSERT) NIL NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("5" (HIDE 2)
                (("5" (REWRITE "lcoset_iff_coset" :DIR RL)
                  (("5" (EXPAND "left_coset?")
                    (("5" (INST 1 "a") (("5" (GRIND) NIL NIL)) NIL)) NIL))
                  NIL))
                NIL)
               ("6" (ASSERT) NIL NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|prime?| CONST-DECL "bool" |primes| |ints|)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|times| CONST-DECL "T" |ring_basic_properties| |algebra|)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|product| CONST-DECL "set[T]" |product_coset_def| |algebra|)
    (|coset| TYPE-EQ-DECL NIL |cosets_def| |algebra|)
    (|add| CONST-DECL "set[T]" |cosets_def| |algebra|)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|coset?| CONST-DECL "bool" |cosets_def| |algebra|)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|ring?| CONST-DECL "bool" |ring_def| |algebra|)
    (|ring| NONEMPTY-TYPE-EQ-DECL NIL |ring| |algebra|)
    (Z CONST-DECL
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     |ring_zn| |algebra_examples|)
    (|nZ| CONST-DECL "set[int]" |ring_zn| |algebra_examples|)
    (+ CONST-DECL "set[T]" |cosets_def| |algebra|)
    (|a| SKOLEM-CONST-DECL "int" |ring_zn_extra| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|p| SKOLEM-CONST-DECL "(prime?)" |ring_zn_extra| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|well_founded?| CONST-DECL "bool" |orders| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|x| SKOLEM-CONST-DECL "posnat" |ring_zn_extra| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|power| DEF-DECL "T" |monoid_def| |algebra|)
    (|add_charac| FORMULA-DECL NIL |quotient_rings| |algebra|)
    (|nZ_ideal| FORMULA-DECL NIL |ring_zn| |algebra_examples|)
    (|fullset| CONST-DECL "set" |sets| NIL)
    (|ideal| TYPE-EQ-DECL NIL |ring_ideal_def| |algebra|)
    (|ideal?| CONST-DECL "bool" |ring_ideal_def| |algebra|)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (^ CONST-DECL "T" |group| |algebra|)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|left_zero| FORMULA-DECL NIL |ring_cosets_lemmas| |algebra|)
    (|addZ| SKOLEM-CONST-DECL
     "[[coset[int, restrict[[numfield, numfield], [int, int], numfield](+)](Z,
                                                                      nZ(p)),
  coset[int, restrict[[numfield, numfield], [int, int], numfield](+)](Z,
                                                                      nZ(p))] ->
   set[int]]"
     |ring_zn_extra| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|odd_minus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|minus_i16_u16| APPLICATION-JUDGEMENT "int32" |integertypes| NIL)
    (|minus_i32_u32| APPLICATION-JUDGEMENT "int64" |integertypes| NIL)
    (|minus_u8_u8| APPLICATION-JUDGEMENT "int16" |integertypes| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|aZ| SKOLEM-CONST-DECL "set[int]" |ring_zn_extra| NIL)
    (|ideal_is_coset| FORMULA-DECL NIL |ring_cosets_lemmas| |algebra|)
    (|coset_product| FORMULA-DECL NIL |quotient_rings| |algebra|)
    (|coset_add| FORMULA-DECL NIL |quotient_rings| |algebra|)
    (|lcoset_iff_coset| FORMULA-DECL NIL |ring_cosets_lemmas| |algebra|)
    (|left_coset?| CONST-DECL "bool" |cosets_def| |algebra|))
   SHOSTAK))
 (|charac_cosets| 0
  (|charac_cosets-1| NIL 3927806837
   ("" (SKEEP)
    (("" (TYPEPRED "p")
      (("" (EXPAND "prime?")
        (("" (FLATTEN)
          (("" (HIDE -1)
            (("" (EXPAND "charac")
              (("" (LIFT-IF)
                (("" (EXPAND "N")
                  (("" (LEMMA "times_ring_cosets")
                    (("" (PROP)
                      (("1" (EXPAND "empty?")
                        (("1" (INST -1 "p")
                          (("1" (EXPAND "member")
                            (("1" (SKEEP)
                              (("1" (TYPEPRED "x")
                                (("1" (EXPAND "coset?")
                                  (("1" (EXPAND "left_coset?")
                                    (("1" (FLATTEN)
                                      (("1" (HIDE -2 -3)
                                        (("1" (SKEEP)
                                          (("1" (REPLACES -1)
                                            (("1" (INST?)
                                              (("1" (REPLACES -1)
                                                (("1"
                                                  (NAME-REPLACE "c"
                                                   "a * p + nZ(p)")
                                                  (("1" (LEMMA "left_zero")
                                                    (("1" (INST -1 "nZ(p)")
                                                      (("1" (REPLACE -1 1 RL)
                                                        (("1" (HIDE -1)
                                                          (("1" (EXPAND "c")
                                                            (("1"
                                                              (LEMMA
                                                               "equal_cosets_div")
                                                              (("1" (INST?)
                                                                (("1" (FLATTEN)
                                                                  (("1"
                                                                    (HIDE -1)
                                                                    (("1"
                                                                      (CASE-REPLACE
                                                                       "0-a*p = p*(-a)")
                                                                      (("1"
                                                                        (HIDE
                                                                         -1)
                                                                        (("1"
                                                                          (SPLIT)
                                                                          (("1"
                                                                            (PROPAX)
                                                                            NIL
                                                                            NIL)
                                                                           ("2"
                                                                            (LEMMA
                                                                             "divides_prod1")
                                                                            (("2"
                                                                              (INST?)
                                                                              (("2"
                                                                                (SPLIT)
                                                                                (("1"
                                                                                  (PROPAX)
                                                                                  NIL
                                                                                  NIL)
                                                                                 ("2"
                                                                                  (REWRITE
                                                                                   "divides_reflexive")
                                                                                  NIL
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL)
                                                                       ("2"
                                                                        (HIDE-ALL-BUT
                                                                         1)
                                                                        (("2"
                                                                          (ASSERT)
                                                                          NIL
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL)
                                                                 ("2" (ASSERT)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL)
                                                       ("2" (ASSERT) NIL NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (ASSERT) NIL NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (ASSERT) NIL NIL))
                          NIL))
                        NIL)
                       ("2" (HIDE 1)
                        (("2"
                          (TYPEPRED "min({n |
             FORALL (x:
                       (fullset
                            [coset[int,
                                   restrict
                                       [[numfield, numfield], [int, int],
                                        numfield]
                                       (+)](Z, nZ(p))])):
               times[coset[int,
                           restrict
                               [[numfield, numfield], [int, int], numfield]
                               (+)](Z, nZ(p)),
                     add(Z, nZ(p)), product(Z, nZ(p)), nZ(p)]
                   (x, n)
                = nZ(p)})")
                          (("1"
                            (NAME-REPLACE "m" "min({n |
             FORALL (x:
                       (fullset
                            [coset[int,
                                   restrict
                                       [[numfield, numfield], [int, int],
                                        numfield]
                                       (+)](Z, nZ(p))])):
               times[coset[int,
                           restrict
                               [[numfield, numfield], [int, int], numfield]
                               (+)](Z, nZ(p)),
                     add(Z, nZ(p)), product(Z, nZ(p)), nZ(p)]
                   (x, n)
                = nZ(p)})")
                            (("1" (INST -3 "p")
                              (("1" (SPLIT)
                                (("1" (EXPAND "<=")
                                  (("1" (SPLIT)
                                    (("1" (INST -3 "1+nZ(p)")
                                      (("1" (INST?)
                                        (("1" (REPLACES -4)
                                          (("1"
                                            (NAME-REPLACE "e" "1 * m + nZ(p)")
                                            (("1" (LEMMA "left_zero")
                                              (("1" (INST -1 "nZ(p)")
                                                (("1" (REPLACE -1 -4 RL)
                                                  (("1" (HIDE -1)
                                                    (("1" (EXPAND "e")
                                                      (("1"
                                                        (LEMMA
                                                         "equal_cosets_rem")
                                                        (("1" (INST?)
                                                          (("1" (FLATTEN)
                                                            (("1" (HIDE -2)
                                                              (("1" (SPLIT)
                                                                (("1"
                                                                  (SIMPLIFY)
                                                                  (("1"
                                                                    (REWRITE
                                                                     "modulo_arithmetic.rem_zero")
                                                                    (("1"
                                                                      (REWRITE
                                                                       "identity_mult")
                                                                      (("1"
                                                                        (REWRITE
                                                                         "rem_mod")
                                                                        (("1"
                                                                          (ASSERT)
                                                                          NIL
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL)
                                                                 ("2" (PROPAX)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL)
                                                           ("2" (ASSERT) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (ASSERT) NIL NIL))
                                                NIL))
                                              NIL)
                                             ("2" (HIDE-ALL-BUT (-4 1))
                                              (("2" (ASSERT) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (HIDE-ALL-BUT (-4 1))
                                        (("2"
                                          (REWRITE "lcoset_iff_coset" :DIR RL)
                                          (("2" (EXPAND "left_coset?")
                                            (("2" (SPLIT)
                                              (("1" (INST 1 "1")
                                                (("1" (GRIND) NIL NIL)) NIL)
                                               ("2" (EXPAND "fullset")
                                                (("2" (PROPAX) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("3" (ASSERT) NIL NIL))
                                      NIL)
                                     ("2" (PROPAX) NIL NIL))
                                    NIL))
                                  NIL)
                                 ("2" (HIDE-ALL-BUT (-3 -4 1))
                                  (("2" (SKEEP)
                                    (("2" (TYPEPRED "x")
                                      (("2" (EXPAND "coset?")
                                        (("2" (EXPAND "left_coset?")
                                          (("2" (FLATTEN)
                                            (("2" (HIDE -2 -3)
                                              (("2" (SKEEP)
                                                (("2" (REPLACES -1)
                                                  (("2" (INST?)
                                                    (("1" (REPLACES -1)
                                                      (("1"
                                                        (NAME-REPLACE "d"
                                                         "a * p + nZ(p)")
                                                        (("1"
                                                          (LEMMA "left_zero")
                                                          (("1"
                                                            (INST -1 "nZ(p)")
                                                            (("1"
                                                              (REPLACE -1 1 RL)
                                                              (("1" (HIDE -1)
                                                                (("1"
                                                                  (EXPAND "d")
                                                                  (("1"
                                                                    (LEMMA
                                                                     "equal_cosets_div")
                                                                    (("1"
                                                                      (INST?)
                                                                      (("1"
                                                                        (FLATTEN)
                                                                        (("1"
                                                                          (HIDE
                                                                           -1)
                                                                          (("1"
                                                                            (SPLIT)
                                                                            (("1"
                                                                              (PROPAX)
                                                                              NIL
                                                                              NIL)
                                                                             ("2"
                                                                              (CASE-REPLACE
                                                                               "0 - a * p = p * (-a)")
                                                                              (("1"
                                                                                (HIDE
                                                                                 -1
                                                                                 2)
                                                                                (("1"
                                                                                  (LEMMA
                                                                                   "divides_prod1")
                                                                                  (("1"
                                                                                    (INST?)
                                                                                    (("1"
                                                                                      (SPLIT)
                                                                                      (("1"
                                                                                        (PROPAX)
                                                                                        NIL
                                                                                        NIL)
                                                                                       ("2"
                                                                                        (REWRITE
                                                                                         "divides_reflexive")
                                                                                        NIL
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL)
                                                                               ("2"
                                                                                (ASSERT)
                                                                                NIL
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL)
                                                                       ("2"
                                                                        (ASSERT)
                                                                        NIL
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL)
                                                             ("2" (ASSERT) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL)
                                                         ("2" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL)
                                                     ("2" (ASSERT) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (ASSERT) NIL NIL))
                              NIL))
                            NIL)
                           ("2" (EXPAND "nonempty?")
                            (("2" (REVEAL 1) (("2" (PROPAX) NIL NIL)) NIL))
                            NIL)
                           ("3" (HIDE-ALL-BUT (-2 1))
                            (("3" (SKEEP)
                              (("3" (REWRITE "ideal_is_coset")
                                (("3" (REWRITE "nZ_ideal") NIL NIL)) NIL))
                              NIL))
                            NIL)
                           ("4" (HIDE-ALL-BUT (-2 1))
                            (("4" (LEMMA "nZ_ideal")
                              (("4" (INST?)
                                (("1" (SKEEP*)
                                  (("1" (LEMMA "coset_product")
                                    (("1" (INST?)
                                      (("1" (INST -1 "x1`1" "x1`2")
                                        (("1" (ASSERT) NIL NIL)) NIL)
                                       ("2" (ASSERT) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (ASSERT) NIL NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("5" (HIDE-ALL-BUT (-2 1))
                            (("5" (SKEEP*)
                              (("5" (LEMMA "nZ_ideal")
                                (("5" (INST?)
                                  (("1" (LEMMA "coset_add")
                                    (("1" (INST?)
                                      (("1" (INST -1 "x1`1" "x1`2")
                                        (("1" (ASSERT) NIL NIL)) NIL)
                                       ("2" (ASSERT) NIL NIL))
                                      NIL))
                                    NIL)
                                   ("2" (ASSERT) NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("6" (HIDE-ALL-BUT (-2 1))
                            (("6" (SKEEP)
                              (("6" (INST 1 "nZ(p)")
                                (("1" (REWRITE "ideal_is_coset")
                                  (("1" (REWRITE "nZ_ideal") NIL NIL)) NIL)
                                 ("2" (ASSERT) NIL NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("7" (HIDE-ALL-BUT (-2 1))
                            (("7" (SKEEP) (("7" (ASSERT) NIL NIL)) NIL)) NIL)
                           ("8" (ASSERT) NIL NIL)
                           ("9" (SKEEP)
                            (("9" (EXPAND "restrict") (("9" (PROPAX) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|prime?| CONST-DECL "bool" |primes| |ints|)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|charac| CONST-DECL "nat" |ring_characteristic_def| |algebra|)
    (N CONST-DECL "set[posnat]" |ring_characteristic_def| |algebra|)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|p| SKOLEM-CONST-DECL "(prime?)" |ring_zn_extra| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (+ CONST-DECL "set[T]" |cosets_def| |algebra|)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|equal_cosets_div| FORMULA-DECL NIL |ring_zn| |algebra_examples|)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|divides_reflexive| FORMULA-DECL NIL |divides| NIL)
    (|divides_prod1| FORMULA-DECL NIL |divides| NIL)
    (|c| SKOLEM-CONST-DECL "set[int]" |ring_zn_extra| NIL)
    (|left_zero| FORMULA-DECL NIL |ring_cosets_lemmas| |algebra|)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|left_coset?| CONST-DECL "bool" |cosets_def| |algebra|)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|coset?| CONST-DECL "bool" |cosets_def| |algebra|)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|ring?| CONST-DECL "bool" |ring_def| |algebra|)
    (|ring| NONEMPTY-TYPE-EQ-DECL NIL |ring| |algebra|)
    (Z CONST-DECL
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     |ring_zn| |algebra_examples|)
    (|nZ| CONST-DECL "set[int]" |ring_zn| |algebra_examples|)
    (|coset| TYPE-EQ-DECL NIL |cosets_def| |algebra|)
    (|fullset| CONST-DECL "set" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|min| CONST-DECL "{a | S(a) AND (FORALL x: S(x) IMPLIES a <= x)}"
     |min_nat| NIL)
    (|add| CONST-DECL "set[T]" |cosets_def| |algebra|)
    (|product| CONST-DECL "set[T]" |product_coset_def| |algebra|)
    (|times| CONST-DECL "T" |ring_basic_properties| |algebra|)
    (|d| SKOLEM-CONST-DECL "set[int]" |ring_zn_extra| NIL)
    (|e| SKOLEM-CONST-DECL "set[int]" |ring_zn_extra| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|identity_mult| FORMULA-DECL NIL |number_fields| NIL)
    (|mod| NONEMPTY-TYPE-EQ-DECL NIL |euclidean_division| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|rem_mod| FORMULA-DECL NIL |modulo_arithmetic| NIL)
    (|rem_zero| FORMULA-DECL NIL |modulo_arithmetic| NIL)
    (|equal_cosets_rem| FORMULA-DECL NIL |ring_zn_extra| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|lcoset_iff_coset| FORMULA-DECL NIL |ring_cosets_lemmas| |algebra|)
    (|nZ_ideal| FORMULA-DECL NIL |ring_zn| |algebra_examples|)
    (|ideal| TYPE-EQ-DECL NIL |ring_ideal_def| |algebra|)
    (|ideal?| CONST-DECL "bool" |ring_ideal_def| |algebra|)
    (|ideal_is_coset| FORMULA-DECL NIL |ring_cosets_lemmas| |algebra|)
    (|coset_product| FORMULA-DECL NIL |quotient_rings| |algebra|)
    (|coset_add| FORMULA-DECL NIL |quotient_rings| |algebra|)
    (|times_ring_cosets| FORMULA-DECL NIL |ring_zn_extra| NIL))
   SHOSTAK)))

