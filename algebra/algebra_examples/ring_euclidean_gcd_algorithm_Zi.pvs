%%
%% Authors:	
%% 		Thaynara Arielly de Lima
%% 		Universidade Federal de Goiás - Brazil
%%
%%              Andréia Borges Avelar da Silva
%%		Universidade de Brasília - Brazil
%%			
%%		André Luiz Galdino
%%		Universidade Federal de Catalão - Brazil
%%
%%		Mauricio Ayala-Rincón
%%		Universidade de Brasília - Brazil
%%
%%----------------------------------------------------------------------------
%%
%%	
%%	Last version: November 07, 2023
%%
%%----------------------------------------------------------------------------

%% Correctness of euclidean algorithm for the Gaussian integers, Z[i]

ring_euclidean_gcd_algorithm_Zi : THEORY

BEGIN

IMPORTING complex_ax@arithmetic, algebra@ring_euclidean_algorithm

 Zi: set[complex] = {z : complex | EXISTS (a,b:int): a = Re(z) AND b = Im(z)}


 Zi_is_ring: LEMMA ring?[complex,+,*,0](Zi)


 Zi_is_integral_domain_w_one: LEMMA integral_domain_w_one?[complex,+,*,0,1](Zi)


 sq_abs_Re_Im_integer_rational_pred: LEMMA
  FORALL(x: (Zi)): rational_pred(Re(x)) AND integer_pred(Re(x)) AND
                   rational_pred(Im(x)) AND integer_pred(Im(x)) AND
                   rational_pred(x * conjugate(x)) AND integer_pred(x * conjugate(x))


 times_conjugate_is_Zi: LEMMA FORALL(x,y: (Zi)): Zi(x * conjugate(y))


% % % % % —————————–—————————–—————————–—————————–—————————–—————————–—————————–————————— % % % % %


 phi_Zi(x:(Zi) | x /= 0): nat = x * conjugate(x)


 phi_Zi_is_multiplicative: LEMMA
   FORALL((x: (Zi) | x /= 0), (y: (Zi) | y /= 0)): phi_Zi(x * y) = phi_Zi(x) * phi_Zi(y)


% % % % % —————————–—————————–—————————–—————————–—————————–—————————–—————————–————————— % % % % %



 % Hungerford's div_rem by smallest remainder approximation:   a = q * b + r  such that |r| <= |b|/2. 
 div_rem_appx(a: int, (b: int | b /= 0)) : [int, int] =
  LET r = rem(abs(b))(a), 
      q = IF b > 0 THEN ndiv(a,b) ELSE -ndiv(a,-b) ENDIF  IN
   IF r <= abs(b)/2 THEN (q,r) ELSE (IF b > 0 THEN (q+1, r - abs(b)) ELSE (q-1, r - abs(b)) ENDIF) ENDIF 


 div_rev_appx_correctness : LEMMA 
   FORALL (a: int, (b: int | b /= 0)) : 
      abs(div_rem_appx(a,b)`2) <= abs(b)/2 AND 
      a = b * div_rem_appx(a,b)`1 +  div_rem_appx(a,b)`2


% % % % % —————————–—————————–—————————–—————————–—————————–—————————–—————————–————————— % % % % %



 f_phi_Zi(y: (Zi), (x: (Zi) | x /= 0)): [(Zi),(Zi)] =
  LET q = div_rem_appx(Re(y * conjugate(x)), x * conjugate(x))`1 + div_rem_appx(Im(y * conjugate(x)), x * conjugate(x))`1 * i,
      r = y - q * x IN (q,r)


 phi_Zi_and_f_phi_Zi_ok: LEMMA euclidean_f_phi?[complex,+,*,0](Zi,phi_Zi)(f_phi_Zi)



% % % % % —————————–—————————–—————————–—————————–—————————–—————————–—————————–————————— % % % % %


 euclidean_gcd_alg_in_Zi: COROLLARY
  FORALL(x: (Zi), (y: (Zi) | y /= 0)  ) :
      gcd?[complex,+,*,0](Zi)({z :(Zi) | z = x OR z = y}, euclidean_gcd_algorithm[complex,+,*,0,1](Zi, phi_Zi,f_phi_Zi)(x,y))
                        
END ring_euclidean_gcd_algorithm_Zi
