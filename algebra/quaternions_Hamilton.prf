(|quaternions_Hamilton|
 (|IMP_quaternions_TCC1| 0
  (|IMP_quaternions_TCC1-1| |nil| 3907332229 ("" (SUBTYPE-TCC) NIL NIL)
   ((|fullset| CONST-DECL "set" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|remove| CONST-DECL "set" |sets| NIL))
   NIL
   (|IMP_quaternions| SUBTYPE "-1" "(sets[real].remove(0, sets[real].fullset))"
    (27 35 27 37))))
 (|IMP_quaternions_TCC2| 0
  (|IMP_quaternions_TCC2-1| |nil| 3908358663
   ("" (EXPAND "field?")
    (("" (PROP)
      (("1" (EXPAND "division_ring?")
        (("1" (PROP)
          (("1" (EXPAND "ring_with_one?")
            (("1" (PROP)
              (("1" (EXPAND "ring?")
                (("1" (PROP)
                  (("1" (EXPAND "abelian_group?")
                    (("1" (PROP)
                      (("1" (EXPAND "group?")
                        (("1" (PROP)
                          (("1" (EXPAND "monoid?")
                            (("1" (PROP)
                              (("1" (EXPAND "monad?")
                                (("1" (PROP)
                                  (("1" (EXPAND "star_closed?")
                                    (("1" (SKEEP)
                                      (("1" (EXPAND "member")
                                        (("1" (EXPAND "fullset")
                                          (("1" (PROPAX) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (EXPAND "member")
                                    (("2" (EXPAND "fullset")
                                      (("2" (PROPAX) NIL NIL)) NIL))
                                    NIL)
                                   ("3" (EXPAND "identity?")
                                    (("3" (SKEEP)
                                      (("3" (EXPAND "restrict")
                                        (("3" (PROPAX) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (EXPAND "associative?")
                                (("2" (SKEEP)
                                  (("2" (EXPAND "restrict")
                                    (("2" (PROPAX) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (EXPAND "inv_exists?")
                            (("2" (SKEEP)
                              (("2" (INST 1 "-x")
                                (("1" (ASSERT) NIL NIL)
                                 ("2" (EXPAND "fullset")
                                  (("2" (PROPAX) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (EXPAND "commutative?")
                        (("2" (SKEEP)
                          (("2" (EXPAND "restrict") (("2" (PROPAX) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (EXPAND "star_closed?")
                    (("2" (SKEEP)
                      (("2" (EXPAND "member")
                        (("2" (EXPAND "fullset") (("2" (PROPAX) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("3" (EXPAND "associative?")
                    (("3" (SKEEP)
                      (("3" (EXPAND "restrict") (("3" (ASSERT) NIL NIL)) NIL))
                      NIL))
                    NIL)
                   ("4" (EXPAND "left_distributive?")
                    (("4" (SKEEP)
                      (("4" (EXPAND "restrict") (("4" (PROPAX) NIL NIL)) NIL))
                      NIL))
                    NIL)
                   ("5" (EXPAND "right_distributive?")
                    (("5" (SKEEP)
                      (("5" (EXPAND "restrict") (("5" (PROPAX) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (EXPAND "monoid?")
                (("2" (PROP)
                  (("1" (EXPAND "monad?")
                    (("1" (PROP)
                      (("1" (EXPAND "star_closed?")
                        (("1" (SKEEP)
                          (("1" (EXPAND "member")
                            (("1" (EXPAND "fullset") (("1" (PROPAX) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (EXPAND "member")
                        (("2" (EXPAND "fullset") (("2" (PROPAX) NIL NIL)) NIL))
                        NIL)
                       ("3" (EXPAND "identity?")
                        (("3" (SKEEP)
                          (("3" (EXPAND "restrict") (("3" (PROPAX) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (EXPAND "associative?")
                    (("2" (SKEEP)
                      (("2" (EXPAND "restrict") (("2" (ASSERT) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (EXPAND "group?")
            (("2" (PROP)
              (("1" (EXPAND "monoid?")
                (("1" (PROP)
                  (("1" (EXPAND "monad?")
                    (("1" (PROP)
                      (("1" (EXPAND "star_closed?")
                        (("1" (SKEEP)
                          (("1" (TYPEPRED "x" "y")
                            (("1" (EXPAND "remove")
                              (("1" (EXPAND "member")
                                (("1" (EXPAND "fullset")
                                  (("1" (ASSERT) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (EXPAND "member")
                        (("2" (EXPAND "remove")
                          (("2" (EXPAND "member")
                            (("2" (EXPAND "fullset") (("2" (PROPAX) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("3" (EXPAND "identity?")
                        (("3" (SKEEP)
                          (("3" (EXPAND "restrict") (("3" (PROPAX) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (EXPAND "associative?")
                    (("2" (SKEEP)
                      (("2" (EXPAND "restrict") (("2" (ASSERT) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (EXPAND "inv_exists?")
                (("2" (SKEEP)
                  (("2" (INST 1 "1/x")
                    (("1" (ASSERT) NIL NIL)
                     ("2" (TYPEPRED "x")
                      (("2" (EXPAND "remove")
                        (("2" (EXPAND "member")
                          (("2" (EXPAND "fullset") (("2" (PROPAX) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("3" (TYPEPRED "x")
                      (("3" (EXPAND "remove") (("3" (ASSERT) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (EXPAND "commutative?")
        (("2" (SKEEP) (("2" (EXPAND "restrict") (("2" (ASSERT) NIL NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|fullset| CONST-DECL "set" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|star_closed?| CONST-DECL "bool" |groupoid_def| NIL)
    (|monad?| CONST-DECL "bool" |monad_def| NIL)
    (|monoid?| CONST-DECL "bool" |monoid_def| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|inv_exists?| CONST-DECL "bool" |group_def| NIL)
    (|group?| CONST-DECL "bool" |group_def| NIL)
    (|abelian_group?| CONST-DECL "bool" |group_def| NIL)
    (|left_distributive?| CONST-DECL "bool" |operator_defs_more| NIL)
    (|right_distributive?| CONST-DECL "bool" |operator_defs_more| NIL)
    (|ring?| CONST-DECL "bool" |ring_def| NIL)
    (|ring_with_one?| CONST-DECL "bool" |ring_with_one_def| NIL)
    (|remove| CONST-DECL "set" |sets| NIL)
    (|division_ring?| CONST-DECL "bool" |division_ring_def| NIL)
    (|field?| CONST-DECL "bool" |field_def| NIL))
   NIL
   (|IMP_quaternions| ASSUMING
    "quaternions[real, restrict[[numfield, numfield], [real, real], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [real, real], numfield].restrict(number_fields.*), 0, 1, -1, -1].quaternions"
    "fullset_is_field: ASSUMPTION field_def[quaternions.T, quaternions.+, quaternions.*, quaternions.zero, quaternions.one].field?(sets[quaternions.T].fullset)"
    (27 10 27 41))))
 (|conversion_quot_TCC1| 0
  (|conversion_quot_TCC1-1| |nil| 3907949116 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|conversion_quot| SUBTYPE
    "restrict[[real, real], [nz_T[real, restrict[[numfield, numfield], [real, real], numfield](+), restrict[[numfield, numfield], [real, real], numfield](*), 0], nz_T[real, restrict[[numfield, numfield], [real, real], numfield](+), restrict[[numfield, numfield], [real, real], numfield](*), 0]], real].restrict(restrict[[numfield, numfield], [real, real], numfield].restrict(number_fields.*))"
    "[[nz_T[real, restrict[[numfield, numfield], [real, real], numfield](+), restrict[[numfield, numfield], [real, real], numfield](*), 0], nz_T[real, restrict[[numfield, numfield], [real, real], numfield](+), restrict[[numfield, numfield], [real, real], numfield](*), 0]] -> nz_T[real, restrict[[numfield, numfield], [real, real], numfield](+), restrict[[numfield, numfield], [real, real], numfield](*), 0]]"
    (33 31 33 46))))
 (|conversion_quot| 0
  (|conversion_quot-1| |nil| 3907335582
   ("" (SKEEP)
    (("" (CASE "FORALL(nz: nzreal): 1/nz = number_fields./(1,nz)")
      (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)
       ("2" (HIDE 2) (("2" (SKEEP) (("2" (GRIND) NIL NIL)) NIL)) NIL)
       ("3" (HIDE 2) (("3" (SKEEP) (("3" (GRIND) NIL NIL)) NIL)) NIL))
      NIL))
    NIL)
   ((|inv| CONST-DECL "{y | x * y = one AND y * x = one}" |group| NIL)
    (|nz_T| TYPE-EQ-DECL NIL |ring_nz_closed_def| NIL)
    (|left_identity| FORMULA-DECL NIL |monad| NIL))
   SHOSTAK))
 (|quat_is_Real_p_Vector_part| 0
  (|quat_is_Real_p_Vector_part-1| |nil| 3907335628
   ("" (SKEEP)
    (("" (DECOMPOSE-EQUALITY 1)
      (("1" (EXPAND "Vector_part") (("1" (PROPAX) NIL NIL)) NIL)
       ("2" (EXPAND "Real_part") (("2" (PROPAX) NIL NIL)) NIL)
       ("3" (EXPAND "Vector_part") (("3" (PROPAX) NIL NIL)) NIL)
       ("4" (EXPAND "Vector_part") (("4" (PROPAX) NIL NIL)) NIL))
      NIL))
    NIL)
   ((|Vect3| TYPE-EQ-DECL NIL |vectors_3D_def| |vectors|)
    (|quat| TYPE-EQ-DECL NIL |quaternions_def| NIL))
   SHOSTAK))
 (|decompose_eq_Real_Vector_part| 0
  (|decompose_eq_Real_Vector_part-1| |nil| 3907335714
   ("" (SKEEP)
    (("" (EXPAND "Real_part")
      (("" (EXPAND "Vector_part")
        (("" (GRIND) (("" (DECOMPOSE-EQUALITY) NIL NIL)) NIL)) NIL))
      NIL))
    NIL)
   ((|quat| TYPE-EQ-DECL NIL |quaternions_def| NIL)) SHOSTAK))
 (|Vector_part_scalar| 0
  (|Vector_part_scalar-1| |nil| 3907334540
   ("" (SKEEP) (("" (GRIND) NIL NIL)) NIL)
   ((* CONST-DECL "Vector" |vectors_3D| |vectors|)
    (* CONST-DECL "quat" |quaternions_def| NIL))
   SHOSTAK))
 (|q_prod_Real_Vector_part| 0
  (|q_prod_Real_Vector_part-1| |nil| 3907335803
   ("" (SKEEP)
    (("" (LEMMA "q_prod_charac")
      (("" (INST?)
        (("" (REWRITE* "mult_neg")
          (("" (CASE-REPLACE "inv(-1) = 1" :HIDE? T)
            (("1" (REWRITE* "neg_mult")
              (("1" (REWRITE* "one_times")
                (("1" (CASE-REPLACE "inv(p`z * q`y) = -(p`z * q`y)" :HIDE? T)
                  (("1" (REPLACES -1)
                    (("1" (SPLIT)
                      (("1" (EXPAND "Real_part")
                        (("1" (EXPAND "Vector_part")
                          (("1" (EXPAND "*")
                            (("1" (REWRITE "neg_one_times")
                              (("1" (REWRITE* "add_neg") NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (EXPAND "Vector_part")
                        (("2" (EXPAND "Real_part")
                          (("2" (EXPAND "*")
                            (("2" (EXPAND "cross")
                              (("2" (EXPAND "+") (("2" (PROPAX) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (HIDE (- 2)) (("2" (ASSERT) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (HIDE (- 2)) (("2" (ASSERT) NIL NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|q_prod_charac| FORMULA-DECL NIL |quaternions| NIL)
    (|inv| CONST-DECL "{y | x * y = one AND y * x = one}" |group| NIL)
    (|left_identity| FORMULA-DECL NIL |monad| NIL)
    (* CONST-DECL "real" |vectors_3D| |vectors|)
    (|cross| CONST-DECL "Vector" |cross_3D| |vectors|)
    (+ CONST-DECL "Vector" |vectors_3D| |vectors|)
    (* CONST-DECL "Vector" |vectors_3D| |vectors|)
    (|one_times| FORMULA-DECL NIL |ring_with_one| NIL)
    (|quat| TYPE-EQ-DECL NIL |quaternions_def| NIL))
   SHOSTAK))
 (|conjugate_Real_vector_part| 0
  (|conjugate_Real_vector_part-1| |nil| 3907336732
   ("" (SKEEP)
    (("" (SPLIT)
      (("1" (EXPAND* "conjugate" "Real_part") NIL NIL)
       ("2" (EXPAND* "conjugate" "Vector_part")
        (("2" (DECOMPOSE-EQUALITY 1)
          (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|conjugate| CONST-DECL "quat" |quaternions_def| NIL)
    (|inv| CONST-DECL "{y | x * y = one AND y * x = one}" |group| NIL)
    (|quat| TYPE-EQ-DECL NIL |quaternions_def| NIL)
    (|Vector| TYPE-EQ-DECL NIL |vectors_3D| |vectors|)
    (|Vect3| TYPE-EQ-DECL NIL |vectors_3D_def| |vectors|))
   SHOSTAK))
 (|T_q_Real_charac| 0
  (|T_q_Real_charac-1| |nil| 3907338389
   ("" (SKEEP)
    (("" (EXPAND "T_q")
      (("" (LEMMA "q_prod_Real_Vector_part")
        (("" (INST-CP -1 "q * a" "conjugate(q)")
          (("" (FLATTEN)
            (("" (HIDE -2)
              (("" (REPLACES -2)
                (("" (INST?)
                  (("" (FLATTEN)
                    (("" (REPLACES -1)
                      (("" (REPLACES -1)
                        (("" (LEMMA "conjugate_Real_vector_part")
                          (("" (INST?)
                            (("" (FLATTEN)
                              (("" (REPLACES -1)
                                (("" (REPLACES -1)
                                  (("" (EXPAND "Real_part")
                                    (("" (TYPEPRED "a")
                                      (("" (EXPAND "pure_quat")
                                        (("" (REPLACES -1)
                                          (("" (ASSERT)
                                            (("" (REWRITE "neg_one_times")
                                              (("" (REWRITE "scal_neg")
                                                ((""
                                                  (REWRITE
                                                   "extra_tegies.neg_neg")
                                                  ((""
                                                    (REWRITE "scal_add_right")
                                                    ((""
                                                      (LEMMA "cross_anticomm")
                                                      ((""
                                                        (INST-CP -1
                                                         "q`x * Vector_part(a) + cross(Vector_part(q), Vector_part(a))"
                                                         "-Vector_part(q)")
                                                        (("" (REPLACES -2)
                                                          ((""
                                                            (REWRITE
                                                             "cross_dist")
                                                            ((""
                                                              (REWRITE
                                                               "neg_distr_add")
                                                              ((""
                                                                (INST -1
                                                                 "-Vector_part(q)"
                                                                 "cross(Vector_part(q), Vector_part(a))")
                                                                ((""
                                                                  (REPLACES -1)
                                                                  ((""
                                                                    (REWRITE
                                                                     "cross_cross")
                                                                    ((""
                                                                      (REWRITE
                                                                       "neg_distr_sub")
                                                                      ((""
                                                                        (LEMMA
                                                                         "vectors_3D.scal_neg_1")
                                                                        ((""
                                                                          (INST
                                                                           -1
                                                                           "cross(-Vector_part(q), q`x * Vector_part(a))")
                                                                          ((""
                                                                            (REPLACE
                                                                             -1
                                                                             1
                                                                             RL)
                                                                            ((""
                                                                              (HIDE
                                                                               -)
                                                                              ((""
                                                                                (LEMMA
                                                                                 "cross_scal_left")
                                                                                ((""
                                                                                  (INST
                                                                                   -1
                                                                                   "-1"
                                                                                   "-Vector_part(q)"
                                                                                   "q`x * Vector_part(a)")
                                                                                  ((""
                                                                                    (REPLACE
                                                                                     -1
                                                                                     1
                                                                                     RL)
                                                                                    ((""
                                                                                      (HIDE
                                                                                       -)
                                                                                      ((""
                                                                                        (REWRITE
                                                                                         "scal_neg_1")
                                                                                        ((""
                                                                                          (LEMMA
                                                                                           "cross_scal_right")
                                                                                          ((""
                                                                                            (INST
                                                                                             -1
                                                                                             "q`x"
                                                                                             "Vector_part(q)"
                                                                                             "Vector_part(a)")
                                                                                            ((""
                                                                                              (REPLACES
                                                                                               -1)
                                                                                              ((""
                                                                                                (REWRITE*
                                                                                                 "dot_neg_right")
                                                                                                ((""
                                                                                                  (LEMMA
                                                                                                   "vectors_3D.add_neg_sub")
                                                                                                  ((""
                                                                                                    (INST-CP
                                                                                                     -1
                                                                                                     "-(Vector_part(a) * Vector_part(q)) * Vector_part(q) -
             -(Vector_part(q) * Vector_part(q)) * Vector_part(a)"
                                                                                                     "q`x * cross(Vector_part(q), Vector_part(a))")
                                                                                                    ((""
                                                                                                      (REPLACE
                                                                                                       -2
                                                                                                       1
                                                                                                       RL)
                                                                                                      ((""
                                                                                                        (HIDE
                                                                                                         -2)
                                                                                                        ((""
                                                                                                          (REWRITE
                                                                                                           "neg_distr_sub")
                                                                                                          ((""
                                                                                                            (INST
                                                                                                             -1
                                                                                                             "-(Vector_part(a) * Vector_part(q)) * Vector_part(q)"
                                                                                                             "-(Vector_part(q) * Vector_part(q)) * Vector_part(a)")
                                                                                                            ((""
                                                                                                              (REPLACE
                                                                                                               -1
                                                                                                               1
                                                                                                               RL)
                                                                                                              ((""
                                                                                                                (HIDE
                                                                                                                 -1)
                                                                                                                ((""
                                                                                                                  (LEMMA
                                                                                                                   "vectors_3D.scal_neg_1")
                                                                                                                  ((""
                                                                                                                    (INST?)
                                                                                                                    ((""
                                                                                                                      (REPLACE
                                                                                                                       -1
                                                                                                                       1
                                                                                                                       RL)
                                                                                                                      ((""
                                                                                                                        (HIDE
                                                                                                                         -)
                                                                                                                        ((""
                                                                                                                          (REWRITE
                                                                                                                           "scal_assoc")
                                                                                                                          ((""
                                                                                                                            (REWRITE
                                                                                                                             "neg_one_times")
                                                                                                                            ((""
                                                                                                                              (REWRITE
                                                                                                                               "extra_tegies.neg_neg")
                                                                                                                              ((""
                                                                                                                                (REWRITE
                                                                                                                                 "scal_sub_left")
                                                                                                                                ((""
                                                                                                                                  (EXPAND
                                                                                                                                   "norm")
                                                                                                                                  ((""
                                                                                                                                    (CASE-REPLACE
                                                                                                                                     "sq(sqrt(sqv(Vector_part(q)))) * Vector_part(a) = sqv(Vector_part(q)) * Vector_part(a)"
                                                                                                                                     :HIDE?
                                                                                                                                     T)
                                                                                                                                    (("1"
                                                                                                                                      (EXPAND
                                                                                                                                       "sqv")
                                                                                                                                      (("1"
                                                                                                                                        (EXPAND
                                                                                                                                         "sq")
                                                                                                                                        (("1"
                                                                                                                                          (LEMMA
                                                                                                                                           "vectors_3D.add_comm")
                                                                                                                                          (("1"
                                                                                                                                            (INST
                                                                                                                                             -1
                                                                                                                                             "Vector_part(q) * Vector_part(a) * Vector_part(q)"
                                                                                                                                             "((q`x * q`x) * Vector_part(a) +
             q`x * cross(Vector_part(q), Vector_part(a)))")
                                                                                                                                            (("1"
                                                                                                                                              (REPLACES
                                                                                                                                               -1)
                                                                                                                                              (("1"
                                                                                                                                                (LEMMA
                                                                                                                                                 "vectors_3D.add_assoc")
                                                                                                                                                (("1"
                                                                                                                                                  (INST
                                                                                                                                                   -1
                                                                                                                                                   "(q`x * q`x) * Vector_part(a)"
                                                                                                                                                   "q`x * cross(Vector_part(q), Vector_part(a))"
                                                                                                                                                   "Vector_part(q) * Vector_part(a) * Vector_part(q)")
                                                                                                                                                  (("1"
                                                                                                                                                    (REPLACE
                                                                                                                                                     -1
                                                                                                                                                     1
                                                                                                                                                     RL)
                                                                                                                                                    (("1"
                                                                                                                                                      (HIDE
                                                                                                                                                       -1)
                                                                                                                                                      (("1"
                                                                                                                                                        (LEMMA
                                                                                                                                                         "vectors_3D.add_neg_sub")
                                                                                                                                                        (("1"
                                                                                                                                                          (INST?)
                                                                                                                                                          (("1"
                                                                                                                                                            (REPLACE
                                                                                                                                                             -1
                                                                                                                                                             1
                                                                                                                                                             RL)
                                                                                                                                                            (("1"
                                                                                                                                                              (HIDE
                                                                                                                                                               -1)
                                                                                                                                                              (("1"
                                                                                                                                                                (LEMMA
                                                                                                                                                                 "vectors_3D.add_assoc")
                                                                                                                                                                (("1"
                                                                                                                                                                  (INST-CP
                                                                                                                                                                   -1
                                                                                                                                                                   "q`x * q`x * Vector_part(a)"
                                                                                                                                                                   "-(Vector_part(q) * Vector_part(q) * Vector_part(a))"
                                                                                                                                                                   "(2 * (Vector_part(q) * Vector_part(a))) * Vector_part(q)")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (REPLACE
                                                                                                                                                                     -2
                                                                                                                                                                     1
                                                                                                                                                                     RL)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (HIDE
                                                                                                                                                                       -2)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (INST-CP
                                                                                                                                                                         -1
                                                                                                                                                                         "q`x * q`x * Vector_part(a)"
                                                                                                                                                                         "(-(Vector_part(q) * Vector_part(q) * Vector_part(a)) +
              (2 * (Vector_part(q) * Vector_part(a))) * Vector_part(q))"
                                                                                                                                                                         "(2 * q`x) * cross(Vector_part(q), Vector_part(a))")
                                                                                                                                                                        (("1"
                                                                                                                                                                          (REPLACE
                                                                                                                                                                           -2
                                                                                                                                                                           1
                                                                                                                                                                           RL)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (HIDE
                                                                                                                                                                             -2)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (INST-CP
                                                                                                                                                                               -1
                                                                                                                                                                               "(q`x * q`x) * Vector_part(a)"
                                                                                                                                                                               "(q`x * cross(Vector_part(q), Vector_part(a)) +
             Vector_part(q) * Vector_part(a) * Vector_part(q))"
                                                                                                                                                                               "(q`x * cross(Vector_part(q), Vector_part(a)) +
             (-(Vector_part(q) * Vector_part(q)) * Vector_part(a) +
               (Vector_part(a) * Vector_part(q)) * Vector_part(q)))")
                                                                                                                                                                              (("1"
                                                                                                                                                                                (REPLACE
                                                                                                                                                                                 -2
                                                                                                                                                                                 1
                                                                                                                                                                                 RL)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (HIDE
                                                                                                                                                                                   -2)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (CASE-REPLACE
                                                                                                                                                                                     "((q`x * cross(Vector_part(q), Vector_part(a)) +
              Vector_part(q) * Vector_part(a) * Vector_part(q))
             +
             (q`x * cross(Vector_part(q), Vector_part(a)) +
               (-(Vector_part(q) * Vector_part(q)) * Vector_part(a) +
                 (Vector_part(a) * Vector_part(q)) * Vector_part(q)))) = ((-(Vector_part(q) * Vector_part(q) * Vector_part(a)) +
               (2 * (Vector_part(q) * Vector_part(a))) * Vector_part(q))
              + (2 * q`x) * cross(Vector_part(q), Vector_part(a)))")
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (HIDE
                                                                                                                                                                                       2)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (LEMMA
                                                                                                                                                                                         "vectors_3D.add_comm")
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (INST-CP
                                                                                                                                                                                           -1
                                                                                                                                                                                           "q`x * cross(Vector_part(q), Vector_part(a))"
                                                                                                                                                                                           "Vector_part(q) * Vector_part(a) * Vector_part(q)")
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (REPLACES
                                                                                                                                                                                             -2)
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (INST-CP
                                                                                                                                                                                               -2
                                                                                                                                                                                               "Vector_part(q) * Vector_part(a) * Vector_part(q) +
            q`x * cross(Vector_part(q), Vector_part(a))"
                                                                                                                                                                                               "q`x * cross(Vector_part(q), Vector_part(a))"
                                                                                                                                                                                               "-(Vector_part(q) * Vector_part(q)) * Vector_part(a) +
                (Vector_part(a) * Vector_part(q)) * Vector_part(q)")
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (REPLACES
                                                                                                                                                                                                 -3)
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (INST-CP
                                                                                                                                                                                                   -2
                                                                                                                                                                                                   "Vector_part(q) * Vector_part(a) * Vector_part(q)"
                                                                                                                                                                                                   "q`x * cross(Vector_part(q), Vector_part(a))"
                                                                                                                                                                                                   "q`x * cross(Vector_part(q), Vector_part(a))")
                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                    (REPLACE
                                                                                                                                                                                                     -3
                                                                                                                                                                                                     1
                                                                                                                                                                                                     RL)
                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                      (HIDE
                                                                                                                                                                                                       -3)
                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                        (LEMMA
                                                                                                                                                                                                         "vectors_3D.scal_add_left")
                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                          (INST?)
                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                            (REPLACE
                                                                                                                                                                                                             -1
                                                                                                                                                                                                             1
                                                                                                                                                                                                             RL)
                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                              (HIDE
                                                                                                                                                                                                               -1)
                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                (CASE-REPLACE
                                                                                                                                                                                                                 "q`x + q`x = 2 * q`x"
                                                                                                                                                                                                                 :HIDE?
                                                                                                                                                                                                                 T)
                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                  (INST-CP
                                                                                                                                                                                                                   -1
                                                                                                                                                                                                                   "Vector_part(q) * Vector_part(a) * Vector_part(q) +
             2 * q`x * cross(Vector_part(q), Vector_part(a))"
                                                                                                                                                                                                                   "(-(Vector_part(q) * Vector_part(q)) * Vector_part(a) +
               (Vector_part(a) * Vector_part(q)) * Vector_part(q))")
                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                    (REPLACES
                                                                                                                                                                                                                     -2)
                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                      (INST-CP
                                                                                                                                                                                                                       -2
                                                                                                                                                                                                                       "(-(Vector_part(q) * Vector_part(q)) * Vector_part(a) +
              (Vector_part(a) * Vector_part(q)) * Vector_part(q))"
                                                                                                                                                                                                                       "Vector_part(q) * Vector_part(a) * Vector_part(q)"
                                                                                                                                                                                                                       "2 * q`x * cross(Vector_part(q), Vector_part(a))")
                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                        (REPLACES
                                                                                                                                                                                                                         -3)
                                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                                          (INST-CP
                                                                                                                                                                                                                           -2
                                                                                                                                                                                                                           "-(Vector_part(q) * Vector_part(q)) * Vector_part(a)"
                                                                                                                                                                                                                           "(Vector_part(a) * Vector_part(q)) * Vector_part(q)"
                                                                                                                                                                                                                           "Vector_part(q) * Vector_part(a) * Vector_part(q)")
                                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                                            (REPLACE
                                                                                                                                                                                                                             -3
                                                                                                                                                                                                                             1
                                                                                                                                                                                                                             RL)
                                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                                              (HIDE
                                                                                                                                                                                                                               -3)
                                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                                (LEMMA
                                                                                                                                                                                                                                 "vectors_3D.dot_comm")
                                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                                  (INST
                                                                                                                                                                                                                                   -1
                                                                                                                                                                                                                                   "Vector_part(a)"
                                                                                                                                                                                                                                   "Vector_part(q)")
                                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                                    (REPLACES
                                                                                                                                                                                                                                     -1)
                                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                                      (LEMMA
                                                                                                                                                                                                                                       "vectors_3D.scal_add_left")
                                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                                        (INST
                                                                                                                                                                                                                                         -1
                                                                                                                                                                                                                                         "Vector_part(q) * Vector_part(a)"
                                                                                                                                                                                                                                         "Vector_part(q) * Vector_part(a)"
                                                                                                                                                                                                                                         "Vector_part(q)")
                                                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                                                          (REPLACE
                                                                                                                                                                                                                                           -1
                                                                                                                                                                                                                                           1
                                                                                                                                                                                                                                           RL)
                                                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                                                            (HIDE
                                                                                                                                                                                                                                             -1)
                                                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                                                              (CASE-REPLACE
                                                                                                                                                                                                                                               "Vector_part(q) * Vector_part(a) + Vector_part(q) * Vector_part(a) = 2 * (Vector_part(q) * Vector_part(a))"
                                                                                                                                                                                                                                               :HIDE?
                                                                                                                                                                                                                                               T)
                                                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                                                (CASE-REPLACE
                                                                                                                                                                                                                                                 "-(Vector_part(q) * Vector_part(q)) * Vector_part(a) +
               2 * (Vector_part(q) * Vector_part(a)) * Vector_part(q) = (-(Vector_part(q) * Vector_part(q) * Vector_part(a)) +
                  2 * (Vector_part(q) * Vector_part(a)) * Vector_part(q))")
                                                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                                                  (HIDE
                                                                                                                                                                                                                                                   (-
                                                                                                                                                                                                                                                    2))
                                                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                                                    (CASE-REPLACE
                                                                                                                                                                                                                                                     "-(Vector_part(q) * Vector_part(q)) * Vector_part(a) = -(Vector_part(q) * Vector_part(q) * Vector_part(a))")
                                                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                                                      (HIDE
                                                                                                                                                                                                                                                       2)
                                                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                                                        (LEMMA
                                                                                                                                                                                                                                                         "vectors_3D.scal_neg_1")
                                                                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                                                                          (INST?)
                                                                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                                                                            (REPLACE
                                                                                                                                                                                                                                                             -1
                                                                                                                                                                                                                                                             1
                                                                                                                                                                                                                                                             RL)
                                                                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                                                                              (HIDE
                                                                                                                                                                                                                                                               -)
                                                                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                                                                (LEMMA
                                                                                                                                                                                                                                                                 "vectors_3D. scal_assoc")
                                                                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                                                                  (INST?)
                                                                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                                                                    (REPLACES
                                                                                                                                                                                                                                                                     -1)
                                                                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                                                                      (ASSERT)
                                                                                                                                                                                                                                                                      NIL
                                                                                                                                                                                                                                                                      NIL))
                                                                                                                                                                                                                                                                    NIL))
                                                                                                                                                                                                                                                                  NIL))
                                                                                                                                                                                                                                                                NIL))
                                                                                                                                                                                                                                                              NIL))
                                                                                                                                                                                                                                                            NIL))
                                                                                                                                                                                                                                                          NIL))
                                                                                                                                                                                                                                                        NIL))
                                                                                                                                                                                                                                                      NIL))
                                                                                                                                                                                                                                                    NIL))
                                                                                                                                                                                                                                                  NIL))
                                                                                                                                                                                                                                                NIL)
                                                                                                                                                                                                                                               ("2"
                                                                                                                                                                                                                                                (HIDE
                                                                                                                                                                                                                                                 (-
                                                                                                                                                                                                                                                  2))
                                                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                                                  (ASSERT)
                                                                                                                                                                                                                                                  NIL
                                                                                                                                                                                                                                                  NIL))
                                                                                                                                                                                                                                                NIL))
                                                                                                                                                                                                                                              NIL))
                                                                                                                                                                                                                                            NIL))
                                                                                                                                                                                                                                          NIL))
                                                                                                                                                                                                                                        NIL))
                                                                                                                                                                                                                                      NIL))
                                                                                                                                                                                                                                    NIL))
                                                                                                                                                                                                                                  NIL))
                                                                                                                                                                                                                                NIL))
                                                                                                                                                                                                                              NIL))
                                                                                                                                                                                                                            NIL))
                                                                                                                                                                                                                          NIL))
                                                                                                                                                                                                                        NIL))
                                                                                                                                                                                                                      NIL))
                                                                                                                                                                                                                    NIL))
                                                                                                                                                                                                                  NIL)
                                                                                                                                                                                                                 ("2"
                                                                                                                                                                                                                  (HIDE
                                                                                                                                                                                                                   (-
                                                                                                                                                                                                                    2))
                                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                                    (ASSERT)
                                                                                                                                                                                                                    NIL
                                                                                                                                                                                                                    NIL))
                                                                                                                                                                                                                  NIL))
                                                                                                                                                                                                                NIL))
                                                                                                                                                                                                              NIL))
                                                                                                                                                                                                            NIL))
                                                                                                                                                                                                          NIL))
                                                                                                                                                                                                        NIL))
                                                                                                                                                                                                      NIL))
                                                                                                                                                                                                    NIL))
                                                                                                                                                                                                  NIL))
                                                                                                                                                                                                NIL))
                                                                                                                                                                                              NIL))
                                                                                                                                                                                            NIL))
                                                                                                                                                                                          NIL))
                                                                                                                                                                                        NIL))
                                                                                                                                                                                      NIL))
                                                                                                                                                                                    NIL))
                                                                                                                                                                                  NIL))
                                                                                                                                                                                NIL))
                                                                                                                                                                              NIL))
                                                                                                                                                                            NIL))
                                                                                                                                                                          NIL))
                                                                                                                                                                        NIL))
                                                                                                                                                                      NIL))
                                                                                                                                                                    NIL))
                                                                                                                                                                  NIL))
                                                                                                                                                                NIL))
                                                                                                                                                              NIL))
                                                                                                                                                            NIL))
                                                                                                                                                          NIL))
                                                                                                                                                        NIL))
                                                                                                                                                      NIL))
                                                                                                                                                    NIL))
                                                                                                                                                  NIL))
                                                                                                                                                NIL))
                                                                                                                                              NIL))
                                                                                                                                            NIL))
                                                                                                                                          NIL))
                                                                                                                                        NIL))
                                                                                                                                      NIL)
                                                                                                                                     ("2"
                                                                                                                                      (HIDE
                                                                                                                                       2)
                                                                                                                                      (("2"
                                                                                                                                        (LEMMA
                                                                                                                                         "sq_sqrt")
                                                                                                                                        (("2"
                                                                                                                                          (INST?)
                                                                                                                                          (("2"
                                                                                                                                            (PROP)
                                                                                                                                            (("1"
                                                                                                                                              (EXPAND
                                                                                                                                               "sq")
                                                                                                                                              (("1"
                                                                                                                                                (ASSERT)
                                                                                                                                                NIL
                                                                                                                                                NIL))
                                                                                                                                              NIL)
                                                                                                                                             ("2"
                                                                                                                                              (HIDE
                                                                                                                                               2)
                                                                                                                                              (("2"
                                                                                                                                                (ASSERT)
                                                                                                                                                NIL
                                                                                                                                                NIL))
                                                                                                                                              NIL))
                                                                                                                                            NIL))
                                                                                                                                          NIL))
                                                                                                                                        NIL))
                                                                                                                                      NIL))
                                                                                                                                    NIL))
                                                                                                                                  NIL))
                                                                                                                                NIL))
                                                                                                                              NIL))
                                                                                                                            NIL))
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|T_q| CONST-DECL "(pure_quat)" |quaternions| NIL)
    (|quat| TYPE-EQ-DECL NIL |quaternions_def| NIL)
    (* CONST-DECL "[quat, quat -> quat]" |quaternions_def| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|pure_quat| CONST-DECL "set[quat]" |quaternions_def| NIL)
    (|conjugate| CONST-DECL "quat" |quaternions_def| NIL)
    (|Vect3| TYPE-EQ-DECL NIL |vectors_3D_def| |vectors|)
    (* CONST-DECL "real" |vectors_3D| |vectors|)
    (|Vector| TYPE-EQ-DECL NIL |vectors_3D| |vectors|)
    (|cross_anticomm| FORMULA-DECL NIL |cross_3D| |vectors|)
    (|neg_distr_add| FORMULA-DECL NIL |vectors_3D| |vectors|)
    (|neg_distr_sub| FORMULA-DECL NIL |vectors_3D| |vectors|)
    (|cross_scal_right| FORMULA-DECL NIL |cross_3D| |vectors|)
    (|add_neg_sub| FORMULA-DECL NIL |vectors_3D| |vectors|)
    (|sq| CONST-DECL "nonneg_real" |sq| |reals|)
    (|sqrt_sqv_sq| FORMULA-DECL NIL |vectors_3D| |vectors|)
    (|sq_sqrt| FORMULA-DECL NIL |sqrt| |reals|)
    (|add_comm| FORMULA-DECL NIL |vectors_3D| |vectors|)
    (|dot_comm| FORMULA-DECL NIL |vectors_3D| |vectors|)
    (|scal_add_left| FORMULA-DECL NIL |vectors_3D| |vectors|)
    (|add_assoc| FORMULA-DECL NIL |vectors_3D| |vectors|)
    (|sqrt| CONST-DECL "{nnz: nnreal | nnz * nnz = nnx}" |sqrt| |reals|)
    (|sqv| CONST-DECL "nnreal" |vectors_3D| |vectors|)
    (|scal_sub_left| FORMULA-DECL NIL |vectors_3D| |vectors|)
    (|sq| CONST-DECL "T" |ring| NIL)
    (|norm| CONST-DECL "nnreal" |vectors_3D| |vectors|)
    (|dot_neg_right| FORMULA-DECL NIL |vectors_3D| |vectors|)
    (|neg_neg| FORMULA-DECL NIL |vectors_3D| |vectors|)
    (|cross_scal_left| FORMULA-DECL NIL |cross_3D| |vectors|)
    (|scal_neg_1| FORMULA-DECL NIL |vectors_3D| |vectors|)
    (|cross_cross| FORMULA-DECL NIL |cross_3D| |vectors|)
    (|cross_dist| FORMULA-DECL NIL |cross_3D| |vectors|)
    (+ CONST-DECL "Vector" |vectors_3D| |vectors|)
    (|scal_assoc| FORMULA-DECL NIL |vectors_3D| |vectors|)
    (|scal_add_right| FORMULA-DECL NIL |vectors_3D| |vectors|)
    (* CONST-DECL "Vector" |vectors_3D| |vectors|)
    (|cross| CONST-DECL "Vector" |cross_3D| |vectors|)
    (|scal_neg| FORMULA-DECL NIL |vectors_3D| |vectors|)
    (|add_zero_right| FORMULA-DECL NIL |vectors_3D| |vectors|)
    (|scal_0| FORMULA-DECL NIL |vectors_3D| |vectors|))
   SHOSTAK))
 (|r_angle_TCC1| 0
  (|r_angle_TCC1-1| |nil| 3907332229
   ("" (SKEEP)
    (("" (TYPEPRED "a")
      (("" (EXPAND* "pure_quat" "nzpure_quat" "Vector_part" "zero")
        (("" (EXPAND "remove")
          (("" (FLATTEN)
            (("" (HIDE -2)
              (("" (EXPAND "zero_q") (("" (DECOMPOSE-EQUALITY 1) NIL NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|nzpure_quat| CONST-DECL "set[(pure_quat)]" |quaternions_def| NIL)
    (|pure_quat| CONST-DECL "set[quat]" |quaternions_def| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|quat| TYPE-EQ-DECL NIL |quaternions_def| NIL)
    (|remove| CONST-DECL "set" |sets| NIL)
    (|zero_q| CONST-DECL "quat" |quaternions_def| NIL)
    (|zero| CONST-DECL "Vector" |vectors_3D| |vectors|))
   NIL
   (|r_angle| SUBTYPE
    "quaternions_Hamilton.Vector_part(quaternions_Hamilton.a)" "Nz_vect3"
    (81 57 81 71))))
 (|r_angle_TCC2| 0
  (|r_angle_TCC2-1| |nil| 3907332229
   ("" (SKEEP)
    (("" (TYPEPRED "b")
      (("" (EXPAND* "pure_quat" "nzpure_quat" "Vector_part" "zero")
        (("" (EXPAND "remove")
          (("" (FLATTEN)
            (("" (HIDE -2)
              (("" (EXPAND "zero_q") (("" (DECOMPOSE-EQUALITY 1) NIL NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|nzpure_quat| CONST-DECL "set[(pure_quat)]" |quaternions_def| NIL)
    (|pure_quat| CONST-DECL "set[quat]" |quaternions_def| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|quat| TYPE-EQ-DECL NIL |quaternions_def| NIL)
    (|remove| CONST-DECL "set" |sets| NIL)
    (|zero_q| CONST-DECL "quat" |quaternions_def| NIL)
    (|zero| CONST-DECL "Vector" |vectors_3D| |vectors|))
   NIL
   (|r_angle| SUBTYPE
    "quaternions_Hamilton.Vector_part(quaternions_Hamilton.b)" "Nz_vect3"
    (81 72 81 86))))
 (|n_rot_axis_TCC1| 0
  (|n_rot_axis_TCC1-1| |nil| 3907332229
   ("" (SKEEP)
    (("" (TYPEPRED "b")
      (("" (HIDE -1)
        (("" (EXPAND "linearly_independent?")
          (("" (REWRITE "lin_indep_cross")
            (("1" (HIDE -1)
              (("1" (EXPAND "linearly_dependent?")
                (("1" (INST 2 "0" "1") (("1" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL)
             ("2" (HIDE -1)
              (("2" (EXPAND "linearly_dependent?")
                (("2" (INST 2 "1" "0") (("2" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|linearly_independent?| CONST-DECL "bool" |cross_3D| |vectors|)
    (|Vect3| TYPE-EQ-DECL NIL |vectors_3D_def| |vectors|)
    (|pure_quat| CONST-DECL "set[quat]" |quaternions_def| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|quat| TYPE-EQ-DECL NIL |quaternions_def| NIL)
    (|add_zero_right| FORMULA-DECL NIL |vectors_3D| |vectors|)
    (|add_zero_left| FORMULA-DECL NIL |vectors_3D| |vectors|)
    (|scal_1| FORMULA-DECL NIL |vectors_3D| |vectors|)
    (|scal_0| FORMULA-DECL NIL |vectors_3D| |vectors|)
    (|linearly_dependent?| CONST-DECL "bool" |cross_3D| |vectors|)
    (|Nz_vect3| TYPE-EQ-DECL NIL |vectors_3D| |vectors|)
    (|zero| CONST-DECL "Vector" |vectors_3D| |vectors|)
    (|Vector| TYPE-EQ-DECL NIL |vectors_3D| |vectors|)
    (|lin_indep_cross| FORMULA-DECL NIL |cross_3D| |vectors|))
   NIL
   (|n_rot_axis| SUBTYPE
    "cross_3D.cross(quaternions_Hamilton.Vector_part(quaternions_Hamilton.a), quaternions_Hamilton.Vector_part(quaternions_Hamilton.b))"
    "Nz_vector" (84 13 84 50))))
 (|rot_quat_TCC1| 0
  (|rot_quat_TCC1-1| |nil| 3907332229
   ("" (SKEEP)
    (("" (EXPAND "nzpure_quat")
      (("" (EXPAND "remove")
        (("" (EXPAND "member")
          (("" (EXPAND "fullset")
            (("" (PROP)
              (("" (TYPEPRED "b")
                (("" (EXPAND "linearly_independent?")
                  (("" (EXPAND "linearly_dependent?")
                    (("" (INST 1 "1" "0")
                      (("" (ASSERT)
                        (("" (HIDE -1)
                          (("" (EXPAND* "zero_q" "Vector_part" "zero")
                            (("" (ASSERT) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|nzpure_quat| CONST-DECL "set[(pure_quat)]" |quaternions_def| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|zero_q| CONST-DECL "quat" |quaternions_def| NIL)
    (|zero| CONST-DECL "Vector" |vectors_3D| |vectors|)
    (|add_zero_right| FORMULA-DECL NIL |vectors_3D| |vectors|)
    (|scal_0| FORMULA-DECL NIL |vectors_3D| |vectors|)
    (|scal_1| FORMULA-DECL NIL |vectors_3D| |vectors|)
    (|linearly_dependent?| CONST-DECL "bool" |cross_3D| |vectors|)
    (|quat| TYPE-EQ-DECL NIL |quaternions_def| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|pure_quat| CONST-DECL "set[quat]" |quaternions_def| NIL)
    (|Vect3| TYPE-EQ-DECL NIL |vectors_3D_def| |vectors|)
    (|linearly_independent?| CONST-DECL "bool" |cross_3D| |vectors|)
    (|fullset| CONST-DECL "set" |sets| NIL)
    (|remove| CONST-DECL "set" |sets| NIL))
   NIL
   (|rot_quat| SUBTYPE "quaternions_Hamilton.a"
    "(quaternions_def[real, restrict[[numfield, numfield], [real, real], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [real, real], numfield].restrict(number_fields.*), 0, 1, -1, -1].nzpure_quat)"
    (87 63 87 64))))
 (|rot_quat_TCC2| 0
  (|rot_quat_TCC2-1| |nil| 3907332229
   ("" (SKEEP)
    (("" (EXPAND "nzpure_quat")
      (("" (EXPAND "remove")
        (("" (EXPAND "member")
          (("" (EXPAND "fullset")
            (("" (PROP)
              (("" (TYPEPRED "b")
                (("" (EXPAND "linearly_independent?")
                  (("" (EXPAND "linearly_dependent?")
                    (("" (INST 1 "0" "1")
                      (("" (ASSERT)
                        (("" (HIDE -1)
                          (("" (EXPAND* "zero_q" "Vector_part" "zero")
                            (("" (ASSERT) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|nzpure_quat| CONST-DECL "set[(pure_quat)]" |quaternions_def| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|zero_q| CONST-DECL "quat" |quaternions_def| NIL)
    (|zero| CONST-DECL "Vector" |vectors_3D| |vectors|)
    (|add_zero_left| FORMULA-DECL NIL |vectors_3D| |vectors|)
    (|scal_1| FORMULA-DECL NIL |vectors_3D| |vectors|)
    (|scal_0| FORMULA-DECL NIL |vectors_3D| |vectors|)
    (|linearly_dependent?| CONST-DECL "bool" |cross_3D| |vectors|)
    (|quat| TYPE-EQ-DECL NIL |quaternions_def| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|pure_quat| CONST-DECL "set[quat]" |quaternions_def| NIL)
    (|Vect3| TYPE-EQ-DECL NIL |vectors_3D_def| |vectors|)
    (|linearly_independent?| CONST-DECL "bool" |cross_3D| |vectors|)
    (|fullset| CONST-DECL "set" |sets| NIL)
    (|remove| CONST-DECL "set" |sets| NIL))
   NIL
   (|rot_quat| SUBTYPE "quaternions_Hamilton.b"
    "(quaternions_def[real, restrict[[numfield, numfield], [real, real], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [real, real], numfield].restrict(number_fields.*), 0, 1, -1, -1].nzpure_quat)"
    (87 65 87 66))))
 (|rot_quat_TCC3| 0
  (|rot_quat_TCC3-1| |nil| 3907332229
   ("" (SKEEP)
    ((""
      (NAME-REPLACE "c" "inv[nz_T[real,
                 restrict[[numfield, numfield], [real, real], numfield](+),
                 restrict[[numfield, numfield], [real, real], numfield](*),
                 0],
            restrict
                [[real, real],
                 [nz_T[real,
                       restrict
                           [[numfield, numfield], [real, real], numfield]
                           (+),
                       restrict
                           [[numfield, numfield], [real, real], numfield]
                           (*),
                       0],
                  nz_T[real,
                       restrict
                           [[numfield, numfield], [real, real], numfield]
                           (+),
                       restrict
                           [[numfield, numfield], [real, real], numfield]
                           (*),
                       0]],
                 real]
                (restrict[[numfield, numfield], [real, real], numfield]
                     (*)),
            1]
            (2)"
       :HIDE? T)
      (("1" (TYPEPRED "r_angle(a, b)")
        (("1" (HIDE -2)
          (("1" (LEMMA "both_sides_times_pos_ge1")
            (("1" (INST -1 "c" "r_angle(a, b)" "0")
              (("1" (ASSERT) NIL NIL)
               ("2" (HIDE (- 2))
                (("2" (TYPEPRED "c")
                  (("2" (EXPAND "restrict") (("2" (ASSERT) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (HIDE 2)
        (("2" (SKEEP)
          (("2" (EXPAND "restrict")
            (("2" (TYPEPRED "x1`1" "x1`2")
              (("2" (PROP)
                (("2" (LEMMA "times_is_zero")
                  (("2" (INST -1 "x1`1" "x1`2") (("2" (ASSERT) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("3" (HIDE 2)
        (("3" (SKEEP)
          (("3" (TYPEPRED "x1`1" "x1`2") (("3" (GRIND) NIL NIL)) NIL)) NIL))
        NIL)
       ("4" (HIDE 2) (("4" (INST 1 "1") NIL NIL)) NIL))
      NIL))
    NIL)
   ((TRUE CONST-DECL "bool" |booleans| NIL)
    (|inv| CONST-DECL "{y | x * y = one AND y * x = one}" |group| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|nz_T| TYPE-EQ-DECL NIL |ring_nz_closed_def| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|negate_nz_T_is_nz_T| APPLICATION-JUDGEMENT
     "nz_T[real, restrict[[numfield, numfield], [real, real], numfield](+),
     restrict[[numfield, numfield], [real, real], numfield](*), 0]"
     |quaternions_Hamilton| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|c| SKOLEM-CONST-DECL "{y:
   nz_T[real, restrict[[numfield, numfield], [real, real], numfield](+),
        restrict[[numfield, numfield], [real, real], numfield](*), 0] |
   restrict[[numfield, numfield], [real, real], numfield](*)(2, y) = 1 AND
    restrict[[numfield, numfield], [real, real], numfield](*)(y, 2) = 1}"
     |quaternions_Hamilton| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nnreal_div_posreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types|
     NIL)
    (|pi_bound| NAME-JUDGEMENT
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| |trig|)
    (|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal"
     |real_types| NIL)
    (|both_sides_times_pos_ge1| FORMULA-DECL NIL |real_props| NIL)
    (|Vector_part| CONST-DECL "Vect3" |quaternions_Hamilton| NIL)
    (|linearly_independent?| CONST-DECL "bool" |cross_3D| |vectors|)
    (|Vect3| TYPE-EQ-DECL NIL |vectors_3D_def| |vectors|)
    (|r_angle| CONST-DECL "nnreal_le_pi" |quaternions_Hamilton| NIL)
    (|nnreal_le_pi| NONEMPTY-TYPE-EQ-DECL NIL |trig_types| |trig|)
    (|pi| CONST-DECL "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" |pi_def|
     |trig|)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|cos| CONST-DECL "real" |sincos_def| |trig|)
    (< CONST-DECL "bool" |reals| NIL) (> CONST-DECL "bool" |reals| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL)
    (|nzpure_quat| CONST-DECL "set[(pure_quat)]" |quaternions_def| NIL)
    (|pure_quat| CONST-DECL "set[quat]" |quaternions_def| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|quat| TYPE-EQ-DECL NIL |quaternions_def| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|times_is_zero| FORMULA-DECL NIL |ring_nz_closed| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL))
   NIL
   (|rot_quat| SUBTYPE
    "(number_fields./(quaternions_Hamilton.r_angle(quaternions_Hamilton.a, quaternions_Hamilton.b), 2))"
    "nnreal_le_pi" (87 39 87 71))))
 (|conj_quat_eq| 0
  (|conj_quat_eq-1| |nil| 3907387329
   ("" (SKEEP)
    (("" (EXPAND "conjugate")
      (("" (EXPAND "conjugate_")
        (("" (ASSERT)
          (("" (ASSERT)
            (("" (ASSERT) (("" (ASSERT) (("" (ASSERT) NIL NIL)) NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|conjugate| CONST-DECL "quat" |quaternions_def| NIL)) SHOSTAK))
 (|mult_QH_eq| 0
  (|mult_QH_eq-1| |nil| 3907387478
   ("" (SKEEP)
    (("" (DECOMPOSE-EQUALITY)
      (("1" (LEMMA "q_prod_charac")
        (("1" (INST?)
          (("1" (REPLACES -1)
            (("1" (EXPAND "mult_QH") (("1" (ASSERT) NIL NIL)) NIL)) NIL))
          NIL))
        NIL)
       ("2" (LEMMA "q_prod_charac")
        (("2" (INST?)
          (("2" (REPLACES -1)
            (("2" (EXPAND "mult_QH") (("2" (ASSERT) NIL NIL)) NIL)) NIL))
          NIL))
        NIL)
       ("3" (LEMMA "q_prod_charac")
        (("3" (INST?)
          (("3" (REPLACES -1)
            (("3" (EXPAND "mult_QH") (("3" (ASSERT) NIL NIL)) NIL)) NIL))
          NIL))
        NIL)
       ("4" (LEMMA "q_prod_charac")
        (("4" (INST?)
          (("4" (REPLACES -1)
            (("4" (EXPAND "mult_QH") (("4" (ASSERT) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((* CONST-DECL "[quat, quat -> quat]" |quaternions_def| NIL)
    (|quat| TYPE-EQ-DECL NIL |quaternions_def| NIL)
    (|q_prod_charac| FORMULA-DECL NIL |quaternions| NIL))
   SHOSTAK))
 (|T_q__TCC1| 0
  (|T_q__TCC1-1| |nil| 3907387295
   ("" (SKEEP)
    (("" (CASE-REPLACE "mult_QH(mult_QH(q, v), conjugate_(q)) = T_q(q)(v)")
      (("1" (TYPEPRED "T_q(q)(v)")
        (("1" (PROPAX) NIL NIL)
         ("2" (HIDE (-1 2)) (("2" (GRIND) NIL NIL)) NIL))
        NIL)
       ("2" (HIDE 2)
        (("2" (EXPAND "T_q")
          (("2" (REWRITE* "mult_QH_eq")
            (("2" (REWRITE "conj_quat_eq") NIL NIL)) NIL))
          NIL))
        NIL)
       ("3" (HIDE 2) (("3" (GRIND) NIL NIL)) NIL))
      NIL))
    NIL)
   ((|remove| CONST-DECL "set" |sets| NIL)
    (|fullset| CONST-DECL "set" |sets| NIL)
    (|quat| TYPE-EQ-DECL NIL |quaternions_def| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|pure_quat| CONST-DECL "set[quat]" |quaternions_def| NIL)
    (|T_q| CONST-DECL "(pure_quat)" |quaternions| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|conjugate| CONST-DECL "quat" |quaternions_def| NIL))
   NIL
   (|T_q_| SUBTYPE
    "quaternions_Hamilton.mult_QH(quaternions_Hamilton.mult_QH(quaternions_Hamilton.q, quaternions_Hamilton.v), quaternions_Hamilton.conjugate_(quaternions_Hamilton.q))"
    "(quaternions_def[real, restrict[[numfield, numfield], [real, real], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [real, real], numfield].restrict(number_fields.*), 0, 1, -1, -1].pure_quat)"
    (122 44 122 81))))
 (|T_q_eq| 0
  (|T_q_eq-1| |nil| 3907387767
   ("" (SKEEP)
    (("" (EXPAND "T_q")
      (("" (EXPAND "T_q_")
        (("" (REWRITE "conj_quat_eq") (("" (REWRITE* "mult_QH_eq") NIL NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|T_q| CONST-DECL "(pure_quat)" |quaternions| NIL)
    (|quat| TYPE-EQ-DECL NIL |quaternions_def| NIL)
    (|pure_quat| CONST-DECL "set[quat]" |quaternions_def| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL))
   SHOSTAK))
 (|Quat_Rot_Aux0| 0
  (|Quat_Rot_Aux0-1| |nil| 3907338520
   ("" (SKEEP)
    (("" (EXPAND "rot_quat")
      (("" (DECOMPOSE-EQUALITY)
        (("1" (EXPAND "Vector_part")
          (("1" (EXPAND "*") (("1" (PROPAX) NIL NIL)) NIL)) NIL)
         ("2" (EXPAND "Vector_part")
          (("2" (EXPAND "*") (("2" (PROPAX) NIL NIL)) NIL)) NIL)
         ("3" (EXPAND "Vector_part")
          (("3" (EXPAND "*") (("3" (PROPAX) NIL NIL)) NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|Vect3| TYPE-EQ-DECL NIL |vectors_3D_def| |vectors|)
    (* CONST-DECL "Vector" |vectors_3D| |vectors|)
    (|Vector| TYPE-EQ-DECL NIL |vectors_3D| |vectors|)
    (|sin| CONST-DECL "real" |sincos_def| |trig|)
    (|linearly_independent?| CONST-DECL "bool" |cross_3D| |vectors|)
    (|nnreal_le_pi| NONEMPTY-TYPE-EQ-DECL NIL |trig_types| |trig|)
    (|pi| CONST-DECL "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" |pi_def|
     |trig|)
    (|nzpure_quat| CONST-DECL "set[(pure_quat)]" |quaternions_def| NIL)
    (|pure_quat| CONST-DECL "set[quat]" |quaternions_def| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|cos| CONST-DECL "real" |sincos_def| |trig|)
    (|quat| TYPE-EQ-DECL NIL |quaternions_def| NIL)
    (|cos_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|sin_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|))
   SHOSTAK))
 (|Quat_Rot_Aux1| 0
  (|Quat_Rot_Aux1-1| |nil| 3907338568
   ("" (SKEEP)
    (("" (REWRITE "Quat_Rot_Aux0")
      (("" (EXPAND "n_rot_axis")
        (("" (EXPAND "^")
          (("" (LEMMA "orth_cross")
            (("" (INST?)
              (("" (REWRITE "dot_scal_left")
                (("" (REPLACES -1) (("" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|quat| TYPE-EQ-DECL NIL |quaternions_def| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|pure_quat| CONST-DECL "set[quat]" |quaternions_def| NIL)
    (|Vect3| TYPE-EQ-DECL NIL |vectors_3D_def| |vectors|)
    (|linearly_independent?| CONST-DECL "bool" |cross_3D| |vectors|)
    (|sin_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (^ CONST-DECL "Normalized" |vectors_3D| |vectors|)
    (|cross| CONST-DECL "Vector" |cross_3D| |vectors|)
    (|norm| CONST-DECL "nnreal" |vectors_3D| |vectors|)
    (* CONST-DECL "Vector" |vectors_3D| |vectors|)
    (|Vector| TYPE-EQ-DECL NIL |vectors_3D| |vectors|)
    (|nnreal_le_pi| NONEMPTY-TYPE-EQ-DECL NIL |trig_types| |trig|)
    (|pi| CONST-DECL "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" |pi_def|
     |trig|)
    (|cos| CONST-DECL "real" |sincos_def| |trig|)
    (|nzpure_quat| CONST-DECL "set[(pure_quat)]" |quaternions_def| NIL)
    (|sin| CONST-DECL "real" |sincos_def| |trig|)
    (|dot_scal_left| FORMULA-DECL NIL |vectors_3D| |vectors|)
    (|orth_cross| FORMULA-DECL NIL |vectors_3D_extra| |vectors|))
   SHOSTAK))
 (|Quat_Rot_Aux2| 0
  (|Quat_Rot_Aux2-1| |nil| 3907338621
   ("" (SKEEP)
    (("" (BETA)
      ((""
        (CASE-REPLACE
         "sq(rot_quat(a, b)`x) - sq(norm(Vector_part(rot_quat(a, b)))) = cos(r_angle(a, b))")
        (("" (HIDE 2)
          (("" (EXPAND "Vector_part")
            (("" (EXPAND "rot_quat")
              ((""
                (CASE-REPLACE "(# x
                        := sin((number_fields./(r_angle(a, b), 2))) *
                            n_rot_axis(a, b)`x,
                      y
                        := sin((number_fields./(r_angle(a, b), 2))) *
                            n_rot_axis(a, b)`y,
                      z
                        := sin((number_fields./(r_angle(a, b), 2))) *
                            n_rot_axis(a, b)`z #) = sin((number_fields./(r_angle(a, b), 2))) * (n_rot_axis(a, b)`x, n_rot_axis(a, b)`y, n_rot_axis(a, b)`z)"
                 :HIDE? T)
                (("1" (REWRITE "vectors_3D.norm_scal")
                  (("1" (LEMMA "vectors_3D.norm_normalize")
                    (("1" (INST -1 "cross(Vector_part(a), Vector_part(b))")
                      (("1"
                        (CASE-REPLACE "(# x := n_rot_axis(a, b)`x,
                                       y := n_rot_axis(a, b)`y,
                                       z := n_rot_axis(a, b)`z #) = ^(cross(Vector_part(a), Vector_part(b)))"
                         :HIDE? T)
                        (("1" (REPLACES -1)
                          (("1" (ASSERT)
                            (("1"
                              (CASE-REPLACE
                               "sq(abs(sin((number_fields./(r_angle(a, b), 2))))) = sq(sin((number_fields./(r_angle(a, b), 2))))"
                               :HIDE? T)
                              (("1" (EXPAND "sq")
                                (("1" (LEMMA "cos_2a")
                                  (("1" (INST?)
                                    (("1" (REPLACE -1 1 RL)
                                      (("1" (HIDE -) (("1" (ASSERT) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (HIDE 2)
                                (("2" (EXPAND "abs")
                                  (("2" (LIFT-IF)
                                    (("2" (PROP)
                                      (("2" (HIDE 1)
                                        (("2"
                                          (CASE
                                              "(number_fields./(r_angle(a, b), 2)) >=0 AND (number_fields./(r_angle(a, b), 2)) <= (number_fields./(pi, 2))")
                                          (("1" (FLATTEN)
                                            (("1" (LEMMA "sin_pos_0tohalfpi")
                                              (("1" (INST?)
                                                (("1" (ASSERT) NIL NIL)
                                                 ("2" (HIDE -2)
                                                  (("2"
                                                    (CASE-REPLACE
                                                     "(number_fields./(r_angle(a, b), 2)) = 0"
                                                     :HIDE? T)
                                                    (("1" (HIDE (-1 1))
                                                      (("1" (LEMMA "sin_eq_0")
                                                        (("1" (INST?)
                                                          (("1" (ASSERT)
                                                            (("1" (INST?)
                                                              (("1" (ASSERT)
                                                                NIL NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL)
                                                     ("2" (ASSERT) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("2" (HIDE -)
                                            (("2" (TYPEPRED "r_angle(a, b)")
                                              (("1" (ASSERT) NIL NIL)
                                               ("2" (HIDE 2)
                                                (("2" (EXPAND "nzpure_quat")
                                                  (("2" (EXPAND "remove")
                                                    (("2" (EXPAND "member")
                                                      (("2" (EXPAND "fullset")
                                                        (("2" (PROP)
                                                          (("2" (TYPEPRED "b")
                                                            (("2"
                                                              (EXPAND*
                                                               "pure_quat"
                                                               "linearly_independent?"
                                                               "linearly_dependent?")
                                                              (("2"
                                                                (INST 1 "0"
                                                                 "1")
                                                                (("2" (GRIND)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("3" (HIDE 2)
                                                (("3" (EXPAND "nzpure_quat")
                                                  (("3" (EXPAND "remove")
                                                    (("3" (EXPAND "member")
                                                      (("3" (EXPAND "fullset")
                                                        (("3" (PROP)
                                                          (("3"
                                                            (TYPEPRED "a" "b")
                                                            (("3" (HIDE -2)
                                                              (("3"
                                                                (EXPAND*
                                                                 "pure_quat"
                                                                 "linearly_independent?"
                                                                 "linearly_dependent?")
                                                                (("3"
                                                                  (INST 1 "1"
                                                                   "0")
                                                                  (("3" (GRIND)
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (HIDE (- 2))
                          (("2" (EXPAND "n_rot_axis")
                            (("2" (DECOMPOSE-EQUALITY 1) NIL NIL)) NIL))
                          NIL))
                        NIL)
                       ("2" (HIDE 2)
                        (("2" (PROP)
                          (("2" (TYPEPRED "b")
                            (("2" (HIDE -1)
                              (("2" (EXPAND "linearly_independent?")
                                (("2" (LEMMA "lin_indep_cross")
                                  (("2" (INST?)
                                    (("1" (ASSERT) NIL NIL)
                                     ("2" (HIDE -1)
                                      (("2" (PROP)
                                        (("2" (EXPAND "linearly_dependent?")
                                          (("2" (INST 1 "0" "1")
                                            (("2" (ASSERT) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("3" (HIDE -1)
                                      (("3" (PROP)
                                        (("3" (EXPAND "linearly_dependent?")
                                          (("3" (INST 1 "1" "0")
                                            (("3" (ASSERT) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (HIDE 2)
                  (("2" (EXPAND "*") (("2" (PROPAX) NIL NIL)) NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|sin_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|norm_scal| FORMULA-DECL NIL |vectors_3D| |vectors|)
    (|cross| CONST-DECL "Vector" |cross_3D| |vectors|)
    (|zero| CONST-DECL "Vector" |vectors_3D| |vectors|)
    (|Nz_vector| TYPE-EQ-DECL NIL |vectors_3D| |vectors|)
    (|nz_norm_gt_0| APPLICATION-JUDGEMENT "posreal" |vectors_3D| |vectors|)
    (|cos_2a| FORMULA-DECL NIL |trig_basic| |trig|)
    (|pi_bound| NAME-JUDGEMENT
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| |trig|)
    (|sin_pos_0tohalfpi| FORMULA-DECL NIL |sincos| |trig|)
    (|zero_times| FORMULA-DECL NIL |ring| NIL)
    (|sin_eq_0| FORMULA-DECL NIL |sincos| |trig|)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|linearly_dependent?| CONST-DECL "bool" |cross_3D| |vectors|)
    (|zero_q| CONST-DECL "quat" |quaternions_def| NIL)
    (+ CONST-DECL "Vector" |vectors_3D| |vectors|)
    (|left_identity| FORMULA-DECL NIL |monad| NIL)
    (|fullset| CONST-DECL "set" |sets| NIL)
    (|remove| CONST-DECL "set" |sets| NIL)
    (|Normalized| TYPE-EQ-DECL NIL |vectors_3D| |vectors|)
    (^ CONST-DECL "Normalized" |vectors_3D| |vectors|)
    (|lin_indep_cross| FORMULA-DECL NIL |cross_3D| |vectors|)
    (|add_zero_right| FORMULA-DECL NIL |vectors_3D| |vectors|)
    (|scal_0| FORMULA-DECL NIL |vectors_3D| |vectors|)
    (|scal_1| FORMULA-DECL NIL |vectors_3D| |vectors|)
    (|add_zero_left| FORMULA-DECL NIL |vectors_3D| |vectors|)
    (|Nz_vect3| TYPE-EQ-DECL NIL |vectors_3D| |vectors|)
    (|norm_normalize| FORMULA-DECL NIL |vectors_3D| |vectors|)
    (|sin| CONST-DECL "real" |sincos_def| |trig|)
    (* CONST-DECL "Vector" |vectors_3D| |vectors|)
    (|nnreal_le_pi| NONEMPTY-TYPE-EQ-DECL NIL |trig_types| |trig|)
    (|pi| CONST-DECL "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" |pi_def|
     |trig|)
    (|nzpure_quat| CONST-DECL "set[(pure_quat)]" |quaternions_def| NIL)
    (|cos| CONST-DECL "real" |sincos_def| |trig|)
    (|norm| CONST-DECL "nnreal" |vectors_3D| |vectors|)
    (|Vector| TYPE-EQ-DECL NIL |vectors_3D| |vectors|)
    (|linearly_independent?| CONST-DECL "bool" |cross_3D| |vectors|)
    (|Vect3| TYPE-EQ-DECL NIL |vectors_3D_def| |vectors|)
    (|pure_quat| CONST-DECL "set[quat]" |quaternions_def| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|quat| TYPE-EQ-DECL NIL |quaternions_def| NIL)
    (|sq| CONST-DECL "T" |ring| NIL)
    (|cos_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|))
   SHOSTAK))
 (|Quat_Rot_Aux3| 0
  (|Quat_Rot_Aux3-1| |nil| 3907338826
   ("" (SKEEP)
    (("" (ASSERT)
      (("" (REWRITE "Quat_Rot_Aux0")
        (("" (REWRITE "cross_scal_left")
          (("" (EXPAND "n_rot_axis")
            (("" (EXPAND "^")
              (("" (REWRITE "cross_scal_left")
                (("" (REWRITE "cross_cross")
                  (("" (EXPAND "rot_quat")
                    (("" (LEMMA "sin_2a")
                      (("" (INST -1 "number_fields./(1, 2) * r_angle(a, b)")
                        (("" (ASSERT)
                          ((""
                            (CASE-REPLACE
                             "cos(1/2 * r_angle(a, b)) * sin(1/2 * r_angle(a, b)) = sin(1/2 * r_angle(a, b)) * cos(1/2 * r_angle(a, b))")
                            (("1" (REWRITE "conversion_quot")
                              (("1" (REPLACE -1 1)
                                (("1" (HIDE -1)
                                  (("1" (LEMMA "associative_mult")
                                    (("1"
                                      (INST -1 "sin(1/2 * r_angle(a, b))"
                                       "cos(1/2 * r_angle(a, b))"
                                       "(1 / norm(cross(Vector_part(a), Vector_part(b))))")
                                      (("1" (REWRITE* "conversion_quot")
                                        (("1" (REPLACE -1 1)
                                          (("1" (LEMMA "associative_mult")
                                            (("1" (HIDE -2)
                                              (("1"
                                                (INST -1 "2"
                                                 "(sin(1/2 * r_angle(a, b)) * cos(1/2 * r_angle(a, b)))"
                                                 "(number_fields./(1, norm(cross(Vector_part(a), Vector_part(b)))))")
                                                (("1"
                                                  (REWRITE "conversion_quot")
                                                  (("1" (REPLACE -1 1)
                                                    (("1" (HIDE -1)
                                                      (("1" (REPLACE -1 1 RL)
                                                        (("1" (HIDE -1)
                                                          (("1"
                                                            (LEMMA
                                                             "LI_implies_nzvector")
                                                            (("1"
                                                              (INST -1
                                                               "Vector_part(a)"
                                                               "Vector_part(b)")
                                                              (("1" (ASSERT)
                                                                (("1"
                                                                  (REWRITE
                                                                   "norm_cross_charac_")
                                                                  (("1"
                                                                    (EXPAND
                                                                     "r_angle")
                                                                    (("1"
                                                                      (ASSERT)
                                                                      (("1"
                                                                        (CASE-REPLACE
                                                                         "sin(angle_between(Vector_part(a), Vector_part(b))) * ((number_fields./ (1, norm(Vector_part(a)) * norm(Vector_part(b)) * sin(angle_between(Vector_part(a), Vector_part(b)))))) = number_fields./ (1, norm(Vector_part(a)) * norm(Vector_part(b)))")
                                                                        (("1"
                                                                          (HIDE
                                                                           -)
                                                                          (("1"
                                                                            (CASE-REPLACE
                                                                             "norm(Vector_part(b)) = norm(Vector_part(a))")
                                                                            (("1"
                                                                              (REWRITE
                                                                               "sqv_rew")
                                                                              (("1"
                                                                                (LEMMA
                                                                                 "angle_nnreal_le_pi_exists")
                                                                                (("1"
                                                                                  (INST?)
                                                                                  (("1"
                                                                                    (SKEEP)
                                                                                    (("1"
                                                                                      (BETA)
                                                                                      (("1"
                                                                                        (REPLACE
                                                                                         -2
                                                                                         -1)
                                                                                        (("1"
                                                                                          (REPLACE
                                                                                           -1
                                                                                           1
                                                                                           RL)
                                                                                          (("1"
                                                                                            (REWRITE
                                                                                             "scal_sub_right")
                                                                                            (("1"
                                                                                              (ASSERT)
                                                                                              (("1"
                                                                                                (CASE-REPLACE
                                                                                                 "((number_fields./(1, norm(Vector_part(a)) * norm(Vector_part(a)))) * (cos(ab) * norm(Vector_part(a)) * norm(Vector_part(a)))) = cos(ab)")
                                                                                                (("1"
                                                                                                  (LEMMA
                                                                                                   "vectors_3D.sq_norm")
                                                                                                  (("1"
                                                                                                    (INST
                                                                                                     -1
                                                                                                     "Vector_part(a)")
                                                                                                    (("1"
                                                                                                      (EXPAND
                                                                                                       "sq"
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (REPLACES
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (ASSERT)
                                                                                                          (("1"
                                                                                                            (CASE-REPLACE
                                                                                                             "ab = angle_between(Vector_part(a), Vector_part(b))")
                                                                                                            (("1"
                                                                                                              (TYPEPRED
                                                                                                               "ab")
                                                                                                              (("1"
                                                                                                                (HIDE
                                                                                                                 -3
                                                                                                                 -5
                                                                                                                 2)
                                                                                                                (("1"
                                                                                                                  (EXPAND
                                                                                                                   "angle_between")
                                                                                                                  (("1"
                                                                                                                    (CASE-REPLACE
                                                                                                                     "cos(ab) = Vector_part(a) * Vector_part(b) / (norm(Vector_part(a)) * norm(Vector_part(b)))")
                                                                                                                    (("1"
                                                                                                                      (REWRITE
                                                                                                                       "conversion_quot")
                                                                                                                      (("1"
                                                                                                                        (REPLACE
                                                                                                                         -1
                                                                                                                         1
                                                                                                                         RL)
                                                                                                                        (("1"
                                                                                                                          (REWRITE
                                                                                                                           "acos_cos")
                                                                                                                          NIL
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL)
                                                                                                                     ("2"
                                                                                                                      (HIDE-ALL-BUT
                                                                                                                       (-3
                                                                                                                        1))
                                                                                                                      (("2"
                                                                                                                        (REWRITE
                                                                                                                         "conversion_quot")
                                                                                                                        (("2"
                                                                                                                          (ASSERT)
                                                                                                                          (("2"
                                                                                                                            (REWRITE
                                                                                                                             "dot_comm")
                                                                                                                            (("2"
                                                                                                                              (REVEAL
                                                                                                                               -4)
                                                                                                                              (("2"
                                                                                                                                (REPLACES
                                                                                                                                 -1)
                                                                                                                                (("2"
                                                                                                                                  (LEMMA
                                                                                                                                   "both_sides_times1")
                                                                                                                                  (("2"
                                                                                                                                    (INST
                                                                                                                                     -1
                                                                                                                                     "number_fields./(1, (norm(Vector_part(a)) * norm(Vector_part(a))))"
                                                                                                                                     "cos(ab) * (norm(Vector_part(a)) * norm(Vector_part(a)))"
                                                                                                                                     " Vector_part(b) * Vector_part(a)")
                                                                                                                                    (("2"
                                                                                                                                      (ASSERT)
                                                                                                                                      NIL
                                                                                                                                      NIL))
                                                                                                                                    NIL))
                                                                                                                                  NIL))
                                                                                                                                NIL))
                                                                                                                              NIL))
                                                                                                                            NIL))
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL)
                                                                                                                     ("3"
                                                                                                                      (SKEEP)
                                                                                                                      (("3"
                                                                                                                        (EXPAND
                                                                                                                         "restrict")
                                                                                                                        (("3"
                                                                                                                          (HIDE-ALL-BUT
                                                                                                                           -1)
                                                                                                                          (("3"
                                                                                                                            (GRIND)
                                                                                                                            NIL
                                                                                                                            NIL))
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL)
                                                                                                 ("2"
                                                                                                  (HIDE-ALL-BUT
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (REWRITE
                                                                                                     "times_div2")
                                                                                                    NIL
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL)
                                                                             ("2"
                                                                              (HIDE
                                                                               2)
                                                                              (("2"
                                                                                (TYPEPRED
                                                                                 "a"
                                                                                 "b")
                                                                                (("2"
                                                                                  (ASSERT)
                                                                                  NIL
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL)
                                                                         ("2"
                                                                          (HIDE
                                                                           2)
                                                                          (("2"
                                                                            (ASSERT)
                                                                            NIL
                                                                            NIL))
                                                                          NIL)
                                                                         ("3"
                                                                          (HIDE
                                                                           2)
                                                                          (("3"
                                                                            (PROP)
                                                                            (("3"
                                                                              (LEMMA
                                                                               "vectors_3D.norm_eq_0")
                                                                              (("3"
                                                                                (INST-CP
                                                                                 -1
                                                                                 "Vector_part(a)")
                                                                                (("3"
                                                                                  (INST
                                                                                   -1
                                                                                   "Vector_part(b)")
                                                                                  (("3"
                                                                                    (PROP)
                                                                                    (("3"
                                                                                      (HIDE-ALL-BUT
                                                                                       (-1
                                                                                        2
                                                                                        4))
                                                                                      (("3"
                                                                                        (REWRITE
                                                                                         "zero_times3")
                                                                                        (("3"
                                                                                          (PROP)
                                                                                          NIL
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (HIDE -1 2)
                                                  (("2" (SKEEP)
                                                    (("2" (GRIND) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (HIDE -1 2)
                                        (("2" (SKEEP) (("2" (GRIND) NIL NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (HIDE (- 2))
                              (("2" (REWRITE "conversion_quot")
                                (("2" (ASSERT) NIL NIL)) NIL))
                              NIL)
                             ("3" (HIDE (- 2))
                              (("3" (SKEEP) (("3" (GRIND) NIL NIL)) NIL)) NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|cos_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|cross_scal_left| FORMULA-DECL NIL |cross_3D| |vectors|)
    (|sin| CONST-DECL "real" |sincos_def| |trig|)
    (|nzpure_quat| CONST-DECL "set[(pure_quat)]" |quaternions_def| NIL)
    (|cos| CONST-DECL "real" |sincos_def| |trig|)
    (|pi| CONST-DECL "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" |pi_def|
     |trig|)
    (|nnreal_le_pi| NONEMPTY-TYPE-EQ-DECL NIL |trig_types| |trig|)
    (^ CONST-DECL "Normalized" |vectors_3D| |vectors|)
    (|cross_cross| FORMULA-DECL NIL |cross_3D| |vectors|)
    (|sin_2a| FORMULA-DECL NIL |trig_basic| |trig|)
    (|scal_assoc| FORMULA-DECL NIL |vectors_3D| |vectors|)
    (|norm_cross_charac_| FORMULA-DECL NIL |vectors_3D_extra| |vectors|)
    (|zero| CONST-DECL "Vector" |vectors_3D| |vectors|)
    (|Nz_vect3| TYPE-EQ-DECL NIL |vectors_3D| |vectors|)
    (|angle_between_nnreal_le_pi| APPLICATION-JUDGEMENT "nnreal_le_pi"
     |vectors_3D_extra| |vectors|)
    (|norm_eq_0| FORMULA-DECL NIL |vectors_3D| |vectors|)
    (|sqv_rew| FORMULA-DECL NIL |vectors_3D| |vectors|)
    (|left_identity| FORMULA-DECL NIL |monad| NIL)
    (|sq_norm| FORMULA-DECL NIL |vectors_3D| |vectors|)
    (|sq| CONST-DECL "nonneg_real" |sq| |reals|)
    (|scal_1| FORMULA-DECL NIL |vectors_3D| |vectors|)
    (|dot_comm| FORMULA-DECL NIL |vectors_3D| |vectors|)
    (|acos_cos| FORMULA-DECL NIL |trig_inverses| |trig|)
    (* CONST-DECL "real" |vectors_3D| |vectors|)
    (|sqv| CONST-DECL "nnreal" |vectors_3D| |vectors|)
    (* CONST-DECL "Vector" |vectors_3D| |vectors|)
    (|scal_sub_right| FORMULA-DECL NIL |vectors_3D| |vectors|)
    (|angle_nnreal_le_pi_exists| FORMULA-DECL NIL |vectors_3D_extra| |vectors|)
    (|angle_between| CONST-DECL "real" |vectors_3D_cos| |vectors|)
    (|LI_implies_nzvector| FORMULA-DECL NIL |vectors_3D_extra| |vectors|)
    (|nz_T| TYPE-EQ-DECL NIL |ring_nz_closed_def| NIL)
    (|inv| CONST-DECL "{y | x * y = one AND y * x = one}" |group| NIL)
    (|cross| CONST-DECL "Vector" |cross_3D| |vectors|)
    (|sin_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|norm| CONST-DECL "nnreal" |vectors_3D| |vectors|)
    (|Vector| TYPE-EQ-DECL NIL |vectors_3D| |vectors|)
    (|linearly_independent?| CONST-DECL "bool" |cross_3D| |vectors|)
    (|Vect3| TYPE-EQ-DECL NIL |vectors_3D_def| |vectors|)
    (|pure_quat| CONST-DECL "set[quat]" |quaternions_def| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|quat| TYPE-EQ-DECL NIL |quaternions_def| NIL))
   SHOSTAK))
 (|Quaternions_Rotation| 0
  (|Quaternions_Rotation-1| |nil| 3907335344
   ("" (SKEEP)
    (("" (ASSERT)
      (("" (LEMMA "decompose_eq_Real_Vector_part")
        (("" (INST -1 "b" "T_q(rot_quat(a, b))(a)")
          (("1" (ASSERT)
            (("1" (PROP)
              (("1" (HIDE 2)
                (("1" (TYPEPRED "b" "T_q(rot_quat(a, b))(a)")
                  (("1" (EXPAND "pure_quat")
                    (("1" (EXPAND "Real_part") (("1" (ASSERT) NIL NIL)) NIL))
                    NIL)
                   ("2" (EXPAND "remove")
                    (("2" (EXPAND "member")
                      (("2" (EXPAND "fullset") (("2" (PROPAX) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (HIDE 2)
                (("2" (LEMMA "T_q_Real_charac")
                  (("2" (INST -1 "rot_quat(a,b)" "a")
                    (("2"
                      (CASE-REPLACE
                       "(2 * (Vector_part(rot_quat(a, b)) * Vector_part(a))) = 0")
                      (("1" (ASSERT)
                        (("1" (LEMMA "Quat_Rot_Aux2")
                          (("1" (INST -1 "a" "b")
                            (("1" (BETA)
                              (("1" (REPLACE -1 -3)
                                (("1" (LEMMA "Quat_Rot_Aux3")
                                  (("1" (INST -1 "a" "b")
                                    (("1" (BETA)
                                      (("1" (REPLACE -1 -4)
                                        (("1" (ASSERT)
                                          (("1" (REPLACE -4 1)
                                            (("1" (HIDE -)
                                              (("1"
                                                (LEMMA
                                                 "vectors_3D.add_neg_sub")
                                                (("1" (INST?)
                                                  (("1" (REPLACE -1 1 RL)
                                                    (("1" (HIDE -)
                                                      (("1"
                                                        (REWRITE
                                                         "vectors_3D.add_comm_assoc_right")
                                                        NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (HIDE - 2)
                        (("2" (REWRITE "Quat_Rot_Aux1")
                          (("2" (ASSERT) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (EXPAND "remove")
            (("2" (EXPAND "member")
              (("2" (EXPAND "fullset") (("2" (PROPAX) NIL NIL)) NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|fullset| CONST-DECL "set" |sets| NIL)
    (|remove| CONST-DECL "set" |sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|quat| TYPE-EQ-DECL NIL |quaternions_def| NIL)
    (|pure_quat| CONST-DECL "set[quat]" |quaternions_def| NIL)
    (|Vector| TYPE-EQ-DECL NIL |vectors_3D| |vectors|)
    (|norm| CONST-DECL "nnreal" |vectors_3D| |vectors|)
    (|Vect3| TYPE-EQ-DECL NIL |vectors_3D_def| |vectors|)
    (|linearly_independent?| CONST-DECL "bool" |cross_3D| |vectors|)
    (|T_q| CONST-DECL "(pure_quat)" |quaternions| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (* CONST-DECL "real" |vectors_3D| |vectors|)
    (|cos_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|nnreal_le_pi| NONEMPTY-TYPE-EQ-DECL NIL |trig_types| |trig|)
    (|pi| CONST-DECL "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" |pi_def|
     |trig|)
    (|nzpure_quat| CONST-DECL "set[(pure_quat)]" |quaternions_def| NIL)
    (|cos| CONST-DECL "real" |sincos_def| |trig|)
    (* CONST-DECL "Vector" |vectors_3D| |vectors|)
    (|add_comm_assoc_right| FORMULA-DECL NIL |vectors_3D| |vectors|)
    (|neg_add_right| FORMULA-DECL NIL |vectors_3D| |vectors|)
    (|add_neg_sub| FORMULA-DECL NIL |vectors_3D| |vectors|)
    (|add_zero_right| FORMULA-DECL NIL |vectors_3D| |vectors|)
    (|scal_0| FORMULA-DECL NIL |vectors_3D| |vectors|))
   SHOSTAK))
 (|Quaternions_Rotation_Deform_TCC1| 0
  (|Quaternions_Rotation_Deform_TCC1-1| |nil| 3907332229
   ("" (SKEEP)
    (("" (REWRITE "norm_eq_0")
      (("" (LEMMA "LI_implies_nzvector")
        (("" (INST -1 "Vector_part(a)" "Vector_part(b)")
          (("" (ASSERT) NIL NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|norm_eq_0| FORMULA-DECL NIL |vectors_3D| |vectors|)
    (|Vector| TYPE-EQ-DECL NIL |vectors_3D| |vectors|)
    (|quat| TYPE-EQ-DECL NIL |quaternions_def| NIL)
    (|Vect3| TYPE-EQ-DECL NIL |vectors_3D_def| |vectors|)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|pure_quat| CONST-DECL "set[quat]" |quaternions_def| NIL)
    (|linearly_independent?| CONST-DECL "bool" |cross_3D| |vectors|)
    (|LI_implies_nzvector| FORMULA-DECL NIL |vectors_3D_extra| |vectors|))
   NIL
   (|Quaternions_Rotation_Deform| SUBTYPE
    "vectors_3D.norm(quaternions_Hamilton.Vector_part(quaternions_Hamilton.a))"
    "nznum" (175 59 175 79))))
 (|Quaternions_Rotation_Deform_TCC2| 0
  (|Quaternions_Rotation_Deform_TCC2-1| |nil| 3907332229
   ("" (SKEEP)
    (("" (LEMMA "pos_div_ge") (("" (INST?) (("" (ASSERT) NIL NIL)) NIL)) NIL))
    NIL)
   ((|linearly_independent?| CONST-DECL "bool" |cross_3D| |vectors|)
    (|pure_quat| CONST-DECL "set[quat]" |quaternions_def| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|Vect3| TYPE-EQ-DECL NIL |vectors_3D_def| |vectors|)
    (|quat| TYPE-EQ-DECL NIL |quaternions_def| NIL)
    (|norm| CONST-DECL "nnreal" |vectors_3D| |vectors|)
    (|Vector| TYPE-EQ-DECL NIL |vectors_3D| |vectors|))
   NIL
   (|Quaternions_Rotation_Deform| SUBTYPE
    "(number_fields./(vectors_3D.norm(quaternions_Hamilton.Vector_part(quaternions_Hamilton.b)), vectors_3D.norm(quaternions_Hamilton.Vector_part(quaternions_Hamilton.a))))"
    "nonneg_real" (175 22 175 80))))
 (|Quaternions_Rotation_Deform_TCC3| 0
  (|Quaternions_Rotation_Deform_TCC3-1| |nil| 3907332571
   ("" (SKEEP)
    (("" (REWRITE "norm_eq_0")
      (("" (LEMMA "LI_implies_nzvector")
        (("" (INST -1 "Vector_part(a)" "Vector_part(b)")
          (("" (ASSERT) NIL NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|norm_eq_0| FORMULA-DECL NIL |vectors_3D| |vectors|)
    (|Vector| TYPE-EQ-DECL NIL |vectors_3D| |vectors|)
    (|quat| TYPE-EQ-DECL NIL |quaternions_def| NIL)
    (|Vect3| TYPE-EQ-DECL NIL |vectors_3D_def| |vectors|)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|pure_quat| CONST-DECL "set[quat]" |quaternions_def| NIL)
    (|linearly_independent?| CONST-DECL "bool" |cross_3D| |vectors|)
    (|LI_implies_nzvector| FORMULA-DECL NIL |vectors_3D_extra| |vectors|))
   NIL
   (|Quaternions_Rotation_Deform| SUBTYPE
    "vectors_3D.norm(quaternions_Hamilton.Vector_part(quaternions_Hamilton.b))"
    "nznum" (175 132 175 152))))
 (|Quaternions_Rotation_Deform_TCC4| 0
  (|Quaternions_Rotation_Deform_TCC4-1| |nil| 3907332571
   ("" (SKEEP)
    (("" (TYPEPRED "b")
      (("" (PROP)
        (("1" (HIDE -2)
          (("1" (EXPAND "pure_quat")
            (("1" (EXPAND "*")
              (("1" (REPLACES -1) (("1" (ASSERT) NIL NIL)) NIL)) NIL))
            NIL))
          NIL)
         ("2" (EXPAND "linearly_independent?")
          (("2" (EXPAND "linearly_dependent?")
            (("2" (SKEEP)
              (("2" (REWRITE "Vector_part_scalar")
                (("2" (REWRITE "scal_assoc")
                  (("2"
                    (INST 1 "k1"
                     "k2 * (number_fields./(norm(Vector_part(a)), norm(Vector_part(b))))")
                    (("2" (PROP)
                      (("2" (HIDE (-1 -3 -4))
                        (("2" (LEMMA "zero_times4")
                          (("2" (INST?)
                            (("2" (REPLACES -2)
                              (("2" (ASSERT)
                                (("2" (LEMMA "div_eq_zero")
                                  (("2"
                                    (INST -1 "norm(Vector_part(b))"
                                     "norm(Vector_part(a))")
                                    (("2" (PROP)
                                      (("1" (HIDE (-1 -3))
                                        (("1" (REWRITE "norm_eq_0")
                                          (("1" (LEMMA "LI_implies_nzvector")
                                            (("1"
                                              (INST -1 "Vector_part(a)"
                                               "Vector_part(b)")
                                              (("1" (ASSERT) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (ASSERT) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|linearly_independent?| CONST-DECL "bool" |cross_3D| |vectors|)
    (|Vect3| TYPE-EQ-DECL NIL |vectors_3D_def| |vectors|)
    (|pure_quat| CONST-DECL "set[quat]" |quaternions_def| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|quat| TYPE-EQ-DECL NIL |quaternions_def| NIL)
    (|scal_assoc| FORMULA-DECL NIL |vectors_3D| |vectors|)
    (|div_eq_zero| FORMULA-DECL NIL |division_ring| NIL)
    (|norm_eq_0| FORMULA-DECL NIL |vectors_3D| |vectors|)
    (|LI_implies_nzvector| FORMULA-DECL NIL |vectors_3D_extra| |vectors|)
    (|nz_T| TYPE-EQ-DECL NIL |ring_nz_closed_def| NIL)
    (|norm| CONST-DECL "nnreal" |vectors_3D| |vectors|)
    (|Vector| TYPE-EQ-DECL NIL |vectors_3D| |vectors|)
    (|linearly_dependent?| CONST-DECL "bool" |cross_3D| |vectors|)
    (* CONST-DECL "quat" |quaternions_def| NIL))
   NIL
   (|Quaternions_Rotation_Deform| SUBTYPE
    "quaternions_def[real, restrict[[numfield, numfield], [real, real], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [real, real], numfield].restrict(number_fields.*), 0, 1, -1, -1].*((number_fields./(vectors_3D.norm(quaternions_Hamilton.Vector_part(quaternions_Hamilton.a)), vectors_3D.norm(quaternions_Hamilton.Vector_part(quaternions_Hamilton.b)))), quaternions_Hamilton.b)"
    "{b: (quaternions_def[real, restrict[[numfield, numfield], [real, real], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [real, real], numfield].restrict(number_fields.*), 0, 1, -1, -1].pure_quat) | cross_3D.linearly_independent?(quaternions_Hamilton.Vector_part(quaternions_Hamilton.a), quaternions_Hamilton.Vector_part(b))}"
    (175 95 175 157))))
 (|Quaternions_Rotation_Deform| 0
  (|Quaternions_Rotation_Deform-1| |nil| 3907332573
   ("" (SKEEP)
    (("" (BETA)
      (("" (EXPAND "T_q")
        (("" (REWRITE "conj_product_quat_scalar")
          (("1" (LEMMA "one_sc_times")
            (("1" (LEMMA "one_sc_times")
              (("1" (INST -1 "a")
                (("1" (REPLACE -1 1 RL)
                  (("1" (REWRITE* "sc_quat")
                    (("1" (REPLACE -1 1)
                      (("1" (HIDE -1)
                        (("1" (LEMMA "Quaternions_Rotation")
                          (("1"
                            (INST -1 "a" "(number_fields./
                                          (norm(Vector_part(a)),
                                           norm(Vector_part(b))))
                                      * b")
                            (("1" (BETA)
                              (("1" (EXPAND "T_q")
                                (("1" (REPLACE -1 1 RL)
                                  (("1" (HIDE -)
                                    (("1" (REWRITE "sqrt_def")
                                      (("1" (REWRITE "sc_assoc")
                                        (("1"
                                          (CASE-REPLACE
                                           "((number_fields./(norm(Vector_part(b)), norm(Vector_part(a)))) *
                         (number_fields./(norm(Vector_part(a)), norm(Vector_part(b))))) = 1"
                                           :HIDE? T)
                                          (("1" (LEMMA "one_sc_times")
                                            (("1" (INST -1 "b")
                                              (("1" (ASSERT) NIL NIL)) NIL))
                                            NIL)
                                           ("2" (HIDE 2)
                                            (("2" (ASSERT) NIL NIL)) NIL))
                                          NIL))
                                        NIL)
                                       ("2" (HIDE 2)
                                        (("2" (REWRITE "pos_div_ge") NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (HIDE (- 2))
                              (("2" (LEMMA "LI_implies_nzvector")
                                (("2"
                                  (INST -1 "Vector_part(a)" "Vector_part(b)")
                                  (("2" (ASSERT)
                                    (("2" (PROP)
                                      (("1" (REWRITE "Vector_part_scalar")
                                        (("1" (LEMMA "vectors_3D.norm_scal")
                                          (("1" (INST?)
                                            (("1" (REPLACE -1 1)
                                              (("1" (HIDE -)
                                                (("1" (EXPAND "abs")
                                                  (("1" (LIFT-IF)
                                                    (("1" (PROP)
                                                      (("1" (HIDE 1)
                                                        (("1"
                                                          (CASE "number_fields./
                                                                (norm(Vector_part(b)), norm(Vector_part(a))) > 0")
                                                          (("1"
                                                            (REWRITE
                                                             "neg_div_lt")
                                                            NIL NIL)
                                                           ("2" (HIDE -)
                                                            (("2"
                                                              (REWRITE
                                                               "pos_div_gt")
                                                              (("2"
                                                                (LEMMA
                                                                 "vectors_3D.norm_eq_0")
                                                                (("2"
                                                                  (INST-CP -1
                                                                   "Vector_part(b)")
                                                                  (("2"
                                                                    (INST -1
                                                                     "Vector_part(a)")
                                                                    (("2"
                                                                      (ASSERT)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL)
                                                           ("3" (ASSERT) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL)
                                                       ("2" (HIDE 1)
                                                        (("2"
                                                          (LEMMA "div_div1")
                                                          (("2"
                                                            (INST -1
                                                             "norm(Vector_part(b))"
                                                             "norm(Vector_part(a))"
                                                             "1")
                                                            (("1"
                                                              (REWRITE
                                                               "conversion_quot")
                                                              (("1" (ASSERT)
                                                                NIL NIL))
                                                              NIL)
                                                             ("2" (HIDE 2)
                                                              (("2"
                                                                (LEMMA
                                                                 "vectors_3D.norm_eq_0")
                                                                (("2" (INST?)
                                                                  (("2"
                                                                    (ASSERT)
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2"
                                        (NAME-REPLACE "scal" "number_fields./
                                                                          (1,
                                                                           (number_fields./
                                                                                (norm(Vector_part(b)),
                                                                                 norm(Vector_part(a)))))")
                                        (("1" (TYPEPRED "b")
                                          (("1" (HIDE -1)
                                            (("1"
                                              (EXPAND "linearly_independent?")
                                              (("1"
                                                (EXPAND "linearly_dependent?")
                                                (("1" (SKEEP)
                                                  (("1"
                                                    (REWRITE
                                                     "Vector_part_scalar")
                                                    (("1"
                                                      (INST 1 "k1" "k2 * scal")
                                                      (("1" (ASSERT)
                                                        (("1" (HIDE -2)
                                                          (("1" (SPLIT)
                                                            (("1" (ASSERT) NIL
                                                              NIL)
                                                             ("2" (ASSERT) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (HIDE 2)
                                          (("2" (PROP)
                                            (("2" (LEMMA "div_eq_zero")
                                              (("2"
                                                (INST -1 "norm(Vector_part(a))"
                                                 "norm(Vector_part(b))")
                                                (("2" (PROP)
                                                  (("1" (HIDE (-1 -3))
                                                    (("1" (REWRITE "norm_eq_0")
                                                      NIL NIL))
                                                    NIL)
                                                   ("2" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("3" (HIDE 2)
                                          (("3" (PROP)
                                            (("3" (REWRITE "norm_eq_0") NIL
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (HIDE 2) (("2" (REWRITE "pos_div_ge") NIL NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|T_q| CONST-DECL "(pure_quat)" |quaternions| NIL)
    (|one_sc_times| FORMULA-DECL NIL |quaternions| NIL)
    (|sc_quat| FORMULA-DECL NIL |quaternions| NIL)
    (* CONST-DECL "[quat, quat -> quat]" |quaternions_def| NIL)
    (|conjugate| CONST-DECL "quat" |quaternions_def| NIL)
    (|sc_assoc| FORMULA-DECL NIL |quaternions_def| NIL)
    (|sqrt_def| FORMULA-DECL NIL |sqrt| |reals|)
    (|LI_implies_nzvector| FORMULA-DECL NIL |vectors_3D_extra| |vectors|)
    (|linearly_dependent?| CONST-DECL "bool" |cross_3D| |vectors|)
    (|scal_assoc| FORMULA-DECL NIL |vectors_3D| |vectors|)
    (|div_eq_zero| FORMULA-DECL NIL |division_ring| NIL)
    (|nz_T| TYPE-EQ-DECL NIL |ring_nz_closed_def| NIL)
    (|left_identity| FORMULA-DECL NIL |monad| NIL)
    (|div_div1| FORMULA-DECL NIL |division_ring| NIL)
    (|norm_eq_0| FORMULA-DECL NIL |vectors_3D| |vectors|)
    (|norm_scal| FORMULA-DECL NIL |vectors_3D| |vectors|)
    (* CONST-DECL "quat" |quaternions_def| NIL)
    (|linearly_independent?| CONST-DECL "bool" |cross_3D| |vectors|)
    (|pure_quat| CONST-DECL "set[quat]" |quaternions_def| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|Vect3| TYPE-EQ-DECL NIL |vectors_3D_def| |vectors|)
    (|quat| TYPE-EQ-DECL NIL |quaternions_def| NIL)
    (|norm| CONST-DECL "nnreal" |vectors_3D| |vectors|)
    (|Vector| TYPE-EQ-DECL NIL |vectors_3D| |vectors|)
    (|sqrt| CONST-DECL "{nnz: nnreal | nnz * nnz = nnx}" |sqrt| |reals|)
    (|conj_product_quat_scalar| FORMULA-DECL NIL |quaternions| NIL))
   SHOSTAK)))

