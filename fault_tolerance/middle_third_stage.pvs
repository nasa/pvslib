middle_third_stage[
  S:    posnat,
  D:    posnat,
  error: real
]: THEORY  

  BEGIN

  IMPORTING 
    inexact_reduce_stage[S, D, error],
    middle_third_overlap[S, real, <=]

  d1, d2: VAR below(D)
  epsilon, delta: VAR nonneg_real
  cf,cf1,cf2: VAR consensus_function
  X: VAR posnat

  sent: VAR sent_vec_stage
  rcvd: VAR rcvd_matrix_stage
  check: VAR check_stage
  
  src_set: VAR non_empty_finite_set[below(S)]
  dst_set: VAR non_empty_finite_set[below(D)]

  byz_overlap_imprecision?(rcvd, check, epsilon): bool = 
    EXISTS (src_set: finite_set[below(S)]):
      byzantine_intersection_majority?(rcvd, check)(src_set) AND 
      single_imprecision?(rcvd, check, epsilon)(src_set)

  byzantine_overlap: LEMMA
      byz_overlap_imprecision?(rcvd, check, epsilon)
    IMPLIES
      overlap_imprecision?(rcvd, check, byz, epsilon)

  middle_third_convergence: LEMMA
      quorum_imprecision?(sent, rcvd, check, byz, epsilon) AND
      byz_overlap_imprecision?(rcvd, check, epsilon) AND
      convergent?(cf, max_length(rcvd, check, byz), X) AND
      enabled_within?(rcvd, check)(src_set) AND
      v_max(sent, src_set) - v_min(sent, src_set) <= delta
    IMPLIES
      v_max(reduce_choice(byz, cf)(rcvd, check), dst_set) -
        v_min(reduce_choice(byz, cf)(rcvd, check), dst_set) 
          <= delta * ((X - 1) / X) + epsilon

%%%% Additions by J Tanner Slagel and Paul Miner 5/23

  i: VAR nat
  k: VAR posnat
  s1, s2: VAR ne_seqs
  eps: VAR nnreal
  tau: VAR tau_type

  convergent?(cf1, cf2, i, k): bool =
       FORALL s1, s2, delta, eps:
       s1`length <= i AND
       s2`length <= i AND
       max(s1) - min(s2) <= delta + eps AND
       min(s1) - max(s2) <= eps
          IMPLIES cf1(s1) - cf2(s2) <= eps + (delta *( k -1)) / k

 reduce_convergence2: THEOREM
      quorum_imprecision?(sent, rcvd, check, tau, epsilon) AND
      diameter?(sent, delta)(src_set) AND
      enabled_within?(rcvd, check)(src_set) AND
      overlap_imprecision?(rcvd, check, tau, epsilon) AND
      convergent?(cf1,cf2, max_length(rcvd, check, tau), k)
    IMPLIES
      reduce_choice(tau, cf1)(rcvd, check)(d1) 
        - reduce_choice(tau, cf2)(rcvd, check)(d2) 
          <= delta * ((k - 1) / k) + epsilon

  convergence2: LEMMA
      quorum_imprecision?(sent, rcvd, check, tau, epsilon) AND
      overlap_imprecision?(rcvd, check, tau, epsilon) AND
      convergent?(cf1,cf2, max_length(rcvd, check, tau), k) AND
      enabled_within?(rcvd, check)(src_set) AND
      v_max(sent, src_set) - v_min(sent, src_set) <= delta
    IMPLIES
      v_max(reduce_choice(tau, cf1)(rcvd, check), dst_set) -
        v_min(reduce_choice(tau, cf2)(rcvd, check), dst_set) 
          <= delta * ((k - 1) / k) + epsilon

  middle_third_convergence_2: LEMMA
      quorum_imprecision?(sent, rcvd, check, byz, epsilon) AND
      byz_overlap_imprecision?(rcvd, check, epsilon) AND
      convergent?(cf1, cf2, max_length(rcvd, check, byz), X) AND
      enabled_within?(rcvd, check)(src_set) AND
      v_max(sent, src_set) - v_min(sent, src_set) <= delta
    IMPLIES
      v_max(reduce_choice(byz, cf1)(rcvd, check), dst_set) -
        v_min(reduce_choice(byz, cf2)(rcvd, check), dst_set) 
          <= delta * ((X - 1) / X) + epsilon

  mean_convergence_midpoint: THEOREM
      2 <= k AND
      s1`length <= k AND
      s2`length <= k AND
      max(s1) - min(s2) <= delta + eps AND
      min(s1) - max(s2) <= eps
    IMPLIES
      mean(s1) - midpoint(s2) <= delta * (k - 1) / k + eps

  mean_convergence_midpoint_0: THEOREM
      s1`length <= k AND
      s2`length <= k AND
      max(s1) - min(s2) <= delta + eps AND
      min(s1) - max(s2) <= eps
    IMPLIES
      mean(s1) - midpoint(s2) <= delta * (k - 1) / k + eps

  midpoint_convergence_mean: THEOREM
      2 <= k AND
      s1`length <= k AND
      s2`length <= k AND
      max(s1) - min(s2) <= delta + eps AND
      min(s1) - max(s2) <= eps
    IMPLIES
      midpoint(s1) - mean(s2) <= delta * (k - 1) / k + eps

  convergent_mean_midpoint    : LEMMA k >= 2 IMPLIES convergent?(mean, midpoint, k, k + i)
  convergent_midpoint_mean    : LEMMA k >= 2 IMPLIES convergent?(midpoint, mean, k, k + i)

  middle_third_convergence_mean_midpoint: LEMMA
      X >= 2 AND
      X = max_length(rcvd, check, byz) AND
      quorum_imprecision?(sent, rcvd, check, byz, epsilon) AND
      byz_overlap_imprecision?(rcvd, check, epsilon) AND
      enabled_within?(rcvd, check)(src_set) AND
      v_max(sent, src_set) - v_min(sent, src_set) <= delta
    IMPLIES
      v_max(reduce_choice(byz, mean)(rcvd, check), dst_set) -
        v_min(reduce_choice(byz, midpoint)(rcvd, check), dst_set) 
          <= delta * ((X - 1) / X) + epsilon

  middle_third_convergence_midpoint_mean: LEMMA
      X >= 2 AND
      X = max_length(rcvd, check, byz) AND
      quorum_imprecision?(sent, rcvd, check, byz, epsilon) AND
      byz_overlap_imprecision?(rcvd, check, epsilon) AND
      enabled_within?(rcvd, check)(src_set) AND
      v_max(sent, src_set) - v_min(sent, src_set) <= delta
    IMPLIES
      v_max(reduce_choice(byz, midpoint)(rcvd, check), dst_set) -
        v_min(reduce_choice(byz, mean)(rcvd, check), dst_set) 
          <= delta * ((X - 1) / X) + epsilon

%%%% End of additions by J Tanner Slagel and Paul Miner 5/23

  mean_convergence: COROLLARY
      X = max_length(rcvd, check, byz) AND
      quorum_imprecision?(sent, rcvd, check, byz, epsilon) AND
      byz_overlap_imprecision?(rcvd, check, epsilon) AND
      enabled_within?(rcvd, check)(src_set) AND
      v_max(sent, src_set) - v_min(sent, src_set) <= delta
    IMPLIES
      v_max(reduce_choice(byz, mean)(rcvd, check), dst_set) -
        v_min(reduce_choice(byz, mean)(rcvd, check), dst_set) 
          <= delta * ((X - 1) / X) + epsilon

  midpoint_convergence: COROLLARY
      quorum_imprecision?(sent, rcvd, check, byz, epsilon) AND
      byz_overlap_imprecision?(rcvd, check, epsilon) AND
      enabled_within?(rcvd, check)(src_set) AND
      v_max(sent, src_set) - v_min(sent, src_set) <= delta
    IMPLIES
      v_max(reduce_choice(byz, midpoint)(rcvd, check), dst_set) -
        v_min(reduce_choice(byz, midpoint)(rcvd, check), dst_set) 
          <= delta / 2 + epsilon

  END middle_third_stage
