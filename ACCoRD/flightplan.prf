(|flightplan| (|j_TCC1| 0 (|j_TCC1-1| |nil| 3482759352 ("" (SUBTYPE-TCC) NIL NIL) ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) NIL (|j| SUBTYPE "(number_fields.-)(flightplan.N, 1)" "nat"))) (|FlightPlan_TCC1| 0 (|FlightPlan_TCC1-1| |nil| 3482759352 ("" (SUBTYPE-TCC) NIL NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|FlightPlan| SUBTYPE "(number_fields.-)(flightplan.i, 1)" "below[N]"))) (|FlightPlan_TCC2| 0 (|FlightPlan_TCC2-2| |nil| 3482759784 ("" (INST + "lambda (jj: below[N]): (# time:= jj,position:= zero #)") NIL NIL) ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |int_types| NIL) (N FORMAL-CONST-DECL "above[1]" |flightplan| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|Vect3| TYPE-EQ-DECL NIL |vectors_3D_def| |vectors|) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|Vector| TYPE-EQ-DECL NIL |vectors_3D| |vectors|) (|zero| CONST-DECL "Vector" |vectors_3D| |vectors|) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|FlightPlan| EXISTENCE "" "{fp: [nat_types[flightplan.N].below -> [# position: vectors_3D_def.Vect3, time: reals.real #]] | FORALL (i: nat_types[flightplan.N].below): booleans.IMPLIES(reals.>=((number_fields.-)(i, 1), 0), reals.>(fp(i)`time, fp((number_fields.-)(i, 1))`time))}")) (|FlightPlan_TCC2-1| |nil| 3482759352 ("" (EXISTENCE-TCC) NIL NIL) NIL NIL (|FlightPlan| EXISTENCE "" "{fp: [nat_types[flightplan.N].below -> [# position: vectors_3D_def.Vect3, time: reals.real #]] | FORALL (i: nat_types[flightplan.N].below): booleans.IMPLIES(reals.>=((number_fields.-)(i, 1), 0), reals.>(fp(i)`time, fp((number_fields.-)(i, 1))`time))}"))) (|start_time_TCC1| 0 (|start_time_TCC1-1| |nil| 3482759352 ("" (SUBTYPE-TCC) NIL NIL) ((|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) NIL (|start_time| SUBTYPE "0" "below[N]"))) (|end_time_TCC1| 0 (|end_time_TCC1-1| |nil| 3482759352 ("" (SUBTYPE-TCC) NIL NIL) ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) NIL (|end_time| SUBTYPE "(number_fields.-)(flightplan.N, 1)" "below[N]"))) (|flight_plan_ascending_time| 0 (|flight_plan_ascending_time-1| |nil| 3482759592 ("" (SKEEP) (("" (CASE "FORALL (jj: nat): (k + jj+1) < N IMPLIES (flp(k)`time < flp(k+jj+1)`time)") (("1" (INST - "(i-k)-1") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (INDUCT "jj") (("1" (ASSERT) (("1" (TYPEPRED "flp") (("1" (INST - "1+k") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) (("2" (TYPEPRED "flp") (("2" (INST - "2+j!1+k") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (< CONST-DECL "bool" |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (> CONST-DECL "bool" |reals| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |int_types| NIL) (N FORMAL-CONST-DECL "above[1]" |flightplan| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|Vect3| TYPE-EQ-DECL NIL |vectors_3D_def| |vectors|) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|FlightPlan| NONEMPTY-TYPE-EQ-DECL NIL |flightplan| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|k| SKOLEM-CONST-DECL "below[N]" |flightplan| NIL) (|i| SKOLEM-CONST-DECL "below[N]" |flightplan| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL)) NIL)) (|flight_plan_unique_times| 0 (|flight_plan_unique_times-2| "" 3884849436 ("" (SKEEP) (("" (ASSERT) (("" (PROP) (("1" (ASSERT) (("1" (LEMMA "flight_plan_ascending_time[N]") (("1" (INST - "flp" "i" "k") (("1" (ASSERT) (("1" (LEMMA "flight_plan_ascending_time[N]") (("1" (INST - "flp" "k" "i") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|flight_plan_unique_times-1| |nil| 3483287614 ("" (SKEEP) (("" (ASSERT) (("" (PROP) (("1" (ASSERT) (("1" (LEMMA FLIGHT_PLAN_ASCENDING_TIME[N]) (("1" (INST - FLP I K) (("1" (ASSERT) (("1" (LEMMA FLIGHT_PLAN_ASCENDING_TIME[N]) (("1" (INST - FLP K I) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |int_types| NIL) (N FORMAL-CONST-DECL "above[1]" |flightplan| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|Vect3| TYPE-EQ-DECL NIL |vectors_3D_def| |vectors|) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|FlightPlan| NONEMPTY-TYPE-EQ-DECL NIL |flightplan| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|flight_plan_ascending_time| FORMULA-DECL NIL |flightplan| NIL)) SHOSTAK)) (|FlightTimes_TCC1| 0 (|FlightTimes_TCC1-2| |nil| 3482759820 ("" (SKEEP) (("" (INST + "(start_time(flp) + end_time(flp))/2") (("" (EXPAND "start_time") (("" (EXPAND "end_time") (("" (LEMMA "flight_plan_ascending_time") (("" (INST - "flp" "N-1" "0") (("1" (GROUND) NIL NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|end_time| CONST-DECL "real" |flightplan| NIL) (|start_time| CONST-DECL "real" |flightplan| NIL) (|FlightPlan| NONEMPTY-TYPE-EQ-DECL NIL |flightplan| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|Vect3| TYPE-EQ-DECL NIL |vectors_3D_def| |vectors|) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (N FORMAL-CONST-DECL "above[1]" |flightplan| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |int_types| NIL) (> CONST-DECL "bool" |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (<= CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|flp| SKOLEM-CONST-DECL "FlightPlan" |flightplan| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|flight_plan_ascending_time| FORMULA-DECL NIL |flightplan| NIL)) NIL (|FlightTimes| EXISTENCE "" "{a: reals.real | booleans.AND(reals.<=(flightplan.start_time(flightplan.flp), a), reals.<=(a, flightplan.end_time(flightplan.flp)))}")) (|FlightTimes_TCC1-1| |nil| 3482759352 ("" (EXISTENCE-TCC) NIL NIL) NIL NIL (|FlightTimes| EXISTENCE "" "{a: reals.real | booleans.AND(reals.<=(flightplan.start_time(flightplan.flp), a), reals.<=(a, flightplan.end_time(flightplan.flp)))}"))) (|velocity_TCC1| 0 (|velocity_TCC1-1| |nil| 3482759352 ("" (SUBTYPE-TCC) NIL NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|velocity| SUBTYPE "(number_fields.+)(flightplan.j, 1)" "below[N]"))) (|velocity_TCC2| 0 (|velocity_TCC2-1| |nil| 3482759352 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|velocity| SUBTYPE "flightplan.j" "below[N]"))) (|velocity_TCC3| 0 (|velocity_TCC3-1| |nil| 3482759352 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |int_types| NIL) (N FORMAL-CONST-DECL "above[1]" |flightplan| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|Vect3| TYPE-EQ-DECL NIL |vectors_3D_def| |vectors|) (|FlightPlan| NONEMPTY-TYPE-EQ-DECL NIL |flightplan| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL)) NIL (|velocity| SUBTYPE "((number_fields.-)(flightplan.flp((number_fields.+)(flightplan.j, 1))`time, flightplan.flp(flightplan.j)`time))" "nznum"))) (|velocity_def| 0 (|velocity_def-1| |nil| 3482759633 ("" (SKEEP) (("" (EXPAND "velocity") (("" (ASSERT) (("" (EXPAND "+ ") (("" (ASSERT) (("" (EXPAND "-") (("" (ASSERT) (("" (APPLY-EXTENSIONALITY :HIDE? T) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|velocity| CONST-DECL "Vect3" |flightplan| NIL) (+ CONST-DECL "Vector" |vectors_3D| |vectors|) (- CONST-DECL "Vector" |vectors_3D| |vectors|) (|Vect3| TYPE-EQ-DECL NIL |vectors_3D_def| |vectors|) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|FlightPlan| NONEMPTY-TYPE-EQ-DECL NIL |flightplan| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (N FORMAL-CONST-DECL "above[1]" |flightplan| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |int_types| NIL) (> CONST-DECL "bool" |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|scal_assoc| FORMULA-DECL NIL |vectors_3D| |vectors|) (|scal_1| FORMULA-DECL NIL |vectors_3D| |vectors|) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL)) (|FlightPlan_nz_TCC1| 0 (|FlightPlan_nz_TCC1-1| |nil| 3483101697 ("" (INST + "lambda (jj: below[N]): (# time:= jj,position:= (# x:=jj, y:=jj, z:=jj #) #)") (("" (SKEEP) (("" (EXPAND "velocity") (("" (EXPAND "vect2") (("" (EXPAND "zero") (("" (EXPAND "-") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((- CONST-DECL "Vector" |vectors_3D| |vectors|) (|scal_1| FORMULA-DECL NIL |vectors_3D| |vectors|) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |int_types| NIL) (N FORMAL-CONST-DECL "above[1]" |flightplan| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|Vect3| TYPE-EQ-DECL NIL |vectors_3D_def| |vectors|) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|FlightPlan| NONEMPTY-TYPE-EQ-DECL NIL |flightplan| NIL) (|Vector| TYPE-EQ-DECL NIL |vectors_2D| |vectors|) (/= CONST-DECL "boolean" |notequal| NIL) (|Vect2| TYPE-EQ-DECL NIL |vectors_2D_def| |vectors|) (|vect2| CONST-DECL "Vect2" |vect_3D_2D| |vectors|) (|velocity| CONST-DECL "Vect3" |flightplan| NIL) (|zero| CONST-DECL "Vector" |vectors_2D| |vectors|) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|FlightPlan_nz| EXISTENCE "" "{flp: flightplan.FlightPlan | FORALL (i: nat_types[(number_fields.-)(flightplan.N, 1)].below): vect_3D_2D.vect2(flightplan.velocity(flp)(i)) /= vectors_2D.zero}"))) (|segment_max_TCC1| 0 (|segment_max_TCC1-2| "" 3884849458 ("" (SKOLEM 1 "x") (("" (ASSERT) (("" (SKOLEM 1 "y") (("" (TYPEPRED "finite_sets@finite_sets_minmax
            [naturalnumbers.nat,
             restrict[[real, real], [nat, nat], boolean].restrict
                 (reals.<=)].max
            (x)") (("" (INST - "y") (("" (FLATTEN) (("" (ASSERT) (("" (EXPAND "restrict") (("" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK (|segment_max| SUBTYPE "finite_sets@finite_sets_minmax[naturalnumbers.nat, restrict[[real, real], [nat, nat], booleans.boolean].restrict(reals.<=)].max" "[SS: non_empty_finite_set[nat] -> {a: naturalnumbers.nat | booleans.AND(SS(a), FORALL (x: naturalnumbers.nat): booleans.IMPLIES(SS(x), reals.<=(x, a)))}]")) (|segment_max_TCC1-1| |nil| 3482759352 ("" (SKOLEM 1 X) (("" (ASSERT) (("" (SKOLEM 1 Y) (("" (TYPEPRED "finite_sets@finite_sets_minmax
            [naturalnumbers.nat,
             restrict[[real, real], [nat, nat], boolean].restrict
                 (reals.<=)].max
            (x)") (("" (INST - Y) (("" (FLATTEN) (("" (ASSERT) (("" (EXPAND "restrict") (("" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|total_order_restrict| APPLICATION-JUDGEMENT "(total_order?[S])" |restrict_order_props| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|empty?| CONST-DECL "bool" |sets| NIL) (|non_empty_finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (<= CONST-DECL "bool" |reals| NIL) (|max| CONST-DECL "{a: T | SS(a) AND (FORALL (x: T): SS(x) IMPLIES x <= a)}" |finite_sets_minmax| |finite_sets|) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL)) NIL (|segment_max| SUBTYPE "finite_sets@finite_sets_minmax[naturalnumbers.nat, restrict[[real, real], [nat, nat], booleans.boolean].restrict(reals.<=)].max" "[SS: non_empty_finite_set[nat] -> {a: naturalnumbers.nat | booleans.AND(SS(a), FORALL (x: naturalnumbers.nat): booleans.IMPLIES(SS(x), reals.<=(x, a)))}]"))) (|segment_TCC1| 0 (|segment_TCC1-2| |nil| 3482759932 ("" (SKOSIMP*) (("" (SPLIT) (("1" (EXPAND "is_finite") (("1" (INST + "N" "(lambda (ii: ({j: below[N] | tt!1 >= flp!1(j)`time})): ii)") (("1" (EXPAND "injective?") (("1" (SKOSIMP*) NIL NIL)) NIL) ("2" (SKOSIMP*) (("2" (EXPAND "extend") (("2" (LIFT-IF) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "empty?") (("2" (INST - "0") (("2" (EXPAND "member") (("2" (EXPAND "extend") (("2" (GROUND) (("2" (TYPEPRED "tt!1") (("2" (EXPAND "start_time") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|extend| CONST-DECL "R" |extend| NIL) (FALSE CONST-DECL "bool" |booleans| NIL) (|tt!1| SKOLEM-CONST-DECL "FlightTimes(flp!1)" |flightplan| NIL) (|FlightTimes| NONEMPTY-TYPE-EQ-DECL NIL |flightplan| NIL) (|end_time| CONST-DECL "real" |flightplan| NIL) (|flp!1| SKOLEM-CONST-DECL "FlightPlan" |flightplan| NIL) (|start_time| CONST-DECL "real" |flightplan| NIL) (|FlightPlan| NONEMPTY-TYPE-EQ-DECL NIL |flightplan| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|Vect3| TYPE-EQ-DECL NIL |vectors_3D_def| |vectors|) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (<= CONST-DECL "bool" |reals| NIL) (N FORMAL-CONST-DECL "above[1]" |flightplan| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |int_types| NIL) (> CONST-DECL "bool" |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|injective?| CONST-DECL "bool" |functions| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|empty?| CONST-DECL "bool" |sets| NIL)) NIL (|segment| SUBTYPE "extend[nat, below[N], bool, booleans.FALSE].extend({j: nat_types[flightplan.N].below | reals.>=(flightplan.tt, flightplan.flp(j)`time)})" "non_empty_finite_set[nat]")) (|segment_TCC1-1| |nil| 3482759352 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|segment| SUBTYPE "extend[nat, below[N], bool, booleans.FALSE].extend({j: nat_types[flightplan.N].below | reals.>=(flightplan.tt, flightplan.flp(j)`time)})" "non_empty_finite_set[nat]"))) (|segment_TCC2| 0 (|segment_TCC2-2| |nil| 3482759961 ("" (SKEEP) (("" (NAME "iii" "max[nat, restrict[[real, real], [nat, nat], boolean](<=)]
                        (extend[nat, below[N], bool, FALSE]
                             ({j: below[N] | tt >= flp(j)`time}))") (("" (TYPEPRED "iii") (("" (EXPAND "extend") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|total_order_restrict| APPLICATION-JUDGEMENT "(total_order?[S])" |restrict_order_props| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|non_empty_finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|empty?| CONST-DECL "bool" |sets| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (<= CONST-DECL "bool" |reals| NIL) (|max| CONST-DECL "{a: T | SS(a) AND (FORALL (x: T): SS(x) IMPLIES x <= a)}" |finite_sets_minmax| |finite_sets|) (< CONST-DECL "bool" |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |int_types| NIL) (N FORMAL-CONST-DECL "above[1]" |flightplan| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (FALSE CONST-DECL "bool" |booleans| NIL) (|extend| CONST-DECL "R" |extend| NIL) (|Vect3| TYPE-EQ-DECL NIL |vectors_3D_def| |vectors|) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|FlightPlan| NONEMPTY-TYPE-EQ-DECL NIL |flightplan| NIL) (|start_time| CONST-DECL "real" |flightplan| NIL) (|end_time| CONST-DECL "real" |flightplan| NIL) (|FlightTimes| NONEMPTY-TYPE-EQ-DECL NIL |flightplan| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) NIL (|segment| SUBTYPE "flightplan.segment_max(extend[nat, below[N], bool, booleans.FALSE].extend({j: nat_types[flightplan.N].below | reals.>=(flightplan.tt, flightplan.flp(j)`time)}))" "below[N]")) (|segment_TCC2-1| |nil| 3482759352 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|segment| SUBTYPE "flightplan.segment_max(extend[nat, below[N], bool, booleans.FALSE].extend({j: nat_types[flightplan.N].below | reals.>=(flightplan.tt, flightplan.flp(j)`time)}))" "below[N]"))) (|segment_def_TCC1| 0 (|segment_def_TCC1-1| |nil| 3482759352 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |int_types| NIL) (N FORMAL-CONST-DECL "above[1]" |flightplan| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|Vect3| TYPE-EQ-DECL NIL |vectors_3D_def| |vectors|) (|FlightPlan| NONEMPTY-TYPE-EQ-DECL NIL |flightplan| NIL) (<= CONST-DECL "bool" |reals| NIL) (|start_time| CONST-DECL "real" |flightplan| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|end_time| CONST-DECL "real" |flightplan| NIL) (|FlightTimes| NONEMPTY-TYPE-EQ-DECL NIL |flightplan| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|segment| CONST-DECL "below[N]" |flightplan| NIL) (|segment_max| CONST-DECL "[SS: non_empty_finite_set[nat] ->
   {a: nat | SS(a) AND (FORALL (x: nat): SS(x) IMPLIES x <= a)}]" |flightplan| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|segment_def| SUBTYPE "(number_fields.+)(flightplan.segment(flightplan.flp)(flightplan.tt), 1)" "below[N]"))) (|segment_def| 0 (|segment_def-1| |nil| 3482759657 ("" (SKEEP) (("" (SPLIT) (("1" (EXPAND "segment") (("1" (TYPEPRED "segment_max(extend[nat, below[N], bool, FALSE]
                              ({j: below[N] | tt >= flp(j)`time}))") (("1" (EXPAND "extend") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "segment") (("2" (TYPEPRED "segment_max(extend[nat, below[N], bool, FALSE]
                              ({j: below[N] | tt >= flp(j)`time}))") (("2" (INST - "1+segment_max(extend[nat, below[N], bool, FALSE]
                              ({j: below[N] | tt >= flp(j)`time}))") (("2" (ASSERT) (("2" (EXPAND "extend") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |int_types| NIL) (N FORMAL-CONST-DECL "above[1]" |flightplan| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (FALSE CONST-DECL "bool" |booleans| NIL) (|extend| CONST-DECL "R" |extend| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|Vect3| TYPE-EQ-DECL NIL |vectors_3D_def| |vectors|) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|FlightPlan| NONEMPTY-TYPE-EQ-DECL NIL |flightplan| NIL) (|start_time| CONST-DECL "real" |flightplan| NIL) (|end_time| CONST-DECL "real" |flightplan| NIL) (|FlightTimes| NONEMPTY-TYPE-EQ-DECL NIL |flightplan| NIL) (|non_empty_finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|empty?| CONST-DECL "bool" |sets| NIL) (|segment_max| CONST-DECL "[SS: non_empty_finite_set[nat] ->
   {a: nat | SS(a) AND (FORALL (x: nat): SS(x) IMPLIES x <= a)}]" |flightplan| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|segment| CONST-DECL "below[N]" |flightplan| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) NIL)) (|segment_index| 0 (|segment_index-2| "" 3884849517 ("" (SKEEP) (("" (NAME "seg" "segment(flp)(tt)") (("" (REPLACE -1) (("" (LEMMA "segment_def") (("" (INST - "flp" "tt") (("" (ASSERT) (("" (FLATTEN) (("" (REPLACE -3) (("" (CASE "seg=N-1") (("1" (ASSERT) (("1" (HIDE -3) (("1" (FLATTEN) (("1" (TYPEPRED "j") (("1" (LEMMA "flight_plan_ascending_time") (("1" (INST - "flp" "seg" "j+1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (PROP) (("1" (ASSERT) (("1" (CASE "seg < j") (("1" (LEMMA "flight_plan_ascending_time") (("1" (INST - "flp" "j" "seg+1") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (CASE "seg > j") (("1" (LEMMA "flight_plan_ascending_time") (("1" (INST - "flp" "seg" "j+1") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|segment_index-1| |nil| 3482759686 ("" (SKEEP) (("" (NAME SEG "segment(flp)(tt)") (("" (REPLACE -1) (("" (LEMMA SEGMENT_DEF) (("" (INST - FLP TT) (("" (ASSERT) (("" (FLATTEN) (("" (REPLACE -3) (("" (CASE "seg=N-1") (("1" (ASSERT) (("1" (HIDE -3) (("1" (FLATTEN) (("1" (TYPEPRED J) (("1" (LEMMA FLIGHT_PLAN_ASCENDING_TIME) (("1" (INST - FLP SEG "j+1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (PROP) (("1" (ASSERT) (("1" (CASE "seg < j") (("1" (LEMMA FLIGHT_PLAN_ASCENDING_TIME) (("1" (INST - FLP J "seg+1") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (CASE "seg > j") (("1" (LEMMA FLIGHT_PLAN_ASCENDING_TIME) (("1" (INST - FLP SEG "j+1") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|FlightPlan| NONEMPTY-TYPE-EQ-DECL NIL |flightplan| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |int_types| NIL) (N FORMAL-CONST-DECL "above[1]" |flightplan| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|Vect3| TYPE-EQ-DECL NIL |vectors_3D_def| |vectors|) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|start_time| CONST-DECL "real" |flightplan| NIL) (|end_time| CONST-DECL "real" |flightplan| NIL) (|FlightTimes| NONEMPTY-TYPE-EQ-DECL NIL |flightplan| NIL) (|segment| CONST-DECL "below[N]" |flightplan| NIL) (|segment_def| FORMULA-DECL NIL |flightplan| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|flight_plan_ascending_time| FORMULA-DECL NIL |flightplan| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL)) (|segment_max| 0 (|segment_max-2| "" 3884849557 ("" (SKEEP) (("" (TYPEPRED "tt") (("" (EXPAND "start_time") (("" (EXPAND "end_time") (("" (LEMMA "segment_def") (("" (INST?) (("" (ASSERT) (("" (FLATTEN) (("" (LEMMA "segment_index") (("" (INST?) (("1" (FLATTEN) (("1" (ASSERT) (("1" (GROUND) (("1" (TYPEPRED "flp") (("1" (INST - "N-1") (("1" (ASSERT) (("1" (CASE "segment(flp)(tt) < N-1") (("1" (ASSERT) (("1" (NAME "seg" "segment(flp)(tt)") (("1" (REPLACE -1) (("1" (CASE "seg = N-2") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) (("2" (LEMMA "flight_plan_ascending_time[N]") (("2" (INST - "flp" "N-1" "seg+1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|segment_max-1| |nil| 3483095937 ("" (SKEEP) (("" (TYPEPRED TT) (("" (EXPAND "start_time") (("" (EXPAND "end_time") (("" (LEMMA SEGMENT_DEF) (("" (INST?) (("" (ASSERT) (("" (FLATTEN) (("" (LEMMA SEGMENT_INDEX) (("" (INST?) (("1" (FLATTEN) (("1" (ASSERT) (("1" (GROUND) (("1" (TYPEPRED FLP) (("1" (INST - "N-1") (("1" (ASSERT) (("1" (CASE "segment(flp)(tt) < N-1") (("1" (ASSERT) (("1" (NAME SEG "segment(flp)(tt)") (("1" (REPLACE -1) (("1" (CASE "seg = N-2") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) (("2" (LEMMA "flight_plan_ascending_time[N]") (("2" (INST - FLP "N-1" "seg+1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|FlightTimes| NONEMPTY-TYPE-EQ-DECL NIL |flightplan| NIL) (|end_time| CONST-DECL "real" |flightplan| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|start_time| CONST-DECL "real" |flightplan| NIL) (|FlightPlan| NONEMPTY-TYPE-EQ-DECL NIL |flightplan| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|Vect3| TYPE-EQ-DECL NIL |vectors_3D_def| |vectors|) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (N FORMAL-CONST-DECL "above[1]" |flightplan| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |int_types| NIL) (> CONST-DECL "bool" |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|tt| SKOLEM-CONST-DECL "FlightTimes(flp)" |flightplan| NIL) (|flp| SKOLEM-CONST-DECL "FlightPlan" |flightplan| NIL) (|segment| CONST-DECL "below[N]" |flightplan| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|flight_plan_ascending_time| FORMULA-DECL NIL |flightplan| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|segment_index| FORMULA-DECL NIL |flightplan| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|segment_def| FORMULA-DECL NIL |flightplan| NIL)) SHOSTAK)) (|segment_ident_TCC1| 0 (|segment_ident_TCC1-2| "" 3884849591 ("" (SKEEP) (("" (EXPAND "start_time") (("" (EXPAND "end_time") (("" (TYPEPRED "tt") (("" (EXPAND "end_time") (("" (EXPAND "start_time") (("" (LEMMA "segment_def") (("" (INST?) (("" (ASSERT) (("" (FLATTEN) (("" (ASSERT) (("" (LEMMA "segment_max") (("" (INST?) (("" (ASSERT) (("" (CASE "segment(flp)(tt) = 0") (("1" (ASSERT) NIL NIL) ("2" (LEMMA "flight_plan_ascending_time[N]") (("2" (INST - "flp" "segment(flp)(tt)" 0) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK (|segment_ident| SUBTYPE "flightplan.flp(flightplan.segment(flightplan.flp)(flightplan.tt))`time" "FlightTimes(flightplan.flp)")) (|segment_ident_TCC1-1| |nil| 3483197485 ("" (SKEEP) (("" (EXPAND "start_time") (("" (EXPAND "end_time") (("" (TYPEPRED TT) (("" (EXPAND "end_time") (("" (EXPAND "start_time") (("" (LEMMA SEGMENT_DEF) (("" (INST?) (("" (ASSERT) (("" (FLATTEN) (("" (ASSERT) (("" (LEMMA SEGMENT_MAX) (("" (INST?) (("" (ASSERT) (("" (CASE "segment(flp)(tt) = 0") (("1" (ASSERT) NIL NIL) ("2" (LEMMA FLIGHT_PLAN_ASCENDING_TIME[N]) (("2" (INST - FLP "segment(flp)(tt)" 0) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|start_time| CONST-DECL "real" |flightplan| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |int_types| NIL) (N FORMAL-CONST-DECL "above[1]" |flightplan| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|Vect3| TYPE-EQ-DECL NIL |vectors_3D_def| |vectors|) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|FlightPlan| NONEMPTY-TYPE-EQ-DECL NIL |flightplan| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|FlightTimes| NONEMPTY-TYPE-EQ-DECL NIL |flightplan| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|segment_max| FORMULA-DECL NIL |flightplan| NIL) (|flight_plan_ascending_time| FORMULA-DECL NIL |flightplan| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|segment| CONST-DECL "below[N]" |flightplan| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|segment_def| FORMULA-DECL NIL |flightplan| NIL) (|end_time| CONST-DECL "real" |flightplan| NIL)) NIL (|segment_ident| SUBTYPE "flightplan.flp(flightplan.segment(flightplan.flp)(flightplan.tt))`time" "FlightTimes(flightplan.flp)"))) (|segment_ident| 0 (|segment_ident-2| "" 3884849618 ("" (SKEEP) (("" (LEMMA "segment_index") (("" (INST?) (("1" (ASSERT) (("1" (TYPEPRED "flp") (("1" (INST - "1 + segment(flp)(tt)") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "segment_max") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|segment_ident-1| |nil| 3483197486 ("" (SKEEP) (("" (LEMMA SEGMENT_INDEX) (("" (INST?) (("1" (ASSERT) (("1" (TYPEPRED FLP) (("1" (INST - "1 + segment(flp)(tt)") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (LEMMA SEGMENT_MAX) (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|segment_index| FORMULA-DECL NIL |flightplan| NIL) (|segment_max| FORMULA-DECL NIL |flightplan| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (< CONST-DECL "bool" |reals| NIL) (|FlightPlan| NONEMPTY-TYPE-EQ-DECL NIL |flightplan| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (> CONST-DECL "bool" |reals| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |int_types| NIL) (N FORMAL-CONST-DECL "above[1]" |flightplan| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|Vect3| TYPE-EQ-DECL NIL |vectors_3D_def| |vectors|) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|start_time| CONST-DECL "real" |flightplan| NIL) (|end_time| CONST-DECL "real" |flightplan| NIL) (|FlightTimes| NONEMPTY-TYPE-EQ-DECL NIL |flightplan| NIL) (|segment| CONST-DECL "below[N]" |flightplan| NIL) (|flp| SKOLEM-CONST-DECL "FlightPlan" |flightplan| NIL) (|tt| SKOLEM-CONST-DECL "FlightTimes(flp)" |flightplan| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK)) (|location_at_TCC1| 0 (|location_at_TCC1-1| |nil| 3482759352 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |int_types| NIL) (N FORMAL-CONST-DECL "above[1]" |flightplan| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|Vect3| TYPE-EQ-DECL NIL |vectors_3D_def| |vectors|) (|FlightPlan| NONEMPTY-TYPE-EQ-DECL NIL |flightplan| NIL) (<= CONST-DECL "bool" |reals| NIL) (|start_time| CONST-DECL "real" |flightplan| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|end_time| CONST-DECL "real" |flightplan| NIL) (|FlightTimes| NONEMPTY-TYPE-EQ-DECL NIL |flightplan| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|segment| CONST-DECL "below[N]" |flightplan| NIL) (|segment_max| CONST-DECL "[SS: non_empty_finite_set[nat] ->
   {a: nat | SS(a) AND (FORALL (x: nat): SS(x) IMPLIES x <= a)}]" |flightplan| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) NIL (|location_at| SUBTYPE "flightplan.seg" "below[N - 1]"))) (|location_at_check_TCC1| 0 (|location_at_check_TCC1-2| |nil| 3482759998 ("" (SKEEP) (("" (LEMMA "flight_plan_ascending_time") (("" (INST-CP - "flp" "k" "0") (("" (INST - "flp" "N-1" "k") (("" (EXPAND "start_time") (("" (EXPAND "end_time") (("" (TYPEPRED "k") (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|flight_plan_ascending_time| FORMULA-DECL NIL |flightplan| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|end_time| CONST-DECL "real" |flightplan| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|start_time| CONST-DECL "real" |flightplan| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|FlightPlan| NONEMPTY-TYPE-EQ-DECL NIL |flightplan| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|Vect3| TYPE-EQ-DECL NIL |vectors_3D_def| |vectors|) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (N FORMAL-CONST-DECL "above[1]" |flightplan| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |int_types| NIL) (> CONST-DECL "bool" |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) NIL (|location_at_check| SUBTYPE "flightplan.flp(flightplan.k)`time" "FlightTimes(flightplan.flp)")) (|location_at_check_TCC1-1| |nil| 3482759352 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|location_at_check| SUBTYPE "flightplan.flp(flightplan.k)`time" "FlightTimes(flightplan.flp)"))) (|location_at_check| 0 (|location_at_check-1| |nil| 3482759710 ("" (SKEEP) (("" (EXPAND "location_at") (("" (LIFT-IF) (("" (GROUND) (("1" (CASE "k = N-1") (("1" (ASSERT) NIL NIL) ("2" (HIDE 2) (("2" (NAME "segg" "segment(flp)(flp(k)`time)") (("2" (REPLACE -1) (("2" (COPY -1) (("2" (EXPAND "segment" -2) (("2" (TYPEPRED "segment_max(extend[nat, below[N], bool, FALSE]
                            ({j: below[N] | flp(k)`time >= flp(j)`time}))") (("2" (EXPAND "segment") (("2" (REPLACE -4) (("2" (EXPAND "extend") (("2" (ASSERT) (("2" (LEMMA "flight_plan_ascending_time") (("2" (INST - "flp" "N-1" "k") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (NAME "segg" "segment(flp)(flp(k)`time)") (("2" (REPLACE -1) (("2" (COPY -1) (("2" (EXPAND "segment" -2) (("2" (TYPEPRED "segment_max(extend[nat, below[N], bool, FALSE]
                          ({j: below[N] | flp(k)`time >= flp(j)`time}))") (("2" (EXPAND "segment") (("2" (REPLACE -4) (("2" (EXPAND "extend") (("2" (ASSERT) (("2" (CASE "segg = k") (("1" (REPLACE -1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE 3) (("2" (INST - "k") (("2" (ASSERT) (("2" (LEMMA "flight_plan_ascending_time") (("2" (INST - "flp" "segg" "k") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|location_at| CONST-DECL "Vect3" |flightplan| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|flight_plan_ascending_time| FORMULA-DECL NIL |flightplan| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (FALSE CONST-DECL "bool" |booleans| NIL) (|extend| CONST-DECL "R" |extend| NIL) (|non_empty_finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|empty?| CONST-DECL "bool" |sets| NIL) (|segment_max| CONST-DECL "[SS: non_empty_finite_set[nat] ->
   {a: nat | SS(a) AND (FORALL (x: nat): SS(x) IMPLIES x <= a)}]" |flightplan| NIL) (|FlightPlan| NONEMPTY-TYPE-EQ-DECL NIL |flightplan| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|Vect3| TYPE-EQ-DECL NIL |vectors_3D_def| |vectors|) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|start_time| CONST-DECL "real" |flightplan| NIL) (|end_time| CONST-DECL "real" |flightplan| NIL) (|FlightTimes| NONEMPTY-TYPE-EQ-DECL NIL |flightplan| NIL) (|segment| CONST-DECL "below[N]" |flightplan| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (N FORMAL-CONST-DECL "above[1]" |flightplan| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |int_types| NIL) (> CONST-DECL "bool" |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|add_zero_right| FORMULA-DECL NIL |vectors_3D| |vectors|) (|scal_0| FORMULA-DECL NIL |vectors_3D| |vectors|) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL)) NIL)))
