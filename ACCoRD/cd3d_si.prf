(|cd3d_si| (|j_TCC1| 0 (|j_TCC1-1| |nil| 3472912840 ("" (SUBTYPE-TCC) NIL NIL) ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) NIL (|j| SUBTYPE "(number_fields.-)(cd3d_si.N, 1)" "nat"))) (|FlightPlanRelevant_TCC1| 0 (|FlightPlanRelevant_TCC1-1| |nil| 3473066751 ("" (SUBTYPE-TCC) NIL NIL) ((|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) NIL (|FlightPlanRelevant| SUBTYPE "0" "below[N]"))) (|FlightPlanRelevant_TCC2| 0 (|FlightPlanRelevant_TCC2-1| |nil| 3473066751 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |int_types| NIL) (N FORMAL-CONST-DECL "above[1]" |cd3d_si| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|Vect3| TYPE-EQ-DECL NIL |vectors_3D_def| |vectors|) (|FlightPlan| NONEMPTY-TYPE-EQ-DECL NIL |flightplan| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|FlightPlanRelevant| SUBTYPE "(number_fields.-)(cd3d_si.N, 1)" "below[N]"))) (|FlightPlanRelevant_TCC3| 0 (|FlightPlanRelevant_TCC3-2| "" 3790109035 ("" (SKEEP) (("" (ASSERT) NIL NIL)) NIL) ((|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL)) SHOSTAK (|FlightPlanRelevant| SUBTYPE "(number_fields.-)(cd3d_si.i, 1)" "below[N]")) (|FlightPlanRelevant_TCC3-1| |nil| 3473066751 ("" (SKEEP) (("" (INST + "lambda (jj: below[N]): (# time:=(to+B) + (T-B)/2 + jj,position:=zero #)") (("" (SPLIT) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) NIL NIL (|FlightPlanRelevant| SUBTYPE "(number_fields.-)(cd3d_si.i, 1)" "below[N]"))) (|FlightPlanRelevant_TCC4| 0 (|FlightPlanRelevant_TCC4-1| |nil| 3482764106 ("" (SKEEP) (("" (ASSERT) (("" (INST + "lambda (jj: below[N]): (# time:=(to+B) + (T-B)/2 + jj,position:=zero #)") (("" (ASSERT) (("" (SPLIT) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|zero| CONST-DECL "Vector" |vectors_3D| |vectors|) (|Vector| TYPE-EQ-DECL NIL |vectors_3D| |vectors|) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (T FORMAL-CONST-DECL "{AB: posreal | AB > B}" |cd3d_si| NIL) (B FORMAL-CONST-DECL "nnreal" |cd3d_si| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|FlightPlan| NONEMPTY-TYPE-EQ-DECL NIL |flightplan| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|Vect3| TYPE-EQ-DECL NIL |vectors_3D_def| |vectors|) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (N FORMAL-CONST-DECL "above[1]" |cd3d_si| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |int_types| NIL) (> CONST-DECL "bool" |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|to| SKOLEM-CONST-DECL "real" |cd3d_si| NIL)) NIL (|FlightPlanRelevant| EXISTENCE "" "{flp: flightplan[cd3d_si.N].FlightPlan | booleans.AND(reals.<(flp(0)`time, (number_fields.+)(cd3d_si.to, cd3d_si.T)), reals.<((number_fields.+)(cd3d_si.to, cd3d_si.B), flp((number_fields.-)(cd3d_si.N, 1))`time))}"))) (|seg_lh_top_TCC1| 0 (|seg_lh_top_TCC1-1| |nil| 3482764106 ("" (SUBTYPE-TCC) NIL NIL) ((NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|seg_lh_top| SUBTYPE "(number_fields.+)(cd3d_si.j, 1)" "below[N]"))) (|seg_lh_top_TCC2| 0 (|seg_lh_top_TCC2-1| |nil| 3482764106 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|seg_lh_top| SUBTYPE "cd3d_si.j" "below[N]"))) (|seg_lh_bottom_TCC1| 0 (|seg_lh_bottom_TCC1-1| |nil| 3477825885 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |int_types| NIL) (N FORMAL-CONST-DECL "above[1]" |cd3d_si| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|Vect3| TYPE-EQ-DECL NIL |vectors_3D_def| |vectors|) (|FlightPlan| NONEMPTY-TYPE-EQ-DECL NIL |flightplan| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|seg_lh_bottom| SUBTYPE "(number_fields.-)(real_defs.max(cd3d_si.flp(cd3d_si.j)`time, (number_fields.+)(cd3d_si.to, cd3d_si.B)), cd3d_si.flp(cd3d_si.j)`time)" "nnreal"))) (|seg_lh_top_positive| 0 (|seg_lh_top_positive-1| |nil| 3477826332 ("" (SKEEP) (("" (TYPEPRED "flpl") (("" (INST - "j+1") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |int_types| NIL) (N FORMAL-CONST-DECL "above[1]" |cd3d_si| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|Vect3| TYPE-EQ-DECL NIL |vectors_3D_def| |vectors|) (|FlightPlan| NONEMPTY-TYPE-EQ-DECL NIL |flightplan| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (B FORMAL-CONST-DECL "nnreal" |cd3d_si| NIL) (T FORMAL-CONST-DECL "{AB: posreal | AB > B}" |cd3d_si| NIL) (|FlightPlanRelevant| NONEMPTY-TYPE-EQ-DECL NIL |cd3d_si| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK)) (|nontrivial_lookahead_TCC1| 0 (|nontrivial_lookahead_TCC1-1| |nil| 3473002468 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (> CONST-DECL "bool" |reals| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |int_types| NIL) (N FORMAL-CONST-DECL "above[1]" |cd3d_si| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|Vect3| TYPE-EQ-DECL NIL |vectors_3D_def| |vectors|) (|FlightPlan| NONEMPTY-TYPE-EQ-DECL NIL |flightplan| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (B FORMAL-CONST-DECL "nnreal" |cd3d_si| NIL) (T FORMAL-CONST-DECL "{AB: posreal | AB > B}" |cd3d_si| NIL) (|FlightPlanRelevant| NONEMPTY-TYPE-EQ-DECL NIL |cd3d_si| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|seg_lh_top| CONST-DECL "real" |cd3d_si| NIL) (|seg_lh_bottom| CONST-DECL "nnreal" |cd3d_si| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL)) NIL (|nontrivial_lookahead| SUBTYPE "(number_fields.-)(cd3d_si.k, 1)" "below[N - 1]"))) (|nontrivial_lookahead| 0 (|nontrivial_lookahead-1| |nil| 3473002469 ("" (SKEEP) (("" (TYPEPRED "flpl") (("" (EXPAND "seg_lh_top") (("" (EXPAND "seg_lh_bottom") (("" (CASE "k = N-1") (("1" (REPLACE -1) (("1" (HIDE 1) (("1" (ASSERT) (("1" (EXPAND "min") (("1" (EXPAND "max") (("1" (LIFT-IF) (("1" (GROUND) (("1" (INST - "N-1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "k = 0") (("1" (REPLACE -1) (("1" (HIDE 3) (("1" (ASSERT) (("1" (EXPAND "max") (("1" (EXPAND "min") (("1" (LIFT-IF) (("1" (GROUND) (("1" (INST - "1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "max" 3) (("2" (EXPAND "min" 4) (("2" (CASE "flpl(k)`time = to+T") (("1" (INST - "k") (("1" (EXPAND "max") (("1" (LIFT-IF) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (INST - "k+1") (("2" (EXPAND "min") (("2" (LIFT-IF) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |int_types| NIL) (N FORMAL-CONST-DECL "above[1]" |cd3d_si| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|Vect3| TYPE-EQ-DECL NIL |vectors_3D_def| |vectors|) (|FlightPlan| NONEMPTY-TYPE-EQ-DECL NIL |flightplan| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (B FORMAL-CONST-DECL "nnreal" |cd3d_si| NIL) (T FORMAL-CONST-DECL "{AB: posreal | AB > B}" |cd3d_si| NIL) (|FlightPlanRelevant| NONEMPTY-TYPE-EQ-DECL NIL |cd3d_si| NIL) (|seg_lh_bottom| CONST-DECL "nnreal" |cd3d_si| NIL) (|odd_minus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|seg_lh_top| CONST-DECL "real" |cd3d_si| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK)) (|conflict_3D_rew_TCC1| 0 (|conflict_3D_rew_TCC1-1| |nil| 3473074224 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |int_types| NIL) (N FORMAL-CONST-DECL "above[1]" |cd3d_si| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|Vect3| TYPE-EQ-DECL NIL |vectors_3D_def| |vectors|) (|FlightPlan| NONEMPTY-TYPE-EQ-DECL NIL |flightplan| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (B FORMAL-CONST-DECL "nnreal" |cd3d_si| NIL) (T FORMAL-CONST-DECL "{AB: posreal | AB > B}" |cd3d_si| NIL) (|FlightPlanRelevant| NONEMPTY-TYPE-EQ-DECL NIL |cd3d_si| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|seg_lh_bottom| CONST-DECL "nnreal" |cd3d_si| NIL) (|seg_lh_top| CONST-DECL "real" |cd3d_si| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL)) NIL (|conflict_3D_rew| SUBTYPE "cd3d_si.seg_lh_top(cd3d_si.flpl, cd3d_si.to)(cd3d_si.j)" "{AB: real_types.posreal | reals.>(AB, cd3d_si.seg_lh_bottom(cd3d_si.flpl, cd3d_si.to)(cd3d_si.j))}"))) (|conflict_3D_rew| 0 (|conflict_3D_rew-5| |nil| 3475844668 ("" (SKEEP) (("" (GROUND) (("1" (EXPAND "conflict_3D?") (("1" (SKOSIMP*) (("1" (TYPEPRED "tt!1") (("1" (EXPAND "end_time") (("1" (EXPAND "start_time") (("1" (CASE "EXISTS (kk: below[N]): tt!1 = flpl(kk)`time") (("1" (SKOSIMP*) (("1" (LEMMA "nontrivial_lookahead") (("1" (INST - "kk!1" "to" "flpl") (("1" (ASSERT) (("1" (SPLIT -1) (("1" (FLATTEN) (("1" (INST + "kk!1") (("1" (ASSERT) (("1" (INST + "seg_lh_bottom(flpl, to)(kk!1)") (("1" (LEMMA "location_at_check") (("1" (INST - "flpl" "kk!1") (("1" (REPLACE -4 :DIR RL) (("1" (REPLACE -1) (("1" (CASE "seg_lh_bottom(flpl,to)(kk!1) = 0") (("1" (REPLACE -1) (("1" (ASSERT) (("1" (REWRITE "vz_distr_sub") (("1" (REWRITE "vz_distr_add") (("1" (REWRITE "vz_scal") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "seg_lh_bottom") (("2" (EXPAND "max") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (INST + "kk!1-1") (("1" (ASSERT) (("1" (INST + "seg_lh_top(flpl, to)(kk!1 - 1)") (("1" (LEMMA "location_at_check") (("1" (INST - "flpl" "kk!1") (("1" (REPLACE -4 :DIR RL) (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (NAME "cv1" "(so + (flpl(kk!1 - 1)`time - to) * vo) -
                                                  flpl(kk!1 - 1)`position
                                            +
                                            seg_lh_top(flpl, to)(kk!1 - 1) *
                                             (vo - velocity(flpl)(kk!1 - 1))") (("1" (NAME "cv2" "(so + (tt!1 - to) * vo) - flpl(kk!1)`position") (("1" (CASE "cv1 = cv2") (("1" (CASE "vect2(cv1) = vect2(cv2) AND cv1`z = cv2`z") (("1" (FLATTEN) (("1" (REPLACE -4 :DIR RL) (("1" (REPLACE -5 :DIR RL) (("1" (REWRITE "vect2_sub") (("1" (REWRITE "vect2_add") (("1" (REWRITE "vect2_sub") (("1" (REWRITE "vect2_scal") (("1" (REWRITE "vect2_add") (("1" (REWRITE "vect2_sub") (("1" (REWRITE "vect2_scal") (("1" (REWRITE "vect2_add") (("1" (REWRITE "vect2_scal") (("1" (ASSERT) (("1" (REWRITE "vz_distr_sub") (("1" (REWRITE "vz_distr_add") (("1" (REWRITE "vz_distr_sub") (("1" (REWRITE "vz_scal") (("1" (REWRITE "vz_distr_add") (("1" (REWRITE "vz_distr_sub") (("1" (REWRITE "vz_scal") (("1" (REWRITE "vz_distr_add") (("1" (REWRITE "vz_scal") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (REPLACE -1 :DIR RL) (("2" (REPLACE -2 :DIR RL) (("2" (HIDE 2) (("2" (LEMMA "velocity_def") (("2" (INST - "flpl" "kk!1-1") (("2" (ASSERT) (("2" (EXPAND "seg_lh_top") (("2" (EXPAND "min") (("2" (HIDE-ALL-BUT (-1 1)) (("2" (GRIND :EXCLUDE "velocity") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (NAME "jj" "segment(flpl)(tt!1)") (("2" (LABEL "jjname" -1) (("2" (INST 2 "jj") (("1" (LEMMA "segment_def") (("1" (INST - "flpl" "tt!1") (("1" (FLATTEN) (("1" (CASE "jj < N-1") (("1" (ASSERT) (("1" (CASE "flpl(jj)`time < tt!1") (("1" (CASE "seg_lh_bottom(flpl,to)(jj) < seg_lh_top(flpl,to)(jj)") (("1" (ASSERT) (("1" (NAME "newt" "tt!1-flpl(jj)`time") (("1" (INST 2 "newt") (("1" (NAME "cv1" "(so + (flpl(jj)`time - to) * vo) - flpl(jj)`position +
                                                      newt * (vo - velocity(flpl)(jj))") (("1" (NAME "cv2" "(so + (tt!1 - to) * vo) - location_at(flpl)(tt!1)") (("1" (CASE "cv1 = cv2") (("1" (CASE "vect2(cv1) = vect2(cv2) AND cv1`z = cv2`z") (("1" (FLATTEN) (("1" (REPLACE -4 :DIR RL) (("1" (REPLACE -5 :DIR RL) (("1" (REWRITE "vect2_sub") (("1" (REWRITE "vect2_add") (("1" (REWRITE "vect2_sub") (("1" (REWRITE "vect2_scal") (("1" (REWRITE "vect2_add") (("1" (REWRITE "vect2_sub") (("1" (REWRITE "vect2_scal") (("1" (REWRITE "vect2_add") (("1" (REWRITE "vect2_scal") (("1" (ASSERT) (("1" (REWRITE "vz_distr_sub") (("1" (REWRITE "vz_distr_add") (("1" (REWRITE "vz_distr_sub") (("1" (REWRITE "vz_scal") (("1" (REWRITE "vz_distr_add") (("1" (REWRITE "vz_distr_sub") (("1" (REWRITE "vz_scal") (("1" (REWRITE "vz_distr_add") (("1" (REWRITE "vz_scal") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (HIDE 3) (("2" (REPLACE -1 :DIR RL) (("2" (REPLACE -2 :DIR RL) (("2" (EXPAND "location_at") (("2" (REPLACE "jjname") (("2" (HIDE "jjname") (("2" (HIDE -13) (("2" (HIDE -13) (("2" (HIDE 2) (("2" (HIDE -1) (("2" (HIDE -1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "seg_lh_bottom") (("2" (EXPAND "max") (("2" (LIFT-IF) (("2" (ASSERT) (("2" (EXPAND "seg_lh_top") (("2" (EXPAND "min") (("2" (LIFT-IF) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (EXPAND "seg_lh_bottom") (("2" (EXPAND "seg_lh_top") (("2" (EXPAND "max") (("2" (EXPAND "min") (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (ASSERT) (("2" (GROUND) (("2" (LIFT-IF) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST 2 "jj") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (CASE "jj = N-1") (("1" (REPLACE -1) (("1" (HIDE -3) (("1" (HIDE 1) (("1" (INST + "N-1") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST + "N-1") (("1" (EXPAND "segment") (("1" (TYPEPRED "segment_max(extend[nat, below[N], bool, FALSE]
                                          ({j: below[N] | tt!1 >= flpl(j)`time}))") (("1" (REPLACE "jjname") (("1" (EXPAND "extend") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (REWRITE "conflict_3D_on_open_interval") (("2" (SKOSIMP*) (("2" (NAME "t!1" "topen!1") (("2" (REPLACE -1) (("2" (HIDE -1) (("2" (NAME "newt" "flpl(j!1)`time+t!1") (("2" (NAME "cv1" "(so + (newt - to) * vo) - location_at(flpl)(newt)") (("1" (NAME "cv2" "(so + (flpl(j!1)`time - to) * vo) - flpl(j!1)`position +
                                   t!1 * (vo - velocity(flpl)(j!1))") (("1" (CASE "NOT cv1 = cv2") (("1" (HIDE 2) (("1" (REPLACE -1 :DIR RL) (("1" (REPLACE -2 :DIR RL) (("1" (HIDE -1) (("1" (HIDE -1) (("1" (CASE "segment(flpl)(newt) = j!1") (("1" (REPLACE -2 :DIR RL) (("1" (EXPAND "location_at") (("1" (ASSERT) (("1" (REPLACE -1) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (NAME "pj" "segment(flpl)(newt)") (("2" (REPLACE -1) (("2" (CASE "newt >= flpl(j!1)`time AND newt < flpl(j!1+1)`time") (("1" (FLATTEN) (("1" (COPY -3) (("1" (EXPAND "segment" -1) (("1" (TYPEPRED "segment_max(extend[nat, below[N], bool, FALSE]
                                                ({j: below[N] | newt >= flpl(j)`time}))") (("1" (REPLACE -3) (("1" (EXPAND "extend") (("1" (ASSERT) (("1" (CASE "pj < 1+j!1") (("1" (INST - "j!1") (("1" (LIFT-IF) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (LEMMA "flight_plan_ascending_time") (("2" (INST - "flpl" "pj" "1+j!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "seg_lh_bottom") (("2" (EXPAND "seg_lh_top") (("2" (EXPAND "min") (("2" (EXPAND "max") (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "conflict_3D?") (("2" (INST + "newt") (("1" (CASE "vect2(cv1) = vect2(cv2) AND cv1`z = cv2`z") (("1" (FLATTEN) (("1" (REPLACE -4 :DIR RL) (("1" (REPLACE -5 :DIR RL) (("1" (REWRITE "vect2_sub") (("1" (REWRITE "vect2_add") (("1" (REWRITE "vect2_sub") (("1" (REWRITE "vect2_scal") (("1" (REWRITE "vect2_add") (("1" (REWRITE "vect2_sub") (("1" (REWRITE "vect2_scal") (("1" (REWRITE "vect2_add") (("1" (REWRITE "vect2_sub") (("1" (REWRITE "vect2_scal") (("1" (ASSERT) (("1" (REWRITE "vz_distr_sub") (("1" (REWRITE "vz_distr_add") (("1" (REWRITE "vz_distr_sub") (("1" (REWRITE "vz_scal") (("1" (REWRITE "vz_distr_add") (("1" (REWRITE "vz_distr_sub") (("1" (REWRITE "vz_scal") (("1" (REWRITE "vz_distr_add") (("1" (REWRITE "vz_distr_sub") (("1" (REWRITE "vz_scal") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (EXPAND "seg_lh_bottom") (("2" (EXPAND "seg_lh_top") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "start_time") (("2" (EXPAND "end_time") (("2" (EXPAND "seg_lh_bottom") (("2" (EXPAND "seg_lh_top") (("2" (LEMMA "flight_plan_ascending_time") (("2" (INST-CP - "flpl" "j!1" "0") (("2" (INST - "flpl" "N-1" "j!1+1") (("2" (ASSERT) (("2" (SPLIT -1) (("1" (ASSERT) (("1" (SPLIT -2) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "min") (("2" (LIFT-IF) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|nontrivial_lookahead| FORMULA-DECL NIL |cd3d_si| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|sq_nz_pos| APPLICATION-JUDGEMENT "posreal" |sq| |reals|) (|sqv_cont| NAME-JUDGEMENT "continuous_vr_fun" |vect_cont_2D| |vect_analysis|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|velocity_def| FORMULA-DECL NIL |flightplan| NIL) (|vect2| CONST-DECL "Vect2" |vect_3D_2D| |vectors|) (|Vect2| TYPE-EQ-DECL NIL |vectors_2D_def| |vectors|) (|vect2_sub| FORMULA-DECL NIL |vect_3D_2D| |vectors|) (|vect2_scal| FORMULA-DECL NIL |vect_3D_2D| |vectors|) (|vect2_add| FORMULA-DECL NIL |vect_3D_2D| |vectors|) (- CONST-DECL "Vector" |vectors_3D| |vectors|) (|velocity| CONST-DECL "Vect3" |flightplan| NIL) (|kk!1| SKOLEM-CONST-DECL "below[N]" |cd3d_si| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|location_at_check| FORMULA-DECL NIL |flightplan| NIL) (|add_zero_right| FORMULA-DECL NIL |vectors_2D| |vectors|) (|scal_0| FORMULA-DECL NIL |vectors_2D| |vectors|) (|vz_distr_add| FORMULA-DECL NIL |vectors_3D| |vectors|) (|vz_scal| FORMULA-DECL NIL |vectors_3D| |vectors|) (* CONST-DECL "Vector" |vectors_3D| |vectors|) (+ CONST-DECL "Vector" |vectors_3D| |vectors|) (|Vector| TYPE-EQ-DECL NIL |vectors_3D| |vectors|) (|vz_distr_sub| FORMULA-DECL NIL |vectors_3D| |vectors|) (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL) (|Lookahead| TYPE-EQ-DECL NIL |Lookahead| NIL) (|seg_lh_top| CONST-DECL "real" |cd3d_si| NIL) (|seg_lh_bottom| CONST-DECL "nnreal" |cd3d_si| NIL) (|segment_max| CONST-DECL "[SS: non_empty_finite_set[nat] ->
   {a: nat | SS(a) AND (FORALL (x: nat): SS(x) IMPLIES x <= a)}]" |flightplan| NIL) (|empty?| CONST-DECL "bool" |sets| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|non_empty_finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|extend| CONST-DECL "R" |extend| NIL) (FALSE CONST-DECL "bool" |booleans| NIL) (|segment_def| FORMULA-DECL NIL |flightplan| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|location_at| CONST-DECL "Vect3" |flightplan| NIL) (|newt| SKOLEM-CONST-DECL "real" |cd3d_si| NIL) (|to| SKOLEM-CONST-DECL "real" |cd3d_si| NIL) (|flpl| SKOLEM-CONST-DECL "FlightPlanRelevant(to)" |cd3d_si| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|jj| SKOLEM-CONST-DECL "below[N]" |cd3d_si| NIL) (|segment| CONST-DECL "below[N]" |flightplan| NIL) (|FlightTimesRelevant| TYPE-EQ-DECL NIL |cd3d_si| NIL) (|FlightTimes| NONEMPTY-TYPE-EQ-DECL NIL |flightplan| NIL) (|end_time| CONST-DECL "real" |flightplan| NIL) (|FlightPlanRelevant| NONEMPTY-TYPE-EQ-DECL NIL |cd3d_si| NIL) (T FORMAL-CONST-DECL "{AB: posreal | AB > B}" |cd3d_si| NIL) (B FORMAL-CONST-DECL "nnreal" |cd3d_si| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|start_time| CONST-DECL "real" |flightplan| NIL) (|FlightPlan| NONEMPTY-TYPE-EQ-DECL NIL |flightplan| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|Vect3| TYPE-EQ-DECL NIL |vectors_3D_def| |vectors|) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (N FORMAL-CONST-DECL "above[1]" |cd3d_si| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |int_types| NIL) (> CONST-DECL "bool" |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|conflict_3D?| CONST-DECL "bool" |cd3d_si| NIL) (|conflict_3D?| CONST-DECL "bool" |cd3d| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|conflict_3D_on_open_interval| FORMULA-DECL NIL |cd3d| NIL) (D FORMAL-CONST-DECL "posreal" |cd3d_si| NIL) (H FORMAL-CONST-DECL "posreal" |cd3d_si| NIL) (|flight_plan_ascending_time| FORMULA-DECL NIL |flightplan| NIL) (|newt| SKOLEM-CONST-DECL "real" |cd3d_si| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL) (|conflict_3D_rew-4| |nil| 3475844455 ("" (SKEEP) (("" (GROUND) (("1" (EXPAND "conflict_3D?") (("1" (SKOSIMP*) (("1" (TYPEPRED "tt!1") (("1" (EXPAND "end_time") (("1" (EXPAND "start_time") (("1" (CASE "EXISTS (kk: below[N]): tt!1 = flpl(kk)`time") (("1" (SKOSIMP*) (("1" (LEMMA "nontrivial_lookahead") (("1" (INST - "T" "kk!1" "to" "flpl") (("1" (ASSERT) (("1" (SPLIT -1) (("1" (FLATTEN) (("1" (INST + "kk!1") (("1" (ASSERT) (("1" (INST + "0") (("1" (ASSERT) (("1" (LEMMA "location_at_check") (("1" (INST - "flpl" "kk!1") (("1" (REPLACE -4 :DIR RL) (("1" (REPLACE -1) (("1" (CASE "seg_lh_bottom(flpl,to,T)(kk!1) = tt!1") (("1" (REPLACE -1) (("1" (CASE "flpl(kk!1)`position = lh_start_position(flpl,to,T)(kk!1)") (("1" (REWRITE "vz_distr_sub") (("1" (REWRITE "vz_distr_add") (("1" (REWRITE "vz_scal") (("1" (ASSERT) NIL))))))) ("2" (HIDE 2) (("2" (EXPAND "lh_start_position") (("2" (REPLACE -1) (("2" (REPLACE -5 :DIR RL) (("2" (ASSERT) NIL))))))))))))) ("2" (HIDE 2) (("2" (EXPAND "seg_lh_bottom" 1) (("2" (EXPAND "max") (("2" (ASSERT) NIL))))))))))))))))))))))))))) ("2" (FLATTEN) (("2" (INST + "kk!1-1") (("1" (ASSERT) (("1" (INST + "seg_lh_top(flpl,to,T)(kk!1 - 1) -
                                                                                                      seg_lh_bottom(flpl,to,T)(kk!1 - 1)") (("1" (LEMMA "location_at_check") (("1" (INST - "flpl" "kk!1") (("1" (REPLACE -4 :DIR RL) (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (CASE "(so + (seg_lh_bottom(flpl,to,T)(kk!1 - 1) - to) * vo) -
                                                                                                                                          lh_start_position(flpl,to,T)(kk!1 - 1)
                                                                                                                                    +
                                                                                                                                    (seg_lh_top(flpl,to,T)(kk!1 - 1) -
                                                                                                                                      seg_lh_bottom(flpl,to,T)(kk!1 - 1))
                                                                                                                                     * (vo - velocity(flpl)(kk!1 - 1)) = (so + (tt!1 - to) * vo) - flpl(kk!1)`position") (("1" (CASE "((so + (seg_lh_bottom(flpl,to,T)(kk!1 - 1) - to) * vo) -
                                                                                                                                                    lh_start_position(flpl,to,T)(kk!1 - 1))`z
                                                                                                                                                   +
                                                                                                                                                   (seg_lh_top(flpl,to,T)(kk!1 - 1) -
                                                                                                                                                     seg_lh_bottom(flpl,to,T)(kk!1 - 1))
                                                                                                                                                    * (vo - velocity(flpl)(kk!1 - 1))`z = so`z - flpl(kk!1)`position`z - vo`z * to + tt!1 * vo`z AND vect2((so + (seg_lh_bottom(flpl,to,T)(kk!1 - 1) - to) * vo) -
                                                                                                                                                          lh_start_position(flpl,to,T)(kk!1 - 1))
                                                                                                                                                    +
                                                                                                                                                    (seg_lh_top(flpl,to,T)(kk!1 - 1) -
                                                                                                                                                      seg_lh_bottom(flpl,to,T)(kk!1 - 1))
                                                                                                                                                     * vect2(vo - velocity(flpl)(kk!1 - 1)) = vect2((so + (tt!1 - to) * vo) - flpl(kk!1)`position)") (("1" (FLATTEN) (("1" (ASSERT) NIL))) ("2" (HIDE-ALL-BUT (-1 1)) (("2" (NAME "lsp" "lh_start_position(flpl,to,T)(kk!1 - 1)") (("2" (REPLACE -1) (("2" (NAME "slb" "seg_lh_bottom(flpl,to,T)(kk!1 - 1)") (("2" (REPLACE -1) (("2" (NAME "slt" "seg_lh_top(flpl,to,T)(kk!1 - 1)") (("2" (REPLACE -1) (("2" (NAME "velc" "velocity(flpl)(kk!1-1)") (("2" (REPLACE -1) (("2" (HIDE -1) (("2" (HIDE -1) (("2" (HIDE -1) (("2" (HIDE -1) (("2" (GRIND) NIL))))))))))))))))))))))))))))) ("2" (HIDE 2) (("2" (LEMMA "velocity_def") (("2" (INST - "flpl" "kk!1-1") (("2" (ASSERT) (("2" (CASE "flpl(kk!1-1)`time >= to") (("1" (CASE "seg_lh_bottom(flpl,to,T)(kk!1-1) = flpl(kk!1-1)`time") (("1" (REPLACE -1) (("1" (CASE "flpl(kk!1)`time <= to+T") (("1" (CASE "seg_lh_top(flpl,to,T)(kk!1-1) = flpl(kk!1)`time") (("1" (REPLACE -1) (("1" (EXPAND "lh_start_position") (("1" (REPLACE -3) (("1" (ASSERT) (("1" (REPLACE -8) (("1" (HIDE-ALL-BUT (-5 1)) (("1" (GRIND) NIL))))))))))))) ("2" (HIDE-ALL-BUT (-1 1)) (("2" (GRIND) NIL))))) ("2" (ASSERT) NIL))))) ("2" (HIDE 2) (("2" (EXPAND "seg_lh_bottom") (("2" (EXPAND "max") (("2" (LIFT-IF) (("2" (ASSERT) NIL))))))))))) ("2" (CASE "NOT seg_lh_bottom(flpl,to,T)(kk!1-1) = to") (("1" (EXPAND "seg_lh_bottom" 1) (("1" (EXPAND "max") (("1" (LIFT-IF) (("1" (GROUND) NIL))))))) ("2" (EXPAND "lh_start_position") (("2" (REPLACE -1) (("2" (ASSERT) (("2" (EXPAND "seg_lh_top") (("2" (EXPAND "min") (("2" (HIDE-ALL-BUT (-2 2 1)) (("2" (GRIND) NIL))))))))))))))))))))))))))))))))))))))))) ("2" (ASSERT) NIL))))))))))))))) ("2" (NAME "jj" "segment(flpl)(tt!1)") (("2" (LABEL "jjname" -1) (("2" (NAME "jjname" -1) (("2" (INST 2 "jj") (("1" (LEMMA "segment_def") (("1" (INST - "flpl" "tt!1") (("1" (FLATTEN) (("1" (CASE "jj < N-1") (("1" (ASSERT) (("1" (CASE "flpl(jj)`time < tt!1") (("1" (CASE "seg_lh_bottom(flpl,to,T)(jj) < seg_lh_top(flpl,to,T)(jj)") (("1" (ASSERT) (("1" (NAME "newt" "tt!1-seg_lh_bottom(flpl,to,T)(jj)") (("1" (INST 2 "newt") (("1" (CASE "(so + (seg_lh_bottom(flpl,to,T)(jj) - to) * vo) -
                                                                                                                                                                     lh_start_position(flpl,to,T)(jj)
                                                                                                                                                               + newt *(vo - velocity(flpl)(jj)) = (so + (tt!1 - to) * vo) - location_at(flpl)(tt!1)") (("1" (CASE "((so + (seg_lh_bottom(flpl,to,T)(jj) - to) * vo) -
                                                                                                                                                                             lh_start_position(flpl,to,T)(jj))`z
                                                                                                                                                                            + newt * (vo - velocity(flpl)(jj))`z = so`z - location_at(flpl)(tt!1)`z - vo`z * to + tt!1 * vo`z AND vect2((so + (seg_lh_bottom(flpl,to,T)(jj) - to) * vo) -
                                                                                                                                                                                   lh_start_position(flpl,to,T)(jj))
                                                                                                                                                                             + newt * vect2(vo - velocity(flpl)(jj)) = vect2((so + (tt!1 - to) * vo) - location_at(flpl)(tt!1))") (("1" (FLATTEN) (("1" (ASSERT) NIL))) ("2" (HIDE-ALL-BUT (-1 1)) (("2" (NAME "slb1" "seg_lh_bottom(flpl,to,T)(jj)") (("2" (NAME "lsp" "lh_start_position(flpl,to,T)(jj)") (("2" (NAME "lal" "location_at(flpl)(tt!1)") (("2" (NAME "v1" "velocity(flpl)(jj)") (("2" (REPLACE -1) (("2" (HIDE -1) (("2" (REPLACE -1) (("2" (HIDE -1) (("2" (REPLACE -1) (("2" (HIDE -1) (("2" (REPLACE -1) (("2" (HIDE -1) (("2" (GRIND) NIL))))))))))))))))))))))))))))) ("2" (HIDE 3) (("2" (EXPAND "location_at") (("2" (REPLACE "jjname") (("2" (HIDE "jjname") (("2" (HIDE -12) (("2" (HIDE -12) (("2" (GRIND) NIL))))))))))))))) ("2" (CASE "seg_lh_bottom(flpl,to,T)(jj) <= tt!1 AND tt!1 <= seg_lh_top(flpl,to,T)(jj)") (("1" (FLATTEN) (("1" (ASSERT) NIL))) ("2" (HIDE 2) (("2" (EXPAND "seg_lh_bottom" 1) (("2" (EXPAND "seg_lh_top" 1) (("2" (EXPAND "max") (("2" (EXPAND "min") (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (ASSERT) NIL))))))))))))))))))))))) ("2" (HIDE 3) (("2" (EXPAND "seg_lh_bottom") (("2" (EXPAND "seg_lh_top") (("2" (EXPAND "max") (("2" (EXPAND "min") (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (ASSERT) NIL))))))))))))))))) ("2" (INST 2 "jj") (("2" (ASSERT) NIL))))))) ("2" (CASE "jj = N-1") (("1" (REPLACE -1) (("1" (HIDE -3) (("1" (HIDE 1) (("1" (INST + "N-1") (("1" (ASSERT) NIL) ("2" (ASSERT) NIL))))))))) ("2" (ASSERT) NIL))))))))))) ("2" (INST + "N-1") (("1" (EXPAND "segment") (("1" (TYPEPRED "max(extend[nat, below[N], bool, FALSE]
                                                                ({j: below[N] | tt!1 >= flpl(j)`time}))") (("1" (REPLACE "jjname") (("1" (EXPAND "extend") (("1" (ASSERT) NIL))))))))) ("2" (ASSERT) NIL))))))))))))))))))))))) ("2" (SKOSIMP*) (("2" (EXPAND "conflict_3D?") (("2" (SKOSIMP*) (("2" (TYPEPRED "t!1") (("2" (NAME "newt" "seg_lh_bottom(flpl,to,T)(j!1) + t!1") (("2" (CASE "to<=newt AND newt<=to+T") (("1" (FLATTEN) (("1" (INST + "newt") (("1" (CASE "(so + (seg_lh_bottom(flpl,to,T)(j!1) - to) * vo) -
                                                                                lh_start_position(flpl,to,T)(j!1)
                                                                          + t!1 * (vo - velocity(flpl)(j!1)) = (so + (newt - to) * vo) - location_at(flpl)(newt)") (("1" (CASE "((so + (seg_lh_bottom(flpl,to,T)(j!1) - to) * vo) -
                                                                                     lh_start_position(flpl,to,T)(j!1))`z
                                                                                    + t!1 * (vo - velocity(flpl)(j!1))`z = so`z + newt * vo`z - location_at(flpl)(newt)`z - vo`z * to AND vect2((so + (seg_lh_bottom(flpl,to,T)(j!1) - to) * vo) -
                                                                                          lh_start_position(flpl,to,T)(j!1))
                                                                                    + t!1 * vect2(vo - velocity(flpl)(j!1)) = vect2((so + (newt - to) * vo) - location_at(flpl)(newt))") (("1" (FLATTEN) (("1" (ASSERT) NIL))) ("2" (HIDE 2) (("2" (HIDE-ALL-BUT (-1 1)) (("2" (NAME "slb1" "seg_lh_bottom(flpl,to,T)(j!1)") (("2" (NAME "lsp" "lh_start_position(flpl,to,T)(j!1)") (("2" (NAME "sltop" "seg_lh_top(flpl,to,T)(j!1)") (("2" (NAME "loc1" "location_at(flpl)(newt)") (("2" (NAME "velc" "velocity(flpl)(j!1)") (("2" (REPLACE -1) (("2" (HIDE -1) (("2" (REPLACE -1) (("2" (HIDE -1) (("2" (HIDE -1) (("2" (REPLACE -1) (("2" (HIDE -1) (("2" (REPLACE -1) (("2" (HIDE -1) (("2" (GRIND) NIL))))))))))))))))))))))))))))))))))) ("2" (HIDE 2) (("2" (HIDE -7) (("2" (HIDE -7) (("2" (CASE "t!1 < seg_lh_top(flpl,to,T)(j!1) - seg_lh_bottom(flpl,to,T)(j!1)") (("1" (CASE "segment(flpl)(newt) = j!1") (("1" (EXPAND "location_at") (("1" (REPLACE -1) (("1" (LIFT-IF) (("1" (ASSERT) (("1" (HIDE -1) (("1" (GRIND) NIL))))))))))) ("2" (HIDE 2) (("2" (NAME "pj" "segment(flpl)(newt)") (("2" (REPLACE -1) (("2" (CASE "newt >= flpl(j!1)`time AND newt < flpl(j!1+1)`time") (("1" (FLATTEN) (("1" (COPY -3) (("1" (EXPAND "segment" -1) (("1" (TYPEPRED "max(extend[nat, below[N], bool, FALSE]
                                                              ({j: below[N] | newt >= flpl(j)`time}))") (("1" (REPLACE -3) (("1" (EXPAND "extend") (("1" (ASSERT) (("1" (CASE "pj < 1+j!1") (("1" (INST - "j!1") (("1" (LIFT-IF) (("1" (ASSERT) NIL))))) ("2" (LEMMA "flight_plan_ascending_time") (("2" (INST - "flpl" "pj" "1+j!1") (("2" (ASSERT) NIL))))))))))))))))))))) ("2" (CASE "seg_lh_top(flpl,to,T)(j!1) <= flpl(j!1+1)`time AND seg_lh_bottom(flpl,to,T)(j!1) >= flpl(j!1)`time") (("1" (FLATTEN) (("1" (ASSERT) NIL))) ("2" (HIDE 2) (("2" (EXPAND "seg_lh_top" 1) (("2" (EXPAND "seg_lh_bottom" 1) (("2" (EXPAND "min") (("2" (EXPAND "max") (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (ASSERT) NIL))))))))))))))))))))))))))) ("2" (CASE "newt = seg_lh_top(flpl,to,T)(j!1)") (("1" (CASE "to+T < flpl(j!1+1)`time") (("1" (CASE "segment(flpl)(newt) = j!1") (("1" (EXPAND "location_at") (("1" (REPLACE -1) (("1" (LIFT-IF) (("1" (ASSERT) (("1" (CASE "seg_lh_top(flpl,to,T)(j!1) = to+T") (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (HIDE -1) (("1" (GRIND) NIL))))))) ("2" (EXPAND "seg_lh_top" 1) (("2" (EXPAND "min") (("2" (PROPAX) NIL))))))))))))))) ("2" (HIDE 3) (("2" (NAME "pj" "segment(flpl)(newt)") (("2" (REPLACE -1) (("2" (CASE "newt >= flpl(j!1)`time AND newt < flpl(j!1+1)`time") (("1" (FLATTEN) (("1" (COPY -3) (("1" (EXPAND "segment" -1) (("1" (TYPEPRED "max(extend[nat, below[N], bool, FALSE]
                                                                      ({j: below[N] | newt >= flpl(j)`time}))") (("1" (REPLACE -3) (("1" (EXPAND "extend") (("1" (ASSERT) (("1" (CASE "pj < 1+j!1") (("1" (INST - "j!1") (("1" (LIFT-IF) (("1" (ASSERT) NIL))))) ("2" (LEMMA "flight_plan_ascending_time") (("2" (INST - "flpl" "pj" "1+j!1") (("2" (ASSERT) NIL))))))))))))))))))))) ("2" (HIDE -1) (("2" (HIDE 3) (("2" (GRIND) NIL))))))))))))))) ("2" (CASE "newt = flpl(j!1+1)`time") (("1" (LEMMA "location_at_check") (("1" (INST - "flpl" "j!1+1") (("1" (REPLACE -2 :DIR RL) (("1" (REPLACE -1) (("1" (REPLACE -2) (("1" (HIDE -1) (("1" (EXPAND "lh_start_position") (("1" (LEMMA "velocity_def") (("1" (INST - "flpl" "j!1") (("1" (NAME "vel11" "velocity(flpl)(j!1)") (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (GRIND) NIL))))))))))))))))))))))))) ("2" (HIDE 4) (("2" (EXPAND "seg_lh_top" -1) (("2" (EXPAND "min") (("2" (LIFT-IF) (("2" (GROUND) NIL))))))))))))) ("2" (ASSERT) NIL))))))))))) ("3" (HIDE 2) (("3" (CASE "seg_lh_bottom(flpl,to,T)(j!1) >= start_time(flpl) AND seg_lh_top(flpl,to,T)(j!1) <= end_time(flpl)") (("1" (FLATTEN) (("1" (ASSERT) NIL))) ("2" (HIDE 2) (("2" (EXPAND "seg_lh_bottom") (("2" (EXPAND "start_time") (("2" (EXPAND "end_time") (("2" (EXPAND "seg_lh_top") (("2" (LEMMA "flight_plan_ascending_time") (("2" (INST-CP - "flpl" "N-1" "1+j!1") (("2" (INST - "flpl" "j!1" "0") (("2" (EXPAND "max") (("2" (EXPAND "min") (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (GROUND) NIL))))))))))))))))))))))))))))))) ("2" (ASSERT) (("2" (CASE "seg_lh_bottom(flpl,to,T)(j!1) >= start_time(flpl) AND seg_lh_top(flpl,to,T)(j!1) <= end_time(flpl)") (("1" (FLATTEN) (("1" (ASSERT) NIL))) ("2" (HIDE 2) (("2" (EXPAND "seg_lh_bottom") (("2" (EXPAND "start_time") (("2" (EXPAND "end_time") (("2" (EXPAND "seg_lh_top") (("2" (LEMMA "flight_plan_ascending_time") (("2" (INST-CP - "flpl" "N-1" "1+j!1") (("2" (INST - "flpl" "j!1" "0") (("2" (EXPAND "max") (("2" (EXPAND "min") (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (GROUND) NIL))))))))))))))))))))))))))))))))) ("2" (CASE "seg_lh_bottom(flpl,to,T)(j!1) >= to AND seg_lh_top(flpl,to,T)(j!1) <= to+T") (("1" (FLATTEN) (("1" (ASSERT) NIL))) ("2" (HIDE 3) (("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL)))))))))))))))))))))) NIL) NIL NIL) (|conflict_3D_rew-3| |nil| 3475844390 ("" (SKEEP) (("" (GROUND) (("1" (EXPAND "conflict_3D?") (("1" (SKOSIMP*) (("1" (TYPEPRED "tt!1") (("1" (EXPAND "end_time") (("1" (EXPAND "start_time") (("1" (CASE "EXISTS (kk: below[N]): tt!1 = flpl(kk)`time") (("1" (SKOSIMP*) (("1" (LEMMA "nontrivial_lookahead") (("1" (INST - "T" "kk!1" "to" "flpl") (("1" (ASSERT) (("1" (SPLIT -1) (("1" (FLATTEN) (("1" (INST + "kk!1") (("1" (ASSERT) (("1" (INST + "0") (("1" (ASSERT) (("1" (LEMMA "location_at_check") (("1" (INST - "flpl" "kk!1") (("1" (REPLACE -4 :DIR RL) (("1" (REPLACE -1) (("1" (CASE "seg_lh_bottom(flpl,to)(kk!1) = tt!1") (("1" (REPLACE -1) (("1" (CASE "flpl(kk!1)`position = lh_start_position(flpl,to)(kk!1)") (("1" (REWRITE "vz_distr_sub") (("1" (REWRITE "vz_distr_add") (("1" (REWRITE "vz_scal") (("1" (ASSERT) NIL))))))) ("2" (HIDE 2) (("2" (EXPAND "lh_start_position") (("2" (REPLACE -1) (("2" (REPLACE -5 :DIR RL) (("2" (ASSERT) NIL))))))))))))) ("2" (HIDE 2) (("2" (EXPAND "seg_lh_bottom" 1) (("2" (EXPAND "max") (("2" (ASSERT) NIL))))))))))))))))))))))))))) ("2" (FLATTEN) (("2" (INST + "kk!1-1") (("1" (ASSERT) (("1" (INST + "seg_lh_top(flpl,to)(kk!1 - 1) -
                                                                                                      seg_lh_bottom(flpl,to)(kk!1 - 1)") (("1" (LEMMA "location_at_check") (("1" (INST - "flpl" "kk!1") (("1" (REPLACE -4 :DIR RL) (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (CASE "(so + (seg_lh_bottom(flpl,to)(kk!1 - 1) - to) * vo) -
                                                                                                                                          lh_start_position(flpl,to)(kk!1 - 1)
                                                                                                                                    +
                                                                                                                                    (seg_lh_top(flpl,to)(kk!1 - 1) -
                                                                                                                                      seg_lh_bottom(flpl,to)(kk!1 - 1))
                                                                                                                                     * (vo - velocity(flpl)(kk!1 - 1)) = (so + (tt!1 - to) * vo) - flpl(kk!1)`position") (("1" (CASE "((so + (seg_lh_bottom(flpl,to)(kk!1 - 1) - to) * vo) -
                                                                                                                                                    lh_start_position(flpl,to)(kk!1 - 1))`z
                                                                                                                                                   +
                                                                                                                                                   (seg_lh_top(flpl,to)(kk!1 - 1) -
                                                                                                                                                     seg_lh_bottom(flpl,to)(kk!1 - 1))
                                                                                                                                                    * (vo - velocity(flpl)(kk!1 - 1))`z = so`z - flpl(kk!1)`position`z - vo`z * to + tt!1 * vo`z AND vect2((so + (seg_lh_bottom(flpl,to)(kk!1 - 1) - to) * vo) -
                                                                                                                                                          lh_start_position(flpl,to)(kk!1 - 1))
                                                                                                                                                    +
                                                                                                                                                    (seg_lh_top(flpl,to)(kk!1 - 1) -
                                                                                                                                                      seg_lh_bottom(flpl,to)(kk!1 - 1))
                                                                                                                                                     * vect2(vo - velocity(flpl)(kk!1 - 1)) = vect2((so + (tt!1 - to) * vo) - flpl(kk!1)`position)") (("1" (FLATTEN) (("1" (ASSERT) NIL))) ("2" (HIDE-ALL-BUT (-1 1)) (("2" (NAME "lsp" "lh_start_position(flpl,to)(kk!1 - 1)") (("2" (REPLACE -1) (("2" (NAME "slb" "seg_lh_bottom(flpl,to)(kk!1 - 1)") (("2" (REPLACE -1) (("2" (NAME "slt" "seg_lh_top(flpl,to)(kk!1 - 1)") (("2" (REPLACE -1) (("2" (NAME "velc" "velocity(flpl)(kk!1-1)") (("2" (REPLACE -1) (("2" (HIDE -1) (("2" (HIDE -1) (("2" (HIDE -1) (("2" (HIDE -1) (("2" (GRIND) NIL))))))))))))))))))))))))))))) ("2" (HIDE 2) (("2" (LEMMA "velocity_def") (("2" (INST - "flpl" "kk!1-1") (("2" (ASSERT) (("2" (CASE "flpl(kk!1-1)`time >= to") (("1" (CASE "seg_lh_bottom(flpl,to)(kk!1-1) = flpl(kk!1-1)`time") (("1" (REPLACE -1) (("1" (CASE "flpl(kk!1)`time <= to+T") (("1" (CASE "seg_lh_top(flpl,to)(kk!1-1) = flpl(kk!1)`time") (("1" (REPLACE -1) (("1" (EXPAND "lh_start_position") (("1" (REPLACE -3) (("1" (ASSERT) (("1" (REPLACE -8) (("1" (HIDE-ALL-BUT (-5 1)) (("1" (GRIND) NIL))))))))))))) ("2" (HIDE-ALL-BUT (-1 1)) (("2" (GRIND) NIL))))) ("2" (ASSERT) NIL))))) ("2" (HIDE 2) (("2" (EXPAND "seg_lh_bottom") (("2" (EXPAND "max") (("2" (LIFT-IF) (("2" (ASSERT) NIL))))))))))) ("2" (CASE "NOT seg_lh_bottom(flpl,to)(kk!1-1) = to") (("1" (EXPAND "seg_lh_bottom" 1) (("1" (EXPAND "max") (("1" (LIFT-IF) (("1" (GROUND) NIL))))))) ("2" (EXPAND "lh_start_position") (("2" (REPLACE -1) (("2" (ASSERT) (("2" (EXPAND "seg_lh_top") (("2" (EXPAND "min") (("2" (HIDE-ALL-BUT (-2 2 1)) (("2" (GRIND) NIL))))))))))))))))))))))))))))))))))))))))) ("2" (ASSERT) NIL))))))))))))))) ("2" (NAME "jj" "segment(flpl)(tt!1)") (("2" (LABEL "jjname" -1) (("2" (NAME "jjname" -1) (("2" (INST 2 "jj") (("1" (LEMMA "segment_def") (("1" (INST - "flpl" "tt!1") (("1" (FLATTEN) (("1" (CASE "jj < N-1") (("1" (ASSERT) (("1" (CASE "flpl(jj)`time < tt!1") (("1" (CASE "seg_lh_bottom(flpl,to)(jj) < seg_lh_top(flpl,to)(jj)") (("1" (ASSERT) (("1" (NAME "newt" "tt!1-seg_lh_bottom(flpl,to)(jj)") (("1" (INST 2 "newt") (("1" (CASE "(so + (seg_lh_bottom(flpl,to)(jj) - to) * vo) -
                                                                                                                                                                     lh_start_position(flpl,to)(jj)
                                                                                                                                                               + newt *(vo - velocity(flpl)(jj)) = (so + (tt!1 - to) * vo) - location_at(flpl)(tt!1)") (("1" (CASE "((so + (seg_lh_bottom(flpl,to)(jj) - to) * vo) -
                                                                                                                                                                             lh_start_position(flpl,to)(jj))`z
                                                                                                                                                                            + newt * (vo - velocity(flpl)(jj))`z = so`z - location_at(flpl)(tt!1)`z - vo`z * to + tt!1 * vo`z AND vect2((so + (seg_lh_bottom(flpl,to)(jj) - to) * vo) -
                                                                                                                                                                                   lh_start_position(flpl,to)(jj))
                                                                                                                                                                             + newt * vect2(vo - velocity(flpl)(jj)) = vect2((so + (tt!1 - to) * vo) - location_at(flpl)(tt!1))") (("1" (FLATTEN) (("1" (ASSERT) NIL))) ("2" (HIDE-ALL-BUT (-1 1)) (("2" (NAME "slb1" "seg_lh_bottom(flpl,to)(jj)") (("2" (NAME "lsp" "lh_start_position(flpl,to)(jj)") (("2" (NAME "lal" "location_at(flpl)(tt!1)") (("2" (NAME "v1" "velocity(flpl)(jj)") (("2" (REPLACE -1) (("2" (HIDE -1) (("2" (REPLACE -1) (("2" (HIDE -1) (("2" (REPLACE -1) (("2" (HIDE -1) (("2" (REPLACE -1) (("2" (HIDE -1) (("2" (GRIND) NIL))))))))))))))))))))))))))))) ("2" (HIDE 3) (("2" (EXPAND "location_at") (("2" (REPLACE "jjname") (("2" (HIDE "jjname") (("2" (HIDE -12) (("2" (HIDE -12) (("2" (GRIND) NIL))))))))))))))) ("2" (CASE "seg_lh_bottom(flpl,to)(jj) <= tt!1 AND tt!1 <= seg_lh_top(flpl,to)(jj)") (("1" (FLATTEN) (("1" (ASSERT) NIL))) ("2" (HIDE 2) (("2" (EXPAND "seg_lh_bottom" 1) (("2" (EXPAND "seg_lh_top" 1) (("2" (EXPAND "max") (("2" (EXPAND "min") (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (ASSERT) NIL))))))))))))))))))))))) ("2" (HIDE 3) (("2" (EXPAND "seg_lh_bottom") (("2" (EXPAND "seg_lh_top") (("2" (EXPAND "max") (("2" (EXPAND "min") (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (ASSERT) NIL))))))))))))))))) ("2" (INST 2 "jj") (("2" (ASSERT) NIL))))))) ("2" (CASE "jj = N-1") (("1" (REPLACE -1) (("1" (HIDE -3) (("1" (HIDE 1) (("1" (INST + "N-1") (("1" (ASSERT) NIL) ("2" (ASSERT) NIL))))))))) ("2" (ASSERT) NIL))))))))))) ("2" (INST + "N-1") (("1" (EXPAND "segment") (("1" (TYPEPRED "max(extend[nat, below[N], bool, FALSE]
                                                                ({j: below[N] | tt!1 >= flpl(j)`time}))") (("1" (REPLACE "jjname") (("1" (EXPAND "extend") (("1" (ASSERT) NIL))))))))) ("2" (ASSERT) NIL))))))))))))))))))))))) ("2" (SKOSIMP*) (("2" (EXPAND "conflict_3D?") (("2" (SKOSIMP*) (("2" (TYPEPRED "t!1") (("2" (NAME "newt" "seg_lh_bottom(flpl,to)(j!1) + t!1") (("2" (CASE "to<=newt AND newt<=to+T") (("1" (FLATTEN) (("1" (INST + "newt") (("1" (CASE "(so + (seg_lh_bottom(flpl,to)(j!1) - to) * vo) -
                                                                                lh_start_position(flpl,to)(j!1)
                                                                          + t!1 * (vo - velocity(flpl)(j!1)) = (so + (newt - to) * vo) - location_at(flpl)(newt)") (("1" (CASE "((so + (seg_lh_bottom(flpl,to)(j!1) - to) * vo) -
                                                                                     lh_start_position(flpl,to)(j!1))`z
                                                                                    + t!1 * (vo - velocity(flpl)(j!1))`z = so`z + newt * vo`z - location_at(flpl)(newt)`z - vo`z * to AND vect2((so + (seg_lh_bottom(flpl,to)(j!1) - to) * vo) -
                                                                                          lh_start_position(flpl,to)(j!1))
                                                                                    + t!1 * vect2(vo - velocity(flpl)(j!1)) = vect2((so + (newt - to) * vo) - location_at(flpl)(newt))") (("1" (FLATTEN) (("1" (ASSERT) NIL))) ("2" (HIDE 2) (("2" (HIDE-ALL-BUT (-1 1)) (("2" (NAME "slb1" "seg_lh_bottom(flpl,to)(j!1)") (("2" (NAME "lsp" "lh_start_position(flpl,to)(j!1)") (("2" (NAME "sltop" "seg_lh_top(flpl,to)(j!1)") (("2" (NAME "loc1" "location_at(flpl)(newt)") (("2" (NAME "velc" "velocity(flpl)(j!1)") (("2" (REPLACE -1) (("2" (HIDE -1) (("2" (REPLACE -1) (("2" (HIDE -1) (("2" (HIDE -1) (("2" (REPLACE -1) (("2" (HIDE -1) (("2" (REPLACE -1) (("2" (HIDE -1) (("2" (GRIND) NIL))))))))))))))))))))))))))))))))))) ("2" (HIDE 2) (("2" (HIDE -7) (("2" (HIDE -7) (("2" (CASE "t!1 < seg_lh_top(flpl,to)(j!1) - seg_lh_bottom(flpl,to)(j!1)") (("1" (CASE "segment(flpl)(newt) = j!1") (("1" (EXPAND "location_at") (("1" (REPLACE -1) (("1" (LIFT-IF) (("1" (ASSERT) (("1" (HIDE -1) (("1" (GRIND) NIL))))))))))) ("2" (HIDE 2) (("2" (NAME "pj" "segment(flpl)(newt)") (("2" (REPLACE -1) (("2" (CASE "newt >= flpl(j!1)`time AND newt < flpl(j!1+1)`time") (("1" (FLATTEN) (("1" (COPY -3) (("1" (EXPAND "segment" -1) (("1" (TYPEPRED "max(extend[nat, below[N], bool, FALSE]
                                                              ({j: below[N] | newt >= flpl(j)`time}))") (("1" (REPLACE -3) (("1" (EXPAND "extend") (("1" (ASSERT) (("1" (CASE "pj < 1+j!1") (("1" (INST - "j!1") (("1" (LIFT-IF) (("1" (ASSERT) NIL))))) ("2" (LEMMA "flight_plan_ascending_time") (("2" (INST - "flpl" "pj" "1+j!1") (("2" (ASSERT) NIL))))))))))))))))))))) ("2" (CASE "seg_lh_top(flpl,to)(j!1) <= flpl(j!1+1)`time AND seg_lh_bottom(flpl,to)(j!1) >= flpl(j!1)`time") (("1" (FLATTEN) (("1" (ASSERT) NIL))) ("2" (HIDE 2) (("2" (EXPAND "seg_lh_top" 1) (("2" (EXPAND "seg_lh_bottom" 1) (("2" (EXPAND "min") (("2" (EXPAND "max") (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (ASSERT) NIL))))))))))))))))))))))))))) ("2" (CASE "newt = seg_lh_top(flpl,to)(j!1)") (("1" (CASE "to+T < flpl(j!1+1)`time") (("1" (CASE "segment(flpl)(newt) = j!1") (("1" (EXPAND "location_at") (("1" (REPLACE -1) (("1" (LIFT-IF) (("1" (ASSERT) (("1" (CASE "seg_lh_top(flpl,to)(j!1) = to+T") (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (HIDE -1) (("1" (GRIND) NIL))))))) ("2" (EXPAND "seg_lh_top" 1) (("2" (EXPAND "min") (("2" (PROPAX) NIL))))))))))))))) ("2" (HIDE 3) (("2" (NAME "pj" "segment(flpl)(newt)") (("2" (REPLACE -1) (("2" (CASE "newt >= flpl(j!1)`time AND newt < flpl(j!1+1)`time") (("1" (FLATTEN) (("1" (COPY -3) (("1" (EXPAND "segment" -1) (("1" (TYPEPRED "max(extend[nat, below[N], bool, FALSE]
                                                                      ({j: below[N] | newt >= flpl(j)`time}))") (("1" (REPLACE -3) (("1" (EXPAND "extend") (("1" (ASSERT) (("1" (CASE "pj < 1+j!1") (("1" (INST - "j!1") (("1" (LIFT-IF) (("1" (ASSERT) NIL))))) ("2" (LEMMA "flight_plan_ascending_time") (("2" (INST - "flpl" "pj" "1+j!1") (("2" (ASSERT) NIL))))))))))))))))))))) ("2" (HIDE -1) (("2" (HIDE 3) (("2" (GRIND) NIL))))))))))))))) ("2" (CASE "newt = flpl(j!1+1)`time") (("1" (LEMMA "location_at_check") (("1" (INST - "flpl" "j!1+1") (("1" (REPLACE -2 :DIR RL) (("1" (REPLACE -1) (("1" (REPLACE -2) (("1" (HIDE -1) (("1" (EXPAND "lh_start_position") (("1" (LEMMA "velocity_def") (("1" (INST - "flpl" "j!1") (("1" (NAME "vel11" "velocity(flpl)(j!1)") (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (GRIND) NIL))))))))))))))))))))))))) ("2" (HIDE 4) (("2" (EXPAND "seg_lh_top" -1) (("2" (EXPAND "min") (("2" (LIFT-IF) (("2" (GROUND) NIL))))))))))))) ("2" (ASSERT) NIL))))))))))) ("3" (HIDE 2) (("3" (CASE "seg_lh_bottom(flpl,to)(j!1) >= start_time(flpl) AND seg_lh_top(flpl,to)(j!1) <= end_time(flpl)") (("1" (FLATTEN) (("1" (ASSERT) NIL))) ("2" (HIDE 2) (("2" (EXPAND "seg_lh_bottom") (("2" (EXPAND "start_time") (("2" (EXPAND "end_time") (("2" (EXPAND "seg_lh_top") (("2" (LEMMA "flight_plan_ascending_time") (("2" (INST-CP - "flpl" "N-1" "1+j!1") (("2" (INST - "flpl" "j!1" "0") (("2" (EXPAND "max") (("2" (EXPAND "min") (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (GROUND) NIL))))))))))))))))))))))))))))))) ("2" (ASSERT) (("2" (CASE "seg_lh_bottom(flpl,to)(j!1) >= start_time(flpl) AND seg_lh_top(flpl,to)(j!1) <= end_time(flpl)") (("1" (FLATTEN) (("1" (ASSERT) NIL))) ("2" (HIDE 2) (("2" (EXPAND "seg_lh_bottom") (("2" (EXPAND "start_time") (("2" (EXPAND "end_time") (("2" (EXPAND "seg_lh_top") (("2" (LEMMA "flight_plan_ascending_time") (("2" (INST-CP - "flpl" "N-1" "1+j!1") (("2" (INST - "flpl" "j!1" "0") (("2" (EXPAND "max") (("2" (EXPAND "min") (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (GROUND) NIL))))))))))))))))))))))))))))))))) ("2" (CASE "seg_lh_bottom(flpl,to)(j!1) >= to AND seg_lh_top(flpl,to)(j!1) <= to+T") (("1" (FLATTEN) (("1" (ASSERT) NIL))) ("2" (HIDE 3) (("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL)))))))))))))))))))))) NIL) NIL NIL) (|conflict_3D_rew-2| |nil| 3473074365 ("" (SKEEP) (("" (GROUND) (("1" (EXPAND "conflict_3D?") (("1" (SKOSIMP*) (("1" (TYPEPRED "tt!1") (("1" (EXPAND "end_time") (("1" (EXPAND "start_time") (("1" (CASE "EXISTS (kk: below[N]): tt!1 = flpl(kk)`time") (("1" (SKOSIMP*) (("1" (LEMMA "nontrivial_lookahead") (("1" (INST - "T" "kk!1" "to" "flpl") (("1" (ASSERT) (("1" (SPLIT -1) (("1" (FLATTEN) (("1" (INST + "kk!1") (("1" (ASSERT) (("1" (INST + "0") (("1" (ASSERT) (("1" (LEMMA "location_at_check") (("1" (INST - "flpl" "kk!1") (("1" (REPLACE -4 :DIR RL) (("1" (REPLACE -1) (("1" (CASE "seg_lh_bottom(flpl,to,T)(kk!1) = tt!1") (("1" (REPLACE -1) (("1" (CASE "flpl(kk!1)`position = lh_start_position(flpl,to,T)(kk!1)") (("1" (REWRITE "vz_distr_sub") (("1" (REWRITE "vz_distr_add") (("1" (REWRITE "vz_scal") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "lh_start_position") (("2" (REPLACE -1) (("2" (REPLACE -5 :DIR RL) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "seg_lh_bottom" 1) (("2" (EXPAND "max") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (INST + "kk!1-1") (("1" (ASSERT) (("1" (INST + "seg_lh_top(flpl,to,T)(kk!1 - 1) -
                                                                                            seg_lh_bottom(flpl,to,T)(kk!1 - 1)") (("1" (LEMMA "location_at_check") (("1" (INST - "flpl" "kk!1") (("1" (REPLACE -4 :DIR RL) (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (CASE "(so + (seg_lh_bottom(flpl,to,T)(kk!1 - 1) - to) * vo) -
                                                                                                                           lh_start_position(flpl,to,T)(kk!1 - 1)
                                                                                                                     +
                                                                                                                     (seg_lh_top(flpl,to,T)(kk!1 - 1) -
                                                                                                                       seg_lh_bottom(flpl,to,T)(kk!1 - 1))
                                                                                                                      * (vo - velocity(flpl)(kk!1 - 1)) = (so + (tt!1 - to) * vo) - flpl(kk!1)`position") (("1" (CASE "((so + (seg_lh_bottom(flpl,to,T)(kk!1 - 1) - to) * vo) -
                                                                                                                                   lh_start_position(flpl,to,T)(kk!1 - 1))`z
                                                                                                                                  +
                                                                                                                                  (seg_lh_top(flpl,to,T)(kk!1 - 1) -
                                                                                                                                    seg_lh_bottom(flpl,to,T)(kk!1 - 1))
                                                                                                                                   * (vo - velocity(flpl)(kk!1 - 1))`z = so`z - flpl(kk!1)`position`z - vo`z * to + tt!1 * vo`z AND vect2((so + (seg_lh_bottom(flpl,to,T)(kk!1 - 1) - to) * vo) -
                                                                                                                                         lh_start_position(flpl,to,T)(kk!1 - 1))
                                                                                                                                   +
                                                                                                                                   (seg_lh_top(flpl,to,T)(kk!1 - 1) -
                                                                                                                                     seg_lh_bottom(flpl,to,T)(kk!1 - 1))
                                                                                                                                    * vect2(vo - velocity(flpl)(kk!1 - 1)) = vect2((so + (tt!1 - to) * vo) - flpl(kk!1)`position)") (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1)) (("2" (NAME "lsp" "lh_start_position(flpl,to,T)(kk!1 - 1)") (("2" (REPLACE -1) (("2" (NAME "slb" "seg_lh_bottom(flpl,to,T)(kk!1 - 1)") (("2" (REPLACE -1) (("2" (NAME "slt" "seg_lh_top(flpl,to,T)(kk!1 - 1)") (("2" (REPLACE -1) (("2" (NAME "velc" "velocity(flpl)(kk!1-1)") (("2" (REPLACE -1) (("2" (HIDE -1) (("2" (HIDE -1) (("2" (HIDE -1) (("2" (HIDE -1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (LEMMA "velocity_def") (("2" (INST - "flpl" "kk!1-1") (("2" (ASSERT) (("2" (CASE "flpl(kk!1-1)`time >= to") (("1" (CASE "seg_lh_bottom(flpl,to,T)(kk!1-1) = flpl(kk!1-1)`time") (("1" (REPLACE -1) (("1" (CASE "flpl(kk!1)`time <= to+T") (("1" (CASE "seg_lh_top(flpl,to,T)(kk!1-1) = flpl(kk!1)`time") (("1" (REPLACE -1) (("1" (EXPAND "lh_start_position") (("1" (REPLACE -3) (("1" (ASSERT) (("1" (REPLACE -8) (("1" (HIDE-ALL-BUT (-5 1)) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1)) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "seg_lh_bottom") (("2" (EXPAND "max") (("2" (LIFT-IF) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "NOT seg_lh_bottom(flpl,to,T)(kk!1-1) = to") (("1" (EXPAND "seg_lh_bottom" 1) (("1" (EXPAND "max") (("1" (LIFT-IF) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "lh_start_position") (("2" (REPLACE -1) (("2" (ASSERT) (("2" (EXPAND "seg_lh_top") (("2" (EXPAND "min") (("2" (HIDE-ALL-BUT (-2 2 1)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (NAME "jj" "segment(flpl)(tt!1)") (("2" (LABEL "jjname" -1) (("2" (NAME "jjname" -1) (("2" (INST 2 "jj") (("1" (LEMMA "segment_def") (("1" (INST - "flpl" "tt!1") (("1" (FLATTEN) (("1" (CASE "jj < N-1") (("1" (ASSERT) (("1" (CASE "flpl(jj)`time < tt!1") (("1" (CASE "seg_lh_bottom(flpl,to,T)(jj) < seg_lh_top(flpl,to,T)(jj)") (("1" (ASSERT) (("1" (NAME "newt" "tt!1-seg_lh_bottom(flpl,to,T)(jj)") (("1" (INST 2 "newt") (("1" (CASE "(so + (seg_lh_bottom(flpl,to,T)(jj) - to) * vo) -
                                                                                                                                                lh_start_position(flpl,to,T)(jj)
                                                                                                                                          + newt *(vo - velocity(flpl)(jj)) = (so + (tt!1 - to) * vo) - location_at(flpl)(tt!1)") (("1" (CASE "((so + (seg_lh_bottom(flpl,to,T)(jj) - to) * vo) -
                                                                                                                                                      lh_start_position(flpl,to,T)(jj))`z
                                                                                                                                                     + newt * (vo - velocity(flpl)(jj))`z = so`z - location_at(flpl)(tt!1)`z - vo`z * to + tt!1 * vo`z AND vect2((so + (seg_lh_bottom(flpl,to,T)(jj) - to) * vo) -
                                                                                                                                                            lh_start_position(flpl,to,T)(jj))
                                                                                                                                                      + newt * vect2(vo - velocity(flpl)(jj)) = vect2((so + (tt!1 - to) * vo) - location_at(flpl)(tt!1))") (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1)) (("2" (NAME "slb1" "seg_lh_bottom(flpl,to,T)(jj)") (("2" (NAME "lsp" "lh_start_position(flpl,to,T)(jj)") (("2" (NAME "lal" "location_at(flpl)(tt!1)") (("2" (NAME "v1" "velocity(flpl)(jj)") (("2" (REPLACE -1) (("2" (HIDE -1) (("2" (REPLACE -1) (("2" (HIDE -1) (("2" (REPLACE -1) (("2" (HIDE -1) (("2" (REPLACE -1) (("2" (HIDE -1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (EXPAND "location_at") (("2" (REPLACE "jjname") (("2" (HIDE "jjname") (("2" (HIDE -12) (("2" (HIDE -12) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "seg_lh_bottom(flpl,to,T)(jj) <= tt!1 AND tt!1 <= seg_lh_top(flpl,to,T)(jj)") (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "seg_lh_bottom" 1) (("2" (EXPAND "seg_lh_top" 1) (("2" (EXPAND "max") (("2" (EXPAND "min") (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (EXPAND "seg_lh_bottom") (("2" (EXPAND "seg_lh_top") (("2" (EXPAND "max") (("2" (EXPAND "min") (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST 2 "jj") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (CASE "jj = N-1") (("1" (REPLACE -1) (("1" (HIDE -3) (("1" (HIDE 1) (("1" (INST + "N-1") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST + "N-1") (("1" (EXPAND "segment") (("1" (TYPEPRED "max(extend[nat, below[N], bool, FALSE]
                                                      ({j: below[N] | tt!1 >= flpl(j)`time}))") (("1" (REPLACE "jjname") (("1" (EXPAND "extend") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (EXPAND "conflict_3D?") (("2" (SKOSIMP*) (("2" (TYPEPRED "t!1") (("2" (NAME "newt" "seg_lh_bottom(flpl,to,T)(j!1) + t!1") (("2" (CASE "to<=newt AND newt<=to+T") (("1" (FLATTEN) (("1" (INST + "newt") (("1" (CASE "(so + (seg_lh_bottom(flpl,to,T)(j!1) - to) * vo) -
                                                                   lh_start_position(flpl,to,T)(j!1)
                                                             + t!1 * (vo - velocity(flpl)(j!1)) = (so + (newt - to) * vo) - location_at(flpl)(newt)") (("1" (CASE "((so + (seg_lh_bottom(flpl,to,T)(j!1) - to) * vo) -
                                                                      lh_start_position(flpl,to,T)(j!1))`z
                                                                     + t!1 * (vo - velocity(flpl)(j!1))`z = so`z + newt * vo`z - location_at(flpl)(newt)`z - vo`z * to AND vect2((so + (seg_lh_bottom(flpl,to,T)(j!1) - to) * vo) -
                                                                           lh_start_position(flpl,to,T)(j!1))
                                                                     + t!1 * vect2(vo - velocity(flpl)(j!1)) = vect2((so + (newt - to) * vo) - location_at(flpl)(newt))") (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (HIDE-ALL-BUT (-1 1)) (("2" (NAME "slb1" "seg_lh_bottom(flpl,to,T)(j!1)") (("2" (NAME "lsp" "lh_start_position(flpl,to,T)(j!1)") (("2" (NAME "sltop" "seg_lh_top(flpl,to,T)(j!1)") (("2" (NAME "loc1" "location_at(flpl)(newt)") (("2" (NAME "velc" "velocity(flpl)(j!1)") (("2" (REPLACE -1) (("2" (HIDE -1) (("2" (REPLACE -1) (("2" (HIDE -1) (("2" (HIDE -1) (("2" (REPLACE -1) (("2" (HIDE -1) (("2" (REPLACE -1) (("2" (HIDE -1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (HIDE -7) (("2" (HIDE -7) (("2" (CASE "t!1 < seg_lh_top(flpl,to,T)(j!1) - seg_lh_bottom(flpl,to,T)(j!1)") (("1" (CASE "segment(flpl)(newt) = j!1") (("1" (EXPAND "location_at") (("1" (REPLACE -1) (("1" (LIFT-IF) (("1" (ASSERT) (("1" (HIDE -1) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (NAME "pj" "segment(flpl)(newt)") (("2" (REPLACE -1) (("2" (CASE "newt >= flpl(j!1)`time AND newt < flpl(j!1+1)`time") (("1" (FLATTEN) (("1" (COPY -3) (("1" (EXPAND "segment" -1) (("1" (TYPEPRED "max(extend[nat, below[N], bool, FALSE]
                                              ({j: below[N] | newt >= flpl(j)`time}))") (("1" (REPLACE -3) (("1" (EXPAND "extend") (("1" (ASSERT) (("1" (CASE "pj < 1+j!1") (("1" (INST - "j!1") (("1" (LIFT-IF) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (LEMMA "flight_plan_ascending_time") (("2" (INST - "flpl" "pj" "1+j!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "seg_lh_top(flpl,to,T)(j!1) <= flpl(j!1+1)`time AND seg_lh_bottom(flpl,to,T)(j!1) >= flpl(j!1)`time") (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "seg_lh_top" 1) (("2" (EXPAND "seg_lh_bottom" 1) (("2" (EXPAND "min") (("2" (EXPAND "max") (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "newt = seg_lh_top(flpl,to,T)(j!1)") (("1" (CASE "to+T < flpl(j!1+1)`time") (("1" (CASE "segment(flpl)(newt) = j!1") (("1" (EXPAND "location_at") (("1" (REPLACE -1) (("1" (LIFT-IF) (("1" (ASSERT) (("1" (CASE "seg_lh_top(flpl,to,T)(j!1) = to+T") (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (HIDE -1) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "seg_lh_top" 1) (("2" (EXPAND "min") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (NAME "pj" "segment(flpl)(newt)") (("2" (REPLACE -1) (("2" (CASE "newt >= flpl(j!1)`time AND newt < flpl(j!1+1)`time") (("1" (FLATTEN) (("1" (COPY -3) (("1" (EXPAND "segment" -1) (("1" (TYPEPRED "max(extend[nat, below[N], bool, FALSE]
                                                  ({j: below[N] | newt >= flpl(j)`time}))") (("1" (REPLACE -3) (("1" (EXPAND "extend") (("1" (ASSERT) (("1" (CASE "pj < 1+j!1") (("1" (INST - "j!1") (("1" (LIFT-IF) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (LEMMA "flight_plan_ascending_time") (("2" (INST - "flpl" "pj" "1+j!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1) (("2" (HIDE 3) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "newt = flpl(j!1+1)`time") (("1" (LEMMA "location_at_check") (("1" (INST - "flpl" "j!1+1") (("1" (REPLACE -2 :DIR RL) (("1" (REPLACE -1) (("1" (REPLACE -2) (("1" (HIDE -1) (("1" (EXPAND "lh_start_position") (("1" (LEMMA "velocity_def") (("1" (INST - "flpl" "j!1") (("1" (NAME "vel11" "velocity(flpl)(j!1)") (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 4) (("2" (EXPAND "seg_lh_top" -1) (("2" (EXPAND "min") (("2" (LIFT-IF) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (CASE "seg_lh_bottom(flpl,to,T)(j!1) >= start_time(flpl) AND seg_lh_top(flpl,to,T)(j!1) <= end_time(flpl)") (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "seg_lh_bottom") (("2" (EXPAND "start_time") (("2" (EXPAND "end_time") (("2" (EXPAND "seg_lh_top") (("2" (LEMMA "flight_plan_ascending_time") (("2" (INST-CP - "flpl" "N-1" "1+j!1") (("2" (INST - "flpl" "j!1" "0") (("2" (EXPAND "max") (("2" (EXPAND "min") (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (CASE "seg_lh_bottom(flpl,to,T)(j!1) >= start_time(flpl) AND seg_lh_top(flpl,to,T)(j!1) <= end_time(flpl)") (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "seg_lh_bottom") (("2" (EXPAND "start_time") (("2" (EXPAND "end_time") (("2" (EXPAND "seg_lh_top") (("2" (LEMMA "flight_plan_ascending_time") (("2" (INST-CP - "flpl" "N-1" "1+j!1") (("2" (INST - "flpl" "j!1" "0") (("2" (EXPAND "max") (("2" (EXPAND "min") (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "seg_lh_bottom(flpl,to,T)(j!1) >= to AND seg_lh_top(flpl,to,T)(j!1) <= to+T") (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE 3) (("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL) (|conflict_3D_rew-1| |nil| 3473074224 ("" (POSTPONE) NIL NIL) NIL SHOSTAK)) (|conflict_3D_flightplan_open_interval_TCC1| 0 (|conflict_3D_flightplan_open_interval_TCC1-1| |nil| 3483460389 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |int_types| NIL) (N FORMAL-CONST-DECL "above[1]" |cd3d_si| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|Vect3| TYPE-EQ-DECL NIL |vectors_3D_def| |vectors|) (|FlightPlan| NONEMPTY-TYPE-EQ-DECL NIL |flightplan| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (B FORMAL-CONST-DECL "nnreal" |cd3d_si| NIL) (T FORMAL-CONST-DECL "{AB: posreal | AB > B}" |cd3d_si| NIL) (|FlightPlanRelevant| NONEMPTY-TYPE-EQ-DECL NIL |cd3d_si| NIL) (<= CONST-DECL "bool" |reals| NIL) (|start_time| CONST-DECL "real" |flightplan| NIL) (|end_time| CONST-DECL "real" |flightplan| NIL) (|FlightTimes| NONEMPTY-TYPE-EQ-DECL NIL |flightplan| NIL) (|FlightTimesRelevant| TYPE-EQ-DECL NIL |cd3d_si| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|conflict_3D_flightplan_open_interval| SUBTYPE "(number_fields.-)(cd3d_si.N, 1)" "below[N]"))) (|conflict_3D_flightplan_open_interval| 0 (|conflict_3D_flightplan_open_interval-2| "" 3884849202 ("" (SKEEP) (("" (SPLIT) (("1" (FLATTEN) (("1" (LEMMA "conflict_3D_rew") (("1" (INST?) (("1" (ASSERT) (("1" (SKOSIMP*) (("1" (NAME "lhb" "seg_lh_bottom(flpl, to)(j!1)") (("1" (REPLACE -1) (("1" (NAME "lht" "seg_lh_top(flpl, to)(j!1)") (("1" (REPLACE -1) (("1" (LEMMA "conflict_3D_on_open_interval[D, H, seg_lh_bottom(flpl, to)(j!1), seg_lh_top(flpl, to)(j!1)]") (("1" (INST?) (("1" (ASSERT) (("1" (REPLACE -2) (("1" (REPLACE -3) (("1" (SKOSIMP*) (("1" (NAME "ttp" "topen!1 + flpl(j!1)`time") (("1" (CASE "NOT (start_time[N](flpl) <= flpl(j!1)`time + topen!1 AND
       flpl(j!1)`time + topen!1 <= end_time[N](flpl))") (("1" (HIDE 2) (("1" (CASE "topen!1 > 0") (("1" (EXPAND "start_time") (("1" (LEMMA "flight_plan_ascending_time") (("1" (INST - "flpl" "j!1" "0") (("1" (ASSERT) (("1" (CASE "j!1 /= 0") (("1" (ASSERT) (("1" (EXPAND "end_time") (("1" (CASE "flpl(j!1)`time + topen!1 < flpl(j!1+1)`time") (("1" (LEMMA "flight_plan_ascending_time") (("1" (INST - "flpl" "N-1" "j!1+1") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "lht" -6) (("2" (EXPAND "seg_lh_top" -6) (("2" (EXPAND "min") (("2" (LIFT-IF) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) (("2" (EXPAND "end_time") (("2" (CASE "flpl(j!1)`time + topen!1 < flpl(j!1+1)`time") (("1" (CASE "j!1+1 = N-1") (("1" (ASSERT) NIL NIL) ("2" (LEMMA "flight_plan_ascending_time") (("2" (INST - "flpl" "N-1" "j!1+1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "lht" -6) (("2" (EXPAND "seg_lh_top" -6) (("2" (EXPAND "min") (("2" (LIFT-IF) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "lhb" -2) (("2" (EXPAND "seg_lh_bottom" -2) (("2" (EXPAND "max") (("2" (LIFT-IF) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (INST + "ttp") (("1" (CASE "NOT B+to<ttp") (("1" (HIDE 2) (("1" (HIDE (-1 -2)) (("1" (REPLACE -1 1 :DIR RL) (("1" (HIDE -1) (("1" (EXPAND "lht" -2) (("1" (EXPAND "lhb" -1) (("1" (EXPAND "seg_lh_bottom" -1) (("1" (EXPAND "max" -1) (("1" (LIFT-IF) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (CASE "NOT ttp < T+to") (("1" (HIDE (-2 -3)) (("1" (HIDE 2) (("1" (EXPAND "lht" -4) (("1" (EXPAND "seg_lh_top" -4) (("1" (EXPAND "min") (("1" (LIFT-IF) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (CASE "(so + (flpl(j!1)`time - to) * vo) - flpl(j!1)`position +
                                             topen!1 * (vo - velocity(flpl)(j!1)) = (so + (ttp - to) * vo) - location_at(flpl)(ttp)") (("1" (CASE "vect2((so + (flpl(j!1)`time - to) * vo) - flpl(j!1)`position) +
                                                 topen!1 * vect2(vo - velocity(flpl)(j!1)) = vect2((so + (ttp - to) * vo) - location_at(flpl)(ttp)) AND ((so + (flpl(j!1)`time - to) * vo) - flpl(j!1)`position)`z +
                                                 topen!1 * (vo - velocity(flpl)(j!1))`z = so`z - location_at(flpl)(ttp)`z - vo`z * to + ttp * vo`z") (("1" (FLATTEN) (("1" (ASSERT) (("1" (HIDE -1 -2 -3 -11 -12 -16 -17) (("1" (EXPAND "end_time") (("1" (EXPAND "start_time") (("1" (ASSERT) (("1" (CASE "flpl(j!1)`time + lht <= flpl(j!1+1)`time") (("1" (LEMMA "flight_plan_ascending_time[N]") (("1" (INST - "flpl" "N-1" "j!1+1") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (EXPAND "seg_lh_top") (("2" (EXPAND "seg_lh_bottom") (("2" (EXPAND "min") (("2" (EXPAND "max") (("2" (LIFT-IF) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (HIDE (-4 -5)) (("2" (REPLACE -4 :DIR RL) (("2" (HIDE-ALL-BUT (-1 1)) (("2" (GRIND :EXCLUDE ("flpl" "position" "velocity" "location_at" "ttp")) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (REPLACE -5 :DIR RL) (("2" (EXPAND "location_at") (("2" (CASE "segment(flpl)(flpl(j!1)`time + topen!1) = j!1") (("1" (REPLACE -1) (("1" (CASE "j!1 < N-1") (("1" (ASSERT) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND :EXCLUDE "velocity") NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (LEMMA "segment_index") (("2" (INST - "flpl" "j!1" "flpl(j!1)`time + topen!1") (("2" (ASSERT) (("2" (HIDE 2) (("2" (EXPAND "lht" -7) (("2" (EXPAND "seg_lh_top" -7) (("2" (EXPAND "min") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (REPLACE -3 + :DIR RL) (("2" (EXPAND "lhb" -4) (("2" (EXPAND "lht" -5) (("2" (EXPAND "seg_lh_bottom" -4) (("2" (EXPAND "seg_lh_top" -5) (("2" (EXPAND "max") (("2" (EXPAND "min") (("2" (LIFT-IF) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (EXPAND "conflict_3D?") (("2" (INST + "tt!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|conflict_3D_flightplan_open_interval-1| |nil| 3483369488 ("" (SKEEP) (("" (SPLIT) (("1" (FLATTEN) (("1" (LEMMA "conflict_3D_rew") (("1" (INST?) (("1" (ASSERT) (("1" (SKOSIMP*) (("1" (NAME "lhb" "seg_lh_bottom(flpl, to)(j!1)") (("1" (REPLACE -1) (("1" (NAME "lht" "seg_lh_top(flpl, to)(j!1)") (("1" (REPLACE -1) (("1" (LEMMA "conflict_3D_on_open_interval[D, H, seg_lh_bottom(flpl, to)(j!1), seg_lh_top(flpl, to)(j!1)]") (("1" (INST?) (("1" (ASSERT) (("1" (REPLACE -2) (("1" (REPLACE -3) (("1" (SKOSIMP*) (("1" (NAME "ttp" "topen!1 + flpl(j!1)`time") (("1" (CASE "NOT (start_time[N](flpl) <= flpl(j!1)`time + topen!1 AND
       flpl(j!1)`time + topen!1 <= end_time[N](flpl))") (("1" (HIDE 2) (("1" (CASE "topen!1 > 0") (("1" (EXPAND "start_time") (("1" (LEMMA "flight_plan_ascending_time") (("1" (INST - "flpl" "j!1" "0") (("1" (ASSERT) (("1" (CASE "j!1 /= 0") (("1" (ASSERT) (("1" (EXPAND "end_time") (("1" (CASE "flpl(j!1)`time + topen!1 < flpl(j!1+1)`time") (("1" (LEMMA "flight_plan_ascending_time") (("1" (INST - "flpl" "N-1" "j!1+1") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "lht" -6) (("2" (EXPAND "seg_lh_top" -6) (("2" (EXPAND "min") (("2" (LIFT-IF) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) (("2" (EXPAND "end_time") (("2" (CASE "flpl(j!1)`time + topen!1 < flpl(j!1+1)`time") (("1" (CASE "j!1+1 = N-1") (("1" (ASSERT) NIL NIL) ("2" (LEMMA "flight_plan_ascending_time") (("2" (INST - "flpl" "N-1" "j!1+1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "lht" -6) (("2" (EXPAND "seg_lh_top" -6) (("2" (EXPAND "min") (("2" (LIFT-IF) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "lhb" -2) (("2" (EXPAND "seg_lh_bottom" -2) (("2" (EXPAND "max") (("2" (LIFT-IF) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (INST + "ttp") (("1" (CASE "NOT B+to<ttp") (("1" (HIDE 2) (("1" (HIDE (-1 -2)) (("1" (REPLACE -1 1 :DIR RL) (("1" (HIDE -1) (("1" (EXPAND "lht" -2) (("1" (EXPAND "lhb" -1) (("1" (EXPAND "seg_lh_bottom" -1) (("1" (EXPAND "max" -1) (("1" (LIFT-IF) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (CASE "NOT ttp < T+to") (("1" (HIDE (-2 -3)) (("1" (HIDE 2) (("1" (EXPAND "lht" -4) (("1" (EXPAND "seg_lh_top" -4) (("1" (EXPAND "min") (("1" (LIFT-IF) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (CASE "(so + (flpl(j!1)`time - to) * vo) - flpl(j!1)`position +
                                             topen!1 * (vo - velocity(flpl)(j!1)) = (so + (ttp - to) * vo) - location_at(flpl)(ttp)") (("1" (CASE "vect2((so + (flpl(j!1)`time - to) * vo) - flpl(j!1)`position) +
                                                 topen!1 * vect2(vo - velocity(flpl)(j!1)) = vect2((so + (ttp - to) * vo) - location_at(flpl)(ttp)) AND ((so + (flpl(j!1)`time - to) * vo) - flpl(j!1)`position)`z +
                                                 topen!1 * (vo - velocity(flpl)(j!1))`z = so`z - location_at(flpl)(ttp)`z - vo`z * to + ttp * vo`z") (("1" (FLATTEN) (("1" (ASSERT) (("1" (HIDE -1 -2 -3 -11 -12 -16 -17) (("1" (EXPAND "end_time") (("1" (EXPAND "start_time") (("1" (ASSERT) (("1" (CASE "flpl(j!1)`time + lht <= flpl(j!1+1)`time") (("1" (LEMMA FLIGHT_PLAN_ASCENDING_TIME[N]) (("1" (INST - FLPL "N-1" "j!1+1") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (EXPAND "seg_lh_top") (("2" (EXPAND "seg_lh_bottom") (("2" (EXPAND "min") (("2" (EXPAND "max") (("2" (LIFT-IF) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (HIDE (-4 -5)) (("2" (REPLACE -4 :DIR RL) (("2" (HIDE-ALL-BUT (-1 1)) (("2" (GRIND :EXCLUDE ("flpl" "position" "velocity" "location_at" "ttp")) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (REPLACE -5 :DIR RL) (("2" (EXPAND "location_at") (("2" (CASE "segment(flpl)(flpl(j!1)`time + topen!1) = j!1") (("1" (REPLACE -1) (("1" (CASE "j!1 < N-1") (("1" (ASSERT) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND :EXCLUDE "velocity") NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (LEMMA "segment_index") (("2" (INST - "flpl" "j!1" "flpl(j!1)`time + topen!1") (("2" (ASSERT) (("2" (HIDE 2) (("2" (EXPAND "lht" -7) (("2" (EXPAND "seg_lh_top" -7) (("2" (EXPAND "min") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (REPLACE -3 + :DIR RL) (("2" (EXPAND "lhb" -4) (("2" (EXPAND "lht" -5) (("2" (EXPAND "seg_lh_bottom" -4) (("2" (EXPAND "seg_lh_top" -5) (("2" (EXPAND "max") (("2" (EXPAND "min") (("2" (LIFT-IF) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (EXPAND "conflict_3D?") (("2" (INST + "tt!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|conflict_3D_rew| FORMULA-DECL NIL |cd3d_si| NIL) (|seg_lh_bottom| CONST-DECL "nnreal" |cd3d_si| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|seg_lh_top| CONST-DECL "real" |cd3d_si| NIL) (H FORMAL-CONST-DECL "posreal" |cd3d_si| NIL) (D FORMAL-CONST-DECL "posreal" |cd3d_si| NIL) (|conflict_3D_on_open_interval| FORMULA-DECL NIL |cd3d| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|Lookahead| TYPE-EQ-DECL NIL |Lookahead| NIL) (<= CONST-DECL "bool" |reals| NIL) (|location_at| CONST-DECL "Vect3" |flightplan| NIL) (|Vector| TYPE-EQ-DECL NIL |vectors_2D| |vectors|) (+ CONST-DECL "Vector" |vectors_2D| |vectors|) (|Vect2| TYPE-EQ-DECL NIL |vectors_2D_def| |vectors|) (|vect2| CONST-DECL "Vect2" |vect_3D_2D| |vectors|) (* CONST-DECL "Vector" |vectors_2D| |vectors|) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|segment| CONST-DECL "below[N]" |flightplan| NIL) (|segment_index| FORMULA-DECL NIL |flightplan| NIL) (|FlightTimesRelevant| TYPE-EQ-DECL NIL |cd3d_si| NIL) (|FlightTimes| NONEMPTY-TYPE-EQ-DECL NIL |flightplan| NIL) (|to| SKOLEM-CONST-DECL "real" |cd3d_si| NIL) (|flpl| SKOLEM-CONST-DECL "FlightPlanRelevant(to)" |cd3d_si| NIL) (|ttp| SKOLEM-CONST-DECL "real" |cd3d_si| NIL) (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL) (|lhb| SKOLEM-CONST-DECL "nnreal" |cd3d_si| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (|lht| SKOLEM-CONST-DECL "real" |cd3d_si| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|sqv_cont| NAME-JUDGEMENT "continuous_vr_fun" |vect_cont_2D| |vect_analysis|) (|sq_nz_pos| APPLICATION-JUDGEMENT "posreal" |sq| |reals|) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|flight_plan_ascending_time| FORMULA-DECL NIL |flightplan| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|start_time| CONST-DECL "real" |flightplan| NIL) (|end_time| CONST-DECL "real" |flightplan| NIL) (|velocity| CONST-DECL "Vect3" |flightplan| NIL) (* CONST-DECL "Vector" |vectors_3D| |vectors|) (+ CONST-DECL "Vector" |vectors_3D| |vectors|) (- CONST-DECL "Vector" |vectors_3D| |vectors|) (|Vector| TYPE-EQ-DECL NIL |vectors_3D| |vectors|) (|FlightPlanRelevant| NONEMPTY-TYPE-EQ-DECL NIL |cd3d_si| NIL) (T FORMAL-CONST-DECL "{AB: posreal | AB > B}" |cd3d_si| NIL) (B FORMAL-CONST-DECL "nnreal" |cd3d_si| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|FlightPlan| NONEMPTY-TYPE-EQ-DECL NIL |flightplan| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (N FORMAL-CONST-DECL "above[1]" |cd3d_si| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |int_types| NIL) (> CONST-DECL "bool" |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|Vect3| TYPE-EQ-DECL NIL |vectors_3D_def| |vectors|) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|conflict_3D?| CONST-DECL "bool" |cd3d_si| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) SHOSTAK)) (|conflict_3D_rew_absolute_time_TCC1| 0 (|conflict_3D_rew_absolute_time_TCC1-1| |nil| 3481469113 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |int_types| NIL) (N FORMAL-CONST-DECL "above[1]" |cd3d_si| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|Vect3| TYPE-EQ-DECL NIL |vectors_3D_def| |vectors|) (|FlightPlan| NONEMPTY-TYPE-EQ-DECL NIL |flightplan| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (B FORMAL-CONST-DECL "nnreal" |cd3d_si| NIL) (T FORMAL-CONST-DECL "{AB: posreal | AB > B}" |cd3d_si| NIL) (|FlightPlanRelevant| NONEMPTY-TYPE-EQ-DECL NIL |cd3d_si| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|seg_lh_bottom| CONST-DECL "nnreal" |cd3d_si| NIL) (|seg_lh_top| CONST-DECL "real" |cd3d_si| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL)) NIL (|conflict_3D_rew_absolute_time| SUBTYPE "cd3d_si.lb" "nnreal"))) (|conflict_3D_rew_absolute_time_TCC2| 0 (|conflict_3D_rew_absolute_time_TCC2-1| |nil| 3481469113 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |int_types| NIL) (N FORMAL-CONST-DECL "above[1]" |cd3d_si| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|Vect3| TYPE-EQ-DECL NIL |vectors_3D_def| |vectors|) (|FlightPlan| NONEMPTY-TYPE-EQ-DECL NIL |flightplan| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (B FORMAL-CONST-DECL "nnreal" |cd3d_si| NIL) (T FORMAL-CONST-DECL "{AB: posreal | AB > B}" |cd3d_si| NIL) (|FlightPlanRelevant| NONEMPTY-TYPE-EQ-DECL NIL |cd3d_si| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|seg_lh_bottom| CONST-DECL "nnreal" |cd3d_si| NIL) (|seg_lh_top| CONST-DECL "real" |cd3d_si| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL)) NIL (|conflict_3D_rew_absolute_time| SUBTYPE "cd3d_si.ub" "{AB: real_types.posreal | reals.>(AB, cd3d_si.lb)}"))) (|conflict_3D_rew_absolute_time| 0 (|conflict_3D_rew_absolute_time-2| "" 3884849398 ("" (SKEEP) (("" (LEMMA "conflict_3D_rew") (("" (INST?) (("" (REPLACE -1) (("" (HIDE -1) (("" (GROUND) (("1" (SKEEP -1) (("1" (INST?) (("1" (ASSERT) (("1" (EXPAND "conflict_3D?") (("1" (SKEEP -2) (("1" (INST + "t+flpl(j)`time-to") (("1" (ASSERT) (("1" (CASE "NOT vect2(so -
                  (flpl(j)`position -
                    (flpl(j)`time - to) * velocity(flpl)(j)))
            + (flpl(j)`time - to + t) * vect2(vo - velocity(flpl)(j)) = vect2((so + (flpl(j)`time - to) * vo) - flpl(j)`position) +
           t * vect2(vo - velocity(flpl)(j))") (("1" (HIDE-ALL-BUT 1) (("1" (GRIND :EXCLUDE ("velocity")) NIL NIL)) NIL) ("2" (ASSERT) (("2" (CASE "NOT (so -
            (flpl(j)`position - (flpl(j)`time - to) * velocity(flpl)(j)))`z
           + flpl(j)`time * (vo - velocity(flpl)(j))`z
           + (vo - velocity(flpl)(j))`z * t
           - (vo - velocity(flpl)(j))`z * to=((so + (flpl(j)`time - to) * vo) - flpl(j)`position)`z +
           t * (vo - velocity(flpl)(j))`z") (("1" (HIDE-ALL-BUT 1) (("1" (GRIND :EXCLUDE ("velocity")) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (TYPEPRED "t") (("2" (ASSERT) (("2" (EXPAND "seg_lh_bottom") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP -1) (("2" (INST?) (("2" (ASSERT) (("2" (EXPAND "conflict_3D?") (("2" (SKEEP -2) (("2" (INST + "t+to-flpl(j)`time") (("2" (ASSERT) (("2" (HIDE -1) (("2" (GRIND :EXCLUDE ("velocity" "abs" "sqv" "sq")) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|conflict_3D_rew_absolute_time-1| |nil| 3481469114 ("" (SKEEP) (("" (LEMMA "conflict_3D_rew") (("" (INST?) (("" (REPLACE -1) (("" (HIDE -1) (("" (GROUND) (("1" (SKEEP -1) (("1" (INST?) (("1" (ASSERT) (("1" (EXPAND CONFLICT_3D?) (("1" (SKEEP -2) (("1" (INST + "t+flpl(j)`time-to") (("1" (ASSERT) (("1" (CASE "NOT vect2(so -
                  (flpl(j)`position -
                    (flpl(j)`time - to) * velocity(flpl)(j)))
            + (flpl(j)`time - to + t) * vect2(vo - velocity(flpl)(j)) = vect2((so + (flpl(j)`time - to) * vo) - flpl(j)`position) +
           t * vect2(vo - velocity(flpl)(j))") (("1" (HIDE-ALL-BUT 1) (("1" (GRIND :EXCLUDE ("velocity")) NIL NIL)) NIL) ("2" (ASSERT) (("2" (CASE "NOT (so -
            (flpl(j)`position - (flpl(j)`time - to) * velocity(flpl)(j)))`z
           + flpl(j)`time * (vo - velocity(flpl)(j))`z
           + (vo - velocity(flpl)(j))`z * t
           - (vo - velocity(flpl)(j))`z * to=((so + (flpl(j)`time - to) * vo) - flpl(j)`position)`z +
           t * (vo - velocity(flpl)(j))`z") (("1" (HIDE-ALL-BUT 1) (("1" (GRIND :EXCLUDE ("velocity")) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (TYPEPRED T) (("2" (ASSERT) (("2" (EXPAND "seg_lh_bottom") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP -1) (("2" (INST?) (("2" (ASSERT) (("2" (EXPAND "conflict_3D?") (("2" (SKEEP -2) (("2" (INST + "t+to-flpl(j)`time") (("2" (ASSERT) (("2" (HIDE -1) (("2" (GRIND :EXCLUDE ("velocity" "abs" "sqv" "sq")) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|conflict_3D_rew| FORMULA-DECL NIL |cd3d_si| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|conflict_3D?| CONST-DECL "bool" |cd3d| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|t| SKOLEM-CONST-DECL "Lookahead[seg_lh_bottom(flpl, to)(j), seg_lh_top(flpl, to)(j)]" |cd3d_si| NIL) (|Lookahead| TYPE-EQ-DECL NIL |Lookahead| NIL) (|seg_lh_top| CONST-DECL "real" |cd3d_si| NIL) (|seg_lh_bottom| CONST-DECL "nnreal" |cd3d_si| NIL) (<= CONST-DECL "bool" |reals| NIL) (|j| SKOLEM-CONST-DECL "below[N - 1]" |cd3d_si| NIL) (|flpl| SKOLEM-CONST-DECL "FlightPlanRelevant(to)" |cd3d_si| NIL) (|to| SKOLEM-CONST-DECL "real" |cd3d_si| NIL) (+ CONST-DECL "Vector" |vectors_3D| |vectors|) (* CONST-DECL "Vector" |vectors_2D| |vectors|) (|velocity| CONST-DECL "Vect3" |flightplan| NIL) (* CONST-DECL "Vector" |vectors_3D| |vectors|) (- CONST-DECL "Vector" |vectors_3D| |vectors|) (|Vector| TYPE-EQ-DECL NIL |vectors_3D| |vectors|) (|vect2| CONST-DECL "Vect2" |vect_3D_2D| |vectors|) (|Vect2| TYPE-EQ-DECL NIL |vectors_2D_def| |vectors|) (+ CONST-DECL "Vector" |vectors_2D| |vectors|) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|Vector| TYPE-EQ-DECL NIL |vectors_2D| |vectors|) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|sqv_cont| NAME-JUDGEMENT "continuous_vr_fun" |vect_cont_2D| |vect_analysis|) (|sq_nz_pos| APPLICATION-JUDGEMENT "posreal" |sq| |reals|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|FlightPlanRelevant| NONEMPTY-TYPE-EQ-DECL NIL |cd3d_si| NIL) (T FORMAL-CONST-DECL "{AB: posreal | AB > B}" |cd3d_si| NIL) (B FORMAL-CONST-DECL "nnreal" |cd3d_si| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|FlightPlan| NONEMPTY-TYPE-EQ-DECL NIL |flightplan| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (N FORMAL-CONST-DECL "above[1]" |cd3d_si| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |int_types| NIL) (> CONST-DECL "bool" |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|Vect3| TYPE-EQ-DECL NIL |vectors_3D_def| |vectors|) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)) SHOSTAK)) (|cd3d_ind?_TCC1| 0 (|cd3d_ind?_TCC1-1| |nil| 3472981403 ("" (SUBTYPE-TCC) NIL NIL) ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|Vect3| TYPE-EQ-DECL NIL |vectors_3D_def| |vectors|) (|FlightPlan| NONEMPTY-TYPE-EQ-DECL NIL |flightplan| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (B FORMAL-CONST-DECL "nnreal" |cd3d_si| NIL) (T FORMAL-CONST-DECL "{AB: posreal | AB > B}" |cd3d_si| NIL) (|FlightPlanRelevant| NONEMPTY-TYPE-EQ-DECL NIL |cd3d_si| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|seg_lh_bottom| CONST-DECL "nnreal" |cd3d_si| NIL) (|seg_lh_top| CONST-DECL "real" |cd3d_si| NIL) (* CONST-DECL "Vector" |vectors_3D| |vectors|) (+ CONST-DECL "Vector" |vectors_3D| |vectors|) (- CONST-DECL "Vector" |vectors_3D| |vectors|) (N FORMAL-CONST-DECL "above[1]" |cd3d_si| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |int_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|velocity| CONST-DECL "Vect3" |flightplan| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|cd3d_ind?| SUBTYPE "(number_fields.-)(cd3d_si.j, 1)" "below[N - 1]"))) (|cd3d_si?_TCC1| 0 (|cd3d_si?_TCC1-1| |nil| 3472981403 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|cd3d_si?| SUBTYPE "(number_fields.-)(cd3d_si.N, 2)" "below[N - 1]"))) (|cd3d_ind_correct| 0 (|cd3d_ind_correct-1| |nil| 3473095354 ("" (SKEEP) (("" (INDUCT "i") (("1" (FLATTEN) (("1" (INST + "0") (("1" (ASSERT) (("1" (EXPAND "cd3d_ind?") (("1" (FLATTEN) (("1" (ASSERT) (("1" (REWRITE "cd3d") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (EXPAND "cd3d_ind?" -3) (("2" (SPLIT -3) (("1" (FLATTEN) (("1" (INST + "1+jb") (("1" (ASSERT) (("1" (REWRITE "cd3d") NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (SKOSIMP*) (("2" (INST + "j!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (SKEEP) (("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("4" (ASSERT) NIL NIL) ("5" (ASSERT) NIL NIL)) NIL)) NIL) ((|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|seg_lh_top| CONST-DECL "real" |cd3d_si| NIL) (|seg_lh_bottom| CONST-DECL "nnreal" |cd3d_si| NIL) (<= CONST-DECL "bool" |reals| NIL) (|flpl| SKOLEM-CONST-DECL "FlightPlanRelevant(to)" |cd3d_si| NIL) (|to| SKOLEM-CONST-DECL "real" |cd3d_si| NIL) (|vo| SKOLEM-CONST-DECL "Vect3" |cd3d_si| NIL) (|so| SKOLEM-CONST-DECL "Vect3" |cd3d_si| NIL) (|cd3d_ind?| INDUCTIVE-DECL "bool" |cd3d_si| NIL) (|FlightPlanRelevant| NONEMPTY-TYPE-EQ-DECL NIL |cd3d_si| NIL) (T FORMAL-CONST-DECL "{AB: posreal | AB > B}" |cd3d_si| NIL) (B FORMAL-CONST-DECL "nnreal" |cd3d_si| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|FlightPlan| NONEMPTY-TYPE-EQ-DECL NIL |flightplan| NIL) (|Vect3| TYPE-EQ-DECL NIL |vectors_3D_def| |vectors|) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (D FORMAL-CONST-DECL "posreal" |cd3d_si| NIL) (H FORMAL-CONST-DECL "posreal" |cd3d_si| NIL) (|conflict_3D?| CONST-DECL "bool" |cd3d| NIL) (|Vector| TYPE-EQ-DECL NIL |vectors_3D| |vectors|) (- CONST-DECL "Vector" |vectors_3D| |vectors|) (+ CONST-DECL "Vector" |vectors_3D| |vectors|) (* CONST-DECL "Vector" |vectors_3D| |vectors|) (|velocity| CONST-DECL "Vect3" |flightplan| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|below_induction| FORMULA-DECL NIL |bounded_nat_inductions| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (> CONST-DECL "bool" |reals| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |int_types| NIL) (N FORMAL-CONST-DECL "above[1]" |cd3d_si| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (>= CONST-DECL "bool" |reals| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|cd3d| FORMULA-DECL NIL |cd3d| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK)) (|cd3d_ind_complete| 0 (|cd3d_ind_complete-1| |nil| 3473096278 ("" (SKEEP) (("" (INDUCT "i") (("1" (GROUND) (("1" (SKOLEM -2 "jjj") (("1" (GROUND) (("1" (EXPAND "cd3d_ind?") (("1" (REWRITE "cd3d" :DIR RL) (("1" (EXPAND "conflict_3D?") (("1" (SKOSIMP*) (("1" (INST + "t!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (SKOSIMP*) (("2" (EXPAND "cd3d_ind?" 1) (("2" (FLATTEN) (("2" (ASSERT) (("2" (INST + "j!1") (("2" (ASSERT) (("2" (CASE "j!1 = 1+jb") (("1" (REPLACE -1) (("1" (REWRITE "cd3d" :DIR RL) (("1" (EXPAND "conflict_3D?") (("1" (SKOSIMP*) (("1" (INST + "t!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL) ("4" (ASSERT) NIL NIL) ("5" (ASSERT) NIL NIL)) NIL)) NIL) ((|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|seg_lh_top| CONST-DECL "real" |cd3d_si| NIL) (|flpl| SKOLEM-CONST-DECL "FlightPlanRelevant(to)" |cd3d_si| NIL) (|FlightPlanRelevant| NONEMPTY-TYPE-EQ-DECL NIL |cd3d_si| NIL) (|to| SKOLEM-CONST-DECL "real" |cd3d_si| NIL) (T FORMAL-CONST-DECL "{AB: posreal | AB > B}" |cd3d_si| NIL) (B FORMAL-CONST-DECL "nnreal" |cd3d_si| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|seg_lh_bottom| CONST-DECL "nnreal" |cd3d_si| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (|FlightPlan| NONEMPTY-TYPE-EQ-DECL NIL |flightplan| NIL) (|Vect3| TYPE-EQ-DECL NIL |vectors_3D_def| |vectors|) (<= CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (D FORMAL-CONST-DECL "posreal" |cd3d_si| NIL) (H FORMAL-CONST-DECL "posreal" |cd3d_si| NIL) (|conflict_3D?| CONST-DECL "bool" |cd3d| NIL) (|Vector| TYPE-EQ-DECL NIL |vectors_3D| |vectors|) (- CONST-DECL "Vector" |vectors_3D| |vectors|) (+ CONST-DECL "Vector" |vectors_3D| |vectors|) (* CONST-DECL "Vector" |vectors_3D| |vectors|) (|velocity| CONST-DECL "Vect3" |flightplan| NIL) (|cd3d_ind?| INDUCTIVE-DECL "bool" |cd3d_si| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|below_induction| FORMULA-DECL NIL |bounded_nat_inductions| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (> CONST-DECL "bool" |reals| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |int_types| NIL) (N FORMAL-CONST-DECL "above[1]" |cd3d_si| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (>= CONST-DECL "bool" |reals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|Lookahead| TYPE-EQ-DECL NIL |Lookahead| NIL) (|sqv_cont| NAME-JUDGEMENT "continuous_vr_fun" |vect_cont_2D| |vect_analysis|) (|sq_nz_pos| APPLICATION-JUDGEMENT "posreal" |sq| |reals|) (|cd3d| FORMULA-DECL NIL |cd3d| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK)) (|cd3d_si_correct| 0 (|cd3d_si_correct-1| |nil| 3473096044 ("" (SKEEP) (("" (EXPAND "cd3d_si?") (("" (LEMMA "cd3d_ind_correct") (("" (INST - "so" "vo" "to" "flpl" "N-2") (("1" (ASSERT) (("1" (LEMMA "conflict_3D_rew") (("1" (INST - "so" "vo" "to" "flpl") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|cd3d_si?| CONST-DECL "bool" |cd3d_si| NIL) (|Vect3| TYPE-EQ-DECL NIL |vectors_3D_def| |vectors|) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|FlightPlan| NONEMPTY-TYPE-EQ-DECL NIL |flightplan| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (B FORMAL-CONST-DECL "nnreal" |cd3d_si| NIL) (T FORMAL-CONST-DECL "{AB: posreal | AB > B}" |cd3d_si| NIL) (|FlightPlanRelevant| NONEMPTY-TYPE-EQ-DECL NIL |cd3d_si| NIL) (N FORMAL-CONST-DECL "above[1]" |cd3d_si| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |int_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|conflict_3D_rew| FORMULA-DECL NIL |cd3d_si| NIL) (|cd3d_ind_correct| FORMULA-DECL NIL |cd3d_si| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK)) (|cd3d_si_complete| 0 (|cd3d_si_complete-1| |nil| 3473097139 ("" (SKEEP) (("" (EXPAND "cd3d_si?") (("" (LEMMA "cd3d_ind_complete") (("" (INST - "so" "vo" "to" "flpl" "N-2") (("1" (ASSERT) (("1" (LEMMA "conflict_3D_rew") (("1" (INST - "so" "vo" "to" "flpl") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|cd3d_si?| CONST-DECL "bool" |cd3d_si| NIL) (|Vect3| TYPE-EQ-DECL NIL |vectors_3D_def| |vectors|) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|FlightPlan| NONEMPTY-TYPE-EQ-DECL NIL |flightplan| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (B FORMAL-CONST-DECL "nnreal" |cd3d_si| NIL) (T FORMAL-CONST-DECL "{AB: posreal | AB > B}" |cd3d_si| NIL) (|FlightPlanRelevant| NONEMPTY-TYPE-EQ-DECL NIL |cd3d_si| NIL) (N FORMAL-CONST-DECL "above[1]" |cd3d_si| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |int_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|conflict_3D_rew| FORMULA-DECL NIL |cd3d_si| NIL) (|cd3d_ind_complete| FORMULA-DECL NIL |cd3d_si| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK)))
