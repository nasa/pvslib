(vertical_los_crit_CA (Decision_Vector_TCC1 0 (Decision_Vector_TCC1-1 nil 3519998803 ("" (inst + "LAMBDA (s,v:Vect3): IF s = zero THEN v ELSE s ENDIF") (("" (skeep) (("" (grind) (("1" (decompose-equality +) nil nil) ("2" (decompose-equality +) nil nil) ("3" (decompose-equality +) nil nil) ("4" (decompose-equality +) (("1" (decompose-equality 2) nil nil) ("2" (decompose-equality 2) nil nil) ("3" (decompose-equality 2) nil nil)) nil) ("5" (decompose-equality 2) nil nil) ("6" (decompose-equality 2) nil nil)) nil)) nil)) nil) ((minus_nzint_is_nzint application-judgement "nzint" integers nil) (nil application-judgement "above(n)" exp2 nil) (minus_real_is_real application-judgement "real" reals nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (- const-decl "Vector" vectors_3D vectors) (= const-decl "[T, T -> boolean]" equalities nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (zero const-decl "Vector" vectors_3D vectors) (Vector type-eq-decl nil vectors_3D vectors) (/= const-decl "boolean" notequal nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (Vect3 type-eq-decl nil vectors_3D_def vectors) (real nonempty-type-from-decl nil reals nil)) nil (Decision_Vector existence "" "{f: [[vectors_3D_def.Vect3, vectors_3D_def.Vect3] -> vectors_3D_def.Vect3] | FORALL (s, v): booleans.=>((booleans.OR(vertical_los_crit_CA.s /= vectors_3D.zero, vertical_los_crit_CA.v /= vectors_3D.zero)), (booleans.AND(f(vertical_los_crit_CA.s, vertical_los_crit_CA.v) /= vectors_3D.zero, f((vectors_3D.-)(vertical_los_crit_CA.s), (vectors_3D.-)(vertical_los_crit_CA.v)) = (vectors_3D.-)(f(vertical_los_crit_CA.s, vertical_los_crit_CA.v)))))}"))) (dv_to_ec_antisymmetric 0 (dv_to_ec_antisymmetric-1 nil 3519751927 ("" (skeep) (("" (typepred "dv") (("" (inst - "s" "v") (("" (assert) (("" (replace -2) (("" (flatten) (("" (expand "dv_to_ec") (("" (lemma "break_vz_symm_comm") (("" (inst - "dv(s,v)") (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((Decision_Vector nonempty-type-eq-decl nil vertical_los_crit_CA nil) (- const-decl "Vector" vectors_3D vectors) (= const-decl "[T, T -> boolean]" equalities nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (zero const-decl "Vector" vectors_3D vectors) (Vector type-eq-decl nil vectors_3D vectors) (/= const-decl "boolean" notequal nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (Vect3 type-eq-decl nil vectors_3D_def vectors) (real nonempty-type-from-decl nil reals nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (sign_neg_clos application-judgement "Sign" sign reals) (break_vz_symm_comm formula-decl nil vertical_los_crit_CA nil) (dv_to_ec const-decl "Sign" vertical_los_crit_CA nil)) shostak (dv_to_ec_antisymmetric subtype "vertical_los_crit_CA.dv_to_ec(vertical_los_crit_CA.dv)" "Vertical_Strategy[D, H]"))) (vertical_decision_vect_TCC1 0 (vertical_decision_vect_TCC1-1 nil 3519751654 ("" (grind :exclude "CA_cyl_conflict_ever?") nil nil) ((real_plus_real_is_real application-judgement "real" reals nil) (zero const-decl "Vector" vectors_3D vectors) (/= const-decl "boolean" notequal nil) (* const-decl "real" vectors_3D vectors) (sqv const-decl "nnreal" vectors_3D vectors) (real_times_real_is_real application-judgement "real" reals nil) (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (nil application-judgement "above(n)" exp2 nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil)) nil (vertical_decision_vect subtype "vertical_los_crit_CA.s" "{vq: vectors_3D_def.Vect3 | booleans.IMPLIES((booleans.OR(vertical_los_crit_CA.s /= vectors_3D.zero, vertical_los_crit_CA.v /= vectors_3D.zero)), vq /= vectors_3D.zero)}"))) (vertical_decision_vect_TCC2 0 (vertical_decision_vect_TCC2-1 nil 3519978628 ("" (subtype-tcc) nil nil) ((even_plus_even_is_even application-judgement "even_int" integers nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (int_times_even_is_even application-judgement "even_int" integers nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (zero const-decl "Vector" vectors_3D vectors) (CA_cyl_conflict_ever? const-decl "bool" vertical_los_crit_CA nil) (/= const-decl "boolean" notequal nil) (* const-decl "real" vectors_3D vectors) (sqv const-decl "nnreal" vectors_3D vectors) (real_plus_real_is_real application-judgement "real" reals nil) (real_times_real_is_real application-judgement "real" reals nil) (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (nil application-judgement "above(n)" exp2 nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil)) nil (vertical_decision_vect subtype "vertical_los_crit_CA.v" "{vq: vectors_3D_def.Vect3 | booleans.IMPLIES((booleans.OR(vertical_los_crit_CA.s /= vectors_3D.zero, vertical_los_crit_CA.v /= vectors_3D.zero)), vq /= vectors_3D.zero)}"))) (vertical_decision_vect_TCC3 0 (vertical_decision_vect_TCC3-1 nil 3519978628 ("" (skeep) (("" (replace -3) (("" (assert) nil nil)) nil)) nil) ((comp_zero_z formula-decl nil vectors_3D vectors) (vect2_zero formula-decl nil vect_3D_2D vectors)) nil (vertical_decision_vect subtype "vertical_los_crit_CA.v" "{vq: vectors_3D_def.Vect3 | booleans.IMPLIES((booleans.OR(vertical_los_crit_CA.s /= vectors_3D.zero, vertical_los_crit_CA.v /= vectors_3D.zero)), vq /= vectors_3D.zero)}"))) (vertical_decision_vect_TCC4 0 (vertical_decision_vect_TCC4-2 "" 3790108112 ("" (skeep) nil nil) nil shostak (vertical_decision_vect subtype "vect_3D_2D.vect2(vertical_los_crit_CA.v)" "Nz_vect2")) (vertical_decision_vect_TCC4-1 nil 3519998803 ("" (skeep) (("" (assert) (("" (hide -2) (("" (expand "CA_cyl_conflict_ever?") (("" (rewrite "cd3d_ever" :dir rl) (("" (expand "conflict?") (("" (inst + "horizontal_tca(s,v)") (("1" (hide-all-but (-2 3)) (("1" (expand "zero") (("1" (grind :exclude "horizontal_tca") nil nil)) nil)) nil) ("2" (expand "horizontal_tca") (("2" (cross-mult 1) (("2" (ground) (("2" (lemma "vectors_2D.sqv_eq_0") (("2" (inst?) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) nil nil (vertical_decision_vect subtype "vect_3D_2D.vect2(vertical_los_crit_CA.v)" "Nz_vect2"))) (vertical_decision_vect_TCC5 0 (vertical_decision_vect_TCC5-1 nil 3519998803 ("" (skeep) (("" (assert) (("" (expand "CA_cyl_conflict_ever?") (("" (lemma "cd3d_ever") (("" (inst?) (("" (assert) (("" (expand "conflict?") (("" (inst + "horizontal_tca(s,v)") (("1" (assert) (("1" (replace -3) (("1" (name "A" "vectors_3D.zero") (("1" (case "A`z = zero`z") (("1" (copy -2) (("1" (replace -5 -1 :dir rl) (("1" (replace -1 -2 :dir rl) (("1" (rewrite "vz_distr_add") (("1" (rewrite "vz_scal") (("1" (replace -2) (("1" (case "vect2(A) = vect2(zero)") (("1" (replace -2 -1 :dir rl) (("1" (rewrite "vect2_add") (("1" (rewrite "vect2_scal") (("1" (assert) (("1" (replace -1) (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) (("2" (replace -3 :dir rl) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) (("2" (replace -1 :dir rl) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "horizontal_tca" 1) (("2" (cross-mult 1) (("2" (ground) (("1" (lemma "vectors_2D.sqv_eq_0") (("1" (inst?) (("1" (assert) nil nil)) nil)) nil) ("2" (lemma "vectors_2D.sqv_eq_0") (("2" (inst?) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (caH formal-const-decl "posreal" vertical_los_crit_CA nil) (caD formal-const-decl "posreal" vertical_los_crit_CA nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (cd3d_ever formula-decl nil cd3d_ever nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (Vect2 type-eq-decl nil vectors_2D_def vectors) (Vector type-eq-decl nil vectors_2D vectors) (/= const-decl "boolean" notequal nil) (zero const-decl "Vector" vectors_2D vectors) (Nz_vect2 type-eq-decl nil vectors_2D vectors) (horizontal_tca const-decl "real" definitions nil) (vect2 const-decl "Vect2" vect_3D_2D vectors) (s skolem-const-decl "Vect3" vertical_los_crit_CA nil) (v skolem-const-decl "Vect3" vertical_los_crit_CA nil) (nnreal type-eq-decl nil real_types nil) (* const-decl "Vector" vectors_3D vectors) (vz_distr_add formula-decl nil vectors_3D vectors) (vect2_scal formula-decl nil vect_3D_2D vectors) (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D vect_analysis) (sq_nz_pos application-judgement "posreal" sq reals) (sqv_zero formula-decl nil vectors_2D vectors) (abs_0 formula-decl nil abs_lems reals) (comp_zero_z formula-decl nil vectors_3D vectors) (vect2_zero formula-decl nil vect_3D_2D vectors) (vect2_add formula-decl nil vect_3D_2D vectors) (vz_scal formula-decl nil vectors_3D vectors) (zero const-decl "Vector" vectors_3D vectors) (= const-decl "[T, T -> boolean]" equalities nil) (Vector type-eq-decl nil vectors_3D vectors) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_div_nzreal_is_real application-judgement "real" reals nil) (div_mult_pos_neg_ge1 formula-decl nil extra_real_props nil) (nonzero_real nonempty-type-eq-decl nil reals nil) (sqv const-decl "nnreal" vectors_2D vectors) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield -> numfield]" number_fields nil) (* const-decl "real" vectors_2D vectors) (minus_real_is_real application-judgement "real" reals nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nil application-judgement "above(n)" exp2 nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (sqv_eq_0 formula-decl nil vectors_2D vectors) (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types nil) (conflict? const-decl "bool" space_3D nil) (real_plus_real_is_real application-judgement "real" reals nil) (real_times_real_is_real application-judgement "real" reals nil) (Vect3 type-eq-decl nil vectors_3D_def vectors) (CA_cyl_conflict_ever? const-decl "bool" vertical_los_crit_CA nil)) nil (vertical_decision_vect subtype "(vectors_3D.+)(vertical_los_crit_CA.s, vectors_3D.*(definitions.horizontal_tca(vect_3D_2D.vect2(vertical_los_crit_CA.s), vect_3D_2D.vect2(vertical_los_crit_CA.v)), vertical_los_crit_CA.v))" "{vq: vectors_3D_def.Vect3 | booleans.IMPLIES((booleans.OR(vertical_los_crit_CA.s /= vectors_3D.zero, vertical_los_crit_CA.v /= vectors_3D.zero)), vq /= vectors_3D.zero)}"))) (vertical_decision_vect_TCC6 0 (vertical_decision_vect_TCC6-1 nil 3562954006 ("" (subtype-tcc) nil nil) ((zero const-decl "Vector" vectors_3D vectors) (CA_cyl_conflict_ever? const-decl "bool" vertical_los_crit_CA nil) (vect2 const-decl "Vect2" vect_3D_2D vectors) (* const-decl "real" vectors_2D vectors) (real_times_real_is_real application-judgement "real" reals nil) (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (nil application-judgement "above(n)" exp2 nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil)) nil (vertical_decision_vect subtype "vertical_los_crit_CA.s" "{vq: vectors_3D_def.Vect3 | booleans.IMPLIES((booleans.OR(vertical_los_crit_CA.s /= vectors_3D.zero, vertical_los_crit_CA.v /= vectors_3D.zero)), vq /= vectors_3D.zero)}"))) (vertical_decision_vect_antisymmetric 0 (vertical_decision_vect_antisymmetric-2 nil 3520001568 ("" (skeep) (("" (split +) (("1" (assert) (("1" (typepred "vertical_decision_vect(s, v)") (("1" (replace -2) (("1" (propax) nil nil)) nil)) nil)) nil) ("2" (expand "vertical_decision_vect") (("2" (case "vect2(v)=zero IFF vect2(-v)=zero") (("1" (replace -1 :dir rl) (("1" (case "CA_cyl_conflict_ever?(s, v) IFF CA_cyl_conflict_ever?(-s, -v)") (("1" (replace -1 :dir rl) (("1" (hide -1) (("1" (case "vect2(-s) * vect2(-v)=vect2(s) * vect2(v)") (("1" (replace -1) (("1" (hide -1) (("1" (case "NOT vect2(v) = zero IMPLIES (-s + horizontal_tca(vect2(-s), vect2(-v)) * -v) = -(s + horizontal_tca(vect2(s), vect2(v)) * v)") (("1" (case "FORALL (vvss:Vect3): vvss=zero IFF -vvss = zero") (("1" (inst-cp - "s") (("1" (inst - "v") (("1" (hide -1) (("1" (replace -1 :dir rl) (("1" (case "FORALL (vvss:Vect3): vvss/=zero IFF -vvss /= zero") (("1" (inst-cp - "s") (("1" (hide -1) (("1" (replace -1 :dir rl) (("1" (rewrite "vz_neg") (("1" (case "FORALL (vvss:Vect3): vvss=zero IFF -vvss = zero") (("1" (inst - "v") (("1" (rewrite "vz_neg") (("1" (case "v = zero IFF vect2(v) = zero AND v`z = 0") (("1" (lift-if) (("1" (lift-if) (("1" (lift-if) (("1" (lift-if) (("1" (lift-if) (("1" (lift-if) (("1" (assert) (("1" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (expand "zero") (("2" (grind) (("2" (decompose-equality +) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (skeep) (("2" (ground) (("1" (case "vvss = -(-vvss)") (("1" (replace -1 +) (("1" (replace -2) (("1" (assert) nil nil)) nil)) nil) ("2" (assert) nil nil)) nil) ("2" (case "vvss = -(-vvss)") (("1" (replace -1 +) (("1" (replace -2) (("1" (assert) nil nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (skeep) (("2" (ground) (("1" (case "vvss = -(-vvss)") (("1" (replace -1 +) (("1" (replace -2) (("1" (assert) nil nil)) nil)) nil) ("2" (assert) nil nil)) nil) ("2" (case "vvss = -(-vvss)") (("1" (replace -1 +) (("1" (replace -2) (("1" (assert) nil nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) (("2" (hide-all-but 1) (("2" (skeep) (("2" (ground) (("1" (case "vvss = -(-vvss)") (("1" (replace -1 +) (("1" (replace -2) (("1" (assert) nil nil)) nil)) nil) ("2" (assert) nil nil)) nil) ("2" (case "vvss = -(-vvss)") (("1" (replace -1 +) (("1" (replace -2) (("1" (assert) nil nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (flatten) (("2" (assert) (("2" (case "horizontal_tca(vect2(-s), vect2(-v))=horizontal_tca(vect2(s), vect2(v))") (("1" (replace -1) (("1" (hide -1) (("1" (grind :exclude "horizontal_tca") nil nil)) nil)) nil) ("2" (hide 3) (("2" (expand "horizontal_tca") (("2" (cross-mult 1) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (ground) nil nil) ("4" (hide 2) (("4" (ground) nil nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (expand "CA_cyl_conflict_ever?") (("2" (rewrite "cd3d_ever" :dir rl) (("2" (rewrite "cd3d_ever" :dir rl) (("2" (expand "conflict?") (("2" (ground) (("1" (skosimp*) (("1" (inst + "nnt!1") (("1" (grind) nil nil)) nil)) nil) ("2" (skosimp*) (("2" (inst + "nnt!1") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (expand "zero") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ((vertical_decision_vect const-decl "{vq: Vect3 | (s /= zero OR v /= zero) IMPLIES vq /= zero}" vertical_los_crit_CA nil) (zero const-decl "Vector" vectors_3D vectors) (Vector type-eq-decl nil vectors_3D vectors) (/= const-decl "boolean" notequal nil) (Vect3 type-eq-decl nil vectors_3D_def vectors) (real nonempty-type-from-decl nil reals nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (- const-decl "Vector" vectors_3D vectors) (zero const-decl "Vector" vectors_2D vectors) (Vector type-eq-decl nil vectors_2D vectors) (vect2 const-decl "Vect2" vect_3D_2D vectors) (= const-decl "[T, T -> boolean]" equalities nil) (Vect2 type-eq-decl nil vectors_2D_def vectors) (IFF const-decl "[bool, bool -> bool]" booleans nil) (CA_cyl_conflict_ever? const-decl "bool" vertical_los_crit_CA nil) (horizontal_tca const-decl "real" definitions nil) (Nz_vect2 type-eq-decl nil vectors_2D vectors) (* const-decl "Vector" vectors_3D vectors) (+ const-decl "Vector" vectors_3D vectors) (vz_neg formula-decl nil vectors_3D vectors) (minus_real_is_real application-judgement "real" reals nil) (neg_neg formula-decl nil vectors_3D vectors) (neg_zero formula-decl nil vectors_3D vectors) (AND const-decl "[bool, bool -> bool]" booleans nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (sqv_neg formula-decl nil vectors_3D vectors) (nil application-judgement "above(n)" exp2 nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (real_times_real_is_real application-judgement "real" reals nil) (real_plus_real_is_real application-judgement "real" reals nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (div_cancel4 formula-decl nil real_props nil) (times_div2 formula-decl nil real_props nil) (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D vect_analysis) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (nznum nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (sqv const-decl "nnreal" vectors_2D vectors) (nnreal type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (nonzero_real nonempty-type-eq-decl nil reals nil) (div_cancel3 formula-decl nil real_props nil) (real_div_nzreal_is_real application-judgement "real" reals nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (* const-decl "real" vectors_2D vectors) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (* const-decl "Vector" vectors_2D vectors) (+ const-decl "Vector" vectors_2D vectors) (sq const-decl "nonneg_real" sq reals) (posreal_times_posreal_is_posreal application-judgement "posreal" real_types nil) (sq_nz_pos application-judgement "posreal" sq reals) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (conflict? const-decl "bool" space_3D nil) (caH formal-const-decl "posreal" vertical_los_crit_CA nil) (caD formal-const-decl "posreal" vertical_los_crit_CA nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (cd3d_ever formula-decl nil cd3d_ever nil)) nil (vertical_decision_vect_antisymmetric subtype "vertical_los_crit_CA.vertical_decision_vect" "Decision_Vector")) (vertical_decision_vect_antisymmetric-1 nil 3519752529 ("" (expand "antisymmetric?") (("" (skeep) (("" (expand "vertical_decision_vect") (("" (case "vect2(vo - vi) = zero iFF vect2(vi - vo) = zero") (("1" (replace -1 :dir rl) (("1" (case "CA_cyl_conflict_ever?(s, vo - vi) IFF CA_cyl_conflict_ever?(-s, vi - vo)") (("1" (replace -1 :dir rl) (("1" (hide -1) (("1" (case "vect2(-s) * vect2(vi - vo)=vect2(s) * vect2(vo - vi)") (("1" (replace -1) (("1" (hide -1) (("1" (case "NOT  vect2(vo - vi) = zero IMPLIES -(-s +
                                                     horizontal_tca(vect2(-s), vect2(vi - vo)) *
                                                      (vi - vo)) = s + horizontal_tca(vect2(s), vect2(vo - vi)) * (vo - vi)") (("1" (lift-if) (("1" (lift-if) (("1" (lift-if) (("1" (lift-if) (("1" (ground) (("1" (hide-all-but 3) (("1" (grind) nil nil)) nil) ("2" (hide-all-but 3) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (flatten) (("2" (assert) (("2" (hide -1) (("2" (case "horizontal_tca(vect2(-s), vect2(vi - vo))=horizontal_tca(vect2(s), vect2(vo - vi))") (("1" (replace -1) (("1" (hide -1) (("1" (grind :exclude "horizontal_tca") nil nil)) nil)) nil) ("2" (hide 3) (("2" (expand "horizontal_tca") (("2" (cross-mult 1) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (ground) nil nil) ("4" (hide 2) (("4" (ground) nil nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (expand "CA_cyl_conflict_ever?") (("2" (rewrite "cd3d_ever" :dir rl) (("2" (rewrite "cd3d_ever" :dir rl) (("2" (expand "conflict?") (("2" (ground) (("1" (skosimp*) (("1" (inst + "nnt!1") (("1" (grind) nil nil)) nil)) nil) ("2" (skosimp*) (("2" (inst + "nnt!1") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (expand "zero") (("2" (expand "vect2") (("2" (rewrite "vx_distr_sub") (("2" (rewrite "vy_distr_sub") (("2" (rewrite "vy_distr_sub") (("2" (rewrite "vx_distr_sub") (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((zero const-decl "Vector" vectors_2D vectors) (Vector type-eq-decl nil vectors_2D vectors) (Vector type-eq-decl nil vectors_3D vectors) (vect2 const-decl "Vect2" vect_3D_2D vectors) (Vect3 type-eq-decl nil vectors_3D_def vectors) (Vect2 type-eq-decl nil vectors_2D_def vectors) (neg_nzv application-judgement "Nz_vector" vectors_3D vectors) (zero const-decl "Vector" vectors_3D vectors) (Nz_vect3 type-eq-decl nil vectors_3D vectors) (horizontal_tca const-decl "real" definitions nil) (Nz_vect2 type-eq-decl nil vectors_2D vectors) (* const-decl "Vector" vectors_3D vectors) (+ const-decl "Vector" vectors_3D vectors) (neg_neg formula-decl nil vectors_3D vectors) (sqv const-decl "nnreal" vectors_2D vectors) (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D vect_analysis) (* const-decl "real" vectors_2D vectors) (* const-decl "Vector" vectors_2D vectors) (+ const-decl "Vector" vectors_2D vectors) (sq const-decl "nonneg_real" sq reals) (sq_nz_pos application-judgement "posreal" sq reals) (conflict? const-decl "bool" space_3D nil) (cd3d_ever formula-decl nil cd3d_ever nil) (vx_distr_sub formula-decl nil vectors_3D vectors) (vy_distr_sub formula-decl nil vectors_3D vectors)) shostak (vertical_decision_vect_antisymmetric subtype "vertical_los_crit_CA.vertical_decision_vect" "Decision_Vector"))) (vertical_los_crit_CA_independent_TCC1 0 (vertical_los_crit_CA_independent_TCC1-1 nil 3562944353 ("" (skosimp*) (("" (replace -5) (("" (assert) nil nil)) nil)) nil) ((vertical_decision_vect_antisymmetric name-judgement "Decision_Vector" vertical_los_crit_CA nil) (dv_to_ec_antisymmetric application-judgement "Vertical_Strategy[D, H]" vertical_los_crit_CA nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (dot_zero_right formula-decl nil vectors_2D vectors)) nil (vertical_los_crit_CA_independent subtype "vect_3D_2D.vect2(vertical_los_crit_CA.nv)" "Nz_vect2"))) (vertical_los_crit_CA_independent_TCC2 0 (vertical_los_crit_CA_independent_TCC2-1 nil 3562944353 ("" (skosimp*) (("" (replace -5) (("" (assert) nil nil)) nil)) nil) ((vertical_decision_vect_antisymmetric name-judgement "Decision_Vector" vertical_los_crit_CA nil) (dv_to_ec_antisymmetric application-judgement "Vertical_Strategy[D, H]" vertical_los_crit_CA nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (dot_zero_right formula-decl nil vectors_2D vectors)) nil (vertical_los_crit_CA_independent subtype "vect_3D_2D.vect2(vertical_los_crit_CA.v)" "Nz_vect2"))) (vertical_los_crit_CA_independent 0 (vertical_los_crit_CA_independent-1 nil 3520096277 ("" (skeep) (("" (lemma "vs_bound_crit_indep") (("" (expand "vertical_los_crit_CA?") (("" (expand "vertical_los_criterion?") (("" (flatten) (("" (inst - "dv_to_ec(vertical_decision_vect)(s, v)" "nv" "s" "v") (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ((H formal-const-decl "posreal" vertical_los_crit_CA nil) (D formal-const-decl "posreal" vertical_los_crit_CA nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (vs_bound_crit_indep formula-decl nil vertical_los_criterion nil) (vertical_los_criterion? const-decl "bool" vertical_los_criterion nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (/= const-decl "boolean" notequal nil) (nzint nonempty-type-eq-decl nil integers nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (Sign type-eq-decl nil sign reals) (Vect3 type-eq-decl nil vectors_3D_def vectors) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (Vector type-eq-decl nil vectors_3D vectors) (zero const-decl "Vector" vectors_3D vectors) (AND const-decl "[bool, bool -> bool]" booleans nil) (- const-decl "Vector" vectors_3D vectors) (Decision_Vector nonempty-type-eq-decl nil vertical_los_crit_CA nil) (dv_to_ec const-decl "Sign" vertical_los_crit_CA nil) (vertical_decision_vect const-decl "{vq: Vect3 | (s /= zero OR v /= zero) IMPLIES vq /= zero}" vertical_los_crit_CA nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (dv_to_ec_antisymmetric application-judgement "Vertical_Strategy[D, H]" vertical_los_crit_CA nil) (real_times_real_is_real application-judgement "real" reals nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (vertical_los_crit_CA? const-decl "bool" vertical_los_crit_CA nil) (vertical_decision_vect_antisymmetric name-judgement "Decision_Vector" vertical_los_crit_CA nil)) shostak)) (vertical_los_crit_CA_independent_strong_TCC1 0 (vertical_los_crit_CA_independent_strong_TCC1-1 nil 3562945349 ("" (skosimp*) (("" (replace -4) (("" (assert) nil nil)) nil)) nil) ((dot_zero_right formula-decl nil vectors_2D vectors) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) nil (vertical_los_crit_CA_independent_strong subtype "vect_3D_2D.vect2(vertical_los_crit_CA.nv)" "Nz_vect2"))) (vertical_los_crit_CA_independent_strong_TCC2 0 (vertical_los_crit_CA_independent_strong_TCC2-1 nil 3562945349 ("" (skosimp*) (("" (replace -4) (("" (assert) nil nil)) nil)) nil) ((dot_zero_right formula-decl nil vectors_2D vectors) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) nil (vertical_los_crit_CA_independent_strong subtype "vect_3D_2D.vect2(vertical_los_crit_CA.v)" "Nz_vect2"))) (vertical_los_crit_CA_independent_strong 0 (vertical_los_crit_CA_independent_strong-2 "" 3790108123 ("" (skeep) (("" (lemma "vertical_los_crit_CA_independent") (("" (inst?) (("" (assert) (("" (assert) (("" (name "epsi" "dv_to_ec(vertical_decision_vect)(s, v)") (("" (replace -1) (("" (expand "dv_to_ec" -1) (("" (expand "vertical_decision_vect" -1) (("" (lift-if) (("" (split -1) (("1" (flatten) (("1" (assert) (("1" (invoke (case "NOT %1") (! 2 1)) (("1" (hide-all-but (-1 1)) (("1" (ground) nil nil)) nil) ("2" (replace -1) (("2" (assert) (("2" (case "s`z = 0") (("1" (case "sign(s`z) = 1") (("1" (replace -1) (("1" (replace -2) (("1" (assert) (("1" (flatten) (("1" (case "NOT v`z>=0") (("1" (expand "sign") (("1" (assert) nil nil)) nil) ("2" (assert) (("2" (expand "sign") (("2" (case "v = zero") (("1" (replace -1) (("1" (assert) nil nil)) nil) ("2" (case "sqv(v)=0") (("1" (lemma "vectors_3D.sqv_eq_0") (("1" (inst?) (("1" (assert) nil nil)) nil)) nil) ("2" (assert) (("2" (case "v`z = 0") (("1" (rewrite "vz_distr_add") (("1" (rewrite "vz_distr_add") (("1" (rewrite "vz_scal") (("1" (rewrite "vz_scal") (("1" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (case "NOT v`z > 0") (("1" (assert) nil nil) ("2" (assert) (("2" (case "NOT epsi = 1") (("1" (lemma "break_vz_symm_sz") (("1" (inst - "v") (("1" (assert) nil nil)) nil)) nil) ("2" (assert) (("2" (replace -1) (("2" (rewrite "vz_distr_add") (("2" (rewrite "vz_distr_add") (("2" (rewrite "vz_scal") (("2" (rewrite "vz_scal") (("2" (assert) (("2" (replace -4) (("2" (assert) (("2" (mult-by -2 "horizontal_tca(s,v)") (("1" (assert) (("1" (expand "abs") (("1" (propax) nil nil)) nil)) nil) ("2" (invoke (case "%1") (! 1 2)) (("1" (assert) nil nil) ("2" (hide 2) (("2" (expand "horizontal_tca" 1) (("2" (cross-mult 1) (("2" (ground) (("2" (lemma "vectors_2D.sqv_eq_0") (("2" (inst?) (("2" (assert) (("2" (replace -1) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (replace -1) (("2" (assert) nil nil)) nil)) nil) ("2" (assert) (("2" (case "sign(s`z) = sign(v`z)") (("1" (assert) (("1" (hide 3) (("1" (case "epsi * (s + horizontal_tca((vect2(s)), vect2(v)) * v)`z >=0") (("1" (typepred "epsi") (("1" (expand "abs") (("1" (lift-if) (("1" (lift-if) (("1" (lift-if) (("1" (assert) (("1" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 4) (("2" (case "FORALL (egr:real): sign(egr)*egr >= 0") (("1" (inst-cp - "v`z") (("1" (inst - "s`z") (("1" (assert) (("1" (mult-by -2 "horizontal_tca(s,v)") (("1" (assert) (("1" (lemma "break_vz_symm_sz") (("1" (inst - "s") (("1" (assert) (("1" (replace -7) (("1" (replace -1 :dir rl) (("1" (replace -4 :dir rl) (("1" (rewrite "vz_distr_add") (("1" (rewrite "vz_distr_add") (("1" (rewrite "vz_scal") (("1" (rewrite "vz_scal") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "horizontal_tca" 1) (("2" (cross-mult 1) (("2" (ground) (("1" (lemma "vectors_2D.sqv_eq_0") (("1" (inst?) (("1" (assert) (("1" (replace -1) (("1" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (lemma "vectors_2D.sqv_eq_0") (("2" (inst?) (("2" (assert) (("2" (replace -1) (("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("3" (lemma "vectors_2D.sqv_eq_0") (("3" (inst?) (("3" (assert) (("3" (replace -1) (("3" (assert) nil nil)) nil)) nil)) nil)) nil) ("4" (lemma "vectors_2D.sqv_eq_0") (("4" (inst?) (("4" (assert) (("4" (replace -1) (("4" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) (("2" (lemma "break_vz_symm_sz") (("2" (inst - "s") (("2" (assert) (("2" (replace -4) (("2" (expand "vertical_los_crit_CA?") (("2" (expand "vertical_decision_vect") (("2" (expand "dv_to_ec") (("2" (replace -3) (("2" (replace -4) (("2" (expand "vertical_los_criterion?") (("2" (flatten) (("2" (assert) (("2" (expand "min_rel_vert_speed") (("2" (assert) (("2" (case "NOT epsi*nv`z >= 0") (("1" (lift-if) (("1" (ground) nil nil)) nil) ("2" (hide -9) (("2" (assert) (("2" (case "sign(nv`z) = sign(s`z)") (("1" (replace -6 :dir rl) (("1" (case "epsi*nv`z >= 0") (("1" (mult-by -1 "horizontal_tca(s,nv)") (("1" (assert) (("1" (case "epsi = sign((s + horizontal_tca((vect2(s)), vect2(nv)) * nv)`z)") (("1" (case "FORALL (egr:real): sign(egr)*egr = abs(egr)") (("1" (inst-cp - "(s + horizontal_tca((vect2(s)), vect2(nv)) * nv)`z") (("1" (inst - "s`z") (("1" (replace -3 :dir rl) (("1" (replace -7 :dir rl) (("1" (assert) (("1" (rewrite "vz_distr_add") (("1" (rewrite "vz_distr_add") (("1" (rewrite "vz_scal") (("1" (rewrite "vz_scal") (("1" (assert) (("1" (replace -2 :dir rl) (("1" (replace -1 :dir rl) (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil)) nil) ("2" (replace -4) (("2" (replace -7 :dir rl) (("2" (hide-all-but (-1 -2 1)) (("2" (grind :exclude "horizontal_tca") nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "horizontal_tca" 1) (("2" (cross-mult 1) (("2" (ground) (("1" (lemma "vectors_2D.sqv_eq_0") (("1" (inst?) (("1" (assert) (("1" (replace -1) (("1" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (lemma "vectors_2D.sqv_eq_0") (("2" (inst?) (("2" (assert) (("2" (replace -1) (("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("3" (lemma "vectors_2D.sqv_eq_0") (("3" (inst?) (("3" (assert) (("3" (replace -1) (("3" (assert) nil nil)) nil)) nil)) nil)) nil) ("4" (lemma "vectors_2D.sqv_eq_0") (("4" (inst?) (("4" (assert) (("4" (replace -1) (("4" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (replace -6 :dir rl) (("2" (propax) nil nil)) nil)) nil)) nil) ("2" (replace -2) (("2" (case "NOT nv`z = 0") (("1" (hide-all-but (-1 -2 1 2)) (("1" (grind) nil nil)) nil) ("2" (rewrite "vz_distr_add") (("2" (rewrite "vz_distr_add") (("2" (rewrite "vz_scal") (("2" (rewrite "vz_scal") (("2" (replace -1) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (assert) (("2" (hide 4) (("2" (split -1) (("1" (flatten) (("1" (replace -1) (("1" (assert) nil nil)) nil)) nil) ("2" (flatten) (("2" (lemma "break_vz_symm_sz") (("2" (inst?) (("2" (invoke (case "%1") (! -1 1)) (("1" (assert) (("1" (flatten) (("1" (replace -2) (("1" (replace -1) (("1" (case "FORALL (egr:real): sign(egr)*egr = abs(egr)") (("1" (inst - "(s + horizontal_tca((vect2(s)), vect2(v)) * v)`z") (("1" (replace -2 :dir rl) (("1" (assert) (("1" (replace -1 :dir rl) (("1" (replace -1) (("1" (hide-all-but (-4 +)) (("1" (typepred "epsi") (("1" (grind :exclude "horizontal_tca") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (replace -1) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((vertical_los_crit_CA_independent formula-decl nil vertical_los_crit_CA nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (nil application-judgement "above(n)" exp2 nil) (real_times_real_is_real application-judgement "real" reals nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (dv_to_ec_antisymmetric application-judgement "Vertical_Strategy[D, H]" vertical_los_crit_CA nil) (vertical_decision_vect_antisymmetric name-judgement "Decision_Vector" vertical_los_crit_CA nil) (vertical_decision_vect const-decl "{vq: Vect3 | (s /= zero OR v /= zero) IMPLIES vq /= zero}" vertical_los_crit_CA nil) (dv_to_ec const-decl "Sign" vertical_los_crit_CA nil) (Sign type-eq-decl nil sign reals) (nzint nonempty-type-eq-decl nil integers nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (Decision_Vector nonempty-type-eq-decl nil vertical_los_crit_CA nil) (- const-decl "Vector" vectors_3D vectors) (AND const-decl "[bool, bool -> bool]" booleans nil) (zero const-decl "Vector" vectors_3D vectors) (Vector type-eq-decl nil vectors_3D vectors) (/= const-decl "boolean" notequal nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}" real_defs nil) (CA_cyl_conflict_ever? const-decl "bool" vertical_los_crit_CA nil) (NOT const-decl "[bool -> bool]" booleans nil) (vertical_los_criterion? const-decl "bool" vertical_los_criterion nil) (nv skolem-const-decl "Vect3" vertical_los_crit_CA nil) (int_times_even_is_even application-judgement "even_int" integers nil) (nonneg_real_max application-judgement "{z: nonneg_real | z >= x AND z >= y}" real_defs nil) (min_rel_vert_speed const-decl "{x: nnreal | abs(sz) < H IMPLIES x > 0}" vertical_los_criterion nil) (vertical_los_crit_CA? const-decl "bool" vertical_los_crit_CA nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (+ const-decl "Vector" vectors_3D vectors) (both_sides_times_pos_ge1_imp formula-decl nil extra_real_props nil) (div_mult_pos_neg_ge1 formula-decl nil extra_real_props nil) (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (sign const-decl "Sign" sign reals) (comp_zero_z formula-decl nil vectors_3D vectors) (vect2_zero formula-decl nil vect_3D_2D vectors) (scal_zero formula-decl nil vectors_3D vectors) (add_zero_right formula-decl nil vectors_3D vectors) (dot_zero_right formula-decl nil vectors_2D vectors) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (break_vz_symm_sz formula-decl nil vertical_los_crit_CA nil) (both_sides_times_pos_gt1 formula-decl nil real_props nil) (v skolem-const-decl "Vect3" vertical_los_crit_CA nil) (s skolem-const-decl "Vect3" vertical_los_crit_CA nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (real_div_nzreal_is_real application-judgement "real" reals nil) (div_mult_pos_neg_gt1 formula-decl nil extra_real_props nil) (nonzero_real nonempty-type-eq-decl nil reals nil) (sqv const-decl "nnreal" vectors_2D vectors) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield -> numfield]" number_fields nil) (* const-decl "real" vectors_2D vectors) (minus_real_is_real application-judgement "real" reals nil) (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D vect_analysis) (sqv_eq_0 formula-decl nil vectors_2D vectors) (sqv_zero formula-decl nil vectors_2D vectors) (vect2 const-decl "Vect2" vect_3D_2D vectors) (horizontal_tca const-decl "real" definitions nil) (Nz_vect2 type-eq-decl nil vectors_2D vectors) (zero const-decl "Vector" vectors_2D vectors) (Vector type-eq-decl nil vectors_2D vectors) (Vect2 type-eq-decl nil vectors_2D_def vectors) (* const-decl "Vector" vectors_3D vectors) (vz_distr_add formula-decl nil vectors_3D vectors) (real_plus_real_is_real application-judgement "real" reals nil) (vz_scal formula-decl nil vectors_3D vectors) (abs_nat formula-decl nil abs_lems reals) (sqv_eq_0 formula-decl nil vectors_3D vectors) (sqv const-decl "nnreal" vectors_3D vectors) (nnreal type-eq-decl nil real_types nil) (abs_0 formula-decl nil abs_lems reals) (sign_nat formula-decl nil sign reals) (Vect3 type-eq-decl nil vectors_3D_def vectors) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) shostak) (vertical_los_crit_CA_independent_strong-1 nil 3562945351 ("" (skeep) (("" (lemma "vertical_los_crit_CA_independent") (("" (inst?) (("" (assert) (("" (assert) (("" (name "epsi" "dv_to_ec(vertical_decision_vect)(s, v)") (("" (replace -1) (("" (expand "dv_to_ec" -1) (("" (expand "vertical_decision_vect" -1) (("" (lift-if) (("" (split -1) (("1" (flatten) (("1" (assert) (("1" (invoke (case "NOT %1") (! 2 1)) (("1" (hide-all-but (-1 1)) (("1" (ground) nil nil)) nil) ("2" (replace -1) (("2" (assert) (("2" (case "s`z = 0") (("1" (case "sign(s`z) = 1") (("1" (replace -1) (("1" (replace -2) (("1" (assert) (("1" (flatten) (("1" (case "NOT v`z>=0") (("1" (expand "sign") (("1" (assert) nil nil)) nil) ("2" (assert) (("2" (expand "sign") (("2" (case "v = zero") (("1" (replace -1) (("1" (assert) nil nil)) nil) ("2" (case "sqv(v)=0") (("1" (lemma "vectors_3D.sqv_eq_0") (("1" (inst?) (("1" (assert) nil nil)) nil)) nil) ("2" (assert) (("2" (case "v`z = 0") (("1" (rewrite "vz_distr_add") (("1" (rewrite "vz_distr_add") (("1" (rewrite "vz_scal") (("1" (rewrite "vz_scal") (("1" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (case "NOT v`z > 0") (("1" (assert) nil nil) ("2" (assert) (("2" (case "NOT epsi = 1") (("1" (lemma "break_vz_symm_sz") (("1" (inst - "v") (("1" (assert) nil nil)) nil)) nil) ("2" (assert) (("2" (replace -1) (("2" (assert) (("2" (rewrite "vz_distr_add") (("2" (rewrite "vz_distr_add") (("2" (rewrite "vz_scal") (("2" (rewrite "vz_scal") (("2" (assert) (("2" (replace -4) (("2" (assert) (("2" (mult-by -2 "horizontal_tca(s,v)") (("1" (assert) (("1" (expand "abs") (("1" (propax) nil nil)) nil)) nil) ("2" (invoke (case "%1") (! 1 2)) (("1" (assert) nil nil) ("2" (hide 2) (("2" (expand "horizontal_tca" 1) (("2" (cross-mult 1) (("2" (ground) (("2" (lemma "vectors_2D.sqv_eq_0") (("2" (inst?) (("2" (assert) (("2" (replace -1) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (replace -1) (("2" (assert) nil nil)) nil)) nil) ("2" (assert) (("2" (case "sign(s`z) = sign(v`z)") (("1" (assert) (("1" (hide 3) (("1" (case "epsi * (s + horizontal_tca((vect2(s)), vect2(v)) * v)`z >=0") (("1" (typepred "epsi") (("1" (expand "abs") (("1" (lift-if) (("1" (lift-if) (("1" (lift-if) (("1" (assert) (("1" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 4) (("2" (case "FORALL (egr:real): sign(egr)*egr >= 0") (("1" (inst-cp - "v`z") (("1" (inst - "s`z") (("1" (assert) (("1" (mult-by -2 "horizontal_tca(s,v)") (("1" (assert) (("1" (lemma "break_vz_symm_sz") (("1" (inst - "s") (("1" (assert) (("1" (replace -7) (("1" (replace -1 :dir rl) (("1" (replace -4 :dir rl) (("1" (rewrite "vz_distr_add") (("1" (rewrite "vz_distr_add") (("1" (rewrite "vz_scal") (("1" (rewrite "vz_scal") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "horizontal_tca" 1) (("2" (cross-mult 1) (("2" (ground) (("1" (lemma "vectors_2D.sqv_eq_0") (("1" (inst?) (("1" (assert) (("1" (replace -1) (("1" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (assert) (("2" (lemma "vectors_2D.sqv_eq_0") (("2" (inst?) (("2" (assert) (("2" (replace -1) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("3" (lemma "vectors_2D.sqv_eq_0") (("3" (inst?) (("3" (assert) (("3" (replace -1) (("3" (assert) nil nil)) nil)) nil)) nil)) nil) ("4" (lemma "vectors_2D.sqv_eq_0") (("4" (inst?) (("4" (assert) (("4" (replace -1) (("4" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) (("2" (lemma "break_vz_symm_sz") (("2" (inst - "s") (("2" (assert) (("2" (replace -4) (("2" (expand "vertical_los_crit_CA?") (("2" (expand "vertical_decision_vect") (("2" (expand "dv_to_ec") (("2" (assert) (("2" (replace -3) (("2" (replace -4) (("2" (expand "vertical_los_criterion?") (("2" (flatten) (("2" (assert) (("2" (expand "min_rel_vert_speed") (("2" (assert) (("2" (case "NOT epsi*nv`z >= 0") (("1" (lift-if) (("1" (ground) nil nil)) nil) ("2" (hide -9) (("2" (assert) (("2" (case "sign(nv`z) = sign(s`z)") (("1" (replace -6 :dir rl) (("1" (case "epsi*nv`z >= 0") (("1" (mult-by -1 "horizontal_tca(s,nv)") (("1" (assert) (("1" (case "epsi = sign((s + horizontal_tca((vect2(s)), vect2(nv)) * nv)`z)") (("1" (case "FORALL (egr:real): sign(egr)*egr = abs(egr)") (("1" (inst-cp - "(s + horizontal_tca((vect2(s)), vect2(nv)) * nv)`z") (("1" (inst - "s`z") (("1" (replace -3 :dir rl) (("1" (replace -7 :dir rl) (("1" (assert) (("1" (rewrite "vz_distr_add") (("1" (rewrite "vz_distr_add") (("1" (rewrite "vz_scal") (("1" (rewrite "vz_scal") (("1" (assert) (("1" (replace -2 :dir rl) (("1" (replace -1 :dir rl) (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil)) nil) ("2" (replace -4) (("2" (replace -7 :dir rl) (("2" (hide-all-but (-1 -2 1)) (("2" (grind :exclude "horizontal_tca") nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "horizontal_tca" 1) (("2" (cross-mult 1) (("2" (ground) (("1" (lemma "vectors_2D.sqv_eq_0") (("1" (inst?) (("1" (assert) (("1" (replace -1) (("1" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (lemma "vectors_2D.sqv_eq_0") (("2" (inst?) (("2" (assert) (("2" (replace -1) (("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("3" (lemma "vectors_2D.sqv_eq_0") (("3" (inst?) (("3" (assert) (("3" (replace -1) (("3" (assert) nil nil)) nil)) nil)) nil)) nil) ("4" (lemma "vectors_2D.sqv_eq_0") (("4" (inst?) (("4" (assert) (("4" (replace -1) (("4" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (replace -6 :dir rl) (("2" (propax) nil nil)) nil)) nil)) nil) ("2" (replace -2) (("2" (case "NOT nv`z = 0") (("1" (hide-all-but (-1 -2 1 2)) (("1" (grind) nil nil)) nil) ("2" (rewrite "vz_distr_add") (("2" (rewrite "vz_distr_add") (("2" (rewrite "vz_scal") (("2" (rewrite "vz_scal") (("2" (replace -1) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (assert) (("2" (hide 4) (("2" (split -1) (("1" (flatten) (("1" (replace -1) (("1" (assert) nil nil)) nil)) nil) ("2" (flatten) (("2" (lemma "break_vz_symm_sz") (("2" (inst?) (("2" (invoke (case "%1") (! -1 1)) (("1" (assert) (("1" (flatten) (("1" (replace -2) (("1" (replace -1) (("1" (case "FORALL (egr:real): sign(egr)*egr = abs(egr)") (("1" (inst - "(s + horizontal_tca((vect2(s)), vect2(v)) * v)`z") (("1" (replace -2 :dir rl) (("1" (assert) (("1" (replace -1 :dir rl) (("1" (replace -1) (("1" (hide-all-but (-4 +)) (("1" (typepred "epsi") (("1" (grind :exclude "horizontal_tca") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (replace -1) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((Sign type-eq-decl nil sign reals) (zero const-decl "Vector" vectors_3D vectors) (Vector type-eq-decl nil vectors_3D vectors) (vertical_los_criterion? const-decl "bool" vertical_los_criterion nil) (min_rel_vert_speed const-decl "{x: nnreal | abs(sz) < H IMPLIES x > 0}" vertical_los_criterion nil) (+ const-decl "Vector" vectors_3D vectors) (sign const-decl "Sign" sign reals) (comp_zero_z formula-decl nil vectors_3D vectors) (vect2_zero formula-decl nil vect_3D_2D vectors) (scal_zero formula-decl nil vectors_3D vectors) (add_zero_right formula-decl nil vectors_3D vectors) (dot_zero_right formula-decl nil vectors_2D vectors) (sqv const-decl "nnreal" vectors_2D vectors) (* const-decl "real" vectors_2D vectors) (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D vect_analysis) (sqv_eq_0 formula-decl nil vectors_2D vectors) (sqv_zero formula-decl nil vectors_2D vectors) (vect2 const-decl "Vect2" vect_3D_2D vectors) (horizontal_tca const-decl "real" definitions nil) (Nz_vect2 type-eq-decl nil vectors_2D vectors) (zero const-decl "Vector" vectors_2D vectors) (Vector type-eq-decl nil vectors_2D vectors) (Vect2 type-eq-decl nil vectors_2D_def vectors) (* const-decl "Vector" vectors_3D vectors) (vz_distr_add formula-decl nil vectors_3D vectors) (vz_scal formula-decl nil vectors_3D vectors) (abs_nat formula-decl nil abs_lems reals) (sqv_eq_0 formula-decl nil vectors_3D vectors) (sqv const-decl "nnreal" vectors_3D vectors) (abs_0 formula-decl nil abs_lems reals) (sign_nat formula-decl nil sign reals) (Vect3 type-eq-decl nil vectors_3D_def vectors)) shostak)) (vertical_los_crit_CA_independent_vspeed 0 (vertical_los_crit_CA_independent_vspeed-1 nil 3562937623 ("" (skeep) (("" (expand "vertical_los_crit_CA?") (("" (expand "vertical_los_criterion?") (("" (expand "dv_to_ec") (("" (flatten) (("" (expand "min_rel_vert_speed") (("" (expand "max") (("" (lift-if) (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((vertical_los_crit_CA? const-decl "bool" vertical_los_crit_CA nil) (dv_to_ec const-decl "Sign" vertical_los_crit_CA nil) (min_rel_vert_speed const-decl "{x: nnreal | abs(sz) < H IMPLIES x > 0}" vertical_los_criterion nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_times_real_is_real application-judgement "real" reals nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil) (vertical_los_criterion? const-decl "bool" vertical_los_criterion nil) (vertical_decision_vect_antisymmetric name-judgement "Decision_Vector" vertical_los_crit_CA nil)) nil)) (vertical_los_crit_CA_coordinated_vspeed 0 (vertical_los_crit_CA_coordinated_vspeed-1 nil 3562937572 ("" (skeep) (("" (expand "vertical_los_crit_CA?") (("" (lemma "vertical_los_criterion_coord") (("" (inst - "MinRelVertSpeedi" "MinRelVertSpeedo" "dv_to_ec(vertical_decision_vect)(s,vo-vi)" "nvi" "nvo" "s" "vi" "vo") (("" (assert) (("" (split -) (("1" (expand "vertical_los_criterion?" -1) (("1" (flatten) (("1" (expand "dv_to_ec") (("1" (rewrite "vz_distr_sub") (("1" (expand "min_rel_vert_speed") (("1" (expand "max") (("1" (lift-if) (("1" (lift-if) (("1" (lift-if) (("1" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (typepred "dv_to_ec(vertical_decision_vect)") (("2" (inst - "s" "vo-vi") (("2" (assert) (("2" (case "-(vo-vi) = vi-vo") (("1" (assert) nil nil) ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((vertical_los_crit_CA? const-decl "bool" vertical_los_crit_CA nil) (vertical_decision_vect_antisymmetric name-judgement "Decision_Vector" vertical_los_crit_CA nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (/= const-decl "boolean" notequal nil) (nzint nonempty-type-eq-decl nil integers nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (Sign type-eq-decl nil sign reals) (Vect3 type-eq-decl nil vectors_3D_def vectors) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (Vector type-eq-decl nil vectors_3D vectors) (zero const-decl "Vector" vectors_3D vectors) (AND const-decl "[bool, bool -> bool]" booleans nil) (- const-decl "Vector" vectors_3D vectors) (Decision_Vector nonempty-type-eq-decl nil vertical_los_crit_CA nil) (dv_to_ec const-decl "Sign" vertical_los_crit_CA nil) (vertical_decision_vect const-decl "{vq: Vect3 | (s /= zero OR v /= zero) IMPLIES vq /= zero}" vertical_los_crit_CA nil) (- const-decl "Vector" vectors_3D vectors) (vz_distr_sub formula-decl nil vectors_3D vectors) (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (min_rel_vert_speed const-decl "{x: nnreal | abs(sz) < H IMPLIES x > 0}" vertical_los_criterion nil) (vertical_los_criterion? const-decl "bool" vertical_los_criterion nil) (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (minus_real_is_real application-judgement "real" reals nil) (- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (NOT const-decl "[bool -> bool]" booleans nil) (dv_to_ec_antisymmetric application-judgement "Vertical_Strategy[D, H]" vertical_los_crit_CA nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_times_real_is_real application-judgement "real" reals nil) (real_minus_real_is_real application-judgement "real" reals nil) (nil application-judgement "above(n)" exp2 nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (posreal_max application-judgement "{z: posreal | z >= x AND z >= y}" real_defs nil) (sign_neg_clos application-judgement "Sign" sign reals) (vertical_los_criterion_coord formula-decl nil vertical_los_criterion nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (D formal-const-decl "posreal" vertical_los_crit_CA nil) (H formal-const-decl "posreal" vertical_los_crit_CA nil)) nil)) (vertical_los_crit_CA_coordinated 0 (vertical_los_crit_CA_coordinated-1 nil 3563037117 ("" (skeep) (("" (expand "vertical_los_crit_CA?") (("" (lemma "vertical_los_criterion_coord") (("" (inst?) (("" (assert) (("" (typepred "dv_to_ec(vertical_decision_vect)") (("" (inst - "s" "vo-vi") (("" (assert) (("" (case "-(vo-vi) = vi-vo") (("1" (assert) nil nil) ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((vertical_los_crit_CA? const-decl "bool" vertical_los_crit_CA nil) (vertical_decision_vect_antisymmetric name-judgement "Decision_Vector" vertical_los_crit_CA nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (/= const-decl "boolean" notequal nil) (nzint nonempty-type-eq-decl nil integers nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (Sign type-eq-decl nil sign reals) (Vect3 type-eq-decl nil vectors_3D_def vectors) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (Vector type-eq-decl nil vectors_3D vectors) (zero const-decl "Vector" vectors_3D vectors) (AND const-decl "[bool, bool -> bool]" booleans nil) (- const-decl "Vector" vectors_3D vectors) (Decision_Vector nonempty-type-eq-decl nil vertical_los_crit_CA nil) (dv_to_ec const-decl "Sign" vertical_los_crit_CA nil) (vertical_decision_vect const-decl "{vq: Vect3 | (s /= zero OR v /= zero) IMPLIES vq /= zero}" vertical_los_crit_CA nil) (- const-decl "Vector" vectors_3D vectors) (NOT const-decl "[bool -> bool]" booleans nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield -> numfield]" number_fields nil) (real_minus_real_is_real application-judgement "real" reals nil) (minus_real_is_real application-judgement "real" reals nil) (real_times_real_is_real application-judgement "real" reals nil) (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (nil application-judgement "above(n)" exp2 nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (dv_to_ec_antisymmetric application-judgement "Vertical_Strategy[D, H]" vertical_los_crit_CA nil) (posreal_max application-judgement "{z: posreal | z >= x AND z >= y}" real_defs nil) (sign_neg_clos application-judgement "Sign" sign reals) (vertical_los_criterion_coord formula-decl nil vertical_los_criterion nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (D formal-const-decl "posreal" vertical_los_crit_CA nil) (H formal-const-decl "posreal" vertical_los_crit_CA nil)) shostak)) (vertical_los_crit_CA_coordinated_strong_TCC1 0 (vertical_los_crit_CA_coordinated_strong_TCC1-1 nil 3563026818 ("" (skosimp*) (("" (replace -6) (("" (assert) nil nil)) nil)) nil) ((real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (dot_zero_right formula-decl nil vectors_2D vectors)) nil (vertical_los_crit_CA_coordinated_strong subtype "vect_3D_2D.vect2(vertical_los_crit_CA.nv)" "Nz_vect2"))) (vertical_los_crit_CA_coordinated_strong_TCC2 0 (vertical_los_crit_CA_coordinated_strong_TCC2-1 nil 3563026818 ("" (skosimp*) (("" (replace -6) (("" (assert) nil nil)) nil)) nil) ((dot_zero_right formula-decl nil vectors_2D vectors) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) nil (vertical_los_crit_CA_coordinated_strong subtype "vect_3D_2D.vect2(vertical_los_crit_CA.v)" "Nz_vect2"))) (vertical_los_crit_CA_coordinated_strong 0 (vertical_los_crit_CA_coordinated_strong-2 "" 3884835882 ("" (skeep) (("" (lemma "vertical_los_crit_CA_coordinated") (("" (inst - "MinRelVertSpeedi" "MinRelVertSpeedo" "nvi" "nvo" "s" "vi" "vo") (("" (assert) (("" (lemma "vertical_los_crit_CA_independent_strong") (("" (inst - "max(MinRelVertSpeedo,MinRelVertSpeedi)" "nvo-nvi" "s" "vo-vi") (("" (assert) (("" (flatten) (("" (assert) (("" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) nil shostak) (vertical_los_crit_CA_coordinated_strong-1 nil 3563026927 ("" (skeep) (("" (skoletin 1 :postfix "aa") (("" (skoletin 1 :postfix "aa") (("" (flatten) (("" (lemma "vertical_los_crit_CA_coordinated") (("" (inst - "MinRelVertSpeedi" "MinRelVertSpeedo" "nvi" "nvo" "s" "vi" "vo") (("" (assert) (("" (lemma "vertical_los_crit_CA_independent_strong") (("" (inst - "max(MinRelVertSpeedo,MinRelVertSpeedi)" "nvo-nvi" "s" "vo-vi") (("" (assert) (("" (flatten) (("" (assert) (("" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((vertical_los_crit_CA_coordinated formula-decl nil vertical_los_crit_CA nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (nil application-judgement "above(n)" exp2 nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (posreal_max application-judgement "{z: posreal | z >= x AND z >= y}" real_defs nil) (- const-decl "Vector" vectors_3D vectors) (Vector type-eq-decl nil vectors_3D vectors) (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (vertical_los_crit_CA_independent_strong formula-decl nil vertical_los_crit_CA nil) (Vect3 type-eq-decl nil vectors_3D_def vectors) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) nil)))
