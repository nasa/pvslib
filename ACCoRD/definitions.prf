(definitions (horizontalCoordination_symm 0 (horizontalCoordination_symm-1 nil 3470395407 ("" (skeep) (("" (expand "horizontalCoordination") (("" (rewrite "det_symm" :dir rl) nil nil)) nil)) nil) ((horizontalCoordination const-decl "Sign" definitions nil) (Vect2 type-eq-decl nil vectors_2D_def vectors) (real nonempty-type-from-decl nil reals nil) (det_symm formula-decl nil det_2D vectors)) nil)) (Horizontal_Strategy_TCC1 0 (Horizontal_Strategy_TCC1-2 nil 3470395446 ("" (inst 1 "horizontalCoordination") (("" (skeep) (("" (rewrite "horizontalCoordination_symm") nil nil)) nil)) nil) ((horizontalCoordination_symm formula-decl nil definitions nil) (horizontalCoordination const-decl "Sign" definitions nil) (- const-decl "Vector" vectors_2D vectors) (Vector type-eq-decl nil vectors_2D vectors) (Sign type-eq-decl nil sign reals) (= const-decl "[T, T -> boolean]" equalities nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (nzint nonempty-type-eq-decl nil integers nil) (/= const-decl "boolean" notequal nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (Vect2 type-eq-decl nil vectors_2D_def vectors) (real nonempty-type-from-decl nil reals nil)) nil (Horizontal_Strategy existence "" "{f: [[vectors_2D_def.Vect2, vectors_2D_def.Vect2] -> sign.Sign] | FORALL (s, v): f((vectors_2D.-)(definitions.s), (vectors_2D.-)(definitions.v)) = f(definitions.s, definitions.v)}")) (Horizontal_Strategy_TCC1-1 nil 3470395425 ("" (existence-tcc) nil nil) nil nil (Horizontal_Strategy existence "" "{f: [[vectors_2D_def.Vect2, vectors_2D_def.Vect2] -> sign.Sign] | FORALL (s, v): f((vectors_2D.-)(definitions.s), (vectors_2D.-)(definitions.v)) = f(definitions.s, definitions.v)}"))) (horizontalCoordination_strategy 0 (horizontalCoordination_strategy-1 nil 3470164326 ("" (skeep) (("" (rewrite "horizontalCoordination_symm") nil nil)) nil) ((horizontalCoordination_symm formula-decl nil definitions nil) (real nonempty-type-from-decl nil reals nil) (Vect2 type-eq-decl nil vectors_2D_def vectors)) nil (horizontalCoordination_strategy subtype "definitions.horizontalCoordination" "Horizontal_Strategy"))) (horizontal_tca_gt_0_TCC1 0 (horizontal_tca_gt_0_TCC1-1 nil 3598252907 ("" (subtype-tcc) nil nil) ((real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_plus_real_is_real application-judgement "real" reals nil) (comp_zero_y formula-decl nil vectors_2D vectors) (comp_zero_x formula-decl nil vectors_2D vectors) (* const-decl "real" vectors_2D vectors) (/= const-decl "boolean" notequal nil) (real_times_real_is_real application-judgement "real" reals nil)) nil (horizontal_tca_gt_0 subtype "definitions.v" "Nz_vect2"))) (horizontal_tca_gt_0 0 (horizontal_tca_gt_0-1 nil 3598252991 ("" (skeep) (("" (expand "horizontal_tca") (("" (case "sqv(v) = 0") (("1" (rewrite "sqv_eq_0") (("1" (replaces -1) (("1" (assert) nil nil)) nil)) nil) ("2" (cross-mult 2) (("2" (assert) nil nil)) nil)) nil)) nil)) nil) ((horizontal_tca const-decl "real" definitions nil) (real_div_nzreal_is_real application-judgement "real" reals nil) (div_mult_pos_gt1 formula-decl nil extra_real_props nil) (* const-decl "real" vectors_2D vectors) (- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (posreal nonempty-type-eq-decl nil real_types nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (v skolem-const-decl "Vect2" definitions nil) (> const-decl "bool" reals nil) (minus_real_is_real application-judgement "real" reals nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (sqv_eq_0 formula-decl nil vectors_2D vectors) (dot_zero_right formula-decl nil vectors_2D vectors) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (TRUE const-decl "bool" booleans nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (real nonempty-type-from-decl nil reals nil) (Vector type-eq-decl nil vectors_2D vectors) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nnreal type-eq-decl nil real_types nil) (sqv const-decl "nnreal" vectors_2D vectors) (Vect2 type-eq-decl nil vectors_2D_def vectors)) shostak)) (horizontal_tca_nzv_gt_0 0 (horizontal_tca_nzv_gt_0-1 nil 3598453207 ("" (skeep) (("" (split) (("1" (flatten) (("1" (rewrite "horizontal_tca_gt_0") nil nil)) nil) ("2" (flatten) (("2" (expand "horizontal_tca") (("2" (cross-mult -1) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ((horizontal_tca_gt_0 formula-decl nil definitions nil) (real nonempty-type-from-decl nil reals nil) (Vect2 type-eq-decl nil vectors_2D_def vectors) (Vector type-eq-decl nil vectors_2D vectors) (boolean nonempty-type-decl nil booleans nil) (/= const-decl "boolean" notequal nil) (zero const-decl "Vector" vectors_2D vectors) (Nz_vect2 type-eq-decl nil vectors_2D vectors) (horizontal_tca const-decl "real" definitions nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (minus_real_is_real application-judgement "real" reals nil) (nz_sqv_gt_0 application-judgement "posreal" vectors_2D vectors) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (nnreal type-eq-decl nil real_types nil) (sqv const-decl "nnreal" vectors_2D vectors) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield -> numfield]" number_fields nil) (* const-decl "real" vectors_2D vectors) (div_mult_pos_gt1 formula-decl nil extra_real_props nil) (real_div_nzreal_is_real application-judgement "real" reals nil)) nil)) (horizontal_tca_lt_0_TCC1 0 (horizontal_tca_lt_0_TCC1-1 nil 3598452901 ("" (subtype-tcc) nil nil) ((real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_plus_real_is_real application-judgement "real" reals nil) (comp_zero_y formula-decl nil vectors_2D vectors) (comp_zero_x formula-decl nil vectors_2D vectors) (* const-decl "real" vectors_2D vectors) (/= const-decl "boolean" notequal nil) (real_times_real_is_real application-judgement "real" reals nil)) nil (horizontal_tca_lt_0 subtype "definitions.v" "Nz_vect2"))) (horizontal_tca_lt_0 0 (horizontal_tca_lt_0-1 nil 3598452938 ("" (skeep) (("" (expand "horizontal_tca") (("" (case "sqv(v) = 0") (("1" (rewrite "sqv_eq_0") (("1" (replaces -1) (("1" (assert) nil nil)) nil)) nil) ("2" (cross-mult 2) (("2" (assert) nil nil)) nil)) nil)) nil)) nil) ((horizontal_tca const-decl "real" definitions nil) (real_div_nzreal_is_real application-judgement "real" reals nil) (div_mult_pos_lt1 formula-decl nil real_props nil) (* const-decl "real" vectors_2D vectors) (- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (posreal nonempty-type-eq-decl nil real_types nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (v skolem-const-decl "Vect2" definitions nil) (> const-decl "bool" reals nil) (minus_real_is_real application-judgement "real" reals nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (sqv_eq_0 formula-decl nil vectors_2D vectors) (dot_zero_right formula-decl nil vectors_2D vectors) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (TRUE const-decl "bool" booleans nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (real nonempty-type-from-decl nil reals nil) (Vector type-eq-decl nil vectors_2D vectors) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nnreal type-eq-decl nil real_types nil) (sqv const-decl "nnreal" vectors_2D vectors) (Vect2 type-eq-decl nil vectors_2D_def vectors)) nil)) (horizontal_tca_nzv_lt_0 0 (horizontal_tca_nzv_lt_0-1 nil 3598453228 ("" (skeep) (("" (split) (("1" (flatten) (("1" (rewrite "horizontal_tca_lt_0") nil nil)) nil) ("2" (flatten) (("2" (expand "horizontal_tca") (("2" (cross-mult -1) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ((horizontal_tca_lt_0 formula-decl nil definitions nil) (real nonempty-type-from-decl nil reals nil) (Vect2 type-eq-decl nil vectors_2D_def vectors) (Vector type-eq-decl nil vectors_2D vectors) (boolean nonempty-type-decl nil booleans nil) (/= const-decl "boolean" notequal nil) (zero const-decl "Vector" vectors_2D vectors) (Nz_vect2 type-eq-decl nil vectors_2D vectors) (horizontal_tca const-decl "real" definitions nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (minus_real_is_real application-judgement "real" reals nil) (nz_sqv_gt_0 application-judgement "posreal" vectors_2D vectors) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (nnreal type-eq-decl nil real_types nil) (sqv const-decl "nnreal" vectors_2D vectors) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield -> numfield]" number_fields nil) (* const-decl "real" vectors_2D vectors) (div_mult_pos_lt1 formula-decl nil real_props nil) (real_div_nzreal_is_real application-judgement "real" reals nil)) nil)) (horizontal_tca_nzv_ge_0 0 (horizontal_tca_nzv_ge_0-1 nil 3826317232 ("" (skeep) (("" (lemma "horizontal_tca_nzv_lt_0") (("" (inst?) (("" (ground) nil nil)) nil)) nil)) nil) ((horizontal_tca_nzv_lt_0 formula-decl nil definitions nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (Vect2 type-eq-decl nil vectors_2D_def vectors) (Nz_vect2 type-eq-decl nil vectors_2D vectors) (zero const-decl "Vector" vectors_2D vectors) (/= const-decl "boolean" notequal nil) (boolean nonempty-type-decl nil booleans nil) (Vector type-eq-decl nil vectors_2D vectors) (real nonempty-type-from-decl nil reals nil)) shostak)) (horizontal_tca_nzv_le_0 0 (horizontal_tca_nzv_le_0-1 nil 3826317299 ("" (skeep) (("" (lemma "horizontal_tca_nzv_gt_0") (("" (inst?) (("" (ground) nil nil)) nil)) nil)) nil) ((horizontal_tca_nzv_gt_0 formula-decl nil definitions nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (Vect2 type-eq-decl nil vectors_2D_def vectors) (Nz_vect2 type-eq-decl nil vectors_2D vectors) (zero const-decl "Vector" vectors_2D vectors) (/= const-decl "boolean" notequal nil) (boolean nonempty-type-decl nil booleans nil) (Vector type-eq-decl nil vectors_2D vectors) (real nonempty-type-from-decl nil reals nil)) shostak)) (horizontal_tca_dot_zero 0 (horizontal_tca_dot_zero-1 nil 3570899131 ("" (skeep) (("" (grind) (("" (field) nil nil)) nil)) nil) ((* const-decl "real" vectors_2D vectors) (sqv const-decl "nnreal" vectors_2D vectors) (horizontal_tca const-decl "real" definitions nil) (* const-decl "Vector" vectors_2D vectors) (+ const-decl "Vector" vectors_2D vectors) (real_div_nzreal_is_real application-judgement "real" reals nil) (minus_real_is_real application-judgement "real" reals nil) (real_plus_real_is_real application-judgement "real" reals nil) (real_times_real_is_real application-judgement "real" reals nil) (nz_sqv_gt_0 application-judgement "posreal" vectors_2D vectors) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (both_sides_times1 formula-decl nil real_props nil) (nonzero_real nonempty-type-eq-decl nil reals nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (zero_times1 formula-decl nil real_props nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real_minus_real_is_real application-judgement "real" reals nil) (nil application-judgement "above(n)" exp2 nil) (Vect2 type-eq-decl nil vectors_2D_def vectors) (- const-decl "[numfield -> numfield]" number_fields nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (nznum nonempty-type-eq-decl nil number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (= const-decl "[T, T -> boolean]" equalities nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (/= const-decl "boolean" notequal nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (real nonempty-type-from-decl nil reals nil) (Vector type-eq-decl nil vectors_2D vectors) (zero const-decl "Vector" vectors_2D vectors) (Nz_vect2 type-eq-decl nil vectors_2D vectors) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (bijective? const-decl "bool" functions nil) (id const-decl "(bijective?[T, T])" identity nil) (TRUE const-decl "bool" booleans nil)) shostak)) (horizontal_sq_dtca_eq 0 (horizontal_sq_dtca_eq-1 nil 3460200496 ("" (skeep) (("" (expand "horizontal_sq_dtca") (("" (rewrite "sqv_add") (("" (rewrite "sqv_scal") (("" (expand "horizontal_tca") (("" (rewrite "sq_div") (("" (rewrite "sq_neg") (("" (case-replace "sq((s * nzv)) / sq(sqv(nzv)) * sqv(nzv) = sq(s*nzv)/sqv(nzv)") (("1" (hide -1) (("1" (case-replace " 2 * (-(s * nzv) / sqv(nzv) * (s * nzv)) = -2*sq(s*nzv)/sqv(nzv)") (("1" (hide -1) (("1" (case-replace " sqv(s) + sq(s * nzv) / sqv(nzv) + -2 * sq(s * nzv) / sqv(nzv) = sqv(s) - sq(s*nzv)/sqv(nzv)") (("1" (hide -1) (("1" (cross-mult 1) (("1" (rewrite "sq_det") (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (assert) nil nil)) nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (expand "sq" 1) (("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (expand "sq" 1 2) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((horizontal_sq_dtca const-decl "real" definitions nil) (sqv_scal formula-decl nil vectors_2D vectors) (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types nil) (sqv const-decl "nnreal" vectors_2D vectors) (nnreal type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (* const-decl "real" vectors_2D vectors) (- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (sq_div formula-decl nil sq reals) (sq_nz_pos application-judgement "posreal" sq reals) (nnreal_div_posreal_is_nnreal application-judgement "nnreal" real_types nil) (sq const-decl "nonneg_real" sq reals) (nonneg_real nonempty-type-eq-decl nil real_types nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (nznum nonempty-type-eq-decl nil number_fields nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (= const-decl "[T, T -> boolean]" equalities nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (real_minus_real_is_real application-judgement "real" reals nil) (div_cancel3 formula-decl nil real_props nil) (nonzero_real nonempty-type-eq-decl nil reals nil) (det const-decl "real" det_2D vectors) (sq_det formula-decl nil det_2D vectors) (posreal_times_posreal_is_posreal application-judgement "posreal" real_types nil) (sq_neg formula-decl nil sq reals) (real_div_nzreal_is_real application-judgement "real" reals nil) (minus_real_is_real application-judgement "real" reals nil) (dot_scal_left formula-decl nil vectors_2D vectors) (dot_scal_right formula-decl nil vectors_2D vectors) (real_plus_real_is_real application-judgement "real" reals nil) (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (real_times_real_is_real application-judgement "real" reals nil) (nz_sqv_gt_0 application-judgement "posreal" vectors_2D vectors) (horizontal_tca const-decl "real" definitions nil) (Nz_vect2 type-eq-decl nil vectors_2D vectors) (zero const-decl "Vector" vectors_2D vectors) (/= const-decl "boolean" notequal nil) (* const-decl "Vector" vectors_2D vectors) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (Vect2 type-eq-decl nil vectors_2D_def vectors) (Vector type-eq-decl nil vectors_2D vectors) (real nonempty-type-from-decl nil reals nil) (sqv_add formula-decl nil vectors_2D vectors)) nil)) (horizontal_tca_min 0 (horizontal_tca_min-1 nil 3448820288 ("" (skeep) (("" (rewrite "horizontal_sq_dtca_eq") (("" (lemma "quad_min") (("" (inst -1 "sqv(nzv)" "2*(s*nzv)" "sqv(s)") (("" (case-replace "-(2 * (s * nzv)) / (2 * sqv(nzv)) = horizontal_tca(s,nzv)") (("1" (hide -1) (("1" (beta) (("1" (split -1) (("1" (expand "is_minimum?") (("1" (inst -1 "t") (("1" (expand "quadratic") (("1" (rewrite "sqv_add") (("1" (rewrite "sqv_add") (("1" (rewrite "sqv_scal") (("1" (rewrite "sqv_scal") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (lemma "v_neq_zero") (("2" (inst?) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (expand "horizontal_tca") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((horizontal_sq_dtca_eq formula-decl nil definitions nil) (real nonempty-type-from-decl nil reals nil) (Vector type-eq-decl nil vectors_2D vectors) (boolean nonempty-type-decl nil booleans nil) (/= const-decl "boolean" notequal nil) (zero const-decl "Vector" vectors_2D vectors) (Nz_vect2 type-eq-decl nil vectors_2D vectors) (Vect2 type-eq-decl nil vectors_2D_def vectors) (real_times_real_is_real application-judgement "real" reals nil) (nz_sqv_gt_0 application-judgement "posreal" vectors_2D vectors) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (nonzero_real nonempty-type-eq-decl nil reals nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nnreal type-eq-decl nil real_types nil) (sqv const-decl "nnreal" vectors_2D vectors) (numfield nonempty-type-eq-decl nil number_fields nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (* const-decl "real" vectors_2D vectors) (* const-decl "Vector" vectors_2D vectors) (sqv_add formula-decl nil vectors_2D vectors) (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types nil) (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types nil) (real_plus_real_is_real application-judgement "real" reals nil) (dot_scal_right formula-decl nil vectors_2D vectors) (dot_scal_left formula-decl nil vectors_2D vectors) (sqv_scal formula-decl nil vectors_2D vectors) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (quadratic const-decl "real" quadratic reals) (is_minimum? const-decl "bool" quad_minmax reals) (v_neq_zero formula-decl nil vectors_2D vectors) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (minus_real_is_real application-judgement "real" reals nil) (real_div_nzreal_is_real application-judgement "real" reals nil) (posreal_times_posreal_is_posreal application-judgement "posreal" real_types nil) (= const-decl "[T, T -> boolean]" equalities nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (- const-decl "[numfield -> numfield]" number_fields nil) (horizontal_tca const-decl "real" definitions nil) (quad_min formula-decl nil quad_minmax reals)) nil)) (sqv_decreasing_before_horizontal_tca 0 (sqv_decreasing_before_horizontal_tca-1 nil 3571570377 ("" (skeep) (("" (skoletin 1) (("" (skeep) (("" (name "aa" "sqv(nzv)") (("" (case "aa = 0") (("1" (assert) nil nil) ("2" (name "bb" "2*(s*nzv)") (("2" (name "cc" "sqv(s)") (("2" (name "ff" "quadratic(aa,bb,cc)") (("2" (case "(tr1 < tr2 IFF ff(tr1) > ff(tr2))") (("1" (hide-all-but (-1 2)) (("1" (replaces -1) (("1" (expand "ff") (("1" (expand "aa") (("1" (expand "bb") (("1" (expand "cc") (("1" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 3) (("2" (lemma "quad_min_mono_dec") (("2" (case "htca = -bb/(2*aa)") (("1" (inst - "aa" "bb" "cc" "tr1" "tr2") (("1" (assert) (("1" (split +) (("1" (flatten) (("1" (assert) (("1" (replace -2 :dir rl) (("1" (propax) nil nil)) nil)) nil)) nil) ("2" (flatten) (("2" (assert) (("2" (lemma "quad_min_mono_dec") (("2" (inst - "aa" "bb" "cc" "tr2" "tr1") (("2" (assert) (("2" (replace -2 :dir rl) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (cross-mult 1) (("2" (expand "htca" 1) (("2" (expand "horizontal_tca") (("2" (cross-mult 1) (("2" (hide-all-but 1) (("2" (expand "aa") (("2" (expand "bb") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((TRUE const-decl "bool" booleans nil) (id const-decl "(bijective?[T, T])" identity nil) (bijective? const-decl "bool" functions nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (IFF const-decl "[bool, bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (= const-decl "[T, T -> boolean]" equalities nil) (real nonempty-type-from-decl nil reals nil) (Vect2 type-eq-decl nil vectors_2D_def vectors) (Vector type-eq-decl nil vectors_2D vectors) (/= const-decl "boolean" notequal nil) (zero const-decl "Vector" vectors_2D vectors) (Nz_vect2 type-eq-decl nil vectors_2D vectors) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (horizontal_tca const-decl "real" definitions nil) (* const-decl "Vector" vectors_2D vectors) (+ const-decl "Vector" vectors_2D vectors) (sqv const-decl "nnreal" vectors_2D vectors) (nnreal type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (> const-decl "bool" reals nil) (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (nz_sqv_gt_0 application-judgement "posreal" vectors_2D vectors) (nonneg_real nonempty-type-eq-decl nil real_types nil) (posreal nonempty-type-eq-decl nil real_types nil) (real_times_real_is_real application-judgement "real" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (* const-decl "real" vectors_2D vectors) (quadratic const-decl "real" quadratic reals) (real_div_nzreal_is_real application-judgement "real" reals nil) (posreal_times_posreal_is_posreal application-judgement "posreal" real_types nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (- const-decl "[numfield -> numfield]" number_fields nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (minus_real_is_real application-judgement "real" reals nil) (nonzero_real nonempty-type-eq-decl nil reals nil) (htca skolem-const-decl "real" definitions nil) (times_div1 formula-decl nil real_props nil) (div_cancel3 formula-decl nil real_props nil) (div_cancel4 formula-decl nil real_props nil) (quad_min_mono_dec formula-decl nil quad_minmax reals) (ff skolem-const-decl "[real -> real]" definitions nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (bb skolem-const-decl "real" definitions nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_plus_real_is_real application-judgement "real" reals nil) (sq const-decl "nonneg_real" sq reals) (cc skolem-const-decl "nnreal" definitions nil) (aa skolem-const-decl "posreal" definitions nil)) shostak)) (sqv_increasing_after_horizontal_tca 0 (sqv_increasing_after_horizontal_tca-1 nil 3571571043 ("" (skeep) (("" (skoletin 1) (("" (skeep) (("" (name "aa" "sqv(nzv)") (("" (case "aa = 0") (("1" (assert) nil nil) ("2" (name "bb" "2*(s*nzv)") (("2" (name "cc" "sqv(s)") (("2" (name "ff" "quadratic(aa,bb,cc)") (("2" (case "(tr1 > tr2 IFF ff(tr1) > ff(tr2))") (("1" (hide-all-but (-1 2)) (("1" (replaces -1) (("1" (expand "ff") (("1" (expand "aa") (("1" (expand "bb") (("1" (expand "cc") (("1" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 3) (("2" (lemma "quad_min_mono_inc") (("2" (case "htca = -bb/(2*aa)") (("1" (inst - "aa" "bb" "cc" "tr1" "tr2") (("1" (assert) (("1" (split +) (("1" (flatten) (("1" (assert) (("1" (replace -2 :dir rl) (("1" (propax) nil nil)) nil)) nil)) nil) ("2" (flatten) (("2" (assert) (("2" (lemma "quad_min_mono_inc") (("2" (inst - "aa" "bb" "cc" "tr2" "tr1") (("2" (assert) (("2" (replace -2 :dir rl) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (cross-mult 1) (("2" (expand "htca" 1) (("2" (expand "horizontal_tca") (("2" (cross-mult 1) (("2" (hide-all-but 1) (("2" (expand "aa") (("2" (expand "bb") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((TRUE const-decl "bool" booleans nil) (id const-decl "(bijective?[T, T])" identity nil) (bijective? const-decl "bool" functions nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (IFF const-decl "[bool, bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (= const-decl "[T, T -> boolean]" equalities nil) (real nonempty-type-from-decl nil reals nil) (Vect2 type-eq-decl nil vectors_2D_def vectors) (Vector type-eq-decl nil vectors_2D vectors) (/= const-decl "boolean" notequal nil) (zero const-decl "Vector" vectors_2D vectors) (Nz_vect2 type-eq-decl nil vectors_2D vectors) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (horizontal_tca const-decl "real" definitions nil) (* const-decl "Vector" vectors_2D vectors) (+ const-decl "Vector" vectors_2D vectors) (sqv const-decl "nnreal" vectors_2D vectors) (nnreal type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (>= const-decl "bool" reals nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (nz_sqv_gt_0 application-judgement "posreal" vectors_2D vectors) (nonneg_real nonempty-type-eq-decl nil real_types nil) (posreal nonempty-type-eq-decl nil real_types nil) (real_times_real_is_real application-judgement "real" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (* const-decl "real" vectors_2D vectors) (quadratic const-decl "real" quadratic reals) (real_div_nzreal_is_real application-judgement "real" reals nil) (posreal_times_posreal_is_posreal application-judgement "posreal" real_types nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (- const-decl "[numfield -> numfield]" number_fields nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (minus_real_is_real application-judgement "real" reals nil) (nonzero_real nonempty-type-eq-decl nil reals nil) (htca skolem-const-decl "real" definitions nil) (times_div1 formula-decl nil real_props nil) (div_cancel3 formula-decl nil real_props nil) (div_cancel4 formula-decl nil real_props nil) (quad_min_mono_inc formula-decl nil quad_minmax reals) (ff skolem-const-decl "[real -> real]" definitions nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (bb skolem-const-decl "real" definitions nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_plus_real_is_real application-judgement "real" reals nil) (sq const-decl "nonneg_real" sq reals) (cc skolem-const-decl "nnreal" definitions nil) (aa skolem-const-decl "posreal" definitions nil)) nil)) (sq_det_sqv_dta 0 (sq_det_sqv_dta-2 "" 3884838310 ("" (skeep) (("" (rewrite "perpL_dot") (("" (rewrite "sq_neg") (("" (rewrite "sq_det") (("" (expand "^") (("" (rewrite "sqv_scal") (("" (rewrite "dot_scal_right") (("" (rewrite "sq_times") (("" (sq-simp) (("" (rewrite "sq_norm") (("" (field) (("" (rewrite "sqv_add") (("" (case-replace "(sqv(s) * sqv(nzv)) = (sqv(nzv) * sqv(s))") (("1" (hide -1) (("1" (assert) (("1" (expand "horizontal_tca") (("1" (name-replace "snzv" "s*nzv") (("1" (case-replace "(sqv(nzv) * snzv * (-snzv / sqv(nzv))) = -(snzv*snzv)") (("1" (hide -1) (("1" (rewrite "sq" :dir rl) (("1" (move-terms 1 r 2) (("1" (case-replace "-1 * sq(snzv) - 2 * -sq(snzv) = sq(snzv)") (("1" (hide -1) (("1" (rewrite "sqv_scal") (("1" (sq-simp) (("1" (field) (("1" (expand "sq" 1 2) (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (real-props) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) nil shostak) (sq_det_sqv_dta-1 nil 3826310653 ("" (skeep) (("" (rewrite "perpL_dot") (("" (rewrite "sq_neg") (("" (rewrite "sq_det") (("" (expand "^") (("" (rewrite "sqv_scal") (("" (rewrite "dot_scal_right") (("" (rewrite "sq_times") (("" (sq-simp) (("" (rewrite "sq_norm") (("" (field) (("" (rewrite "sqv_add") (("" (assert) (("" (expand "horizontal_tca") (("" (name-replace "snzv" "s*nzv") (("" (case-replace "(sqv(nzv) * snzv * (-snzv / sqv(nzv))) = -(snzv*snzv)") (("1" (hide -1) (("1" (rewrite "sq" :dir rl) (("1" (move-terms 1 r 2) (("1" (case-replace "-1 * sq(snzv) - 2 * -sq(snzv) = sq(snzv)") (("1" (hide -1) (("1" (rewrite "sqv_scal") (("1" (sq-simp) (("1" (field) (("1" (expand "sq" 1 2) (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (real-props) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((perpL_dot formula-decl nil det_2D vectors) (real nonempty-type-from-decl nil reals nil) (Vect2 type-eq-decl nil vectors_2D_def vectors) (Vector type-eq-decl nil vectors_2D vectors) (boolean nonempty-type-decl nil booleans nil) (/= const-decl "boolean" notequal nil) (zero const-decl "Vector" vectors_2D vectors) (Nz_vector type-eq-decl nil vectors_2D vectors) (number nonempty-type-decl nil numbers nil) (= const-decl "[T, T -> boolean]" equalities nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nnreal type-eq-decl nil real_types nil) (norm const-decl "nnreal" vectors_2D vectors) (Normalized type-eq-decl nil vectors_2D vectors) (^ const-decl "Normalized" vectors_2D vectors) (Nz_vect2 type-eq-decl nil vectors_2D vectors) (minus_real_is_real application-judgement "real" reals nil) (sq_det formula-decl nil det_2D vectors) (nz_sqv_gt_0 application-judgement "posreal" vectors_2D vectors) (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types nil) (real_minus_real_is_real application-judgement "real" reals nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (nznum nonempty-type-eq-decl nil number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (sqv_scal formula-decl nil vectors_2D vectors) (posreal_div_posreal_is_posreal application-judgement "posreal" real_types nil) (sq_nz_pos application-judgement "posreal" sq reals) (posreal_times_posreal_is_posreal application-judgement "posreal" real_types nil) (* const-decl "real" vectors_2D vectors) (sq_times formula-decl nil sq reals) (sq_norm formula-decl nil vectors_2D vectors) (sqv_add formula-decl nil vectors_2D vectors) (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types nil) (real_plus_real_is_real application-judgement "real" reals nil) (dot_scal_left formula-decl nil vectors_2D vectors) (real_div_nzreal_is_real application-judgement "real" reals nil) (- const-decl "[numfield -> numfield]" number_fields nil) (div_cancel2 formula-decl nil real_props nil) (nil application-judgement "above(n)" exp2 nil) (IFF const-decl "[bool, bool -> bool]" booleans nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (both_sides_times1 formula-decl nil real_props nil) (nonzero_real nonempty-type-eq-decl nil reals nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (+ const-decl "Vector" vectors_2D vectors) (* const-decl "Vector" vectors_2D vectors) (horizontal_tca const-decl "real" definitions nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nnreal_div_posreal_is_nnreal application-judgement "nnreal" real_types nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (sqv const-decl "nnreal" vectors_2D vectors) (nonneg_real nonempty-type-eq-decl nil real_types nil) (sq const-decl "nonneg_real" sq reals) (id const-decl "(bijective?[T, T])" identity nil) (bijective? const-decl "bool" functions nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (sq_1 formula-decl nil sq reals) (sq_div formula-decl nil sq reals) (TRUE const-decl "bool" booleans nil) (real_times_real_is_real application-judgement "real" reals nil) (dot_scal_right formula-decl nil vectors_2D vectors) (nz_norm_gt_0 application-judgement "posreal" vectors_2D vectors) (det const-decl "real" det_2D vectors) (sq_neg formula-decl nil sq reals)) shostak)) (horizontal_tca_linear 0 (horizontal_tca_linear-1 nil 3826317101 ("" (skeep) (("" (expand "horizontal_tca") (("" (cross-mult) (("" (case-replace "sqv(nzv) * (-(s * nzv) / sqv(nzv))=-(s*nzv)") (("1" (hide -1) (("1" (rewrite "dot_add_left") (("1" (rewrite "sqv" :dir rl) (("1" (name-replace "SS" "sqv(nzv)") (("1" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (name-replace "SS" "sqv(nzv)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ((minus_real_is_real application-judgement "real" reals nil) (nz_sqv_gt_0 application-judgement "posreal" vectors_2D vectors) (horizontal_tca const-decl "real" definitions nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (= const-decl "[T, T -> boolean]" equalities nil) (dot_add_left formula-decl nil vectors_2D vectors) (real_plus_real_is_real application-judgement "real" reals nil) (dot_scal_left formula-decl nil vectors_2D vectors) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (real_times_real_is_real application-judgement "real" reals nil) (real_minus_real_is_real application-judgement "real" reals nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (/= const-decl "boolean" notequal nil) (nonzero_real nonempty-type-eq-decl nil reals nil) (Vector type-eq-decl nil vectors_2D vectors) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nnreal type-eq-decl nil real_types nil) (sqv const-decl "nnreal" vectors_2D vectors) (zero const-decl "Vector" vectors_2D vectors) (Nz_vect2 type-eq-decl nil vectors_2D vectors) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield -> numfield]" number_fields nil) (* const-decl "real" vectors_2D vectors) (+ const-decl "Vector" vectors_2D vectors) (Vect2 type-eq-decl nil vectors_2D_def vectors) (* const-decl "Vector" vectors_2D vectors) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (div_cancel3 formula-decl nil real_props nil) (real_div_nzreal_is_real application-judgement "real" reals nil)) nil)) (norm_v_T_lt_D 0 (norm_v_T_lt_D-1 nil 3826835078 ("" (skeep) (("" (expand "horizontal_tca") (("" (cross-mult -1) (("" (rewrite "dot_neg_left" :dir rl) (("" (lemma "dot_norm") (("" (inst?) (("" (flatten) (("" (hide -1) (("" (rewrite "norm_neg") (("" (case "T * sqv(nzv) < norm(s)*norm(nzv)") (("1" (hide (-2 -3)) (("1" (rewrite "sq_norm" :dir rl) (("1" (expand "sq" -1) (("1" (cancel-by -1 "norm(nzv)") (("1" (both-sides-f -3 "sqrt") (("1" (sq-simp) (("1" (rewrite "norm" :dir rl) (("1" (assert) nil nil)) nil)) nil) ("2" (rewrite "sqrt_le") nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((horizontal_tca const-decl "real" definitions nil) (dot_neg_left formula-decl nil vectors_2D vectors) (nz_norm_gt_0 application-judgement "posreal" vectors_2D vectors) (- const-decl "Vector" vectors_2D vectors) (< const-decl "bool" reals nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (norm const-decl "nnreal" vectors_2D vectors) (sq_norm formula-decl nil vectors_2D vectors) (sq_nz_pos application-judgement "posreal" sq reals) (TRUE const-decl "bool" booleans nil) (id const-decl "(bijective?[T, T])" identity nil) (bijective? const-decl "bool" functions nil) (posreal_times_posreal_is_posreal application-judgement "posreal" real_types nil) (= const-decl "[T, T -> boolean]" equalities nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (nznum nonempty-type-eq-decl nil number_fields nil) (both_sides_times_pos_lt1 formula-decl nil real_props nil) (posreal_div_posreal_is_posreal application-judgement "posreal" real_types nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (sqrt_le formula-decl nil sqrt reals) (sqrt_sq formula-decl nil sqrt reals) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (<= const-decl "bool" reals nil) (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals) (sq const-decl "nonneg_real" sq reals) (norm_neg formula-decl nil vectors_2D vectors) (dot_norm formula-decl nil vectors_2D vectors) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types nil) (minus_real_is_real application-judgement "real" reals nil) (nz_sqv_gt_0 application-judgement "posreal" vectors_2D vectors) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (Vector type-eq-decl nil vectors_2D vectors) (nnreal type-eq-decl nil real_types nil) (sqv const-decl "nnreal" vectors_2D vectors) (/= const-decl "boolean" notequal nil) (zero const-decl "Vector" vectors_2D vectors) (Nz_vect2 type-eq-decl nil vectors_2D vectors) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield -> numfield]" number_fields nil) (* const-decl "real" vectors_2D vectors) (Vect2 type-eq-decl nil vectors_2D_def vectors) (div_mult_pos_lt2 formula-decl nil real_props nil)) shostak)) (le_rel 0 (le_rel-3 nil 3446895839 ("" (skeep) (("" (expand "le?") (("" (case-replace "vo1 - vi - (vo - vi) = vo1-vo") (("1" (case-replace "vo2 - vi - (vo - vi) = vo2-vo") (("1" (assert) nil nil) ("2" (hide 2) (("2" (grind) nil nil)) nil)) nil) ("2" (hide 2) (("2" (grind) nil nil)) nil)) nil)) nil)) nil) ((le? const-decl "bool" definitions nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (real_minus_real_is_real application-judgement "real" reals nil) (Vect2 type-eq-decl nil vectors_2D_def vectors) (- const-decl "Vector" vectors_2D vectors) (= const-decl "[T, T -> boolean]" equalities nil) (boolean nonempty-type-decl nil booleans nil) (Vector type-eq-decl nil vectors_2D vectors) (real nonempty-type-from-decl nil reals nil)) nil) (le_rel-2 nil 3434117208 ("" (skeep) (("" (expand "le?") (("" (case-replace "v1 - vi - (vo - vi) = v1-vo") (("1" (case-replace "v2 - vi - (vo - vi) = v2-vo") (("1" (assert) nil nil) ("2" (hide 2) (("2" (grind) nil nil)) nil)) nil) ("2" (hide 2) (("2" (grind) nil nil)) nil)) nil)) nil)) nil) ((Vect2 type-eq-decl nil vectors_2D_def vectors) (Vector type-eq-decl nil vectors_2D vectors)) nil) (le_rel-1 nil 3434117183 ("" (grind) nil nil) nil shostak)) (Vdir_perp 0 (Vdir_perp-2 nil 3445463768 ("" (skeep) (("" (expand "Vdir") (("" (rewrite "dot_scal_right") (("" (rewrite "dot_perpR_eq_0") (("" (assert) nil nil)) nil)) nil)) nil)) nil) ((Vdir const-decl "Nz_vect2" definitions nil) (dot_perpR_eq_0 formula-decl nil perpendicular_2D vectors) (int_times_even_is_even application-judgement "even_int" integers nil) (real_times_real_is_real application-judgement "real" reals nil) (perpR_nz application-judgement "Nz_vect2" perpendicular_2D vectors) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (Nz_vect2 type-eq-decl nil vectors_2D vectors) (zero const-decl "Vector" vectors_2D vectors) (perpR const-decl "Vect2" perpendicular_2D vectors) (Vect2 type-eq-decl nil vectors_2D_def vectors) (* const-decl "real" vectors_2D vectors) (Vector type-eq-decl nil vectors_2D vectors) (sign const-decl "Sign" sign reals) (Sign type-eq-decl nil sign reals) (= const-decl "[T, T -> boolean]" equalities nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (nzint nonempty-type-eq-decl nil integers nil) (/= const-decl "boolean" notequal nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (dot_scal_right formula-decl nil vectors_2D vectors)) nil) (Vdir_perp-1 nil 3445463731 ("" (skeep) (("" (expand "Vdir") (("" (postpone) nil nil)) nil)) nil) nil shostak)) (W0_dot 0 (W0_dot-1 nil 3445461657 ("" (skeep) (("" (expand "W0") (("" (rewrite "dot_scal_right") (("" (rewrite "sqv" :dir rl) (("" (assert) nil nil)) nil)) nil)) nil)) nil) ((W0 const-decl "Vect2" definitions nil) (real_times_real_is_real application-judgement "real" reals nil) (Nz_vect2 type-eq-decl nil vectors_2D vectors) (zero const-decl "Vector" vectors_2D vectors) (sqv const-decl "nnreal" vectors_2D vectors) (nnreal type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (Vector type-eq-decl nil vectors_2D vectors) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/= const-decl "boolean" notequal nil) (numfield nonempty-type-eq-decl nil number_fields nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (dot_scal_right formula-decl nil vectors_2D vectors) (real_div_nzreal_is_real application-judgement "real" reals nil) (nz_sqv_gt_0 application-judgement "posreal" vectors_2D vectors)) shostak)) (nz_W0 0 (nz_W0-1 nil 3445461789 ("" (skeep) (("" (case "nzs*W0(nzs, nzj) = 0") (("1" (hide -2) (("1" (rewrite "W0_dot") (("1" (assert) nil nil)) nil)) nil) ("2" (replaces -1) (("2" (assert) nil nil)) nil)) nil)) nil) ((nzreal nonempty-type-eq-decl nil reals nil) (W0 const-decl "Vect2" definitions nil) (Vect2 type-eq-decl nil vectors_2D_def vectors) (Nz_vect2 type-eq-decl nil vectors_2D vectors) (zero const-decl "Vector" vectors_2D vectors) (/= const-decl "boolean" notequal nil) (* const-decl "real" vectors_2D vectors) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (Vector type-eq-decl nil vectors_2D vectors) (real nonempty-type-from-decl nil reals nil) (= const-decl "[T, T -> boolean]" equalities nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (W0_dot formula-decl nil definitions nil) (dot_zero_right formula-decl nil vectors_2D vectors) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (TRUE const-decl "bool" booleans nil) (bool nonempty-type-eq-decl nil booleans nil)) nil (nz_W0 subtype "definitions.W0(definitions.nzs, definitions.nzj)" "Nz_vect2"))) (nz_W 0 (nz_W-2 nil 3445463650 ("" (skeep :preds? t) (("" (hide -1) (("" (case "nzs*(W0(nzs,nzj) + k * Vdir(nzs, v)) = 0") (("1" (hide -2) (("1" (rewrite "dot_add_right") (("1" (rewrite "Vdir_perp") (("1" (assert) (("1" (rewrite "W0_dot") nil nil)) nil)) nil)) nil)) nil) ("2" (replaces -1) (("2" (assert) nil nil)) nil)) nil)) nil)) nil) ((bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (dot_zero_right formula-decl nil vectors_2D vectors) (Vdir_perp formula-decl nil definitions nil) (W0_dot formula-decl nil definitions nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (dot_scal_right formula-decl nil vectors_2D vectors) (real_plus_real_is_real application-judgement "real" reals nil) (nz_W0 application-judgement "Nz_vect2" definitions nil) (real_times_real_is_real application-judgement "real" reals nil) (dot_add_right formula-decl nil vectors_2D vectors) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (real nonempty-type-from-decl nil reals nil) (Vector type-eq-decl nil vectors_2D vectors) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (* const-decl "real" vectors_2D vectors) (/= const-decl "boolean" notequal nil) (zero const-decl "Vector" vectors_2D vectors) (Nz_vect2 type-eq-decl nil vectors_2D vectors) (+ const-decl "Vector" vectors_2D vectors) (Vect2 type-eq-decl nil vectors_2D_def vectors) (W0 const-decl "Vect2" definitions nil) (nzreal nonempty-type-eq-decl nil reals nil) (* const-decl "Vector" vectors_2D vectors) (Vdir const-decl "Nz_vect2" definitions nil)) nil (nz_W subtype "(vectors_2D.+)(definitions.W0(definitions.nzs, definitions.nzj), vectors_2D.*(definitions.k, definitions.Vdir(definitions.nzs, definitions.v)))" "Nz_vect2")) (nz_W-1 nil 3445463548 ("" (judgement-tcc) nil nil) nil nil (nz_W subtype "(vectors_2D.+)(definitions.W0(definitions.nzs, definitions.nzj), vectors_2D.*(definitions.k, definitions.Vdir(definitions.nzs, definitions.v)))" "Nz_vect2"))) (W_dot 0 (W_dot-2 nil 3445463605 ("" (skeep) (("" (rewrite "dot_add_right") (("" (rewrite "Vdir_perp") (("" (assert) (("" (rewrite "W0_dot") nil nil)) nil)) nil)) nil)) nil) ((dot_add_right formula-decl nil vectors_2D vectors) (real nonempty-type-from-decl nil reals nil) (Vector type-eq-decl nil vectors_2D vectors) (boolean nonempty-type-decl nil booleans nil) (/= const-decl "boolean" notequal nil) (zero const-decl "Vector" vectors_2D vectors) (Nz_vect2 type-eq-decl nil vectors_2D vectors) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (Vect2 type-eq-decl nil vectors_2D_def vectors) (W0 const-decl "Vect2" definitions nil) (* const-decl "Vector" vectors_2D vectors) (Vdir const-decl "Nz_vect2" definitions nil) (real_times_real_is_real application-judgement "real" reals nil) (real_plus_real_is_real application-judgement "real" reals nil) (dot_scal_right formula-decl nil vectors_2D vectors) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (W0_dot formula-decl nil definitions nil) (Vdir_perp formula-decl nil definitions nil)) nil) (W_dot-1 nil 3445463567 ("" (skeep) (("" (postpone) nil nil)) nil) nil shostak)) (dot_W 0 (dot_W-1 nil 3445551996 ("" (skeep) (("" (split) (("1" (flatten) (("1" (inst 1 "(w*Vdir(nzs,v))/sqv(nzs)") (("1" (expand "W0") (("1" (case-replace "(j / sqv(nzs)) * nzs + (w * Vdir(nzs, v)) / sqv(nzs) * Vdir(nzs, v) = (1/sqv(nzs))*(j*nzs + (w * Vdir(nzs, v))*Vdir(nzs,v))") (("1" (hide -1) (("1" (rewrite "scal_div_mult_right") (("1" (replaces -1 :dir rl) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (grind :exclude ("sqv" "Vdir")) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (skeep -1) (("2" (replaces -1) (("2" (rewrite "W_dot") nil nil)) nil)) nil)) nil)) nil)) nil) ((real_div_nzreal_is_real application-judgement "real" reals nil) (nz_sqv_gt_0 application-judgement "posreal" vectors_2D vectors) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (/= const-decl "boolean" notequal nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (Vector type-eq-decl nil vectors_2D vectors) (* const-decl "real" vectors_2D vectors) (Vect2 type-eq-decl nil vectors_2D_def vectors) (zero const-decl "Vector" vectors_2D vectors) (Nz_vect2 type-eq-decl nil vectors_2D vectors) (Vdir const-decl "Nz_vect2" definitions nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nnreal type-eq-decl nil real_types nil) (sqv const-decl "nnreal" vectors_2D vectors) (* const-decl "Vector" vectors_2D vectors) (+ const-decl "Vector" vectors_2D vectors) (= const-decl "[T, T -> boolean]" equalities nil) (posreal_div_posreal_is_posreal application-judgement "posreal" real_types nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (nzreal nonempty-type-eq-decl nil reals nil) (scal_div_mult_right formula-decl nil vectors_2D vectors) (scal_1 formula-decl nil vectors_2D vectors) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (minus_real_is_real application-judgement "real" reals nil) (nz_nzv application-judgement "Nz_vector" vectors_2D vectors) (perpR_nz application-judgement "Nz_vect2" perpendicular_2D vectors) (real_times_real_is_real application-judgement "real" reals nil) (real_plus_real_is_real application-judgement "real" reals nil) (perpR const-decl "Vect2" perpendicular_2D vectors) (sign const-decl "Sign" sign reals) (TRUE const-decl "bool" booleans nil) (W0 const-decl "Vect2" definitions nil) (W_dot formula-decl nil definitions nil)) shostak)) (s_dot_Vdir_eq_0 0 (s_dot_Vdir_eq_0-1 nil 3447775712 ("" (skeep) (("" (expand "Vdir") (("" (rewrite "dot_scal_right") (("" (rewrite "dot_perpR_eq_0") (("" (assert) nil nil)) nil)) nil)) nil)) nil) ((Vdir const-decl "Nz_vect2" definitions nil) (dot_perpR_eq_0 formula-decl nil perpendicular_2D vectors) (int_times_even_is_even application-judgement "even_int" integers nil) (real_times_real_is_real application-judgement "real" reals nil) (perpR_nz application-judgement "Nz_vect2" perpendicular_2D vectors) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (Nz_vect2 type-eq-decl nil vectors_2D vectors) (zero const-decl "Vector" vectors_2D vectors) (perpR const-decl "Vect2" perpendicular_2D vectors) (Vect2 type-eq-decl nil vectors_2D_def vectors) (* const-decl "real" vectors_2D vectors) (Vector type-eq-decl nil vectors_2D vectors) (sign const-decl "Sign" sign reals) (Sign type-eq-decl nil sign reals) (= const-decl "[T, T -> boolean]" equalities nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (nzint nonempty-type-eq-decl nil integers nil) (/= const-decl "boolean" notequal nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (dot_scal_right formula-decl nil vectors_2D vectors)) shostak)) (W0_dot_Vdir_eq_0 0 (W0_dot_Vdir_eq_0-1 nil 3447768993 ("" (skeep) (("" (expand* "W0" "Vdir") (("" (rewrite "dot_scal_left") (("" (rewrite "dot_perpR_eq_0") (("" (assert) nil nil)) nil)) nil)) nil)) nil) ((Vdir const-decl "Nz_vect2" definitions nil) (W0 const-decl "Vect2" definitions nil) (dot_perpR_eq_0 formula-decl nil perpendicular_2D vectors) (int_times_even_is_even application-judgement "even_int" integers nil) (dot_scal_right formula-decl nil vectors_2D vectors) (real_times_real_is_real application-judgement "real" reals nil) (nz_nzv application-judgement "Nz_vector" vectors_2D vectors) (perpR_nz application-judgement "Nz_vect2" perpendicular_2D vectors) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (perpR const-decl "Vect2" perpendicular_2D vectors) (Vect2 type-eq-decl nil vectors_2D_def vectors) (* const-decl "real" vectors_2D vectors) (sign const-decl "Sign" sign reals) (Sign type-eq-decl nil sign reals) (= const-decl "[T, T -> boolean]" equalities nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (nzint nonempty-type-eq-decl nil integers nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (* const-decl "Vector" vectors_2D vectors) (Nz_vect2 type-eq-decl nil vectors_2D vectors) (zero const-decl "Vector" vectors_2D vectors) (sqv const-decl "nnreal" vectors_2D vectors) (nnreal type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (Vector type-eq-decl nil vectors_2D vectors) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/= const-decl "boolean" notequal nil) (numfield nonempty-type-eq-decl nil number_fields nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (dot_scal_left formula-decl nil vectors_2D vectors) (real_div_nzreal_is_real application-judgement "real" reals nil) (nz_sqv_gt_0 application-judgement "posreal" vectors_2D vectors)) shostak)) (norm_W0_ge 0 (norm_W0_ge-1 nil 3447779580 ("" (skeep) (("" (both-sides-f 1 "sq") (("1" (rewrite "sq_norm") (("1" (rewrite "sq_norm") (("1" (rewrite "sqv_add") (("1" (rewrite "sqv_add") (("1" (rewrite "sqv_scal") (("1" (rewrite "sqv_scal") (("1" (case "sq(t1) * sqv(W0(nzs, j)) >=  sq(t2) * sqv(W0(nzs, j))") (("1" (case "2 * (t1 * (nzs * W0(nzs, j))) >=  2 * (t2 * (nzs * W0(nzs, j)))") (("1" (assert) nil nil) ("2" (hide-all-but (-2 -3 1)) (("2" (grind-reals) (("2" (mult-by -1 "nzs * W0(nzs, j)") (("2" (hide-all-but (-2 1)) (("2" (expand "W0") (("2" (rewrite "dot_scal_right") (("2" (rewrite "sqv" :dir rl) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (grind-reals) (("2" (rewrite "sq_ge") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (rewrite "sq_ge") nil nil)) nil)) nil) ((TRUE const-decl "bool" booleans nil) (id const-decl "(bijective?[T, T])" identity nil) (bijective? const-decl "bool" functions nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (sq const-decl "nonneg_real" sq reals) (Vector type-eq-decl nil vectors_2D vectors) (nnreal type-eq-decl nil real_types nil) (norm const-decl "nnreal" vectors_2D vectors) (+ const-decl "Vector" vectors_2D vectors) (/= const-decl "boolean" notequal nil) (zero const-decl "Vector" vectors_2D vectors) (Nz_vect2 type-eq-decl nil vectors_2D vectors) (* const-decl "Vector" vectors_2D vectors) (Vect2 type-eq-decl nil vectors_2D_def vectors) (W0 const-decl "Vect2" definitions nil) (nnreal_plus_posreal_is_posreal application-judgement "posreal" real_types nil) (sq_ge formula-decl nil sq reals) (both_sides_times_pos_ge1 formula-decl nil real_props nil) (* const-decl "real" vectors_2D vectors) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (both_sides_times_pos_ge2 formula-decl nil real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (nznum nonempty-type-eq-decl nil number_fields nil) (real_div_nzreal_is_real application-judgement "real" reals nil) (times_div2 formula-decl nil real_props nil) (zero_times1 formula-decl nil real_props nil) (pos_times_ge formula-decl nil real_props nil) (div_mult_pos_ge1 formula-decl nil real_props nil) (both_sides_times_neg_ge1 formula-decl nil real_props nil) (nzs skolem-const-decl "Nz_vect2" definitions nil) (j skolem-const-decl "real" definitions nil) (both_sides_times_pos_ge1_imp formula-decl nil extra_real_props nil) (sqv const-decl "nnreal" vectors_2D vectors) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types nil) (sqv_scal formula-decl nil vectors_2D vectors) (dot_scal_left formula-decl nil vectors_2D vectors) (dot_scal_right formula-decl nil vectors_2D vectors) (real_plus_real_is_real application-judgement "real" reals nil) (posreal_plus_nnreal_is_posreal application-judgement "posreal" real_types nil) (nz_sqv_gt_0 application-judgement "posreal" vectors_2D vectors) (nz_nzv application-judgement "Nz_vector" vectors_2D vectors) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (real_times_real_is_real application-judgement "real" reals nil) (sqv_add formula-decl nil vectors_2D vectors) (sq_norm formula-decl nil vectors_2D vectors)) shostak)) (dot_pos_divergent 0 (dot_pos_divergent-1 nil 3450450546 ("" (skeep) (("" (lemma "dot_nneg_divergent") (("" (inst?) (("" (assert) (("" (hide 2) (("" (grind) nil nil)) nil)) nil)) nil)) nil)) nil) ((dot_nneg_divergent formula-decl nil closest_approach_2D vectors) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (sub_zero_right formula-decl nil vectors_2D vectors) (real_times_real_is_real application-judgement "real" reals nil) (real_plus_real_is_real application-judgement "real" reals nil) (/= const-decl "boolean" notequal nil) (* const-decl "real" vectors_2D vectors) (comp_zero_y formula-decl nil vectors_2D vectors) (comp_zero_x formula-decl nil vectors_2D vectors) (zero const-decl "Vector" vectors_2D vectors) (Vector type-eq-decl nil vectors_2D vectors) (Vect2 type-eq-decl nil vectors_2D_def vectors) (real nonempty-type-from-decl nil reals nil)) nil)) (dot_nneg_divergent 0 (dot_nneg_divergent-1 nil 3488708453 ("" (skeep) (("" (lemma "dot_nneg_divergent") (("" (inst?) (("" (assert) (("" (split +) (("1" (propax) nil nil) ("2" (hide -1) (("2" (flatten) (("2" (expand "divergent?") (("2" (name "taus" "-(s*nzv)/sqv(nzv)") (("2" (inst - "taus") (("1" (assert) (("1" (expand "dist") (("1" (case "sqv(s) >= sqv(s+taus*nzv)") (("1" (hide -2) (("1" (lemma "sq_dist_norm") (("1" (inst-cp -1 "s" "zero") (("1" (inst - "s+taus*nzv" "zero") (("1" (replace -1) (("1" (replace -2) (("1" (hide -1) (("1" (hide -1) (("1" (rewrite "sqrt_sq") (("1" (rewrite "sqrt_sq") (("1" (lemma "sqrt_ge") (("1" (inst?) (("1" (assert) (("1" (rewrite "sqrt_sqv_norm") (("1" (rewrite "sqrt_sqv_norm") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) (("2" (hide -2) (("2" (name "a" "sqv(nzv)") (("2" (name "b" "2*s*nzv") (("2" (name "c" "sqv(s)") (("2" (lemma "quad_min") (("2" (inst - "a" "b" "c") (("2" (assert) (("2" (case "a > 0") (("1" (assert) (("1" (expand "is_minimum?") (("1" (inst - "0") (("1" (case "-b/(2*a) = taus") (("1" (replace -1) (("1" (hide-all-but (-3 1)) (("1" (expand "a") (("1" (expand "b") (("1" (expand "c") (("1" (grind) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (case "taus>0") (("1" (assert) nil nil) ("2" (expand "taus" 1) (("2" (cross-mult 1) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((dot_nneg_divergent formula-decl nil closest_approach_2D vectors) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (sub_zero_right formula-decl nil vectors_2D vectors) (divergent? const-decl "bool" closest_approach_2D vectors) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (taus skolem-const-decl "real" definitions nil) (> const-decl "bool" reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (dist const-decl "nnreal" distance_2D vectors) (nonzero_real nonempty-type-eq-decl nil reals nil) (is_minimum? const-decl "bool" quad_minmax reals) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (b skolem-const-decl "real" definitions nil) (sq const-decl "nonneg_real" sq reals) (quadratic const-decl "real" quadratic reals) (real_plus_real_is_real application-judgement "real" reals nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (c skolem-const-decl "nnreal" definitions nil) (a skolem-const-decl "posreal" definitions nil) (dot_scal_left formula-decl nil vectors_2D vectors) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (posreal_times_posreal_is_posreal application-judgement "posreal" real_types nil) (real_times_real_is_real application-judgement "real" reals nil) (quad_min formula-decl nil quad_minmax reals) (- const-decl "Vector" vectors_2D vectors) (norm const-decl "nnreal" vectors_2D vectors) (sqrt_sq formula-decl nil sqrt reals) (sqrt_sq_neg formula-decl nil sqrt reals) (sqrt_ge formula-decl nil sqrt reals) (sqrt_sqv_norm formula-decl nil vectors_2D vectors) (sq_dist_norm formula-decl nil distance_2D vectors) (* const-decl "Vector" vectors_2D vectors) (+ const-decl "Vector" vectors_2D vectors) (add_zero_left formula-decl nil vectors_2D vectors) (scal_zero formula-decl nil vectors_2D vectors) (minus_real_is_real application-judgement "real" reals nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types nil) (div_mult_pos_gt1 formula-decl nil extra_real_props nil) (nz_sqv_gt_0 application-judgement "posreal" vectors_2D vectors) (real_div_nzreal_is_real application-judgement "real" reals nil) (number nonempty-type-decl nil numbers nil) (= const-decl "[T, T -> boolean]" equalities nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (- const-decl "[numfield -> numfield]" number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (* const-decl "real" vectors_2D vectors) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nnreal type-eq-decl nil real_types nil) (sqv const-decl "nnreal" vectors_2D vectors) (Nz_vect2 type-eq-decl nil vectors_2D vectors) (/= const-decl "boolean" notequal nil) (boolean nonempty-type-decl nil booleans nil) (zero const-decl "Vector" vectors_2D vectors) (Vector type-eq-decl nil vectors_2D vectors) (Vect2 type-eq-decl nil vectors_2D_def vectors) (real nonempty-type-from-decl nil reals nil)) nil)) (dot_pos_divergent_sqv 0 (dot_pos_divergent_sqv-1 nil 3826125518 ("" (skeep) (("" (lemma "dot_pos_divergent") (("" (inst?) (("" (assert) (("" (expand "divergent?") (("" (assert) (("" (skeep) (("" (insteep) (("" (expand "dist") (("" (expand "sq_dist") (("" (assert) (("" (case-replace "sq(s`x) + sq(s`y) = sqv(s)") (("1" (hide -1) (("1" (case-replace "sq((s + t * v)`x) + sq((s + t * v)`y) = sqv(s+t*v)") (("1" (hide -1) (("1" (rewrite "sqrt_lt") nil nil)) nil) ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((dot_pos_divergent formula-decl nil definitions nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (scal_zero formula-decl nil vectors_2D vectors) (add_zero_left formula-decl nil vectors_2D vectors) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (sq_dist const-decl "nnreal" distance_2D vectors) (sqv const-decl "nnreal" vectors_2D vectors) (nnreal type-eq-decl nil real_types nil) (Vector type-eq-decl nil vectors_2D vectors) (sq const-decl "nonneg_real" sq reals) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (= const-decl "[T, T -> boolean]" equalities nil) (* const-decl "Vector" vectors_2D vectors) (+ const-decl "Vector" vectors_2D vectors) (sqrt_lt formula-decl nil sqrt reals) (* const-decl "real" vectors_2D vectors) (real_plus_real_is_real application-judgement "real" reals nil) (real_times_real_is_real application-judgement "real" reals nil) (comp_zero_y formula-decl nil vectors_2D vectors) (comp_zero_x formula-decl nil vectors_2D vectors) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types nil) (real_minus_real_is_real application-judgement "real" reals nil) (dist const-decl "nnreal" distance_2D vectors) (divergent? const-decl "bool" closest_approach_2D vectors) (Vect2 type-eq-decl nil vectors_2D_def vectors) (real nonempty-type-from-decl nil reals nil)) shostak)) (dot_nneg_divergent_sqv 0 (dot_nneg_divergent_sqv-1 nil 3826125818 ("" (skeep) (("" (lemma "dot_nneg_divergent") (("" (inst?) (("" (expand "divergent?") (("" (assert) (("" (expand "dist") (("" (expand "sq_dist") (("" (assert) (("" (case-replace "sq(s`x) + sq(s`y) = sqv(s)") (("1" (replaces -2) (("1" (hide -1) (("1" (split) (("1" (flatten) (("1" (skeep) (("1" (insteep) (("1" (case-replace "sq((s + t * nzv)`x) + sq((s + t * nzv)`y) = sqv(s+t*nzv)") (("1" (hide -1) (("1" (rewrite "sqrt_lt") nil nil)) nil) ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (skeep) (("2" (insteep) (("2" (case-replace "sq((s + t * nzv)`x) + sq((s + t * nzv)`y) = sqv(s+t*nzv)") (("1" (hide -1) (("1" (rewrite "sqrt_lt") nil nil)) nil) ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((dot_nneg_divergent formula-decl nil definitions nil) (divergent? const-decl "bool" closest_approach_2D vectors) (dist const-decl "nnreal" distance_2D vectors) (comp_zero_x formula-decl nil vectors_2D vectors) (comp_zero_y formula-decl nil vectors_2D vectors) (TRUE const-decl "bool" booleans nil) (* const-decl "Vector" vectors_2D vectors) (+ const-decl "Vector" vectors_2D vectors) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nz_nzv application-judgement "Nz_vector" vectors_2D vectors) (sqrt_lt formula-decl nil sqrt reals) (* const-decl "real" vectors_2D vectors) (real_plus_real_is_real application-judgement "real" reals nil) (real_times_real_is_real application-judgement "real" reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types nil) (number nonempty-type-decl nil numbers nil) (= const-decl "[T, T -> boolean]" equalities nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (sq const-decl "nonneg_real" sq reals) (nnreal type-eq-decl nil real_types nil) (sqv const-decl "nnreal" vectors_2D vectors) (sq_dist const-decl "nnreal" distance_2D vectors) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (add_zero_left formula-decl nil vectors_2D vectors) (scal_zero formula-decl nil vectors_2D vectors) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (Vect2 type-eq-decl nil vectors_2D_def vectors) (Nz_vect2 type-eq-decl nil vectors_2D vectors) (zero const-decl "Vector" vectors_2D vectors) (/= const-decl "boolean" notequal nil) (boolean nonempty-type-decl nil booleans nil) (Vector type-eq-decl nil vectors_2D vectors) (real nonempty-type-from-decl nil reals nil)) shostak)) (gs_nz 0 (gs_nz-1 nil 3473099555 ("" (skeep) (("" (expand "gs") (("" (lemma "norm_zero") (("" (assert) nil nil)) nil)) nil)) nil) ((gs const-decl "nnreal" definitions nil) (nz_norm_gt_0 application-judgement "posreal" vectors_2D vectors) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (norm_zero formula-decl nil vectors_2D vectors)) nil (gs_nz subtype "definitions.gs(definitions.nzv)" "posreal"))) (gs_only_id 0 (gs_only_id-1 nil 3464015152 ("" (skeep) (("" (expand "gs_only?") (("" (inst 1 "1") (("" (assert) nil nil)) nil)) nil)) nil) ((gs_only? const-decl "bool" definitions nil) (scal_1 formula-decl nil vectors_2D vectors) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil)) shostak)) (gs_only_scal 0 (gs_only_scal-1 nil 3464015172 ("" (skeep) (("" (expand "gs_only?") (("" (inst 1 "l") nil nil)) nil)) nil) ((gs_only? const-decl "bool" definitions nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) shostak)) (gs_only_symm 0 (gs_only_symm-2 nil 3464015261 ("" (skeep) (("" (expand "gs_only?") (("" (split) (("1" (flatten) (("1" (skeep -1) (("1" (inst 1 "1/l") (("1" (lemma "scal_cross") (("1" (inst -1 "l" "vo2" "vo1") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (skeep -1) (("2" (inst 1 "1/l") (("2" (lemma "scal_cross") (("2" (inst -1 "l" "vo1" "vo2") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((gs_only? const-decl "bool" definitions nil) (posreal_div_posreal_is_posreal application-judgement "posreal" real_types nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (numfield nonempty-type-eq-decl nil number_fields nil) (/= const-decl "boolean" notequal nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (Vect2 type-eq-decl nil vectors_2D_def vectors) (Vector type-eq-decl nil vectors_2D vectors) (nzreal nonempty-type-eq-decl nil reals nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (scal_cross formula-decl nil vectors_2D vectors)) nil) (gs_only_symm-1 nil 3464015217 ("" (skeep) (("" (postpone) nil nil)) nil) nil shostak)) (gs_only_trans 0 (gs_only_trans-1 nil 3560435266 ("" (skeep) (("" (expand "gs_only?" -) (("" (skosimp*) (("" (replaces -) (("" (rewrite "scal_assoc") (("" (rewrite "gs_only_scal") nil nil)) nil)) nil)) nil)) nil)) nil) ((gs_only? const-decl "bool" definitions nil) (TRUE const-decl "bool" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (gs_only_scal formula-decl nil definitions nil) (posreal_times_posreal_is_posreal application-judgement "posreal" real_types nil) (Vect2 type-eq-decl nil vectors_2D_def vectors) (Vector type-eq-decl nil vectors_2D vectors) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (scal_assoc formula-decl nil vectors_2D vectors)) shostak)) (gs_only_normalize 0 (gs_only_normalize-1 nil 3560436330 ("" (skeep) (("" (split) (("1" (flatten) (("1" (expand "gs_only?") (("1" (skeep -) (("1" (expand "^") (("1" (inst 1 "l*norm(nzv)") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (skeep -1) (("2" (expand "^") (("2" (replaces -1) (("2" (rewrite "scal_assoc") (("2" (rewrite "gs_only_scal") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((gs_only? const-decl "bool" definitions nil) (nz_norm_gt_0 application-judgement "posreal" vectors_2D vectors) (^ const-decl "Normalized" vectors_2D vectors) (scal_assoc formula-decl nil vectors_2D vectors) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (posreal_div_posreal_is_posreal application-judgement "posreal" real_types nil) (nz_nzv application-judgement "Nz_vector" vectors_2D vectors) (Nz_vect2 type-eq-decl nil vectors_2D vectors) (zero const-decl "Vector" vectors_2D vectors) (/= const-decl "boolean" notequal nil) (norm const-decl "nnreal" vectors_2D vectors) (nnreal type-eq-decl nil real_types nil) (Vector type-eq-decl nil vectors_2D vectors) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (posreal_times_posreal_is_posreal application-judgement "posreal" real_types nil) (TRUE const-decl "bool" booleans nil) (Vect2 type-eq-decl nil vectors_2D_def vectors) (gs_only_scal formula-decl nil definitions nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (nznum nonempty-type-eq-decl nil number_fields nil)) shostak)) (gs_only_zero_left 0 (gs_only_zero_left-1 nil 3464015309 ("" (skeep) (("" (split) (("1" (flatten) (("1" (expand "gs_only?") (("1" (skeep -1) (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (flatten) (("2" (replaces -1) (("2" (rewrite "gs_only_id") nil nil)) nil)) nil)) nil)) nil) ((gs_only? const-decl "bool" definitions nil) (scal_zero formula-decl nil vectors_2D vectors) (TRUE const-decl "bool" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (zero const-decl "Vector" vectors_2D vectors) (Vector type-eq-decl nil vectors_2D vectors) (Vect2 type-eq-decl nil vectors_2D_def vectors) (real nonempty-type-from-decl nil reals nil) (gs_only_id formula-decl nil definitions nil)) nil)) (gs_only_zero_right 0 (gs_only_zero_right-1 nil 3464015324 ("" (skeep) (("" (rewrite "gs_only_symm") (("" (rewrite "gs_only_zero_left") nil nil)) nil)) nil) ((gs_only_symm formula-decl nil definitions nil) (real nonempty-type-from-decl nil reals nil) (Vect2 type-eq-decl nil vectors_2D_def vectors) (Vector type-eq-decl nil vectors_2D vectors) (zero const-decl "Vector" vectors_2D vectors) (gs_only_zero_left formula-decl nil definitions nil)) nil)) (trk_only_id 0 (trk_only_id-1 nil 3464015576 ("" (skeep) (("" (expand "trk_only?") (("" (propax) nil nil)) nil)) nil) ((trk_only? const-decl "bool" definitions nil)) shostak)) (trk_only_symm 0 (trk_only_symm-1 nil 3464015586 ("" (grind) nil nil) ((real_plus_real_is_real application-judgement "real" reals nil) (* const-decl "real" vectors_2D vectors) (sqv const-decl "nnreal" vectors_2D vectors) (norm const-decl "nnreal" vectors_2D vectors) (trk_only? const-decl "bool" definitions nil) (real_times_real_is_real application-judgement "real" reals nil)) shostak)) (trk_only_zero_left 0 (trk_only_zero_left-2 nil 3464015626 ("" (skeep) (("" (expand "trk_only?") (("" (ground) (("1" (rewrite "norm_eq_0") nil nil) ("2" (replaces -1) (("2" (assert) nil nil)) nil)) nil)) nil)) nil) ((trk_only? const-decl "bool" definitions nil) (TRUE const-decl "bool" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (norm_eq_0 formula-decl nil vectors_2D vectors) (real nonempty-type-from-decl nil reals nil) (Vector type-eq-decl nil vectors_2D vectors) (Vect2 type-eq-decl nil vectors_2D_def vectors) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (norm_zero formula-decl nil vectors_2D vectors)) nil) (trk_only_zero_left-1 nil 3464015594 ("" (grind) (("" (postpone) nil nil)) nil) nil shostak)) (trk_only_zero_right 0 (trk_only_zero_right-1 nil 3464015642 ("" (skeep) (("" (rewrite "trk_only_symm") (("" (rewrite "trk_only_zero_left") nil nil)) nil)) nil) ((trk_only_symm formula-decl nil definitions nil) (real nonempty-type-from-decl nil reals nil) (Vect2 type-eq-decl nil vectors_2D_def vectors) (Vector type-eq-decl nil vectors_2D vectors) (zero const-decl "Vector" vectors_2D vectors) (trk_only_zero_left formula-decl nil definitions nil)) nil)) (optimal_id 0 (optimal_id-1 nil 3464023633 ("" (skeep) (("" (expand "optimal?") (("" (skeep) (("" (expand "le?") (("" (assert) nil nil)) nil)) nil)) nil)) nil) ((optimal? const-decl "bool" definitions nil) (le? const-decl "bool" definitions nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (norm_zero formula-decl nil vectors_2D vectors) (sub_eq_args formula-decl nil vectors_2D vectors)) nil)) (z_at_vertical_tau_eq_0 0 (z_at_vertical_tau_eq_0-1 nil 3465916105 ("" (grind) nil nil) ((minus_real_is_real application-judgement "real" reals nil) (real_div_nzreal_is_real application-judgement "real" reals nil) (real_times_real_is_real application-judgement "real" reals nil) (vertical_tau const-decl "real" definitions nil)) shostak)))
