(|Vector_VectorN|
 (|Vn_2_V_TCC1| 0
  (|Vn_2_V_TCC1-1| |nil| 3788542714
   ("" (SKEEP)
    (("" (TYPEPRED "V") (("" (ASSERT) (("" (POSTPONE) NIL NIL)) NIL)) NIL))
    NIL)
   ((|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    NIL)
   NIL (|Vn_2_V| SUBTYPE "Vector_VectorN.i" "below[length[real](V)]")))
 (|V_2_Vn_TCC1| 0
  (|V_2_Vn_TCC1-1| |nil| 3788542822 ("" (SKEEP) (("" (ASSERT) NIL NIL)) NIL)
   ((|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL))
   NIL (|V_2_Vn| SUBTYPE "0" "Index[m]")))
 (|V_2_Vn_TCC2| 0
  (|V_2_Vn_TCC1-1| |nil| 3788542714
   ("" (SKEEP)
    (("" (ASSERT)
      (("" (SKEEP 1)
        (("" (TYPEPRED "i")
          (("" (CASE "NOT i=0") (("1" (ASSERT) NIL NIL) ("2" (GRIND) NIL NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   (NIL (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL))
   NIL
   (|V_2_Vn| SUBTYPE "(: Vector_VectorN.V(0) :)"
    "{VV: matrices.VectorN(Vector_VectorN.m) | FORALL (i: naturalnumbers.below(Vector_VectorN.m)): list_props[real].nth(VV, i) = Vector_VectorN.V(i)}")))
 (|V_2_Vn_TCC3| 0
  (|V_2_Vn_TCC4-1| |nil| 3788542714
   ("" (SKEEP)
    (("" (SPLIT 2)
      (("1" (EXPAND "length" 1 1) (("1" (ASSERT) NIL NIL)) NIL)
       ("2" (SKEEP 1)
        (("2" (CASE "i_1=0")
          (("1" (EXPAND "nth" 1 1) (("1" (ASSERT) NIL NIL)) NIL)
           ("2" (EXPAND "nth" 2 1)
            (("2" (ASSERT)
              (("2" (TYPEPRED "(v(m - 1, LAMBDA (i: nat): V(1 + i)))")
                (("2" (INST -3 "i_1-1") (("2" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL))
   NIL (|V_2_Vn| SUBTYPE "0" "Index[m]")))
 (|V_2_Vn_TCC4| 0
  (|V_2_Vn_TCC2-1| |nil| 3788542714 ("" (SKEEP) (("" (ASSERT) NIL NIL)) NIL)
   ((|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL))
   NIL (|V_2_Vn| SUBTYPE "(number_fields.-)(Vector_VectorN.m, 1)" "posnat")))
 (|V_2_Vn_TCC5| 0
  (|V_2_Vn_TCC5-1| |nil| 3788543857 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|V_2_Vn| SUBTYPE "(number_fields.+)(Vector_VectorN.i, 1)" "Index[m]")))
 (|V_2_Vn_TCC6| 0
  (|V_2_Vn_TCC3-1| |nil| 3788542714 ("" (TERMINATION-TCC) NIL NIL) NIL NIL
   (|V_2_Vn| TERMINATION
    "Vector_VectorN.V_2_Vn((number_fields.-)(Vector_VectorN.m, 1), LAMBDA (i: naturalnumbers.below((number_fields.-)(Vector_VectorN.m, 1))): Vector_VectorN.V((number_fields.+)(i, 1)))"
    "NIL")))
 (|V_2_Vn_TCC7| 0
  (|V_2_Vn_TCC7-1| |nil| 3788543857
   ("" (SKEEP)
    (("" (SPLIT 2)
      (("1" (EXPAND "length" 1 1) (("1" (ASSERT) NIL NIL)) NIL)
       ("2" (SKEEP 1)
        (("2" (CASE "i_1=0")
          (("1" (ASSERT)
            (("1" (EXPAND "nth" 1 1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)
           ("2" (EXPAND "nth" 2 1)
            (("2" (ASSERT)
              (("2" (TYPEPRED "v(m - 1, LAMBDA (i: below(m - 1)): V(1 + i))")
                (("2" (INST -3 "i_1-1") (("2" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) NIL
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|Index| TYPE-EQ-DECL NIL |vectors| |vectors|)
    (|Vector| TYPE-EQ-DECL NIL |vectors| |vectors|)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL))
   NIL
   (|V_2_Vn| SUBTYPE
    "list_adt[real].cons(Vector_VectorN.V(0), Vector_VectorN.V_2_Vn((number_fields.-)(Vector_VectorN.m, 1), LAMBDA (i: naturalnumbers.below((number_fields.-)(Vector_VectorN.m, 1))): Vector_VectorN.V((number_fields.+)(i, 1))))"
    "{VV: matrices.VectorN(Vector_VectorN.m) | FORALL (i: naturalnumbers.below(Vector_VectorN.m)): list_props[real].nth(VV, i) = Vector_VectorN.V(i)}")))
 (|Vn_V| 0
  (|Vn_V-1| |nil| 3788543965
   ("" (INDUCT "m")
    (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)
     ("3" (SKEEP)
      (("3" (CASE "j=0")
        (("1" (REPLACE -1)
          (("1" (SKEEP 1)
            (("1" (HIDE -2)
              (("1" (ASSERT)
                (("1" (EXPAND "Vn_2_V")
                  (("1" (EXPAND "V_2_Vn")
                    (("1" (GRIND)
                      (("1" (DECOMPOSE-EQUALITY 1)
                        (("1" (TYPEPRED "V")
                          (("1" (EXPAND "length" -2)
                            (("1" (EXPAND "length" -2) (("1" (ASSERT) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (ASSERT)
          (("2" (SKEEP 2)
            (("2" (EXPAND "Vn_2_V")
              (("2" (EXPAND "V_2_Vn" 2 1)
                (("2" (DECOMPOSE-EQUALITY 2 1)
                  (("1" (GRIND) NIL NIL)
                   ("2" (INST -1 "cdr(V)")
                    (("1" (ASSERT)
                      (("1" (EXPAND "nth" 1 1) (("1" (PROPAX) NIL NIL)) NIL))
                      NIL)
                     ("2" (ASSERT)
                      (("2" (TYPEPRED "V")
                        (("2" (EXPAND "length" -2 1) (("2" (PROPAX) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   (NIL NIL (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|list_cons_extensionality| FORMULA-DECL NIL |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    NIL
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|Vn_2_V| CONST-DECL "vectors@vectors[m].Vector" |Vector_VectorN| NIL)
    (|V_2_Vn| DEF-DECL
     "{VV: VectorN(m) | FORALL (i: below(m)): nth(VV, i) = V(i)}"
     |Vector_VectorN| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|Vector| TYPE-EQ-DECL NIL |vectors| |vectors|)
    (|Index| TYPE-EQ-DECL NIL |vectors| |vectors|)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL) (> CONST-DECL "bool" |reals| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   SHOSTAK))
 (|V_Vn| 0
  (|V_Vn-1| |nil| 3788604116
   ("" (INDUCT "m")
    (("1" (SKEEP 2) (("1" (DECOMPOSE-EQUALITY 2) NIL NIL)) NIL)
     ("2" (GRIND) NIL NIL)
     ("3" (SKEEP)
      (("3" (CASE "j=0")
        (("1" (SKEEP 1)
          (("1" (DECOMPOSE-EQUALITY 1)
            (("1" (TYPEPRED "x!1")
              (("1" (ASSERT)
                (("1" (CASE "NOT x!1=0")
                  (("1" (ASSERT) NIL NIL)
                   ("2" (REPLACE -1) (("2" (GRIND) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (SKEEP 2)
          (("2" (ASSERT)
            (("2" (DECOMPOSE-EQUALITY 2)
              (("2" (TYPEPRED "x!1")
                (("2" (CASE "x!1=0")
                  (("1" (REPLACE -1)
                    (("1" (EXPAND "V_2_Vn" 1 1)
                      (("1" (EXPAND "Vn_2_V")
                        (("1" (ASSERT)
                          (("1" (EXPAND "nth" 1 1) (("1" (PROPAX) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (ASSERT)
                    (("2" (INST -2 "LAMBDA(i:below(j)): V(i+1)")
                      (("2" (ASSERT)
                        (("2" (DECOMPOSE-EQUALITY -2)
                          (("2" (INST -1 "x!1-1")
                            (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    NIL (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|V_2_Vn| DEF-DECL
     "{VV: VectorN(m) | FORALL (i: below(m)): nth(VV, i) = V(i)}"
     |Vector_VectorN| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|Vn_2_V| CONST-DECL "vectors@vectors[m].Vector" |Vector_VectorN| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|Vector| TYPE-EQ-DECL NIL |vectors| |vectors|)
    (|Index| TYPE-EQ-DECL NIL |vectors| |vectors|)
    (< CONST-DECL "bool" |reals| NIL) (> CONST-DECL "bool" |reals| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   SHOSTAK))
 (|Vn_V_seq| 0
  (|Vn_V_seq-1| |nil| 3788604170
   ("" (SKEEP)
    (("" (DECOMPOSE-EQUALITY 1)
      (("" (TYPEPRED "x!1")
        (("" (EXPAND "Vn_2_V")
          (("" (EXPAND "V_2_Vn")
            (("" (LEMMA "Vn_V") (("" (INST -1 "m" "V(x!1)") NIL NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   (NIL (< CONST-DECL "bool" |reals| NIL)
    (|Index| TYPE-EQ-DECL NIL |vectors| |vectors|)
    (|Vector| TYPE-EQ-DECL NIL |vectors| |vectors|)
    (|n| FORMAL-CONST-DECL "posnat" |Vector_VectorN| NIL)
    (|vec_seq| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL)
    (|V_2_Vn| CONST-DECL "vec_seq(m)" |Vector_VectorN| NIL)
    (|Vn_2_V| CONST-DECL "[nat -> vectors@vectors[m].Vector]" |Vector_VectorN|
     NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|Vn_V| FORMULA-DECL NIL |Vector_VectorN| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL))
   SHOSTAK))
 (|V_Vn_seq| 0
  (|V_Vn_seq-1| |nil| 3788604238
   ("" (SKEEP)
    (("" (DECOMPOSE-EQUALITY 1)
      (("" (EXPAND "V_2_Vn" 1)
        (("" (EXPAND "Vn_2_V") (("" (LEMMA "V_Vn") (("" (INST?) NIL NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|n| FORMAL-CONST-DECL "posnat" |Vector_VectorN| NIL)
    (|vec_seq| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL)
    (|Vector| TYPE-EQ-DECL NIL |vectors| |vectors|)
    (|Vn_2_V| CONST-DECL "[nat -> vectors@vectors[m].Vector]" |Vector_VectorN|
     NIL)
    (|V_2_Vn| CONST-DECL "vec_seq(m)" |Vector_VectorN| NIL)
    (|Index| TYPE-EQ-DECL NIL |vectors| |vectors|)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|V_Vn| FORMULA-DECL NIL |Vector_VectorN| NIL))
   SHOSTAK))
 (|d2_sigma_TCC1| 0
  (|d2_sigma_TCC1-1| |nil| 3789903890 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|d2_sigma| SUBTYPE "0" "T_low[nat]")))
 (|d2_sigma_TCC2| 0
  (|d2_sigma_TCC2-1| |nil| 3789903963
   ("" (INDUCT "m")
    (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)
     ("3" (SKEEP)
      (("3" (CASE "j=0")
        (("1" (REPLACE -1)
          (("1" (HIDE -2)
            (("1" (SKEEP)
              (("1" (EXPAND "sigma" 1)
                (("1" (EXPAND "sigma" 1) (("1" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL)
         ("2" (SKEEP)
          (("2" (ASSERT)
            (("2"
              (INST -1 "LAMBDA(x:below(j)): f(x)" "lAMBDA(x:below(j)): g(x)")
              (("2" (ASSERT)
                (("2" (LEMMA "sigma_last")
                  (("2"
                    (INST -1
                     "LAMBDA (i: nat): IF i < 1 + j THEN sq(f(i) - g(i)) ELSE 0 ENDIF"
                     "j" "0")
                    (("2" (ASSERT)
                      (("2" (REPLACE -1 2)
                        (("2" (LEMMA "sigma_eq")
                          (("2"
                            (INST -1 "LAMBDA (i: nat):
              IF i < 1 + j THEN sq(f(i) - g(i)) ELSE 0 ENDIF"
                             "LAMBDA (i: nat):
                IF i < j THEN sq(f(i) - g(i)) ELSE 0 ENDIF"
                             "j-1" "0")
                            (("1" (ASSERT) NIL NIL)
                             ("2" (SKEEP 1) (("2" (ASSERT) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|sigma_last| FORMULA-DECL NIL |sigma| |reals|)
    (|sigma_eq| FORMULA-DECL NIL |sigma| |reals|)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) NIL
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|sq| CONST-DECL "nonneg_real" |sq| |reals|)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|sigma| DEF-DECL "real" |sigma| |reals|)
    (|T_high| TYPE-EQ-DECL NIL |sigma| |reals|)
    (|T_low| TYPE-EQ-DECL NIL |sigma| |reals|)
    (<= CONST-DECL "bool" |reals| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL) (> CONST-DECL "bool" |reals| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL))
   NIL
   (|d2_sigma| SUBTYPE
    "sigma[nat].sigma(0, (number_fields.-)(Vector_VectorN.m, 1), LAMBDA (i: naturalnumbers.nat): IF reals.<(i, Vector_VectorN.m) THEN sq.sq((number_fields.-)(Vector_VectorN.f(i), Vector_VectorN.g(i))) ELSE 0 ENDIF)"
    "nonneg_real")))
 (|d2_sigma| 0
  (|d2_sigma-1| |nil| 3789903915
   ("" (INDUCT "m")
    (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)
     ("3" (SKEEP)
      (("3" (CASE "j=0")
        (("1" (REPLACE -1)
          (("1" (HIDE -2 -3) (("1" (SKEEP) (("1" (GRIND) NIL NIL)) NIL)) NIL))
          NIL)
         ("2" (ASSERT)
          (("2" (SKEEP)
            (("2"
              (INST -1 "LAMBDA(x:below(j)): f(x)" "lAMBDA(x:below(j)): g(x)")
              (("2" (EXPAND "d2" 2 1)
                (("2"
                  (CASE
                      "sigma[below(1+j)](0, j, LAMBDA (i: below[1 + j]): sq(f(i) - g(i))) = sigma(0, j,
                  LAMBDA (i: nat):
                    IF i < 1 + j THEN sq(f(i) - g(i)) ELSE 0 ENDIF)")
                  (("1" (ASSERT) NIL NIL)
                   ("2" (HIDE 3)
                    (("2" (LEMMA "sigma_last")
                      (("2"
                        (INST -1 "LAMBDA (i: nat):
               IF i < 1 + j THEN sq(f(i) - g(i)) ELSE 0 ENDIF"
                         "j" "0")
                        (("2" (ASSERT)
                          (("2" (REPLACE -1 1)
                            (("2" (HIDE -1)
                              (("2" (LEMMA "sigma_last[below[1+j]]")
                                (("2"
                                  (INST -1
                                   "LAMBDA (i: below[1 + j]): sq(f(i) - g(i))"
                                   "j" "0")
                                  (("2" (ASSERT)
                                    (("2" (REPLACE -1 1)
                                      (("2" (ASSERT)
                                        (("2" (EXPAND "d2" -2 1)
                                          (("2" (ASSERT)
                                            (("2"
                                              (CASE
                                                  "NOT sigma[below(j)](0, j - 1, LAMBDA (i: below[j]): sq(f(i) - g(i))) = sigma(0, j - 1,
                  LAMBDA (i: nat):
                    IF i < j THEN sq(f(i) - g(i)) ELSE 0 ENDIF)")
                                              (("1" (ASSERT) NIL NIL)
                                               ("2" (HIDE -3)
                                                (("2" (HIDE -2 -3)
                                                  (("2" (LEMMA "sigma_eq")
                                                    (("2"
                                                      (INST -1
                                                       " LAMBDA (i: nat): IF i < j THEN sq(f(i) - g(i)) ELSE 0 ENDIF"
                                                       " LAMBDA (i: nat):
               IF i < 1 + j THEN sq(f(i) - g(i)) ELSE 0 ENDIF"
                                                       "j-1" "0")
                                                      (("1" (ASSERT)
                                                        (("1" (REPLACE -1 1 RL)
                                                          (("1" (HIDE -1)
                                                            (("1"
                                                              (LEMMA
                                                               "sigma_diff_eq[j,j+1]")
                                                              (("1"
                                                                (INST -1
                                                                 "LAMBDA (i: below[j]): sq(f(i) - g(i))"
                                                                 "LAMBDA (i: below[1 + j]): sq(f(i) - g(i))"
                                                                 "j-1" "0")
                                                                (("1" (ASSERT)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL)
                                                       ("2" (SKEEP 1)
                                                        (("2" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("3" (SKEEP 1)
                                                (("3" (ASSERT) NIL NIL)) NIL)
                                               ("4" (SKEEP)
                                                (("4" (ASSERT) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("3" (SKEEP) (("3" (ASSERT) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("4" (HIDE 2)
      (("4" (SKEEP)
        (("4" (ASSERT)
          (("4" (LEMMA "d2_sigma_TCC2")
            (("4" (SKEEP) (("4" (INST -1 "m" "f" "g") NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|Index| TYPE-EQ-DECL NIL |vectors| |vectors|)
    (|Vector| TYPE-EQ-DECL NIL |vectors| |vectors|)
    (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL)
    (|metric?| CONST-DECL "bool" |metric_def| |metric_space|)
    (|metric| NONEMPTY-TYPE-EQ-DECL NIL |metric_def| |metric_space|)
    (|d2| CONST-DECL "metric" |euclidean| |metric_space|)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|sqrt| CONST-DECL "{nnz: nnreal | nnz * nnz = nnx}" |sqrt| |reals|)
    (|sq| CONST-DECL "nonneg_real" |sq| |reals|)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|sigma| DEF-DECL "real" |sigma| |reals|)
    (|T_high| TYPE-EQ-DECL NIL |sigma| |reals|)
    (|T_low| TYPE-EQ-DECL NIL |sigma| |reals|)
    (<= CONST-DECL "bool" |reals| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL) (> CONST-DECL "bool" |reals| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|sigma_nnreal| APPLICATION-JUDGEMENT "nnreal" |sigma_below| |reals|)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types|
     NIL)
    (|sigma_eq| FORMULA-DECL NIL |sigma| |reals|)
    (|sigma_diff_eq| FORMULA-DECL NIL |sigma_below_sub| |reals|)
    (|j| SKOLEM-CONST-DECL "nat" |Vector_VectorN| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|sigma_last| FORMULA-DECL NIL |sigma| |reals|)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|d2_sigma_TCC2| SUBTYPE-TCC NIL |Vector_VectorN| NIL))
   SHOSTAK))
 (|norm2_d2_TCC1| 0
  (|norm2_d2_TCC1-1| |nil| 3788604947
   ("" (SKEEP) (("" (TYPEPRED "V1-V2" "V1" "V2") (("" (GRIND) NIL NIL)) NIL))
    NIL)
   ((|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (- CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices| |matrices|)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|Vector| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|sub| CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices|
     |matrices|)
    (|add| DEF-DECL "VectorN(max(length(v1), length(v2)))" |matrices|
     |matrices|)
    (|scal| DEF-DECL "VectorN(length(v2))" |matrices| |matrices|) NIL)
   NIL
   (|norm2_d2| SUBTYPE "(matrices.-)(Vector_VectorN.V1, Vector_VectorN.V2)"
    "(list_adt[real].cons?)")))
 (|norm2_d2| 0
  (|norm2_d2-1| |nil| 3788605028
   ("" (INDUCT "m")
    (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)
     ("3" (SKEEP)
      (("3" (CASE "j=0")
        (("1" (REPLACE -1)
          (("1" (SKEEP 1)
            (("1" (ASSERT)
              (("1" (EXPAND "norm_2" 1 1)
                (("1" (EXPAND "d2")
                  (("1"
                    (CASE "norm_2sq(V1 - V2)= sigma[below(1+j)](0, j,
                  LAMBDA (i: below[1 + j]):
                    sq(Vn_2_V(1, V1)(i) - Vn_2_V(1, V2)(i)))")
                    (("1" (ASSERT) NIL NIL)
                     ("2" (HIDE 2)
                      (("2" (EXPAND "norm_2sq" 1 1)
                        (("2" (EXPAND "*" 1 1)
                          (("2" (EXPAND "dot" 1 1)
                            (("2" (TYPEPRED "V1")
                              (("2" (TYPEPRED "V2")
                                (("2" (REPLACE -5)
                                  (("2" (ASSERT)
                                    (("2" (EXPAND "length" -)
                                      (("2" (EXPAND "length" -)
                                        (("2" (ASSERT)
                                          (("2" (LIFT-IF -2)
                                            (("2" (LIFT-IF -4)
                                              (("2" (SPLIT -4)
                                                (("1" (SPLIT -3)
                                                  (("1" (LIFT-IF 1)
                                                    (("1" (SPLIT 1)
                                                      (("1" (FLATTEN)
                                                        (("1"
                                                          (TYPEPRED "V1-V2"
                                                           "V1" "V2")
                                                          (("1" (GRIND) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL)
                                                       ("2" (FLATTEN)
                                                        (("2" (ASSERT)
                                                          (("2"
                                                            (EXPAND "dot" 3 1)
                                                            (("2" (LIFT-IF 3)
                                                              (("2" (SPLIT 3)
                                                                (("1" (FLATTEN)
                                                                  (("1"
                                                                    (ASSERT)
                                                                    (("1"
                                                                      (EXPAND
                                                                       "-" 1)
                                                                      (("1"
                                                                        (EXPAND
                                                                         "sub"
                                                                         1 1)
                                                                        (("1"
                                                                          (EXPAND
                                                                           "scal"
                                                                           1 1)
                                                                          (("1"
                                                                            (ASSERT)
                                                                            (("1"
                                                                              (EXPAND
                                                                               "sub"
                                                                               1
                                                                               1)
                                                                              (("1"
                                                                                (EXPAND
                                                                                 "scal"
                                                                                 1)
                                                                                (("1"
                                                                                  (EXPAND
                                                                                   "scal"
                                                                                   1)
                                                                                  (("1"
                                                                                    (EXPAND
                                                                                     "add"
                                                                                     1)
                                                                                    (("1"
                                                                                      (ASSERT)
                                                                                      (("1"
                                                                                        (EXPAND
                                                                                         "sigma"
                                                                                         1
                                                                                         1)
                                                                                        (("1"
                                                                                          (GRIND)
                                                                                          NIL
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL)
                                                                 ("2" (FLATTEN)
                                                                  (("2"
                                                                    (ASSERT)
                                                                    (("2"
                                                                      (EXPAND
                                                                       "-")
                                                                      (("2"
                                                                        (EXPAND
                                                                         "sub"
                                                                         +)
                                                                        (("2"
                                                                          (GRIND)
                                                                          NIL
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (FLATTEN)
                                                    (("2" (ASSERT) NIL NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (FLATTEN)
                                                  (("2" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("3" (HIDE 2)
                      (("3" (SKEEP 1)
                        (("3" (TYPEPRED "x") (("3" (ASSERT) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (ASSERT)
          (("2" (SKEEP)
            (("2" (EXPAND "norm_2" 2 1)
              (("2" (EXPAND "norm_2sq" 2 1)
                (("2" (EXPAND "*" 2 1)
                  (("2" (EXPAND "dot" 2 1)
                    (("2" (TYPEPRED "V1" "V2" "V1-V2")
                      (("2" (HIDE -1 -3 -5)
                        (("2" (ASSERT)
                          (("2" (EXPAND "d2" 2)
                            (("2" (LEMMA "sigma_first[below[1+j]]")
                              (("1"
                                (INST -1 "LAMBDA (i: below[1 + j]):
                    sq(Vn_2_V(1 + j, V1)(i) - Vn_2_V(1 + j, V2)(i))"
                                 "j" "0")
                                (("1" (ASSERT)
                                  (("1" (REPLACE -1 2)
                                    (("1" (HIDE -1)
                                      (("1"
                                        (CASE
                                            "dot(cdr(V1 - V2), cdr(V1 - V2)) + car(V1 - V2) * car(V1 - V2) =sq(Vn_2_V(1 + j, V1)(0) - Vn_2_V(1 + j, V2)(0)) +
             sigma[below(1+j)](1, j,
                   LAMBDA (i: below[1 + j]):
                     sq(Vn_2_V(1 + j, V1)(i) - Vn_2_V(1 + j, V2)(i)))")
                                        (("1" (ASSERT) NIL NIL)
                                         ("2" (HIDE 3)
                                          (("2"
                                            (CASE
                                                "car(V1 - V2) * car(V1 - V2) = sq(Vn_2_V(1 + j, V1)(0) - Vn_2_V(1 + j, V2)(0))")
                                            (("1"
                                              (CASE
                                                  "dot(cdr(V1 - V2), cdr(V1 - V2)) = sigma[below(1+j)](1, j,
              LAMBDA (i: below[1 + j]):
                sq(Vn_2_V(1 + j, V1)(i) - Vn_2_V(1 + j, V2)(i)))")
                                              (("1" (ASSERT) NIL NIL)
                                               ("2" (HIDE 2)
                                                (("2"
                                                  (INST -5 "cdr(V1)" "cdr(V2)")
                                                  (("1" (ASSERT)
                                                    (("1" (EXPAND "d2" -5 1)
                                                      (("1"
                                                        (EXPAND "norm_2" -5)
                                                        (("1"
                                                          (CASE
                                                              "norm_2sq(cdr(V1) - cdr(V2)) = sigma[below(j)](0, j - 1,
                  LAMBDA (i: below[j]):
                    sq(Vn_2_V(j, cdr(V1))(i) - Vn_2_V(j, cdr(V2))(i)))")
                                                          (("1" (HIDE -6)
                                                            (("1"
                                                              (EXPAND
                                                               "norm_2sq")
                                                              (("1"
                                                                (EXPAND "*" -1)
                                                                (("1"
                                                                  (LEMMA
                                                                   "cdr_sub")
                                                                  (("1"
                                                                    (INST -1
                                                                     "V1" "V2")
                                                                    (("1"
                                                                      (CASE
                                                                          "sigma[below(j)](0, j - 1,
             LAMBDA (i: below[j]):
               sq(Vn_2_V(j, cdr(V1))(i) - Vn_2_V(j, cdr(V2))(i))) = sigma[below(1+j)](1, j,
             LAMBDA (i: below[1 + j]):
               sq(Vn_2_V(1 + j, V1)(i) - Vn_2_V(1 + j, V2)(i)))")
                                                                      (("1"
                                                                        (ASSERT)
                                                                        NIL
                                                                        NIL)
                                                                       ("2"
                                                                        (HIDE
                                                                         2)
                                                                        (("2"
                                                                          (HIDE
                                                                           -)
                                                                          (("2"
                                                                            (LEMMA
                                                                             "sigma_diff_shift[j,1+j]")
                                                                            (("2"
                                                                              (INST
                                                                               -1
                                                                               "LAMBDA (i: below[j]):
              sq(Vn_2_V(j, cdr(V1))(i) - Vn_2_V(j, cdr(V2))(i))"
                                                                               "LAMBDA (i: below[1 + j]):
               sq(Vn_2_V(1 + j, V1)(i) - Vn_2_V(1 + j, V2)(i))"
                                                                               "1"
                                                                               "j-1"
                                                                               "0")
                                                                              (("1"
                                                                                (ASSERT)
                                                                                (("1"
                                                                                  (SKEEP
                                                                                   1)
                                                                                  (("1"
                                                                                    (ASSERT)
                                                                                    (("1"
                                                                                      (HIDE
                                                                                       2
                                                                                       3)
                                                                                      (("1"
                                                                                        (EXPAND
                                                                                         "Vn_2_V"
                                                                                         1
                                                                                         1)
                                                                                        (("1"
                                                                                          (EXPAND
                                                                                           "Vn_2_V"
                                                                                           1
                                                                                           1)
                                                                                          (("1"
                                                                                            (EXPAND
                                                                                             "Vn_2_V")
                                                                                            (("1"
                                                                                              (EXPAND
                                                                                               "nth"
                                                                                               1
                                                                                               3)
                                                                                              (("1"
                                                                                                (EXPAND
                                                                                                 "nth"
                                                                                                 1
                                                                                                 4)
                                                                                                (("1"
                                                                                                  (PROPAX)
                                                                                                  NIL
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL)
                                                                               ("2"
                                                                                (HIDE
                                                                                 2)
                                                                                (("2"
                                                                                  (SKEEP)
                                                                                  (("2"
                                                                                    (TYPEPRED
                                                                                     "V2")
                                                                                    (("2"
                                                                                      (ASSERT)
                                                                                      (("2"
                                                                                        (EXPAND
                                                                                         "length"
                                                                                         -2)
                                                                                        (("2"
                                                                                          (PROPAX)
                                                                                          NIL
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL)
                                                                               ("3"
                                                                                (HIDE
                                                                                 2)
                                                                                (("3"
                                                                                  (SKEEP)
                                                                                  (("3"
                                                                                    (TYPEPRED
                                                                                     "V1")
                                                                                    (("3"
                                                                                      (EXPAND
                                                                                       "length"
                                                                                       -2)
                                                                                      (("3"
                                                                                        (PROPAX)
                                                                                        NIL
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL)
                                                           ("2" (HIDE 2)
                                                            (("2" (ASSERT) NIL
                                                              NIL))
                                                            NIL)
                                                           ("3" (HIDE 2)
                                                            (("3" (SKEEP)
                                                              (("3" (ASSERT)
                                                                NIL NIL))
                                                              NIL))
                                                            NIL)
                                                           ("4" (HIDE 2)
                                                            (("4" (SKEEP)
                                                              (("4"
                                                                (EXPAND
                                                                 "length" -)
                                                                (("4" (PROPAX)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL)
                                                           ("5" (ASSERT)
                                                            (("5" (HIDE 2)
                                                              (("5" (SKEEP)
                                                                (("5"
                                                                  (EXPAND
                                                                   "length" -2)
                                                                  (("5"
                                                                    (PROPAX)
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (ASSERT)
                                                    (("2" (EXPAND "length" -3)
                                                      (("2" (PROPAX) NIL NIL))
                                                      NIL))
                                                    NIL)
                                                   ("3" (ASSERT)
                                                    (("3" (EXPAND "length" -)
                                                      (("3" (PROPAX) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2" (ASSERT)
                                              (("2" (HIDE 2)
                                                (("2" (HIDE -)
                                                  (("2" (GRIND) NIL NIL)) NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (HIDE 2 3)
                                (("2" (HIDE -1 -2 -3 -4)
                                  (("2" (SKEEP) (("2" (GRIND) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("4" (HIDE 2)
      (("4" (SKEEP)
        (("4" (SKEEP)
          (("4" (TYPEPRED "V1-V2" "V1" "V2") (("4" (GRIND) NIL NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|sigma_first| FORMULA-DECL NIL |sigma| |reals|)
    (V1 SKOLEM-CONST-DECL "VectorN(1 + j)" |Vector_VectorN| NIL)
    (|j| SKOLEM-CONST-DECL "nat" |Vector_VectorN| NIL)
    (V2 SKOLEM-CONST-DECL "VectorN(1 + j)" |Vector_VectorN| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|cdr_sub| FORMULA-DECL NIL |vector_arithmetic| |matrices|)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|sigma_diff_shift| FORMULA-DECL NIL |sigma_below_sub| |reals|)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|plus_u8_u8| APPLICATION-JUDGEMENT "uint16" |integertypes| NIL)
    (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (* CONST-DECL "real" |matrices| |matrices|)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|sub| CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices|
     |matrices|)
    (|add| DEF-DECL "VectorN(max(length(v1), length(v2)))" |matrices|
     |matrices|)
    (|scal| DEF-DECL "VectorN(length(v2))" |matrices| |matrices|)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types|
     NIL)
    (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|dot| DEF-DECL "real" |matrices| |matrices|)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL)
    (|norm_2sq| CONST-DECL "nonneg_real" |norms| |matrices|)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|T_low| TYPE-EQ-DECL NIL |sigma| |reals|)
    (|T_high| TYPE-EQ-DECL NIL |sigma| |reals|)
    (|sigma| DEF-DECL "real" |sigma| |reals|)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|sq| CONST-DECL "nonneg_real" |sq| |reals|)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|sigma_nnreal| APPLICATION-JUDGEMENT "nnreal" |sigma_below| |reals|)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic| |matrices|)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (> CONST-DECL "bool" |reals| NIL) (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|Vector| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (- CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices| |matrices|)
    (|Vn_2_V| CONST-DECL "vectors@vectors[m].Vector" |Vector_VectorN| NIL)
    (|d2| CONST-DECL "metric" |euclidean| |metric_space|)
    (|metric| NONEMPTY-TYPE-EQ-DECL NIL |metric_def| |metric_space|)
    (|metric?| CONST-DECL "bool" |metric_def| |metric_space|)
    (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL)
    (|Vector| TYPE-EQ-DECL NIL |vectors| |vectors|)
    (|Index| TYPE-EQ-DECL NIL |vectors| |vectors|)
    (< CONST-DECL "bool" |reals| NIL)
    (|norm_2| CONST-DECL "(norm?(m))" |norms| |matrices|)
    (|norm?| CONST-DECL "bool" |norms| |matrices|)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL))
   SHOSTAK))
 (|convergence_V_Vn| 0
  (|convergence_V_Vn-1| |nil| 3788612806
   ("" (SKEEP)
    (("" (SPLIT 1)
      (("1" (FLATTEN)
        (("1" (EXPAND "convergence?" -1)
          (("1" (EXPAND "metric_converges_to" 1)
            (("1" (SKEEP 1)
              (("1" (INST -1 "norm_2(m)")
                (("1" (INST -1 "r")
                  (("1" (SKEEP -1)
                    (("1" (INST 1 "N+1")
                      (("1" (SKEEP 1)
                        (("1" (INST -1 "i")
                          (("1" (ASSERT)
                            (("1" (LEMMA "norm2_d2")
                              (("1" (INST -1 "m" "L" "V(i)")
                                (("1" (ASSERT)
                                  (("1" (LEMMA "norm_reflex")
                                    (("1" (INST -1 "m" "norm_2(m)" "V(i)" "L")
                                      (("1" (ASSERT)
                                        (("1" (EXPAND "ball" 1)
                                          (("1" (ASSERT)
                                            (("1" (EXPAND "Vn_2_V" 1 2)
                                              (("1" (ASSERT) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (ASSERT) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (FLATTEN)
        (("2" (LEMMA "convergence_equiv_m")
          (("2" (INST -1 "m" "V" "L")
            (("2" (ASSERT)
              (("2" (HIDE 2)
                (("2" (INST 1 "norm_2(m)")
                  (("2" (EXPAND "convergence?")
                    (("2" (EXPAND "metric_converges_to")
                      (("2" (SKEEP 1)
                        (("2" (INST -1 "epsilon")
                          (("2" (SKEEP -1)
                            (("2" (INST 1 "n!1+1")
                              (("2" (SKEEP 1)
                                (("2" (INST -1 "NN")
                                  (("2" (ASSERT)
                                    (("2" (EXPAND "ball" -1)
                                      (("2" (LEMMA "norm2_d2")
                                        (("2" (INST -1 "m" "L" "V(NN)")
                                          (("2" (LEMMA "norm_reflex")
                                            (("2"
                                              (INST -1 "m" "norm_2(m)" "V(NN)"
                                               "L")
                                              (("2" (ASSERT)
                                                (("2" (EXPAND "Vn_2_V" -3 2)
                                                  (("2" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   (NIL (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    NIL NIL (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|norm2_d2| FORMULA-DECL NIL |Vector_VectorN| NIL)
    (|ball| CONST-DECL "set[T]" |metric_space_def| |metric_space|)
    (|Vn_2_V| CONST-DECL "[nat -> vectors@vectors[m].Vector]" |Vector_VectorN|
     NIL)
    (|norm_reflex| FORMULA-DECL NIL |norms| |matrices|)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|n| FORMAL-CONST-DECL "posnat" |Vector_VectorN| NIL)
    (|vec_seq| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    NIL (|norm_2| CONST-DECL "(norm?(m))" |norms| |matrices|)
    (|norm?| CONST-DECL "bool" |norms| |matrices|)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|metric_converges_to| CONST-DECL "bool" |metric_space_def| |metric_space|)
    (|convergence_equiv_m| FORMULA-DECL NIL |vector_sequences| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    NIL NIL)
   SHOSTAK)))

