sum_vecs   [ n: posnat ] %Welcome
%%n - dealing with vectors in Rn 
		: THEORY
%	              June 2018 JTS
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%|   Defining Sigma function      |%
%|      for Vectors, also         |%
%|      develop "standard sum"    |%
%|      which is an important     |%
%|            identity            |%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%--------------------------------------------
%% Note - Sigma as defined here might be useless
%      using matrix_Vec_mult could be the same
%--------------------------------------------

%-----     %
  BEGIN
%     -----%

%--------------------------------------------
%% Importing vector_arithmetic to have
%  vectorN(n) and nice properties
%--------------------------------------------

IMPORTING matrices@vector_arithmetic 

%--------------------------------------------
%% Define the sum of vectors
%--------------------------------------------

%% Add up vectors with a list
Sigmaa( m:nat, A: MatrixMN( m, n ) , f: list ):
     RECURSIVE Vector  =
     IF A = null OR f = null
     THEN null
     ELSE 
     car( f ) * car( A )
     + Sigmaa( m-1, cdr( A ) , cdr( f ) )
     ENDIF MEASURE A by << ;

%% Linear combination of columns of matrix 
Sigma( m:nat, n:nat, A: MatrixMN( m, n ), ll: VectorN( n ) ):
     RECURSIVE Vector =
     IF A = null OR ll = null
     THEN null
     ELSE
     car( ll ) * car( A )
     + Sigma( m-1, n, cdr( A ), ll )
     ENDIF Measure A by <<

%--------------------------------------------
%% Decompose vector as sum of standard basis
%  vectors
%--------------------------------------------

Standard_sum( v:( cons? ), i:below( length( v ) ) ):
     RECURSIVE {vv: list | (length( vv ) = length( v ) AND
     FORALL( j: upto( i ) ): nth( v, j ) = nth( vv, j ) ) AND
     FORALL( j: subrange( i+1, length( v ) - 1 ) ): 0 = nth( vv, j ) }
     =
     IF i=0
     THEN nth( v, 0 ) * e( length( v ), 0 )
     ELSE
     nth( v, i ) * e( length( v ), i ) + Standard_sum( v, i - 1 )
     ENDIF MEASURE i

%--------------------------------------------
%% Test standard sum
%--------------------------------------------
     
Standard_test: LEMMA
     Standard_sum( (: 1, 3, 5 :), 2 ) = (: 1, 3, 5 :)

%--------------------------------------------
%% Standard sum of a vector is the vector
%--------------------------------------------

Standard_id: LEMMA FORALL( m: posnat, v: VectorN( m ) ):
     v = Standard_sum( v, m - 1 )
          
%--------------------------------------------
%% Define what it means for vectors 
%  to be linearly independent 
%--------------------------------------------

Li?( m: posnat, A: MatrixMN( m, n ) ):
     bool = FORALL( f: { ff: list | length( ff ) = length( A ) } ):
     Sigmaa( m, A, f ) = zero_vec( length( car( A ) ) )
     IMPLIES
     f = zero_vec( length( A ) )
 
Li_test: LEMMA ( n = 1 IMPLIES NOT FORALL( m: posnat, A: MatrixMN( m, n ) ):
      Li?( m, A ) )

%________________________________________________________
 % "Who I am, what I am, is the culmination of a
 %     lifetime of reading, a lifetime of stories.
 %     And there are still so many more books to read.
 %     I'm a work in progress.
 %     	     	   	    	      -Sarah Addison Allen

  % ~The End~ % 
  END sum_vecs
