linear_programming [ n:posnat ] %Hello Again
%% n - linear programming in Rn
		: THEORY
		
%	              Aug 2018 JTS
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%|   Define a linear program     |%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%-----     %
  BEGIN
%     -----%

%--------------------------------------------
%% Importing fundamentals_constrained_optimization[n]
%  to have local extrema 

%% Importing matrix_vector_multiplication[n]
%  to have mat*vecs
%--------------------------------------------

IMPORTING fundamentals_constrained_optimization[ n ]
IMPORTING matrices@matrix_vector_multiplication


%--------------------------------------------
%% Define standard form for linear program
%--------------------------------------------

linear_program?( m: nat, f: vec2real_f,
     eq_constraints: constraints(m),
     ineq_constraints: constraints(n) ): 
     bool =  EXISTS ( c: VectorN( n ) ):
     ( FORALL ( x: VectorN( n ) ):
     f( x ) = dot( c, x ) )
     AND ( ineq_constraints =
     LAMBDA ( x: VectorN( n ) ): x )
     AND ( EXISTS ( A: MatrixMN( m, n ), b: VectorN( m ) ):
     eq_constraints =
     LAMBDA( x:VectorN( n ) ): mult( A, x ) - b )

%--------------------------------------------
%% Test lp
%--------------------------------------------

lp_1: LEMMA n=2 IMPLIES linear_program?( 2,
     LAMBDA( x:VectorN( 2 ) ): dot( (: 1,  2 :), x ),
     LAMBDA( x: VectorN( 2 ) ):
     mult((: (: 1, 1 :), (: 1, 1 :) :), x )
     - (: 2 , 3 :),
     LAMBDA (x: VectorN( 2 ) ): x)

%--------------------------------------------
%% Lagrangian function for linear program
%--------------------------------------------

LG(m: nat, A: MatrixMN( m, n ), b: VectorN( m ), c: VectorN( n ) )
     (x, s: VectorN( n ), lamb: VectorN( m )):
     real =
     dot( c, x )
     - dot( lamb, mult( A, x ) - b )
     - dot( s, x )

%--------------------------------------------
%% First Order optimality Conditions
%--------------------------------------------

%Optimality_LP: LEMMA FORALL(m: posnat, A: MatrixMN( m, n ),
%     b: VectorN( m ), c: VectorN( n ), v: VectorN( n )):
%     is_glob_minimizer?( m, n,
%     LAMBDA(x: VectorN( n )): dot(c,x), LAMBDA(x: VectorN( n )): TRUE,
%      LAMBDA( x:VectorN( n ) ): mult( A, x ) - b,
%      LAMBDA ( x: VectorN( n ) ): x )(v)
%      IMPLIES
%      EXISTS( s: VectorN( n ), lamb: VectorN( m )):
%      mult( transpose( A ), lamb ) + s = c
%      AND mult( A, v ) = b
%      AND v >= zero_vec( n )
%      AND s >= zero_vec( n )
%      AND dot( v, s ) = 0 

%________________________________________________________
 % "There's a fine line between fishing
 %     and just standing on the shore like an idiot."
 %				            -Steven Wright
 
  %-    ~The End~     -% 
  End linear_programming

