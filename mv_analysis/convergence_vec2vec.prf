(|convergence_vec2vec|
 (|nth_TCC1| 0
  (|nth_TCC1-1| |nil| 3796115180 ("" (SUBTYPE-TCC) NIL NIL)
   (NIL (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|n| FORMAL-CONST-DECL "posnat" |convergence_vec2vec| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL))
   NIL (|nth| SUBTYPE "convergence_vec2vec.i" "below[length[real](f(p))]")))
 (|cdr_TCC1| 0
  (|cdr_TCC1-1| |nil| 3797241701 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|cdr| SUBTYPE "(number_fields.-)(convergence_vec2vec.m, 1)" "nat")))
 (|cdr_TCC2| 0
  (|cdr_TCC2-1| |nil| 3797241701 ("" (SUBTYPE-TCC) NIL NIL)
   (NIL (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|n| FORMAL-CONST-DECL "posnat" |convergence_vec2vec| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL))
   NIL
   (|cdr| SUBTYPE "convergence_vec2vec.f(convergence_vec2vec.p)"
    "(list_adt[real].cons?)")))
 (|cdr_TCC3| 0
  (|cdr_TCC3-1| |nil| 3797241701
   ("" (SKEEP)
    (("" (TYPEPRED "f(p)")
      (("" (EXPAND "length" -2)
        (("" (TYPEPRED "m") (("" (GRIND) NIL NIL)) NIL)) NIL))
      NIL))
    NIL)
   ((|vec2vec| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|n| FORMAL-CONST-DECL "posnat" |convergence_vec2vec| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    NIL)
   NIL
   (|cdr| SUBTYPE
    "list_adt[real].cdr(convergence_vec2vec.f(convergence_vec2vec.p))"
    "VectorN((number_fields.-)(convergence_vec2vec.m, 1))")))
 (NQ_TCC1 0
  (NQ_TCC1-1 |nil| 3795950563
   ("" (SKEEP)
    (("" (TYPEPRED "p+h" "p" "h") (("" (ASSERT) (("" (GRIND) NIL NIL)) NIL))
      NIL))
    NIL)
   ((|n| FORMAL-CONST-DECL "posnat" |convergence_vec2vec| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (+ CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices| |matrices|)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|Vector| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|add| DEF-DECL "VectorN(max(length(v1), length(v2)))" |matrices|
     |matrices|)
    (|zero_vec| DEF-DECL "VectorN(m)" |vector_arithmetic| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    NIL)
   NIL
   (NQ SUBTYPE "(matrices.+)(convergence_vec2vec.p, convergence_vec2vec.h)"
    "VectorN(convergence_vec2vec.n)")))
 (NQ_TCC2 0
  (NQ_TCC2-1 |nil| 3795950563
   ("" (SKEEP)
    (("" (LEMMA "MN_full")
      (("" (INST -1 "m" "n" "T") (("" (ASSERT) NIL NIL)) NIL)) NIL))
    NIL)
   ((|MN_full| JUDGEMENT-TCC NIL |mat_vec_mult| NIL)
    (|MatrixMN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|Matrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|n| FORMAL-CONST-DECL "posnat" |convergence_vec2vec| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) NIL)
   NIL (NQ SUBTYPE "convergence_vec2vec.T" "FullMatrix")))
 (NQ_TCC3 0
  (NQ_TCC3-1 |nil| 3795950563
   ("" (SKEEP)
    (("" (LEMMA "MN_rc")
      (("" (TYPEPRED "T")
        (("" (INST -4 "m" "n" "T")
          (("" (ASSERT)
            (("" (TYPEPRED "h")
              (("" (HIDE -1 -3)
                (("" (EXPAND "rows" -4) (("" (PROPAX) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|MN_rc| FORMULA-DECL NIL |mat_vec_mult| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|rows| CONST-DECL "nat" |matrices| |matrices|)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|Matrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|n| FORMAL-CONST-DECL "posnat" |convergence_vec2vec| NIL)
    (|MatrixMN| TYPE-EQ-DECL NIL |matrices| |matrices|) NIL)
   NIL
   (NQ SUBTYPE "convergence_vec2vec.h"
    "VectorN(matrices.columns(convergence_vec2vec.T))")))
 (NQ_TCC4 0
  (NQ_TCC4-1 |nil| 3797859744
   ("" (SKEEP)
    ((""
      (TYPEPRED "f(p + h) - f(p) - T * h" "f(p+h)" "f(p)" "T*h"
       "f(p + h) - f(p)")
      (("" (REPLACE -4)
        (("" (REPLACE -6)
          (("" (EXPAND "rows") (("" (REPLACE -8) (("" (ASSERT) NIL NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|MatrixMN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (* CONST-DECL "VectorN(rows(A))" |mat_vec_mult| NIL)
    (|rows| CONST-DECL "nat" |matrices| |matrices|)
    (|columns| DEF-DECL "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}"
     |matrices| |matrices|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|Matrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|FullMatrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (+ CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices| |matrices|)
    (|vec2vec| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL)
    (|n| FORMAL-CONST-DECL "posnat" |convergence_vec2vec| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (- CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices| |matrices|)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|Vector| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|posint_max| APPLICATION-JUDGEMENT "{k: posint | i <= k AND j <= k}"
     |real_defs| NIL)
    (|posrat_max| APPLICATION-JUDGEMENT "{s: posrat | s >= q AND s >= r}"
     |real_defs| NIL)
    NIL)
   NIL
   (NQ SUBTYPE
    "(matrices.-)((matrices.-)(convergence_vec2vec.f((matrices.+)(convergence_vec2vec.p, convergence_vec2vec.h)), convergence_vec2vec.f(convergence_vec2vec.p)), mat_vec_mult.*(convergence_vec2vec.T, convergence_vec2vec.h))"
    "(list_adt[real].cons?)")))
 (NQ_TCC5 0
  (NQ_TCC5-1 |nil| 3797859744 ("" (SUBTYPE-TCC) NIL NIL)
   (NIL (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|n| FORMAL-CONST-DECL "posnat" |convergence_vec2vec| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|Matrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|MatrixMN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL))
   NIL (NQ SUBTYPE "convergence_vec2vec.h" "(list_adt[real].cons?)")))
 (NQ_TCC6 0
  (NQ_TCC4-1 |nil| 3795950563
   ("" (SKEEP)
    (("" (TYPEPRED "norm_inf(n)")
      (("" (EXPAND "norm?" -1)
        (("" (FLATTEN)
          (("" (ASSERT) (("" (INST -3 "h") (("" (ASSERT) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|norm_inf| CONST-DECL "(norm?(m))" |norms| NIL)
    (|n| FORMAL-CONST-DECL "posnat" |convergence_vec2vec| NIL)
    (|norm?| CONST-DECL "bool" |norms| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) NIL)
   NIL
   (NQ SUBTYPE "norms.norm_inf(convergence_vec2vec.n)(convergence_vec2vec.h)"
    "nznum")))
 (|diff_nth_cdr_TCC1| 0
  (|diff_nth_cdr_TCC1-1| |nil| 3797862047 ("" (SUBTYPE-TCC) NIL NIL)
   ((|norm_inf| CONST-DECL "(norm?(m))" |norms| NIL)
    (|sub| CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices|
     |matrices|)
    (- CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices| |matrices|)
    (|norm_inf| CONST-DECL "[(cons?) -> nonneg_real]" |norms| NIL)
    (+ CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices| |matrices|)
    (|nth| CONST-DECL "vec2real_f" |convergence_vec2vec| NIL)
    (* CONST-DECL "real" |matrices| |matrices|)
    (|n| FORMAL-CONST-DECL "posnat" |convergence_vec2vec| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NQ CONST-DECL "real" |differentiable_def| NIL)
    (|convergence_zero?| CONST-DECL "bool" |vector_sequences| NIL)
    (|differentiable?| CONST-DECL "bool" |differentiable_def| NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL))
   NIL
   (|diff_nth_cdr| SUBTYPE "(number_fields.-)(convergence_vec2vec.m, 1)"
    "posnat")))
 (|diff_nth_cdr| 0
  (|diff_nth_cdr-1| |nil| 3797862184
   ("" (SKEEP)
    (("" (SKEEP)
      (("" (INST -1 "i+1")
        (("" (CASE " nth(m, f, i + 1) =  nth(m - 1, cdr(m, f), i)")
          (("1" (ASSERT) NIL NIL)
           ("2" (DECOMPOSE-EQUALITY 1)
            (("2" (EXPAND "nth" 1)
              (("2" (ASSERT)
                (("2" (EXPAND "cdr" 1)
                  (("2" (ASSERT)
                    (("2" (EXPAND "nth" 1 1) (("2" (PROPAX) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|cdr| CONST-DECL "VectorN(m - 1)" |convergence_vec2vec| NIL)
    (|nth| CONST-DECL "vec2real_f" |convergence_vec2vec| NIL)
    (|vec2vec| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL)
    (|vec2real_f| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|n| FORMAL-CONST-DECL "posnat" |convergence_vec2vec| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    NIL)
   SHOSTAK))
 (|every_mat| 0
  (|every_mat-1| |nil| 3797260967
   ("" (INDUCT "m")
    (("1" (SKEEP) (("1" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)
     ("3" (SKEEP)
      (("3" (CASE "j=0")
        (("1" (REPLACE -1)
          (("1" (ASSERT)
            (("1" (SKEEP)
              (("1" (EXPAND "every" 1)
                (("1" (LIFT-IF 1)
                  (("1" (SPLIT 1)
                    (("1" (PROPAX) NIL NIL)
                     ("2" (FLATTEN)
                      (("2" (ASSERT)
                        (("2" (LIFT-IF 2)
                          (("2" (SPLIT 2)
                            (("1" (FLATTEN)
                              (("1" (TYPEPRED "n")
                                (("1" (ASSERT)
                                  (("1" (TYPEPRED "T")
                                    (("1" (INST -3 "0")
                                      (("1" (EXPAND "nth" -3)
                                        (("1" (ASSERT) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (FLATTEN)
                              (("2" (ASSERT)
                                (("2" (HIDE -2)
                                  (("2" (TYPEPRED "T")
                                    (("2" (EXPAND "every" -1)
                                      (("2" (ASSERT)
                                        (("2" (FLATTEN)
                                          (("2" (ASSERT)
                                            (("2" (INST -4 "0")
                                              (("2" (EXPAND "nth" -4)
                                                (("2" (ASSERT)
                                                  (("2" (EXPAND "every" 2)
                                                    (("2" (LIFT-IF 2)
                                                      (("2" (SPLIT 2)
                                                        (("1" (PROPAX) NIL NIL)
                                                         ("2" (FLATTEN)
                                                          (("2" (LIFT-IF 2)
                                                            (("2" (ASSERT)
                                                              (("2" (HIDE 2)
                                                                (("2"
                                                                  (REPLACE -5
                                                                           -3)
                                                                  (("2"
                                                                    (EXPAND
                                                                     "length"
                                                                     -3)
                                                                    (("2"
                                                                      (ASSERT)
                                                                      (("2"
                                                                        (HIDE
                                                                         -2)
                                                                        (("2"
                                                                          (GRIND)
                                                                          NIL
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (SKEEP)
          (("2" (ASSERT)
            (("2" (EXPAND "every" 2 1)
              (("2" (LIFT-IF 2)
                (("2" (SPLIT 2)
                  (("1" (PROPAX) NIL NIL)
                   ("2" (FLATTEN)
                    (("2" (ASSERT)
                      (("2" (TYPEPRED "T")
                        (("2" (INST -3 "0")
                          (("2" (EXPAND "nth" -3)
                            (("2" (TYPEPRED "n")
                              (("2" (ASSERT)
                                (("2" (EXPAND "every" -2)
                                  (("2" (FLATTEN)
                                    (("2" (SPLIT 2)
                                      (("1" (EXPAND "every" 1 1)
                                        (("1" (PROPAX) NIL NIL)) NIL)
                                       ("2" (INST -6 "cdr(T)")
                                        (("2" (HIDE 2)
                                          (("2" (SPLIT 1)
                                            (("1" (EXPAND "length" -4)
                                              (("1" (PROPAX) NIL NIL)) NIL)
                                             ("2" (ASSERT)
                                              (("2" (SKEEP)
                                                (("2" (TYPEPRED "T")
                                                  (("2" (INST -3 "i+1")
                                                    (("1" (ASSERT)
                                                      (("1" (EXPAND "nth" -3)
                                                        (("1" (PROPAX) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL)
                                                     ("2" (ASSERT)
                                                      (("2" (TYPEPRED "i")
                                                        (("2"
                                                          (EXPAND "length" 1)
                                                          (("2" (ASSERT) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|i| SKOLEM-CONST-DECL "below(length(cdr(T)))" |convergence_vec2vec| NIL)
    (|j| SKOLEM-CONST-DECL "nat" |convergence_vec2vec| NIL)
    (T SKOLEM-CONST-DECL "MatrixMN(1 + j, n)" |convergence_vec2vec| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|plus_u8_u8| APPLICATION-JUDGEMENT "uint16" |integertypes| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|MatrixMN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|n| FORMAL-CONST-DECL "posnat" |convergence_vec2vec| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|Matrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL) (> CONST-DECL "bool" |reals| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   SHOSTAK))
 (|pre_der_TCC1| 0
  (|pre_der_TCC1-1| |nil| 3797241701 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|pre_der| SUBTYPE "0"
    "{ii: naturalnumbers.nat | reals.<(ii, convergence_vec2vec.m)}")))
 (|pre_der_TCC2| 0
  (|pre_der_TCC2-1| |nil| 3797241701 ("" (SUBTYPE-TCC) NIL NIL)
   (NIL (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|domain| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL) NIL
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|vec2real_f| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL)
    (|vec2vec| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|Vector| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|scal| DEF-DECL "VectorN(length(v2))" |matrices| |matrices|)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (|zero_vec| DEF-DECL "VectorN(m)" |vector_arithmetic| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|add| DEF-DECL "VectorN(max(length(v1), length(v2)))" |matrices|
     |matrices|)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|norm_inf| CONST-DECL "(norm?(m))" |norms| NIL)
    (|sub| CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices|
     |matrices|)
    (- CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices| |matrices|)
    (|norm_inf| CONST-DECL "[(cons?) -> nonneg_real]" |norms| NIL)
    (|nth| CONST-DECL "vec2real_f" |convergence_vec2vec| NIL)
    (* CONST-DECL "real" |matrices| |matrices|)
    (|n| FORMAL-CONST-DECL "posnat" |convergence_vec2vec| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NQ CONST-DECL "real" |differentiable_def| NIL)
    (|convergence_zero?| CONST-DECL "bool" |vector_sequences| NIL)
    (|differentiable?| CONST-DECL "bool" |differentiable_def| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|norm?| CONST-DECL "bool" |norms| NIL)
    (+ CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices| |matrices|)
    (* CONST-DECL "VectorN(length(v2))" |matrices| |matrices|))
   NIL
   (|pre_der| SUBTYPE
    "convergence_vec2vec.nth(convergence_vec2vec.m, convergence_vec2vec.f, 0)"
    "{ff: domain_vec2real_def[convergence_vec2vec.n].vec2real_f | differentiable_def[convergence_vec2vec.n].differentiable?(convergence_vec2vec.D, ff, convergence_vec2vec.p)}")))
 (|pre_der_TCC3| 0
  (|pre_der_TCC10-1| |nil| 3797524662
   ("" (SKEEP)
    (("" (SPLIT 1)
      (("1" (EXPAND "length" 1) (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL))
        NIL)
       ("2" (SKEEP)
        (("2" (TYPEPRED "i")
          (("2" (EXPAND "length" -1)
            (("2" (EXPAND "length" -1)
              (("2" (EXPAND "nth" 1 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|nth| CONST-DECL "vec2real_f" |convergence_vec2vec| NIL)
    (|vec2vec| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL)
    (|der_f| CONST-DECL
     "{gg: VectorN(n) | convergence_zero?(NQ(D, p), NQ(f, gg, p), zero_vec(n))}"
     |differentiable_def| NIL)
    (|zero_vec| DEF-DECL "VectorN(m)" |vector_arithmetic| NIL)
    (NQ CONST-DECL "real" |differentiable_def| NIL)
    (NQ CONST-DECL "bool" |differentiable_def| NIL)
    (|convergence_zero?| CONST-DECL "bool" |vector_sequences| NIL)
    (|differentiable?| CONST-DECL "bool" |differentiable_def| NIL)
    (|vec2real_f| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL) NIL
    (|domain| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|n| FORMAL-CONST-DECL "posnat" |convergence_vec2vec| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL) NIL)
   NIL
   (|pre_der| SUBTYPE
    "(: differentiable_def[convergence_vec2vec.n].der_f(convergence_vec2vec.D, convergence_vec2vec.p)(convergence_vec2vec.nth(convergence_vec2vec.m, convergence_vec2vec.f, 0)) :)"
    "MatrixMN(convergence_vec2vec.m, convergence_vec2vec.n)")))
 (|pre_der_TCC4| 0
  (|pre_der_TCC4-1| |nil| 3797241701 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|pre_der| SUBTYPE "0"
    "{ii: naturalnumbers.nat | reals.<(ii, convergence_vec2vec.m)}")))
 (|pre_der_TCC5| 0
  (|pre_der_TCC5-1| |nil| 3797241701
   ("" (SKEEP) (("" (TYPEPRED "f") (("" (INST -1 "0") NIL NIL)) NIL)) NIL)
   ((|nth| CONST-DECL "vec2real_f" |convergence_vec2vec| NIL)
    (|vec2vec| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL)
    (|differentiable?| CONST-DECL "bool" |differentiable_def| NIL)
    (|vec2real_f| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL) NIL
    (|domain| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|n| FORMAL-CONST-DECL "posnat" |convergence_vec2vec| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) NIL)
   NIL
   (|pre_der| SUBTYPE
    "convergence_vec2vec.nth(convergence_vec2vec.m, convergence_vec2vec.f, 0)"
    "{ff: domain_vec2real_def[convergence_vec2vec.n].vec2real_f | differentiable_def[convergence_vec2vec.n].differentiable?(convergence_vec2vec.D, ff, convergence_vec2vec.p)}")))
 (|pre_der_TCC6| 0
  (|pre_der_TCC6-1| |nil| 3797241701 ("" (SUBTYPE-TCC) NIL NIL)
   (NIL (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|n| FORMAL-CONST-DECL "posnat" |convergence_vec2vec| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|domain| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL) NIL
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|vec2real_f| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL)
    (|differentiable?| CONST-DECL "bool" |differentiable_def| NIL)
    (|vec2vec| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL)
    (|nth| CONST-DECL "vec2real_f" |convergence_vec2vec| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL))
   NIL
   (|pre_der| SUBTYPE "(number_fields.-)(convergence_vec2vec.m, 1)" "posnat")))
 (|pre_der_TCC7| 0
  (|pre_der_TCC7-1| |nil| 3797241701
   ("" (SKEEP)
    (("" (SKEEP*)
      (("" (ASSERT)
        (("" (TYPEPRED "f")
          (("" (INST -1 "i+1")
            (("" (CASE "(nth(m, f, i + 1)) = (nth(m - 1, cdr(m, f), i))")
              (("1" (ASSERT) NIL NIL)
               ("2" (DECOMPOSE-EQUALITY 1)
                (("2" (EXPAND "nth" 1 1)
                  (("2" (EXPAND "cdr" 1)
                    (("2" (EXPAND "nth") (("2" (PROPAX) NIL NIL)) NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((TRUE CONST-DECL "bool" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|nth| CONST-DECL "vec2real_f" |convergence_vec2vec| NIL)
    (|vec2vec| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL)
    (|differentiable?| CONST-DECL "bool" |differentiable_def| NIL)
    (|vec2real_f| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL) NIL
    (|domain| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|n| FORMAL-CONST-DECL "posnat" |convergence_vec2vec| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|cdr| CONST-DECL "VectorN(m - 1)" |convergence_vec2vec| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) NIL)
   NIL
   (|pre_der| SUBTYPE
    "convergence_vec2vec.cdr(convergence_vec2vec.m, convergence_vec2vec.f)"
    "{ff: domain_vec2real_def[convergence_vec2vec.n].vec2vec((number_fields.-)(convergence_vec2vec.m, 1)) | FORALL (i: naturalnumbers.below((number_fields.-)(convergence_vec2vec.m, 1))): differentiable_def[convergence_vec2vec.n].differentiable?(convergence_vec2vec.D, convergence_vec2vec.nth((number_fields.-)(convergence_vec2vec.m, 1), ff, i), convergence_vec2vec.p)}")))
 (|pre_der_TCC8| 0
  (|pre_der_TCC8-1| |nil| 3797524662 ("" (TERMINATION-TCC) NIL NIL) NIL NIL
   (|pre_der| TERMINATION
    "convergence_vec2vec.pre_der((number_fields.-)(convergence_vec2vec.m, 1), convergence_vec2vec.D, convergence_vec2vec.p, convergence_vec2vec.cdr(convergence_vec2vec.m, convergence_vec2vec.f))"
    "NIL")))
 (|pre_der_TCC9| 0
  (|pre_der_TCC9-1| |nil| 3797524662
   ("" (SKEEP)
    (("" (TYPEPRED "(v(m - 1, D, p, cdr(m, f)))")
      (("1" (LEMMA "every_mat")
        (("1" (INST -1 "m-1" "v(m - 1, D, p, cdr(m, f))")
          (("1" (TYPEPRED "f")
            (("1" (SKEEP)
              (("1" (INST -1 "i+1")
                (("1" (CASE " nth(m, f, i + 1) =  nth(m - 1, cdr(m, f), i)")
                  (("1" (ASSERT) NIL NIL)
                   ("2" (DECOMPOSE-EQUALITY 1)
                    (("2" (EXPAND "nth" 1 1)
                      (("2" (EXPAND "nth" 1 2)
                        (("2" (ASSERT)
                          (("2" (EXPAND "cdr" 1 1)
                            (("2" (ASSERT)
                              (("2" (EXPAND "nth" 1 1) (("2" (PROPAX) NIL NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (ASSERT) NIL NIL))
          NIL))
        NIL)
       ("2" (TYPEPRED "f")
        (("2" (SKEEP)
          (("2" (INST -1 "i+1")
            (("2" (CASE " nth(m, f, i + 1) =  nth(m - 1, cdr(m, f), i)")
              (("1" (ASSERT) NIL NIL)
               ("2" (DECOMPOSE-EQUALITY 1)
                (("2" (EXPAND "nth" 1)
                  (("2" (EXPAND "cdr" 1)
                    (("2" (ASSERT)
                      (("2" (EXPAND "nth" 1 1) (("2" (PROPAX) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("3" (ASSERT) NIL NIL))
      NIL))
    NIL)
   ((|cdr| CONST-DECL "VectorN(m - 1)" |convergence_vec2vec| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|MatrixMN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|Matrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|nth| CONST-DECL "vec2real_f" |convergence_vec2vec| NIL)
    (|differentiable?| CONST-DECL "bool" |differentiable_def| NIL)
    (|vec2real_f| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|vec2vec| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL) NIL
    (|domain| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|n| FORMAL-CONST-DECL "posnat" |convergence_vec2vec| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    NIL NIL NIL NIL
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|every_mat| FORMULA-DECL NIL |convergence_vec2vec| NIL) NIL)
   NIL
   (|pre_der| SUBTYPE
    "convergence_vec2vec.pre_der((number_fields.-)(convergence_vec2vec.m, 1), convergence_vec2vec.D, convergence_vec2vec.p, convergence_vec2vec.cdr(convergence_vec2vec.m, convergence_vec2vec.f))"
    "list[VectorN(n)]")))
 (|pre_der_TCC10| 0
  (|pre_der_TCC13-1| |nil| 3797524662
   ("" (SKEEP)
    (("" (EXPAND "length" 2 1)
      (("" (ASSERT)
        (("" (TYPEPRED "v(m - 1, D, p, cdr(m, f))")
          (("1" (ASSERT)
            (("1" (SKEEP)
              (("1" (CASE "NOT i=0")
                (("1" (INST -3 "i-1")
                  (("1" (EXPAND "nth" 3 1) (("1" (ASSERT) NIL NIL)) NIL)
                   ("2" (ASSERT)
                    (("2" (TYPEPRED "i")
                      (("2" (EXPAND "length" -1) (("2" (ASSERT) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (ASSERT)
                  (("2" (REPLACE -1)
                    (("2" (EXPAND "nth" 2) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (TYPEPRED "f")
            (("2" (LEMMA "diff_nth_cdr")
              (("2" (INST?)
                (("2" (ASSERT)
                  (("2" (SPLIT -1)
                    (("1" (PROPAX) NIL NIL) ("2" (PROPAX) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|length| DEF-DECL "nat" |list_props| NIL)
    (|cdr| CONST-DECL "VectorN(m - 1)" |convergence_vec2vec| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|MatrixMN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|Matrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|nth| CONST-DECL "vec2real_f" |convergence_vec2vec| NIL)
    (|differentiable?| CONST-DECL "bool" |differentiable_def| NIL)
    (|vec2real_f| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|vec2vec| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL) NIL
    (|domain| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|n| FORMAL-CONST-DECL "posnat" |convergence_vec2vec| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    NIL NIL NIL NIL NIL NIL
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|convergence_zero?| CONST-DECL "bool" |vector_sequences| NIL)
    (NQ CONST-DECL "bool" |differentiable_def| NIL)
    (NQ CONST-DECL "real" |differentiable_def| NIL)
    (|zero_vec| DEF-DECL "VectorN(m)" |vector_arithmetic| NIL)
    (|der_f| CONST-DECL
     "{gg: VectorN(n) | convergence_zero?(NQ(D, p), NQ(f, gg, p), zero_vec(n))}"
     |differentiable_def| NIL)
    (|diff_nth_cdr| FORMULA-DECL NIL |convergence_vec2vec| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) NIL)
   NIL
   (|pre_der| SUBTYPE
    "list_adt[VectorN(convergence_vec2vec.n)].cons(differentiable_def[convergence_vec2vec.n].der_f(convergence_vec2vec.D, convergence_vec2vec.p)(convergence_vec2vec.nth(convergence_vec2vec.m, convergence_vec2vec.f, 0)), convergence_vec2vec.pre_der((number_fields.-)(convergence_vec2vec.m, 1), convergence_vec2vec.D, convergence_vec2vec.p, convergence_vec2vec.cdr(convergence_vec2vec.m, convergence_vec2vec.f)))"
    "MatrixMN(convergence_vec2vec.m, convergence_vec2vec.n)")))
 (|pre_der_TCC11| 0
  (|pre_der_TCC11-1| |nil| 3797524662 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|pre_der| SUBTYPE "0"
    "{ii: naturalnumbers.nat | reals.<(ii, convergence_vec2vec.m)}")))
 (|pre_der_TCC12| 0
  (|pre_der_TCC12-1| |nil| 3797524662 ("" (SUBTYPE-TCC) NIL NIL)
   ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|domain| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL) NIL
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|vec2real_f| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL)
    (|vec2vec| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|Vector| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|scal| DEF-DECL "VectorN(length(v2))" |matrices| |matrices|)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (|zero_vec| DEF-DECL "VectorN(m)" |vector_arithmetic| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|add| DEF-DECL "VectorN(max(length(v1), length(v2)))" |matrices|
     |matrices|)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    NIL (|norm_inf| CONST-DECL "(norm?(m))" |norms| NIL)
    (|sub| CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices|
     |matrices|)
    (- CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices| |matrices|)
    (|norm_inf| CONST-DECL "[(cons?) -> nonneg_real]" |norms| NIL)
    (|nth| CONST-DECL "vec2real_f" |convergence_vec2vec| NIL)
    (* CONST-DECL "real" |matrices| |matrices|)
    (|n| FORMAL-CONST-DECL "posnat" |convergence_vec2vec| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NQ CONST-DECL "real" |differentiable_def| NIL)
    (|convergence_zero?| CONST-DECL "bool" |vector_sequences| NIL)
    (|differentiable?| CONST-DECL "bool" |differentiable_def| NIL)
    (|differentiableD?| CONST-DECL "bool" |differentiable_def| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|norm?| CONST-DECL "bool" |norms| NIL)
    (+ CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices| |matrices|)
    (* CONST-DECL "VectorN(length(v2))" |matrices| |matrices|))
   NIL
   (|pre_der| SUBTYPE
    "convergence_vec2vec.nth(convergence_vec2vec.m, convergence_vec2vec.f, 0)"
    "(differentiable_def[convergence_vec2vec.n].differentiableD?(convergence_vec2vec.D))")))
 (|pre_der_TCC13| 0
  (|pre_der_TCC3-1| |nil| 3797241701
   ("" (SKEEP)
    (("" (SKEEP)
      (("" (SPLIT 1)
        (("1" (EXPAND "length" 1 1)
          (("1" (EXPAND "length" 1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)
         ("2" (SKEEP)
          (("2" (TYPEPRED "i")
            (("2" (EXPAND "length" -1)
              (("2" (EXPAND "length" -1)
                (("2" (ASSERT)
                  (("2" (EXPAND "nth" 1 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   (NIL
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|n| FORMAL-CONST-DECL "posnat" |convergence_vec2vec| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|domain| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL) NIL
    (|vec2real_f| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL)
    (|differentiableD?| CONST-DECL "bool" |differentiable_def| NIL)
    (|convergence_zero?| CONST-DECL "bool" |vector_sequences| NIL)
    (NQ CONST-DECL "bool" |differentiable_def| NIL)
    (NQ CONST-DECL "real" |differentiable_def| NIL)
    (|zero_vec| DEF-DECL "VectorN(m)" |vector_arithmetic| NIL)
    (|der_f| CONST-DECL "{gg: [(D) -> VectorN(n)] |
   FORALL (p: (D)):
     convergence_zero?(NQ(D, p), NQ(f, gg(p), p), zero_vec(n))}"
     |differentiable_def| NIL)
    (|vec2vec| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL)
    (|nth| CONST-DECL "vec2real_f" |convergence_vec2vec| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL))
   NIL
   (|pre_der| SUBTYPE
    "(: differentiable_def[convergence_vec2vec.n].der_f(convergence_vec2vec.D)(convergence_vec2vec.nth(convergence_vec2vec.m, convergence_vec2vec.f, 0))(convergence_vec2vec.p) :)"
    "MatrixMN(convergence_vec2vec.m, convergence_vec2vec.n)")))
 (|pre_der_TCC14| 0
  (|pre_der_TCC14-1| |nil| 3797524662 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|pre_der| SUBTYPE "0"
    "{ii: naturalnumbers.nat | reals.<(ii, convergence_vec2vec.m)}")))
 (|pre_der_TCC15| 0
  (|pre_der_TCC15-1| |nil| 3797524662 ("" (SUBTYPE-TCC) NIL NIL)
   ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|domain| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL) NIL
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|vec2real_f| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL)
    (|vec2vec| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|add| DEF-DECL "VectorN(max(length(v1), length(v2)))" |matrices|
     |matrices|)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|zero_vec| DEF-DECL "VectorN(m)" |vector_arithmetic| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|scal| DEF-DECL "VectorN(length(v2))" |matrices| |matrices|)
    (|Vector| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) NIL
    (|norm_inf| CONST-DECL "(norm?(m))" |norms| NIL)
    (|sub| CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices|
     |matrices|)
    (- CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices| |matrices|)
    (|norm_inf| CONST-DECL "[(cons?) -> nonneg_real]" |norms| NIL)
    (|nth| CONST-DECL "vec2real_f" |convergence_vec2vec| NIL)
    (* CONST-DECL "real" |matrices| |matrices|)
    (|n| FORMAL-CONST-DECL "posnat" |convergence_vec2vec| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NQ CONST-DECL "real" |differentiable_def| NIL)
    (|convergence_zero?| CONST-DECL "bool" |vector_sequences| NIL)
    (|differentiable?| CONST-DECL "bool" |differentiable_def| NIL)
    (|differentiableD?| CONST-DECL "bool" |differentiable_def| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|norm?| CONST-DECL "bool" |norms| NIL)
    (+ CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices| |matrices|)
    (* CONST-DECL "VectorN(length(v2))" |matrices| |matrices|))
   NIL
   (|pre_der| SUBTYPE
    "convergence_vec2vec.nth(convergence_vec2vec.m, convergence_vec2vec.f, 0)"
    "(differentiable_def[convergence_vec2vec.n].differentiableD?(convergence_vec2vec.D))")))
 (|pre_der_TCC16| 0
  (|pre_der_TCC16-1| |nil| 3797524662 ("" (SUBTYPE-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|n| FORMAL-CONST-DECL "posnat" |convergence_vec2vec| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|domain| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL) NIL
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|vec2real_f| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL)
    (|differentiableD?| CONST-DECL "bool" |differentiable_def| NIL)
    (|vec2vec| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL)
    (|nth| CONST-DECL "vec2real_f" |convergence_vec2vec| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    NIL)
   NIL
   (|pre_der| SUBTYPE "(number_fields.-)(convergence_vec2vec.m, 1)" "posnat")))
 (|pre_der_TCC17| 0
  (|pre_der_TCC17-1| |nil| 3797524662
   ("" (SKEEP*)
    (("" (EXPAND "differentiableD?")
      (("" (TYPEPRED "p")
        (("" (TYPEPRED "f")
          (("" (INST -1 "i+1")
            (("" (EXPAND "differentiableD?")
              (("" (SKEEP)
                (("" (INST -1 "p!1")
                  (("" (CASE " nth(m, f, i + 1) =  nth(m - 1, cdr(m, f), i)")
                    (("1" (ASSERT) NIL NIL)
                     ("2" (EXPAND "nth" 1)
                      (("2" (ASSERT)
                        (("2" (DECOMPOSE-EQUALITY 1)
                          (("1" (EXPAND "nth" 1 1)
                            (("1" (EXPAND "cdr" 1 2) (("1" (PROPAX) NIL NIL))
                              NIL))
                            NIL)
                           ("2" (SKEEP)
                            (("2" (TYPEPRED "i") (("2" (ASSERT) NIL NIL)) NIL))
                            NIL)
                           ("3" (SKEEP) (("3" (ASSERT) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|differentiableD?| CONST-DECL "bool" |differentiable_def| NIL)
    (|nth| CONST-DECL "vec2real_f" |convergence_vec2vec| NIL)
    (|vec2vec| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL)
    (|vec2real_f| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL) NIL NIL NIL NIL
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|cdr| CONST-DECL "VectorN(m - 1)" |convergence_vec2vec| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|n| FORMAL-CONST-DECL "posnat" |convergence_vec2vec| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|domain| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL) NIL
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL) NIL)
   NIL
   (|pre_der| SUBTYPE
    "convergence_vec2vec.cdr(convergence_vec2vec.m, convergence_vec2vec.f)"
    "{ff: domain_vec2real_def[convergence_vec2vec.n].vec2vec((number_fields.-)(convergence_vec2vec.m, 1)) | FORALL (i: naturalnumbers.below((number_fields.-)(convergence_vec2vec.m, 1))): differentiable_def[convergence_vec2vec.n].differentiableD?(convergence_vec2vec.D)(convergence_vec2vec.nth((number_fields.-)(convergence_vec2vec.m, 1), ff, i))}")))
 (|pre_der_TCC18| 0
  (|pre_der_TCC8-1| |nil| 3797241701 ("" (TERMINATION-TCC) NIL NIL) NIL NIL
   (|pre_der| TERMINATION
    "convergence_vec2vec.pre_der((number_fields.-)(convergence_vec2vec.m, 1), convergence_vec2vec.D, convergence_vec2vec.cdr(convergence_vec2vec.m, convergence_vec2vec.f))"
    "NIL")))
 (|pre_der_TCC19| 0
  (|pre_der_TCC9-1| |nil| 3797241701
   ("" (SKEEP*)
    (("" (LEMMA "every_mat")
      (("" (TYPEPRED "m")
        (("" (INST -2 "m-1" "(v(m - 1, D, cdr(m, f))(p))")
          (("1" (HIDE 3)
            (("1" (SKEEP)
              (("1" (TYPEPRED "f")
                (("1" (INST -1 "i+1")
                  (("1" (CASE "nth(m, f, i + 1) = nth(m - 1, cdr(m, f), i)")
                    (("1" (ASSERT) NIL NIL)
                     ("2" (DECOMPOSE-EQUALITY 1) (("2" (GRIND) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (ASSERT) NIL NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|every_mat| FORMULA-DECL NIL |convergence_vec2vec| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|Matrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|n| FORMAL-CONST-DECL "posnat" |convergence_vec2vec| NIL)
    (|MatrixMN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|domain| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL) NIL
    (|vec2vec| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL)
    (|vec2real_f| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL)
    (|differentiableD?| CONST-DECL "bool" |differentiable_def| NIL)
    (|nth| CONST-DECL "vec2real_f" |convergence_vec2vec| NIL)
    (|cdr| CONST-DECL "VectorN(m - 1)" |convergence_vec2vec| NIL) NIL NIL NIL
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL) NIL)
   NIL
   (|pre_der| SUBTYPE
    "convergence_vec2vec.pre_der((number_fields.-)(convergence_vec2vec.m, 1), convergence_vec2vec.D, convergence_vec2vec.cdr(convergence_vec2vec.m, convergence_vec2vec.f))(convergence_vec2vec.p)"
    "list[VectorN(n)]")))
 (|pre_der_TCC20| 0
  (|pre_der_TCC10-1| |nil| 3797241701
   ("" (SKEEP)
    (("" (SKEEP)
      (("" (SPLIT 2)
        (("1" (EXPAND "length" 1) (("1" (ASSERT) NIL NIL)) NIL)
         ("2" (SKEEP)
          (("2" (ASSERT)
            (("2" (CASE "i=0")
              (("1" (EXPAND "nth" 1) (("1" (ASSERT) NIL NIL)) NIL)
               ("2" (EXPAND "nth" 2)
                (("2" (ASSERT)
                  (("2" (TYPEPRED "v(m - 1, D, cdr(m, f))(p)")
                    (("1" (INST -3 "i-1") NIL NIL)
                     ("2" (SKEEP)
                      (("2" (TYPEPRED "f")
                        (("2" (INST -1 "i!1+1")
                          (("2"
                            (CASE
                                "nth(m, f, i!1 + 1) = nth(m - 1, cdr(m, f), i!1)")
                            (("1" (ASSERT) NIL NIL)
                             ("2" (DECOMPOSE-EQUALITY 1)
                              (("2" (EXPAND "nth" 1)
                                (("2" (EXPAND "cdr" 1)
                                  (("2" (ASSERT)
                                    (("2" (EXPAND "nth" 1 1)
                                      (("2" (PROPAX) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   (NIL (|cdr| CONST-DECL "VectorN(m - 1)" |convergence_vec2vec| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|MatrixMN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|Matrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|nth| CONST-DECL "vec2real_f" |convergence_vec2vec| NIL)
    (|vec2vec| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL)
    (|der_f| CONST-DECL "{gg: [(D) -> VectorN(n)] |
   FORALL (p: (D)):
     convergence_zero?(NQ(D, p), NQ(f, gg(p), p), zero_vec(n))}"
     |differentiable_def| NIL)
    (|zero_vec| DEF-DECL "VectorN(m)" |vector_arithmetic| NIL)
    (NQ CONST-DECL "real" |differentiable_def| NIL)
    (NQ CONST-DECL "bool" |differentiable_def| NIL)
    (|convergence_zero?| CONST-DECL "bool" |vector_sequences| NIL)
    (|differentiableD?| CONST-DECL "bool" |differentiable_def| NIL)
    (|vec2real_f| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL) NIL
    (|domain| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|n| FORMAL-CONST-DECL "posnat" |convergence_vec2vec| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL) (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL))
   NIL
   (|pre_der| SUBTYPE
    "list_adt[VectorN(convergence_vec2vec.n)].cons(differentiable_def[convergence_vec2vec.n].der_f(convergence_vec2vec.D)(convergence_vec2vec.nth(convergence_vec2vec.m, convergence_vec2vec.f, 0))(convergence_vec2vec.p), convergence_vec2vec.pre_der((number_fields.-)(convergence_vec2vec.m, 1), convergence_vec2vec.D, convergence_vec2vec.cdr(convergence_vec2vec.m, convergence_vec2vec.f))(convergence_vec2vec.p))"
    "MatrixMN(convergence_vec2vec.m, convergence_vec2vec.n)")))
 (|pre_der_nth_TCC1| 0
  (|pre_der_nth_TCC1-1| |nil| 3797261904 ("" (SUBTYPE-TCC) NIL NIL)
   (NIL (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|n| FORMAL-CONST-DECL "posnat" |convergence_vec2vec| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|domain| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL) NIL
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|vec2real_f| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL)
    (|differentiableD?| CONST-DECL "bool" |differentiable_def| NIL)
    (|vec2vec| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL)
    (|nth| CONST-DECL "vec2real_f" |convergence_vec2vec| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL))
   NIL
   (|pre_der_nth| SUBTYPE "convergence_vec2vec.i"
    "below[length[list[real]](pre_der(m, D, f)(p))]")))
 (|pre_der_nth_TCC2| 0
  (|pre_der_nth_TCC2-1| |nil| 3797261904 ("" (SUBTYPE-TCC) NIL NIL)
   (NIL (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|domain| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL) NIL
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|vec2real_f| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL)
    (|vec2vec| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|Vector| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|scal| DEF-DECL "VectorN(length(v2))" |matrices| |matrices|)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (|zero_vec| DEF-DECL "VectorN(m)" |vector_arithmetic| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|add| DEF-DECL "VectorN(max(length(v1), length(v2)))" |matrices|
     |matrices|)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|norm_inf| CONST-DECL "(norm?(m))" |norms| NIL)
    (|sub| CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices|
     |matrices|)
    (- CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices| |matrices|)
    (|norm_inf| CONST-DECL "[(cons?) -> nonneg_real]" |norms| NIL)
    (|nth| CONST-DECL "vec2real_f" |convergence_vec2vec| NIL)
    (* CONST-DECL "real" |matrices| |matrices|)
    (|n| FORMAL-CONST-DECL "posnat" |convergence_vec2vec| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NQ CONST-DECL "real" |differentiable_def| NIL)
    (|convergence_zero?| CONST-DECL "bool" |vector_sequences| NIL)
    (|differentiable?| CONST-DECL "bool" |differentiable_def| NIL)
    (|differentiableD?| CONST-DECL "bool" |differentiable_def| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|norm?| CONST-DECL "bool" |norms| NIL)
    (+ CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices| |matrices|)
    (* CONST-DECL "VectorN(length(v2))" |matrices| |matrices|))
   NIL
   (|pre_der_nth| SUBTYPE
    "convergence_vec2vec.nth(convergence_vec2vec.m, convergence_vec2vec.f, convergence_vec2vec.i)"
    "(differentiable_def[convergence_vec2vec.n].differentiableD?(convergence_vec2vec.D))")))
 (|pre_der_nth| 0
  (|pre_der_nth-1| |nil| 3797261966
   ("" (INDUCT "m")
    (("1" (SKEEP) (("1" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)
     ("3" (SKEEP)
      (("3" (ASSERT)
        (("3" (CASE "j=0")
          (("1" (SKEEP)
            (("1" (TYPEPRED "i")
              (("1" (ASSERT)
                (("1" (CASE "NOT i=0")
                  (("1" (ASSERT) NIL NIL)
                   ("2" (REPLACE -1)
                    (("2" (DECOMPOSE-EQUALITY 1)
                      (("1" (EXPAND "nth" 1)
                        (("1" (EXPAND "nth" 1)
                          (("1" (EXPAND "pre_der" 1 1)
                            (("1" (EXPAND "nth" 1)
                              (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (SKEEP)
                        (("2" (TYPEPRED "f") (("2" (INST -1 "0") NIL NIL))
                          NIL))
                        NIL)
                       ("3" (SKEEP) (("3" (ASSERT) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (SKEEP)
            (("2" (ASSERT)
              (("2" (DECOMPOSE-EQUALITY 2)
                (("1" (INST -1 "D" "_" "_")
                  (("1" (ASSERT)
                    (("1" (CASE "i=0")
                      (("1" (EXPAND "nth" 1)
                        (("1" (ASSERT)
                          (("1" (EXPAND "pre_der" 1)
                            (("1" (ASSERT)
                              (("1" (EXPAND "nth" 1)
                                (("1" (ASSERT)
                                  (("1" (EXPAND "nth" 1)
                                    (("1" (PROPAX) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (TYPEPRED "f")
                        (("2" (INST -2 "cdr(1+j,f)" "i-1")
                          (("1" (DECOMPOSE-EQUALITY -2)
                            (("1" (INST -1 "x!1")
                              (("1" (ASSERT)
                                (("1" (EXPAND "pre_der" 2 1)
                                  (("1" (EXPAND "nth" 2 1)
                                    (("1"
                                      (CASE
                                          "(nth(j, cdr(1 + j, f), i - 1)) = (nth(1 + j, f, i))")
                                      (("1" (ASSERT) NIL NIL)
                                       ("2" (DECOMPOSE-EQUALITY 1)
                                        (("2" (HIDE -1 4)
                                          (("2" (GRIND) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (INST -5 "i")
                              (("2"
                                (CASE
                                    "(nth(1 + j, f, i)) = (nth(j, cdr(1 + j, f), i - 1))")
                                (("1" (ASSERT) NIL NIL)
                                 ("2" (DECOMPOSE-EQUALITY 1)
                                  (("2" (HIDE -6)
                                    (("2" (HIDE 4) (("2" (GRIND) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("3" (TYPEPRED "i!1")
                              (("3" (INST -7 "i!1+1")
                                (("3"
                                  (CASE
                                      "(nth(1 + j, f, i!1 + 1)) = (nth(j, cdr(1 + j, f), i!1))")
                                  (("1" (ASSERT) NIL NIL)
                                   ("2" (DECOMPOSE-EQUALITY 1)
                                    (("2" (HIDE -7 -8)
                                      (("2" (HIDE 2 3 4 5)
                                        (("2" (GRIND) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (ASSERT) NIL NIL)
                           ("3" (SKEEP)
                            (("3" (INST -1 "i!1+1")
                              (("3"
                                (CASE
                                    "(nth(1 + j, f, i!1 + 1)) =  ((nth(j, cdr(1 + j, f), i!1)))")
                                (("1" (ASSERT) NIL NIL)
                                 ("2" (DECOMPOSE-EQUALITY 1)
                                  (("2" (GRIND) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (SKEEP)
                  (("2" (TYPEPRED "f")
                    (("2" (HIDE -2) (("2" (INST -1 "i") NIL NIL)) NIL)) NIL))
                  NIL)
                 ("3" (SKEEP) (("3" (ASSERT) NIL NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("4" (SKEEP)
      (("4" (ASSERT)
        (("4" (HIDE 2)
          (("4" (SKEEP)
            (("4" (TYPEPRED "f") (("4" (INST -1 "i") NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL)
     ("5" (HIDE 2) (("5" (SKEEP*) (("5" (ASSERT) NIL NIL)) NIL)) NIL))
    NIL)
   ((TRUE CONST-DECL "bool" |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) NIL
    NIL NIL NIL
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|cdr| CONST-DECL "VectorN(m - 1)" |convergence_vec2vec| NIL) NIL NIL NIL
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|der_f| CONST-DECL "{gg: [(D) -> VectorN(n)] |
   FORALL (p: (D)):
     convergence_zero?(NQ(D, p), NQ(f, gg(p), p), zero_vec(n))}"
     |differentiable_def| NIL)
    (|zero_vec| DEF-DECL "VectorN(m)" |vector_arithmetic| NIL)
    (NQ CONST-DECL "real" |differentiable_def| NIL)
    (NQ CONST-DECL "bool" |differentiable_def| NIL)
    (|convergence_zero?| CONST-DECL "bool" |vector_sequences| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (> CONST-DECL "bool" |reals| NIL) (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|n| FORMAL-CONST-DECL "posnat" |convergence_vec2vec| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|domain| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL) NIL
    (|vec2vec| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|vec2real_f| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL)
    (|differentiableD?| CONST-DECL "bool" |differentiable_def| NIL)
    (|nth| CONST-DECL "vec2real_f" |convergence_vec2vec| NIL)
    (|Matrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|MatrixMN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|pre_der| DEF-DECL "[(D) -> MatrixMN(m, n)]" |convergence_vec2vec| NIL))
   SHOSTAK))
 (|pre_der_nth_grad_TCC1| 0
  (|pre_der_nth_grad_TCC1-1| |nil| 3852995066
   ("" (SKEEP)
    (("" (LEMMA "dd_all_partial_implies_dd")
      (("" (INST -1 "D") (("" (ASSERT) NIL NIL)) NIL)) NIL))
    NIL)
   ((|n| FORMAL-CONST-DECL "posnat" |convergence_vec2vec| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|dd_all_partial_implies_dd| FORMULA-DECL NIL |derivative_domain_multi|
     NIL)
    (|deriv_domain_all_partial?| CONST-DECL "bool" |derivative_domain_multi|
     NIL)
    (|domain| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL))
   NIL
   (|pre_der_nth_grad| SUBTYPE "convergence_vec2vec.D"
    "(derivative_domain_multi[convergence_vec2vec.n].deriv_domain?)")))
 (|pre_der_nth_grad_TCC2| 0
  (|pre_der_nth_grad_TCC2-1| |nil| 3852995066
   ("" (SKEEP)
    (("" (LEMMA "dd_all_partial_implies_dd")
      (("" (INST?) (("" (ASSERT) NIL NIL)) NIL)) NIL))
    NIL)
   ((|n| FORMAL-CONST-DECL "posnat" |convergence_vec2vec| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|dd_all_partial_implies_dd| FORMULA-DECL NIL |derivative_domain_multi|
     NIL)
    (|deriv_domain_all_partial?| CONST-DECL "bool" |derivative_domain_multi|
     NIL)
    (|domain| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL) NIL)
   NIL
   (|pre_der_nth_grad| SUBTYPE "convergence_vec2vec.D"
    "(derivative_domain_multi[convergence_vec2vec.n].deriv_domain?)")))
 (|pre_der_nth_grad_TCC3| 0
  (|pre_der_nth_grad_TCC3-1| |nil| 3852995066 ("" (SUBTYPE-TCC) NIL NIL)
   (NIL (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|n| FORMAL-CONST-DECL "posnat" |convergence_vec2vec| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|domain| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL)
    (|deriv_domain_all_partial?| CONST-DECL "bool" |derivative_domain_multi|
     NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) NIL
    (|vec2real_f| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL)
    (|differentiableD?| CONST-DECL "bool" |differentiable_def| NIL)
    (|vec2vec| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL)
    (|nth| CONST-DECL "vec2real_f" |convergence_vec2vec| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    NIL)
   NIL
   (|pre_der_nth_grad| SUBTYPE "convergence_vec2vec.i"
    "below[length[list[real]](pre_der(m, D, f)(p))]")))
 (|pre_der_nth_grad_TCC4| 0
  (|pre_der_nth_grad_TCC4-1| |nil| 3852995066 ("" (SUBTYPE-TCC) NIL NIL)
   ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|domain| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL)
    (|deriv_domain_all_partial?| CONST-DECL "bool" |derivative_domain_multi|
     NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) NIL
    (|vec2real_f| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL)
    (|vec2vec| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL) NIL
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (* CONST-DECL "VectorN(length(v2))" |matrices| |matrices|)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|Vector| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nonzero_abs_is_pos| APPLICATION-JUDGEMENT "{y: posreal | y >= x}"
     |real_defs| NIL)
    NIL
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|norm_inf| CONST-DECL "(norm?(m))" |norms| NIL)
    (|sub| CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices|
     |matrices|)
    (- CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices| |matrices|)
    (|norm_inf| CONST-DECL "[(cons?) -> nonneg_real]" |norms| NIL)
    (+ CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices| |matrices|)
    (|nth| CONST-DECL "vec2real_f" |convergence_vec2vec| NIL)
    (* CONST-DECL "real" |matrices| |matrices|)
    (|n| FORMAL-CONST-DECL "posnat" |convergence_vec2vec| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NQ CONST-DECL "real" |differentiable_def| NIL)
    (|convergence_zero?| CONST-DECL "bool" |vector_sequences| NIL)
    (|differentiable?| CONST-DECL "bool" |differentiable_def| NIL)
    (|differentiableD?| CONST-DECL "bool" |differentiable_def| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL))
   NIL
   (|pre_der_nth_grad| SUBTYPE
    "convergence_vec2vec.nth(convergence_vec2vec.m, convergence_vec2vec.f, convergence_vec2vec.i)"
    "(differentiable_def[convergence_vec2vec.n].differentiableD?(convergence_vec2vec.D))")))
 (|pre_der_nth_grad_TCC5| 0
  (|pre_der_nth_grad_TCC5-1| |nil| 3852995066 ("" (SUBTYPE-TCC) NIL NIL)
   ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|domain| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL)
    (|deriv_domain_all_partial?| CONST-DECL "bool" |derivative_domain_multi|
     NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) NIL
    (|vec2real_f| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL)
    (|differentiableD?| CONST-DECL "bool" |differentiable_def| NIL)
    (|vec2vec| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL)
    (|nth| CONST-DECL "vec2real_f" |convergence_vec2vec| NIL) NIL
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|e| DEF-DECL "VectorN(m)" |vector_arithmetic| NIL)
    (|differentiable?| CONST-DECL "bool" |differentiable_def| NIL)
    (|convergence_zero?| CONST-DECL "bool" |vector_sequences| NIL)
    (NQ CONST-DECL "real" |differentiable_def| NIL)
    (* CONST-DECL "real" |matrices| |matrices|)
    (+ CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices| |matrices|)
    (|norm_inf| CONST-DECL "[(cons?) -> nonneg_real]" |norms| NIL)
    (- CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices| |matrices|)
    (|sub| CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices|
     |matrices|)
    (|norm_inf| CONST-DECL "(norm?(m))" |norms| NIL) NIL
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|n| FORMAL-CONST-DECL "posnat" |convergence_vec2vec| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) NIL
    (|deriv_domain_e_partial?| CONST-DECL "bool" |derivative_domain_multi|
     NIL))
   NIL
   (|pre_der_nth_grad| SUBTYPE "convergence_vec2vec.D"
    "(derivative_domain_multi[convergence_vec2vec.n].deriv_domain_e_partial?)")))
 (|pre_der_nth_grad| 0
  (|pre_der_nth_grad-1| |nil| 3852995290
   ("" (SKEEP)
    (("" (LEMMA "pre_der_nth")
      (("" (INST?)
        (("1" (REPLACE -1 1)
          (("1" (LEMMA "der_f_is_grad")
            (("1" (INST?)
              (("1" (DECOMPOSE-EQUALITY -1)
                (("1" (INST -1 "nth(m,f,i)")
                  (("1" (REPLACE -1)
                    (("1" (ASSERT) (("1" (DECOMPOSE-EQUALITY 1) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (LEMMA "dd_all_partial_implies_dd")
          (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|pre_der_nth| FORMULA-DECL NIL |convergence_vec2vec| NIL)
    (|dd_all_partial_implies_dd| FORMULA-DECL NIL |derivative_domain_multi|
     NIL)
    NIL NIL
    (|deriv_domain_e_partial?| CONST-DECL "bool" |derivative_domain_multi| NIL)
    (|der_f| CONST-DECL "{gg: [(D) -> VectorN(n)] |
   FORALL (p: (D)):
     convergence_zero?(NQ(D, p), NQ(f, gg(p), p), zero_vec(n))}"
     |differentiable_def| NIL)
    (|zero_vec| DEF-DECL "VectorN(m)" |vector_arithmetic| NIL)
    (NQ CONST-DECL "real" |differentiable_def| NIL)
    (NQ CONST-DECL "bool" |differentiable_def| NIL)
    (|convergence_zero?| CONST-DECL "bool" |vector_sequences| NIL)
    (|der_f_is_grad| FORMULA-DECL NIL |gradient_def| NIL)
    (|nth| CONST-DECL "vec2real_f" |convergence_vec2vec| NIL)
    (|differentiableD?| CONST-DECL "bool" |differentiable_def| NIL)
    (|vec2real_f| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|vec2vec| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|n| FORMAL-CONST-DECL "posnat" |convergence_vec2vec| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|domain| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL) NIL
    (|deriv_domain_all_partial?| CONST-DECL "bool" |derivative_domain_multi|
     NIL)
    NIL)
   SHOSTAK))
 (|pre_der_nth_p_TCC1| 0
  (|pre_der_nth_p_TCC1-1| |nil| 3798125011 ("" (SUBTYPE-TCC) NIL NIL)
   (NIL (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|n| FORMAL-CONST-DECL "posnat" |convergence_vec2vec| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|domain| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL) NIL
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|vec2real_f| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL)
    (|differentiable?| CONST-DECL "bool" |differentiable_def| NIL)
    (|vec2vec| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL)
    (|nth| CONST-DECL "vec2real_f" |convergence_vec2vec| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL))
   NIL
   (|pre_der_nth_p| SUBTYPE "convergence_vec2vec.i"
    "below[length[list[real]](pre_der(m, D, p, f))]")))
 (|pre_der_nth_p_TCC2| 0
  (|pre_der_nth_p_TCC2-1| |nil| 3798125011 ("" (SUBTYPE-TCC) NIL NIL)
   (NIL (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|domain| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL) NIL
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|vec2real_f| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL)
    (|vec2vec| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|Vector| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|scal| DEF-DECL "VectorN(length(v2))" |matrices| |matrices|)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (|zero_vec| DEF-DECL "VectorN(m)" |vector_arithmetic| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|add| DEF-DECL "VectorN(max(length(v1), length(v2)))" |matrices|
     |matrices|)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|norm_inf| CONST-DECL "(norm?(m))" |norms| NIL)
    (|sub| CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices|
     |matrices|)
    (- CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices| |matrices|)
    (|norm_inf| CONST-DECL "[(cons?) -> nonneg_real]" |norms| NIL)
    (|nth| CONST-DECL "vec2real_f" |convergence_vec2vec| NIL)
    (* CONST-DECL "real" |matrices| |matrices|)
    (|n| FORMAL-CONST-DECL "posnat" |convergence_vec2vec| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NQ CONST-DECL "real" |differentiable_def| NIL)
    (|convergence_zero?| CONST-DECL "bool" |vector_sequences| NIL)
    (|differentiable?| CONST-DECL "bool" |differentiable_def| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|norm?| CONST-DECL "bool" |norms| NIL)
    (+ CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices| |matrices|)
    (* CONST-DECL "VectorN(length(v2))" |matrices| |matrices|))
   NIL
   (|pre_der_nth_p| SUBTYPE
    "convergence_vec2vec.nth(convergence_vec2vec.m, convergence_vec2vec.f, convergence_vec2vec.i)"
    "{ff: domain_vec2real_def[convergence_vec2vec.n].vec2real_f | differentiable_def[convergence_vec2vec.n].differentiable?(convergence_vec2vec.D, ff, convergence_vec2vec.p)}")))
 (|pre_der_nth_p| 0
  (|pre_der_nth_p-1| |nil| 3798125271
   ("" (INDUCT "m")
    (("1" (SKEEP) (("1" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)
     ("3" (SKEEP)
      (("3" (ASSERT)
        (("3" (CASE "j=0")
          (("1" (SKEEP)
            (("1" (TYPEPRED "i")
              (("1" (ASSERT)
                (("1" (CASE "NOT i=0")
                  (("1" (ASSERT) NIL NIL)
                   ("2" (REPLACE -1)
                    (("2" (EXPAND "nth" 1)
                      (("2" (EXPAND "nth" 1)
                        (("2" (EXPAND "pre_der" 1 1)
                          (("2" (EXPAND "nth" 1)
                            (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (SKEEP)
            (("2" (TYPEPRED "f")
              (("2" (INST -1 "0")
                (("2" (ASSERT)
                  (("2" (CASE "i=0")
                    (("1" (EXPAND "nth" 2)
                      (("1" (ASSERT)
                        (("1" (EXPAND "nth")
                          (("1" (ASSERT)
                            (("1" (EXPAND "pre_der" 2)
                              (("1" (ASSERT)
                                (("1" (EXPAND "nth" 2 1)
                                  (("1" (EXPAND "nth" 2 1)
                                    (("1" (PROPAX) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (TYPEPRED "f")
                      (("2" (INST -3 "D" "p" "cdr(1+j,f)" "i-1")
                        (("1" (ASSERT)
                          (("1" (EXPAND "pre_der" 3 1)
                            (("1" (EXPAND "nth" 3 1)
                              (("1" (ASSERT)
                                (("1" (REPLACE -3)
                                  (("1" (EXPAND "nth" 3 1)
                                    (("1" (EXPAND "nth" 3 2)
                                      (("1" (EXPAND "nth" 3 2)
                                        (("1" (EXPAND "cdr" 3 1)
                                          (("1" (PROPAX) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (ASSERT) NIL NIL)
                         ("3" (SKEEP)
                          (("3" (INST -1 "i!1+1")
                            (("3" (ASSERT)
                              (("3" (EXPAND "nth" 1)
                                (("3" (EXPAND "nth" -1)
                                  (("3" (EXPAND "cdr" 1 1)
                                    (("3" (EXPAND "nth" -1 1)
                                      (("3" (PROPAX) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("4" (HIDE 2)
      (("4" (SKEEP*) (("4" (TYPEPRED "f") (("4" (INST -1 "i") NIL NIL)) NIL))
        NIL))
      NIL)
     ("5" (HIDE 2)
      (("5" (SKEEP)
        (("5" (SKEEP) (("5" (TYPEPRED "i") (("5" (ASSERT) NIL NIL)) NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((TRUE CONST-DECL "bool" |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    NIL NIL NIL (|cdr| CONST-DECL "VectorN(m - 1)" |convergence_vec2vec| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) NIL
    NIL (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    NIL
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|der_f| CONST-DECL
     "{gg: VectorN(n) | convergence_zero?(NQ(D, p), NQ(f, gg, p), zero_vec(n))}"
     |differentiable_def| NIL)
    (|zero_vec| DEF-DECL "VectorN(m)" |vector_arithmetic| NIL)
    (NQ CONST-DECL "real" |differentiable_def| NIL)
    (NQ CONST-DECL "bool" |differentiable_def| NIL)
    (|convergence_zero?| CONST-DECL "bool" |vector_sequences| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (> CONST-DECL "bool" |reals| NIL) (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|n| FORMAL-CONST-DECL "posnat" |convergence_vec2vec| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|domain| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL) NIL
    (|vec2vec| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|vec2real_f| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL)
    (|differentiable?| CONST-DECL "bool" |differentiable_def| NIL)
    (|nth| CONST-DECL "vec2real_f" |convergence_vec2vec| NIL)
    (|Matrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|MatrixMN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|pre_der| DEF-DECL "MatrixMN(m, n)" |convergence_vec2vec| NIL))
   SHOSTAK))
 (|del_ch_TCC1| 0
  (|del_ch_TCC1-1| |nil| 3797328146
   ("" (SKEEP)
    (("" (TYPEPRED "x-zero_vec(n)" "x" "zero_vec(n)") (("" (ASSERT) NIL NIL))
      NIL))
    NIL)
   ((|zero_vec| DEF-DECL "VectorN(m)" |vector_arithmetic| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL) NIL
    (NQ CONST-DECL "bool" |differentiable_def| NIL)
    (|domain| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL)
    (|n| FORMAL-CONST-DECL "posnat" |convergence_vec2vec| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (- CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices| |matrices|)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|Vector| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    NIL)
   NIL
   (|del_ch| SUBTYPE
    "(matrices.-)(convergence_vec2vec.x, vector_arithmetic.zero_vec(convergence_vec2vec.n))"
    "(list_adt[real].cons?)")))
 (|del_ch_TCC2| 0
  (|del_ch_TCC2-1| |nil| 3797328146
   ("" (SKEEP)
    (("" (EXPAND "nonempty?" 1)
      (("" (EXPAND "empty?" -1)
        (("" (TYPEPRED "der_f[n](D)(f)")
          (("" (INST -1 "p")
            (("" (EXPAND "convergence_zero?" -1)
              (("" (INST -1 "eps")
                (("" (SKEEP)
                  (("" (INST -2 "delta")
                    (("" (EXPAND "member" 1) (("" (POSTPONE) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|nonempty?| CONST-DECL "bool" |sets| NIL)
    (|der_f| CONST-DECL "{gg: [(D) -> VectorN(n)] |
   FORALL (p: (D)):
     convergence_zero?(NQ(D, p), NQ(f, gg(p), p), zero_vec(n))}"
     |differentiable_def| NIL)
    (|zero_vec| DEF-DECL "VectorN(m)" |vector_arithmetic| NIL)
    (|differentiableD?| CONST-DECL "bool" |differentiable_def| NIL)
    (NQ CONST-DECL "real" |differentiable_def| NIL)
    (NQ CONST-DECL "bool" |differentiable_def| NIL)
    (|convergence_zero?| CONST-DECL "bool" |vector_sequences| NIL)
    (|vec2real_f| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL) NIL
    (|domain| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|n| FORMAL-CONST-DECL "posnat" |convergence_vec2vec| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL) NIL)
   NIL
   (|del_ch| SUBTYPE
    "{delta: real_types.posreal | FORALL (x: {xx: (differentiable_def[convergence_vec2vec.n].NQ(convergence_vec2vec.D, convergence_vec2vec.p)) | xx /= vector_arithmetic.zero_vec(convergence_vec2vec.n)}): booleans.IMPLIES(reals.<(norms.norm_inf(convergence_vec2vec.n)((matrices.-)(x, vector_arithmetic.zero_vec(convergence_vec2vec.n))), delta), reals.<(real_defs.abs(differentiable_def[convergence_vec2vec.n].NQ(convergence_vec2vec.f, differentiable_def[convergence_vec2vec.n].der_f(convergence_vec2vec.D)(convergence_vec2vec.f)(convergence_vec2vec.p), convergence_vec2vec.p)(x)), convergence_vec2vec.eps))}"
    "(sets[posreal].nonempty?)")))
 (|del_ch_p_TCC1| 0
  (|del_ch_p_TCC1-1| |nil| 3798127380
   ("" (SKEEP)
    (("" (TYPEPRED "x-zero_vec(n)" "x" "zero_vec(n)") (("" (ASSERT) NIL NIL))
      NIL))
    NIL)
   ((|zero_vec| DEF-DECL "VectorN(m)" |vector_arithmetic| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL) NIL
    (NQ CONST-DECL "bool" |differentiable_def| NIL)
    (|domain| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL)
    (|n| FORMAL-CONST-DECL "posnat" |convergence_vec2vec| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (- CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices| |matrices|)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|Vector| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    NIL)
   NIL
   (|del_ch_p| SUBTYPE
    "(matrices.-)(convergence_vec2vec.x, vector_arithmetic.zero_vec(convergence_vec2vec.n))"
    "(list_adt[real].cons?)")))
 (|del_ch_p_TCC2| 0
  (|del_ch_p_TCC2-1| |nil| 3798127380
   ("" (SKEEP)
    (("" (EXPAND "nonempty?" 1)
      (("" (EXPAND "empty?" -1)
        (("" (TYPEPRED "der_f[n](D,p)(f)")
          (("" (EXPAND "convergence_zero?" -3)
            (("" (INST -3 "eps")
              (("" (SKEEP)
                (("" (INST -4 "delta")
                  (("" (EXPAND "member" 1) (("" (PROPAX) NIL NIL)) NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|nonempty?| CONST-DECL "bool" |sets| NIL)
    (|der_f| CONST-DECL
     "{gg: VectorN(n) | convergence_zero?(NQ(D, p), NQ(f, gg, p), zero_vec(n))}"
     |differentiable_def| NIL)
    (|zero_vec| DEF-DECL "VectorN(m)" |vector_arithmetic| NIL)
    (NQ CONST-DECL "real" |differentiable_def| NIL)
    (NQ CONST-DECL "bool" |differentiable_def| NIL)
    (|convergence_zero?| CONST-DECL "bool" |vector_sequences| NIL)
    (|differentiable?| CONST-DECL "bool" |differentiable_def| NIL)
    (|vec2real_f| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL) NIL
    (|domain| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|n| FORMAL-CONST-DECL "posnat" |convergence_vec2vec| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL) NIL)
   NIL
   (|del_ch_p| SUBTYPE
    "{delta: real_types.posreal | FORALL (x: {xx: (differentiable_def[convergence_vec2vec.n].NQ(convergence_vec2vec.D, convergence_vec2vec.p)) | xx /= vector_arithmetic.zero_vec(convergence_vec2vec.n)}): booleans.IMPLIES(reals.<(norms.norm_inf(convergence_vec2vec.n)((matrices.-)(x, vector_arithmetic.zero_vec(convergence_vec2vec.n))), delta), reals.<(real_defs.abs(differentiable_def[convergence_vec2vec.n].NQ(convergence_vec2vec.f, differentiable_def[convergence_vec2vec.n].der_f(convergence_vec2vec.D, convergence_vec2vec.p)(convergence_vec2vec.f), convergence_vec2vec.p)(x)), convergence_vec2vec.eps))}"
    "(sets[posreal].nonempty?)")))
 (|del_nth_TCC1| 0
  (|del_nth_TCC1-1| |nil| 3797329197
   ("" (SKEEP)
    (("" (TYPEPRED "x-zero_vec(n)" "x" "zero_vec(n)") (("" (GRIND) NIL NIL))
      NIL))
    NIL)
   ((|zero_vec| DEF-DECL "VectorN(m)" |vector_arithmetic| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL) NIL
    (NQ CONST-DECL "bool" |differentiable_def| NIL)
    (|domain| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL)
    (|n| FORMAL-CONST-DECL "posnat" |convergence_vec2vec| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (- CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices| |matrices|)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|Vector| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (+ CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices| |matrices|)
    (|add| DEF-DECL "VectorN(max(length(v1), length(v2)))" |matrices|
     |matrices|)
    (|scal| DEF-DECL "VectorN(length(v2))" |matrices| |matrices|)
    (|sub| CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices|
     |matrices|)
    NIL)
   NIL
   (|del_nth| SUBTYPE
    "(matrices.-)(convergence_vec2vec.x, vector_arithmetic.zero_vec(convergence_vec2vec.n))"
    "(list_adt[real].cons?)")))
 (|del_nth| 0
  (|del_nth-1| |nil| 3797329279
   ("" (INDUCT "m")
    (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)
     ("3" (SKEEP)
      (("3" (SKEEP)
        (("3" (ASSERT)
          (("3" (CASE "j=0")
            (("1" (HIDE -2)
              (("1" (SKEEP)
                (("1" (REPLACE -1)
                  (("1" (ASSERT)
                    (("1" (EXPAND "del_all" -3)
                      (("1" (EXPAND "del_ch" -3)
                        (("1"
                          (NAME "ch" " choose({delta: posreal |
                 FORALL (x: {xx: (NQ(D, p)) | xx /= zero_vec(n)}):
                   norm_inf(n)(x - zero_vec(n)) < delta IMPLIES
                    abs(NQ(nth(1, f, 0), der_f(D)(nth(1, f, 0))(p), p)(x))
                     < eps})")
                          (("1" (TYPEPRED "ch")
                            (("1" (INST -3 "x") (("1" (ASSERT) NIL NIL)) NIL))
                            NIL)
                           ("2" (LEMMA "del_ch_TCC2")
                            (("2" (INST?)
                              (("2" (ASSERT)
                                (("2" (TYPEPRED "f")
                                  (("2" (INST -1 "0") (("2" (ASSERT) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("3" (ASSERT)
                            (("3" (SKEEP 1)
                              (("3" (TYPEPRED "f")
                                (("3" (INST -1 "0") (("3" (ASSERT) NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("4" (SKEEP)
                            (("4"
                              (TYPEPRED "x!1-zero_vec(n)" "x!1" "zero_vec(n)")
                              (("4" (ASSERT) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (ASSERT)
              (("2" (SKEEP)
                (("2" (CASE "i=0")
                  (("1"
                    (CASE
                        "NOT  del_all(1 + j, D, f)(p, eps) <= del_ch(1 + j, D, nth(1 + j, f, 0))(p, eps)")
                    (("1" (HIDE -2)
                      (("1" (HIDE 3)
                        (("1" (EXPAND "del_all" 1) (("1" (ASSERT) NIL NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (EXPAND "del_ch" -1)
                      (("2"
                        (NAME "ch" "choose({delta: posreal |
                 FORALL (x: {xx: (NQ(D, p)) | xx /= zero_vec(n)}):
                   norm_inf(n)(x - zero_vec(n)) < delta IMPLIES
                    abs(NQ(nth(1 + j, f, 0), der_f(D)(nth(1 + j, f, 0))(p),
                           p)
                          (x))
                     < eps})")
                        (("1" (TYPEPRED "ch")
                          (("1" (INST -3 "x") (("1" (ASSERT) NIL NIL)) NIL))
                          NIL)
                         ("2" (LEMMA "del_ch_TCC2")
                          (("2" (INST?)
                            (("2" (ASSERT)
                              (("2" (TYPEPRED "f")
                                (("2" (INST -1 "0") NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("3" (ASSERT)
                          (("3" (SKEEP)
                            (("3" (TYPEPRED "f") (("3" (INST -1 "0") NIL NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("4" (ASSERT)
                          (("4" (SKEEP)
                            (("4"
                              (TYPEPRED "x!1-zero_vec(n)" "x!1" "zero_vec(n)")
                              (("4" (ASSERT) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("3" (TYPEPRED "f") (("3" (INST -1 "0") NIL NIL)) NIL))
                    NIL)
                   ("2" (ASSERT)
                    (("2" (INST -1 "D" "cdr(1+j,f)" "p" "eps" "i-1")
                      (("1" (ASSERT)
                        (("1" (INST -1 "x")
                          (("1" (ASSERT)
                            (("1" (EXPAND "del_all" -3)
                              (("1" (ASSERT)
                                (("1" (HIDE -3)
                                  (("1"
                                    (CASE "NQ(nth(j, cdr(1 + j, f), i - 1),
             der_f(D)(nth(j, cdr(1 + j, f), i - 1))(p), p) = NQ(nth(1 + j, f, i), der_f(D)(nth(1 + j, f, i))(p), p)")
                                    (("1" (ASSERT) NIL NIL)
                                     ("2"
                                      (CASE
                                          "nth(j, cdr(1 + j, f), i - 1) = nth(1 + j, f, i)")
                                      (("1" (ASSERT) NIL NIL)
                                       ("2" (HIDE 2)
                                        (("2" (DECOMPOSE-EQUALITY 1)
                                          (("2" (GRIND) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (SKEEP)
                        (("2" (TYPEPRED "f")
                          (("2" (INST -1 "i!1+1")
                            (("2"
                              (CASE
                                  "(nth(1 + j, f, i!1 + 1)) = nth(j, cdr(1 + j, f), i!1)")
                              (("1" (ASSERT) NIL NIL)
                               ("2" (DECOMPOSE-EQUALITY 1)
                                (("2" (GRIND) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("4" (HIDE 2)
      (("4" (SKEEP)
        (("4" (SKEEP) (("4" (TYPEPRED "f") (("4" (INST -1 "i") NIL NIL)) NIL))
          NIL))
        NIL))
      NIL)
     ("5" (HIDE 2)
      (("5" (SKEEP)
        (("5" (SKEEP)
          (("5" (TYPEPRED "x-zero_vec(n)" "x" "zero_vec(n)")
            (("5" (ASSERT) NIL NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|posreal_min| APPLICATION-JUDGEMENT "{z: posreal | z <= x AND z <= y}"
     |real_defs| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|cdr| CONST-DECL "VectorN(m - 1)" |convergence_vec2vec| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (|choose| CONST-DECL "(p)" |sets| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) NIL NIL NIL
    (|del_ch_TCC2| SUBTYPE-TCC NIL |convergence_vec2vec| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|del_ch| CONST-DECL "posreal" |convergence_vec2vec| NIL)
    (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    NIL
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|der_f| CONST-DECL "{gg: [(D) -> VectorN(n)] |
   FORALL (p: (D)):
     convergence_zero?(NQ(D, p), NQ(f, gg(p), p), zero_vec(n))}"
     |differentiable_def| NIL)
    (|convergence_zero?| CONST-DECL "bool" |vector_sequences| NIL)
    (NQ CONST-DECL "real" |differentiable_def| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|norm?| CONST-DECL "bool" |norms| NIL)
    (|norm_inf| CONST-DECL "(norm?(m))" |norms| NIL)
    (|del_all| DEF-DECL "posreal" |convergence_vec2vec| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (> CONST-DECL "bool" |reals| NIL) (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|n| FORMAL-CONST-DECL "posnat" |convergence_vec2vec| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|domain| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL) NIL
    (|vec2vec| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|vec2real_f| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL)
    (|differentiableD?| CONST-DECL "bool" |differentiable_def| NIL)
    (|nth| CONST-DECL "vec2real_f" |convergence_vec2vec| NIL)
    (NQ CONST-DECL "bool" |differentiable_def| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|zero_vec| DEF-DECL "VectorN(m)" |vector_arithmetic| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|Vector| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (- CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices|
       |matrices|))
   SHOSTAK))
 (|del_nth_p_TCC1| 0
  (|del_nth_p_TCC1-1| |nil| 3798127735
   ("" (SKEEP)
    (("" (TYPEPRED "x-zero_vec(n)" "x" "zero_vec(n)") (("" (ASSERT) NIL NIL))
      NIL))
    NIL)
   ((|zero_vec| DEF-DECL "VectorN(m)" |vector_arithmetic| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL) NIL
    (NQ CONST-DECL "bool" |differentiable_def| NIL)
    (|domain| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL)
    (|n| FORMAL-CONST-DECL "posnat" |convergence_vec2vec| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (- CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices| |matrices|)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|Vector| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    NIL)
   NIL
   (|del_nth_p| SUBTYPE
    "(matrices.-)(convergence_vec2vec.x, vector_arithmetic.zero_vec(convergence_vec2vec.n))"
    "(list_adt[real].cons?)")))
 (|del_nth_p| 0
  (|del_nth_p-1| |nil| 3798127894
   ("" (INDUCT "m")
    (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)
     ("3" (SKEEP)
      (("3" (SKEEP)
        (("3" (ASSERT)
          (("3" (CASE "j=0")
            (("1" (HIDE -2)
              (("1" (SKEEP)
                (("1" (REPLACE -1)
                  (("1" (ASSERT)
                    (("1" (EXPAND "del_all_p" -3)
                      (("1" (EXPAND "del_ch_p" -3)
                        (("1"
                          (NAME "ch" " choose({delta: posreal |
                            FORALL (x: {xx: (NQ(D, p)) | xx /= zero_vec(n)}):
                              norm_inf(n)(x - zero_vec(n)) < delta IMPLIES
                               abs(NQ(nth(1, f, 0), der_f(D,p)(nth(1, f, 0)), p)(x))
                                < eps})")
                          (("1" (TYPEPRED "ch")
                            (("1" (INST -3 "x") (("1" (ASSERT) NIL NIL)) NIL))
                            NIL)
                           ("2" (LEMMA "del_ch_p_TCC2")
                            (("2" (INST?)
                              (("2" (ASSERT)
                                (("2" (TYPEPRED "f")
                                  (("2" (INST -1 "0") (("2" (ASSERT) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("3" (ASSERT)
                            (("3" (SKEEP 1)
                              (("3" (TYPEPRED "f")
                                (("3" (INST -1 "0") (("3" (ASSERT) NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("4" (SKEEP)
                            (("4"
                              (TYPEPRED "x!1-zero_vec(n)" "x!1" "zero_vec(n)")
                              (("4" (ASSERT) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (ASSERT)
              (("2" (SKEEP)
                (("2" (CASE "i=0")
                  (("1"
                    (CASE
                        "NOT  del_all_p(1 + j, D,p, f)( eps) <= del_ch_p(1 + j, D,p, nth(1 + j, f, 0))(eps)")
                    (("1" (HIDE -2)
                      (("1" (HIDE 3)
                        (("1" (EXPAND "del_all_p" 1) (("1" (ASSERT) NIL NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (EXPAND "del_ch_p" -1)
                      (("2"
                        (NAME "ch" "choose({delta: posreal |
                                FORALL (x: {xx: (NQ(D, p)) | xx /= zero_vec(n)}):
                                  norm_inf(n)(x - zero_vec(n)) < delta IMPLIES
                                   abs(NQ(nth(1 + j, f, 0), der_f(D,p)(nth(1 + j, f, 0)),
                                          p)
                                         (x))
                                    < eps})")
                        (("1" (TYPEPRED "ch")
                          (("1" (INST -3 "x") (("1" (ASSERT) NIL NIL)) NIL))
                          NIL)
                         ("2" (LEMMA "del_ch_p_TCC2")
                          (("2" (INST?)
                            (("2" (ASSERT)
                              (("2" (TYPEPRED "f")
                                (("2" (INST -1 "0") NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("3" (ASSERT)
                          (("3" (SKEEP)
                            (("3" (TYPEPRED "f") (("3" (INST -1 "0") NIL NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("4" (ASSERT)
                          (("4" (SKEEP)
                            (("4"
                              (TYPEPRED "x!1-zero_vec(n)" "x!1" "zero_vec(n)")
                              (("4" (ASSERT) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("3" (TYPEPRED "f") (("3" (INST -1 "0") NIL NIL)) NIL))
                    NIL)
                   ("2" (ASSERT)
                    (("2" (INST -1 "D" "p" "cdr(1+j,f)" "eps" "i-1")
                      (("1" (ASSERT)
                        (("1" (INST -1 "x")
                          (("1" (ASSERT)
                            (("1" (EXPAND "del_all_p" -3)
                              (("1" (ASSERT)
                                (("1" (HIDE -3)
                                  (("1"
                                    (CASE "NQ(nth(j, cdr(1 + j, f), i - 1),
                            der_f(D,p)(nth(j, cdr(1 + j, f), i - 1)), p) = NQ(nth(1 + j, f, i), der_f(D,p)(nth(1 + j, f, i)), p)")
                                    (("1" (ASSERT) NIL NIL)
                                     ("2"
                                      (CASE
                                          "nth(j, cdr(1 + j, f), i - 1) = nth(1 + j, f, i)")
                                      (("1" (ASSERT) NIL NIL)
                                       ("2" (HIDE 2)
                                        (("2" (DECOMPOSE-EQUALITY 1)
                                          (("2" (GRIND) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (SKEEP)
                        (("2" (TYPEPRED "f")
                          (("2" (INST -1 "i!1+1")
                            (("2"
                              (CASE
                                  "(nth(1 + j, f, i!1 + 1)) = nth(j, cdr(1 + j, f), i!1)")
                              (("1" (ASSERT) NIL NIL)
                               ("2" (DECOMPOSE-EQUALITY 1)
                                (("2" (GRIND) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("4" (HIDE 2)
      (("4" (SKEEP)
        (("4" (SKEEP) (("4" (TYPEPRED "f") (("4" (INST -1 "i") NIL NIL)) NIL))
          NIL))
        NIL))
      NIL)
     ("5" (HIDE 2)
      (("5" (SKEEP)
        (("5" (SKEEP)
          (("5" (TYPEPRED "x-zero_vec(n)" "x" "zero_vec(n)")
            (("5" (ASSERT) NIL NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|posreal_min| APPLICATION-JUDGEMENT "{z: posreal | z <= x AND z <= y}"
     |real_defs| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|cdr| CONST-DECL "VectorN(m - 1)" |convergence_vec2vec| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (|choose| CONST-DECL "(p)" |sets| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) NIL NIL NIL NIL
    (|del_ch_p_TCC2| SUBTYPE-TCC NIL |convergence_vec2vec| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|del_ch_p| CONST-DECL "posreal" |convergence_vec2vec| NIL)
    (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    NIL
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|der_f| CONST-DECL
     "{gg: VectorN(n) | convergence_zero?(NQ(D, p), NQ(f, gg, p), zero_vec(n))}"
     |differentiable_def| NIL)
    (|convergence_zero?| CONST-DECL "bool" |vector_sequences| NIL)
    (NQ CONST-DECL "real" |differentiable_def| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|norm?| CONST-DECL "bool" |norms| NIL)
    (|norm_inf| CONST-DECL "(norm?(m))" |norms| NIL)
    (|del_all_p| DEF-DECL "posreal" |convergence_vec2vec| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (> CONST-DECL "bool" |reals| NIL) (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|n| FORMAL-CONST-DECL "posnat" |convergence_vec2vec| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|domain| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL) NIL
    (|vec2vec| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|vec2real_f| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL)
    (|differentiable?| CONST-DECL "bool" |differentiable_def| NIL)
    (|nth| CONST-DECL "vec2real_f" |convergence_vec2vec| NIL)
    (NQ CONST-DECL "bool" |differentiable_def| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|zero_vec| DEF-DECL "VectorN(m)" |vector_arithmetic| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|Vector| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (- CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices|
       |matrices|))
   SHOSTAK))
 (|derivable_nth_mat| 0
  (|derivable_nth_mat-1| |nil| 3796115252
   ("" (SKEEP)
    (("" (SPLIT 1)
      (("1" (FLATTEN)
        (("1" (SKEEP)
          (("1" (EXPAND "differentiableD?")
            (("1" (SKEEP)
              (("1" (INST -1 "p")
                (("1" (EXPAND "differentiable?")
                  (("1" (SKEEP)
                    (("1" (INST 1 "nth(T,i)")
                      (("1" (EXPAND "convergence_zero?")
                        (("1" (SKEEP)
                          (("1" (INST -1 "epsilon")
                            (("1" (SKEEP)
                              (("1" (INST 1 "delta")
                                (("1" (SKEEP)
                                  (("1" (INST -1 "x")
                                    (("1" (ASSERT)
                                      (("1" (EXPAND "NQ")
                                        (("1"
                                          (CASE
                                              " abs(norm_inf(m)(f(p + x) - f(p) - T * x) / norm_inf(n)(x)) =  norm_inf(m)(f(p + x) - f(p) - T * x) / norm_inf(n)(x)")
                                          (("1" (ASSERT)
                                            (("1" (REPLACE -1 -2)
                                              (("1" (HIDE -1)
                                                (("1"
                                                  (LEMMA "norm_inf_nth_ineq")
                                                  (("1"
                                                    (INST -1
                                                     "f(p + x) - f(p) - T*x"
                                                     "i")
                                                    (("1"
                                                      (EXPAND "norm_inf" -2 1)
                                                      (("1"
                                                        (MULT-BY -2
                                                         "norm_inf(n)(x)")
                                                        (("1" (ASSERT)
                                                          (("1"
                                                            (MULT-BY 1
                                                             "norm_inf(n)(x)")
                                                            (("1" (ASSERT)
                                                              (("1"
                                                                (CASE
                                                                    "NOT  abs((nth(m, f, i)(p + x) - nth(m, f, i)(p) - nth(T, i) * x) /
                                             norm_inf(n)(x))
                                         * norm_inf(n)(x) =  abs((nth(m, f, i)(p + x) - nth(m, f, i)(p) - nth(T, i) * x)) ")
                                                                (("1" (ASSERT)
                                                                  (("1"
                                                                    (EXPAND "*"
                                                                            1)
                                                                    (("1"
                                                                      (ASSERT)
                                                                      (("1"
                                                                        (CASE
                                                                            "abs((nth(m, f, i)(p + x) - nth(m, f, i)(p) - dot(nth(T, i), x)) /
                                                 norm_inf(n)(x)) = abs((nth(m, f, i)(p + x) - nth(m, f, i)(p) - dot(nth(T, i), x))) /
                                                 norm_inf(n)(x)")
                                                                        (("1"
                                                                          (ASSERT)
                                                                          NIL
                                                                          NIL)
                                                                         ("2"
                                                                          (HIDE
                                                                           2)
                                                                          (("2"
                                                                            (CASE
                                                                                "NOT norm_inf(n)(x)=0")
                                                                            (("1"
                                                                              (LEMMA
                                                                               "abs_div")
                                                                              (("1"
                                                                                (INST
                                                                                 -1
                                                                                 "norm_inf(n)(x)"
                                                                                 "((nth(m, f, i)(p + x) - nth(m, f, i)(p) - dot(nth(T, i), x)))")
                                                                                (("1"
                                                                                  (REPLACE
                                                                                   -1
                                                                                   2)
                                                                                  (("1"
                                                                                    (TYPEPRED
                                                                                     "norm_inf(n)")
                                                                                    (("1"
                                                                                      (EXPAND
                                                                                       "norm?"
                                                                                       -1)
                                                                                      (("1"
                                                                                        (FLATTEN)
                                                                                        (("1"
                                                                                          (INST
                                                                                           -1
                                                                                           "x")
                                                                                          (("1"
                                                                                            (ASSERT)
                                                                                            (("1"
                                                                                              (EXPAND
                                                                                               "abs"
                                                                                               2
                                                                                               2)
                                                                                              (("1"
                                                                                                (PROPAX)
                                                                                                NIL
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL)
                                                                             ("2"
                                                                              (ASSERT)
                                                                              NIL
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL)
                                                                 ("2" (ASSERT)
                                                                  (("2"
                                                                    (REPLACE -1
                                                                             1)
                                                                    (("2"
                                                                      (HIDE -1)
                                                                      (("2"
                                                                        (CASE
                                                                            "nth(f(p + x) - f(p) - T*x, i) = (nth(m, f, i)(p + x) - nth(m, f, i)(p) - nth(T, i) * x)")
                                                                        (("1"
                                                                          (ASSERT)
                                                                          NIL
                                                                          NIL)
                                                                         ("2"
                                                                          (HIDE
                                                                           2)
                                                                          (("2"
                                                                            (LEMMA
                                                                             "nth_subtract")
                                                                            (("2"
                                                                              (EXPAND
                                                                               "-"
                                                                               1)
                                                                              (("2"
                                                                                (INST-CP
                                                                                 -1
                                                                                 "f(p + x)"
                                                                                 "f(p)")
                                                                                (("2"
                                                                                  (INST
                                                                                   -1
                                                                                   "sub(f(p + x), f(p))"
                                                                                   "T*x")
                                                                                  (("1"
                                                                                    (SPLIT
                                                                                     -1)
                                                                                    (("1"
                                                                                      (SPLIT
                                                                                       -2)
                                                                                      (("1"
                                                                                        (INST
                                                                                         -1
                                                                                         "i")
                                                                                        (("1"
                                                                                          (INST
                                                                                           -2
                                                                                           "i")
                                                                                          (("1"
                                                                                            (EXPAND
                                                                                             "-"
                                                                                             -)
                                                                                            (("1"
                                                                                              (REPLACE
                                                                                               -2
                                                                                               1)
                                                                                              (("1"
                                                                                                (REPLACE
                                                                                                 -1
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (EXPAND
                                                                                                   "nth"
                                                                                                   1
                                                                                                   4)
                                                                                                  (("1"
                                                                                                    (EXPAND
                                                                                                     "nth"
                                                                                                     1
                                                                                                     3)
                                                                                                    (("1"
                                                                                                      (LEMMA
                                                                                                       "matv_nth")
                                                                                                      (("1"
                                                                                                        (INST
                                                                                                         -1
                                                                                                         "T"
                                                                                                         "x"
                                                                                                         "i")
                                                                                                        (("1"
                                                                                                          (EXPAND
                                                                                                           "row"
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (REPLACE
                                                                                                             -1
                                                                                                             1)
                                                                                                            (("1"
                                                                                                              (PROPAX)
                                                                                                              NIL
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL)
                                                                                                         ("2"
                                                                                                          (HIDE
                                                                                                           2)
                                                                                                          (("2"
                                                                                                            (HIDE
                                                                                                             -)
                                                                                                            (("2"
                                                                                                              (TYPEPRED
                                                                                                               "i")
                                                                                                              (("2"
                                                                                                                (TYPEPRED
                                                                                                                 "m")
                                                                                                                (("2"
                                                                                                                  (TYPEPRED
                                                                                                                   "T")
                                                                                                                  (("2"
                                                                                                                    (EXPAND
                                                                                                                     "rows")
                                                                                                                    (("2"
                                                                                                                      (ASSERT)
                                                                                                                      NIL
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL)
                                                                                           ("2"
                                                                                            (TYPEPRED
                                                                                             "f(p)")
                                                                                            (("2"
                                                                                              (TYPEPRED
                                                                                               "(sub(f(p + x), f(p)))")
                                                                                              (("2"
                                                                                                (HIDE
                                                                                                 -1
                                                                                                 -3)
                                                                                                (("2"
                                                                                                  (TYPEPRED
                                                                                                   "f(p+x)")
                                                                                                  (("2"
                                                                                                    (REPLACE
                                                                                                     -2)
                                                                                                    (("2"
                                                                                                      (REPLACE
                                                                                                       -4)
                                                                                                      (("2"
                                                                                                        (EXPAND
                                                                                                         "max"
                                                                                                         -3)
                                                                                                        (("2"
                                                                                                          (ASSERT)
                                                                                                          NIL
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL)
                                                                                       ("2"
                                                                                        (ASSERT)
                                                                                        NIL
                                                                                        NIL))
                                                                                      NIL)
                                                                                     ("2"
                                                                                      (TYPEPRED
                                                                                       "T*x")
                                                                                      (("2"
                                                                                        (TYPEPRED
                                                                                         "sub(f(p + x), f(p))"
                                                                                         "f(p+x)"
                                                                                         "f(p)")
                                                                                        (("2"
                                                                                          (ASSERT)
                                                                                          (("2"
                                                                                            (REPLACE
                                                                                             -4)
                                                                                            (("2"
                                                                                              (REPLACE
                                                                                               -6)
                                                                                              (("2"
                                                                                                (EXPAND
                                                                                                 "max")
                                                                                                (("2"
                                                                                                  (ASSERT)
                                                                                                  (("2"
                                                                                                    (EXPAND
                                                                                                     "rows")
                                                                                                    (("2"
                                                                                                      (ASSERT)
                                                                                                      NIL
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL)
                                                                                   ("2"
                                                                                    (TYPEPRED
                                                                                     "T*x")
                                                                                    (("2"
                                                                                      (HIDE
                                                                                       -1)
                                                                                      (("2"
                                                                                        (EXPAND
                                                                                         "rows"
                                                                                         -1)
                                                                                        (("2"
                                                                                          (ASSERT)
                                                                                          NIL
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL)
                                                                                   ("3"
                                                                                    (TYPEPRED
                                                                                     "sub(f(p + x), f(p))"
                                                                                     "f(p+x)"
                                                                                     "f(p)")
                                                                                    (("3"
                                                                                      (REPLACE
                                                                                       -4)
                                                                                      (("3"
                                                                                        (REPLACE
                                                                                         -6)
                                                                                        (("3"
                                                                                          (EXPAND
                                                                                           "max")
                                                                                          (("3"
                                                                                            (ASSERT)
                                                                                            NIL
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL)
                                                         ("2" (TYPEPRED "x")
                                                          (("2"
                                                            (TYPEPRED
                                                             "norm_inf(n)")
                                                            (("2"
                                                              (EXPAND "norm?"
                                                                      -1)
                                                              (("2" (FLATTEN)
                                                                (("2"
                                                                  (INST -3 "x")
                                                                  (("2"
                                                                    (ASSERT)
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL)
                                                     ("2"
                                                      (TYPEPRED
                                                       "f(p + x) - f(p)"
                                                       "f(p+x)" "f(p)" "T*x")
                                                      (("2" (REPLACE -4)
                                                        (("2" (REPLACE -6)
                                                          (("2"
                                                            (EXPAND "max" -2)
                                                            (("2" (ASSERT)
                                                              (("2"
                                                                (HIDE -1 -3 -5
                                                                 -7)
                                                                (("2"
                                                                  (TYPEPRED
                                                                   "i")
                                                                  (("2"
                                                                    (ASSERT)
                                                                    (("2"
                                                                      (TYPEPRED
                                                                       "f(p + x) - f(p) - T * x")
                                                                      (("2"
                                                                        (ASSERT)
                                                                        NIL
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("2" (EXPAND "abs" 1 1)
                                            (("2" (LIFT-IF 1)
                                              (("2" (SPLIT 1)
                                                (("1" (FLATTEN)
                                                  (("1"
                                                    (MULT-BY -1
                                                     " norm_inf(n)(x)")
                                                    (("1" (ASSERT) NIL NIL)
                                                     ("2" (TYPEPRED "x")
                                                      (("2"
                                                        (TYPEPRED
                                                         "norm_inf(n)")
                                                        (("2"
                                                          (EXPAND "norm?" -1)
                                                          (("2" (FLATTEN)
                                                            (("2" (INST -3 "x")
                                                              (("2" (ASSERT)
                                                                NIL NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (PROPAX) NIL NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (ASSERT)
                        (("2" (TYPEPRED "T") (("2" (INST -3 "i") NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (FLATTEN)
        (("2" (EXPAND "differentiableD?" 1)
          (("2" (EXPAND "differentiableD?" -1)
            (("2" (SKEEP)
              (("2" (EXPAND "differentiable?" 1)
                (("2" (INST 1 "pre_der(m,D,f)(p)")
                  (("1" (EXPAND "convergence_zero?" 1)
                    (("1" (SKEEP)
                      (("1" (INST 1 "del_all(m,D,f)(p,epsilon)")
                        (("1" (SKEEP)
                          (("1" (LEMMA "del_nth")
                            (("1" (INST?)
                              (("1" (EXPAND "NQ" 1)
                                (("1"
                                  (CASE
                                      "abs(norm_inf(m)(f(p + x) - f(p) - pre_der(m, D, f)(p)*x)
                                     / norm_inf(n)(x)) = norm_inf(m)(f(p + x) - f(p) - pre_der(m, D, f)(p)*x)
                                     / norm_inf(n)(x)")
                                  (("1" (ASSERT)
                                    (("1" (REPLACE -1 1)
                                      (("1" (LEMMA "norm_inf_nth")
                                        (("1"
                                          (INST -1
                                           "f(p + x) - f(p) - pre_der(m, D, f)(p)*x")
                                          (("1" (SKEEP)
                                            (("1" (EXPAND "norm_inf" 1 1)
                                              (("1" (REPLACE -1 1)
                                                (("1" (LEMMA "nth_subtract")
                                                  (("1"
                                                    (INST -1 "f(p + x) - f(p)"
                                                     "pre_der(m, D, f)(p)*x")
                                                    (("1" (ASSERT)
                                                      (("1" (SPLIT -1)
                                                        (("1" (INST -1 "i")
                                                          (("1" (REPLACE -1 1)
                                                            (("1"
                                                              (LEMMA
                                                               "matv_nth")
                                                              (("1"
                                                                (INST -1
                                                                 " pre_der(m, D, f)(p)"
                                                                 "x" "i")
                                                                (("1"
                                                                  (REPLACE -1
                                                                           1)
                                                                  (("1"
                                                                    (LEMMA
                                                                     "pre_der_nth")
                                                                    (("1"
                                                                      (INST -1
                                                                       "m" "D"
                                                                       "f" "i")
                                                                      (("1"
                                                                        (EXPAND
                                                                         "row"
                                                                         1 1)
                                                                        (("1"
                                                                          (ASSERT)
                                                                          (("1"
                                                                            (TYPEPRED
                                                                             "i")
                                                                            (("1"
                                                                              (LIFT-IF
                                                                               1)
                                                                              (("1"
                                                                                (SPLIT
                                                                                 1)
                                                                                (("1"
                                                                                  (FLATTEN)
                                                                                  (("1"
                                                                                    (HIDE
                                                                                     1)
                                                                                    (("1"
                                                                                      (TYPEPRED
                                                                                       "i"
                                                                                       "pre_der(m, D, f)(p)")
                                                                                      (("1"
                                                                                        (TYPEPRED
                                                                                         "f(p + x) - f(p) - pre_der(m, D, f)(p)*x"
                                                                                         "f(p + x) - f(p)"
                                                                                         "pre_der(m, D, f)(p)*x"
                                                                                         "f(p+x)"
                                                                                         "f(p)")
                                                                                        (("1"
                                                                                          (ASSERT)
                                                                                          (("1"
                                                                                            (REPLACE
                                                                                             -8)
                                                                                            (("1"
                                                                                              (REPLACE
                                                                                               -10)
                                                                                              (("1"
                                                                                                (HIDE
                                                                                                 -7)
                                                                                                (("1"
                                                                                                  (HIDE
                                                                                                   -8)
                                                                                                  (("1"
                                                                                                    (HIDE
                                                                                                     -5)
                                                                                                    (("1"
                                                                                                      (EXPAND
                                                                                                       "max"
                                                                                                       -4)
                                                                                                      (("1"
                                                                                                        (REPLACE
                                                                                                         -4)
                                                                                                        (("1"
                                                                                                          (HIDE
                                                                                                           -1
                                                                                                           -3)
                                                                                                          (("1"
                                                                                                            (EXPAND
                                                                                                             "rows"
                                                                                                             -3)
                                                                                                            (("1"
                                                                                                              (ASSERT)
                                                                                                              NIL
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL)
                                                                                 ("2"
                                                                                  (FLATTEN)
                                                                                  (("2"
                                                                                    (DECOMPOSE-EQUALITY
                                                                                     -2
                                                                                     "p")
                                                                                    (("1"
                                                                                      (INST
                                                                                       -1
                                                                                       "p")
                                                                                      (("1"
                                                                                        (REPLACE
                                                                                         -1
                                                                                         2)
                                                                                        (("1"
                                                                                          (INST
                                                                                           -7
                                                                                           "i")
                                                                                          (("1"
                                                                                            (ASSERT)
                                                                                            (("1"
                                                                                              (EXPAND
                                                                                               "NQ"
                                                                                               -7)
                                                                                              (("1"
                                                                                                (HIDE
                                                                                                 -8)
                                                                                                (("1"
                                                                                                  (CASE
                                                                                                      "(nth(m, f, i)(p + x) - nth(m, f, i)(p) -
                                                                      der_f(D)(nth(m, f, i))(p) * x) = nth(f(p + x) - f(p), i) - der_f(D)(nth(m, f, i))(p) * x")
                                                                                                  (("1"
                                                                                                    (REPLACE
                                                                                                     -1
                                                                                                     2
                                                                                                     RL)
                                                                                                    (("1"
                                                                                                      (ASSERT)
                                                                                                      (("1"
                                                                                                        (HIDE
                                                                                                         1)
                                                                                                        (("1"
                                                                                                          (HIDE
                                                                                                           -9)
                                                                                                          (("1"
                                                                                                            (HIDE
                                                                                                             -7)
                                                                                                            (("1"
                                                                                                              (LEMMA
                                                                                                               "abs_div")
                                                                                                              (("1"
                                                                                                                (INST
                                                                                                                 -1
                                                                                                                 " norm_inf(n)(x)"
                                                                                                                 "(nth(m, f, i)(p + x) - nth(m, f, i)(p) -
                                                                der_f(D)(nth(m, f, i))(p) * x)")
                                                                                                                (("1"
                                                                                                                  (ASSERT)
                                                                                                                  (("1"
                                                                                                                    (REPLACE
                                                                                                                     -1
                                                                                                                     -8)
                                                                                                                    (("1"
                                                                                                                      (EXPAND
                                                                                                                       "abs"
                                                                                                                       -8
                                                                                                                       2)
                                                                                                                      (("1"
                                                                                                                        (PROPAX)
                                                                                                                        NIL
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL)
                                                                                                   ("2"
                                                                                                    (ASSERT)
                                                                                                    (("2"
                                                                                                      (HIDE
                                                                                                       2
                                                                                                       3)
                                                                                                      (("2"
                                                                                                        (HIDE
                                                                                                         -6
                                                                                                         -7)
                                                                                                        (("2"
                                                                                                          (EXPAND
                                                                                                           "nth"
                                                                                                           1
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (EXPAND
                                                                                                             "nth"
                                                                                                             1
                                                                                                             2)
                                                                                                            (("2"
                                                                                                              (ASSERT)
                                                                                                              (("2"
                                                                                                                (LEMMA
                                                                                                                 "nth_subtract")
                                                                                                                (("2"
                                                                                                                  (INST
                                                                                                                   -1
                                                                                                                   "f(p + x)"
                                                                                                                   "(f(p))")
                                                                                                                  (("2"
                                                                                                                    (ASSERT)
                                                                                                                    (("2"
                                                                                                                      (INST
                                                                                                                       -1
                                                                                                                       "i")
                                                                                                                      (("2"
                                                                                                                        (REPLACE
                                                                                                                         -1
                                                                                                                         1)
                                                                                                                        (("2"
                                                                                                                          (PROPAX)
                                                                                                                          NIL
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL)
                                                                                     ("2"
                                                                                      (HIDE
                                                                                       -)
                                                                                      (("2"
                                                                                        (REVEAL
                                                                                         -)
                                                                                        (("2"
                                                                                          (HIDE
                                                                                           -11)
                                                                                          (("2"
                                                                                            (EXPAND
                                                                                             "differentiableD?"
                                                                                             1)
                                                                                            (("2"
                                                                                              (SKEEP)
                                                                                              (("2"
                                                                                                (INST
                                                                                                 -11
                                                                                                 "i")
                                                                                                (("2"
                                                                                                  (INST
                                                                                                   -11
                                                                                                   "p!2")
                                                                                                  NIL
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL)
                                                                       ("2"
                                                                        (ASSERT)
                                                                        (("2"
                                                                          (TYPEPRED
                                                                           "i")
                                                                          (("2"
                                                                            (TYPEPRED
                                                                             "f(p + x) - f(p) - pre_der(m, D, f)(p)*x"
                                                                             "f(p + x) - f(p)"
                                                                             "pre_der(m, D, f)(p)*x"
                                                                             "f(p+x)"
                                                                             "f(p)")
                                                                            (("2"
                                                                              (ASSERT)
                                                                              (("2"
                                                                                (REPLACE
                                                                                 -8)
                                                                                (("2"
                                                                                  (REPLACE
                                                                                   -10)
                                                                                  (("2"
                                                                                    (REPLACE
                                                                                     -6)
                                                                                    (("2"
                                                                                      (EXPAND
                                                                                       "max"
                                                                                       -4)
                                                                                      (("2"
                                                                                        (EXPAND
                                                                                         "rows")
                                                                                        (("2"
                                                                                          (ASSERT)
                                                                                          NIL
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL)
                                                                 ("2" (ASSERT)
                                                                  (("2"
                                                                    (TYPEPRED
                                                                     "i")
                                                                    (("2"
                                                                      (TYPEPRED
                                                                       "f(p + x) - f(p) - pre_der(m, D, f)(p)*x"
                                                                       "f(p + x) - f(p)"
                                                                       "pre_der(m, D, f)(p)*x"
                                                                       "f(p+x)"
                                                                       "f(p)")
                                                                      (("2"
                                                                        (HIDE
                                                                         -3 -5
                                                                         -7)
                                                                        (("2"
                                                                          (REPLACE
                                                                           -5)
                                                                          (("2"
                                                                            (REPLACE
                                                                             -4)
                                                                            (("2"
                                                                              (REPLACE
                                                                               -7)
                                                                              (("2"
                                                                                (HIDE
                                                                                 -1)
                                                                                (("2"
                                                                                  (HIDE
                                                                                   -5)
                                                                                  (("2"
                                                                                    (EXPAND
                                                                                     "rows")
                                                                                    (("2"
                                                                                      (EXPAND
                                                                                       "max")
                                                                                      (("2"
                                                                                        (REPLACE
                                                                                         -1)
                                                                                        (("2"
                                                                                          (ASSERT)
                                                                                          NIL
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL)
                                                           ("2"
                                                            (TYPEPRED
                                                             "f(p+x)-f(p)"
                                                             "f(p+x)" "f(p)")
                                                            (("2" (REPLACE -4)
                                                              (("2"
                                                                (REPLACE -6)
                                                                (("2"
                                                                  (EXPAND "max"
                                                                          -2)
                                                                  (("2"
                                                                    (ASSERT)
                                                                    (("2"
                                                                      (TYPEPRED
                                                                       "i")
                                                                      (("2"
                                                                        (ASSERT)
                                                                        (("2"
                                                                          (TYPEPRED
                                                                           "pre_der(m, D, f)(p) * x")
                                                                          (("2"
                                                                            (HIDE
                                                                             -1)
                                                                            (("2"
                                                                              (EXPAND
                                                                               "rows"
                                                                               -1)
                                                                              (("2"
                                                                                (ASSERT)
                                                                                NIL
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL)
                                                         ("2"
                                                          (TYPEPRED
                                                           "f(p+x)-f(p)"
                                                           "f(p+x)" "f(p)")
                                                          (("2"
                                                            (TYPEPRED
                                                             "pre_der(m, D, f)(p) * x")
                                                            (("2" (ASSERT)
                                                              (("2"
                                                                (EXPAND "rows")
                                                                (("2" (ASSERT)
                                                                  (("2"
                                                                    (REPLACE
                                                                     -6)
                                                                    (("2"
                                                                      (REPLACE
                                                                       -8)
                                                                      (("2"
                                                                        (EXPAND
                                                                         "max"
                                                                         -4)
                                                                        (("2"
                                                                          (ASSERT)
                                                                          NIL
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL)
                                                     ("2" (HIDE -1)
                                                      (("2"
                                                        (TYPEPRED
                                                         "pre_der(m, D, f)(p)")
                                                        (("2" (ASSERT)
                                                          (("2"
                                                            (TYPEPRED
                                                             "f(p+x)-f(p)"
                                                             "f(p+x)" "f(p)")
                                                            (("2" (REPLACE -4)
                                                              (("2"
                                                                (REPLACE -6)
                                                                (("2"
                                                                  (EXPAND "max"
                                                                          -2)
                                                                  (("2"
                                                                    (ASSERT)
                                                                    (("2"
                                                                      (TYPEPRED
                                                                       "(pre_der(m, D, f)(p) * x)")
                                                                      (("2"
                                                                        (ASSERT)
                                                                        (("2"
                                                                          (EXPAND
                                                                           "rows")
                                                                          (("2"
                                                                            (ASSERT)
                                                                            NIL
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL)
                                                     ("3"
                                                      (TYPEPRED "f(p+x)-f(p)"
                                                       "f(p+x)" "f(p)")
                                                      (("3" (REPLACE -4)
                                                        (("3" (REPLACE -6)
                                                          (("3" (EXPAND "max")
                                                            (("3" (ASSERT) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (EXPAND "abs" 1 1)
                                    (("2" (LIFT-IF 1)
                                      (("2" (SPLIT 1)
                                        (("1" (FLATTEN)
                                          (("1" (MULT-BY -1 " norm_inf(n)(x)")
                                            (("1" (ASSERT) NIL NIL)
                                             ("2" (TYPEPRED "x")
                                              (("2" (TYPEPRED "norm_inf(n)")
                                                (("2" (EXPAND "norm?" -1)
                                                  (("2" (FLATTEN)
                                                    (("2" (INST -3 "x")
                                                      (("2" (ASSERT) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (PROPAX) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (SKEEP)
                          (("2" (INST -1 "i")
                            (("2" (EXPAND "differentiableD?" 1)
                              (("2" (PROPAX) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (SKEEP)
                    (("2" (INST -1 "i")
                      (("2" (EXPAND "differentiableD?" 1)
                        (("2" (PROPAX) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   (NIL (|differentiable?| CONST-DECL "bool" |differentiable_def| NIL)
    (|differentiable?| CONST-DECL "bool" |convergence_vec2vec| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    NIL NIL (|MatrixMN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) NIL
    (|Matrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (* CONST-DECL "VectorN(rows(A))" |mat_vec_mult| NIL)
    (|rows| CONST-DECL "nat" |matrices| |matrices|)
    (|columns| DEF-DECL "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}"
     |matrices| |matrices|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|FullMatrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (+ CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices| |matrices|)
    (|vec2vec| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL)
    (- CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices| |matrices|)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|Vector| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|norm_inf| CONST-DECL "(norm?(m))" |norms| NIL)
    (|norm?| CONST-DECL "bool" |norms| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|norm_inf_nth_ineq| FORMULA-DECL NIL |norms| NIL)
    (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal"
     |real_types| NIL)
    (|sub| CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices|
     |matrices|)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|matv_nth| FORMULA-DECL NIL |mat_vec_mult| NIL)
    (|row| CONST-DECL "Vector" |matrices| |matrices|)
    (|nth_subtract| FORMULA-DECL NIL |vector_arithmetic| NIL)
    (|abs_div| FORMULA-DECL NIL |real_props| NIL)
    (|dot| DEF-DECL "real" |matrices| |matrices|)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (* CONST-DECL "real" |matrices| |matrices|)
    (|nth| CONST-DECL "vec2real_f" |convergence_vec2vec| NIL)
    (|vec2real_f| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|both_sides_times_pos_ge1_imp| FORMULA-DECL NIL |extra_real_props| NIL)
    (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|div_cancel2| FORMULA-DECL NIL |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|norm_inf| CONST-DECL "[(cons?) -> nonneg_real]" |norms| NIL)
    (|both_sides_times_pos_lt1| FORMULA-DECL NIL |real_props| NIL) NIL NIL NIL
    NIL (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (NQ CONST-DECL "real" |convergence_vec2vec| NIL)
    (NQ CONST-DECL "real" |differentiable_def| NIL)
    (NQ CONST-DECL "bool" |differentiable_def| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|zero_vec| DEF-DECL "VectorN(m)" |vector_arithmetic| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|convergence_zero?| CONST-DECL "bool" |vector_sequences| NIL) NIL
    (|domain| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|n| FORMAL-CONST-DECL "posnat" |convergence_vec2vec| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|differentiableD?| CONST-DECL "bool" |convergence_vec2vec| NIL)
    (|differentiableD?| CONST-DECL "bool" |differentiable_def| NIL)
    (|pre_der| DEF-DECL "[(D) -> MatrixMN(m, n)]" |convergence_vec2vec| NIL)
    NIL
    (|der_f| CONST-DECL "{gg: [(D) -> VectorN(n)] |
   FORALL (p: (D)):
     convergence_zero?(NQ(D, p), NQ(f, gg(p), p), zero_vec(n))}"
     |differentiable_def| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|pre_der_nth| FORMULA-DECL NIL |convergence_vec2vec| NIL) NIL NIL
    (|norm_inf_nth| FORMULA-DECL NIL |norms| NIL)
    (|del_nth| FORMULA-DECL NIL |convergence_vec2vec| NIL)
    (|del_all| DEF-DECL "posreal" |convergence_vec2vec| NIL))
   SHOSTAK))
 (|derivable_nth_mat_point| 0
  (|derivable_nth_mat_point-1| |nil| 3798124624
   ("" (SKEEP)
    (("" (SPLIT 1)
      (("1" (FLATTEN)
        (("1" (SKEEP)
          (("1" (EXPAND "differentiable?")
            (("1" (SKEEP)
              (("1" (INST 1 "nth(T,i)")
                (("1" (EXPAND "convergence_zero?")
                  (("1" (SKEEP)
                    (("1" (INST -1 "epsilon")
                      (("1" (SKEEP)
                        (("1" (INST 1 "delta")
                          (("1" (SKEEP)
                            (("1" (INST -1 "x")
                              (("1" (ASSERT)
                                (("1" (EXPAND "NQ")
                                  (("1"
                                    (CASE
                                        " abs(norm_inf(m)(f(p + x) - f(p) - T * x) / norm_inf(n)(x)) =  norm_inf(m)(f(p + x) - f(p) - T * x) / norm_inf(n)(x)")
                                    (("1" (ASSERT)
                                      (("1" (REPLACE -1 -2)
                                        (("1" (HIDE -1)
                                          (("1" (LEMMA "norm_inf_nth_ineq")
                                            (("1"
                                              (INST -1 "f(p + x) - f(p) - T*x"
                                               "i")
                                              (("1" (EXPAND "norm_inf" -2 1)
                                                (("1"
                                                  (MULT-BY -2 "norm_inf(n)(x)")
                                                  (("1" (ASSERT)
                                                    (("1"
                                                      (MULT-BY 1
                                                       "norm_inf(n)(x)")
                                                      (("1" (ASSERT)
                                                        (("1"
                                                          (CASE
                                                              "NOT  abs((nth(m, f, i)(p + x) - nth(m, f, i)(p) - nth(T, i) * x) /
                                                              norm_inf(n)(x))
                                                          * norm_inf(n)(x) =  abs((nth(m, f, i)(p + x) - nth(m, f, i)(p) - nth(T, i) * x)) ")
                                                          (("1" (ASSERT)
                                                            (("1"
                                                              (EXPAND "*" 1)
                                                              (("1" (ASSERT)
                                                                (("1"
                                                                  (CASE
                                                                      "abs((nth(m, f, i)(p + x) - nth(m, f, i)(p) - dot(nth(T, i), x)) /
                                                                    norm_inf(n)(x)) = abs((nth(m, f, i)(p + x) - nth(m, f, i)(p) - dot(nth(T, i), x))) /
                                                                    norm_inf(n)(x)")
                                                                  (("1"
                                                                    (ASSERT)
                                                                    NIL NIL)
                                                                   ("2"
                                                                    (HIDE 2)
                                                                    (("2"
                                                                      (CASE
                                                                          "NOT norm_inf(n)(x)=0")
                                                                      (("1"
                                                                        (LEMMA
                                                                         "abs_div")
                                                                        (("1"
                                                                          (INST
                                                                           -1
                                                                           "norm_inf(n)(x)"
                                                                           "((nth(m, f, i)(p + x) - nth(m, f, i)(p) - dot(nth(T, i), x)))")
                                                                          (("1"
                                                                            (REPLACE
                                                                             -1
                                                                             2)
                                                                            (("1"
                                                                              (TYPEPRED
                                                                               "norm_inf(n)")
                                                                              (("1"
                                                                                (EXPAND
                                                                                 "norm?"
                                                                                 -1)
                                                                                (("1"
                                                                                  (FLATTEN)
                                                                                  (("1"
                                                                                    (INST
                                                                                     -1
                                                                                     "x")
                                                                                    (("1"
                                                                                      (ASSERT)
                                                                                      (("1"
                                                                                        (EXPAND
                                                                                         "abs"
                                                                                         2
                                                                                         2)
                                                                                        (("1"
                                                                                          (PROPAX)
                                                                                          NIL
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL)
                                                                       ("2"
                                                                        (ASSERT)
                                                                        NIL
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL)
                                                           ("2" (ASSERT)
                                                            (("2"
                                                              (REPLACE -1 1)
                                                              (("2" (HIDE -1)
                                                                (("2"
                                                                  (CASE
                                                                      "nth(f(p + x) - f(p) - T*x, i) = (nth(m, f, i)(p + x) - nth(m, f, i)(p) - nth(T, i) * x)")
                                                                  (("1"
                                                                    (ASSERT)
                                                                    NIL NIL)
                                                                   ("2"
                                                                    (HIDE 2)
                                                                    (("2"
                                                                      (LEMMA
                                                                       "nth_subtract")
                                                                      (("2"
                                                                        (EXPAND
                                                                         "-" 1)
                                                                        (("2"
                                                                          (INST-CP
                                                                           -1
                                                                           "f(p + x)"
                                                                           "f(p)")
                                                                          (("2"
                                                                            (INST
                                                                             -1
                                                                             "sub(f(p + x), f(p))"
                                                                             "T*x")
                                                                            (("1"
                                                                              (SPLIT
                                                                               -1)
                                                                              (("1"
                                                                                (SPLIT
                                                                                 -2)
                                                                                (("1"
                                                                                  (INST
                                                                                   -1
                                                                                   "i")
                                                                                  (("1"
                                                                                    (INST
                                                                                     -2
                                                                                     "i")
                                                                                    (("1"
                                                                                      (EXPAND
                                                                                       "-"
                                                                                       -)
                                                                                      (("1"
                                                                                        (REPLACE
                                                                                         -2
                                                                                         1)
                                                                                        (("1"
                                                                                          (REPLACE
                                                                                           -1
                                                                                           1)
                                                                                          (("1"
                                                                                            (EXPAND
                                                                                             "nth"
                                                                                             1
                                                                                             4)
                                                                                            (("1"
                                                                                              (EXPAND
                                                                                               "nth"
                                                                                               1
                                                                                               3)
                                                                                              (("1"
                                                                                                (LEMMA
                                                                                                 "matv_nth")
                                                                                                (("1"
                                                                                                  (INST
                                                                                                   -1
                                                                                                   "T"
                                                                                                   "x"
                                                                                                   "i")
                                                                                                  (("1"
                                                                                                    (EXPAND
                                                                                                     "row"
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (REPLACE
                                                                                                       -1
                                                                                                       1)
                                                                                                      (("1"
                                                                                                        (PROPAX)
                                                                                                        NIL
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL)
                                                                                                   ("2"
                                                                                                    (HIDE
                                                                                                     2)
                                                                                                    (("2"
                                                                                                      (HIDE
                                                                                                       -)
                                                                                                      (("2"
                                                                                                        (TYPEPRED
                                                                                                         "i")
                                                                                                        (("2"
                                                                                                          (TYPEPRED
                                                                                                           "m")
                                                                                                          (("2"
                                                                                                            (TYPEPRED
                                                                                                             "T")
                                                                                                            (("2"
                                                                                                              (EXPAND
                                                                                                               "rows")
                                                                                                              (("2"
                                                                                                                (ASSERT)
                                                                                                                NIL
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL)
                                                                                     ("2"
                                                                                      (TYPEPRED
                                                                                       "f(p)")
                                                                                      (("2"
                                                                                        (TYPEPRED
                                                                                         "(sub(f(p + x), f(p)))")
                                                                                        (("2"
                                                                                          (HIDE
                                                                                           -1
                                                                                           -3)
                                                                                          (("2"
                                                                                            (TYPEPRED
                                                                                             "f(p+x)")
                                                                                            (("2"
                                                                                              (REPLACE
                                                                                               -2)
                                                                                              (("2"
                                                                                                (REPLACE
                                                                                                 -4)
                                                                                                (("2"
                                                                                                  (EXPAND
                                                                                                   "max"
                                                                                                   -3)
                                                                                                  (("2"
                                                                                                    (ASSERT)
                                                                                                    NIL
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL)
                                                                                 ("2"
                                                                                  (ASSERT)
                                                                                  NIL
                                                                                  NIL))
                                                                                NIL)
                                                                               ("2"
                                                                                (TYPEPRED
                                                                                 "T*x")
                                                                                (("2"
                                                                                  (TYPEPRED
                                                                                   "sub(f(p + x), f(p))"
                                                                                   "f(p+x)"
                                                                                   "f(p)")
                                                                                  (("2"
                                                                                    (ASSERT)
                                                                                    (("2"
                                                                                      (REPLACE
                                                                                       -4)
                                                                                      (("2"
                                                                                        (REPLACE
                                                                                         -6)
                                                                                        (("2"
                                                                                          (EXPAND
                                                                                           "max")
                                                                                          (("2"
                                                                                            (ASSERT)
                                                                                            (("2"
                                                                                              (EXPAND
                                                                                               "rows")
                                                                                              (("2"
                                                                                                (ASSERT)
                                                                                                NIL
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL)
                                                                             ("2"
                                                                              (TYPEPRED
                                                                               "T*x")
                                                                              (("2"
                                                                                (HIDE
                                                                                 -1)
                                                                                (("2"
                                                                                  (EXPAND
                                                                                   "rows"
                                                                                   -1)
                                                                                  (("2"
                                                                                    (ASSERT)
                                                                                    NIL
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL)
                                                                             ("3"
                                                                              (TYPEPRED
                                                                               "sub(f(p + x), f(p))"
                                                                               "f(p+x)"
                                                                               "f(p)")
                                                                              (("3"
                                                                                (REPLACE
                                                                                 -4)
                                                                                (("3"
                                                                                  (REPLACE
                                                                                   -6)
                                                                                  (("3"
                                                                                    (EXPAND
                                                                                     "max")
                                                                                    (("3"
                                                                                      (ASSERT)
                                                                                      NIL
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (TYPEPRED "x")
                                                    (("2"
                                                      (TYPEPRED "norm_inf(n)")
                                                      (("2" (EXPAND "norm?" -1)
                                                        (("2" (FLATTEN)
                                                          (("2" (INST -3 "x")
                                                            (("2" (ASSERT) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("2"
                                                (TYPEPRED "f(p + x) - f(p)"
                                                 "f(p+x)" "f(p)" "T*x")
                                                (("2" (REPLACE -4)
                                                  (("2" (REPLACE -6)
                                                    (("2" (EXPAND "max" -2)
                                                      (("2" (ASSERT)
                                                        (("2"
                                                          (HIDE -1 -3 -5 -7)
                                                          (("2" (TYPEPRED "i")
                                                            (("2" (ASSERT)
                                                              (("2"
                                                                (TYPEPRED
                                                                 "f(p + x) - f(p) - T * x")
                                                                (("2" (ASSERT)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (EXPAND "abs" 1 1)
                                      (("2" (LIFT-IF 1)
                                        (("2" (SPLIT 1)
                                          (("1" (FLATTEN)
                                            (("1"
                                              (MULT-BY -1 " norm_inf(n)(x)")
                                              (("1" (ASSERT) NIL NIL)
                                               ("2" (TYPEPRED "x")
                                                (("2" (TYPEPRED "norm_inf(n)")
                                                  (("2" (EXPAND "norm?" -1)
                                                    (("2" (FLATTEN)
                                                      (("2" (INST -3 "x")
                                                        (("2" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("2" (PROPAX) NIL NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (ASSERT)
                  (("2" (TYPEPRED "T") (("2" (INST -3 "i") NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (FLATTEN)
        (("2" (EXPAND "differentiable?" 1)
          (("2" (INST 1 "pre_der(m,D,p,f)")
            (("2" (EXPAND "convergence_zero?" 1)
              (("2" (SKEEP)
                (("2" (INST 1 "del_all_p(m,D,p,f)(epsilon)")
                  (("2" (SKEEP)
                    (("2" (LEMMA "del_nth")
                      (("2" (LEMMA "del_nth")
                        (("2" (LEMMA "del_nth_p")
                          (("2" (HIDE -2)
                            (("2" (INST?)
                              (("2" (EXPAND "NQ" 1)
                                (("2"
                                  (CASE
                                      "abs(norm_inf(m)(f(p + x) - f(p) - pre_der(m, D, p, f)*x)
                                                  / norm_inf(n)(x)) = norm_inf(m)(f(p + x) - f(p) - pre_der(m, D,p, f)*x)
                                                  / norm_inf(n)(x)")
                                  (("1" (ASSERT)
                                    (("1" (REPLACE -1 1)
                                      (("1" (LEMMA "norm_inf_nth")
                                        (("1"
                                          (INST -1
                                           "f(p + x) - f(p) - pre_der(m, D,p, f)*x")
                                          (("1" (SKEEP)
                                            (("1" (EXPAND "norm_inf" 1 1)
                                              (("1" (REPLACE -1 1)
                                                (("1" (LEMMA "nth_subtract")
                                                  (("1"
                                                    (INST -1 "f(p + x) - f(p)"
                                                     "pre_der(m, D,p, f)*x")
                                                    (("1" (ASSERT)
                                                      (("1" (SPLIT -1)
                                                        (("1" (INST -1 "i")
                                                          (("1" (REPLACE -1 1)
                                                            (("1"
                                                              (LEMMA
                                                               "matv_nth")
                                                              (("1"
                                                                (INST -1
                                                                 " pre_der(m, D,p, f)"
                                                                 "x" "i")
                                                                (("1"
                                                                  (REPLACE -1
                                                                           1)
                                                                  (("1"
                                                                    (LEMMA
                                                                     "pre_der_nth_p")
                                                                    (("1"
                                                                      (INST -1
                                                                       "m" "D"
                                                                       "p" "f"
                                                                       "i")
                                                                      (("1"
                                                                        (EXPAND
                                                                         "row"
                                                                         1 1)
                                                                        (("1"
                                                                          (ASSERT)
                                                                          (("1"
                                                                            (TYPEPRED
                                                                             "i")
                                                                            (("1"
                                                                              (LIFT-IF
                                                                               1)
                                                                              (("1"
                                                                                (SPLIT
                                                                                 1)
                                                                                (("1"
                                                                                  (FLATTEN)
                                                                                  (("1"
                                                                                    (HIDE
                                                                                     1)
                                                                                    (("1"
                                                                                      (TYPEPRED
                                                                                       "i"
                                                                                       "pre_der(m, D, p,f)")
                                                                                      (("1"
                                                                                        (TYPEPRED
                                                                                         "f(p + x) - f(p) - pre_der(m, D,p, f)*x"
                                                                                         "f(p + x) - f(p)"
                                                                                         "pre_der(m, D,p, f)*x"
                                                                                         "f(p+x)"
                                                                                         "f(p)")
                                                                                        (("1"
                                                                                          (ASSERT)
                                                                                          (("1"
                                                                                            (REPLACE
                                                                                             -8)
                                                                                            (("1"
                                                                                              (REPLACE
                                                                                               -10)
                                                                                              (("1"
                                                                                                (HIDE
                                                                                                 -7)
                                                                                                (("1"
                                                                                                  (HIDE
                                                                                                   -8)
                                                                                                  (("1"
                                                                                                    (HIDE
                                                                                                     -5)
                                                                                                    (("1"
                                                                                                      (EXPAND
                                                                                                       "max"
                                                                                                       -4)
                                                                                                      (("1"
                                                                                                        (REPLACE
                                                                                                         -4)
                                                                                                        (("1"
                                                                                                          (HIDE
                                                                                                           -1
                                                                                                           -3)
                                                                                                          (("1"
                                                                                                            (EXPAND
                                                                                                             "rows"
                                                                                                             -3)
                                                                                                            (("1"
                                                                                                              (ASSERT)
                                                                                                              NIL
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL)
                                                                                 ("2"
                                                                                  (FLATTEN)
                                                                                  (("2"
                                                                                    (REPLACE
                                                                                     -2
                                                                                     2)
                                                                                    (("2"
                                                                                      (INST
                                                                                       -7
                                                                                       "i")
                                                                                      (("2"
                                                                                        (ASSERT)
                                                                                        (("2"
                                                                                          (EXPAND
                                                                                           "NQ"
                                                                                           -7)
                                                                                          (("2"
                                                                                            (HIDE
                                                                                             -8)
                                                                                            (("2"
                                                                                              (CASE
                                                                                                  "(nth(m, f, i)(p + x) - nth(m, f, i)(p) -
                                                                                                   der_f(D,p)(nth(m, f, i)) * x) = nth(f(p + x) - f(p), i) - der_f(D,p)(nth(m, f, i)) * x")
                                                                                              (("1"
                                                                                                (REPLACE
                                                                                                 -1
                                                                                                 2
                                                                                                 RL)
                                                                                                (("1"
                                                                                                  (ASSERT)
                                                                                                  (("1"
                                                                                                    (HIDE
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (HIDE
                                                                                                       -9)
                                                                                                      (("1"
                                                                                                        (HIDE
                                                                                                         -7)
                                                                                                        (("1"
                                                                                                          (LEMMA
                                                                                                           "abs_div")
                                                                                                          (("1"
                                                                                                            (INST
                                                                                                             -1
                                                                                                             " norm_inf(n)(x)"
                                                                                                             "(nth(m, f, i)(p + x) - nth(m, f, i)(p) -
                                                                                          der_f(D,p)(nth(m, f, i)) * x)")
                                                                                                            (("1"
                                                                                                              (ASSERT)
                                                                                                              (("1"
                                                                                                                (REPLACE
                                                                                                                 -1
                                                                                                                 -8)
                                                                                                                (("1"
                                                                                                                  (EXPAND
                                                                                                                   "abs"
                                                                                                                   -8
                                                                                                                   2)
                                                                                                                  (("1"
                                                                                                                    (PROPAX)
                                                                                                                    NIL
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL)
                                                                                               ("2"
                                                                                                (ASSERT)
                                                                                                (("2"
                                                                                                  (HIDE
                                                                                                   2
                                                                                                   3)
                                                                                                  (("2"
                                                                                                    (HIDE
                                                                                                     -6
                                                                                                     -7)
                                                                                                    (("2"
                                                                                                      (EXPAND
                                                                                                       "nth"
                                                                                                       1
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (EXPAND
                                                                                                         "nth"
                                                                                                         1
                                                                                                         2)
                                                                                                        (("2"
                                                                                                          (ASSERT)
                                                                                                          (("2"
                                                                                                            (LEMMA
                                                                                                             "nth_subtract")
                                                                                                            (("2"
                                                                                                              (INST
                                                                                                               -1
                                                                                                               "f(p + x)"
                                                                                                               "(f(p))")
                                                                                                              (("2"
                                                                                                                (ASSERT)
                                                                                                                (("2"
                                                                                                                  (INST
                                                                                                                   -1
                                                                                                                   "i")
                                                                                                                  (("2"
                                                                                                                    (REPLACE
                                                                                                                     -1
                                                                                                                     1)
                                                                                                                    (("2"
                                                                                                                      (PROPAX)
                                                                                                                      NIL
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL)
                                                                       ("2"
                                                                        (HIDE
                                                                         -)
                                                                        (("2"
                                                                          (REVEAL
                                                                           -)
                                                                          (("2"
                                                                            (HIDE
                                                                             -11)
                                                                            (("2"
                                                                              (HIDE
                                                                               -)
                                                                              (("2"
                                                                                (TYPEPRED
                                                                                 "i")
                                                                                (("2"
                                                                                  (TYPEPRED
                                                                                   "f(p + x) - f(p) - pre_der(m, D,p, f)*x"
                                                                                   "f(p + x) - f(p)"
                                                                                   "pre_der(m, D, p ,f)*x"
                                                                                   "f(p+x)"
                                                                                   "f(p)")
                                                                                  (("2"
                                                                                    (ASSERT)
                                                                                    (("2"
                                                                                      (REPLACE
                                                                                       -8)
                                                                                      (("2"
                                                                                        (REPLACE
                                                                                         -10)
                                                                                        (("2"
                                                                                          (REPLACE
                                                                                           -6)
                                                                                          (("2"
                                                                                            (EXPAND
                                                                                             "max"
                                                                                             -4)
                                                                                            (("2"
                                                                                              (EXPAND
                                                                                               "rows")
                                                                                              (("2"
                                                                                                (ASSERT)
                                                                                                NIL
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL)
                                                                 ("2" (ASSERT)
                                                                  (("2"
                                                                    (TYPEPRED
                                                                     "i")
                                                                    (("2"
                                                                      (TYPEPRED
                                                                       "f(p + x) - f(p) - pre_der(m, D,p, f)*x"
                                                                       "f(p + x) - f(p)"
                                                                       "pre_der(m, D, p, f)*x"
                                                                       "f(p+x)"
                                                                       "f(p)")
                                                                      (("2"
                                                                        (HIDE
                                                                         -3 -5
                                                                         -7)
                                                                        (("2"
                                                                          (REPLACE
                                                                           -5)
                                                                          (("2"
                                                                            (REPLACE
                                                                             -4)
                                                                            (("2"
                                                                              (REPLACE
                                                                               -7)
                                                                              (("2"
                                                                                (HIDE
                                                                                 -1)
                                                                                (("2"
                                                                                  (HIDE
                                                                                   -5)
                                                                                  (("2"
                                                                                    (EXPAND
                                                                                     "rows")
                                                                                    (("2"
                                                                                      (EXPAND
                                                                                       "max")
                                                                                      (("2"
                                                                                        (REPLACE
                                                                                         -1)
                                                                                        (("2"
                                                                                          (ASSERT)
                                                                                          NIL
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL)
                                                           ("2"
                                                            (TYPEPRED
                                                             "f(p+x)-f(p)"
                                                             "f(p+x)" "f(p)")
                                                            (("2" (REPLACE -4)
                                                              (("2"
                                                                (REPLACE -6)
                                                                (("2"
                                                                  (EXPAND "max"
                                                                          -2)
                                                                  (("2"
                                                                    (ASSERT)
                                                                    (("2"
                                                                      (TYPEPRED
                                                                       "i")
                                                                      (("2"
                                                                        (ASSERT)
                                                                        (("2"
                                                                          (TYPEPRED
                                                                           "pre_der(m, D,p, f) * x")
                                                                          (("2"
                                                                            (HIDE
                                                                             -1)
                                                                            (("2"
                                                                              (EXPAND
                                                                               "rows"
                                                                               -1)
                                                                              (("2"
                                                                                (ASSERT)
                                                                                NIL
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL)
                                                         ("2"
                                                          (TYPEPRED
                                                           "f(p+x)-f(p)"
                                                           "f(p+x)" "f(p)")
                                                          (("2"
                                                            (TYPEPRED
                                                             "pre_der(m, D,p, f) * x")
                                                            (("2" (ASSERT)
                                                              (("2"
                                                                (EXPAND "rows")
                                                                (("2" (ASSERT)
                                                                  (("2"
                                                                    (REPLACE
                                                                     -6)
                                                                    (("2"
                                                                      (REPLACE
                                                                       -8)
                                                                      (("2"
                                                                        (EXPAND
                                                                         "max"
                                                                         -4)
                                                                        (("2"
                                                                          (ASSERT)
                                                                          NIL
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL)
                                                     ("2" (HIDE -1)
                                                      (("2"
                                                        (TYPEPRED
                                                         "pre_der(m, D,p, f)")
                                                        (("2" (ASSERT)
                                                          (("2"
                                                            (TYPEPRED
                                                             "f(p+x)-f(p)"
                                                             "f(p+x)" "f(p)")
                                                            (("2" (REPLACE -4)
                                                              (("2"
                                                                (REPLACE -6)
                                                                (("2"
                                                                  (EXPAND "max"
                                                                          -2)
                                                                  (("2"
                                                                    (ASSERT)
                                                                    (("2"
                                                                      (TYPEPRED
                                                                       "(pre_der(m, D,p, f) * x)")
                                                                      (("2"
                                                                        (ASSERT)
                                                                        (("2"
                                                                          (EXPAND
                                                                           "rows")
                                                                          (("2"
                                                                            (ASSERT)
                                                                            NIL
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL)
                                                     ("3"
                                                      (TYPEPRED "f(p+x)-f(p)"
                                                       "f(p+x)" "f(p)")
                                                      (("3" (REPLACE -4)
                                                        (("3" (REPLACE -6)
                                                          (("3" (EXPAND "max")
                                                            (("3" (ASSERT) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (EXPAND "abs" 1 1)
                                    (("2" (LIFT-IF 1)
                                      (("2" (SPLIT 1)
                                        (("1" (FLATTEN)
                                          (("1" (MULT-BY -1 " norm_inf(n)(x)")
                                            (("1" (ASSERT) NIL NIL)
                                             ("2" (TYPEPRED "x")
                                              (("2" (TYPEPRED "norm_inf(n)")
                                                (("2" (EXPAND "norm?" -1)
                                                  (("2" (FLATTEN)
                                                    (("2" (INST -3 "x")
                                                      (("2" (ASSERT) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (PROPAX) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|convergence_zero?| CONST-DECL "bool" |vector_sequences| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|zero_vec| DEF-DECL "VectorN(m)" |vector_arithmetic| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL) NIL
    (NQ CONST-DECL "bool" |differentiable_def| NIL)
    (|domain| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL)
    (NQ CONST-DECL "real" |differentiable_def| NIL)
    (NQ CONST-DECL "real" |convergence_vec2vec| NIL)
    (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) NIL
    NIL NIL NIL (|both_sides_times_pos_lt1| FORMULA-DECL NIL |real_props| NIL)
    (|norm_inf| CONST-DECL "[(cons?) -> nonneg_real]" |norms| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|div_cancel2| FORMULA-DECL NIL |real_props| NIL)
    (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|both_sides_times_pos_ge1_imp| FORMULA-DECL NIL |extra_real_props| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|vec2real_f| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL)
    (|nth| CONST-DECL "vec2real_f" |convergence_vec2vec| NIL)
    (* CONST-DECL "real" |matrices| |matrices|)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|dot| DEF-DECL "real" |matrices| |matrices|)
    (|abs_div| FORMULA-DECL NIL |real_props| NIL)
    (|nth_subtract| FORMULA-DECL NIL |vector_arithmetic| NIL)
    (|row| CONST-DECL "Vector" |matrices| |matrices|)
    (|matv_nth| FORMULA-DECL NIL |mat_vec_mult| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|sub| CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices|
     |matrices|)
    (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal"
     |real_types| NIL)
    (|norm_inf_nth_ineq| FORMULA-DECL NIL |norms| NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|norm?| CONST-DECL "bool" |norms| NIL)
    (|norm_inf| CONST-DECL "(norm?(m))" |norms| NIL)
    (|Vector| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (- CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices| |matrices|)
    (|vec2vec| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL)
    (+ CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices| |matrices|)
    (|FullMatrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (<= CONST-DECL "bool" |reals| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|columns| DEF-DECL "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}"
     |matrices| |matrices|)
    (|rows| CONST-DECL "nat" |matrices| |matrices|)
    (* CONST-DECL "VectorN(rows(A))" |mat_vec_mult| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|Matrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) NIL
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|n| FORMAL-CONST-DECL "posnat" |convergence_vec2vec| NIL)
    (|MatrixMN| TYPE-EQ-DECL NIL |matrices| |matrices|) NIL NIL
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|differentiable?| CONST-DECL "bool" |convergence_vec2vec| NIL)
    (|differentiable?| CONST-DECL "bool" |differentiable_def| NIL)
    (|del_all_p| DEF-DECL "posreal" |convergence_vec2vec| NIL)
    (|del_nth| FORMULA-DECL NIL |convergence_vec2vec| NIL)
    (|del_nth_p| FORMULA-DECL NIL |convergence_vec2vec| NIL) NIL
    (|der_f| CONST-DECL
     "{gg: VectorN(n) | convergence_zero?(NQ(D, p), NQ(f, gg, p), zero_vec(n))}"
     |differentiable_def| NIL)
    (|pre_der_nth_p| FORMULA-DECL NIL |convergence_vec2vec| NIL) NIL
    (|norm_inf_nth| FORMULA-DECL NIL |norms| NIL)
    (|pre_der| DEF-DECL "MatrixMN(m, n)" |convergence_vec2vec| NIL) NIL)
   SHOSTAK))
 (|der_f_TCC1| 0
  (|der_f_TCC1-1| |nil| 3795951537
   ("" (SKEEP*)
    (("" (LEMMA "derivable_nth_mat")
      (("" (INST?)
        (("" (INST -1 "m" "f") (("" (ASSERT) (("" (INST -1 "i") NIL NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|derivable_nth_mat| FORMULA-DECL NIL |convergence_vec2vec| NIL)
    (|vec2vec| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL)
    (|differentiableD?| CONST-DECL "bool" |convergence_vec2vec| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL) NIL
    (|domain| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|n| FORMAL-CONST-DECL "posnat" |convergence_vec2vec| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL))
   NIL
   (|der_f| SUBTYPE "convergence_vec2vec.f"
    "{ff: domain_vec2real_def[convergence_vec2vec.n].vec2vec(convergence_vec2vec.m) | FORALL (i: naturalnumbers.below(convergence_vec2vec.m)): differentiable_def[convergence_vec2vec.n].differentiableD?(convergence_vec2vec.D)(convergence_vec2vec.nth(convergence_vec2vec.m, ff, i))}")))
 (|der_f_TCC2| 0
  (|der_f_TCC2-1| |nil| 3797350406
   ("" (SKEEP*)
    (("" (EXPAND "convergence_zero?" 1)
      (("" (SKEEP)
        (("" (INST 1 "del_all(m,D,f)(p,epsilon)")
          (("1" (SKEEP)
            (("1" (LEMMA "del_nth")
              (("1" (INST?)
                (("1" (EXPAND "NQ" 1)
                  (("1"
                    (CASE
                        "abs(norm_inf(m)(f(p + x) - f(p) - pre_der(m, D, f)(p)*x)
                                          / norm_inf(n)(x)) = norm_inf(m)(f(p + x) - f(p) - pre_der(m, D, f)(p)*x)
                                          / norm_inf(n)(x)")
                    (("1" (ASSERT)
                      (("1" (REPLACE -1 1)
                        (("1" (LEMMA "norm_inf_nth")
                          (("1"
                            (INST -1 "f(p + x) - f(p) - pre_der(m, D, f)(p)*x")
                            (("1" (SKEEP)
                              (("1" (EXPAND "norm_inf" 1 1)
                                (("1" (REPLACE -1 1)
                                  (("1" (LEMMA "nth_subtract")
                                    (("1"
                                      (INST -1 "f(p + x) - f(p)"
                                       "pre_der(m, D, f)(p)*x")
                                      (("1" (ASSERT)
                                        (("1" (SPLIT -1)
                                          (("1" (INST -1 "i")
                                            (("1" (REPLACE -1 1)
                                              (("1" (LEMMA "matv_nth")
                                                (("1"
                                                  (INST -1
                                                   " pre_der(m, D, f)(p)" "x"
                                                   "i")
                                                  (("1" (REPLACE -1 1)
                                                    (("1" (LEMMA "pre_der_nth")
                                                      (("1"
                                                        (INST -1 "m" "D" "f"
                                                         "i")
                                                        (("1"
                                                          (EXPAND "row" 1 1)
                                                          (("1" (ASSERT)
                                                            (("1"
                                                              (TYPEPRED "i")
                                                              (("1" (LIFT-IF 1)
                                                                (("1" (SPLIT 1)
                                                                  (("1"
                                                                    (FLATTEN)
                                                                    (("1"
                                                                      (HIDE 1)
                                                                      (("1"
                                                                        (TYPEPRED
                                                                         "i"
                                                                         "pre_der(m, D, f)(p)")
                                                                        (("1"
                                                                          (TYPEPRED
                                                                           "f(p + x) - f(p) - pre_der(m, D, f)(p)*x"
                                                                           "f(p + x) - f(p)"
                                                                           "pre_der(m, D, f)(p)*x"
                                                                           "f(p+x)"
                                                                           "f(p)")
                                                                          (("1"
                                                                            (ASSERT)
                                                                            (("1"
                                                                              (REPLACE
                                                                               -8)
                                                                              (("1"
                                                                                (REPLACE
                                                                                 -10)
                                                                                (("1"
                                                                                  (HIDE
                                                                                   -7)
                                                                                  (("1"
                                                                                    (HIDE
                                                                                     -8)
                                                                                    (("1"
                                                                                      (HIDE
                                                                                       -5)
                                                                                      (("1"
                                                                                        (EXPAND
                                                                                         "max"
                                                                                         -4)
                                                                                        (("1"
                                                                                          (REPLACE
                                                                                           -4)
                                                                                          (("1"
                                                                                            (EXPAND
                                                                                             "rows")
                                                                                            (("1"
                                                                                              (ASSERT)
                                                                                              NIL
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL)
                                                                   ("2"
                                                                    (FLATTEN)
                                                                    (("2"
                                                                      (DECOMPOSE-EQUALITY
                                                                       -2 "p")
                                                                      (("1"
                                                                        (INST
                                                                         -1
                                                                         "p")
                                                                        (("1"
                                                                          (REPLACE
                                                                           -1
                                                                           2)
                                                                          (("1"
                                                                            (INST
                                                                             -7
                                                                             "i")
                                                                            (("1"
                                                                              (ASSERT)
                                                                              (("1"
                                                                                (EXPAND
                                                                                 "NQ"
                                                                                 -7)
                                                                                (("1"
                                                                                  (HIDE
                                                                                   -8)
                                                                                  (("1"
                                                                                    (CASE
                                                                                        "(nth(m, f, i)(p + x) - nth(m, f, i)(p) -
                                                                                           der_f(D)(nth(m, f, i))(p) * x) = nth(f(p + x) - f(p), i) - der_f(D)(nth(m, f, i))(p) * x")
                                                                                    (("1"
                                                                                      (REPLACE
                                                                                       -1
                                                                                       2
                                                                                       RL)
                                                                                      (("1"
                                                                                        (ASSERT)
                                                                                        (("1"
                                                                                          (HIDE
                                                                                           1)
                                                                                          (("1"
                                                                                            (HIDE
                                                                                             -7)
                                                                                            (("1"
                                                                                              (LEMMA
                                                                                               "abs_div")
                                                                                              (("1"
                                                                                                (INST
                                                                                                 -1
                                                                                                 " norm_inf(n)(x)"
                                                                                                 "(nth(m, f, i)(p + x) - nth(m, f, i)(p) -
                                                                                  der_f(D)(nth(m, f, i))(p) * x)")
                                                                                                (("1"
                                                                                                  (ASSERT)
                                                                                                  (("1"
                                                                                                    (REPLACE
                                                                                                     -1
                                                                                                     -8)
                                                                                                    (("1"
                                                                                                      (EXPAND
                                                                                                       "abs"
                                                                                                       -8
                                                                                                       2)
                                                                                                      (("1"
                                                                                                        (PROPAX)
                                                                                                        NIL
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL)
                                                                                     ("2"
                                                                                      (ASSERT)
                                                                                      (("2"
                                                                                        (HIDE
                                                                                         2
                                                                                         3)
                                                                                        (("2"
                                                                                          (HIDE
                                                                                           -6
                                                                                           -7)
                                                                                          (("2"
                                                                                            (EXPAND
                                                                                             "nth"
                                                                                             1
                                                                                             1)
                                                                                            (("2"
                                                                                              (EXPAND
                                                                                               "nth"
                                                                                               1
                                                                                               2)
                                                                                              (("2"
                                                                                                (ASSERT)
                                                                                                (("2"
                                                                                                  (LEMMA
                                                                                                   "nth_subtract")
                                                                                                  (("2"
                                                                                                    (INST
                                                                                                     -1
                                                                                                     "f(p + x)"
                                                                                                     "(f(p))")
                                                                                                    (("2"
                                                                                                      (ASSERT)
                                                                                                      (("2"
                                                                                                        (INST
                                                                                                         -1
                                                                                                         "i")
                                                                                                        (("2"
                                                                                                          (REPLACE
                                                                                                           -1
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (PROPAX)
                                                                                                            NIL
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL)
                                                                       ("2"
                                                                        (HIDE
                                                                         -)
                                                                        (("2"
                                                                          (REVEAL
                                                                           -)
                                                                          (("2"
                                                                            (HIDE
                                                                             -11)
                                                                            (("2"
                                                                              (EXPAND
                                                                               "differentiableD?"
                                                                               1)
                                                                              (("2"
                                                                                (SKEEP)
                                                                                (("2"
                                                                                  (HIDE
                                                                                   -17)
                                                                                  (("2"
                                                                                    (HIDE
                                                                                     -16
                                                                                     -15
                                                                                     -14
                                                                                     -13
                                                                                     -12
                                                                                     -11
                                                                                     -10
                                                                                     -9
                                                                                     -8
                                                                                     -7
                                                                                     -6
                                                                                     -5
                                                                                     -4
                                                                                     -3)
                                                                                    (("2"
                                                                                      (TYPEPRED
                                                                                       "f")
                                                                                      (("2"
                                                                                        (LEMMA
                                                                                         "derivable_nth_mat")
                                                                                        (("2"
                                                                                          (INST
                                                                                           -1
                                                                                           "m"
                                                                                           "D"
                                                                                           "f")
                                                                                          (("2"
                                                                                            (ASSERT)
                                                                                            (("2"
                                                                                              (INST
                                                                                               -1
                                                                                               "i")
                                                                                              (("2"
                                                                                                (EXPAND
                                                                                                 "differentiableD?"
                                                                                                 -1)
                                                                                                (("2"
                                                                                                  (INST
                                                                                                   -1
                                                                                                   "p!2")
                                                                                                  NIL
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL)
                                                         ("2" (ASSERT)
                                                          (("2" (TYPEPRED "i")
                                                            (("2"
                                                              (TYPEPRED
                                                               "f(p + x) - f(p) - pre_der(m, D, f)(p)*x"
                                                               "f(p + x) - f(p)"
                                                               "pre_der(m, D, f)(p)*x"
                                                               "f(p+x)" "f(p)")
                                                              (("2" (ASSERT)
                                                                (("2"
                                                                  (REPLACE -8)
                                                                  (("2"
                                                                    (REPLACE
                                                                     -10)
                                                                    (("2"
                                                                      (REPLACE
                                                                       -6)
                                                                      (("2"
                                                                        (EXPAND
                                                                         "max"
                                                                         -4)
                                                                        (("2"
                                                                          (REPLACE
                                                                           -4)
                                                                          (("2"
                                                                            (EXPAND
                                                                             "max"
                                                                             -2)
                                                                            (("2"
                                                                              (REPLACE
                                                                               -2)
                                                                              (("2"
                                                                                (EXPAND
                                                                                 "rows")
                                                                                (("2"
                                                                                  (PROPAX)
                                                                                  NIL
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (ASSERT)
                                                    (("2" (TYPEPRED "i")
                                                      (("2"
                                                        (TYPEPRED
                                                         "f(p + x) - f(p) - pre_der(m, D, f)(p)*x"
                                                         "f(p + x) - f(p)"
                                                         "pre_der(m, D, f)(p)*x"
                                                         "f(p+x)" "f(p)")
                                                        (("2" (HIDE -3 -5 -7)
                                                          (("2" (REPLACE -5)
                                                            (("2" (REPLACE -4)
                                                              (("2"
                                                                (REPLACE -7)
                                                                (("2" (HIDE -1)
                                                                  (("2"
                                                                    (HIDE -5)
                                                                    (("2"
                                                                      (EXPAND
                                                                       "max"
                                                                       -2)
                                                                      (("2"
                                                                        (REPLACE
                                                                         -2)
                                                                        (("2"
                                                                          (EXPAND
                                                                           "max"
                                                                           -1)
                                                                          (("2"
                                                                            (REPLACE
                                                                             -1)
                                                                            (("2"
                                                                              (EXPAND
                                                                               "rows")
                                                                              (("2"
                                                                                (ASSERT)
                                                                                NIL
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2"
                                              (TYPEPRED "f(p+x)-f(p)" "f(p+x)"
                                               "f(p)")
                                              (("2" (REPLACE -4)
                                                (("2" (REPLACE -6)
                                                  (("2" (EXPAND "max" -2)
                                                    (("2" (ASSERT)
                                                      (("2" (TYPEPRED "i")
                                                        (("2" (ASSERT)
                                                          (("2"
                                                            (TYPEPRED
                                                             "f(p + x) - f(p)"
                                                             "f(p+x)" "f(p)"
                                                             "pre_der(m, D, f)(p)*x")
                                                            (("2" (REPLACE -4)
                                                              (("2"
                                                                (REPLACE -6)
                                                                (("2"
                                                                  (EXPAND "max"
                                                                          -2)
                                                                  (("2"
                                                                    (ASSERT)
                                                                    (("2"
                                                                      (HIDE -1
                                                                       -3 -5 -7
                                                                       -10)
                                                                      (("2"
                                                                        (TYPEPRED
                                                                         "f(p + x) - f(p) - pre_der(m, D, f)(p) * x")
                                                                        (("2"
                                                                          (HIDE
                                                                           -1)
                                                                          (("2"
                                                                            (REPLACE
                                                                             -2)
                                                                            (("2"
                                                                              (TYPEPRED
                                                                               "(pre_der(m, D, f)(p) * x)")
                                                                              (("2"
                                                                                (HIDE
                                                                                 -1)
                                                                                (("2"
                                                                                  (EXPAND
                                                                                   "rows"
                                                                                   -1)
                                                                                  (("2"
                                                                                    (REPLACE
                                                                                     -1)
                                                                                    (("2"
                                                                                      (TYPEPRED
                                                                                       "pre_der(m, D, f)(p)")
                                                                                      (("2"
                                                                                        (REPLACE
                                                                                         -2)
                                                                                        (("2"
                                                                                          (EXPAND
                                                                                           "max")
                                                                                          (("2"
                                                                                            (ASSERT)
                                                                                            NIL
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("2"
                                            (TYPEPRED "f(p + x) - f(p)"
                                             "f(p+x)" "f(p)"
                                             "pre_der(m, D, f)(p)*x")
                                            (("2" (ASSERT)
                                              (("2" (REPLACE -4)
                                                (("2" (REPLACE -6)
                                                  (("2" (EXPAND "max" -2)
                                                    (("2" (ASSERT)
                                                      (("2" (EXPAND "rows")
                                                        (("2" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2"
                                        (TYPEPRED "pre_der(m, D, f)(p) * x")
                                        (("2" (ASSERT)
                                          (("2" (HIDE -1)
                                            (("2" (EXPAND "rows")
                                              (("2" (ASSERT) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("3"
                                        (TYPEPRED "f(p + x) - f(p)" "f(p+x)"
                                         "f(p)")
                                        (("3" (REPLACE -4)
                                          (("3" (REPLACE -6)
                                            (("3" (EXPAND "max" -2)
                                              (("3" (ASSERT) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (ASSERT)
                      (("2" (EXPAND "abs" 1 1)
                        (("2" (LIFT-IF 1)
                          (("2" (SPLIT 1)
                            (("1" (FLATTEN)
                              (("1" (MULT-BY -1 " norm_inf(n)(x)")
                                (("1" (ASSERT) NIL NIL)
                                 ("2" (TYPEPRED "x")
                                  (("2" (TYPEPRED "norm_inf(n)")
                                    (("2" (EXPAND "norm?" -1)
                                      (("2" (FLATTEN)
                                        (("2" (INST -3 "x")
                                          (("2" (ASSERT) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (PROPAX) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (SKEEP)
            (("2" (EXPAND "differentiableD?" 1)
              (("2" (TYPEPRED "f")
                (("2" (LEMMA "derivable_nth_mat")
                  (("2" (INST -1 "m" "D" "f")
                    (("2" (ASSERT)
                      (("2" (SKEEP)
                        (("2" (INST -1 "i")
                          (("2" (EXPAND "differentiableD?" -1)
                            (("2" (INST -1 "p!1") NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|convergence_zero?| CONST-DECL "bool" |vector_sequences| NIL) NIL
    (|differentiableD?| CONST-DECL "bool" |convergence_vec2vec| NIL)
    (|nth| CONST-DECL "vec2real_f" |convergence_vec2vec| NIL)
    (|vec2vec| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL) NIL
    (|differentiableD?| CONST-DECL "bool" |differentiable_def| NIL)
    (|vec2real_f| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL) NIL
    (|domain| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|n| FORMAL-CONST-DECL "posnat" |convergence_vec2vec| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) NIL
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|del_all| DEF-DECL "posreal" |convergence_vec2vec| NIL)
    (|del_nth| FORMULA-DECL NIL |convergence_vec2vec| NIL)
    (NQ CONST-DECL "real" |convergence_vec2vec| NIL)
    (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal"
     |real_types| NIL)
    (|div_cancel2| FORMULA-DECL NIL |real_props| NIL)
    (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|both_sides_times_pos_lt1| FORMULA-DECL NIL |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|norm_inf_nth| FORMULA-DECL NIL |norms| NIL) NIL NIL
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|pre_der_nth| FORMULA-DECL NIL |convergence_vec2vec| NIL)
    (|row| CONST-DECL "Vector" |matrices| |matrices|)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|der_f| CONST-DECL "{gg: [(D) -> VectorN(n)] |
   FORALL (p: (D)):
     convergence_zero?(NQ(D, p), NQ(f, gg(p), p), zero_vec(n))}"
     |differentiable_def| NIL)
    (NQ CONST-DECL "real" |differentiable_def| NIL)
    (|abs_div| FORMULA-DECL NIL |real_props| NIL)
    (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (* CONST-DECL "real" |matrices| |matrices|)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|derivable_nth_mat| FORMULA-DECL NIL |convergence_vec2vec| NIL)
    (|matv_nth| FORMULA-DECL NIL |mat_vec_mult| NIL) NIL
    (|nth_subtract| FORMULA-DECL NIL |vector_arithmetic| NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|norm?| CONST-DECL "bool" |norms| NIL)
    (|norm_inf| CONST-DECL "(norm?(m))" |norms| NIL)
    (|Vector| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (- CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices| |matrices|)
    (+ CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices| |matrices|)
    (|FullMatrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|Matrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (<= CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|columns| DEF-DECL "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}"
     |matrices| |matrices|)
    (|rows| CONST-DECL "nat" |matrices| |matrices|)
    (* CONST-DECL "VectorN(rows(A))" |mat_vec_mult| NIL)
    (|MatrixMN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|pre_der| DEF-DECL "[(D) -> MatrixMN(m, n)]" |convergence_vec2vec| NIL)
    (NQ CONST-DECL "bool" |differentiable_def| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|zero_vec| DEF-DECL "VectorN(m)" |vector_arithmetic| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL) NIL)
   NIL
   (|der_f| SUBTYPE
    "convergence_vec2vec.pre_der(convergence_vec2vec.m, convergence_vec2vec.D, convergence_vec2vec.f)"
    "{TT: [(convergence_vec2vec.D) -> matrices.MatrixMN(convergence_vec2vec.m, convergence_vec2vec.n)] | FORALL (p: (convergence_vec2vec.D)): vector_sequences[convergence_vec2vec.n].convergence_zero?(differentiable_def[convergence_vec2vec.n].NQ(convergence_vec2vec.D, p), convergence_vec2vec.NQ(convergence_vec2vec.m, convergence_vec2vec.f, p, TT(p)), vector_arithmetic.zero_vec(convergence_vec2vec.n))}")))
 (|der_f_TCC3| 0
  (|der_f_TCC3-1| |nil| 3797524662
   ("" (SKEEP*)
    (("" (LEMMA "derivable_nth_mat_point")
      (("" (INST?)
        (("" (INST -1 "D" "f" "p")
          (("" (ASSERT) (("" (INST -1 "i") NIL NIL)) NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|derivable_nth_mat_point| FORMULA-DECL NIL |convergence_vec2vec| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|n| FORMAL-CONST-DECL "posnat" |convergence_vec2vec| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|domain| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL) NIL
    (|vec2vec| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL)
    (|differentiable?| CONST-DECL "bool" |convergence_vec2vec| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL) NIL)
   NIL
   (|der_f| SUBTYPE "convergence_vec2vec.f"
    "{ff: domain_vec2real_def[convergence_vec2vec.n].vec2vec(convergence_vec2vec.m) | FORALL (i: naturalnumbers.below(convergence_vec2vec.m)): differentiable_def[convergence_vec2vec.n].differentiable?(convergence_vec2vec.D, convergence_vec2vec.nth(convergence_vec2vec.m, ff, i), convergence_vec2vec.p)}")))
 (|der_f_TCC4| 0
  (|der_f_TCC4-1| |nil| 3797524662
   ("" (SKEEP*)
    (("" (EXPAND "convergence_zero?" 1)
      (("" (SKEEP)
        (("" (INST 1 "del_all_p(m,D,p,f)(epsilon)")
          (("1" (SKEEP)
            (("1" (LEMMA "del_nth_p")
              (("1" (INST?)
                (("1" (EXPAND "NQ" 1)
                  (("1"
                    (CASE
                        "abs(norm_inf(m)(f(p + x) - f(p) - pre_der(m, D,p, f)*x)
                                                   / norm_inf(n)(x)) = norm_inf(m)(f(p + x) - f(p) - pre_der(m, D,p, f)*x)
                                                   / norm_inf(n)(x)")
                    (("1" (ASSERT)
                      (("1" (REPLACE -1 1)
                        (("1" (LEMMA "norm_inf_nth")
                          (("1"
                            (INST -1 "f(p + x) - f(p) - pre_der(m, D,p, f)*x")
                            (("1" (SKEEP)
                              (("1" (EXPAND "norm_inf" 1 1)
                                (("1" (REPLACE -1 1)
                                  (("1" (LEMMA "nth_subtract")
                                    (("1"
                                      (INST -1 "f(p + x) - f(p)"
                                       "pre_der(m, D,p, f)*x")
                                      (("1" (ASSERT)
                                        (("1" (SPLIT -1)
                                          (("1" (INST -1 "i")
                                            (("1" (REPLACE -1 1)
                                              (("1" (LEMMA "matv_nth")
                                                (("1"
                                                  (INST -1
                                                   " pre_der(m, D,p, f)" "x"
                                                   "i")
                                                  (("1" (REPLACE -1 1)
                                                    (("1"
                                                      (LEMMA "pre_der_nth_p")
                                                      (("1"
                                                        (INST -1 "m" "D" "p"
                                                         "f" "i")
                                                        (("1"
                                                          (EXPAND "row" 1 1)
                                                          (("1" (ASSERT)
                                                            (("1"
                                                              (TYPEPRED "i")
                                                              (("1" (LIFT-IF 1)
                                                                (("1" (SPLIT 1)
                                                                  (("1"
                                                                    (FLATTEN)
                                                                    (("1"
                                                                      (HIDE 1)
                                                                      (("1"
                                                                        (TYPEPRED
                                                                         "i"
                                                                         "pre_der(m, D,p, f)")
                                                                        (("1"
                                                                          (TYPEPRED
                                                                           "f(p + x) - f(p) - pre_der(m, D,p, f)*x"
                                                                           "f(p + x) - f(p)"
                                                                           "pre_der(m, D,p, f)*x"
                                                                           "f(p+x)"
                                                                           "f(p)")
                                                                          (("1"
                                                                            (ASSERT)
                                                                            (("1"
                                                                              (REPLACE
                                                                               -8)
                                                                              (("1"
                                                                                (REPLACE
                                                                                 -10)
                                                                                (("1"
                                                                                  (HIDE
                                                                                   -7)
                                                                                  (("1"
                                                                                    (HIDE
                                                                                     -8)
                                                                                    (("1"
                                                                                      (HIDE
                                                                                       -5)
                                                                                      (("1"
                                                                                        (EXPAND
                                                                                         "max"
                                                                                         -4)
                                                                                        (("1"
                                                                                          (REPLACE
                                                                                           -4)
                                                                                          (("1"
                                                                                            (EXPAND
                                                                                             "rows")
                                                                                            (("1"
                                                                                              (ASSERT)
                                                                                              NIL
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL)
                                                                   ("2"
                                                                    (FLATTEN)
                                                                    (("2"
                                                                      (DECOMPOSE-EQUALITY
                                                                       -2 "p")
                                                                      (("2"
                                                                        (INST
                                                                         -7
                                                                         "i")
                                                                        (("1"
                                                                          (ASSERT)
                                                                          (("1"
                                                                            (EXPAND
                                                                             "NQ"
                                                                             -7)
                                                                            (("1"
                                                                              (HIDE
                                                                               -8)
                                                                              (("1"
                                                                                (CASE
                                                                                    "(nth(m, f, i)(p + x) - nth(m, f, i)(p) -
                                                                                                                    der_f(D,p)(nth(m, f, i)) * x) = nth(f(p + x) - f(p), i) - der_f(D,p)(nth(m, f, i)) * x")
                                                                                (("1"
                                                                                  (ASSERT)
                                                                                  (("1"
                                                                                    (HIDE
                                                                                     1)
                                                                                    (("1"
                                                                                      (HIDE
                                                                                       -7)
                                                                                      (("1"
                                                                                        (LEMMA
                                                                                         "abs_div")
                                                                                        (("1"
                                                                                          (INST
                                                                                           -1
                                                                                           " norm_inf(n)(x)"
                                                                                           "(nth(m, f, i)(p + x) - nth(m, f, i)(p) -
                                                                                                        der_f(D,p)(nth(m, f, i)) * x)")
                                                                                          (("1"
                                                                                            (ASSERT)
                                                                                            (("1"
                                                                                              (REPLACE
                                                                                               -1
                                                                                               -8)
                                                                                              (("1"
                                                                                                (EXPAND
                                                                                                 "abs"
                                                                                                 -8
                                                                                                 2)
                                                                                                (("1"
                                                                                                  (ASSERT)
                                                                                                  NIL
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL)
                                                                                 ("2"
                                                                                  (HIDE
                                                                                   2
                                                                                   3)
                                                                                  (("2"
                                                                                    (HIDE
                                                                                     -6
                                                                                     -7)
                                                                                    (("2"
                                                                                      (EXPAND
                                                                                       "nth"
                                                                                       1
                                                                                       1)
                                                                                      (("2"
                                                                                        (EXPAND
                                                                                         "nth"
                                                                                         1
                                                                                         2)
                                                                                        (("2"
                                                                                          (ASSERT)
                                                                                          (("2"
                                                                                            (LEMMA
                                                                                             "nth_subtract")
                                                                                            (("2"
                                                                                              (INST
                                                                                               -1
                                                                                               "f(p + x)"
                                                                                               "(f(p))")
                                                                                              (("2"
                                                                                                (ASSERT)
                                                                                                (("2"
                                                                                                  (INST
                                                                                                   -1
                                                                                                   "i")
                                                                                                  (("2"
                                                                                                    (REPLACE
                                                                                                     -1
                                                                                                     1)
                                                                                                    (("2"
                                                                                                      (PROPAX)
                                                                                                      NIL
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL)
                                                                         ("2"
                                                                          (HIDE
                                                                           -)
                                                                          (("2"
                                                                            (REVEAL
                                                                             -)
                                                                            (("2"
                                                                              (HIDE
                                                                               -11)
                                                                              (("2"
                                                                                (HIDE
                                                                                 -)
                                                                                (("2"
                                                                                  (ASSERT)
                                                                                  NIL
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL)
                                                         ("2" (TYPEPRED "i")
                                                          (("2"
                                                            (TYPEPRED
                                                             "f(p + x) - f(p) - pre_der(m, D,p, f)*x"
                                                             "f(p + x) - f(p)"
                                                             "pre_der(m, D,p, f)*x"
                                                             "f(p+x)" "f(p)")
                                                            (("2" (ASSERT)
                                                              (("2"
                                                                (REPLACE -8)
                                                                (("2"
                                                                  (REPLACE -10)
                                                                  (("2"
                                                                    (REPLACE
                                                                     -6)
                                                                    (("2"
                                                                      (EXPAND
                                                                       "max"
                                                                       -4)
                                                                      (("2"
                                                                        (REPLACE
                                                                         -4)
                                                                        (("2"
                                                                          (EXPAND
                                                                           "max"
                                                                           -2)
                                                                          (("2"
                                                                            (REPLACE
                                                                             -2)
                                                                            (("2"
                                                                              (EXPAND
                                                                               "rows")
                                                                              (("2"
                                                                                (PROPAX)
                                                                                NIL
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (ASSERT)
                                                    (("2" (TYPEPRED "i")
                                                      (("2"
                                                        (TYPEPRED
                                                         "f(p + x) - f(p) - pre_der(m, D,p, f)*x"
                                                         "f(p + x) - f(p)"
                                                         "pre_der(m, D,p, f)*x"
                                                         "f(p+x)" "f(p)")
                                                        (("2" (HIDE -3 -5 -7)
                                                          (("2" (REPLACE -5)
                                                            (("2" (REPLACE -4)
                                                              (("2"
                                                                (REPLACE -7)
                                                                (("2" (HIDE -1)
                                                                  (("2"
                                                                    (HIDE -5)
                                                                    (("2"
                                                                      (EXPAND
                                                                       "max"
                                                                       -2)
                                                                      (("2"
                                                                        (REPLACE
                                                                         -2)
                                                                        (("2"
                                                                          (EXPAND
                                                                           "max"
                                                                           -1)
                                                                          (("2"
                                                                            (REPLACE
                                                                             -1)
                                                                            (("2"
                                                                              (EXPAND
                                                                               "rows")
                                                                              (("2"
                                                                                (ASSERT)
                                                                                NIL
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2"
                                              (TYPEPRED "f(p+x)-f(p)" "f(p+x)"
                                               "f(p)")
                                              (("2" (REPLACE -4)
                                                (("2" (REPLACE -6)
                                                  (("2" (EXPAND "max" -2)
                                                    (("2" (ASSERT)
                                                      (("2" (TYPEPRED "i")
                                                        (("2" (ASSERT)
                                                          (("2"
                                                            (TYPEPRED
                                                             "f(p + x) - f(p)"
                                                             "f(p+x)" "f(p)"
                                                             "pre_der(m, D,p, f)*x")
                                                            (("2" (REPLACE -4)
                                                              (("2"
                                                                (REPLACE -6)
                                                                (("2"
                                                                  (EXPAND "max"
                                                                          -2)
                                                                  (("2"
                                                                    (ASSERT)
                                                                    (("2"
                                                                      (HIDE -1
                                                                       -3 -5 -7
                                                                       -10)
                                                                      (("2"
                                                                        (TYPEPRED
                                                                         "f(p + x) - f(p) - pre_der(m, D,p, f) * x")
                                                                        (("2"
                                                                          (HIDE
                                                                           -1)
                                                                          (("2"
                                                                            (REPLACE
                                                                             -2)
                                                                            (("2"
                                                                              (TYPEPRED
                                                                               "(pre_der(m, D,p, f) * x)")
                                                                              (("2"
                                                                                (HIDE
                                                                                 -1)
                                                                                (("2"
                                                                                  (EXPAND
                                                                                   "rows"
                                                                                   -1)
                                                                                  (("2"
                                                                                    (REPLACE
                                                                                     -1)
                                                                                    (("2"
                                                                                      (TYPEPRED
                                                                                       "pre_der(m, D,p, f)")
                                                                                      (("2"
                                                                                        (REPLACE
                                                                                         -2)
                                                                                        (("2"
                                                                                          (EXPAND
                                                                                           "max")
                                                                                          (("2"
                                                                                            (ASSERT)
                                                                                            NIL
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("2"
                                            (TYPEPRED "f(p + x) - f(p)"
                                             "f(p+x)" "f(p)"
                                             "pre_der(m, D,p, f)*x")
                                            (("2" (ASSERT)
                                              (("2" (REPLACE -4)
                                                (("2" (REPLACE -6)
                                                  (("2" (EXPAND "max" -2)
                                                    (("2" (ASSERT)
                                                      (("2" (EXPAND "rows")
                                                        (("2" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (TYPEPRED "pre_der(m, D,p, f) * x")
                                        (("2" (ASSERT)
                                          (("2" (HIDE -1)
                                            (("2" (EXPAND "rows")
                                              (("2" (ASSERT) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("3"
                                        (TYPEPRED "f(p + x) - f(p)" "f(p+x)"
                                         "f(p)")
                                        (("3" (REPLACE -4)
                                          (("3" (REPLACE -6)
                                            (("3" (EXPAND "max" -2)
                                              (("3" (ASSERT) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (ASSERT)
                      (("2" (EXPAND "abs" 1 1)
                        (("2" (LIFT-IF 1)
                          (("2" (SPLIT 1)
                            (("1" (FLATTEN)
                              (("1" (MULT-BY -1 " norm_inf(n)(x)")
                                (("1" (ASSERT) NIL NIL)
                                 ("2" (TYPEPRED "x")
                                  (("2" (TYPEPRED "norm_inf(n)")
                                    (("2" (EXPAND "norm?" -1)
                                      (("2" (FLATTEN)
                                        (("2" (INST -3 "x")
                                          (("2" (ASSERT) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (PROPAX) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (SKEEP)
            (("2" (EXPAND "differentiable?" 1)
              (("2" (TYPEPRED "f")
                (("2" (LEMMA "derivable_nth_mat_point")
                  (("2" (INST -1 "m" "D" "f" "p")
                    (("2" (ASSERT)
                      (("2" (INST -1 "i")
                        (("2" (EXPAND "differentiable?" -1)
                          (("2" (PROPAX) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|convergence_zero?| CONST-DECL "bool" |vector_sequences| NIL) NIL NIL
    (|differentiable?| CONST-DECL "bool" |convergence_vec2vec| NIL)
    (|nth| CONST-DECL "vec2real_f" |convergence_vec2vec| NIL)
    (|vec2vec| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL) NIL
    (|differentiable?| CONST-DECL "bool" |differentiable_def| NIL)
    (|vec2real_f| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL) NIL
    (|domain| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|n| FORMAL-CONST-DECL "posnat" |convergence_vec2vec| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) NIL
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|del_all_p| DEF-DECL "posreal" |convergence_vec2vec| NIL)
    (|del_nth_p| FORMULA-DECL NIL |convergence_vec2vec| NIL)
    (NQ CONST-DECL "real" |convergence_vec2vec| NIL)
    (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal"
     |real_types| NIL)
    (|div_cancel2| FORMULA-DECL NIL |real_props| NIL)
    (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|both_sides_times_pos_lt1| FORMULA-DECL NIL |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|norm_inf_nth| FORMULA-DECL NIL |norms| NIL) NIL
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|pre_der_nth_p| FORMULA-DECL NIL |convergence_vec2vec| NIL)
    (|row| CONST-DECL "Vector" |matrices| |matrices|)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|der_f| CONST-DECL
     "{gg: VectorN(n) | convergence_zero?(NQ(D, p), NQ(f, gg, p), zero_vec(n))}"
     |differentiable_def| NIL)
    (NQ CONST-DECL "real" |differentiable_def| NIL)
    (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|abs_div| FORMULA-DECL NIL |real_props| NIL)
    (* CONST-DECL "real" |matrices| |matrices|)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|matv_nth| FORMULA-DECL NIL |mat_vec_mult| NIL) NIL
    (|nth_subtract| FORMULA-DECL NIL |vector_arithmetic| NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|norm?| CONST-DECL "bool" |norms| NIL)
    (|norm_inf| CONST-DECL "(norm?(m))" |norms| NIL)
    (|Vector| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (- CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices| |matrices|)
    (+ CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices| |matrices|)
    (|FullMatrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|Matrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (<= CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|columns| DEF-DECL "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}"
     |matrices| |matrices|)
    (|rows| CONST-DECL "nat" |matrices| |matrices|)
    (* CONST-DECL "VectorN(rows(A))" |mat_vec_mult| NIL)
    (|MatrixMN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|pre_der| DEF-DECL "MatrixMN(m, n)" |convergence_vec2vec| NIL)
    (NQ CONST-DECL "bool" |differentiable_def| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|zero_vec| DEF-DECL "VectorN(m)" |vector_arithmetic| NIL)
    (|derivable_nth_mat_point| FORMULA-DECL NIL |convergence_vec2vec| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL) NIL)
   NIL
   (|der_f| SUBTYPE
    "convergence_vec2vec.pre_der(convergence_vec2vec.m, convergence_vec2vec.D, convergence_vec2vec.p, convergence_vec2vec.f)"
    "{T: matrices.MatrixMN(convergence_vec2vec.m, convergence_vec2vec.n) | vector_sequences[convergence_vec2vec.n].convergence_zero?(differentiable_def[convergence_vec2vec.n].NQ(convergence_vec2vec.D, convergence_vec2vec.p), convergence_vec2vec.NQ(convergence_vec2vec.m, convergence_vec2vec.f, convergence_vec2vec.p, T), vector_arithmetic.zero_vec(convergence_vec2vec.n))}")))
 (|conv_zero_nth_TCC1| 0
  (|conv_zero_nth_TCC1-1| |nil| 3801750110 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|conv_zero_nth| SUBTYPE "convergence_vec2vec.i"
    "below[length[list[real]](T)]")))
 (|conv_zero_nth_TCC2| 0
  (|conv_zero_nth_TCC2-1| |nil| 3801750110 ("" (SUBTYPE-TCC) NIL NIL)
   (NIL (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|n| FORMAL-CONST-DECL "posnat" |convergence_vec2vec| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|domain| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL) NIL
    (|Matrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|MatrixMN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|vec2real_f| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL)
    (|convergence_zero?| CONST-DECL "bool" |vector_sequences| NIL)
    (NQ CONST-DECL "bool" |differentiable_def| NIL)
    (|vec2vec| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL)
    (NQ CONST-DECL "real" |convergence_vec2vec| NIL)
    (|zero_vec| DEF-DECL "VectorN(m)" |vector_arithmetic| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|Vector| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|scal| DEF-DECL "VectorN(length(v2))" |matrices| |matrices|)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|add| DEF-DECL "VectorN(max(length(v1), length(v2)))" |matrices|
     |matrices|)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (* CONST-DECL "VectorN(rows(A))" |mat_vec_mult| NIL)
    (|rows| CONST-DECL "nat" |matrices| |matrices|)
    (|norm_inf| CONST-DECL "[(cons?) -> nonneg_real]" |norms| NIL)
    (- CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices| |matrices|)
    (|sub| CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices|
     |matrices|)
    (|norm_inf| CONST-DECL "(norm?(m))" |norms| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|norm?| CONST-DECL "bool" |norms| NIL)
    (+ CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices| |matrices|)
    (* CONST-DECL "VectorN(length(v2))" |matrices| |matrices|))
   NIL
   (|conv_zero_nth| SUBTYPE
    "list_props[list[real]].nth(convergence_vec2vec.T, convergence_vec2vec.i)"
    "VectorN(convergence_vec2vec.n)")))
 (|conv_zero_nth| 0
  (|conv_zero_nth-1| |nil| 3801750582
   ("" (SKEEP)
    (("" (TYPEPRED "T")
      (("" (SKEEP)
        (("" (EXPAND "convergence_zero?")
          (("" (SKEEP)
            (("" (HIDE -1 -2 -3)
              (("" (INST -1 "epsilon")
                (("" (SKEEP)
                  (("" (INST 1 "delta")
                    (("" (SKEEP)
                      (("" (INST -1 "x")
                        (("" (ASSERT)
                          (("" (EXPAND "NQ")
                            ((""
                              (CASE
                                  " abs(norm_inf(m)(f(p + x) - f(p) - T * x) / norm_inf(n)(x)) =  norm_inf(m)(f(p + x) - f(p) - T * x) / norm_inf(n)(x)")
                              (("1" (ASSERT)
                                (("1" (REPLACE -1 -2)
                                  (("1" (HIDE -1)
                                    (("1" (LEMMA "norm_inf_nth_ineq")
                                      (("1"
                                        (INST -1 "f(p + x) - f(p) - T*x" "i")
                                        (("1" (EXPAND "norm_inf" -2 1)
                                          (("1" (MULT-BY -2 "norm_inf(n)(x)")
                                            (("1" (ASSERT)
                                              (("1"
                                                (MULT-BY 1 "norm_inf(n)(x)")
                                                (("1" (ASSERT)
                                                  (("1"
                                                    (CASE
                                                        "NOT  abs((nth(m, f, i)(p + x) - nth(m, f, i)(p) - nth(T, i) * x) /
                                                                               norm_inf(n)(x))
                                                                           * norm_inf(n)(x) =  abs((nth(m, f, i)(p + x) - nth(m, f, i)(p) - nth(T, i) * x)) ")
                                                    (("1" (ASSERT)
                                                      (("1" (EXPAND "*" 1)
                                                        (("1" (ASSERT)
                                                          (("1"
                                                            (CASE
                                                                "abs((nth(m, f, i)(p + x) - nth(m, f, i)(p) - dot(nth(T, i), x)) /
                                                                                       norm_inf(n)(x)) = abs((nth(m, f, i)(p + x) - nth(m, f, i)(p) - dot(nth(T, i), x))) /
                                                                                       norm_inf(n)(x)")
                                                            (("1" (ASSERT) NIL
                                                              NIL)
                                                             ("2" (HIDE 2)
                                                              (("2"
                                                                (CASE
                                                                    "NOT norm_inf(n)(x)=0")
                                                                (("1"
                                                                  (LEMMA
                                                                   "abs_div")
                                                                  (("1"
                                                                    (INST -1
                                                                     "norm_inf(n)(x)"
                                                                     "((nth(m, f, i)(p + x) - nth(m, f, i)(p) - dot(nth(T, i), x)))")
                                                                    (("1"
                                                                      (REPLACE
                                                                       -1 2)
                                                                      (("1"
                                                                        (TYPEPRED
                                                                         "norm_inf(n)")
                                                                        (("1"
                                                                          (EXPAND
                                                                           "norm?"
                                                                           -1)
                                                                          (("1"
                                                                            (FLATTEN)
                                                                            (("1"
                                                                              (INST
                                                                               -1
                                                                               "x")
                                                                              (("1"
                                                                                (ASSERT)
                                                                                (("1"
                                                                                  (EXPAND
                                                                                   "abs"
                                                                                   2
                                                                                   2)
                                                                                  (("1"
                                                                                    (PROPAX)
                                                                                    NIL
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL)
                                                                 ("2" (ASSERT)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL)
                                                     ("2" (ASSERT)
                                                      (("2" (REPLACE -1 1)
                                                        (("2" (HIDE -1)
                                                          (("2"
                                                            (CASE
                                                                "nth(f(p + x) - f(p) - T*x, i) = (nth(m, f, i)(p + x) - nth(m, f, i)(p) - nth(T, i) * x)")
                                                            (("1" (ASSERT) NIL
                                                              NIL)
                                                             ("2" (HIDE 2)
                                                              (("2"
                                                                (LEMMA
                                                                 "nth_subtract")
                                                                (("2"
                                                                  (EXPAND "-"
                                                                          1)
                                                                  (("2"
                                                                    (INST-CP -1
                                                                     "f(p + x)"
                                                                     "f(p)")
                                                                    (("2"
                                                                      (INST -1
                                                                       "sub(f(p + x), f(p))"
                                                                       "T*x")
                                                                      (("1"
                                                                        (SPLIT
                                                                         -1)
                                                                        (("1"
                                                                          (SPLIT
                                                                           -2)
                                                                          (("1"
                                                                            (INST
                                                                             -1
                                                                             "i")
                                                                            (("1"
                                                                              (INST
                                                                               -2
                                                                               "i")
                                                                              (("1"
                                                                                (EXPAND
                                                                                 "-"
                                                                                 -)
                                                                                (("1"
                                                                                  (REPLACE
                                                                                   -2
                                                                                   1)
                                                                                  (("1"
                                                                                    (REPLACE
                                                                                     -1
                                                                                     1)
                                                                                    (("1"
                                                                                      (EXPAND
                                                                                       "nth"
                                                                                       1
                                                                                       4)
                                                                                      (("1"
                                                                                        (EXPAND
                                                                                         "nth"
                                                                                         1
                                                                                         3)
                                                                                        (("1"
                                                                                          (LEMMA
                                                                                           "matv_nth")
                                                                                          (("1"
                                                                                            (INST
                                                                                             -1
                                                                                             "T"
                                                                                             "x"
                                                                                             "i")
                                                                                            (("1"
                                                                                              (EXPAND
                                                                                               "row"
                                                                                               -1)
                                                                                              (("1"
                                                                                                (REPLACE
                                                                                                 -1
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (PROPAX)
                                                                                                  NIL
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL)
                                                                                             ("2"
                                                                                              (HIDE
                                                                                               2)
                                                                                              (("2"
                                                                                                (HIDE
                                                                                                 -)
                                                                                                (("2"
                                                                                                  (TYPEPRED
                                                                                                   "i")
                                                                                                  (("2"
                                                                                                    (TYPEPRED
                                                                                                     "m")
                                                                                                    (("2"
                                                                                                      (TYPEPRED
                                                                                                       "T")
                                                                                                      (("2"
                                                                                                        (EXPAND
                                                                                                         "rows")
                                                                                                        (("2"
                                                                                                          (ASSERT)
                                                                                                          NIL
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL)
                                                                               ("2"
                                                                                (TYPEPRED
                                                                                 "f(p)")
                                                                                (("2"
                                                                                  (TYPEPRED
                                                                                   "(sub(f(p + x), f(p)))")
                                                                                  (("2"
                                                                                    (HIDE
                                                                                     -1
                                                                                     -3)
                                                                                    (("2"
                                                                                      (TYPEPRED
                                                                                       "f(p+x)")
                                                                                      (("2"
                                                                                        (REPLACE
                                                                                         -2)
                                                                                        (("2"
                                                                                          (REPLACE
                                                                                           -4)
                                                                                          (("2"
                                                                                            (EXPAND
                                                                                             "max"
                                                                                             -3)
                                                                                            (("2"
                                                                                              (ASSERT)
                                                                                              NIL
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL)
                                                                           ("2"
                                                                            (ASSERT)
                                                                            NIL
                                                                            NIL))
                                                                          NIL)
                                                                         ("2"
                                                                          (TYPEPRED
                                                                           "T*x")
                                                                          (("2"
                                                                            (TYPEPRED
                                                                             "sub(f(p + x), f(p))"
                                                                             "f(p+x)"
                                                                             "f(p)")
                                                                            (("2"
                                                                              (ASSERT)
                                                                              (("2"
                                                                                (REPLACE
                                                                                 -4)
                                                                                (("2"
                                                                                  (REPLACE
                                                                                   -6)
                                                                                  (("2"
                                                                                    (EXPAND
                                                                                     "max")
                                                                                    (("2"
                                                                                      (ASSERT)
                                                                                      (("2"
                                                                                        (EXPAND
                                                                                         "rows")
                                                                                        (("2"
                                                                                          (ASSERT)
                                                                                          NIL
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL)
                                                                       ("2"
                                                                        (TYPEPRED
                                                                         "T*x")
                                                                        (("2"
                                                                          (HIDE
                                                                           -1)
                                                                          (("2"
                                                                            (EXPAND
                                                                             "rows"
                                                                             -1)
                                                                            (("2"
                                                                              (ASSERT)
                                                                              NIL
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL)
                                                                       ("3"
                                                                        (TYPEPRED
                                                                         "sub(f(p + x), f(p))"
                                                                         "f(p+x)"
                                                                         "f(p)")
                                                                        (("3"
                                                                          (REPLACE
                                                                           -4)
                                                                          (("3"
                                                                            (REPLACE
                                                                             -6)
                                                                            (("3"
                                                                              (EXPAND
                                                                               "max")
                                                                              (("3"
                                                                                (ASSERT)
                                                                                NIL
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2" (TYPEPRED "x")
                                              (("2" (TYPEPRED "norm_inf(n)")
                                                (("2" (EXPAND "norm?" -1)
                                                  (("2" (FLATTEN)
                                                    (("2" (INST -3 "x")
                                                      (("2" (ASSERT) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2"
                                          (TYPEPRED "f(p + x) - f(p)" "f(p+x)"
                                           "f(p)" "T*x")
                                          (("2" (REPLACE -4)
                                            (("2" (REPLACE -6)
                                              (("2" (EXPAND "max" -2)
                                                (("2" (ASSERT)
                                                  (("2" (HIDE -1 -3 -5 -7)
                                                    (("2" (TYPEPRED "i")
                                                      (("2" (ASSERT)
                                                        (("2"
                                                          (TYPEPRED
                                                           "f(p + x) - f(p) - T * x")
                                                          (("2" (ASSERT) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (EXPAND "abs" 1 1)
                                (("2" (LIFT-IF 1)
                                  (("2" (SPLIT 1)
                                    (("1" (FLATTEN)
                                      (("1" (MULT-BY -1 " norm_inf(n)(x)")
                                        (("1" (ASSERT) NIL NIL)
                                         ("2" (TYPEPRED "x")
                                          (("2" (TYPEPRED "norm_inf(n)")
                                            (("2" (EXPAND "norm?" -1)
                                              (("2" (FLATTEN)
                                                (("2" (INST -3 "x")
                                                  (("2" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (PROPAX) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|zero_vec| DEF-DECL "VectorN(m)" |vector_arithmetic| NIL)
    (NQ CONST-DECL "real" |convergence_vec2vec| NIL)
    (|vec2vec| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL) NIL
    (NQ CONST-DECL "bool" |differentiable_def| NIL)
    (|convergence_zero?| CONST-DECL "bool" |vector_sequences| NIL)
    (|vec2real_f| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL)
    (|domain| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|MatrixMN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|n| FORMAL-CONST-DECL "posnat" |convergence_vec2vec| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|Matrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (* CONST-DECL "VectorN(rows(A))" |mat_vec_mult| NIL)
    (|rows| CONST-DECL "nat" |matrices| |matrices|)
    (|columns| DEF-DECL "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}"
     |matrices| |matrices|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|FullMatrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (+ CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices| |matrices|)
    (- CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices| |matrices|)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|Vector| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|norm_inf| CONST-DECL "(norm?(m))" |norms| NIL)
    (|norm?| CONST-DECL "bool" |norms| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|norm_inf_nth_ineq| FORMULA-DECL NIL |norms| NIL)
    (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal"
     |real_types| NIL)
    (|sub| CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices|
     |matrices|)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|matv_nth| FORMULA-DECL NIL |mat_vec_mult| NIL)
    (|row| CONST-DECL "Vector" |matrices| |matrices|)
    (|nth_subtract| FORMULA-DECL NIL |vector_arithmetic| NIL)
    (|abs_div| FORMULA-DECL NIL |real_props| NIL)
    (|dot| DEF-DECL "real" |matrices| |matrices|)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (* CONST-DECL "real" |matrices| |matrices|)
    (|nth| CONST-DECL "vec2real_f" |convergence_vec2vec| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|both_sides_times_pos_ge1_imp| FORMULA-DECL NIL |extra_real_props| NIL)
    (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|div_cancel2| FORMULA-DECL NIL |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|norm_inf| CONST-DECL "[(cons?) -> nonneg_real]" |norms| NIL)
    (|both_sides_times_pos_lt1| FORMULA-DECL NIL |real_props| NIL) NIL NIL NIL
    NIL NIL NIL NIL
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (NQ CONST-DECL "real" |differentiable_def| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) NIL)
   SHOSTAK))
 (|der_f_unique_TCC1| 0
  (|der_f_unique_TCC1-1| |nil| 3852729732
   ("" (SKEEP)
    (("" (LEMMA "dd_e_partial_implies_dd")
      (("" (INST?) (("" (ASSERT) NIL NIL)) NIL)) NIL))
    NIL)
   ((|n| FORMAL-CONST-DECL "posnat" |convergence_vec2vec| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|dd_e_partial_implies_dd| FORMULA-DECL NIL |derivative_domain_multi| NIL)
    (|deriv_domain_e_partial?| CONST-DECL "bool" |derivative_domain_multi| NIL)
    (|domain| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL) NIL)
   NIL
   (|der_f_unique| SUBTYPE "convergence_vec2vec.D"
    "(derivative_domain_multi[convergence_vec2vec.n].deriv_domain?)")))
 (|der_f_unique_TCC2| 0
  (|der_f_unique_TCC1-1| |nil| 3801750750
   ("" (SKEEP)
    (("" (LEMMA "derivable_nth_mat_point")
      (("" (INST?)
        (("1" (ASSERT)
          (("1" (FLATTEN)
            (("1" (SPLIT -1)
              (("1" (PROPAX) NIL NIL)
               ("2" (EXPAND "differentiable?" 1)
                (("2" (TYPEPRED "T") (("2" (INST 1 "T") NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL)
         ("2" (LEMMA "dd_e_partial_implies_dd")
          (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|derivable_nth_mat_point| FORMULA-DECL NIL |convergence_vec2vec| NIL)
    (|dd_e_partial_implies_dd| FORMULA-DECL NIL |derivative_domain_multi| NIL)
    (|zero_vec| DEF-DECL "VectorN(m)" |vector_arithmetic| NIL)
    (NQ CONST-DECL "real" |convergence_vec2vec| NIL)
    (NQ CONST-DECL "bool" |differentiable_def| NIL)
    (|convergence_zero?| CONST-DECL "bool" |vector_sequences| NIL)
    (|vec2real_f| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL)
    (|MatrixMN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|Matrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|differentiable?| CONST-DECL "bool" |convergence_vec2vec| NIL)
    (|vec2vec| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|n| FORMAL-CONST-DECL "posnat" |convergence_vec2vec| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|domain| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL) NIL
    (|deriv_domain_e_partial?| CONST-DECL "bool" |derivative_domain_multi| NIL)
    NIL NIL)
   NIL
   (|der_f_unique| SUBTYPE "convergence_vec2vec.f"
    "{ff: domain_vec2real_def[convergence_vec2vec.n].vec2vec(convergence_vec2vec.m) | FORALL (i: naturalnumbers.below(convergence_vec2vec.m)): differentiable_def[convergence_vec2vec.n].differentiable?(convergence_vec2vec.D, convergence_vec2vec.nth(convergence_vec2vec.m, ff, i), convergence_vec2vec.p)}")))
 (|der_f_unique| 0
  (|der_f_unique-1| |nil| 3801751225
   ("" (SKEEP)
    (("" (LEMMA "list_extensionality[list[real]]")
      (("" (INST -1 "T" "pre_der(m,D,p,f)")
        (("" (ASSERT)
          (("" (SKEEP)
            (("" (LEMMA "pre_der_nth_p")
              (("" (INST -1 "m" "D" "p" "f" "n!1")
                (("" (REPLACE -1 1)
                  (("" (LEMMA "der_f_unique")
                    (("" (INST -1 "D" "p" "nth(m,f,n!1)" "nth(T,n!1)")
                      (("1" (ASSERT)
                        (("1" (LEMMA "conv_zero_nth")
                          (("1" (INST -1 "m" "D" "f" "p" "T" "n!1") NIL NIL))
                          NIL))
                        NIL)
                       ("2" (ASSERT)
                        (("2" (TYPEPRED "T") (("2" (INST -3 "n!1") NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|list_extensionality| FORMULA-DECL NIL |more_list_props| |structures|)
    (|pre_der_nth_p| FORMULA-DECL NIL |convergence_vec2vec| NIL) NIL NIL NIL
    NIL NIL NIL (|conv_zero_nth| FORMULA-DECL NIL |convergence_vec2vec| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|der_f_unique| FORMULA-DECL NIL |init_partial_def| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|pre_der| DEF-DECL "MatrixMN(m, n)" |convergence_vec2vec| NIL)
    (|nth| CONST-DECL "vec2real_f" |convergence_vec2vec| NIL)
    (|differentiable?| CONST-DECL "bool" |differentiable_def| NIL) NIL
    (|zero_vec| DEF-DECL "VectorN(m)" |vector_arithmetic| NIL)
    (NQ CONST-DECL "real" |convergence_vec2vec| NIL)
    (|vec2vec| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL)
    (|deriv_domain_e_partial?| CONST-DECL "bool" |derivative_domain_multi| NIL)
    (NQ CONST-DECL "bool" |differentiable_def| NIL)
    (|convergence_zero?| CONST-DECL "bool" |vector_sequences| NIL)
    (|vec2real_f| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL)
    (|domain| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|MatrixMN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|n| FORMAL-CONST-DECL "posnat" |convergence_vec2vec| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|Matrix| TYPE-EQ-DECL NIL |matrices| |matrices|) NIL)
   SHOSTAK))
 (|pre_diff_cont_TCC1| 0
  (|pre_diff_cont_TCC1-1| |nil| 3797413953 ("" (SUBTYPE-TCC) NIL NIL)
   (NIL (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|n| FORMAL-CONST-DECL "posnat" |convergence_vec2vec| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|domain| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL) NIL
    (|vec2vec| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL)
    (|differentiable?| CONST-DECL "bool" |convergence_vec2vec| NIL)
    (NQ CONST-DECL "bool" |differentiable_def| NIL)
    (|norm_inf| CONST-DECL "(norm?(m))" |norms| NIL)
    (|sub| CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices|
     |matrices|)
    (- CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices| |matrices|)
    (|norm_inf| CONST-DECL "[(cons?) -> nonneg_real]" |norms| NIL)
    (+ CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices| |matrices|)
    (|rows| CONST-DECL "nat" |matrices| |matrices|)
    (* CONST-DECL "VectorN(rows(A))" |mat_vec_mult| NIL)
    (NQ CONST-DECL "real" |convergence_vec2vec| NIL)
    (|convergence_zero?| CONST-DECL "bool" |vector_sequences| NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL))
   NIL
   (|pre_diff_cont| SUBTYPE "convergence_vec2vec.hh"
    "(list_adt[real].cons?)")))
 (|pre_diff_cont_TCC2| 0
  (|pre_diff_cont_TCC2-1| |nil| 3797413953
   ("" (SKEEP) (("" (TYPEPRED "p+h" "p" "h") (("" (GRIND) NIL NIL)) NIL)) NIL)
   ((|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|norm_inf| CONST-DECL "(norm?(m))" |norms| NIL)
    (|norm?| CONST-DECL "bool" |norms| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|zero_vec| DEF-DECL "VectorN(m)" |vector_arithmetic| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (NQ CONST-DECL "bool" |differentiable_def| NIL) NIL
    (|domain| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL)
    (|n| FORMAL-CONST-DECL "posnat" |convergence_vec2vec| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (+ CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices| |matrices|)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|Vector| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|norm_inf| CONST-DECL "[(cons?) -> nonneg_real]" |norms| NIL)
    (|add| DEF-DECL "VectorN(max(length(v1), length(v2)))" |matrices|
     |matrices|)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    NIL)
   NIL
   (|pre_diff_cont| SUBTYPE
    "(matrices.+)(convergence_vec2vec.p, convergence_vec2vec.h)"
    "VectorN(convergence_vec2vec.n)")))
 (|pre_diff_cont_TCC3| 0
  (|pre_diff_cont_TCC3-1| |nil| 3797413953
   ("" (SKEEP)
    (("" (TYPEPRED "f(p + h) - f(p)" "f(p + h)" "f(p)") (("" (GRIND) NIL NIL))
      NIL))
    NIL)
   ((|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|norm_inf| CONST-DECL "(norm?(m))" |norms| NIL)
    (|norm?| CONST-DECL "bool" |norms| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|zero_vec| DEF-DECL "VectorN(m)" |vector_arithmetic| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (NQ CONST-DECL "bool" |differentiable_def| NIL)
    (+ CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices| |matrices|)
    (|differentiable?| CONST-DECL "bool" |convergence_vec2vec| NIL) NIL
    (|domain| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL)
    (|vec2vec| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL)
    (|n| FORMAL-CONST-DECL "posnat" |convergence_vec2vec| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (- CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices| |matrices|)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|Vector| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|add| DEF-DECL "VectorN(max(length(v1), length(v2)))" |matrices|
     |matrices|)
    (|scal| DEF-DECL "VectorN(length(v2))" |matrices| |matrices|)
    (|sub| CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices|
     |matrices|)
    NIL)
   NIL
   (|pre_diff_cont| SUBTYPE
    "(matrices.-)(convergence_vec2vec.f((matrices.+)(convergence_vec2vec.p, convergence_vec2vec.h)), convergence_vec2vec.f(convergence_vec2vec.p))"
    "(list_adt[real].cons?)")))
 (|pre_diff_cont_TCC4| 0
  (|pre_diff_cont_TCC4-1| |nil| 3797413953 ("" (SUBTYPE-TCC) NIL NIL)
   (NIL (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|n| FORMAL-CONST-DECL "posnat" |convergence_vec2vec| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|domain| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL) NIL
    (|vec2vec| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL)
    (|differentiable?| CONST-DECL "bool" |convergence_vec2vec| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (NQ CONST-DECL "bool" |differentiable_def| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|zero_vec| DEF-DECL "VectorN(m)" |vector_arithmetic| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|norm?| CONST-DECL "bool" |norms| NIL)
    (|norm_inf| CONST-DECL "(norm?(m))" |norms| NIL)
    (|sub| CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices|
     |matrices|)
    (- CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices| |matrices|)
    (|norm_inf| CONST-DECL "[(cons?) -> nonneg_real]" |norms| NIL)
    (+ CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices| |matrices|)
    (|rows| CONST-DECL "nat" |matrices| |matrices|)
    (* CONST-DECL "VectorN(rows(A))" |mat_vec_mult| NIL)
    (NQ CONST-DECL "real" |convergence_vec2vec| NIL)
    (|convergence_zero?| CONST-DECL "bool" |vector_sequences| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL))
   NIL
   (|pre_diff_cont| SUBTYPE "convergence_vec2vec.h" "(list_adt[real].cons?)")))
 (|pre_diff_cont| 0
  (|pre_diff_cont-1| |nil| 3797414029
   ("" (SKEEP)
    (("" (TYPEPRED "f")
      (("" (EXPAND "differentiable?" -1)
        (("" (SKEEP)
          (("" (EXPAND "convergence_zero?" -1)
            (("" (LEMMA "matv_norm_inf")
              (("" (EXPAND "NQ" -2)
                (("" (INST -1 "T" "_")
                  (("1" (INST -2 "1")
                    (("1" (SKEEP)
                      (("1" (NAME "M" "1+n*max_a(T)")
                        (("1" (INST 1 "M" "_")
                          (("1" (INST 1 "delta")
                            (("1" (SKEEP)
                              (("1" (TYPEPRED "h")
                                (("1" (INST -8 "h")
                                  (("1" (ASSERT)
                                    (("1" (SPLIT -8)
                                      (("1"
                                        (CASE
                                            "norm_inf(m)(f(p + h) - f(p) - T*h) / norm_inf(n)(h) = abs(norm_inf(m)(f(p + h) - f(p) - T*h) / norm_inf(n)(h))")
                                        (("1" (REPLACE -1 -2 RL)
                                          (("1" (HIDE -1)
                                            (("1" (MULT-BY -1 "norm_inf(n)(h)")
                                              (("1" (ASSERT)
                                                (("1"
                                                  (CASE
                                                      " norm_inf(m)(f(p + h) - f(p)) =  norm_inf(m)(f(p + h) - f(p) - T*h + T*h )")
                                                  (("1" (REPLACE -1 1)
                                                    (("1"
                                                      (CASE
                                                          " norm_inf(m)(f(p + h) - f(p) - T*h + T*h) <=  norm_inf(m)(f(p + h) - f(p) - T*h) + norm_inf(m)(T*h)")
                                                      (("1" (HIDE -4)
                                                        (("1" (INST -9 "h")
                                                          (("1" (ASSERT)
                                                            (("1"
                                                              (EXPAND "rows")
                                                              (("1" (ASSERT)
                                                                (("1"
                                                                  (TYPEPRED
                                                                   "T")
                                                                  (("1"
                                                                    (REPLACE
                                                                     -2)
                                                                    (("1"
                                                                      (ASSERT)
                                                                      (("1"
                                                                        (HIDE
                                                                         -1)
                                                                        (("1"
                                                                          (LEMMA
                                                                           "MN_rc")
                                                                          (("1"
                                                                            (INST
                                                                             -1
                                                                             "m"
                                                                             "n"
                                                                             "T")
                                                                            (("1"
                                                                              (ASSERT)
                                                                              (("1"
                                                                                (FLATTEN)
                                                                                (("1"
                                                                                  (ASSERT)
                                                                                  (("1"
                                                                                    (EXPAND
                                                                                     "rows"
                                                                                     -1)
                                                                                    (("1"
                                                                                      (ASSERT)
                                                                                      NIL
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL)
                                                       ("2" (HIDE 2)
                                                        (("2" (HIDE -)
                                                          (("2"
                                                            (TYPEPRED
                                                             "norm_inf(m)")
                                                            (("2"
                                                              (EXPAND "norm?"
                                                                      -1)
                                                              (("2" (FLATTEN)
                                                                (("2"
                                                                  (INST -4
                                                                   "f(p + h) - f(p) - T*h"
                                                                   "T*h")
                                                                  (("1"
                                                                    (HIDE 2)
                                                                    (("1"
                                                                      (TYPEPRED
                                                                       "f(p + h) - f(p) - T*h"
                                                                       "f(p + h) - f(p)"
                                                                       "T*h"
                                                                       "f(p + h)"
                                                                       "f(p)")
                                                                      (("1"
                                                                        (HIDE
                                                                         -1 -3
                                                                         -5 -7
                                                                         -9)
                                                                        (("1"
                                                                          (ASSERT)
                                                                          (("1"
                                                                            (REPLACE
                                                                             -4)
                                                                            (("1"
                                                                              (REPLACE
                                                                               -5)
                                                                              (("1"
                                                                                (EXPAND
                                                                                 "max"
                                                                                 -2)
                                                                                (("1"
                                                                                  (EXPAND
                                                                                   "rows")
                                                                                  (("1"
                                                                                    (REPLACE
                                                                                     -2)
                                                                                    (("1"
                                                                                      (REPLACE
                                                                                       -3)
                                                                                      (("1"
                                                                                        (EXPAND
                                                                                         "max"
                                                                                         -1)
                                                                                        (("1"
                                                                                          (TYPEPRED
                                                                                           "T")
                                                                                          (("1"
                                                                                            (PROPAX)
                                                                                            NIL
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL)
                                                                       ("2"
                                                                        (TYPEPRED
                                                                         "p"
                                                                         "h"
                                                                         "p+h")
                                                                        (("2"
                                                                          (ASSERT)
                                                                          (("2"
                                                                            (REPLACE
                                                                             -2)
                                                                            (("2"
                                                                              (REPLACE
                                                                               -5)
                                                                              (("2"
                                                                                (EXPAND
                                                                                 "max")
                                                                                (("2"
                                                                                  (PROPAX)
                                                                                  NIL
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL)
                                                                   ("2"
                                                                    (ASSERT)
                                                                    (("2"
                                                                      (TYPEPRED
                                                                       "f(p + h) - f(p) - T*h"
                                                                       "f(p + h) - f(p)"
                                                                       "T*h"
                                                                       "f(p + h)"
                                                                       "f(p)")
                                                                      (("2"
                                                                        (HIDE
                                                                         -1 -3
                                                                         -5 -7
                                                                         -9)
                                                                        (("2"
                                                                          (ASSERT)
                                                                          (("2"
                                                                            (REPLACE
                                                                             -4)
                                                                            (("2"
                                                                              (REPLACE
                                                                               -5)
                                                                              (("2"
                                                                                (EXPAND
                                                                                 "max"
                                                                                 -2)
                                                                                (("2"
                                                                                  (REPLACE
                                                                                   -2)
                                                                                  (("2"
                                                                                    (REPLACE
                                                                                     -3)
                                                                                    (("2"
                                                                                      (EXPAND
                                                                                       "max"
                                                                                       -1)
                                                                                      (("2"
                                                                                        (TYPEPRED
                                                                                         "T")
                                                                                        (("2"
                                                                                          (EXPAND
                                                                                           "rows")
                                                                                          (("2"
                                                                                            (PROPAX)
                                                                                            NIL
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL)
                                                       ("3" (ASSERT)
                                                        (("3" (EXPAND "rows")
                                                          (("3" (ASSERT)
                                                            (("3"
                                                              (TYPEPRED "T*h"
                                                               "T")
                                                              (("3"
                                                                (EXPAND "rows")
                                                                (("3" (ASSERT)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (HIDE 2)
                                                    (("2" (HIDE -)
                                                      (("2"
                                                        (LEMMA
                                                         "quad_cancel_tail")
                                                        (("2" (INST?)
                                                          (("1" (ASSERT)
                                                            (("1"
                                                              (TYPEPRED "f(p)"
                                                               "T * h" "T")
                                                              (("1" (ASSERT)
                                                                (("1"
                                                                  (EXPAND
                                                                   "rows")
                                                                  (("1"
                                                                    (ASSERT)
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL)
                                                           ("2"
                                                            (TYPEPRED "T*h"
                                                             "T")
                                                            (("2"
                                                              (EXPAND "rows")
                                                              (("2" (ASSERT)
                                                                NIL NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("3" (HIDE -7)
                                                    (("3"
                                                      (TYPEPRED
                                                       "(f(p + h) - f(p) - T*h + T*h)"
                                                       "f(p + h)" "f(p)" "T*h"
                                                       "T*h")
                                                      (("3"
                                                        (HIDE -1 -3 -5 -7 -9)
                                                        (("3" (ASSERT)
                                                          (("3" (EXPAND "rows")
                                                            (("3" (ASSERT) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (TYPEPRED "norm_inf(n)")
                                                (("2" (EXPAND "norm?" -1)
                                                  (("2" (FLATTEN)
                                                    (("2" (INST -3 "h")
                                                      (("2" (ASSERT) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (EXPAND "abs" 1 1)
                                          (("2" (LIFT-IF 1)
                                            (("2" (SPLIT 1)
                                              (("1" (FLATTEN)
                                                (("1" (ASSERT)
                                                  (("1"
                                                    (MULT-BY -1
                                                     " norm_inf(n)(h) ")
                                                    (("1" (ASSERT) NIL NIL)
                                                     ("2"
                                                      (TYPEPRED "norm_inf(n)")
                                                      (("2" (EXPAND "norm?" -1)
                                                        (("2" (FLATTEN)
                                                          (("2" (INST -3 "h")
                                                            (("2" (ASSERT) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (PROPAX) NIL NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (LEMMA "zero_id")
                                        (("2" (INST -1 "h")
                                          (("2" (ASSERT)
                                            (("2" (REPLACE -3 -1)
                                              (("2" (ASSERT)
                                                (("2" (EXPAND "-" 1)
                                                  (("2" (LEMMA "scal_zero")
                                                    (("2" (INST -1 "-1" "n")
                                                      (("2" (EXPAND "sub" 1)
                                                        (("2" (EXPAND "*" -1)
                                                          (("2" (REPLACE -1)
                                                            (("2"
                                                              (EXPAND "+" -2)
                                                              (("2" (ASSERT)
                                                                NIL NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (HIDE 2)
                          (("2" (HIDE -)
                            (("2" (LEMMA "MN_full")
                              (("2" (INST -1 "m" "n" "T") NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (LEMMA "MN_full")
                    (("2" (INST -1 "m" "n" "T")
                      (("2" (ASSERT)
                        (("2" (SPLIT 1)
                          (("1" (PROPAX) NIL NIL)
                           ("2" (TYPEPRED "T")
                            (("2" (TYPEPRED "T")
                              (("2" (LEMMA "full_matrix_columns")
                                (("2" (INST -1 "T")
                                  (("2" (ASSERT)
                                    (("2" (INST -4 "0")
                                      (("2" (EXPAND "nth" -4)
                                        (("2" (ASSERT)
                                          (("2" (LEMMA "full_matrix_columns")
                                            (("2" (INST -1 "T")
                                              (("2" (INST -8 "0")
                                                (("2" (ASSERT)
                                                  (("2" (TYPEPRED "T")
                                                    (("2" (ASSERT)
                                                      (("2"
                                                        (EXPAND "length" -2)
                                                        (("2" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|differentiable?| CONST-DECL "bool" |convergence_vec2vec| NIL)
    (|vec2vec| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL) NIL
    (|domain| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|n| FORMAL-CONST-DECL "posnat" |convergence_vec2vec| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|matv_norm_inf| FORMULA-DECL NIL |mat_vec_mult| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|columns| DEF-DECL "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}"
     |matrices| |matrices|)
    (<= CONST-DECL "bool" |reals| NIL) NIL
    (|MatrixMN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL) NIL
    (|Matrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|FullMatrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|MN_full| JUDGEMENT-TCC NIL |mat_vec_mult| NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|both_sides_times_pos_lt1| FORMULA-DECL NIL |real_props| NIL) NIL NIL NIL
    NIL (|div_cancel2| FORMULA-DECL NIL |real_props| NIL)
    (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types|
     NIL)
    (|MN_rc| FORMULA-DECL NIL |mat_vec_mult| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    NIL
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|quad_cancel_tail| FORMULA-DECL NIL |vector_arithmetic| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (* CONST-DECL "VectorN(rows(A))" |mat_vec_mult| NIL)
    (|rows| CONST-DECL "nat" |matrices| |matrices|)
    (+ CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices| |matrices|)
    (- CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices| |matrices|)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|Vector| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (* CONST-DECL "VectorN(length(v2))" |matrices| |matrices|)
    (|sub| CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices|
     |matrices|)
    (|scal_zero| FORMULA-DECL NIL |vector_arithmetic| NIL)
    (|zero_id| FORMULA-DECL NIL |vector_arithmetic| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal"
     |real_types| NIL)
    (|norm_inf| CONST-DECL "(norm?(m))" |norms| NIL)
    (|norm?| CONST-DECL "bool" |norms| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|zero_vec| DEF-DECL "VectorN(m)" |vector_arithmetic| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (NQ CONST-DECL "bool" |differentiable_def| NIL)
    (|max_a| DEF-DECL "nnreal" |mat_vec_mult| NIL)
    (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|posreal_plus_nnreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|full_matrix_columns| FORMULA-DECL NIL |matrices| |matrices|)
    (NQ CONST-DECL "real" |convergence_vec2vec| NIL)
    (|convergence_zero?| CONST-DECL "bool" |vector_sequences| NIL) NIL)
   SHOSTAK))
 (|diff_cont| 0
  (|diff_cont-1| |nil| 3797418137
   ("" (SKEEP*)
    (("" (LEMMA "contp_norms_v2v")
      (("" (INST -1 "D" "m" "f" "p")
        (("" (ASSERT)
          (("" (HIDE 2)
            (("" (LEMMA "pre_diff_cont")
              (("" (INST -1 "m" "D" "p" "f")
                (("" (SKEEP)
                  (("" (INST 1 "norm_inf(n)" "norm_inf(m)")
                    (("" (EXPAND "contp?" 1)
                      (("" (SKEEP)
                        (("" (INST 1 "min(del,eps/M)")
                          (("" (TYPEPRED "M")
                            (("" (SKEEP)
                              (("" (CASE "p + (x - p) = x")
                                (("1" (CASE "x-p = zero_vec(n)")
                                  (("1" (LEMMA "diff_zero")
                                    (("1" (INST -1 "n" "x" "p")
                                      (("1" (ASSERT)
                                        (("1" (EXPAND "restrict" 1)
                                          (("1" (ASSERT)
                                            (("1" (LEMMA "sub_self")
                                              (("1" (INST -1 "f(x)")
                                                (("1"
                                                  (CASE
                                                      "NOT f(x) - f(p) = zero_vec(length(f(x)))")
                                                  (("1" (ASSERT) NIL NIL)
                                                   ("2" (REPLACE -1)
                                                    (("2"
                                                      (TYPEPRED "norm_inf(m)")
                                                      (("2" (EXPAND "norm?" -1)
                                                        (("2" (FLATTEN)
                                                          (("2"
                                                            (INST -3
                                                             "zero_vec(length(f(x)))")
                                                            (("1" (ASSERT) NIL
                                                              NIL)
                                                             ("2"
                                                              (TYPEPRED "f(x)")
                                                              (("2"
                                                                (REPLACE -2)
                                                                (("2" (ASSERT)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (HIDE 2)
                                        (("2" (TYPEPRED "p")
                                          (("2" (GRIND) NIL NIL)) NIL))
                                        NIL)
                                       ("3" (TYPEPRED "x")
                                        (("3" (GRIND) NIL NIL)) NIL))
                                      NIL))
                                    NIL)
                                   ("2" (INST -4 "x-p")
                                    (("1" (REPLACE -1 -4)
                                      (("1" (EXPAND "restrict" 2)
                                        (("1" (ASSERT)
                                          (("1" (MULT-BY -5 "M")
                                            (("1" (ASSERT)
                                              (("1"
                                                (CASE
                                                    "min(del, eps / M) * M <= eps")
                                                (("1" (ASSERT) NIL NIL)
                                                 ("2" (EXPAND "min" 1)
                                                  (("2" (LIFT-IF 1)
                                                    (("2" (SPLIT 1)
                                                      (("1" (FLATTEN)
                                                        (("1" (ASSERT) NIL
                                                          NIL))
                                                        NIL)
                                                       ("2" (FLATTEN)
                                                        (("2" (MULT-BY 1 "M")
                                                          (("2" (ASSERT) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (TYPEPRED "x-p")
                                      (("2" (HIDE 3)
                                        (("2" (TYPEPRED "x" "p")
                                          (("2" (REPLACE -2)
                                            (("2" (REPLACE -5)
                                              (("2" (EXPAND "max" -8)
                                                (("2" (ASSERT)
                                                  (("2" (EXPAND "NQ" 1)
                                                    (("2" (REVEAL 3)
                                                      (("2" (REVEAL +)
                                                        (("2" (HIDE 1 2 3 4 5)
                                                          (("2" (HIDE 2)
                                                            (("2"
                                                              (LEMMA
                                                               "sub_equal_id")
                                                              (("2"
                                                                (LEMMA
                                                                 "asso_sub_commute")
                                                                (("2"
                                                                  (INST -1 "p"
                                                                   "x" "p")
                                                                  (("2"
                                                                    (ASSERT)
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (LEMMA "asso_sub_commute")
                                  (("2" (INST -1 "p" "x" "p")
                                    (("1" (ASSERT)
                                      (("1" (REPLACE -1 1 RL)
                                        (("1" (LEMMA "sub_equal_id")
                                          (("1" (INST -1 "x" "p")
                                            (("1" (ASSERT)
                                              (("1" (LEMMA "sub_self")
                                                (("1" (INST -1 "p")
                                                  (("1" (REPLACE -1 1)
                                                    (("1" (LEMMA "add_commute")
                                                      (("1"
                                                        (INST -1
                                                         "zero_vec(length(p))"
                                                         "x")
                                                        (("1" (LEMMA "zero_id")
                                                          (("1" (INST -1 "x")
                                                            (("1" (ASSERT) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL)
                                                         ("2"
                                                          (TYPEPRED "p" "x")
                                                          (("2" (ASSERT) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (TYPEPRED "x")
                                      (("2" (ASSERT) NIL NIL)) NIL)
                                     ("3" (TYPEPRED "p")
                                      (("3" (ASSERT) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|n| FORMAL-CONST-DECL "posnat" |convergence_vec2vec| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|contp_norms_v2v| FORMULA-DECL NIL |continuity_multivar| NIL)
    (|pre_diff_cont| FORMULA-DECL NIL |convergence_vec2vec| NIL) NIL
    (|posreal_min| APPLICATION-JUDGEMENT "{z: posreal | z <= x AND z <= y}"
     |real_defs| NIL)
    (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|add_commute| FORMULA-DECL NIL |vector_arithmetic| NIL)
    (|zero_id| FORMULA-DECL NIL |vector_arithmetic| NIL)
    (|zero_vec| DEF-DECL "VectorN(m)" |vector_arithmetic| NIL) NIL NIL NIL
    (|sub_self| FORMULA-DECL NIL |vector_arithmetic| NIL) NIL NIL
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|diff_zero| FORMULA-DECL NIL |vector_arithmetic| NIL)
    (|sub_equal_id| FORMULA-DECL NIL |vector_arithmetic| NIL)
    (|asso_sub_commute| FORMULA-DECL NIL |vector_arithmetic| NIL)
    (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal"
     |real_types| NIL)
    (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|both_sides_times_pos_le1_imp| FORMULA-DECL NIL |extra_real_props| NIL)
    (|div_cancel2| FORMULA-DECL NIL |real_props| NIL)
    (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|both_sides_times_pos_lt1| FORMULA-DECL NIL |real_props| NIL) NIL
    (< CONST-DECL "bool" |reals| NIL)
    (NQ CONST-DECL "bool" |differentiable_def| NIL)
    (- CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices| |matrices|)
    (+ CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices| |matrices|)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|Vector| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|norm?| CONST-DECL "bool" |norms| NIL)
    (|norm_inf| CONST-DECL "(norm?(m))" |norms| NIL)
    (|differentiable?| CONST-DECL "bool" |convergence_vec2vec| NIL)
    (|vec2vec| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL) NIL
    (|domain| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL) NIL)
   SHOSTAK))
 (|der?_TCC1| 0
  (|der?_TCC1-1| |nil| 3798407130 ("" (SUBTYPE-TCC) NIL NIL)
   (NIL (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|domain| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL) NIL
    (|vec2vec| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL)
    (|differentiableD?| CONST-DECL "bool" |convergence_vec2vec| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|max| DEF-DECL "real" |norms| NIL)
    (|Vector| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|scal| DEF-DECL "VectorN(length(v2))" |matrices| |matrices|)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|zero_vec| DEF-DECL "VectorN(m)" |vector_arithmetic| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|add| DEF-DECL "VectorN(max(length(v1), length(v2)))" |matrices|
     |matrices|)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) NIL
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|norm_inf| CONST-DECL "(norm?(m))" |norms| NIL)
    (|sub| CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices|
     |matrices|)
    (- CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices| |matrices|)
    (|norm_inf| CONST-DECL "[(cons?) -> nonneg_real]" |norms| NIL)
    (|rows| CONST-DECL "nat" |matrices| |matrices|)
    (* CONST-DECL "VectorN(rows(A))" |mat_vec_mult| NIL)
    (NQ CONST-DECL "real" |convergence_vec2vec| NIL)
    (|n| FORMAL-CONST-DECL "posnat" |convergence_vec2vec| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|convergence_zero?| CONST-DECL "bool" |vector_sequences| NIL)
    (|differentiable?| CONST-DECL "bool" |convergence_vec2vec| NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|norm?| CONST-DECL "bool" |norms| NIL)
    (+ CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices| |matrices|)
    (* CONST-DECL "VectorN(length(v2))" |matrices| |matrices|))
   NIL
   (|der?| SUBTYPE "convergence_vec2vec.f"
    "{ff: domain_vec2real_def[convergence_vec2vec.n].vec2vec(convergence_vec2vec.m) | convergence_vec2vec.differentiable?(convergence_vec2vec.m, convergence_vec2vec.D, ff, convergence_vec2vec.p)}")))
 (|pre_der_der_p_TCC1| 0
  (|pre_der_der_p_TCC1-1| |nil| 3801744023
   ("" (LEMMA "derivable_nth_mat")
    (("" (LEMMA "derivable_nth_mat_point")
      (("" (ASSERT)
        (("" (HIDE -2)
          (("" (SKEEP) (("" (INST?) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|derivable_nth_mat_point| FORMULA-DECL NIL |convergence_vec2vec| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|n| FORMAL-CONST-DECL "posnat" |convergence_vec2vec| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|domain| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL) NIL
    (|vec2vec| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL) NIL
    (|derivable_nth_mat| FORMULA-DECL NIL |convergence_vec2vec| NIL))
   NIL
   (|pre_der_der_p| SUBTYPE "convergence_vec2vec.f"
    "{ff: domain_vec2real_def[convergence_vec2vec.n].vec2vec(convergence_vec2vec.m) | FORALL (i: naturalnumbers.below(convergence_vec2vec.m)): differentiable_def[convergence_vec2vec.n].differentiable?(convergence_vec2vec.D, convergence_vec2vec.nth(convergence_vec2vec.m, ff, i), convergence_vec2vec.p)}")))
 (|pre_der_der_p| 0
  (|pre_der_der_p-1| |nil| 3801744243
   ("" (SKEEP)
    (("" (EXPAND "der_p?")
      (("" (EXPAND "convergence_zero?" 1)
        (("" (SKEEP)
          (("" (INST 1 "del_all_p(m,D,p,f)(epsilon)")
            (("1" (SKEEP)
              (("1" (LEMMA "del_nth")
                (("1" (LEMMA "del_nth")
                  (("1" (LEMMA "del_nth_p")
                    (("1" (HIDE -2)
                      (("1" (INST?)
                        (("1" (EXPAND "NQ" 1)
                          (("1"
                            (CASE
                                "abs(norm_inf(m)(f(p + x) - f(p) - pre_der(m, D, p, f)*x)
                                                           / norm_inf(n)(x)) = norm_inf(m)(f(p + x) - f(p) - pre_der(m, D,p, f)*x)
                                                           / norm_inf(n)(x)")
                            (("1" (ASSERT)
                              (("1" (REPLACE -1 1)
                                (("1" (LEMMA "norm_inf_nth")
                                  (("1"
                                    (INST -1
                                     "f(p + x) - f(p) - pre_der(m, D,p, f)*x")
                                    (("1" (SKEEP)
                                      (("1" (EXPAND "norm_inf" 1 1)
                                        (("1" (REPLACE -1 1)
                                          (("1" (LEMMA "nth_subtract")
                                            (("1"
                                              (INST -1 "f(p + x) - f(p)"
                                               "pre_der(m, D,p, f)*x")
                                              (("1" (ASSERT)
                                                (("1" (SPLIT -1)
                                                  (("1" (INST -1 "i")
                                                    (("1" (REPLACE -1 1)
                                                      (("1" (LEMMA "matv_nth")
                                                        (("1"
                                                          (INST -1
                                                           " pre_der(m, D,p, f)"
                                                           "x" "i")
                                                          (("1" (REPLACE -1 1)
                                                            (("1"
                                                              (LEMMA
                                                               "pre_der_nth_p")
                                                              (("1"
                                                                (INST -1 "m"
                                                                 "D" "p" "f"
                                                                 "i")
                                                                (("1"
                                                                  (EXPAND "row"
                                                                          1 1)
                                                                  (("1"
                                                                    (ASSERT)
                                                                    (("1"
                                                                      (TYPEPRED
                                                                       "i")
                                                                      (("1"
                                                                        (LIFT-IF
                                                                         1)
                                                                        (("1"
                                                                          (SPLIT
                                                                           1)
                                                                          (("1"
                                                                            (FLATTEN)
                                                                            (("1"
                                                                              (HIDE
                                                                               1)
                                                                              (("1"
                                                                                (TYPEPRED
                                                                                 "i"
                                                                                 "pre_der(m, D, p,f)")
                                                                                (("1"
                                                                                  (TYPEPRED
                                                                                   "f(p + x) - f(p) - pre_der(m, D,p, f)*x"
                                                                                   "f(p + x) - f(p)"
                                                                                   "pre_der(m, D,p, f)*x"
                                                                                   "f(p+x)"
                                                                                   "f(p)")
                                                                                  (("1"
                                                                                    (ASSERT)
                                                                                    (("1"
                                                                                      (REPLACE
                                                                                       -8)
                                                                                      (("1"
                                                                                        (REPLACE
                                                                                         -10)
                                                                                        (("1"
                                                                                          (HIDE
                                                                                           -7)
                                                                                          (("1"
                                                                                            (HIDE
                                                                                             -8)
                                                                                            (("1"
                                                                                              (HIDE
                                                                                               -5)
                                                                                              (("1"
                                                                                                (EXPAND
                                                                                                 "max"
                                                                                                 -4)
                                                                                                (("1"
                                                                                                  (REPLACE
                                                                                                   -4)
                                                                                                  (("1"
                                                                                                    (HIDE
                                                                                                     -1
                                                                                                     -3)
                                                                                                    (("1"
                                                                                                      (EXPAND
                                                                                                       "rows"
                                                                                                       -3)
                                                                                                      (("1"
                                                                                                        (ASSERT)
                                                                                                        NIL
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL)
                                                                           ("2"
                                                                            (FLATTEN)
                                                                            (("2"
                                                                              (REPLACE
                                                                               -2
                                                                               2)
                                                                              (("2"
                                                                                (INST
                                                                                 -7
                                                                                 "i")
                                                                                (("2"
                                                                                  (ASSERT)
                                                                                  (("2"
                                                                                    (EXPAND
                                                                                     "NQ"
                                                                                     -7)
                                                                                    (("2"
                                                                                      (HIDE
                                                                                       -8)
                                                                                      (("2"
                                                                                        (CASE
                                                                                            "(nth(m, f, i)(p + x) - nth(m, f, i)(p) -
                                                                                                                          der_f(D,p)(nth(m, f, i)) * x) = nth(f(p + x) - f(p), i) - der_f(D,p)(nth(m, f, i)) * x")
                                                                                        (("1"
                                                                                          (REPLACE
                                                                                           -1
                                                                                           2
                                                                                           RL)
                                                                                          (("1"
                                                                                            (ASSERT)
                                                                                            (("1"
                                                                                              (HIDE
                                                                                               1)
                                                                                              (("1"
                                                                                                (HIDE
                                                                                                 -9)
                                                                                                (("1"
                                                                                                  (HIDE
                                                                                                   -7)
                                                                                                  (("1"
                                                                                                    (LEMMA
                                                                                                     "abs_div")
                                                                                                    (("1"
                                                                                                      (INST
                                                                                                       -1
                                                                                                       " norm_inf(n)(x)"
                                                                                                       "(nth(m, f, i)(p + x) - nth(m, f, i)(p) -
                                                                                                              der_f(D,p)(nth(m, f, i)) * x)")
                                                                                                      (("1"
                                                                                                        (ASSERT)
                                                                                                        (("1"
                                                                                                          (REPLACE
                                                                                                           -1
                                                                                                           -8)
                                                                                                          (("1"
                                                                                                            (EXPAND
                                                                                                             "abs"
                                                                                                             -8
                                                                                                             2)
                                                                                                            (("1"
                                                                                                              (PROPAX)
                                                                                                              NIL
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL)
                                                                                         ("2"
                                                                                          (ASSERT)
                                                                                          (("2"
                                                                                            (HIDE
                                                                                             2
                                                                                             3)
                                                                                            (("2"
                                                                                              (HIDE
                                                                                               -6
                                                                                               -7)
                                                                                              (("2"
                                                                                                (EXPAND
                                                                                                 "nth"
                                                                                                 1
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (EXPAND
                                                                                                   "nth"
                                                                                                   1
                                                                                                   2)
                                                                                                  (("2"
                                                                                                    (ASSERT)
                                                                                                    (("2"
                                                                                                      (LEMMA
                                                                                                       "nth_subtract")
                                                                                                      (("2"
                                                                                                        (INST
                                                                                                         -1
                                                                                                         "f(p + x)"
                                                                                                         "(f(p))")
                                                                                                        (("2"
                                                                                                          (ASSERT)
                                                                                                          (("2"
                                                                                                            (INST
                                                                                                             -1
                                                                                                             "i")
                                                                                                            (("2"
                                                                                                              (REPLACE
                                                                                                               -1
                                                                                                               1)
                                                                                                              (("2"
                                                                                                                (PROPAX)
                                                                                                                NIL
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL)
                                                                 ("2" (HIDE -)
                                                                  (("2"
                                                                    (REVEAL -)
                                                                    (("2"
                                                                      (HIDE
                                                                       -11)
                                                                      (("2"
                                                                        (HIDE
                                                                         -)
                                                                        (("2"
                                                                          (TYPEPRED
                                                                           "i")
                                                                          (("2"
                                                                            (TYPEPRED
                                                                             "f(p + x) - f(p) - pre_der(m, D,p, f)*x"
                                                                             "f(p + x) - f(p)"
                                                                             "pre_der(m, D, p ,f)*x"
                                                                             "f(p+x)"
                                                                             "f(p)")
                                                                            (("2"
                                                                              (ASSERT)
                                                                              (("2"
                                                                                (REPLACE
                                                                                 -8)
                                                                                (("2"
                                                                                  (REPLACE
                                                                                   -10)
                                                                                  (("2"
                                                                                    (REPLACE
                                                                                     -6)
                                                                                    (("2"
                                                                                      (EXPAND
                                                                                       "max"
                                                                                       -4)
                                                                                      (("2"
                                                                                        (EXPAND
                                                                                         "rows")
                                                                                        (("2"
                                                                                          (ASSERT)
                                                                                          NIL
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL)
                                                           ("2" (ASSERT)
                                                            (("2"
                                                              (TYPEPRED "i")
                                                              (("2"
                                                                (TYPEPRED
                                                                 "f(p + x) - f(p) - pre_der(m, D,p, f)*x"
                                                                 "f(p + x) - f(p)"
                                                                 "pre_der(m, D, p, f)*x"
                                                                 "f(p+x)"
                                                                 "f(p)")
                                                                (("2"
                                                                  (HIDE -3 -5
                                                                   -7)
                                                                  (("2"
                                                                    (REPLACE
                                                                     -5)
                                                                    (("2"
                                                                      (REPLACE
                                                                       -4)
                                                                      (("2"
                                                                        (REPLACE
                                                                         -7)
                                                                        (("2"
                                                                          (HIDE
                                                                           -1)
                                                                          (("2"
                                                                            (HIDE
                                                                             -5)
                                                                            (("2"
                                                                              (EXPAND
                                                                               "rows")
                                                                              (("2"
                                                                                (EXPAND
                                                                                 "max")
                                                                                (("2"
                                                                                  (REPLACE
                                                                                   -1)
                                                                                  (("2"
                                                                                    (ASSERT)
                                                                                    NIL
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL)
                                                     ("2"
                                                      (TYPEPRED "f(p+x)-f(p)"
                                                       "f(p+x)" "f(p)")
                                                      (("2" (REPLACE -4)
                                                        (("2" (REPLACE -6)
                                                          (("2"
                                                            (EXPAND "max" -2)
                                                            (("2" (ASSERT)
                                                              (("2"
                                                                (TYPEPRED "i")
                                                                (("2" (ASSERT)
                                                                  (("2"
                                                                    (TYPEPRED
                                                                     "pre_der(m, D,p, f) * x")
                                                                    (("2"
                                                                      (HIDE -1)
                                                                      (("2"
                                                                        (EXPAND
                                                                         "rows"
                                                                         -1)
                                                                        (("2"
                                                                          (ASSERT)
                                                                          NIL
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2"
                                                    (TYPEPRED "f(p+x)-f(p)"
                                                     "f(p+x)" "f(p)")
                                                    (("2"
                                                      (TYPEPRED
                                                       "pre_der(m, D,p, f) * x")
                                                      (("2" (ASSERT)
                                                        (("2" (EXPAND "rows")
                                                          (("2" (ASSERT)
                                                            (("2" (REPLACE -6)
                                                              (("2"
                                                                (REPLACE -8)
                                                                (("2"
                                                                  (EXPAND "max"
                                                                          -4)
                                                                  (("2"
                                                                    (ASSERT)
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (HIDE -1)
                                                (("2"
                                                  (TYPEPRED
                                                   "pre_der(m, D,p, f)")
                                                  (("2" (ASSERT)
                                                    (("2"
                                                      (TYPEPRED "f(p+x)-f(p)"
                                                       "f(p+x)" "f(p)")
                                                      (("2" (REPLACE -4)
                                                        (("2" (REPLACE -6)
                                                          (("2"
                                                            (EXPAND "max" -2)
                                                            (("2" (ASSERT)
                                                              (("2"
                                                                (TYPEPRED
                                                                 "(pre_der(m, D,p, f) * x)")
                                                                (("2" (ASSERT)
                                                                  (("2"
                                                                    (EXPAND
                                                                     "rows")
                                                                    (("2"
                                                                      (ASSERT)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("3"
                                                (TYPEPRED "f(p+x)-f(p)"
                                                 "f(p+x)" "f(p)")
                                                (("3" (REPLACE -4)
                                                  (("3" (REPLACE -6)
                                                    (("3" (EXPAND "max")
                                                      (("3" (ASSERT) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (EXPAND "abs" 1 1)
                              (("2" (LIFT-IF 1)
                                (("2" (SPLIT 1)
                                  (("1" (FLATTEN)
                                    (("1" (MULT-BY -1 " norm_inf(n)(x)")
                                      (("1" (ASSERT) NIL NIL)
                                       ("2" (TYPEPRED "x")
                                        (("2" (TYPEPRED "norm_inf(n)")
                                          (("2" (EXPAND "norm?" -1)
                                            (("2" (FLATTEN)
                                              (("2" (INST -3 "x")
                                                (("2" (ASSERT) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (PROPAX) NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (LEMMA "derivable_nth_mat_point")
              (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|der_p?| CONST-DECL "bool" |convergence_vec2vec| NIL)
    (|derivable_nth_mat_point| FORMULA-DECL NIL |convergence_vec2vec| NIL)
    (NQ CONST-DECL "real" |convergence_vec2vec| NIL)
    (|both_sides_times_pos_lt1| FORMULA-DECL NIL |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|div_cancel2| FORMULA-DECL NIL |real_props| NIL)
    (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal"
     |real_types| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|norm_inf_nth| FORMULA-DECL NIL |norms| NIL) NIL
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|pre_der_nth_p| FORMULA-DECL NIL |convergence_vec2vec| NIL)
    (|row| CONST-DECL "Vector" |matrices| |matrices|)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|abs_div| FORMULA-DECL NIL |real_props| NIL)
    (|der_f| CONST-DECL
     "{gg: VectorN(n) | convergence_zero?(NQ(D, p), NQ(f, gg, p), zero_vec(n))}"
     |differentiable_def| NIL)
    (* CONST-DECL "real" |matrices| |matrices|)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (NQ CONST-DECL "real" |differentiable_def| NIL)
    (|matv_nth| FORMULA-DECL NIL |mat_vec_mult| NIL) NIL
    (|nth_subtract| FORMULA-DECL NIL |vector_arithmetic| NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|norm?| CONST-DECL "bool" |norms| NIL)
    (|norm_inf| CONST-DECL "(norm?(m))" |norms| NIL)
    (|Vector| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (- CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices| |matrices|)
    (+ CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices| |matrices|)
    (|FullMatrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|Matrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (<= CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|columns| DEF-DECL "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}"
     |matrices| |matrices|)
    (|rows| CONST-DECL "nat" |matrices| |matrices|)
    (* CONST-DECL "VectorN(rows(A))" |mat_vec_mult| NIL)
    (|MatrixMN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|pre_der| DEF-DECL "MatrixMN(m, n)" |convergence_vec2vec| NIL)
    (NQ CONST-DECL "bool" |differentiable_def| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|zero_vec| DEF-DECL "VectorN(m)" |vector_arithmetic| NIL)
    (|del_nth_p| FORMULA-DECL NIL |convergence_vec2vec| NIL)
    (|del_nth| FORMULA-DECL NIL |convergence_vec2vec| NIL)
    (|del_all_p| DEF-DECL "posreal" |convergence_vec2vec| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) NIL
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|n| FORMAL-CONST-DECL "posnat" |convergence_vec2vec| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|domain| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL) NIL
    (|vec2real_f| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL)
    (|differentiable?| CONST-DECL "bool" |differentiable_def| NIL) NIL
    (|vec2vec| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL)
    (|nth| CONST-DECL "vec2real_f" |convergence_vec2vec| NIL) NIL NIL
    (|convergence_zero?| CONST-DECL "bool" |vector_sequences| NIL) NIL)
   SHOSTAK))
 (|der_nth_mat_point_TCC1| 0
  (|der_nth_mat_point_TCC1-1| |nil| 3853429765
   ("" (LEMMA "dd_e_partial_implies_dd")
    (("" (SKEEP) (("" (INST?) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)
   (NIL
    (|deriv_domain_e_partial?| CONST-DECL "bool" |derivative_domain_multi| NIL)
    (|domain| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|dd_e_partial_implies_dd| FORMULA-DECL NIL |derivative_domain_multi| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|n| FORMAL-CONST-DECL "posnat" |convergence_vec2vec| NIL))
   NIL
   (|der_nth_mat_point| SUBTYPE "convergence_vec2vec.D"
    "(derivative_domain_multi[convergence_vec2vec.n].deriv_domain?)")))
 (|der_nth_mat_point_TCC2| 0
  (|der_nth_mat_point_TCC2-1| |nil| 3853435537 ("" (SUBTYPE-TCC) NIL NIL)
   (NIL
    (|deriv_domain_e_partial?| CONST-DECL "bool" |derivative_domain_multi| NIL)
    (|domain| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    NIL (|Matrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|MatrixMN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|norm_inf| CONST-DECL "(norm?(m))" |norms| NIL)
    (|sub| CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices|
     |matrices|)
    (- CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices| |matrices|)
    (|norm_inf| CONST-DECL "[(cons?) -> nonneg_real]" |norms| NIL)
    (+ CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices| |matrices|)
    (|rows| CONST-DECL "nat" |matrices| |matrices|)
    (* CONST-DECL "VectorN(rows(A))" |mat_vec_mult| NIL)
    (NQ CONST-DECL "real" |convergence_vec2vec| NIL)
    (|n| FORMAL-CONST-DECL "posnat" |convergence_vec2vec| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|convergence_zero?| CONST-DECL "bool" |vector_sequences| NIL)
    (|differentiable?| CONST-DECL "bool" |convergence_vec2vec| NIL)
    (|der_f| CONST-DECL "{T: MatrixMN(m, n) |
   convergence_zero?(NQ(D, p), NQ(m, f, p, T), zero_vec(n))}"
     |convergence_vec2vec| NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL))
   NIL
   (|der_nth_mat_point| SUBTYPE "convergence_vec2vec.i"
    "below[length[list[real]](der_f(m, D, p)(f))]")))
 (|der_nth_mat_point_TCC3| 0
  (|der_nth_mat_point_TCC3-1| |nil| 3853435537
   ("" (SKEEP)
    (("" (LEMMA "derivable_nth_mat_point")
      (("" (INST?) (("" (ASSERT) NIL NIL)) NIL)) NIL))
    NIL)
   ((|derivable_nth_mat_point| FORMULA-DECL NIL |convergence_vec2vec| NIL)
    (|vec2vec| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL)
    (|deriv_domain_e_partial?| CONST-DECL "bool" |derivative_domain_multi| NIL)
    NIL (|domain| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|n| FORMAL-CONST-DECL "posnat" |convergence_vec2vec| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) NIL)
   NIL
   (|der_nth_mat_point| SUBTYPE
    "convergence_vec2vec.nth(convergence_vec2vec.m, convergence_vec2vec.f, convergence_vec2vec.i)"
    "{ff: domain_vec2real_def[convergence_vec2vec.n].vec2real_f | differentiable_def[convergence_vec2vec.n].differentiable?(convergence_vec2vec.D, ff, convergence_vec2vec.p)}")))
 (|der_nth_mat_point| 0
  (|der_nth_mat_point-1| |nil| 3853841575
   ("" (SKEEP)
    (("" (SKEEP)
      (("" (LEMMA "conv_zero_nth")
        (("" (INST?)
          (("" (LEMMA "init_partial_def.der_f_unique")
            (("" (INST?) (("" (ASSERT) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|n| FORMAL-CONST-DECL "posnat" |convergence_vec2vec| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|domain| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL) NIL
    (|deriv_domain_e_partial?| CONST-DECL "bool" |derivative_domain_multi| NIL)
    (|vec2vec| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL)
    (|Matrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|MatrixMN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|vec2real_f| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL)
    (|convergence_zero?| CONST-DECL "bool" |vector_sequences| NIL)
    (NQ CONST-DECL "bool" |differentiable_def| NIL)
    (NQ CONST-DECL "real" |convergence_vec2vec| NIL)
    (|zero_vec| DEF-DECL "VectorN(m)" |vector_arithmetic| NIL)
    (|differentiable?| CONST-DECL "bool" |convergence_vec2vec| NIL)
    (|der_f| CONST-DECL "{T: MatrixMN(m, n) |
   convergence_zero?(NQ(D, p), NQ(m, f, p, T), zero_vec(n))}"
     |convergence_vec2vec| NIL)
    (|nth| CONST-DECL "vec2real_f" |convergence_vec2vec| NIL)
    (|differentiable?| CONST-DECL "bool" |differentiable_def| NIL)
    (|der_f_unique| FORMULA-DECL NIL |init_partial_def| NIL)
    (|conv_zero_nth| FORMULA-DECL NIL |convergence_vec2vec| NIL) NIL)
   SHOSTAK))
 (|derivable_subtype_TCC1| 0
  (|derivable_subtype_TCC1-1| |nil| 3853962293
   ("" (SKEEP)
    (("" (TYPEPRED "D")
      (("" (EXPAND "deriv_domain_sub?")
        (("" (FLATTEN) (("" (INST -2 "p") NIL NIL)) NIL)) NIL))
      NIL))
    NIL)
   (NIL (|deriv_domain_sub?| CONST-DECL "bool" |derivative_domain_multi| NIL)
    (|domain| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|n| FORMAL-CONST-DECL "posnat" |convergence_vec2vec| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) NIL)
   NIL
   (|derivable_subtype| SUBTYPE "convergence_vec2vec.p"
    "(convergence_vec2vec.U)")))
 (|derivable_subtype_TCC2| 0
  (|derivable_subtype_TCC2-1| |nil| 3853962293 ("" (SUBTYPE-TCC) NIL NIL)
   (NIL (|deriv_domain_sub?| CONST-DECL "bool" |derivative_domain_multi| NIL)
    (|domain| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nzint_abs_is_pos| APPLICATION-JUDGEMENT "{j: posint | j >= i}"
     |real_defs| NIL)
    (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal"
     |real_types| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    NIL NIL
    (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types|
     NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) NIL
    NIL NIL
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|add| DEF-DECL "VectorN(max(length(v1), length(v2)))" |matrices|
     |matrices|)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) NIL
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|Vector| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|scal| DEF-DECL "VectorN(length(v2))" |matrices| |matrices|)
    (|zero_vec| DEF-DECL "VectorN(m)" |vector_arithmetic| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|Matrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|MatrixMN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|norm_inf| CONST-DECL "(norm?(m))" |norms| NIL)
    (|sub| CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices|
     |matrices|)
    (- CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices| |matrices|)
    (|norm_inf| CONST-DECL "[(cons?) -> nonneg_real]" |norms| NIL)
    (|rows| CONST-DECL "nat" |matrices| |matrices|)
    (* CONST-DECL "VectorN(rows(A))" |mat_vec_mult| NIL)
    (NQ CONST-DECL "real" |convergence_vec2vec| NIL)
    (|n| FORMAL-CONST-DECL "posnat" |convergence_vec2vec| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|convergence_zero?| CONST-DECL "bool" |vector_sequences| NIL)
    (|differentiable?| CONST-DECL "bool" |convergence_vec2vec| NIL) NIL
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|norm?| CONST-DECL "bool" |norms| NIL)
    (+ CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices| |matrices|)
    (* CONST-DECL "VectorN(length(v2))" |matrices| |matrices|))
   NIL
   (|derivable_subtype| SUBTYPE "convergence_vec2vec.D"
    "(derivative_domain_multi[convergence_vec2vec.n].deriv_domain?)")))
 (|derivable_subtype| 0
  (|derivable_subtype-1| |nil| 3853962462
   ("" (SKEEP)
    (("" (EXPAND "differentiable?")
      (("" (SKEEP)
        (("" (INST 1 "T")
          (("" (EXPAND "convergence_zero?")
            (("" (SKEEP)
              (("" (INST -1 "epsilon")
                (("" (SKEEP)
                  (("" (INST 1 "delta")
                    (("" (SKEEP)
                      (("" (INST -1 "x")
                        (("1" (ASSERT) NIL NIL)
                         ("2" (TYPEPRED "x")
                          (("2" (TYPEPRED "D")
                            (("2" (EXPAND "deriv_domain_sub?" -1)
                              (("2" (FLATTEN)
                                (("2" (EXPAND "NQ")
                                  (("2" (INST -2 "p+x") NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|differentiable?| CONST-DECL "bool" |convergence_vec2vec| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|Matrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|n| FORMAL-CONST-DECL "posnat" |convergence_vec2vec| NIL)
    (|MatrixMN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (NQ CONST-DECL "real" |convergence_vec2vec| NIL)
    (|Vector| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (+ CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices| |matrices|)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|domain| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (NQ CONST-DECL "bool" |differentiable_def| NIL) NIL NIL
    (|deriv_domain_sub?| CONST-DECL "bool" |derivative_domain_multi| NIL) NIL
    NIL (/= CONST-DECL "boolean" |notequal| NIL)
    (|zero_vec| DEF-DECL "VectorN(m)" |vector_arithmetic| NIL) NIL
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|convergence_zero?| CONST-DECL "bool" |vector_sequences| NIL) NIL)
   SHOSTAK))
 (|der_subtype_TCC1| 0
  (|der_subtype_TCC1-1| |nil| 3853963057
   ("" (SKEEP)
    (("" (LEMMA "derivable_subtype") (("" (INST?) (("" (ASSERT) NIL NIL)) NIL))
      NIL))
    NIL)
   ((|derivable_subtype| FORMULA-DECL NIL |convergence_vec2vec| NIL)
    (|vec2vec| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL)
    (|deriv_domain_e_partial?| CONST-DECL "bool" |derivative_domain_multi| NIL)
    (|deriv_domain_sub?| CONST-DECL "bool" |derivative_domain_multi| NIL) NIL
    (|domain| TYPE-EQ-DECL NIL |domain_vec2real_def| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|n| FORMAL-CONST-DECL "posnat" |convergence_vec2vec| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) NIL)
   NIL
   (|der_subtype| SUBTYPE "convergence_vec2vec.f"
    "{ff: domain_vec2real_def[convergence_vec2vec.n].vec2vec(convergence_vec2vec.m) | convergence_vec2vec.differentiable?(convergence_vec2vec.m, convergence_vec2vec.D, ff, convergence_vec2vec.p)}")))
 (|der_subtype| 0
  (|der_subtype-1| |nil| 3853963226
   ("" (SKEEP)
    (("" (LEMMA "der_f_unique")
      (("" (INST -1 "m" "D" "f" "p" "der_f(m,U,p)(f)")
        (("1" (ASSERT) (("1" (EXPAND "der_f") (("1" (ASSERT) NIL NIL)) NIL))
          NIL)
         ("2" (TYPEPRED "der_f(m,U,p)(f)")
          (("2" (HIDE -1)
            (("2" (HIDE -2)
              (("2" (EXPAND "convergence_zero?")
                (("2" (SKEEP)
                  (("2" (INST -2 "epsilon")
                    (("2" (SKEEP)
                      (("2" (INST 1 "delta")
                        (("2" (SKEEP)
                          (("2" (INST -2 "x")
                            (("1" (ASSERT) NIL NIL)
                             ("2" (TYPEPRED "x" "D")
                              (("2" (EXPAND "NQ")
                                (("2" (EXPAND "deriv_domain_sub?")
                                  (("2" (FLATTEN)
                                    (("2" (INST -5 "p+x") NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("3" (TYPEPRED "D") (("3" (ASSERT) (("3" (POSTPONE) NIL NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK)))

