(|Glossary_Plaidypvs|
 (|dl_axiom_example| 0
  (|dl_axiom_example-1| |nil| 3913238948
   ("" (SKEEP) (("" (DL-AXIOM 3) NIL NIL)) NIL)
   ((|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|move_to_head_rec| DEF-DECL "Formulas" |dynamic_logic| |dL|)
    (|is_dlfnum| CONST-DECL "bool" |dynamic_logic| |dL|)
    (|move_to_head| CONST-DECL "Formulas" |dynamic_logic| |dL|)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|Formulas| TYPE-EQ-DECL NIL |bool_expr| |dL|)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (= CONST-DECL "BoolExpr" |bool_expr| |dL|)
    (|dLVar| TYPE-DECL NIL |hp_def| |dL|)
    (|val| CONST-DECL "real" |hp_def| |dL|)
    (|cnst| CONST-DECL "real" |hp_def| |dL|)
    (>= CONST-DECL "BoolExpr" |bool_expr| |dL|)
    (|dl_moveR| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|dl_axiom| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|bijective?| CONST-DECL "bool" |functions| NIL))
   SHOSTAK))
 (|dl_andL_example| 0
  (|dl_andL_example-1| |nil| 3913238948
   ("" (SKEEP) (("" (DL-ANDL) (("" (DL-AXIOM) NIL NIL)) NIL)) NIL)
   ((|bijective?| CONST-DECL "bool" |functions| NIL)
    (|val| CONST-DECL "real" |hp_def| |dL|)
    (|dLVar| TYPE-DECL NIL |hp_def| |dL|)
    (>= CONST-DECL "BoolExpr" |bool_expr| |dL|)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|dl_andL| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|Formulas| TYPE-EQ-DECL NIL |bool_expr| |dL|)
    (= CONST-DECL "BoolExpr" |bool_expr| |dL|)
    (|cnst| CONST-DECL "real" |hp_def| |dL|)
    (|dl_axiom| FORMULA-DECL NIL |dynamic_logic| |dL|))
   SHOSTAK))
 (|dl_andR_example| 0
  (|dl_andR_example-1| |nil| 3913238949
   ("" (SKEEP)
    (("" (DL-FLATTEN)
      (("" (DL-ANDR) (("1" (DL-AXIOM) NIL NIL) ("2" (DL-ASSERT) NIL NIL)) NIL))
      NIL))
    NIL)
   ((|cnst| CONST-DECL "real" |hp_def| |dL|)
    (DLAND CONST-DECL "bool" |bool_expr| |dL|)
    (|val| CONST-DECL "real" |hp_def| |dL|)
    (|dLVar| TYPE-DECL NIL |hp_def| |dL|)
    (>= CONST-DECL "BoolExpr" |bool_expr| |dL|)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|Formulas| TYPE-EQ-DECL NIL |bool_expr| |dL|)
    (|dl_impliesR| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|\|-| CONST-DECL "bool" |dynamic_logic| |dL|)
    (|for| CONST-DECL "T" |for_iterate| |structures|)
    (|for_it| DEF-DECL
     "{t: T | t = for_def(i, upto, a, ext2int(upfrom, upto, f))}" |for_iterate|
     |structures|)
    (|iterate_left| CONST-DECL "T" |for_iterate| |structures|)
    (|dl_axiom| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|dl_andR| FORMULA-DECL NIL |dynamic_logic| |dL|))
   SHOSTAK))
 (|dl_anyb_example| 0
  (|dl_anyb_example-1| |nil| 3913238949
   ("" (SKEEP)
    (("" (DL-ANYB)
      (("" (DL-SKOLEM "X")
        (("" (DL-SUBS) (("" (DL-FLATTEN) (("" (DL-ASSERT) NIL NIL)) NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|bijective?| CONST-DECL "bool" |functions| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|dl_anyb_with| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (>= CONST-DECL "BoolExpr" |bool_expr| |dL|)
    (|val| CONST-DECL "real" |hp_def| |dL|)
    (|cnst| CONST-DECL "real" |hp_def| |dL|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|mapexpr_inj| CONST-DECL "bool" |hp_def| |dL|)
    (|MapExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|dLVar| TYPE-DECL NIL |hp_def| |dL|)
    (DLIMPLIES CONST-DECL "bool" |bool_expr| |dL|)
    (SUB CONST-DECL "bool" |substitution| |dL|)
    (|Substitution| TYPE-EQ-DECL NIL |substitution| |dL|)
    (DLFORALL CONST-DECL "bool" |bool_expr| |dL|)
    (|QBoolExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|SUB_MapVar| DEF-DECL
     "{re: RealExpr | FORALL (env: Environment): re(env) = SUB_Re(l)(val(v))(env)}"
     |substitution| |dL|)
    (|null_MapExprInj| NAME-JUDGEMENT "MapExprInj" |hp_def| |dL|)
    (|dl_sub_implies| FORMULA-DECL NIL |substitution| |dL|)
    (|dl_sub_ge| FORMULA-DECL NIL |substitution| |dL|)
    (|dl_subre_const| FORMULA-DECL NIL |substitution| |dL|)
    (|dl_subre_val| FORMULA-DECL NIL |substitution| |dL|)
    (|\|-| CONST-DECL "bool" |dynamic_logic| |dL|)
    (|for| CONST-DECL "T" |for_iterate| |structures|)
    (|for_it| DEF-DECL
     "{t: T | t = for_def(i, upto, a, ext2int(upfrom, upto, f))}" |for_iterate|
     |structures|)
    (|iterate_left| CONST-DECL "T" |for_iterate| |structures|)
    (|dl_impliesR| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|Formulas| TYPE-EQ-DECL NIL |bool_expr| |dL|)
    (|dl_forallR| FORMULA-DECL NIL |dynamic_logic| |dL|))
   SHOSTAK))
 (|dl_anyd_example| 0
  (|dl_anyd_example-1| |nil| 3913238950
   ("" (SKEEP)
    (("" (DL-ANYD)
      (("" (DL-INST "1")
        (("" (DL-SUBS)
          (("" (DL-ANDR) (("1" (DL-ASSERT) NIL NIL) ("2" (DL-ASSERT) NIL NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|bijective?| CONST-DECL "bool" |functions| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|dl_anyd_with| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (>= CONST-DECL "BoolExpr" |bool_expr| |dL|)
    (|val| CONST-DECL "real" |hp_def| |dL|)
    (|cnst| CONST-DECL "real" |hp_def| |dL|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|mapexpr_inj| CONST-DECL "bool" |hp_def| |dL|)
    (|MapExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|dLVar| TYPE-DECL NIL |hp_def| |dL|)
    (DLAND CONST-DECL "bool" |bool_expr| |dL|)
    (SUB CONST-DECL "bool" |substitution| |dL|)
    (|Substitution| TYPE-EQ-DECL NIL |substitution| |dL|)
    (DLEXISTS CONST-DECL "bool" |bool_expr| |dL|)
    (|QBoolExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|SUB_MapVar| DEF-DECL
     "{re: RealExpr | FORALL (env: Environment): re(env) = SUB_Re(l)(val(v))(env)}"
     |substitution| |dL|)
    (|null_MapExprInj| NAME-JUDGEMENT "MapExprInj" |hp_def| |dL|)
    (|dl_sub_and| FORMULA-DECL NIL |substitution| |dL|)
    (|dl_sub_ge| FORMULA-DECL NIL |substitution| |dL|)
    (|dl_subre_const| FORMULA-DECL NIL |substitution| |dL|)
    (|dl_subre_val| FORMULA-DECL NIL |substitution| |dL|)
    (|\|-| CONST-DECL "bool" |dynamic_logic| |dL|)
    (|for| CONST-DECL "T" |for_iterate| |structures|)
    (|for_it| DEF-DECL
     "{t: T | t = for_def(i, upto, a, ext2int(upfrom, upto, f))}" |for_iterate|
     |structures|)
    (|iterate_left| CONST-DECL "T" |for_iterate| |structures|)
    (|dl_andR| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|Formulas| TYPE-EQ-DECL NIL |bool_expr| |dL|)
    (|dl_existsR| FORMULA-DECL NIL |dynamic_logic| |dL|))
   SHOSTAK))
 (|dl_assert_example_TCC1| 0
  (|dl_assert_example_TCC1-1| NIL 3921932629
   ("" (SKEEP) (("" (DL-MAPEXPR_INJ) NIL NIL)) NIL)
   ((|dLVar| TYPE-DECL NIL |hp_def| |dL|)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|MapExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|val| CONST-DECL "real" |hp_def| |dL|)
    (|cnst| CONST-DECL "real" |hp_def| |dL|)
    (|mapexpr_inj_distinct_vars| FORMULA-DECL NIL |hp_def| |dL|))
   NIL
   (|dl_assert_example| SUBTYPE
    "(: (Glossary_Plaidypvs.x, (real_fun_ops[Environment].+)(hp_def.val(Glossary_Plaidypvs.x), hp_def.cnst(1))), (Glossary_Plaidypvs.y, hp_def.val(Glossary_Plaidypvs.x)) :)"
    "Assigns" (114 15 114 53))))
 (|dl_assert_example_TCC2| 0
  (|dl_assert_example_TCC2-1| NIL 3921932629
   ("" (SKEEP*) (("" (DL-MAPEXPR_INJ) NIL NIL)) NIL)
   ((|mapexpr_inj_distinct_vars| FORMULA-DECL NIL |hp_def| |dL|)
    (|cnst| CONST-DECL "real" |hp_def| |dL|)
    (|val| CONST-DECL "real" |hp_def| |dL|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|MapExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|dLVar| TYPE-DECL NIL |hp_def| |dL|))
   NIL
   (|dl_assert_example| SUBTYPE
    "(: (Glossary_Plaidypvs.x, (real_fun_ops[Environment].+)(hp_def.val(Glossary_Plaidypvs.x), hp_def.cnst(2))), (Glossary_Plaidypvs.y, hp_def.val(Glossary_Plaidypvs.x)) :)"
    "Assigns" (115 15 115 53))))
 (|dl_assert_example| 0
  (|dl_assert_example-1| |nil| 3913238950
   ("" (SKEEP) (("" (BETA) (("" (DL-ASSERT) NIL NIL)) NIL)) NIL)
   ((|bijective?| CONST-DECL "bool" |functions| NIL)
    (|SUB_MapVar| DEF-DECL
     "{re: RealExpr | FORALL (env: Environment): re(env) = SUB_Re(l)(val(v))(env)}"
     |substitution| |dL|)
    (|dl_subre_val| FORMULA-DECL NIL |substitution| |dL|)
    (|dl_subre_minus| FORMULA-DECL NIL |substitution| |dL|)
    (|dl_subre_const| FORMULA-DECL NIL |substitution| |dL|)
    (|SUB_Re| CONST-DECL "real" |substitution| |dL|)
    (|dl_sub_gt| FORMULA-DECL NIL |substitution| |dL|)
    (|dl_sub_or| FORMULA-DECL NIL |substitution| |dL|)
    (|dl_subre_plus| FORMULA-DECL NIL |substitution| |dL|)
    (|Substitution| TYPE-EQ-DECL NIL |substitution| |dL|)
    (SUB CONST-DECL "bool" |substitution| |dL|)
    (|dl_assignb| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|dl_choiceb| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (ALLRUNS CONST-DECL "bool" |bool_expr| |dL|)
    (|null_MapExprInj| NAME-JUDGEMENT "MapExprInj" |hp_def| |dL|)
    (|dl_composeb| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (HP TYPE-DECL NIL |HP_adt| |dL|)
    (|union?| ADT-RECOGNIZER-DECL "[HP -> boolean]" |HP_adt| |dL|)
    (UNION ADT-CONSTRUCTOR-DECL "[[HP, HP] -> (union?)]" |HP_adt| |dL|)
    (|dLVar| TYPE-DECL NIL |hp_def| |dL|)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|MapExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|mapexpr_inj| CONST-DECL "bool" |hp_def| |dL|)
    (|Assigns| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|assign?| ADT-RECOGNIZER-DECL "[HP -> boolean]" |HP_adt| |dL|)
    (ASSIGN ADT-CONSTRUCTOR-DECL "[Assigns -> (assign?)]" |HP_adt| |dL|)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|val| CONST-DECL "real" |hp_def| |dL|)
    (|cnst| CONST-DECL "real" |hp_def| |dL|)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (DLOR CONST-DECL "bool" |bool_expr| |dL|)
    (> CONST-DECL "BoolExpr" |bool_expr| |dL|)
    (|dl_orR| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|dl_andR| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|Formulas| TYPE-EQ-DECL NIL |bool_expr| |dL|)
    (|\|-| CONST-DECL "bool" |dynamic_logic| |dL|)
    (|for| CONST-DECL "T" |for_iterate| |structures|)
    (|for_it| DEF-DECL
     "{t: T | t = for_def(i, upto, a, ext2int(upfrom, upto, f))}" |for_iterate|
     |structures|)
    (|iterate_left| CONST-DECL "T" |for_iterate| |structures|)
    (|pairwise_distinct_vars?| DEF-DECL "{b: bool |
   b =
    FORALL (i, j: below(length(l))):
      i /= j IMPLIES NOT dlvar_index(nth(l, i)) = dlvar_index(nth(l, j))}"
     |hp_def| |dL|)
    (|distinct_var?| DEF-DECL "{b: bool |
   b =
    FORALL (i: below(length(l))):
      NOT dlvar_index(nth(l, i)) = dlvar_index(v)}"
     |hp_def| |dL|))
   SHOSTAK))
 (|dl_assignb_example_TCC1| 0
  (|dl_assignb_example_TCC1-1| NIL 3921932629
   ("" (SKEEP) (("" (DL-MAPEXPR_INJ) NIL NIL)) NIL)
   ((|dLVar| TYPE-DECL NIL |hp_def| |dL|)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|MapExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|cnst| CONST-DECL "real" |hp_def| |dL|)
    (|val| CONST-DECL "real" |hp_def| |dL|)
    (|mapexpr_inj_distinct_vars| FORMULA-DECL NIL |hp_def| |dL|))
   NIL
   (|dl_assignb_example| SUBTYPE
    "(: (Glossary_Plaidypvs.x, hp_def.cnst(10)), (Glossary_Plaidypvs.y, (real_fun_ops[Environment].+)(hp_def.val(Glossary_Plaidypvs.x), hp_def.cnst(10))), (Glossary_Plaidypvs.z, (real_fun_ops[Environment].-)((real_fun_ops[Environment].+)(hp_def.val(Glossary_Plaidypvs.z), hp_def.val(Glossary_Plaidypvs.x)), hp_def.cnst(10))) :)"
    "Assigns" (131 18 133 37))))
 (|dl_assignb_example| 0
  (|dl_assignb_example-1| |nil| 3913238951
   ("" (SKEEP) (("" (DL-ASSIGNB) (("" (DL-ASSERT) NIL NIL)) NIL)) NIL)
   ((|bijective?| CONST-DECL "bool" |functions| NIL)
    (|val| CONST-DECL "real" |hp_def| |dL|)
    (|cnst| CONST-DECL "real" |hp_def| |dL|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|mapexpr_inj| CONST-DECL "bool" |hp_def| |dL|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|MapExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|dLVar| TYPE-DECL NIL |hp_def| |dL|)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|dl_assignb| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (= CONST-DECL "BoolExpr" |bool_expr| |dL|)
    (|Assigns| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|distinct_var?| DEF-DECL "{b: bool |
   b =
    FORALL (i: below(length(l))):
      NOT dlvar_index(nth(l, i)) = dlvar_index(v)}"
     |hp_def| |dL|)
    (|pairwise_distinct_vars?| DEF-DECL "{b: bool |
   b =
    FORALL (i, j: below(length(l))):
      i /= j IMPLIES NOT dlvar_index(nth(l, i)) = dlvar_index(nth(l, j))}"
     |hp_def| |dL|)
    (|SUB_MapVar| DEF-DECL
     "{re: RealExpr | FORALL (env: Environment): re(env) = SUB_Re(l)(val(v))(env)}"
     |substitution| |dL|)
    (|null_MapExprInj| NAME-JUDGEMENT "MapExprInj" |hp_def| |dL|)
    (|Substitution| TYPE-EQ-DECL NIL |substitution| |dL|)
    (|dl_sub_eq| FORMULA-DECL NIL |substitution| |dL|)
    (|dl_subre_const| FORMULA-DECL NIL |substitution| |dL|)
    (|dl_subre_val| FORMULA-DECL NIL |substitution| |dL|)
    (|iterate_left| CONST-DECL "T" |for_iterate| |structures|)
    (|for_it| DEF-DECL
     "{t: T | t = for_def(i, upto, a, ext2int(upfrom, upto, f))}" |for_iterate|
     |structures|)
    (|for| CONST-DECL "T" |for_iterate| |structures|)
    (|\|-| CONST-DECL "bool" |dynamic_logic| |dL|))
   SHOSTAK))
 (|dl_assignd_example_TCC1| 0
  (|dl_assignd_example_TCC1-1| NIL 3921932629
   ("" (SKEEP) (("" (DL-MAPEXPR_INJ) NIL NIL)) NIL)
   ((|dLVar| TYPE-DECL NIL |hp_def| |dL|)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|MapExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|cnst| CONST-DECL "real" |hp_def| |dL|)
    (|val| CONST-DECL "real" |hp_def| |dL|)
    (|mapexpr_inj_distinct_vars| FORMULA-DECL NIL |hp_def| |dL|))
   NIL
   (|dl_assignd_example| SUBTYPE
    "(: (Glossary_Plaidypvs.x, hp_def.cnst(10)), (Glossary_Plaidypvs.y, (real_fun_ops[Environment].+)(hp_def.val(Glossary_Plaidypvs.x), hp_def.cnst(10))) :)"
    "Assigns" (146 19 147 27))))
 (|dl_assignd_example| 0
  (|dl_assignd_example-1| |nil| 3913238951
   ("" (SKEEP) (("" (DL-ASSIGND) (("" (DL-ASSERT) NIL NIL)) NIL)) NIL)
   ((|bijective?| CONST-DECL "bool" |functions| NIL)
    (|val| CONST-DECL "real" |hp_def| |dL|)
    (|cnst| CONST-DECL "real" |hp_def| |dL|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|mapexpr_inj| CONST-DECL "bool" |hp_def| |dL|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|MapExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|dLVar| TYPE-DECL NIL |hp_def| |dL|)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|dl_assignd| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (= CONST-DECL "BoolExpr" |bool_expr| |dL|)
    (|Assigns| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|distinct_var?| DEF-DECL "{b: bool |
   b =
    FORALL (i: below(length(l))):
      NOT dlvar_index(nth(l, i)) = dlvar_index(v)}"
     |hp_def| |dL|)
    (|pairwise_distinct_vars?| DEF-DECL "{b: bool |
   b =
    FORALL (i, j: below(length(l))):
      i /= j IMPLIES NOT dlvar_index(nth(l, i)) = dlvar_index(nth(l, j))}"
     |hp_def| |dL|)
    (|SUB_MapVar| DEF-DECL
     "{re: RealExpr | FORALL (env: Environment): re(env) = SUB_Re(l)(val(v))(env)}"
     |substitution| |dL|)
    (|null_MapExprInj| NAME-JUDGEMENT "MapExprInj" |hp_def| |dL|)
    (|Substitution| TYPE-EQ-DECL NIL |substitution| |dL|)
    (|dl_sub_eq| FORMULA-DECL NIL |substitution| |dL|)
    (|dl_subre_const| FORMULA-DECL NIL |substitution| |dL|)
    (|dl_subre_val| FORMULA-DECL NIL |substitution| |dL|)
    (|iterate_left| CONST-DECL "T" |for_iterate| |structures|)
    (|for_it| DEF-DECL
     "{t: T | t = for_def(i, upto, a, ext2int(upfrom, upto, f))}" |for_iterate|
     |structures|)
    (|for| CONST-DECL "T" |for_iterate| |structures|)
    (|\|-| CONST-DECL "bool" |dynamic_logic| |dL|))
   SHOSTAK))
 (|dl_boxd_example_TCC1| 0
  (|dl_boxd_example_TCC1-1| NIL 3921932629
   ("" (SKEEP) (("" (DL-MAPEXPR_INJ) NIL NIL)) NIL)
   ((|dLVar| TYPE-DECL NIL |hp_def| |dL|)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|MapExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|val| CONST-DECL "real" |hp_def| |dL|)
    (|pairwise_distinct_vars?| DEF-DECL "{b: bool |
   b =
    FORALL (i, j: below(length(l))):
      i /= j IMPLIES NOT dlvar_index(nth(l, i)) = dlvar_index(nth(l, j))}"
     |hp_def| |dL|)
    (|distinct_var?| DEF-DECL "{b: bool |
   b =
    FORALL (i: below(length(l))):
      NOT dlvar_index(nth(l, i)) = dlvar_index(v)}"
     |hp_def| |dL|)
    (|mapexpr_inj_distinct_vars| FORMULA-DECL NIL |hp_def| |dL|))
   NIL
   (|dl_boxd_example| SUBTYPE
    "(: (Glossary_Plaidypvs.x, real_fun_ops[Environment].*(hp_def.val(Glossary_Plaidypvs.x), hp_def.val(Glossary_Plaidypvs.x))) :)"
    "Assigns" (159 22 159 46))))
 (|dl_boxd_example| 0
  (|dl_boxd_example-1| |nil| 3913238951
   ("" (SKEEP) (("" (DL-ASSERT) NIL NIL)) NIL)
   ((|Formulas| TYPE-EQ-DECL NIL |bool_expr| |dL|)
    (|dl_notR| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|dl_subre_val| FORMULA-DECL NIL |substitution| |dL|)
    (|dl_subre_const| FORMULA-DECL NIL |substitution| |dL|)
    (|dl_sub_lt| FORMULA-DECL NIL |substitution| |dL|)
    (|Substitution| TYPE-EQ-DECL NIL |substitution| |dL|)
    (|SUB_MapVar| DEF-DECL
     "{re: RealExpr | FORALL (env: Environment): re(env) = SUB_Re(l)(val(v))(env)}"
     |substitution| |dL|)
    (|null_MapExprInj| NAME-JUDGEMENT "MapExprInj" |hp_def| |dL|)
    (|dl_assignd| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (< CONST-DECL "BoolExpr" |bool_expr| |dL|)
    (|dLVar| TYPE-DECL NIL |hp_def| |dL|)
    (|val| CONST-DECL "real" |hp_def| |dL|)
    (|cnst| CONST-DECL "real" |hp_def| |dL|)
    (|MapExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|mapexpr_inj| CONST-DECL "bool" |hp_def| |dL|)
    (|Assigns| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|iterate_left| CONST-DECL "T" |for_iterate| |structures|)
    (|for_it| DEF-DECL
     "{t: T | t = for_def(i, upto, a, ext2int(upfrom, upto, f))}" |for_iterate|
     |structures|)
    (|for| CONST-DECL "T" |for_iterate| |structures|)
    (|\|-| CONST-DECL "bool" |dynamic_logic| |dL|)
    (|bijective?| CONST-DECL "bool" |functions| NIL))
   SHOSTAK))
 (|dl_choiceb_example_TCC1| 0
  (|dl_choiceb_example_TCC1-1| NIL 3921932629
   ("" (SKEEP) (("" (DL-MAPEXPR_INJ) NIL NIL)) NIL)
   ((|dLVar| TYPE-DECL NIL |hp_def| |dL|)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|MapExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|cnst| CONST-DECL "real" |hp_def| |dL|)
    (|pairwise_distinct_vars?| DEF-DECL "{b: bool |
   b =
    FORALL (i, j: below(length(l))):
      i /= j IMPLIES NOT dlvar_index(nth(l, i)) = dlvar_index(nth(l, j))}"
     |hp_def| |dL|)
    (|distinct_var?| DEF-DECL "{b: bool |
   b =
    FORALL (i: below(length(l))):
      NOT dlvar_index(nth(l, i)) = dlvar_index(v)}"
     |hp_def| |dL|)
    (|mapexpr_inj_distinct_vars| FORMULA-DECL NIL |hp_def| |dL|))
   NIL
   (|dl_choiceb_example| SUBTYPE
    "(: (Glossary_Plaidypvs.x, hp_def.cnst(10)) :)" "Assigns"
    (171 23 171 42))))
 (|dl_choiceb_example_TCC2| 0
  (|dl_choiceb_example_TCC2-1| NIL 3921932629
   ("" (SKEEP) (("" (DL-MAPEXPR_INJ) NIL NIL)) NIL)
   ((|dLVar| TYPE-DECL NIL |hp_def| |dL|)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|MapExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|cnst| CONST-DECL "real" |hp_def| |dL|)
    (|pairwise_distinct_vars?| DEF-DECL "{b: bool |
   b =
    FORALL (i, j: below(length(l))):
      i /= j IMPLIES NOT dlvar_index(nth(l, i)) = dlvar_index(nth(l, j))}"
     |hp_def| |dL|)
    (|distinct_var?| DEF-DECL "{b: bool |
   b =
    FORALL (i: below(length(l))):
      NOT dlvar_index(nth(l, i)) = dlvar_index(v)}"
     |hp_def| |dL|)
    (|mapexpr_inj_distinct_vars| FORMULA-DECL NIL |hp_def| |dL|))
   NIL
   (|dl_choiceb_example| SUBTYPE
    "(: (Glossary_Plaidypvs.x, hp_def.cnst(11)) :)" "Assigns"
    (172 23 172 42))))
 (|dl_choiceb_example| 0
  (|dl_choiceb_example-1| |nil| 3913238952
   ("" (SKEEP)
    (("" (DL-CHOICEB)
      (("" (DL-ANDR) (("1" (DL-ASSERT) NIL NIL) ("2" (DL-ASSERT) NIL NIL))
        NIL))
      NIL))
    NIL)
   ((|bijective?| CONST-DECL "bool" |functions| NIL)
    (|cnst| CONST-DECL "real" |hp_def| |dL|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|mapexpr_inj| CONST-DECL "bool" |hp_def| |dL|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|MapExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|dLVar| TYPE-DECL NIL |hp_def| |dL|)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|dl_choiceb| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (HP TYPE-DECL NIL |HP_adt| |dL|) (|Assigns| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|assign?| ADT-RECOGNIZER-DECL "[HP -> boolean]" |HP_adt| |dL|)
    (ASSIGN ADT-CONSTRUCTOR-DECL "[Assigns -> (assign?)]" |HP_adt| |dL|)
    (>= CONST-DECL "BoolExpr" |bool_expr| |dL|)
    (|val| CONST-DECL "real" |hp_def| |dL|)
    (ALLRUNS CONST-DECL "bool" |bool_expr| |dL|)
    (DLAND CONST-DECL "bool" |bool_expr| |dL|)
    (|dl_assignb| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|null_MapExprInj| NAME-JUDGEMENT "MapExprInj" |hp_def| |dL|)
    (|SUB_MapVar| DEF-DECL
     "{re: RealExpr | FORALL (env: Environment): re(env) = SUB_Re(l)(val(v))(env)}"
     |substitution| |dL|)
    (|Substitution| TYPE-EQ-DECL NIL |substitution| |dL|)
    (|dl_sub_ge| FORMULA-DECL NIL |substitution| |dL|)
    (|dl_subre_const| FORMULA-DECL NIL |substitution| |dL|)
    (|dl_subre_val| FORMULA-DECL NIL |substitution| |dL|)
    (|iterate_left| CONST-DECL "T" |for_iterate| |structures|)
    (|for_it| DEF-DECL
     "{t: T | t = for_def(i, upto, a, ext2int(upfrom, upto, f))}" |for_iterate|
     |structures|)
    (|for| CONST-DECL "T" |for_iterate| |structures|)
    (|\|-| CONST-DECL "bool" |dynamic_logic| |dL|)
    (|Formulas| TYPE-EQ-DECL NIL |bool_expr| |dL|)
    (|dl_andR| FORMULA-DECL NIL |dynamic_logic| |dL|))
   SHOSTAK))
 (|dl_choiced_example_TCC1| 0
  (|dl_choiced_example_TCC1-1| NIL 3921932629
   ("" (SKEEP) (("" (DL-MAPEXPR_INJ) NIL NIL)) NIL)
   ((|dLVar| TYPE-DECL NIL |hp_def| |dL|)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|MapExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|cnst| CONST-DECL "real" |hp_def| |dL|)
    (|pairwise_distinct_vars?| DEF-DECL "{b: bool |
   b =
    FORALL (i, j: below(length(l))):
      i /= j IMPLIES NOT dlvar_index(nth(l, i)) = dlvar_index(nth(l, j))}"
     |hp_def| |dL|)
    (|distinct_var?| DEF-DECL "{b: bool |
   b =
    FORALL (i: below(length(l))):
      NOT dlvar_index(nth(l, i)) = dlvar_index(v)}"
     |hp_def| |dL|)
    (|mapexpr_inj_distinct_vars| FORMULA-DECL NIL |hp_def| |dL|))
   NIL
   (|dl_choiced_example| SUBTYPE "(: (Glossary_Plaidypvs.x, hp_def.cnst(5)) :)"
    "Assigns" (184 24 184 42))))
 (|dl_choiced_example| 0
  (|dl_choiced_example-1| |nil| 3913238952
   ("" (SKEEP)
    (("" (DL-CHOICED)
      (("" (DL-FLATTEN)
        (("" (DL-HIDE 2) (("" (DL-ASSIGND) (("" (DL-ASSERT) NIL NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|bijective?| CONST-DECL "bool" |functions| NIL)
    (|cnst| CONST-DECL "real" |hp_def| |dL|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|mapexpr_inj| CONST-DECL "bool" |hp_def| |dL|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|MapExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|dLVar| TYPE-DECL NIL |hp_def| |dL|)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|dl_choiced| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (HP TYPE-DECL NIL |HP_adt| |dL|) (|Assigns| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|assign?| ADT-RECOGNIZER-DECL "[HP -> boolean]" |HP_adt| |dL|)
    (ASSIGN ADT-CONSTRUCTOR-DECL "[Assigns -> (assign?)]" |HP_adt| |dL|)
    (>= CONST-DECL "BoolExpr" |bool_expr| |dL|)
    (|val| CONST-DECL "real" |hp_def| |dL|)
    (SOMERUNS CONST-DECL "bool" |bool_expr| |dL|)
    (DLOR CONST-DECL "bool" |bool_expr| |dL|)
    (|move_to_head_rec| DEF-DECL "Formulas" |dynamic_logic| |dL|)
    (|is_dlfnum| CONST-DECL "bool" |dynamic_logic| |dL|)
    (|move_to_head| CONST-DECL "Formulas" |dynamic_logic| |dL|)
    (|dl_moveR| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|dl_hideR| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|\|-| CONST-DECL "bool" |dynamic_logic| |dL|)
    (|for| CONST-DECL "T" |for_iterate| |structures|)
    (|for_it| DEF-DECL
     "{t: T | t = for_def(i, upto, a, ext2int(upfrom, upto, f))}" |for_iterate|
     |structures|)
    (|iterate_left| CONST-DECL "T" |for_iterate| |structures|)
    (|dl_subre_val| FORMULA-DECL NIL |substitution| |dL|)
    (|dl_subre_const| FORMULA-DECL NIL |substitution| |dL|)
    (|dl_sub_ge| FORMULA-DECL NIL |substitution| |dL|)
    (|Substitution| TYPE-EQ-DECL NIL |substitution| |dL|)
    (|null_MapExprInj| NAME-JUDGEMENT "MapExprInj" |hp_def| |dL|)
    (|SUB_MapVar| DEF-DECL
     "{re: RealExpr | FORALL (env: Environment): re(env) = SUB_Re(l)(val(v))(env)}"
     |substitution| |dL|)
    (|dl_assignd| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|dl_orR| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|Formulas| TYPE-EQ-DECL NIL |bool_expr| |dL|))
   SHOSTAK))
 (|dl_composeb_example_TCC1| 0
  (|dl_composeb_example_TCC1-1| NIL 3921932629
   ("" (SKEEP) (("" (DL-MAPEXPR_INJ) NIL NIL)) NIL)
   ((|dLVar| TYPE-DECL NIL |hp_def| |dL|)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|MapExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|cnst| CONST-DECL "real" |hp_def| |dL|)
    (|pairwise_distinct_vars?| DEF-DECL "{b: bool |
   b =
    FORALL (i, j: below(length(l))):
      i /= j IMPLIES NOT dlvar_index(nth(l, i)) = dlvar_index(nth(l, j))}"
     |hp_def| |dL|)
    (|distinct_var?| DEF-DECL "{b: bool |
   b =
    FORALL (i: below(length(l))):
      NOT dlvar_index(nth(l, i)) = dlvar_index(v)}"
     |hp_def| |dL|)
    (|mapexpr_inj_distinct_vars| FORMULA-DECL NIL |hp_def| |dL|))
   NIL
   (|dl_composeb_example| SUBTYPE
    "(: (Glossary_Plaidypvs.x, hp_def.cnst(-5)) :)" "Assigns"
    (200 21 200 40))))
 (|dl_composeb_example| 0
  (|dl_composeb_example-1| |nil| 3913238952
   ("" (SKEEP)
    (("" (DL-COMPOSEB)
      (("" (DL-ASSIGNB)
        (("" (DL-TESTB) (("" (DL-FLATTEN) (("" (DL-ASSERT) NIL NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|bijective?| CONST-DECL "bool" |functions| NIL)
    (|cnst| CONST-DECL "real" |hp_def| |dL|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|mapexpr_inj| CONST-DECL "bool" |hp_def| |dL|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|MapExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|dLVar| TYPE-DECL NIL |hp_def| |dL|)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|dl_composeb| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (HP TYPE-DECL NIL |HP_adt| |dL|)
    (|test?| ADT-RECOGNIZER-DECL "[HP -> boolean]" |HP_adt| |dL|)
    (TEST ADT-CONSTRUCTOR-DECL "[BoolExpr -> (test?)]" |HP_adt| |dL|)
    (>= CONST-DECL "BoolExpr" |bool_expr| |dL|)
    (|val| CONST-DECL "real" |hp_def| |dL|)
    (|Assigns| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|assign?| ADT-RECOGNIZER-DECL "[HP -> boolean]" |HP_adt| |dL|)
    (ASSIGN ADT-CONSTRUCTOR-DECL "[Assigns -> (assign?)]" |HP_adt| |dL|)
    (< CONST-DECL "BoolExpr" |bool_expr| |dL|)
    (ALLRUNS CONST-DECL "bool" |bool_expr| |dL|)
    (|dl_testb| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (DLIMPLIES CONST-DECL "bool" |bool_expr| |dL|)
    (|\|-| CONST-DECL "bool" |dynamic_logic| |dL|)
    (|for| CONST-DECL "T" |for_iterate| |structures|)
    (|for_it| DEF-DECL
     "{t: T | t = for_def(i, upto, a, ext2int(upfrom, upto, f))}" |for_iterate|
     |structures|)
    (|iterate_left| CONST-DECL "T" |for_iterate| |structures|)
    (|dl_impliesR| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|Formulas| TYPE-EQ-DECL NIL |bool_expr| |dL|)
    (|dl_subre_val| FORMULA-DECL NIL |substitution| |dL|)
    (|dl_subre_const| FORMULA-DECL NIL |substitution| |dL|)
    (|dl_sub_lt| FORMULA-DECL NIL |substitution| |dL|)
    (|Substitution| TYPE-EQ-DECL NIL |substitution| |dL|)
    (|null_MapExprInj| NAME-JUDGEMENT "MapExprInj" |hp_def| |dL|)
    (|SUB_MapVar| DEF-DECL
     "{re: RealExpr | FORALL (env: Environment): re(env) = SUB_Re(l)(val(v))(env)}"
     |substitution| |dL|)
    (|dl_assignb| FORMULA-DECL NIL |dynamic_logic| |dL|))
   SHOSTAK))
 (|dl_composed_example_TCC1| 0
  (|dl_composed_example_TCC1-1| NIL 3921932629
   ("" (SKEEP) (("" (DL-MAPEXPR_INJ) NIL NIL)) NIL)
   ((|dLVar| TYPE-DECL NIL |hp_def| |dL|)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|MapExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|val| CONST-DECL "real" |hp_def| |dL|)
    (|cnst| CONST-DECL "real" |hp_def| |dL|)
    (|pairwise_distinct_vars?| DEF-DECL "{b: bool |
   b =
    FORALL (i, j: below(length(l))):
      i /= j IMPLIES NOT dlvar_index(nth(l, i)) = dlvar_index(nth(l, j))}"
     |hp_def| |dL|)
    (|distinct_var?| DEF-DECL "{b: bool |
   b =
    FORALL (i: below(length(l))):
      NOT dlvar_index(nth(l, i)) = dlvar_index(v)}"
     |hp_def| |dL|)
    (|mapexpr_inj_distinct_vars| FORMULA-DECL NIL |hp_def| |dL|))
   NIL
   (|dl_composed_example| SUBTYPE
    "(: (Glossary_Plaidypvs.x, (real_fun_ops[Environment].+)(hp_def.val(Glossary_Plaidypvs.x), hp_def.cnst(1))) :)"
    "Assigns" (216 22 216 41))))
 (|dl_composed_example| 0
  (|dl_composed_example-1| |nil| 3913238953
   ("" (SKEEP)
    (("" (DL-FLATTEN)
      (("" (DL-COMPOSED)
        (("" (REWRITE "dl_testd")
          (("" (DL-ASSIGND) (("" (DL-ASSERT) NIL NIL)) NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((ASSIGN ADT-CONSTRUCTOR-DECL "[Assigns -> (assign?)]" |HP_adt| |dL|)
    (|assign?| ADT-RECOGNIZER-DECL "[HP -> boolean]" |HP_adt| |dL|)
    (|Assigns| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (TEST ADT-CONSTRUCTOR-DECL "[BoolExpr -> (test?)]" |HP_adt| |dL|)
    (|test?| ADT-RECOGNIZER-DECL "[HP -> boolean]" |HP_adt| |dL|)
    (SEQ ADT-CONSTRUCTOR-DECL "[[HP, HP] -> (seq?)]" |HP_adt| |dL|)
    (|seq?| ADT-RECOGNIZER-DECL "[HP -> boolean]" |HP_adt| |dL|)
    (SOMERUNS CONST-DECL "bool" |bool_expr| |dL|)
    (HP TYPE-DECL NIL |HP_adt| |dL|)
    (>= CONST-DECL "BoolExpr" |bool_expr| |dL|)
    (|Formulas| TYPE-EQ-DECL NIL |bool_expr| |dL|)
    (|dl_impliesR| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|dLVar| TYPE-DECL NIL |hp_def| |dL|)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|MapExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|mapexpr_inj| CONST-DECL "bool" |hp_def| |dL|)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|val| CONST-DECL "real" |hp_def| |dL|)
    (|cnst| CONST-DECL "real" |hp_def| |dL|)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|dl_testd| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|null_MapExprInj| NAME-JUDGEMENT "MapExprInj" |hp_def| |dL|)
    (|iterate_left| CONST-DECL "T" |for_iterate| |structures|)
    (|for_it| DEF-DECL
     "{t: T | t = for_def(i, upto, a, ext2int(upfrom, upto, f))}" |for_iterate|
     |structures|)
    (|for| CONST-DECL "T" |for_iterate| |structures|)
    (|\|-| CONST-DECL "bool" |dynamic_logic| |dL|)
    (|dl_andR| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (DLAND CONST-DECL "bool" |bool_expr| |dL|)
    (|dl_subre_val| FORMULA-DECL NIL |substitution| |dL|)
    (|dl_subre_const| FORMULA-DECL NIL |substitution| |dL|)
    (|dl_sub_ge| FORMULA-DECL NIL |substitution| |dL|)
    (|Substitution| TYPE-EQ-DECL NIL |substitution| |dL|)
    (|SUB_MapVar| DEF-DECL
     "{re: RealExpr | FORALL (env: Environment): re(env) = SUB_Re(l)(val(v))(env)}"
     |substitution| |dL|)
    (|dl_assignd| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|dl_composed| FORMULA-DECL NIL |dynamic_logic| |dL|))
   SHOSTAK))
 (|dl_case_example_TCC1| 0
  (|dl_case_example_TCC1-1| NIL 3921932629 ("" (SUBTYPE-TCC) NIL NIL)
   ((|mapexpr_inj| CONST-DECL "bool" |hp_def| |dL|)
    (|null_MapExprInj| NAME-JUDGEMENT "MapExprInj" |hp_def| |dL|)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|cnst| CONST-DECL "real" |hp_def| |dL|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|MapExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|dLVar| TYPE-DECL NIL |hp_def| |dL|))
   NIL
   (|dl_case_example| SUBTYPE
    "(: (Glossary_Plaidypvs.x, hp_def.cnst(Glossary_Plaidypvs.c)) :)" "Assigns"
    (230 19 230 37))))
 (|dl_case_example_TCC2| 0
  (|dl_case_example_TCC2-1| NIL 3921932629 ("" (SUBTYPE-TCC) NIL NIL)
   ((|mapexpr_inj| CONST-DECL "bool" |hp_def| |dL|)
    (|null_MapExprInj| NAME-JUDGEMENT "MapExprInj" |hp_def| |dL|)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|cnst| CONST-DECL "real" |hp_def| |dL|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|MapExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|dLVar| TYPE-DECL NIL |hp_def| |dL|))
   NIL
   (|dl_case_example| SUBTYPE
    "(: (Glossary_Plaidypvs.x, hp_def.cnst((number_fields.-)(Glossary_Plaidypvs.c))) :)"
    "Assigns" (231 12 231 31))))
 (|dl_case_example| 0
  (|dl_case_example-1| |nil| 3913238953
   ("" (SKEEP)
    (("" (DL-CASE "cnst(c) >= cnst(0)")
      (("1" (DL-CHOICEB)
        (("1" (DL-ANDR) (("1" (DL-ASSERT) NIL NIL) ("2" (DL-ASSERT) NIL NIL))
          NIL))
        NIL)
       ("2" (DL-ASSERT) NIL NIL))
      NIL))
    NIL)
   ((|bijective?| CONST-DECL "bool" |functions| NIL)
    (|dl_cut| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|cnst| CONST-DECL "real" |hp_def| |dL|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|mapexpr_inj| CONST-DECL "bool" |hp_def| |dL|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|MapExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|dLVar| TYPE-DECL NIL |hp_def| |dL|)
    (|val| CONST-DECL "real" |hp_def| |dL|)
    (DLNOT CONST-DECL "bool" |bool_expr| |dL|)
    (ASSIGN ADT-CONSTRUCTOR-DECL "[Assigns -> (assign?)]" |HP_adt| |dL|)
    (|assign?| ADT-RECOGNIZER-DECL "[HP -> boolean]" |HP_adt| |dL|)
    (|Assigns| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (>= CONST-DECL "BoolExpr" |bool_expr| |dL|)
    (TEST ADT-CONSTRUCTOR-DECL "[BoolExpr -> (test?)]" |HP_adt| |dL|)
    (|test?| ADT-RECOGNIZER-DECL "[HP -> boolean]" |HP_adt| |dL|)
    (SEQ ADT-CONSTRUCTOR-DECL "[[HP, HP] -> (seq?)]" |HP_adt| |dL|)
    (|seq?| ADT-RECOGNIZER-DECL "[HP -> boolean]" |HP_adt| |dL|)
    (UNION ADT-CONSTRUCTOR-DECL "[[HP, HP] -> (union?)]" |HP_adt| |dL|)
    (|union?| ADT-RECOGNIZER-DECL "[HP -> boolean]" |HP_adt| |dL|)
    (ALLRUNS CONST-DECL "bool" |bool_expr| |dL|)
    (HP TYPE-DECL NIL |HP_adt| |dL|)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|Formulas| TYPE-EQ-DECL NIL |bool_expr| |dL|)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|dl_andR| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|dl_subre_val| FORMULA-DECL NIL |substitution| |dL|)
    (|dl_subre_const| FORMULA-DECL NIL |substitution| |dL|)
    (|dl_sub_ge| FORMULA-DECL NIL |substitution| |dL|)
    (|Substitution| TYPE-EQ-DECL NIL |substitution| |dL|)
    (|SUB_MapVar| DEF-DECL
     "{re: RealExpr | FORALL (env: Environment): re(env) = SUB_Re(l)(val(v))(env)}"
     |substitution| |dL|)
    (|dl_axiom| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|dl_impliesR| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|dl_assignb| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|dl_testb| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|dl_composeb| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|null_MapExprInj| NAME-JUDGEMENT "MapExprInj" |hp_def| |dL|)
    (|dl_notL| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (DLAND CONST-DECL "bool" |bool_expr| |dL|)
    (|dl_choiceb| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|iterate_left| CONST-DECL "T" |for_iterate| |structures|)
    (|for_it| DEF-DECL
     "{t: T | t = for_def(i, upto, a, ext2int(upfrom, upto, f))}" |for_iterate|
     |structures|)
    (|for| CONST-DECL "T" |for_iterate| |structures|)
    (|\|-| CONST-DECL "bool" |dynamic_logic| |dL|)
    (|dl_moveR| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (DLIMPLIES CONST-DECL "bool" |bool_expr| |dL|)
    (|move_to_head| CONST-DECL "Formulas" |dynamic_logic| |dL|)
    (|is_dlfnum| CONST-DECL "bool" |dynamic_logic| |dL|)
    (|move_to_head_rec| DEF-DECL "Formulas" |dynamic_logic| |dL|))
   SHOSTAK))
 (|dl_diffcase_example_TCC1| 0
  (|dl_diffcase_example_TCC1-1| NIL 3921932629 ("" (SUBTYPE-TCC) NIL NIL)
   ((|mapexpr_inj| CONST-DECL "bool" |hp_def| |dL|)
    (|null_MapExprInj| NAME-JUDGEMENT "MapExprInj" |hp_def| |dL|)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|cnst| CONST-DECL "real" |hp_def| |dL|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|MapExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|dLVar| TYPE-DECL NIL |hp_def| |dL|))
   NIL
   (|dl_diffcase_example| SUBTYPE
    "(: (Glossary_Plaidypvs.x, hp_def.cnst(2)) :)" "ODEs" (246 15 246 33))))
 (|dl_diffcase_example| 0
  (|dl_diffcase_example-1| |nil| 3913238954
   ("" (SKEEP)
    (("" (DL-FLATTEN)
      (("" (DL-DIFFCASE "val(x) ^ 2 > cnst(5)")
        (("1" (DL-ASSERT) NIL NIL) ("2" (DL-ASSERT) NIL NIL)) NIL))
      NIL))
    NIL)
   ((DLBOOL CONST-DECL "bool" |bool_expr| |dL|)
    (^ CONST-DECL "[T -> real]" |real_fun_ops| |reals|)
    (|val| CONST-DECL "real" |hp_def| |dL|)
    (> CONST-DECL "BoolExpr" |bool_expr| |dL|)
    (DIFF ADT-CONSTRUCTOR-DECL "[[ODEs, BoolExpr] -> (diff?)]" |HP_adt| |dL|)
    (|diff?| ADT-RECOGNIZER-DECL "[HP -> boolean]" |HP_adt| |dL|)
    (|ODEs| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (ALLRUNS CONST-DECL "bool" |bool_expr| |dL|)
    (HP TYPE-DECL NIL |HP_adt| |dL|) (DLAND CONST-DECL "bool" |bool_expr| |dL|)
    (|Formulas| TYPE-EQ-DECL NIL |bool_expr| |dL|)
    (|dl_impliesR| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|dLVar| TYPE-DECL NIL |hp_def| |dL|)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|MapExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|mapexpr_inj| CONST-DECL "bool" |hp_def| |dL|)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|cnst| CONST-DECL "real" |hp_def| |dL|)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|dl_andL| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|move_to_head_rec| DEF-DECL "Formulas" |dynamic_logic| |dL|)
    (|is_dlfnum| CONST-DECL "bool" |dynamic_logic| |dL|)
    (|move_to_head| CONST-DECL "Formulas" |dynamic_logic| |dL|)
    (|dl_moveL| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|dl_axiom| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|dl_dC| FORMULA-DECL NIL |dynamic_logic| |dL|))
   SHOSTAK))
 (|dl_diffghost_example_TCC1| 0
  (|dl_diffghost_example_TCC1-1| NIL 3921932629 ("" (SUBTYPE-TCC) NIL NIL)
   ((|mapexpr_inj| CONST-DECL "bool" |hp_def| |dL|)
    (|null_MapExprInj| NAME-JUDGEMENT "MapExprInj" |hp_def| |dL|)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|val| CONST-DECL "real" |hp_def| |dL|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|MapExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|dLVar| TYPE-DECL NIL |hp_def| |dL|))
   NIL
   (|dl_diffghost_example| SUBTYPE
    "(: (Glossary_Plaidypvs.x, hp_def.val(Glossary_Plaidypvs.x)) :)" "ODEs"
    (263 19 263 36))))
 (|dl_diffghost_example| 0
  (|dl_diffghost_example-1| |nil| 3913238954
   (""
    (THEN (SKEEP) (BETA) (DL-FLATTEN)
     (SPREAD
      (DL-DIFFGHOST "cnst(-1/2)" "cnst(0)" "G" "val(x)*val(G)^2=cnst(1)")
      ((THEN (DL-INSTF "div_safe_re(cnst(1),val(x)^^(1/2))") (DL-COMPOSEB)
        (DL-ASSIGNB) (DL-SUBF)
        (SPREAD (DL-DIFFINV)
         ((SPREAD (GRIND :EXCLUDE "^^")
           ((GRIND) (THEN (LEMMA "sqrt_hathat") (GRIND))))
          (DL-ASSERT))))
       (DL-ASSERT) (DL-ASSERT))))
    NIL NIL)
   ((|fresh_var| FORMULA-DECL NIL |hp_def| |dL|)
    (|dl_differential_ghost| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|fresh?| DEF-DECL "bool" |bool_expr| |dL|)
    (|dlvar_index| ADT-ACCESSOR-DECL "[dLVar -> nat]" |hp_def| |dL|)
    (|fresh_li?| INDUCTIVE-DECL "bool" |hp_expr| |dL|)
    (|Assigns| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|dl_true_DDL| FORMULA-DECL NIL |differentiation| |dL|)
    (^ CONST-DECL "[T -> real]" |real_fun_ops| |reals|)
    (= CONST-DECL "BoolExpr" |bool_expr| |dL|)
    (|null_MapExprInj| NAME-JUDGEMENT "MapExprInj" |hp_def| |dL|)
    (|cont_re_cnst| FORMULA-DECL NIL |continuity_re_props| |dL|)
    (|distinct_var?| DEF-DECL "{b: bool |
   b =
    FORALL (i: below(length(l))):
      NOT dlvar_index(nth(l, i)) = dlvar_index(v)}"
     |hp_def| |dL|)
    (|fresh_be_DLTRUE| FORMULA-DECL NIL |fresh_props| |dL|)
    (|fresh_be_gt| FORMULA-DECL NIL |fresh_props| |dL|)
    (|fresh_re_cnst| FORMULA-DECL NIL |fresh_props| |dL|)
    (|fresh_re_val| FORMULA-DECL NIL |fresh_props| |dL|)
    (ASSIGN ADT-CONSTRUCTOR-DECL "[Assigns -> (assign?)]" |HP_adt| |dL|)
    (|assign?| ADT-RECOGNIZER-DECL "[HP -> boolean]" |HP_adt| |dL|)
    (SEQ ADT-CONSTRUCTOR-DECL "[[HP, HP] -> (seq?)]" |HP_adt| |dL|)
    (|seq?| ADT-RECOGNIZER-DECL "[HP -> boolean]" |HP_adt| |dL|)
    (|DLEXISTSRf| CONST-DECL "bool" |bool_expr| |dL|)
    (|dl_composeb| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|dl_subf| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|\|-| CONST-DECL "bool" |dynamic_logic| |dL|)
    (|div_safe| CONST-DECL "real" |reals_safe_ops| |reals|)
    (|for_it| DEF-DECL
     "{t: T | t = for_def(i, upto, a, ext2int(upfrom, upto, f))}" |for_iterate|
     |structures|)
    (|for| CONST-DECL "T" |for_iterate| |structures|)
    (|iterate_left| CONST-DECL "T" |for_iterate| |structures|)
    (|exp_0| FORMULA-DECL NIL |ln_exp| |lnexp|)
    (|Integral| CONST-DECL "real" |integral_def| |analysis|)
    (|ln| CONST-DECL "real" |ln_exp| |lnexp|)
    (^^ CONST-DECL "nnreal" |expt| |lnexp|)
    (|expt| CONST-DECL "real" |differentiation| |dL|)
    (|sqrt_hathat| FORMULA-DECL NIL |differentiation| |dL|)
    (|dl_dift_const| FORMULA-DECL NIL |differentiation| |dL|)
    (|dl_dift_pow| FORMULA-DECL NIL |differentiation| |dL|)
    (|max_var_max| FORMULA-DECL NIL |hp_def| |dL|)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|dl_dift_val| FORMULA-DECL NIL |differentiation| |dL|)
    (|dl_derivable_up_val| FORMULA-DECL NIL |differentiation| |dL|)
    (|dl_derivable_up_pow| FORMULA-DECL NIL |differentiation| |dL|)
    (|ddl_dom_upto?| CONST-DECL "bool" |differentiation| |dL|)
    (|derivable_up?| CONST-DECL "bool" |differentiation| |dL|)
    (|ddt| DEF-DECL "RealExpr" |differentiation| |dL|)
    (|dl_dift_mult| FORMULA-DECL NIL |differentiation| |dL|)
    (DIFT DEF-DECL "BoolExpr" |differentiation| |dL|)
    (|dl_trueL| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (SUB_DIFT CONST-DECL "BoolExpr" |differentiation| |dL|)
    (|diff_re_cnst| FORMULA-DECL NIL |diff_re_props| |dL|)
    (|diff_re?| CONST-DECL "bool" |chain_rule_re| |dL|)
    (|diff_re_prod| FORMULA-DECL NIL |diff_re_props| |dL|)
    (|diff_re_val| FORMULA-DECL NIL |diff_re_props| |dL|)
    (|diff_re_pow| FORMULA-DECL NIL |diff_re_props| |dL|)
    (|normalize_rec| DEF-DECL "{nnqbe: NormNQBool |
   FORALL (env: Environment):
     nqb_to_be(nnqbe)(env) = (pos IFF nqb_to_be(nqbe)(env))}"
     |bool_expr| |dL|)
    (|derivable_M_nqbool?| INDUCTIVE-DECL "bool" |chain_rule_re| |dL|)
    (|max_var| CONST-DECL "nat" |hp_def| |dL|)
    (|dl_dI_dlTRUE| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|nqb_rel| CONST-DECL "BoolExpr" |bool_expr| |dL|)
    (|NQBool| TYPE-DECL NIL |NQBool_adt| |dL|)
    (|nqb_normal?| INDUCTIVE-DECL "bool" |bool_expr| |dL|)
    (|NormNQBool| TYPE-EQ-DECL NIL |bool_expr| |dL|)
    (|nqb_to_be| DEF-DECL "BoolExpr" |bool_expr| |dL|)
    (|normalize| CONST-DECL
     "{nnqbe: NormNQBool | nqb_to_be(nnqbe) = nqb_to_be(nqbe)}" |bool_expr|
     |dL|)
    (NQB_REL TYPE-DECL NIL |hp_def| |dL|)
    (|nqb_rel?| ADT-RECOGNIZER-DECL "[NQBool -> boolean]" |NQBool_adt| |dL|)
    (|NQB_rel| ADT-CONSTRUCTOR-DECL
     "[[NQB_REL, RealExpr, RealExpr] -> (nqb_rel?)]" |NQBool_adt| |dL|)
    (|nqb_eq?| ADT-RECOGNIZER-DECL "[NQB_REL -> boolean]" |hp_def| |dL|)
    (|nqb_eq| ADT-CONSTRUCTOR-DECL "(nqb_eq?)" |hp_def| |dL|)
    (|Substitution| TYPE-EQ-DECL NIL |substitution| |dL|)
    (SUB CONST-DECL "bool" |substitution| |dL|)
    (|dl_assignb| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|fresh_re_div_safe| FORMULA-DECL NIL |fresh_props| |dL|)
    (|fresh_re_exp| FORMULA-DECL NIL |fresh_props| |dL|)
    (|div_safe_re| CONST-DECL "real" |hp_def| |dL|)
    (^^ CONST-DECL "RealExpr" |differentiation| |dL|)
    (|dl_existsrRf| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|dl_axiom| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|val| CONST-DECL "real" |hp_def| |dL|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|mapexpr_inj| CONST-DECL "bool" |hp_def| |dL|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|MapExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|dLVar| TYPE-DECL NIL |hp_def| |dL|)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|dl_impliesR| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|Formulas| TYPE-EQ-DECL NIL |bool_expr| |dL|)
    (> CONST-DECL "BoolExpr" |bool_expr| |dL|)
    (|cnst| CONST-DECL "real" |hp_def| |dL|) (HP TYPE-DECL NIL |HP_adt| |dL|)
    (ALLRUNS CONST-DECL "bool" |bool_expr| |dL|)
    (|ODEs| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|diff?| ADT-RECOGNIZER-DECL "[HP -> boolean]" |HP_adt| |dL|)
    (DIFF ADT-CONSTRUCTOR-DECL "[[ODEs, BoolExpr] -> (diff?)]" |HP_adt| |dL|)
    (DLBOOL CONST-DECL "bool" |bool_expr| |dL|))
   SHOSTAK))
 (|dl_diffinit_example| 0
  (|dl_diffinit_example-1| |nil| 3913238954
   ("" (SKEEP) (("" (DL-DIFFINIT) NIL NIL)) NIL)
   ((|BoolExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|dLVar| TYPE-DECL NIL |hp_def| |dL|)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|MapExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|mapexpr_inj| CONST-DECL "bool" |hp_def| |dL|)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|cnst| CONST-DECL "real" |hp_def| |dL|)
    (|dl_dinit| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|null_MapExprInj| NAME-JUDGEMENT "MapExprInj" |hp_def| |dL|)
    (|ODEs| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|val| CONST-DECL "real" |hp_def| |dL|)
    (> CONST-DECL "BoolExpr" |bool_expr| |dL|)
    (DLBOOL CONST-DECL "bool" |bool_expr| |dL|)
    (|Formulas| TYPE-EQ-DECL NIL |bool_expr| |dL|)
    (|bijective?| CONST-DECL "bool" |functions| NIL))
   SHOSTAK))
 (|dl_diffinv_example_TCC1| 0
  (|dl_diffinv_example_TCC1-1| NIL 3921932629
   ("" (SKEEP) (("" (DL-MAPEXPR_INJ) NIL NIL)) NIL)
   ((|dLVar| TYPE-DECL NIL |hp_def| |dL|)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|MapExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|val| CONST-DECL "real" |hp_def| |dL|)
    (|mapexpr_inj_distinct_vars| FORMULA-DECL NIL |hp_def| |dL|))
   NIL
   (|dl_diffinv_example| SUBTYPE
    "(: (Glossary_Plaidypvs.x, (real_fun_ops[Environment].-)(hp_def.val(Glossary_Plaidypvs.y))), (Glossary_Plaidypvs.y, hp_def.val(Glossary_Plaidypvs.x)) :)"
    "ODEs" (301 23 301 54))))
 (|dl_diffinv_example| 0
  (|dl_diffinv_example-1| |nil| 3913238955
   ("" (SKEEP)
    (("" (DL-FLATTEN) (("" (DL-DIFFINV) (("" (DL-ASSERT) NIL NIL)) NIL)) NIL))
    NIL)
   ((DLBOOL CONST-DECL "bool" |bool_expr| |dL|)
    (DIFF ADT-CONSTRUCTOR-DECL "[[ODEs, BoolExpr] -> (diff?)]" |HP_adt| |dL|)
    (|diff?| ADT-RECOGNIZER-DECL "[HP -> boolean]" |HP_adt| |dL|)
    (|ODEs| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (ALLRUNS CONST-DECL "bool" |bool_expr| |dL|)
    (HP TYPE-DECL NIL |HP_adt| |dL|) (|cnst| CONST-DECL "real" |hp_def| |dL|)
    (^ CONST-DECL "[T -> real]" |real_fun_ops| |reals|)
    (= CONST-DECL "BoolExpr" |bool_expr| |dL|)
    (|Formulas| TYPE-EQ-DECL NIL |bool_expr| |dL|)
    (|dl_impliesR| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|dLVar| TYPE-DECL NIL |hp_def| |dL|)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|MapExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|mapexpr_inj| CONST-DECL "bool" |hp_def| |dL|)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|val| CONST-DECL "real" |hp_def| |dL|)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|for| CONST-DECL "T" |for_iterate| |structures|)
    (|for_it| DEF-DECL
     "{t: T | t = for_def(i, upto, a, ext2int(upfrom, upto, f))}" |for_iterate|
     |structures|)
    (|iterate_left| CONST-DECL "T" |for_iterate| |structures|)
    (|dl_dift_const| FORMULA-DECL NIL |differentiation| |dL|)
    (|max_var_max| FORMULA-DECL NIL |hp_def| |dL|)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|dlvar_index| ADT-ACCESSOR-DECL "[dLVar -> nat]" |hp_def| |dL|)
    (|dl_dift_val| FORMULA-DECL NIL |differentiation| |dL|)
    (|dl_dift_pow| FORMULA-DECL NIL |differentiation| |dL|)
    (|dl_derivable_up_val| FORMULA-DECL NIL |differentiation| |dL|)
    (|dl_derivable_up_pow| FORMULA-DECL NIL |differentiation| |dL|)
    (|ddl_dom_upto?| CONST-DECL "bool" |differentiation| |dL|)
    (|derivable_up?| CONST-DECL "bool" |differentiation| |dL|)
    (|ddt| DEF-DECL "RealExpr" |differentiation| |dL|)
    (|dl_dift_plus| FORMULA-DECL NIL |differentiation| |dL|)
    (DIFT DEF-DECL "BoolExpr" |differentiation| |dL|)
    (|dl_trueL| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (SUB_DIFT CONST-DECL "BoolExpr" |differentiation| |dL|)
    (|null_MapExprInj| NAME-JUDGEMENT "MapExprInj" |hp_def| |dL|)
    (|diff_re_cnst| FORMULA-DECL NIL |diff_re_props| |dL|)
    (|diff_re?| CONST-DECL "bool" |chain_rule_re| |dL|)
    (|diff_re_sum| FORMULA-DECL NIL |diff_re_props| |dL|)
    (|diff_re_val| FORMULA-DECL NIL |diff_re_props| |dL|)
    (|diff_re_pow| FORMULA-DECL NIL |diff_re_props| |dL|)
    (|dl_true_DDL| FORMULA-DECL NIL |differentiation| |dL|)
    (|pairwise_distinct_vars?| DEF-DECL "{b: bool |
   b =
    FORALL (i, j: below(length(l))):
      i /= j IMPLIES NOT dlvar_index(nth(l, i)) = dlvar_index(nth(l, j))}"
     |hp_def| |dL|)
    (|distinct_var?| DEF-DECL "{b: bool |
   b =
    FORALL (i: below(length(l))):
      NOT dlvar_index(nth(l, i)) = dlvar_index(v)}"
     |hp_def| |dL|)
    (|dl_moveL| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|move_to_head| CONST-DECL "Formulas" |dynamic_logic| |dL|)
    (|is_dlfnum| CONST-DECL "bool" |dynamic_logic| |dL|)
    (|move_to_head_rec| DEF-DECL "Formulas" |dynamic_logic| |dL|)
    (|dl_axiom| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|normalize_rec| DEF-DECL "{nnqbe: NormNQBool |
   FORALL (env: Environment):
     nqb_to_be(nnqbe)(env) = (pos IFF nqb_to_be(nqbe)(env))}"
     |bool_expr| |dL|)
    (|derivable_M_nqbool?| INDUCTIVE-DECL "bool" |chain_rule_re| |dL|)
    (|max_var| CONST-DECL "nat" |hp_def| |dL|)
    (|\|-| CONST-DECL "bool" |dynamic_logic| |dL|)
    (|dl_dI_dlTRUE| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|nqb_rel| CONST-DECL "BoolExpr" |bool_expr| |dL|)
    (|NQBool| TYPE-DECL NIL |NQBool_adt| |dL|)
    (|nqb_normal?| INDUCTIVE-DECL "bool" |bool_expr| |dL|)
    (|NormNQBool| TYPE-EQ-DECL NIL |bool_expr| |dL|)
    (|nqb_to_be| DEF-DECL "BoolExpr" |bool_expr| |dL|)
    (|normalize| CONST-DECL
     "{nnqbe: NormNQBool | nqb_to_be(nnqbe) = nqb_to_be(nqbe)}" |bool_expr|
     |dL|)
    (NQB_REL TYPE-DECL NIL |hp_def| |dL|)
    (|nqb_rel?| ADT-RECOGNIZER-DECL "[NQBool -> boolean]" |NQBool_adt| |dL|)
    (|NQB_rel| ADT-CONSTRUCTOR-DECL
     "[[NQB_REL, RealExpr, RealExpr] -> (nqb_rel?)]" |NQBool_adt| |dL|)
    (|nqb_eq?| ADT-RECOGNIZER-DECL "[NQB_REL -> boolean]" |hp_def| |dL|)
    (|nqb_eq| ADT-CONSTRUCTOR-DECL "(nqb_eq?)" |hp_def| |dL|))
   SHOSTAK))
 (|dl_falseL_example| 0
  (|dl_falseL_example-1| |nil| 3913238955
   ("" (SKEEP) (("" (DL-FALSEL) NIL NIL)) NIL)
   ((|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (> CONST-DECL "BoolExpr" |bool_expr| |dL|)
    (|dLVar| TYPE-DECL NIL |hp_def| |dL|)
    (|val| CONST-DECL "real" |hp_def| |dL|)
    (|cnst| CONST-DECL "real" |hp_def| |dL|)
    (|dl_falseL| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|Formulas| TYPE-EQ-DECL NIL |bool_expr| |dL|)
    (|bijective?| CONST-DECL "bool" |functions| NIL))
   SHOSTAK))
 (|dl_flatten_example| 0
  (|dl_flatten_example-1| |nil| 3913238956
   ("" (SKEEP) (("" (DL-FLATTEN) (("" (DL-ASSERT) NIL NIL)) NIL)) NIL)
   ((^ CONST-DECL "[T -> real]" |real_fun_ops| |reals|)
    (DLOR CONST-DECL "bool" |bool_expr| |dL|)
    (|val| CONST-DECL "real" |hp_def| |dL|)
    (|dLVar| TYPE-DECL NIL |hp_def| |dL|)
    (|cnst| CONST-DECL "real" |hp_def| |dL|)
    (>= CONST-DECL "BoolExpr" |bool_expr| |dL|)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (DLAND CONST-DECL "bool" |bool_expr| |dL|)
    (|Formulas| TYPE-EQ-DECL NIL |bool_expr| |dL|)
    (|dl_impliesR| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|dl_andL| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|move_to_head_rec| DEF-DECL "Formulas" |dynamic_logic| |dL|)
    (|is_dlfnum| CONST-DECL "bool" |dynamic_logic| |dL|)
    (|move_to_head| CONST-DECL "Formulas" |dynamic_logic| |dL|)
    (|dl_moveL| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|dl_orL| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|\|-| CONST-DECL "bool" |dynamic_logic| |dL|)
    (|for| CONST-DECL "T" |for_iterate| |structures|)
    (|for_it| DEF-DECL
     "{t: T | t = for_def(i, upto, a, ext2int(upfrom, upto, f))}" |for_iterate|
     |structures|)
    (|iterate_left| CONST-DECL "T" |for_iterate| |structures|))
   SHOSTAK))
 (|dl_g_example_TCC1| 0
  (|dl_g_example_TCC1-1| NIL 3921932629
   ("" (SKEEP) (("" (DL-MAPEXPR_INJ) NIL NIL)) NIL)
   ((|dLVar| TYPE-DECL NIL |hp_def| |dL|)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|MapExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|val| CONST-DECL "real" |hp_def| |dL|)
    (^ CONST-DECL "[T -> real]" |real_fun_ops| |reals|)
    (|mapexpr_inj_distinct_vars| FORMULA-DECL NIL |hp_def| |dL|))
   NIL
   (|dl_g_example| SUBTYPE
    "(: (Glossary_Plaidypvs.x, (real_fun_ops[Environment].+)(hp_def.val(Glossary_Plaidypvs.x), real_fun_ops[Environment].^(hp_def.val(Glossary_Plaidypvs.y), 50))), (Glossary_Plaidypvs.y, real_fun_ops[Environment].*(real_fun_ops[Environment].*(hp_def.val(Glossary_Plaidypvs.y), hp_def.val(Glossary_Plaidypvs.x)), hp_def.val(Glossary_Plaidypvs.z))), (Glossary_Plaidypvs.z, hp_def.val(Glossary_Plaidypvs.x)) :)"
    "ODEs" (339 15 341 32))))
 (|dl_g_example| 0
  (|dl_g_example-1| |nil| 3913238956
   ("" (SKEEP) (("" (DL-GB) (("" (DL-ASSERT) NIL NIL)) NIL)) NIL)
   ((|dl_const| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|cnst| CONST-DECL "real" |hp_def| |dL|)
    (>= CONST-DECL "BoolExpr" |bool_expr| |dL|)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (DLBOOL CONST-DECL "bool" |bool_expr| |dL|)
    (^ CONST-DECL "[T -> real]" |real_fun_ops| |reals|)
    (|val| CONST-DECL "real" |hp_def| |dL|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (DIFF ADT-CONSTRUCTOR-DECL "[[ODEs, BoolExpr] -> (diff?)]" |HP_adt| |dL|)
    (|diff?| ADT-RECOGNIZER-DECL "[HP -> boolean]" |HP_adt| |dL|)
    (|ODEs| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|mapexpr_inj| CONST-DECL "bool" |hp_def| |dL|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|MapExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|dLVar| TYPE-DECL NIL |hp_def| |dL|) (HP TYPE-DECL NIL |HP_adt| |dL|)
    (|null_MapExprInj| NAME-JUDGEMENT "MapExprInj" |hp_def| |dL|)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|\|-| CONST-DECL "bool" |dynamic_logic| |dL|)
    (|for| CONST-DECL "T" |for_iterate| |structures|)
    (|for_it| DEF-DECL
     "{t: T | t = for_def(i, upto, a, ext2int(upfrom, upto, f))}" |for_iterate|
     |structures|)
    (|iterate_left| CONST-DECL "T" |for_iterate| |structures|)
    (|distinct_var?| DEF-DECL "{b: bool |
   b =
    FORALL (i: below(length(l))):
      NOT dlvar_index(nth(l, i)) = dlvar_index(v)}"
     |hp_def| |dL|)
    (|pairwise_distinct_vars?| DEF-DECL "{b: bool |
   b =
    FORALL (i, j: below(length(l))):
      i /= j IMPLIES NOT dlvar_index(nth(l, i)) = dlvar_index(nth(l, j))}"
     |hp_def| |dL|))
   SHOSTAK))
 (|dl_ghost_example_TCC1| 0
  (|dl_ghost_example_TCC1-1| NIL 3921932629
   ("" (SKEEP) (("" (DL-MAPEXPR_INJ) NIL NIL)) NIL)
   ((|dLVar| TYPE-DECL NIL |hp_def| |dL|)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|MapExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|val| CONST-DECL "real" |hp_def| |dL|)
    (|mapexpr_inj_distinct_vars| FORMULA-DECL NIL |hp_def| |dL|))
   NIL
   (|dl_ghost_example| SUBTYPE
    "(: (Glossary_Plaidypvs.x, hp_def.val(Glossary_Plaidypvs.x)), (Glossary_Plaidypvs.y, (real_fun_ops[Environment].-)(hp_def.val(Glossary_Plaidypvs.y))) :)"
    "ODEs" (354 24 354 54))))
 (|dl_ghost_example| 0
  (|dl_ghost_example-1| |nil| 3913238956
   ("" (SKEEP)
    (("" (DL-FLATTEN)
      (("" (DL-GHOST "val(x)*val(y)")
        (("" (DL-DIFFINV) (("" (DL-ASSERT) NIL NIL)) NIL)) NIL))
      NIL))
    NIL)
   ((DLBOOL CONST-DECL "bool" |bool_expr| |dL|)
    (DIFF ADT-CONSTRUCTOR-DECL "[[ODEs, BoolExpr] -> (diff?)]" |HP_adt| |dL|)
    (|diff?| ADT-RECOGNIZER-DECL "[HP -> boolean]" |HP_adt| |dL|)
    (|ODEs| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (ALLRUNS CONST-DECL "bool" |bool_expr| |dL|)
    (HP TYPE-DECL NIL |HP_adt| |dL|) (|cnst| CONST-DECL "real" |hp_def| |dL|)
    (>= CONST-DECL "BoolExpr" |bool_expr| |dL|)
    (|Formulas| TYPE-EQ-DECL NIL |bool_expr| |dL|)
    (|dl_impliesR| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|dLVar| TYPE-DECL NIL |hp_def| |dL|)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|MapExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|mapexpr_inj| CONST-DECL "bool" |hp_def| |dL|)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|val| CONST-DECL "real" |hp_def| |dL|)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|nqb_ge| ADT-CONSTRUCTOR-DECL "(nqb_ge?)" |hp_def| |dL|)
    (|nqb_ge?| ADT-RECOGNIZER-DECL "[NQB_REL -> boolean]" |hp_def| |dL|)
    (|NQB_rel| ADT-CONSTRUCTOR-DECL
     "[[NQB_REL, RealExpr, RealExpr] -> (nqb_rel?)]" |NQBool_adt| |dL|)
    (|nqb_rel?| ADT-RECOGNIZER-DECL "[NQBool -> boolean]" |NQBool_adt| |dL|)
    (NQB_REL TYPE-DECL NIL |hp_def| |dL|)
    (|normalize| CONST-DECL
     "{nnqbe: NormNQBool | nqb_to_be(nnqbe) = nqb_to_be(nqbe)}" |bool_expr|
     |dL|)
    (|nqb_to_be| DEF-DECL "BoolExpr" |bool_expr| |dL|)
    (|NormNQBool| TYPE-EQ-DECL NIL |bool_expr| |dL|)
    (|nqb_normal?| INDUCTIVE-DECL "bool" |bool_expr| |dL|)
    (|NQBool| TYPE-DECL NIL |NQBool_adt| |dL|)
    (|nqb_rel| CONST-DECL "BoolExpr" |bool_expr| |dL|)
    (|dl_dI_dlTRUE| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|\|-| CONST-DECL "bool" |dynamic_logic| |dL|)
    (|max_var| CONST-DECL "nat" |hp_def| |dL|)
    (|derivable_M_nqbool?| INDUCTIVE-DECL "bool" |chain_rule_re| |dL|)
    (|normalize_rec| DEF-DECL "{nnqbe: NormNQBool |
   FORALL (env: Environment):
     nqb_to_be(nnqbe)(env) = (pos IFF nqb_to_be(nqbe)(env))}"
     |bool_expr| |dL|)
    (|dl_axiom| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|move_to_head_rec| DEF-DECL "Formulas" |dynamic_logic| |dL|)
    (|is_dlfnum| CONST-DECL "bool" |dynamic_logic| |dL|)
    (|move_to_head| CONST-DECL "Formulas" |dynamic_logic| |dL|)
    (|dl_moveL| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|distinct_var?| DEF-DECL "{b: bool |
   b =
    FORALL (i: below(length(l))):
      NOT dlvar_index(nth(l, i)) = dlvar_index(v)}"
     |hp_def| |dL|)
    (|pairwise_distinct_vars?| DEF-DECL "{b: bool |
   b =
    FORALL (i, j: below(length(l))):
      i /= j IMPLIES NOT dlvar_index(nth(l, i)) = dlvar_index(nth(l, j))}"
     |hp_def| |dL|)
    (|dl_true_DDL| FORMULA-DECL NIL |differentiation| |dL|)
    (|diff_re_val| FORMULA-DECL NIL |diff_re_props| |dL|)
    (|diff_re_prod| FORMULA-DECL NIL |diff_re_props| |dL|)
    (|diff_re?| CONST-DECL "bool" |chain_rule_re| |dL|)
    (|diff_re_cnst| FORMULA-DECL NIL |diff_re_props| |dL|)
    (SUB_DIFT CONST-DECL "BoolExpr" |differentiation| |dL|)
    (|dl_trueL| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (DIFT DEF-DECL "BoolExpr" |differentiation| |dL|)
    (|dl_dift_mult| FORMULA-DECL NIL |differentiation| |dL|)
    (|ddt| DEF-DECL "RealExpr" |differentiation| |dL|)
    (|derivable_up?| CONST-DECL "bool" |differentiation| |dL|)
    (|ddl_dom_upto?| CONST-DECL "bool" |differentiation| |dL|)
    (|dl_derivable_up_val| FORMULA-DECL NIL |differentiation| |dL|)
    (|dl_dift_val| FORMULA-DECL NIL |differentiation| |dL|)
    (|dlvar_index| ADT-ACCESSOR-DECL "[dLVar -> nat]" |hp_def| |dL|)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|max_var_max| FORMULA-DECL NIL |hp_def| |dL|)
    (|dl_dift_const| FORMULA-DECL NIL |differentiation| |dL|)
    (|iterate_left| CONST-DECL "T" |for_iterate| |structures|)
    (|for_it| DEF-DECL
     "{t: T | t = for_def(i, upto, a, ext2int(upfrom, upto, f))}" |for_iterate|
     |structures|)
    (|for| CONST-DECL "T" |for_iterate| |structures|)
    (|dl_forallR| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|null_MapExprInj| NAME-JUDGEMENT "MapExprInj" |hp_def| |dL|)
    (|QBoolExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (DLIMPLIES CONST-DECL "bool" |bool_expr| |dL|)
    (= CONST-DECL "BoolExpr" |bool_expr| |dL|)
    (|dl_discrete_ghost| FORMULA-DECL NIL |dynamic_logic| |dL|))
   SHOSTAK))
 (|dl_grind_example| 0
  (|dl_grind_example-1| |nil| 3913238957
   ("" (SKEEP) (("" (DL-GRIND) NIL NIL)) NIL)
   ((|iterate_left| CONST-DECL "T" |for_iterate| |structures|)
    (|for_it| DEF-DECL
     "{t: T | t = for_def(i, upto, a, ext2int(upfrom, upto, f))}" |for_iterate|
     |structures|)
    (|sqrt_pos| APPLICATION-JUDGEMENT "posreal" |sqrt| |reals|)
    (|for| CONST-DECL "T" |for_iterate| |structures|)
    (|\|-| CONST-DECL "bool" |dynamic_logic| |dL|)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|dl_impliesR| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|Formulas| TYPE-EQ-DECL NIL |bool_expr| |dL|)
    (DLAND CONST-DECL "bool" |bool_expr| |dL|)
    (DLOR CONST-DECL "bool" |bool_expr| |dL|)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (= CONST-DECL "BoolExpr" |bool_expr| |dL|)
    (|dLVar| TYPE-DECL NIL |hp_def| |dL|)
    (|val| CONST-DECL "real" |hp_def| |dL|)
    (|cnst| CONST-DECL "real" |hp_def| |dL|)
    (|sqrt| CONST-DECL "{nnz: nnreal | nnz * nnz = nnx}" |sqrt| |reals|)
    (>= CONST-DECL "BoolExpr" |bool_expr| |dL|)
    (^ CONST-DECL "[T -> real]" |real_fun_ops| |reals|)
    (|dl_andL| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|dl_moveL| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|move_to_head| CONST-DECL "Formulas" |dynamic_logic| |dL|)
    (|is_dlfnum| CONST-DECL "bool" |dynamic_logic| |dL|)
    (|move_to_head_rec| DEF-DECL "Formulas" |dynamic_logic| |dL|)
    (|dl_orL| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|bijective?| CONST-DECL "bool" |functions| NIL))
   SHOSTAK))
 (|dl_ground_example| 0
  (|dl_ground_example-1| |nil| 3913238957
   ("" (SKEEP)
    (("" (DL-GROUND) (("1" (DL-ASSERT) NIL NIL) ("2" (DL-ASSERT) NIL NIL))
      NIL))
    NIL)
   ((|dl_andL| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|dl_orL| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (>= CONST-DECL "BoolExpr" |bool_expr| |dL|)
    (DLAND CONST-DECL "bool" |bool_expr| |dL|)
    (|cnst| CONST-DECL "real" |hp_def| |dL|)
    (|val| CONST-DECL "real" |hp_def| |dL|)
    (|dLVar| TYPE-DECL NIL |hp_def| |dL|)
    (= CONST-DECL "BoolExpr" |bool_expr| |dL|)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (DLOR CONST-DECL "bool" |bool_expr| |dL|)
    (|Formulas| TYPE-EQ-DECL NIL |bool_expr| |dL|)
    (|dl_impliesR| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|dl_orR| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|iterate_left| CONST-DECL "T" |for_iterate| |structures|)
    (|for_it| DEF-DECL
     "{t: T | t = for_def(i, upto, a, ext2int(upfrom, upto, f))}" |for_iterate|
     |structures|)
    (|for| CONST-DECL "T" |for_iterate| |structures|)
    (|\|-| CONST-DECL "bool" |dynamic_logic| |dL|))
   SHOSTAK))
 (|dl_hide_example| 0
  (|dl_hide_example-1| |nil| 3913238957
   ("" (SKEEP)
    (("" (DL-FLATTEN)
      (("" (DL-HIDE -2)
        (("" (DL-HIDE + :BUT 3)
          (("" (DL-HIDE -2) (("" (DL-ASSERT) NIL NIL)) NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((= CONST-DECL "BoolExpr" |bool_expr| |dL|)
    (/= CONST-DECL "BoolExpr" |bool_expr| |dL|)
    (^ CONST-DECL "[T -> real]" |real_fun_ops| |reals|)
    (DLOR CONST-DECL "bool" |bool_expr| |dL|)
    (|val| CONST-DECL "real" |hp_def| |dL|)
    (|dLVar| TYPE-DECL NIL |hp_def| |dL|)
    (|cnst| CONST-DECL "real" |hp_def| |dL|)
    (>= CONST-DECL "BoolExpr" |bool_expr| |dL|)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (DLAND CONST-DECL "bool" |bool_expr| |dL|)
    (|Formulas| TYPE-EQ-DECL NIL |bool_expr| |dL|)
    (|dl_impliesR| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|dl_orR| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|dl_moveR| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|move_to_head| CONST-DECL "Formulas" |dynamic_logic| |dL|)
    (|is_dlfnum| CONST-DECL "bool" |dynamic_logic| |dL|)
    (|move_to_head_rec| DEF-DECL "Formulas" |dynamic_logic| |dL|)
    (|dl_andL| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|dl_hideR| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|\|-| CONST-DECL "bool" |dynamic_logic| |dL|)
    (|for| CONST-DECL "T" |for_iterate| |structures|)
    (|for_it| DEF-DECL
     "{t: T | t = for_def(i, upto, a, ext2int(upfrom, upto, f))}" |for_iterate|
     |structures|)
    (|iterate_left| CONST-DECL "T" |for_iterate| |structures|)
    (|dl_hideL| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|dl_moveL| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|))
   SHOSTAK))
 (|dl_hiderest_example| 0
  (|dl_hiderest_example-1| |nil| 3913238958
   ("" (SKEEP)
    (("" (DL-FLATTEN)
      (("" (DL-HIDE :BUT (-1 3)) (("" (DL-ASSERT) NIL NIL)) NIL)) NIL))
    NIL)
   ((= CONST-DECL "BoolExpr" |bool_expr| |dL|)
    (/= CONST-DECL "BoolExpr" |bool_expr| |dL|)
    (^ CONST-DECL "[T -> real]" |real_fun_ops| |reals|)
    (DLOR CONST-DECL "bool" |bool_expr| |dL|)
    (|val| CONST-DECL "real" |hp_def| |dL|)
    (|dLVar| TYPE-DECL NIL |hp_def| |dL|)
    (|cnst| CONST-DECL "real" |hp_def| |dL|)
    (>= CONST-DECL "BoolExpr" |bool_expr| |dL|)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (DLAND CONST-DECL "bool" |bool_expr| |dL|)
    (|Formulas| TYPE-EQ-DECL NIL |bool_expr| |dL|)
    (|dl_impliesR| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|dl_orR| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|dl_moveR| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|move_to_head| CONST-DECL "Formulas" |dynamic_logic| |dL|)
    (|is_dlfnum| CONST-DECL "bool" |dynamic_logic| |dL|)
    (|move_to_head_rec| DEF-DECL "Formulas" |dynamic_logic| |dL|)
    (|dl_andL| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|\|-| CONST-DECL "bool" |dynamic_logic| |dL|)
    (|for| CONST-DECL "T" |for_iterate| |structures|)
    (|for_it| DEF-DECL
     "{t: T | t = for_def(i, upto, a, ext2int(upfrom, upto, f))}" |for_iterate|
     |structures|)
    (|iterate_left| CONST-DECL "T" |for_iterate| |structures|)
    (|dl_hideL| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|dl_moveL| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|dl_hideR| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|))
   SHOSTAK))
 (|dl_iff_example| 0
  (|dl_iff_example-1| |nil| 3913238958
   ("" (SKEEP)
    (("" (DL-IFFR) (("1" (DL-ASSERT) NIL NIL) ("2" (DL-ASSERT) NIL NIL)) NIL))
    NIL)
   ((|bijective?| CONST-DECL "bool" |functions| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|dl_equivR| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|Formulas| TYPE-EQ-DECL NIL |bool_expr| |dL|)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (= CONST-DECL "BoolExpr" |bool_expr| |dL|)
    (|dLVar| TYPE-DECL NIL |hp_def| |dL|)
    (|val| CONST-DECL "real" |hp_def| |dL|)
    (|cnst| CONST-DECL "real" |hp_def| |dL|)
    (^ CONST-DECL "[T -> real]" |real_fun_ops| |reals|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|iterate_left| CONST-DECL "T" |for_iterate| |structures|)
    (|for_it| DEF-DECL
     "{t: T | t = for_def(i, upto, a, ext2int(upfrom, upto, f))}" |for_iterate|
     |structures|)
    (|for| CONST-DECL "T" |for_iterate| |structures|)
    (|\|-| CONST-DECL "bool" |dynamic_logic| |dL|))
   SHOSTAK))
 (|dl_inst_example| 0
  (|dl_inst_example-1| |nil| 3913238959
   ("" (SKEEP)
    (("" (DL-INST "-1") (("" (DL-FLATTEN) (("" (DL-ASSERT) NIL NIL)) NIL))
      NIL))
    NIL)
   ((|bijective?| CONST-DECL "bool" |functions| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|dl_existsR| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|Formulas| TYPE-EQ-DECL NIL |bool_expr| |dL|)
    (|QBoolExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (DLIMPLIES CONST-DECL "bool" |bool_expr| |dL|)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (= CONST-DECL "BoolExpr" |bool_expr| |dL|)
    (|dLVar| TYPE-DECL NIL |hp_def| |dL|)
    (|val| CONST-DECL "real" |hp_def| |dL|)
    (|cnst| CONST-DECL "real" |hp_def| |dL|) (HP TYPE-DECL NIL |HP_adt| |dL|)
    (ALLRUNS CONST-DECL "bool" |bool_expr| |dL|)
    (|test?| ADT-RECOGNIZER-DECL "[HP -> boolean]" |HP_adt| |dL|)
    (TEST ADT-CONSTRUCTOR-DECL "[BoolExpr -> (test?)]" |HP_adt| |dL|)
    (>= CONST-DECL "BoolExpr" |bool_expr| |dL|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|dl_testb| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|iterate_left| CONST-DECL "T" |for_iterate| |structures|)
    (|for_it| DEF-DECL
     "{t: T | t = for_def(i, upto, a, ext2int(upfrom, upto, f))}" |for_iterate|
     |structures|)
    (|for| CONST-DECL "T" |for_iterate| |structures|)
    (|\|-| CONST-DECL "bool" |dynamic_logic| |dL|)
    (|dl_impliesR| FORMULA-DECL NIL |dynamic_logic| |dL|))
   SHOSTAK))
 (|dl_impliesL_example| 0
  (|dl_impliesL_example-1| |nil| 3913238959
   ("" (SKEEP) (("" (DL-IMPLIESL) NIL NIL)) NIL)
   ((|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (< CONST-DECL "BoolExpr" |bool_expr| |dL|)
    (|dLVar| TYPE-DECL NIL |hp_def| |dL|)
    (|val| CONST-DECL "real" |hp_def| |dL|)
    (|cnst| CONST-DECL "real" |hp_def| |dL|)
    (|dl_impliesL| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|Formulas| TYPE-EQ-DECL NIL |bool_expr| |dL|)
    (> CONST-DECL "BoolExpr" |bool_expr| |dL|)
    (|bijective?| CONST-DECL "bool" |functions| NIL))
   SHOSTAK))
 (|dl_impliesR_example| 0
  (|dl_impliesR_example-1| |nil| 3913238959
   ("" (SKEEP) (("" (DL-IMPLIESR) NIL NIL)) NIL)
   ((< CONST-DECL "BoolExpr" |bool_expr| |dL|)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (= CONST-DECL "BoolExpr" |bool_expr| |dL|)
    (|dLVar| TYPE-DECL NIL |hp_def| |dL|)
    (|val| CONST-DECL "real" |hp_def| |dL|)
    (|cnst| CONST-DECL "real" |hp_def| |dL|)
    (> CONST-DECL "BoolExpr" |bool_expr| |dL|)
    (|Formulas| TYPE-EQ-DECL NIL |bool_expr| |dL|)
    (|dl_impliesR| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|bijective?| CONST-DECL "bool" |functions| NIL))
   SHOSTAK))
 (|dl_iterated_example_TCC1| 0
  (|dl_iterated_example_TCC1-1| NIL 3921932629 ("" (SUBTYPE-TCC) NIL NIL)
   ((|mapexpr_inj| CONST-DECL "bool" |hp_def| |dL|)
    (|null_MapExprInj| NAME-JUDGEMENT "MapExprInj" |hp_def| |dL|)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|cnst| CONST-DECL "real" |hp_def| |dL|)
    (|val| CONST-DECL "real" |hp_def| |dL|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|MapExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|dLVar| TYPE-DECL NIL |hp_def| |dL|))
   NIL
   (|dl_iterated_example| SUBTYPE
    "((: (Glossary_Plaidypvs.x, (real_fun_ops[Environment].-)(hp_def.val(Glossary_Plaidypvs.x), hp_def.cnst(1))) :))"
    "Assigns" (474 24 474 43))))
 (|dl_iterated_example| 0
  (|dl_iterated_example-1| |nil| 3913238960
   ("" (THEN (SKEEP) (DL-FLATTEN) (DL-ITERATED) (DL-ASSERT)) NIL NIL)
   ((|dl_iterated| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (DLOR CONST-DECL "bool" |bool_expr| |dL|)
    (|dl_orR| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|Substitution| TYPE-EQ-DECL NIL |substitution| |dL|)
    (SUB CONST-DECL "bool" |substitution| |dL|)
    (|dl_axiom| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|dl_assignd| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|null_MapExprInj| NAME-JUDGEMENT "MapExprInj" |hp_def| |dL|)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|cnst| CONST-DECL "real" |hp_def| |dL|)
    (|val| CONST-DECL "real" |hp_def| |dL|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|mapexpr_inj| CONST-DECL "bool" |hp_def| |dL|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|MapExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|dLVar| TYPE-DECL NIL |hp_def| |dL|)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|dl_impliesR| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|Formulas| TYPE-EQ-DECL NIL |bool_expr| |dL|)
    (>= CONST-DECL "BoolExpr" |bool_expr| |dL|)
    (HP TYPE-DECL NIL |HP_adt| |dL|)
    (SOMERUNS CONST-DECL "bool" |bool_expr| |dL|)
    (|star?| ADT-RECOGNIZER-DECL "[HP -> boolean]" |HP_adt| |dL|)
    (STAR ADT-CONSTRUCTOR-DECL "[HP -> (star?)]" |HP_adt| |dL|)
    (|Assigns| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|assign?| ADT-RECOGNIZER-DECL "[HP -> boolean]" |HP_adt| |dL|)
    (ASSIGN ADT-CONSTRUCTOR-DECL "[Assigns -> (assign?)]" |HP_adt| |dL|))
   SHOSTAK))
 (|dl_K_example_TCC1| 0
  (|dl_K_example_TCC1-1| NIL 3921932629
   ("" (SKEEP) (("" (DL-MAPEXPR_INJ) NIL NIL)) NIL)
   ((|dLVar| TYPE-DECL NIL |hp_def| |dL|)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|MapExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|val| CONST-DECL "real" |hp_def| |dL|)
    (|cnst| CONST-DECL "real" |hp_def| |dL|)
    (|mapexpr_inj_distinct_vars| FORMULA-DECL NIL |hp_def| |dL|))
   NIL
   (|dl_K_example| SUBTYPE
    "(: (Glossary_Plaidypvs.x, (real_fun_ops[Environment].+)(hp_def.val(Glossary_Plaidypvs.x), hp_def.cnst(2))), (Glossary_Plaidypvs.y, (real_fun_ops[Environment].+)(hp_def.val(Glossary_Plaidypvs.x), hp_def.cnst(1))) :)"
    "Assigns" (486 35 486 69))))
 (|dl_K_example| 0
  (|dl_K_example-1| |nil| 3913238960
   ("" (SKEEP) (("" (DL-K) (("" (DL-ASSERT) NIL NIL)) NIL)) NIL)
   ((|bijective?| CONST-DECL "bool" |functions| NIL)
    (|cnst| CONST-DECL "real" |hp_def| |dL|)
    (|val| CONST-DECL "real" |hp_def| |dL|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|mapexpr_inj| CONST-DECL "bool" |hp_def| |dL|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|MapExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|dLVar| TYPE-DECL NIL |hp_def| |dL|)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|dl_distimpliesb| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (HP TYPE-DECL NIL |HP_adt| |dL|) (|Assigns| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|assign?| ADT-RECOGNIZER-DECL "[HP -> boolean]" |HP_adt| |dL|)
    (ASSIGN ADT-CONSTRUCTOR-DECL "[Assigns -> (assign?)]" |HP_adt| |dL|)
    (|Formulas| TYPE-EQ-DECL NIL |bool_expr| |dL|)
    (>= CONST-DECL "BoolExpr" |bool_expr| |dL|)
    (DLIMPLIES CONST-DECL "bool" |bool_expr| |dL|)
    (ALLRUNS CONST-DECL "bool" |bool_expr| |dL|)
    (|dl_assignb| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|null_MapExprInj| NAME-JUDGEMENT "MapExprInj" |hp_def| |dL|)
    (|SUB_MapVar| DEF-DECL
     "{re: RealExpr | FORALL (env: Environment): re(env) = SUB_Re(l)(val(v))(env)}"
     |substitution| |dL|)
    (|Substitution| TYPE-EQ-DECL NIL |substitution| |dL|)
    (|dl_sub_implies| FORMULA-DECL NIL |substitution| |dL|)
    (|dl_sub_ge| FORMULA-DECL NIL |substitution| |dL|)
    (|dl_subre_const| FORMULA-DECL NIL |substitution| |dL|)
    (|dl_subre_val| FORMULA-DECL NIL |substitution| |dL|)
    (|dl_impliesR| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|iterate_left| CONST-DECL "T" |for_iterate| |structures|)
    (|for_it| DEF-DECL
     "{t: T | t = for_def(i, upto, a, ext2int(upfrom, upto, f))}" |for_iterate|
     |structures|)
    (|for| CONST-DECL "T" |for_iterate| |structures|)
    (|\|-| CONST-DECL "bool" |dynamic_logic| |dL|)
    (|distinct_var?| DEF-DECL "{b: bool |
   b =
    FORALL (i: below(length(l))):
      NOT dlvar_index(nth(l, i)) = dlvar_index(v)}"
     |hp_def| |dL|)
    (|pairwise_distinct_vars?| DEF-DECL "{b: bool |
   b =
    FORALL (i, j: below(length(l))):
      i /= j IMPLIES NOT dlvar_index(nth(l, i)) = dlvar_index(nth(l, j))}"
     |hp_def| |dL|))
   SHOSTAK))
 (|dl_loop_example_TCC1| 0
  (|dl_loop_example_TCC1-1| NIL 3921932629
   ("" (SKEEP) (("" (DL-MAPEXPR_INJ) NIL NIL)) NIL)
   ((|dLVar| TYPE-DECL NIL |hp_def| |dL|)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|MapExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|val| CONST-DECL "real" |hp_def| |dL|)
    (|mapexpr_inj_distinct_vars| FORMULA-DECL NIL |hp_def| |dL|))
   NIL
   (|dl_loop_example| SUBTYPE
    "(: (Glossary_Plaidypvs.x, (real_fun_ops[Environment].+)(hp_def.val(Glossary_Plaidypvs.x), real_fun_ops[Environment].*(2, hp_def.val(Glossary_Plaidypvs.y)))), (Glossary_Plaidypvs.y, (real_fun_ops[Environment].+)(hp_def.val(Glossary_Plaidypvs.y), hp_def.val(Glossary_Plaidypvs.x))) :)"
    "Assigns" (500 28 500 74))))
 (|dl_loop_example| 0
  (|dl_loop_example-1| |nil| 3913238961
   ("" (SKEEP)
    (("" (DL-FLATTEN)
      (("" (DL-LOOP "val(x)>=cnst(1) and val(y) >=cnst(1)")
        (("1" (DL-ASSERT) NIL NIL) ("2" (DL-ASSERT) NIL NIL)
         ("3" (DL-ASSIGNB) (("3" (DL-ASSERT) NIL NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((ASSIGN ADT-CONSTRUCTOR-DECL "[Assigns -> (assign?)]" |HP_adt| |dL|)
    (|assign?| ADT-RECOGNIZER-DECL "[HP -> boolean]" |HP_adt| |dL|)
    (|Assigns| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (STAR ADT-CONSTRUCTOR-DECL "[HP -> (star?)]" |HP_adt| |dL|)
    (|star?| ADT-RECOGNIZER-DECL "[HP -> boolean]" |HP_adt| |dL|)
    (ALLRUNS CONST-DECL "bool" |bool_expr| |dL|)
    (HP TYPE-DECL NIL |HP_adt| |dL|) (|cnst| CONST-DECL "real" |hp_def| |dL|)
    (>= CONST-DECL "BoolExpr" |bool_expr| |dL|)
    (DLAND CONST-DECL "bool" |bool_expr| |dL|)
    (|Formulas| TYPE-EQ-DECL NIL |bool_expr| |dL|)
    (|dl_impliesR| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|dLVar| TYPE-DECL NIL |hp_def| |dL|)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|MapExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|mapexpr_inj| CONST-DECL "bool" |hp_def| |dL|)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|val| CONST-DECL "real" |hp_def| |dL|)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|dl_andL| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|dl_assignb| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|SUB_MapVar| DEF-DECL
     "{re: RealExpr | FORALL (env: Environment): re(env) = SUB_Re(l)(val(v))(env)}"
     |substitution| |dL|)
    (|null_MapExprInj| NAME-JUDGEMENT "MapExprInj" |hp_def| |dL|)
    (|Substitution| TYPE-EQ-DECL NIL |substitution| |dL|)
    (|dl_sub_and| FORMULA-DECL NIL |substitution| |dL|)
    (|dl_sub_ge| FORMULA-DECL NIL |substitution| |dL|)
    (|dl_subre_const| FORMULA-DECL NIL |substitution| |dL|)
    (|dl_subre_val| FORMULA-DECL NIL |substitution| |dL|)
    (|pairwise_distinct_vars?| DEF-DECL "{b: bool |
   b =
    FORALL (i, j: below(length(l))):
      i /= j IMPLIES NOT dlvar_index(nth(l, i)) = dlvar_index(nth(l, j))}"
     |hp_def| |dL|)
    (|distinct_var?| DEF-DECL "{b: bool |
   b =
    FORALL (i: below(length(l))):
      NOT dlvar_index(nth(l, i)) = dlvar_index(v)}"
     |hp_def| |dL|)
    (|dl_axiom| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|dl_andR| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|\|-| CONST-DECL "bool" |dynamic_logic| |dL|)
    (|for| CONST-DECL "T" |for_iterate| |structures|)
    (|for_it| DEF-DECL
     "{t: T | t = for_def(i, upto, a, ext2int(upfrom, upto, f))}" |for_iterate|
     |structures|)
    (|iterate_left| CONST-DECL "T" |for_iterate| |structures|)
    (|dl_loop| FORMULA-DECL NIL |dynamic_logic| |dL|))
   SHOSTAK))
 (|dl_Mb_example_TCC1| 0
  (|dl_Mb_example_TCC1-1| NIL 3921932629 ("" (SUBTYPE-TCC) NIL NIL)
   ((|mapexpr_inj| CONST-DECL "bool" |hp_def| |dL|)
    (|null_MapExprInj| NAME-JUDGEMENT "MapExprInj" |hp_def| |dL|)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|val| CONST-DECL "real" |hp_def| |dL|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|MapExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|dLVar| TYPE-DECL NIL |hp_def| |dL|))
   NIL
   (|dl_Mb_example| SUBTYPE
    "(: (Glossary_Plaidypvs.x, real_fun_ops[Environment].*(real_fun_ops[Environment].*(hp_def.val(Glossary_Plaidypvs.x), hp_def.val(Glossary_Plaidypvs.y)), hp_def.val(Glossary_Plaidypvs.z))) :)"
    "ODEs" (513 24 513 55))))
 (|dl_Mb_example| 0
  (|dl_Mb_example-1| |nil| 3913238961
   ("" (SKEEP) (("" (DL-MB) (("" (DL-ASSERT) NIL NIL)) NIL)) NIL)
   ((|bijective?| CONST-DECL "bool" |functions| NIL)
    (|val| CONST-DECL "real" |hp_def| |dL|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|mapexpr_inj| CONST-DECL "bool" |hp_def| |dL|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|MapExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|dLVar| TYPE-DECL NIL |hp_def| |dL|)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|dl_impliesallrunsb| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (HP TYPE-DECL NIL |HP_adt| |dL|) (|ODEs| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|diff?| ADT-RECOGNIZER-DECL "[HP -> boolean]" |HP_adt| |dL|)
    (DIFF ADT-CONSTRUCTOR-DECL "[[ODEs, BoolExpr] -> (diff?)]" |HP_adt| |dL|)
    (DLBOOL CONST-DECL "bool" |bool_expr| |dL|)
    (|Formulas| TYPE-EQ-DECL NIL |bool_expr| |dL|)
    (/= CONST-DECL "BoolExpr" |bool_expr| |dL|)
    (|cnst| CONST-DECL "real" |hp_def| |dL|)
    (DLIMPLIES CONST-DECL "bool" |bool_expr| |dL|)
    (|\|-| CONST-DECL "bool" |dynamic_logic| |dL|)
    (|for| CONST-DECL "T" |for_iterate| |structures|)
    (|for_it| DEF-DECL
     "{t: T | t = for_def(i, upto, a, ext2int(upfrom, upto, f))}" |for_iterate|
     |structures|)
    (|iterate_left| CONST-DECL "T" |for_iterate| |structures|)
    (|dl_impliesR| FORMULA-DECL NIL |dynamic_logic| |dL|))
   SHOSTAK))
 (|dl_monob_example_TCC1| 0
  (|dl_monob_example_TCC1-1| NIL 3921932629
   ("" (SKEEP) (("" (DL-MAPEXPR_INJ) NIL NIL)) NIL)
   ((|dLVar| TYPE-DECL NIL |hp_def| |dL|)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|MapExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|val| CONST-DECL "real" |hp_def| |dL|)
    (|mapexpr_inj_distinct_vars| FORMULA-DECL NIL |hp_def| |dL|))
   NIL
   (|dl_monob_example| SUBTYPE
    "(: (Glossary_Plaidypvs.x, hp_def.val(Glossary_Plaidypvs.y)), (Glossary_Plaidypvs.y, hp_def.val(Glossary_Plaidypvs.x)) :)"
    "Assigns" (528 17 528 47))))
 (|dl_monob_example| 0
  (|dl_monob_example-1| |nil| 3913238961
   ("" (SKEEP)
    (("" (DL-FLATTEN)
      (("" (DL-MONOB "val(x) = cnst(0) AND val(y) = cnst(c)")
        (("1" (DL-ASSERT) NIL NIL) ("2" (DL-ASSERT) NIL NIL)) NIL))
      NIL))
    NIL)
   ((^ CONST-DECL "[T -> real]" |real_fun_ops| |reals|)
    (ASSIGN ADT-CONSTRUCTOR-DECL "[Assigns -> (assign?)]" |HP_adt| |dL|)
    (|assign?| ADT-RECOGNIZER-DECL "[HP -> boolean]" |HP_adt| |dL|)
    (|Assigns| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (ALLRUNS CONST-DECL "bool" |bool_expr| |dL|)
    (HP TYPE-DECL NIL |HP_adt| |dL|) (|cnst| CONST-DECL "real" |hp_def| |dL|)
    (= CONST-DECL "BoolExpr" |bool_expr| |dL|)
    (DLAND CONST-DECL "bool" |bool_expr| |dL|)
    (|Formulas| TYPE-EQ-DECL NIL |bool_expr| |dL|)
    (|dl_impliesR| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|dLVar| TYPE-DECL NIL |hp_def| |dL|)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|MapExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|mapexpr_inj| CONST-DECL "bool" |hp_def| |dL|)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|val| CONST-DECL "real" |hp_def| |dL|)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|dl_andL| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|\|-| CONST-DECL "bool" |dynamic_logic| |dL|)
    (|for| CONST-DECL "T" |for_iterate| |structures|)
    (|for_it| DEF-DECL
     "{t: T | t = for_def(i, upto, a, ext2int(upfrom, upto, f))}" |for_iterate|
     |structures|)
    (|iterate_left| CONST-DECL "T" |for_iterate| |structures|)
    (|pairwise_distinct_vars?| DEF-DECL "{b: bool |
   b =
    FORALL (i, j: below(length(l))):
      i /= j IMPLIES NOT dlvar_index(nth(l, i)) = dlvar_index(nth(l, j))}"
     |hp_def| |dL|)
    (|distinct_var?| DEF-DECL "{b: bool |
   b =
    FORALL (i: below(length(l))):
      NOT dlvar_index(nth(l, i)) = dlvar_index(v)}"
     |hp_def| |dL|)
    (|dl_moveL| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|move_to_head| CONST-DECL "Formulas" |dynamic_logic| |dL|)
    (|is_dlfnum| CONST-DECL "bool" |dynamic_logic| |dL|)
    (|move_to_head_rec| DEF-DECL "Formulas" |dynamic_logic| |dL|)
    (|dl_axiom| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|dl_andR| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|dl_subre_val| FORMULA-DECL NIL |substitution| |dL|)
    (|dl_subre_const| FORMULA-DECL NIL |substitution| |dL|)
    (|dl_sub_eq| FORMULA-DECL NIL |substitution| |dL|)
    (|dl_sub_and| FORMULA-DECL NIL |substitution| |dL|)
    (|Substitution| TYPE-EQ-DECL NIL |substitution| |dL|)
    (|SUB_MapVar| DEF-DECL
     "{re: RealExpr | FORALL (env: Environment): re(env) = SUB_Re(l)(val(v))(env)}"
     |substitution| |dL|)
    (|null_MapExprInj| NAME-JUDGEMENT "MapExprInj" |hp_def| |dL|)
    (|dl_assignb| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|dl_MbR| FORMULA-DECL NIL |dynamic_logic| |dL|))
   SHOSTAK))
 (|dl_move_example| 0
  (|dl_move_example-1| |nil| 3913238962
   ("" (SKEEP)
    (("" (DL-FLATTEN)
      (("" (DL-MOVE -2) (("" (DL-MOVE 2) (("" (DL-ASSERT) NIL NIL)) NIL)) NIL))
      NIL))
    NIL)
   ((DLOR CONST-DECL "bool" |bool_expr| |dL|)
    (>= CONST-DECL "BoolExpr" |bool_expr| |dL|)
    (|cnst| CONST-DECL "real" |hp_def| |dL|)
    (|val| CONST-DECL "real" |hp_def| |dL|)
    (|dLVar| TYPE-DECL NIL |hp_def| |dL|)
    (= CONST-DECL "BoolExpr" |bool_expr| |dL|)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (DLAND CONST-DECL "bool" |bool_expr| |dL|)
    (|Formulas| TYPE-EQ-DECL NIL |bool_expr| |dL|)
    (|dl_impliesR| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|dl_orR| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|dl_andL| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|dl_moveR| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|iterate_left| CONST-DECL "T" |for_iterate| |structures|)
    (|for_it| DEF-DECL
     "{t: T | t = for_def(i, upto, a, ext2int(upfrom, upto, f))}" |for_iterate|
     |structures|)
    (|for| CONST-DECL "T" |for_iterate| |structures|)
    (|\|-| CONST-DECL "bool" |dynamic_logic| |dL|)
    (|move_to_head_rec| DEF-DECL "Formulas" |dynamic_logic| |dL|)
    (|is_dlfnum| CONST-DECL "bool" |dynamic_logic| |dL|)
    (|move_to_head| CONST-DECL "Formulas" |dynamic_logic| |dL|)
    (|dl_moveL| FORMULA-DECL NIL |dynamic_logic| |dL|))
   SHOSTAK))
 (|dl_notL_example| 0
  (|dl_notL_example-1| |nil| 3913238962
   ("" (SKEEP) (("" (DL-NOTL) NIL NIL)) NIL)
   ((|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (< CONST-DECL "BoolExpr" |bool_expr| |dL|)
    (|dLVar| TYPE-DECL NIL |hp_def| |dL|)
    (|val| CONST-DECL "real" |hp_def| |dL|)
    (|cnst| CONST-DECL "real" |hp_def| |dL|)
    (|dl_notL| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|Formulas| TYPE-EQ-DECL NIL |bool_expr| |dL|)
    (> CONST-DECL "BoolExpr" |bool_expr| |dL|)
    (|bijective?| CONST-DECL "bool" |functions| NIL))
   SHOSTAK))
 (|dl_notR_example| 0
  (|dl_notR_example-1| |nil| 3913238962
   ("" (SKEEP) (("" (DL-NOTR) NIL NIL)) NIL)
   ((< CONST-DECL "BoolExpr" |bool_expr| |dL|)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (= CONST-DECL "BoolExpr" |bool_expr| |dL|)
    (|dLVar| TYPE-DECL NIL |hp_def| |dL|)
    (|val| CONST-DECL "real" |hp_def| |dL|)
    (|cnst| CONST-DECL "real" |hp_def| |dL|)
    (> CONST-DECL "BoolExpr" |bool_expr| |dL|)
    (|Formulas| TYPE-EQ-DECL NIL |bool_expr| |dL|)
    (|dl_notR| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|bijective?| CONST-DECL "bool" |functions| NIL))
   SHOSTAK))
 (|dl_orL_example| 0
  (|dl_orL_example-1| |nil| 3913238963 ("" (SKEEP) (("" (DL-ORL) NIL NIL)) NIL)
   ((|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (<= CONST-DECL "BoolExpr" |bool_expr| |dL|)
    (^ CONST-DECL "[T -> real]" |real_fun_ops| |reals|)
    (|dLVar| TYPE-DECL NIL |hp_def| |dL|)
    (|val| CONST-DECL "real" |hp_def| |dL|)
    (|cnst| CONST-DECL "real" |hp_def| |dL|)
    (|dl_orL| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|Formulas| TYPE-EQ-DECL NIL |bool_expr| |dL|)
    (|bijective?| CONST-DECL "bool" |functions| NIL))
   SHOSTAK))
 (|dl_orR_example| 0
  (|dl_orR_example-1| |nil| 3913238963 ("" (SKEEP) (("" (DL-ORR) NIL NIL)) NIL)
   ((>= CONST-DECL "BoolExpr" |bool_expr| |dL|)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (< CONST-DECL "BoolExpr" |bool_expr| |dL|)
    (|dLVar| TYPE-DECL NIL |hp_def| |dL|)
    (|val| CONST-DECL "real" |hp_def| |dL|)
    (|cnst| CONST-DECL "real" |hp_def| |dL|)
    (> CONST-DECL "BoolExpr" |bool_expr| |dL|)
    (= CONST-DECL "BoolExpr" |bool_expr| |dL|)
    (|Formulas| TYPE-EQ-DECL NIL |bool_expr| |dL|)
    (|dl_orR| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|bijective?| CONST-DECL "bool" |functions| NIL))
   SHOSTAK))
 (|dl_pp_example| 0
  (|dl_pp_example-1| |nil| 3913238964
   ("" (SKEEP) (("" (DL-PP) (("" (DL-ASSERT) NIL NIL)) NIL)) NIL)
   ((|Environment| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (= CONST-DECL "BoolExpr" |bool_expr| |dL|)
    (|dLVar| TYPE-DECL NIL |hp_def| |dL|)
    (|val| CONST-DECL "real" |hp_def| |dL|)
    (|cnst| CONST-DECL "real" |hp_def| |dL|)
    (>= CONST-DECL "BoolExpr" |bool_expr| |dL|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|iterate_left| CONST-DECL "T" |for_iterate| |structures|)
    (|for_it| DEF-DECL
     "{t: T | t = for_def(i, upto, a, ext2int(upfrom, upto, f))}" |for_iterate|
     |structures|)
    (|for| CONST-DECL "T" |for_iterate| |structures|)
    (|\|-| CONST-DECL "bool" |dynamic_logic| |dL|))
   SHOSTAK))
 (|dl_skolem_example| 0
  (|dl_skolem_example-1| |nil| 3913238964
   ("" (SKEEP) (("" (DL-SKOLEM) (("" (DL-ASSERT) NIL NIL)) NIL)) NIL)
   ((|bijective?| CONST-DECL "bool" |functions| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|dl_forallR| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|Formulas| TYPE-EQ-DECL NIL |bool_expr| |dL|)
    (|QBoolExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (DLIMPLIES CONST-DECL "bool" |bool_expr| |dL|)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (> CONST-DECL "BoolExpr" |bool_expr| |dL|)
    (|dLVar| TYPE-DECL NIL |hp_def| |dL|)
    (|val| CONST-DECL "real" |hp_def| |dL|)
    (|cnst| CONST-DECL "real" |hp_def| |dL|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|dl_impliesR| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|dl_axiom| FORMULA-DECL NIL |dynamic_logic| |dL|))
   SHOSTAK))
 (|dl_solve_example1_TCC1| 0
  (|dl_solve_example1_TCC1-1| NIL 3921932629
   ("" (SKEEP) (("" (DL-MAPEXPR_INJ) NIL NIL)) NIL)
   ((|dLVar| TYPE-DECL NIL |hp_def| |dL|)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|MapExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|cnst| CONST-DECL "real" |hp_def| |dL|)
    (|mapexpr_inj_distinct_vars| FORMULA-DECL NIL |hp_def| |dL|))
   NIL
   (|dl_solve_example1| SUBTYPE
    "(: (Glossary_Plaidypvs.x, hp_def.cnst(2)), (Glossary_Plaidypvs.y, hp_def.cnst(3)) :)"
    "ODEs" (631 23 631 55))))
 (|dl_solve_example1| 0
  (|dl_solve_example1-1| |nil| 3913238964
   ("" (SKEEP)
    (("" (DL-FLATTEN) (("" (DL-SOLVE) (("" (DL-ASSERT) NIL NIL)) NIL)) NIL))
    NIL)
   ((DLBOOL CONST-DECL "bool" |bool_expr| |dL|)
    (DIFF ADT-CONSTRUCTOR-DECL "[[ODEs, BoolExpr] -> (diff?)]" |HP_adt| |dL|)
    (|diff?| ADT-RECOGNIZER-DECL "[HP -> boolean]" |HP_adt| |dL|)
    (|ODEs| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (ALLRUNS CONST-DECL "bool" |bool_expr| |dL|)
    (HP TYPE-DECL NIL |HP_adt| |dL|) (|val| CONST-DECL "real" |hp_def| |dL|)
    (<= CONST-DECL "BoolExpr" |bool_expr| |dL|)
    (|Formulas| TYPE-EQ-DECL NIL |bool_expr| |dL|)
    (|dl_impliesR| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|dLVar| TYPE-DECL NIL |hp_def| |dL|)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|MapExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|mapexpr_inj| CONST-DECL "bool" |hp_def| |dL|)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|cnst| CONST-DECL "real" |hp_def| |dL|)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|for| CONST-DECL "T" |for_iterate| |structures|)
    (|for_it| DEF-DECL
     "{t: T | t = for_def(i, upto, a, ext2int(upfrom, upto, f))}" |for_iterate|
     |structures|)
    (|iterate_left| CONST-DECL "T" |for_iterate| |structures|)
    (|move_to_head_rec| DEF-DECL "Formulas" |dynamic_logic| |dL|)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|is_dlfnum| CONST-DECL "bool" |dynamic_logic| |dL|)
    (|move_to_head| CONST-DECL "Formulas" |dynamic_logic| |dL|)
    (|dl_moveL| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|dl_hideL| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|SUB_MapVar| DEF-DECL
     "{re: RealExpr | FORALL (env: Environment): re(env) = SUB_Re(l)(val(v))(env)}"
     |substitution| |dL|)
    (|Substitution| TYPE-EQ-DECL NIL |substitution| |dL|)
    (|dl_sub_le| FORMULA-DECL NIL |substitution| |dL|)
    (|dl_subre_val| FORMULA-DECL NIL |substitution| |dL|)
    (|dl_sub_bool_restricted| FORMULA-DECL NIL |substitution| |dL|)
    (|dl_assignb_restricted| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|dl_assignb| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|dl_andL| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|dl_forallR| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (DLIMPLIES CONST-DECL "bool" |bool_expr| |dL|)
    (DLAND CONST-DECL "bool" |bool_expr| |dL|)
    (>= CONST-DECL "BoolExpr" |bool_expr| |dL|)
    (|is_cnst?| CONST-DECL "bool" |dl_solution| |dL|)
    (|is_val_not_in_map?| CONST-DECL "bool" |dl_solution| |dL|)
    (|in_map| CONST-DECL "bool" |hp_def| |dL|)
    (|dlvar_index| ADT-ACCESSOR-DECL "[dLVar -> nat]" |hp_def| |dL|)
    (|dlvar?| ADT-RECOGNIZER-DECL "[dLVar -> boolean]" |hp_def| |dL|)
    (|dlvar| ADT-CONSTRUCTOR-DECL "[nat -> (dlvar?)]" |hp_def| |dL|)
    (|env_nat_shift| CONST-DECL "real" |dl_solution| |dL|)
    (|env_c| CONST-DECL "real" |dl_solution| |dL|)
    (|init_zip_sol| DEF-DECL "{a: MapExprInj |
   length(a) = length(ode) AND
    FORALL (i: below(length(a))): nth(a, i) = (nth(ode, i)`1, y(i)(t))}"
     |dl_solution| |dL|)
    (|zs| CONST-DECL "MapExprInj" |dl_solution| |dL|)
    (|Y_sol_ex| CONST-DECL "[Environment -> real]" |dl_solution| |dL|)
    (ASSIGN ADT-CONSTRUCTOR-DECL "[Assigns -> (assign?)]" |HP_adt| |dL|)
    (|Assigns| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (UPTO CONST-DECL "BoolExpr" |bool_expr| |dL|)
    (QHP TYPE-EQ-DECL NIL |bool_expr| |dL|)
    (DLFORALL CONST-DECL "bool" |bool_expr| |dL|)
    (|QBoolExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|\|-| CONST-DECL "bool" |dynamic_logic| |dL|)
    (|assign?| ADT-RECOGNIZER-DECL "[HP -> boolean]" |HP_adt| |dL|)
    (|pairwise_distinct_vars?| DEF-DECL "{b: bool |
   b =
    FORALL (i, j: below(length(l))):
      i /= j IMPLIES NOT dlvar_index(nth(l, i)) = dlvar_index(nth(l, j))}"
     |hp_def| |dL|)
    (|distinct_var?| DEF-DECL "{b: bool |
   b =
    FORALL (i: below(length(l))):
      NOT dlvar_index(nth(l, i)) = dlvar_index(v)}"
     |hp_def| |dL|)
    (|null_MapExprInj| NAME-JUDGEMENT "MapExprInj" |hp_def| |dL|)
    (|cnst_lins?| CONST-DECL "bool" |dl_solution| |dL|)
    (|MapExprInj| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|solution_domain_ax_cnst_imp_zip| FORMULA-DECL NIL |dl_solution| |dL|))
   SHOSTAK))
 (|dl_solve_example2_TCC1| 0
  (|dl_solve_example2_TCC1-1| NIL 3921932629
   ("" (SKEEP) (("" (DL-MAPEXPR_INJ) NIL NIL)) NIL)
   ((|dLVar| TYPE-DECL NIL |hp_def| |dL|)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|MapExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|cnst| CONST-DECL "real" |hp_def| |dL|)
    (|val| CONST-DECL "real" |hp_def| |dL|)
    (|distinct_var?| DEF-DECL "{b: bool |
   b =
    FORALL (i: below(length(l))):
      NOT dlvar_index(nth(l, i)) = dlvar_index(v)}"
     |hp_def| |dL|)
    (|pairwise_distinct_vars?| DEF-DECL "{b: bool |
   b =
    FORALL (i, j: below(length(l))):
      i /= j IMPLIES NOT dlvar_index(nth(l, i)) = dlvar_index(nth(l, j))}"
     |hp_def| |dL|)
    (|mapexpr_inj_distinct_vars| FORMULA-DECL NIL |hp_def| |dL|))
   NIL
   (|dl_solve_example2| SUBTYPE
    "(: (Glossary_Plaidypvs.x, hp_def.cnst(3)), (Glossary_Plaidypvs.y, hp_def.val(Glossary_Plaidypvs.x)), (Glossary_Plaidypvs.z, (real_fun_ops[Environment].+)(hp_def.val(Glossary_Plaidypvs.q), hp_def.cnst(5))) :)"
    "ODEs" (639 14 641 27))))
 (|dl_solve_example2| 0
  (|dl_solve_example2-1| |nil| 3913238965
   ("" (SKEEP)
    (("" (DL-SOLVE)
      (("" (DL-INST "t")
        (("" (DL-FLATTEN) (("" (DL-GROUND) (("" (DL-ASSERT) NIL NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|solution_domain_ax_cnst_imp_zip_no_hyp| FORMULA-DECL NIL |dl_solution|
     |dL|)
    (|dLVar| TYPE-DECL NIL |hp_def| |dL|)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|MapExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|mapexpr_inj| CONST-DECL "bool" |hp_def| |dL|)
    (|MapExprInj| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|cnst_lins?| CONST-DECL "bool" |dl_solution| |dL|)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|cnst| CONST-DECL "real" |hp_def| |dL|)
    (|val| CONST-DECL "real" |hp_def| |dL|)
    (= CONST-DECL "BoolExpr" |bool_expr| |dL|)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|null_MapExprInj| NAME-JUDGEMENT "MapExprInj" |hp_def| |dL|)
    (|in_map| CONST-DECL "bool" |hp_def| |dL|)
    (|cnst_val_com| FORMULA-DECL NIL |dl_solution| |dL|)
    (|cnst_val_0| FORMULA-DECL NIL |dl_solution| |dL|)
    (|get_index| DEF-DECL
     "{n: below(length(l)) | dlvar_index(nth(l, n)`1) = j}" |dl_solution| |dL|)
    (|quad_cnst?| CONST-DECL "bool" |dl_solution| |dL|)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|distinct_var?| DEF-DECL "{b: bool |
   b =
    FORALL (i: below(length(l))):
      NOT dlvar_index(nth(l, i)) = dlvar_index(v)}"
     |hp_def| |dL|)
    (|pairwise_distinct_vars?| DEF-DECL "{b: bool |
   b =
    FORALL (i, j: below(length(l))):
      i /= j IMPLIES NOT dlvar_index(nth(l, i)) = dlvar_index(nth(l, j))}"
     |hp_def| |dL|)
    (HP TYPE-DECL NIL |HP_adt| |dL|)
    (|assign?| ADT-RECOGNIZER-DECL "[HP -> boolean]" |HP_adt| |dL|)
    (|Formulas| TYPE-EQ-DECL NIL |bool_expr| |dL|)
    (|\|-| CONST-DECL "bool" |dynamic_logic| |dL|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|QBoolExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (DLFORALL CONST-DECL "bool" |bool_expr| |dL|)
    (QHP TYPE-EQ-DECL NIL |bool_expr| |dL|)
    (UPTO CONST-DECL "BoolExpr" |bool_expr| |dL|)
    (ALLRUNS CONST-DECL "bool" |bool_expr| |dL|)
    (|diff?| ADT-RECOGNIZER-DECL "[HP -> boolean]" |HP_adt| |dL|)
    (DIFF ADT-CONSTRUCTOR-DECL "[[ODEs, BoolExpr] -> (diff?)]" |HP_adt| |dL|)
    (|Assigns| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (ASSIGN ADT-CONSTRUCTOR-DECL "[Assigns -> (assign?)]" |HP_adt| |dL|)
    (|Y_sol_ex| CONST-DECL "[Environment -> real]" |dl_solution| |dL|)
    (|zs| CONST-DECL "MapExprInj" |dl_solution| |dL|)
    (|ODEs| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|init_zip_sol| DEF-DECL "{a: MapExprInj |
   length(a) = length(ode) AND
    FORALL (i: below(length(a))): nth(a, i) = (nth(ode, i)`1, y(i)(t))}"
     |dl_solution| |dL|)
    (|env_c_val| FORMULA-DECL NIL |dl_solution| |dL|)
    (|get_val_cnst_id_ex| CONST-DECL "{vc: [below(length(l)), real] |
   vc`1 /= i AND
    nth(l, i)`2 = cnst(vc`2) + val(nth(l, vc`1)`1) AND
     (FORALL (c: real, m: below(length(l))):
        nth(l, i)`2 = cnst(c) + val(nth(l, m)`1) IMPLIES
         (m = vc`1 AND vc`2 = c))}"
     |dl_solution| |dL|)
    (|in_map_ex| DEF-DECL "bool" |dl_solution| |dL|)
    (|env_c| CONST-DECL "real" |dl_solution| |dL|)
    (|env_nat_shift| CONST-DECL "real" |dl_solution| |dL|)
    (|dlvar| ADT-CONSTRUCTOR-DECL "[nat -> (dlvar?)]" |hp_def| |dL|)
    (|dlvar?| ADT-RECOGNIZER-DECL "[dLVar -> boolean]" |hp_def| |dL|)
    (|dlvar_index| ADT-ACCESSOR-DECL "[dLVar -> nat]" |hp_def| |dL|)
    (|is_val_not_in_map?| CONST-DECL "bool" |dl_solution| |dL|)
    (|is_cnst?| CONST-DECL "bool" |dl_solution| |dL|)
    (>= CONST-DECL "BoolExpr" |bool_expr| |dL|)
    (DLAND CONST-DECL "bool" |bool_expr| |dL|)
    (DLIMPLIES CONST-DECL "bool" |bool_expr| |dL|)
    (|dl_forallR| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|dl_andL| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|dl_impliesR| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|dl_assignb| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|dl_assignb_restricted| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|Substitution| TYPE-EQ-DECL NIL |substitution| |dL|)
    (SUB CONST-DECL "bool" |substitution| |dL|)
    (^ CONST-DECL "[T -> real]" |real_fun_ops| |reals|)
    (|div_safe_re| CONST-DECL "real" |hp_def| |dL|)
    (|dl_sub_eq| FORMULA-DECL NIL |substitution| |dL|)
    (|dl_subre_val| FORMULA-DECL NIL |substitution| |dL|)
    (|SUB_MapVar| DEF-DECL
     "{re: RealExpr | FORALL (env: Environment): re(env) = SUB_Re(l)(val(v))(env)}"
     |substitution| |dL|)
    (|for| CONST-DECL "T" |for_iterate| |structures|)
    (|for_it| DEF-DECL
     "{t: T | t = for_def(i, upto, a, ext2int(upfrom, upto, f))}" |for_iterate|
     |structures|)
    (|iterate_left| CONST-DECL "T" |for_iterate| |structures|)
    (|dl_impliesL| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|dl_axiom| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|dl_andR| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|dl_forallL| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|dl_moveL| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|move_to_head| CONST-DECL "Formulas" |dynamic_logic| |dL|)
    (|is_dlfnum| CONST-DECL "bool" |dynamic_logic| |dL|)
    (|move_to_head_rec| DEF-DECL "Formulas" |dynamic_logic| |dL|))
   SHOSTAK))
 (|dl_subs_example_TCC1| 0
  (|dl_subs_example_TCC1-1| NIL 3921932629
   ("" (SKEEP) (("" (DL-MAPEXPR_INJ) NIL NIL)) NIL)
   ((|dLVar| TYPE-DECL NIL |hp_def| |dL|)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|MapExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|val| CONST-DECL "real" |hp_def| |dL|)
    (|cnst| CONST-DECL "real" |hp_def| |dL|)
    (|distinct_var?| DEF-DECL "{b: bool |
   b =
    FORALL (i: below(length(l))):
      NOT dlvar_index(nth(l, i)) = dlvar_index(v)}"
     |hp_def| |dL|)
    (|pairwise_distinct_vars?| DEF-DECL "{b: bool |
   b =
    FORALL (i, j: below(length(l))):
      i /= j IMPLIES NOT dlvar_index(nth(l, i)) = dlvar_index(nth(l, j))}"
     |hp_def| |dL|)
    (|mapexpr_inj_distinct_vars| FORMULA-DECL NIL |hp_def| |dL|))
   NIL
   (|dl_subs_example| SUBTYPE
    "(: (Glossary_Plaidypvs.x, hp_def.val(Glossary_Plaidypvs.y)), (Glossary_Plaidypvs.y, hp_def.cnst(10)) :)"
    "Substitution" (656 6 656 34))))
 (|dl_subs_example| 0
  (|dl_subs_example-1| |nil| 3913238965
   ("" (THEN (SKEEP) (DL-FLATTEN) (DL-SUBS) (DL-ASSERT)) NIL)
   ((^ CONST-DECL "[T -> real]" |real_fun_ops| |reals|)
    (SUB CONST-DECL "bool" |substitution| |dL|)
    (|Substitution| TYPE-EQ-DECL NIL |substitution| |dL|)
    (= CONST-DECL "BoolExpr" |bool_expr| |dL|)
    (|Formulas| TYPE-EQ-DECL NIL |bool_expr| |dL|)
    (|dl_impliesR| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|dLVar| TYPE-DECL NIL |hp_def| |dL|)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|MapExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|mapexpr_inj| CONST-DECL "bool" |hp_def| |dL|)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|val| CONST-DECL "real" |hp_def| |dL|)
    (|cnst| CONST-DECL "real" |hp_def| |dL|)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|\|-| CONST-DECL "bool" |dynamic_logic| |dL|)
    (|for| CONST-DECL "T" |for_iterate| |structures|)
    (|for_it| DEF-DECL
     "{t: T | t = for_def(i, upto, a, ext2int(upfrom, upto, f))}" |for_iterate|
     |structures|)
    (|iterate_left| CONST-DECL "T" |for_iterate| |structures|)
    (|dl_subre_val| FORMULA-DECL NIL |substitution| |dL|)
    (|dl_subre_exp| FORMULA-DECL NIL |substitution| |dL|)
    (|dl_subre_plus| FORMULA-DECL NIL |substitution| |dL|)
    (|dl_subre_const| FORMULA-DECL NIL |substitution| |dL|)
    (|dl_sub_eq| FORMULA-DECL NIL |substitution| |dL|)
    (|null_MapExprInj| NAME-JUDGEMENT "MapExprInj" |hp_def| |dL|)
    (|SUB_MapVar| DEF-DECL
     "{re: RealExpr | FORALL (env: Environment): re(env) = SUB_Re(l)(val(v))(env)}"
     |substitution| |dL|)
    (|pairwise_distinct_vars?| DEF-DECL "{b: bool |
   b =
    FORALL (i, j: below(length(l))):
      i /= j IMPLIES NOT dlvar_index(nth(l, i)) = dlvar_index(nth(l, j))}"
     |hp_def| |dL|)
    (|distinct_var?| DEF-DECL "{b: bool |
   b =
    FORALL (i: below(length(l))):
      NOT dlvar_index(nth(l, i)) = dlvar_index(v)}"
     |hp_def| |dL|))
   SHOSTAK))
 (|dl_testb_example| 0
  (|dl_testb_example-1| |nil| 3913238966
   ("" (SKEEP)
    (("" (DL-FLATTEN) (("" (DL-TESTB) (("" (DL-ASSERT) NIL NIL)) NIL)) NIL))
    NIL)
   ((DLIMPLIES CONST-DECL "bool" |bool_expr| |dL|)
    (^ CONST-DECL "[T -> real]" |real_fun_ops| |reals|)
    (> CONST-DECL "BoolExpr" |bool_expr| |dL|)
    (|cnst| CONST-DECL "real" |hp_def| |dL|)
    (|val| CONST-DECL "real" |hp_def| |dL|)
    (|dLVar| TYPE-DECL NIL |hp_def| |dL|)
    (= CONST-DECL "BoolExpr" |bool_expr| |dL|)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (TEST ADT-CONSTRUCTOR-DECL "[BoolExpr -> (test?)]" |HP_adt| |dL|)
    (|test?| ADT-RECOGNIZER-DECL "[HP -> boolean]" |HP_adt| |dL|)
    (ALLRUNS CONST-DECL "bool" |bool_expr| |dL|)
    (HP TYPE-DECL NIL |HP_adt| |dL|)
    (|Formulas| TYPE-EQ-DECL NIL |bool_expr| |dL|)
    (|dl_impliesR| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|dl_axiom| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|dl_impliesL| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|dl_testb| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|dl_moveL| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|move_to_head| CONST-DECL "Formulas" |dynamic_logic| |dL|)
    (|is_dlfnum| CONST-DECL "bool" |dynamic_logic| |dL|)
    (|move_to_head_rec| DEF-DECL "Formulas" |dynamic_logic| |dL|))
   SHOSTAK))
 (|dl_testd_example| 0
  (|dl_testd_example-1| |nil| 3913238966
   ("" (SKEEP) (("" (DL-FLATTEN) (("" (DL-ASSERT) NIL NIL)) NIL)) NIL)
   ((DLAND CONST-DECL "bool" |bool_expr| |dL|)
    (^ CONST-DECL "[T -> real]" |real_fun_ops| |reals|)
    (> CONST-DECL "BoolExpr" |bool_expr| |dL|)
    (|cnst| CONST-DECL "real" |hp_def| |dL|)
    (|val| CONST-DECL "real" |hp_def| |dL|)
    (|dLVar| TYPE-DECL NIL |hp_def| |dL|)
    (= CONST-DECL "BoolExpr" |bool_expr| |dL|)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (TEST ADT-CONSTRUCTOR-DECL "[BoolExpr -> (test?)]" |HP_adt| |dL|)
    (|test?| ADT-RECOGNIZER-DECL "[HP -> boolean]" |HP_adt| |dL|)
    (SOMERUNS CONST-DECL "bool" |bool_expr| |dL|)
    (HP TYPE-DECL NIL |HP_adt| |dL|)
    (|Formulas| TYPE-EQ-DECL NIL |bool_expr| |dL|)
    (|dl_impliesR| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|dl_axiom| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|dl_testd| FORMULA-DECL NIL |dynamic_logic| |dL|))
   SHOSTAK))
 (|dl_trueR_example| 0
  (|dl_trueR_example-1| |nil| 3913238966
   ("" (SKEEP) (("" (DL-TRUER) NIL NIL)) NIL)
   ((^ CONST-DECL "[T -> real]" |real_fun_ops| |reals|)
    (<= CONST-DECL "BoolExpr" |bool_expr| |dL|)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (> CONST-DECL "BoolExpr" |bool_expr| |dL|)
    (|dLVar| TYPE-DECL NIL |hp_def| |dL|)
    (|val| CONST-DECL "real" |hp_def| |dL|)
    (|cnst| CONST-DECL "real" |hp_def| |dL|)
    (|Formulas| TYPE-EQ-DECL NIL |bool_expr| |dL|)
    (|dl_trueR| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|bijective?| CONST-DECL "bool" |functions| NIL))
   SHOSTAK))
 (|dl_Vb_example_TCC1| 0
  (|dl_Vb_example_TCC1-1| NIL 3921932629 ("" (SUBTYPE-TCC) NIL NIL)
   ((|mapexpr_inj| CONST-DECL "bool" |hp_def| |dL|)
    (|dLVar| TYPE-DECL NIL |hp_def| |dL|)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|MapExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|val| CONST-DECL "real" |hp_def| |dL|)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|null_MapExprInj| NAME-JUDGEMENT "MapExprInj" |hp_def| |dL|))
   NIL
   (|dl_Vb_example| SUBTYPE
    "(: (Glossary_Plaidypvs.y, real_fun_ops[Environment].*(hp_def.val(Glossary_Plaidypvs.y), hp_def.val(Glossary_Plaidypvs.z))) :)"
    "ODEs" (705 26 705 50))))
 (|dl_Vb_example| 0
  (|dl_Vb_example-2| "" 3947515652
   ("" (SKEEP)
    (("" (DL-FLATTEN) (("" (DL-VB) (("" (DL-ASSERT) NIL NIL)) NIL)) NIL)) NIL)
   ((^ CONST-DECL "[T -> real]" |real_fun_ops| |reals|)
    (DLBOOL CONST-DECL "bool" |bool_expr| |dL|)
    (DIFF ADT-CONSTRUCTOR-DECL "[[ODEs, BoolExpr] -> (diff?)]" |HP_adt| |dL|)
    (|diff?| ADT-RECOGNIZER-DECL "[HP -> boolean]" |HP_adt| |dL|)
    (|ODEs| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (ALLRUNS CONST-DECL "bool" |bool_expr| |dL|)
    (HP TYPE-DECL NIL |HP_adt| |dL|) (|cnst| CONST-DECL "real" |hp_def| |dL|)
    (= CONST-DECL "BoolExpr" |bool_expr| |dL|)
    (|Formulas| TYPE-EQ-DECL NIL |bool_expr| |dL|)
    (|dl_impliesR| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|dLVar| TYPE-DECL NIL |hp_def| |dL|)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|MapExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|mapexpr_inj| CONST-DECL "bool" |hp_def| |dL|)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|val| CONST-DECL "real" |hp_def| |dL|)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|\|-| CONST-DECL "bool" |dynamic_logic| |dL|)
    (|for| CONST-DECL "T" |for_iterate| |structures|)
    (|for_it| DEF-DECL
     "{t: T | t = for_def(i, upto, a, ext2int(upfrom, upto, f))}" |for_iterate|
     |structures|)
    (|iterate_left| CONST-DECL "T" |for_iterate| |structures|)
    (BV DEF-DECL "list[nat]" |bound_variables_def| |dL|)
    (|distinct_var?| DEF-DECL "{b: bool |
   b =
    FORALL (i: below(length(l))):
      NOT dlvar_index(nth(l, i)) = dlvar_index(v)}"
     |hp_def| |dL|)
    (|fresh_re_cnst| FORMULA-DECL NIL |fresh_props| |dL|)
    (|fresh_re_val| FORMULA-DECL NIL |fresh_props| |dL|)
    (|fresh_re_pow| FORMULA-DECL NIL |fresh_props| |dL|)
    (|fresh_be_eq| FORMULA-DECL NIL |fresh_props| |dL|)
    (|dlvar_index| ADT-ACCESSOR-DECL "[dLVar -> nat]" |hp_def| |dL|)
    (|pairwise_distinct_vars?| DEF-DECL "{b: bool |
   b =
    FORALL (i, j: below(length(l))):
      i /= j IMPLIES NOT dlvar_index(nth(l, i)) = dlvar_index(nth(l, j))}"
     |hp_def| |dL|)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|bv_me| DEF-DECL "list[nat]" |bound_variables_def| |dL|)
    (|dl_V| FORMULA-DECL NIL |dynamic_logic| |dL|))
   SHOSTAK)
  (|dl_Vb_example-1| |nil| 3913238967
   ("" (SKEEP)
    (("" (DL-FLATTEN)
      (("" (CASE "id(true)")
        (("1" (DELETE -1)
          (("1" (RELABEL (:PAIRING FN!_12055) (1))
            (("1"
              (NAME-LABEL*
               ("GAMMA__589" (! FN!_12055 1) "DELTA__590" (! FN!_12055 2 2))
               :HIDE? T)
              (("1" (LEMMA "dl_V")
                (("1" (RELABEL (:PAIRING NFN!_12079) (-1))
                  (("1"
                    (WITH-TCCS (INST? NFN!_12079 :WHERE FN!_12055 :POLARITY? T)
                     :TCC-STEP (ASSERT))
                    (("1" (REPLACES FN!_12055 :IN NFN!_12079)
                      (("1" (EXPAND* ("GAMMA__589" "DELTA__590"))
                        (("1" (SPLIT NFN!_12079)
                          (("1" (DL-PP NFN!_12079)
                            (("1" (TOUCH (DELABEL (NFN!_12079)))
                              (("1" (TOUCH (DELABEL NIL :HIDE? T))
                                (("1"
                                  (TOUCH (DELABEL (GAMMA__12056 DELTA__12057)))
                                  (("1" (TOUCH (DELABEL (FN!_12055)))
                                    (("1" (TOUCH (DELABEL NIL :HIDE? T))
                                      (("1" (POSTPONE) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (HIDE-ALL-BUT 1)
                            (("2" (SKEEP :PREDS? T)
                              (("2" (EXPAND "BV")
                                (("2" (EXPAND "bv_me")
                                  (("2" (EXPAND "bv_me")
                                    (("2" (EXPAND "length" -1)
                                      (("2" (EXPAND "length" -1)
                                        (("2" (GENERALIZE "i" "i" "below(1)")
                                          (("2" (UNROLL)
                                            (("2" (FLATTEN)
                                              (("2"
                                                (FOR NIL
                                                 (REWRITES
                                                  ("bool_expr.fresh?"
                                                   "fresh_be_DLTRUE"
                                                   "fresh_be_DLFALSE"
                                                   "fresh_be_eq" "fresh_be_neq"
                                                   "fresh_be_le" "fresh_be_lt"
                                                   "fresh_be_ge" "fresh_be_gt"
                                                   "fresh_be_or" "fresh_be_and"
                                                   "fresh_be_implies"
                                                   "fresh_be_not"
                                                   "fresh_be_IFF"
                                                   "fresh_re_cnst"
                                                   "fresh_re_val"
                                                   "fresh_re_sum"
                                                   "fresh_re_minus"
                                                   "fresh_re_prod"
                                                   "fresh_re_pow"
                                                   "fresh_re_exp"
                                                   "fresh_re_div_safe"
                                                   "fresh_re_sqrt_safe")
                                                  :FNUMS 1 :TARGET-FNUMS 1))
                                                (("2" (POSTPONE) NIL NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (POSTPONE) NIL NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|dl_weak_example| 0
  (|dl_weak_example-1| |nil| 3913238967
   ("" (SKEEP)
    (("" (DL-FLATTEN)
      (("" (DL-WEAK "val(y)=cnst(25)")
        (("1" (DL-ASSERT) NIL NIL) ("2" (DL-ASSERT) NIL NIL)) NIL))
      NIL))
    NIL)
   ((|cnst| CONST-DECL "real" |hp_def| |dL|)
    (|val| CONST-DECL "real" |hp_def| |dL|)
    (|dLVar| TYPE-DECL NIL |hp_def| |dL|)
    (= CONST-DECL "BoolExpr" |bool_expr| |dL|)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (DLAND CONST-DECL "bool" |bool_expr| |dL|)
    (|Formulas| TYPE-EQ-DECL NIL |bool_expr| |dL|)
    (|dl_impliesR| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| |dL|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|dl_andL| FORMULA-DECL NIL |dynamic_logic| |dL|)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|\|-| CONST-DECL "bool" |dynamic_logic| |dL|)
    (|for| CONST-DECL "T" |for_iterate| |structures|)
    (|for_it| DEF-DECL
     "{t: T | t = for_def(i, upto, a, ext2int(upfrom, upto, f))}" |for_iterate|
     |structures|)
    (|iterate_left| CONST-DECL "T" |for_iterate| |structures|)
    (|dl_weakR| FORMULA-DECL NIL |dynamic_logic| |dL|))
   SHOSTAK)))

