Glossary_Plaidypvs : THEORY

%-------------------------------------------------------------------------% 
%-------------------------------------------------------------------------%
%| Glossary_Plaidypvs: This is a nice glossary of Plaidypvs prover       |%
%|   commands. Each prover command has a minimal example of use with it. |%
%|                                                                       |%
%| This is a good reference for checking what an ODen command does       |%
%-------------------------------------------------------------------------%
% Created                                                          Oct 2022
%                                                                  JTS, LMW
% Last Updated                                                     Jan 2023
%                                                                       JTS
%-------------------------------------------------------------------------%
%-------------------------------------------------------------------------%

%-----     %
  BEGIN
%     -----%

%%--------------------------------------------
%% To get the suite of commands, import
%  dynamic logic. for you it will be like this
%  IMPORTING dl@top
%%--------------------------------------------

IMPORTING dL@top

%Define the variables for this workbook

x,y,z, 
w,q    : VAR dLVar
c      : VAR real

%%--------------------------------------------
%% dl-axiom -  Dicharge sequent with same boolean
%              expression in antecedent and
%              consequnt
%%--------------------------------------------

dl_axiom_example : LEMMA
  (: val(q) >= val(x), val(x) = cnst(100) :) |-
  (: val(w) = val(x), val(y) = cnst(0), val(q) >= val(x) :)

%|- dl_axiom_example : PROOF
%|- (then (skeep) (dl-axiom 3))
%|- QED dl_axiom_example

%%--------------------------------------------
%% dl-andL - flatten conjunction in antecedent
%
%  Tip: (dl-flatten) has more automation
%%--------------------------------------------

dl_andL_example : LEMMA
  (: DLAND(val(q) >= val(x), val(x) = cnst(100)) :) |-
  (: val(q) >= val(x) :)

%|- dl_andL_example : PROOF
%|- (then (skeep) (dl-andL) (dl-axiom))
%|- QED dl_andL_example

%%--------------------------------------------
%% dl-andR -  split conjunction in antecedent
%
%  Tip: (dl-ground) has more automation
%%--------------------------------------------

dl_andR_example : LEMMA
  DLIMPLIES(val(q) >= val(x),
    DLAND(val(q) >= val(x), cnst(10) >= cnst(0)))

%|- dl_andR_example : PROOF
%|- (then (skeep) (dl-flatten) (spread (dl-andR) ((dl-axiom) (dl-assert))))
%|- QED dl_andR_example

%%--------------------------------------------
%% dl-anyb - simplify ANY hybrid program
%            (allruns)
%%--------------------------------------------

dl_anyb_example : LEMMA
  ALLRUNS(ANY(x, val(x) >= cnst(10)),
          val(x) >= cnst(0))

%|- dl_anyb_example : PROOF
%|- (then (skeep) (dl-anyb) (dl-skolem "X") (dl-subs) (dl-flatten)
%|-  (dl-assert))
%|- QED dl_anyb_example

%%--------------------------------------------
%% dl-anyd - simplify ANY hybrid program
%            (someruns)
%%--------------------------------------------

dl_anyd_example : LEMMA
  SOMERUNS(ANY(x, val(x) >= cnst(-10)),
           val(x) >= cnst(0))

%|- dl_anyd_example : PROOF
%|- (then (skeep) (dl-anyd) (dl-inst "1") (dl-subs)
%|-  (spread (dl-andR) ((dl-assert) (dl-assert))))
%|- QED dl_anyd_example

%%--------------------------------------------
%% dl-assert - Applies hybrid program rewrites
%              grind sequent
%	       Uses SMT solver
%%--------------------------------------------

dl_assert_example : LEMMA
  pairwise_distinct_vars?((:x,y:)) IMPLIES
  LET
  ax1 = ASSIGN((: x << val(x)+cnst(1), y << val(x) :)),
  ax2 = ASSIGN((: x << val(x)+cnst(2), y << val(x) :)),
  ax3 = ASSIGN((: x << val(x)+cnst(2), y << val(x) :))
  IN
  ALLRUNS(SEQ(UNION(ax1,ax2),ax3),
          DLOR(val(x) - val(y) > cnst(0), val(y)-val(x) > cnst(0)))

%|- dl_assert_example : PROOF
%|- (then (skeep) (beta) (dl-assert))
%|- QED dl_assert_example

%%--------------------------------------------
%% dl-assignb - Applies substitution (allruns)
%%--------------------------------------------

dl_assignb_example : LEMMA
  pairwise_distinct_vars?((:x,y,z:)) IMPLIES
  ALLRUNS(ASSIGN( (: x << cnst(10),
  		     y << val(x)+10,
		     z << val(z)+val(x)-cnst(10) :)),
          val(x)=cnst(10))

%|- dl_assignb_example : PROOF
%|- (then (skeep) (dl-assignb) (dl-assert))
%|- QED dl_assignb_example

%%--------------------------------------------
%% dl-assignb - Applies substitution (someruns)
%%--------------------------------------------

dl_assignd_example : LEMMA
  pairwise_distinct_vars?((:x,y:)) IMPLIES
  SOMERUNS(ASSIGN( (: x << cnst(10),
  		      y << val(x)+10 :)),
           val(x)=cnst(10))

%|- dl_assignd_example : PROOF
%|- (then (skeep) (dl-assignd) (dl-assert))
%|- QED dl_assignd_example

%%--------------------------------------------
%% dl-boxd - Rewrites between ALLRUNS and SOMERUNS
%%--------------------------------------------

dl_boxd_example : LEMMA
  NOT SOMERUNS(ASSIGN((: x << val(x)*val(x) :)),
               val(x) < cnst(0))

%|- dl_boxd_example : PROOF
%|- (then (skeep) (dl-assert))
%|- QED dl_boxd_example

%%--------------------------------------------
%% dl-choiceb - Rewrites between ALLRUNS and SOMERUNS
%%--------------------------------------------

dl_choiceb_example : LEMMA
  ALLRUNS(UNION(ASSIGN((: x << cnst(10) :)),
                ASSIGN((: x << cnst(11) :))),
          val(x) >= cnst(0))

%|- dl_choiceb_example : PROOF
%|- (then (skeep) (dl-choiceb) (spread (dl-andR) ((dl-assert) (dl-assert))))
%|- QED dl_choiceb_example
 
%%--------------------------------------------
%% dl-choiced - Rewrites between ALLRUNS and SOMERUNS
%%--------------------------------------------

dl_choiced_example : LEMMA
  SOMERUNS(UNION(ASSIGN((: x << cnst(5) :)),
                 ASSIGN((: x << cnst(10) :))),
           val(x) >= cnst(0))

%|- dl_choiced_example : PROOF
%|- (then (skeep) (dl-choiced) (dl-ground) (dl-hide 2) (dl-assignd)
%|-  (dl-assert))
%|- QED dl_choiced_example

%%--------------------------------------------
%% dl-composeb - reduces seq hybrid program
%                (allruns)
%%--------------------------------------------

dl_composeb_example : LEMMA
  ALLRUNS(SEQ(TEST(val(x)>=cnst(0)),
              ASSIGN((: x << cnst(-5) :))),
	  val(x) < cnst(0))

%|- dl_composeb_example : PROOF
%|- (then (skeep) (dl-composeb) (dl-assignb) (dl-testb) (dl-flatten)
%|-  (dl-assert))
%|- QED dl_composeb_example

%%--------------------------------------------
%% dl-composeb - reduces seq hybrid program
%                (allruns)
%%--------------------------------------------

dl_composed_example : LEMMA
  val(x) >= cnst(2) IMPLIES
  SOMERUNS(SEQ(TEST(val(x) >= cnst(0)),
               ASSIGN((: x << val(x)+1 :))),
	   val(x) >= cnst(2))

%|- dl_composed_example : PROOF
%|- (then (skeep) (dl-flatten) (dl-composed) (rewrite "dl_testd")
%|-  (dl-assignd) (dl-assert))
%|- QED dl_composed_example

%%--------------------------------------------
%% dl-cut - split sequent according to cut
%%--------------------------------------------

dl_case_example : LEMMA 
  ALLRUNS(IFTE(cnst(c) >= cnst(0),
            ASSIGN((: x << cnst(c) :)),
	    ASSIGN((: x << cnst(-c) :))),
          val(x) >= cnst(0))

%|- dl_case_example : PROOF
%|- (then (skeep)
%|-  (spread (dl-case "cnst(c) >= cnst(0)")
%|-   ((then (dl-choiceb) (spread (dl-andR) ((dl-assert) (dl-assert))))
%|-    (dl-assert))))
%|- QED dl_case_example

%%--------------------------------------------
%% dl-diffcase - adds cut to diff? HP
%%--------------------------------------------

dl_diffcase_example: LEMMA
  ALLRUNS(DIFF((: x << cnst(2) :),val(x) > cnst(0)), val(x)^2 > cnst(5)) AND 
  ALLRUNS(DIFF((: x << cnst(2) :),val(x) > cnst(0) AND val(x)^2 > cnst(5)), DLTRUE) 
  IMPLIES ALLRUNS(DIFF((: x << cnst(2) :),val(x) > cnst(0)),
                  DLTRUE)

%|- dl_diffcase_example : PROOF
%|- (then (skeep) (dl-flatten)
%|-  (spread (dl-diffcase "val(x) ^ 2 > cnst(5)")
%|-   ((dl-assert) (dl-assert))))
%|- QED dl_diffcase_example

%%--------------------------------------------
%% dl-diffghost - introduces ghost variable to diff? HP
%%--------------------------------------------

dl_diffghost_example: LEMMA
  LET
  dyn : HP = DIFF( (: x << val(x) :))
  IN
  val(x) > 0 IMPLIES
  ALLRUNS(dyn, val(x) > 0)

%|- dl_diffghost_example : PROOF
%|- (then (skeep) (beta) (dl-flatten)
%|-  (spread
%|-   (dl-diffghost "cnst(-1/2)" "cnst(0)" "G" "val(x)*val(G)^2=cnst(1)")
%|-   ((then (dl-instf "div_safe_re(cnst(1),val(x)^^(1/2))") (dl-composeb)
%|-     (dl-assignb) (dl-subf)
%|-     (spread (dl-diffinv)
%|-      ((spread (grind :exclude "^^")
%|-        ((grind) (then (lemma "sqrt_hathat") (grind))))
%|-       (dl-assert))))
%|-    (dl-assert) (dl-assert))))
%|- QED dl_diffghost_example

%%--------------------------------------------
%% dl-diffinit - introduces domain in dl-sequent to diff? HP
%%--------------------------------------------

dl_diffinit_example: LEMMA
  ((: val(x)>cnst(0) :) |- ALLRUNS(DIFF((: x << cnst(2) :),val(x)>cnst(0)),DLTRUE))
  IMPLIES 
    ALLRUNS(DIFF((: x << cnst(2) :),val(x)>cnst(0)),DLTRUE)

%|- dl_diffinit_example : PROOF
%|- (then (skeep) (dl-diffinit))
%|- QED dl_diffinit_example

%%--------------------------------------------
%% dl-diffinv - differnital invariant 
%%--------------------------------------------

dl_diffinv_example : LEMMA
  pairwise_distinct_vars?((:x,y:)) IMPLIES
  val(x)^2+val(y)^2=cnst(1)
  IMPLIES ALLRUNS(DIFF((: x << -val(y), y << val(x) :)), val(x)^2+val(y)^2=cnst(1))

%|- dl_diffinv_example : PROOF
%|- (then (skeep) (dl-flatten) (dl-diffinv) (dl-assert))
%|- QED dl_diffinv_example

%%--------------------------------------------
%% dl-falseL - discharge sequent with FALSE in antecendent 
%%--------------------------------------------

dl_falseL_example: LEMMA
  (: DLFALSE :) |- (: val(x) > cnst(5) :)

%|- dl_falseL_example : PROOF
%|- (then (skeep) (dl-falseL))
%|- QED dl_falseL_example

%%--------------------------------------------
%% dl-flatten - Disjunctive simplification
%%--------------------------------------------

dl_flatten_example : LEMMA
  ((cnst(-5) >= val(x) AND val(y) >= cnst(0))
   AND
   (val(x) >= cnst(5) OR cnst(-10) >= val(x)))
  IMPLIES
  (val(x)^2 >= cnst(25))

%|- dl_flatten_example : PROOF
%|- (then (skeep) (dl-flatten) (dl-assert))
%|- QED dl_flatten_example

%%--------------------------------------------
%% dl-g - Godel's theorem 
%%--------------------------------------------

 dl_g_example: LEMMA
  pairwise_distinct_vars?((: x, y, z :)) IMPLIES
  ALLRUNS(DIFF((: x << val(x)+val(y)^50,
                  y << val(y)*val(x)*val(z),
                  z << val(x) :)),val(x)*val(x)>=cnst(0))

%|- dl_g_example : PROOF
%|- (then (skeep) (dl-Gb) (dl-assert))
%|- QED dl_g_example

%%--------------------------------------------
%% dl-ghost - introduces discrete ghost variable
%%--------------------------------------------

 dl_ghost_example: LEMMA
   pairwise_distinct_vars?((:x,y:)) IMPLIES
   val(x)*val(y) >= cnst(2)
   IMPLIES ALLRUNS(DIFF((: x << val(x),y << -val(y) :)),val(x)*val(y) >=cnst(2))

%|- dl_ghost_example : PROOF
%|- (then (skeep) (dl-flatten) (dl-ghost "val(x)*val(y)") (dl-diffinv)
%|-  (dl-assert))
%|- QED dl_ghost_example

%%--------------------------------------------
%% dl-grind - grinds a dl-sequent
%%--------------------------------------------

 dl_grind_example: LEMMA
  (val(x)=cnst(5) OR val(x)=cnst(10)) AND val(y) = cnst(0) AND val(z) = cnst(sqrt(15))
 IMPLIES
 val(x)^2 + val(y)^2 >= val(z)

%|- dl_grind_example : PROOF
%|- (then (skeep) (dl-grind))
%|- QED dl_grind_example

%%--------------------------------------------
%% dl-ground - grounds a dl-sequent
%%--------------------------------------------

 dl_ground_example: LEMMA
  (val(x)*val(y)=cnst(10) OR (val(x)=cnst(10) AND val(y) = cnst(0)))
 IMPLIES
 DLOR(cnst(2)*val(x)*val(y)=cnst(20), val(x)>=val(y))

%|- dl_ground_example : PROOF
%|- (then (skeep) (spread (dl-ground) ((dl-assert) (dl-assert))))
%|- QED dl_ground_example

%%--------------------------------------------
%% dl-hide - hide formulas in dl-sequent
%%--------------------------------------------

dl_hide_example : LEMMA
  ((cnst(-5) >= val(x) AND val(y) >= cnst(0))
   AND
   (val(x) >= cnst(5) OR cnst(-10) >= val(x)))
  IMPLIES
  ((val(x)^2 >= cnst(25)) OR val(y) /= 0 OR val(x) = 0)

%|- dl_hide_example : PROOF
%|- (then (skeep) (dl-flatten) (dl-hide -2) (dl-hide + :but 3) (dl-hide -2)
%|-  (dl-assert))
%|- QED dl_hide_example

%%--------------------------------------------
%% dl-hiderest - hide formulas in dl-sequent
%%--------------------------------------------

dl_hiderest_example : LEMMA
  ((cnst(-5) >= val(x) AND val(y) >= cnst(0))
   AND
   (val(x) >= cnst(5) OR cnst(-10) >= val(x)))
  IMPLIES
  ((val(x)^2 >= cnst(25)) OR val(y) /= 0 OR val(x) = 0)

%|- dl_hiderest_example : PROOF
%|- (then (skeep) (dl-flatten) (dl-hiderest (-1 3)) (dl-assert))
%|- QED dl_hiderest_example

%%--------------------------------------------
%% dl-iffL - IFF rule
%%--------------------------------------------

 dl_iff_example: LEMMA
 DLIFF(val(x)=0,val(x)^2=0)

%|- dl_iff_example : PROOF
%|- (then (skeep) (spread (dl-iffR) ((dl-assert) (dl-assert))))
%|- QED dl_iff_example

%%--------------------------------------------
%% dl-inst - Instantiates
%%--------------------------------------------

 dl_inst_example: LEMMA
  DLEXISTS(LAMBDA(r:real): val(x)=cnst(r)
    IMPLIES
      ALLRUNS(TEST(val(x)>=0),val(x)=cnst(-5)))

%|- dl_inst_example : PROOF
%|- (then (skeep) (dl-inst "-1") (dl-flatten) (dl-assert))
%|- QED dl_inst_example

%%--------------------------------------------
%% dl-impliesL - implies rule
%%--------------------------------------------

dl_impliesL_example: LEMMA
  ((null |- cons(val(x)>cnst(5),(: val(x)<cnst(0) :))) AND (cons(val(y)<cnst(-7),null) |- (: val(x)<cnst(0) :)))
  IMPLIES
    (cons(val(x)>cnst(5) IMPLIES val(y)<cnst(-7),null) |-(: val(x)<cnst(0) :))

%|- dl_impliesL_example : PROOF
%|- (then (skeep) (dl-impliesL))
%|- QED dl_impliesL_example

%%--------------------------------------------
%% dl-impliesR - implies rule
%%--------------------------------------------

dl_impliesR_example: LEMMA
    (cons(val(x)>cnst(5),(: val(z)=cnst(0) :)) |- cons(val(y)<cnst(-7), (: val(x)<cnst(0) :))) 
    IMPLIES
    ((: val(z)=cnst(0) :) |- (cons((val(x)>cnst(5) IMPLIES val(y)<cnst(-7)), (: val(x)<cnst(0) :))))

%|- dl_impliesR_example : PROOF
%|- (then (skeep) (dl-impliesR))
%|- QED dl_impliesR_example

%%--------------------------------------------
%% dl-iterated - reduces star? HP
%%--------------------------------------------

 dl_iterated_example: LEMMA
  val(x) >=cnst(5) IMPLIES
  SOMERUNS(STAR(ASSIGN(((: x << val(x)-1 :)))),val(x)>=5) 

%|- dl_iterated_example : PROOF
%|- (then (skeep) (dl-flatten) (dl-iterated) (dl-assert))
%|- QED dl_iterated_example

%%--------------------------------------------
%% dl-K - weakens HP
%%--------------------------------------------

 dl_K_example: LEMMA
  pairwise_distinct_vars?((:x,y:))
  IMPLIES DLIMPLIES(ALLRUNS(ASSIGN((: x << val(x)+2, y << val(x)+1 :)),val(x)>=3),
          ALLRUNS(ASSIGN((: x << val(x)+2, y << val(x)+1 :)),val(y)>=2))

%|- dl_K_example : PROOF
%|- (then (skeep) (dl-K) (dl-assert-pairwise_distinct_vars?) (dl-assert))
%|- QED dl_K_example

%%--------------------------------------------
%% dl-loop - discrete loop invariant rule
%%--------------------------------------------

 dl_loop_example: LEMMA
  pairwise_distinct_vars?((:x,y:)) IMPLIES
(val(x) >=cnst(1) AND val(y) >=cnst(2))
IMPLIES ALLRUNS(STAR(ASSIGN((: x << val(x)+2*val(y), y << val(y)+val(x) :))),val(x)+val(y)>=cnst(1))

%|- dl_loop_example : PROOF
%|- (then (skeep) (dl-assert-pairwise_distinct_vars?) (dl-flatten)
%|-  (spread (dl-loop "val(x)>=cnst(1) and val(y) >=cnst(1)")
%|-   ((dl-assert) (dl-assert) (then (dl-assignb) (dl-assert)))))
%|- QED dl_loop_example

%%--------------------------------------------
%% dl-Mb - weakens HP
%%--------------------------------------------

dl_Mb_example: LEMMA
 DLIMPLIES(ALLRUNS(DIFF((: x << val(x)*val(y)*val(z) :)),val(x)/=cnst(2)),
           ALLRUNS(DIFF((: x << val(x)*val(y)*val(z) :)),-val(x)/=cnst(-2)))

%|- dl_Mb_example : PROOF
%|- (then (skeep) (dl-Mb) (dl-assert))
%|- QED dl_Mb_example

%%--------------------------------------------
%% dl-monob - weakens HP
%%--------------------------------------------

 dl_monob_example: LEMMA
  pairwise_distinct_vars?((:x,y:)) IMPLIES
  val(x)=cnst(c) AND val(y) = cnst(0)
  IMPLIES
  ALLRUNS(ASSIGN((: x << val(y), y << val(x) :)),val(x)^2+val(y)^2=cnst(c)^2)

%|- dl_monob_example : PROOF
%|- (then (skeep) (dl-assert-pairwise_distinct_vars?) (dl-flatten)
%|-  (spread (dl-monob "val(x) = cnst(0) AND val(y) = cnst(c)")
%|-   ((dl-assert) (dl-assert))))
%|- QED dl_monob_example

%%--------------------------------------------
%% dl-move - move dl-formula 
%%--------------------------------------------

dl_move_example : LEMMA
  (val(z) = 4 AND val(x) >= cnst(10)) IMPLIES
  (val(z) = 10 OR val(x) >= cnst(5))

%|- dl_move_example : PROOF
%|- (then (skeep) (dl-flatten) (dl-move -2) (dl-move 2) (dl-assert))
%|- QED dl_move_example

%%--------------------------------------------
%% dl-notL - not rule
%%--------------------------------------------

dl_notL_example: LEMMA
  (null |- cons(val(x)>cnst(5),(: val(y)<20 :))) IMPLIES
    (cons(NOT val(x)>cnst(5), null) |- (: val(y)<20 :))

%|- dl_notL_example : PROOF
%|- (then (skeep) (dl-notL))
%|- QED dl_notL_example

%%--------------------------------------------
%% dl-notR - not rule
%%--------------------------------------------

dl_notR_example: LEMMA
   (cons(val(x)>cnst(5),(: val(z)=cnst(0) :)) |- (: val(y)<20 :)) IMPLIES
    ((: val(z)=cnst(0) :) |- cons(NOT val(x)>cnst(5),(: val(y)<20 :)))

%|- dl_notR_example : PROOF
%|- (then (skeep) (dl-notR))
%|- QED dl_notR_example

%%--------------------------------------------
%% dl-orL - or rule
%%--------------------------------------------

dl_orL_example: LEMMA
  (cons(val(y)<=5,null) |- (: val(y)^2+val(x)^2 <= 25 :)) AND 
  (cons(val(x)<=5,null) |- (: val(y)^2+val(x)^2 <= 25 :)) 
  IMPLIES
  (cons(val(y)<=5 OR val(x)<=5,null) |- (: val(y)^2+val(x)^2 <= 25 :))

%|- dl_orL_example : PROOF
%|- (then (skeep) (dl-orL))
%|- QED dl_orL_example

%%--------------------------------------------
%% dl-orR - or rule
%%--------------------------------------------

dl_orR_example: LEMMA
  ((:val(x)<cnst(-10):) |- cons(val(z)=cnst(0),cons(val(y)>cnst(0),(:val(x)>=cnst(10):)))) 
  IMPLIES
      ((:val(x)<cnst(-10):) |- cons(val(z)=cnst(0) OR val(y)>cnst(0),(:val(x)>=cnst(10):)))

%|- dl_orR_example : PROOF
%|- (then (skeep) (dl-orR))
%|- QED dl_orR_example

%%--------------------------------------------
%% dl-pp - Internal strategy, pretty prints
%  dl-sequent
%%--------------------------------------------

dl_pp_example : LEMMA
 cons(val(z) = 4, cons( val(x) >= cnst(10), null))
 |-
 cons(val(z) = 10, cons( val(x) >= cnst(5), null))

%|- dl_pp_example : PROOF
%|- (then (skeep) (dl-pp) (dl-assert))
%|- QED dl_pp_example

%%--------------------------------------------
%% dl-skolem - skolemizes
%%--------------------------------------------

dl_skolem_example: LEMMA
  DLFORALL(LAMBDA(r:real): DLIMPLIES(val(x)>cnst(r),val(x)>cnst(r)))

%|- dl_skolem_example : PROOF
%|- (then (skeep) (dl-skolem) (dl-assert))
%|- QED dl_skolem_example

%%--------------------------------------------
%% dl-solve - solve diff? HP
%%--------------------------------------------

 dl_solve_example1: LEMMA
  pairwise_distinct_vars?((:x,y:)) IMPLIES
  val(x) <= val(y)
  IMPLIES ALLRUNS(DIFF((: x << cnst(2), y << cnst(3) :)),val(x)<=val(y))

%|- dl_solve_example1 : PROOF
%|- (then (skeep) (dl-flatten) (dl-solve) (dl-assert))
%|- QED dl_solve_example1

 dl_solve_example2: LEMMA
  pairwise_distinct_vars?((:x,y,z,q:)) IMPLIES
 ALLRUNS(DIFF((: x << cnst(3),
                 y << val(x),
		 z << val(q) + cnst(5) :), val(z)=val(x)),
         val(z) = val(x))

%|- dl_solve_example2 : PROOF
%|- (then (skeep) (dl-solve) (dl-inst "t") (dl-flatten) (dl-ground)
%|-  (dl-assert))
%|- QED dl_solve_example2

%%--------------------------------------------
%% dl-subs - applies dl substitution rules
%%--------------------------------------------

dl_subs_example : LEMMA
  pairwise_distinct_vars?((:x,y,z,q:)) IMPLIES
 val(y)=cnst(0) IMPLIES
  SUB((: (x,val(y)),(y,cnst(10)):))(val(x)^2+val(y)^2=cnst(100))

%|- dl_subs_example : PROOF
%|- (then (skeep) (dl-assert-pairwise_distinct_vars?) (dl-flatten)
%|-  (dl-subs) (dl-assert))
%|- QED dl_subs_example

%%--------------------------------------------
%% dl-testb - reduces test? HP
%%--------------------------------------------

dl_testb_example: LEMMA
  ALLRUNS(TEST(val(z)=cnst(0)), val(x)^2>cnst(0)) IMPLIES (val(z)=cnst(0) IMPLIES val(x)^2>cnst(0))

%|- dl_testb_example : PROOF
%|- (then (skeep) (dl-flatten) (dl-testb) (dl-assert))
%|- QED dl_testb_example

%%--------------------------------------------
%% dl-testd - reduces test? HP
%%--------------------------------------------

dl_testd_example: LEMMA
  SOMERUNS(TEST(val(z)=cnst(0)),val(x)^2>cnst(0)) 
  IMPLIES
  (val(z)=cnst(0) AND val(x)^2>cnst(0))

%|- dl_testd_example : PROOF
%|- (then (skeep) (dl-flatten) (dl-assert))
%|- QED dl_testd_example

%%--------------------------------------------
%% dl-trueR - discharge sequent with True in consequent
%%--------------------------------------------

dl_trueR_example: LEMMA
  (: val(x) > cnst(0) :) |- cons(DLTRUE, val(y)^2+val(x)^2 <= 25)

%|- dl_trueR_example : PROOF
%|- (then (skeep) (dl-trueR))
%|- QED dl_trueR_example

%%--------------------------------------------
%% dl-Vb - removes all runs
%%--------------------------------------------

 dl_Vb_example: LEMMA
  pairwise_distinct_vars?((:x,y,z:))
  IMPLIES val(x) = cnst(3)
  	  IMPLIES ALLRUNS(DIFF((: y << val(y)*val(z) :)),val(x)^2=cnst(9))

%|- dl_Vb_example : PROOF
%|- (then (skeep) (dl-flatten) (dl-Vb) (dl-assert))
%|- QED dl_Vb_example


%%--------------------------------------------
%% dl-weak - weakens dl-sequent
%%--------------------------------------------

 dl_weak_example: LEMMA
 DLIMPLIES(val(x)+val(y) = cnst(50) AND val(x)=cnst(25),
  3*val(y) - cnst(5) = cnst(70))

%|- dl_weak_example : PROOF
%|- (then (skeep) (dl-flatten)
%|-  (spread (dl-weak "val(y)=cnst(25)") ((dl-assert) (dl-assert))))
%|- QED dl_weak_example

END Glossary_Plaidypvs
