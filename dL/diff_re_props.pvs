diff_re_props  % [ parameters ]
		: THEORY
  BEGIN

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%| Derivative RealExpr properties including sum,     |% 
%| difference, product, division.                    |%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


  IMPORTING chain_rule_re,
            mv_analysis@cauchy_schwarz


  diff_re_cont: LEMMA
  FORALL(P:(ddl_dom?),env:(P),k:nat,re:(diff_re?(k, P))):
  convergence_zero?[k+1](NQ(projv(k, P), env_2_vec(k, env)),LAMBDA(x:VectorN(1+k)):re(vec_2_env(k,env_2_vec(k, env)+x,env)) - re(env),zero_vec(k+1))

  diff_re_divbound: LEMMA
  FORALL(P:(ddl_dom?),env:(P),k:nat,re:(diff_re?(k, P))):
  EXISTS (delta: posreal) : EXISTS (M:posreal) : 
	    FORALL(x: (NQ(projv(k, P), env_2_vec(k, env))) | x /= zero_vec(1+k)): norm_inf(k+1)(x) < delta
	    IMPLIES abs( (re(vec_2_env(k,env_2_vec(k, env)+x,env)) - re(env))/norm_inf(1+k)(x) ) < M

  diff_re_val: LEMMA
  FORALL(k:nat,P:(ddl_dom?),v:dLVar):
  diff_re?(k, P)(val(v))

  diff_re_cnst: LEMMA
  FORALL(k:nat,P:(ddl_dom?),r:real):
  diff_re?(k, P)(cnst(r))

  diff_re_prod: LEMMA
  FORALL(k:nat,P:(ddl_dom?),re1,re2:(diff_re?(k,P))):
  diff_re?(k, P)(re1 * re2)

  diff_re_pow: LEMMA
  FORALL(k:nat,P:(ddl_dom?),re:(diff_re?(k,P)),p:nat):
  diff_re?(k, P)(re ^ p)

  diff_re_sum: LEMMA
  FORALL(k:nat,P:(ddl_dom?),re1,re2:(diff_re?(k,P))):
  diff_re?(k, P)(re1 + re2)

  diff_re_diff: LEMMA
  FORALL(k:nat,P:(ddl_dom?),re1,re2:(diff_re?(k,P))):
  diff_re?(k, P)(re1 - re2)

  diff_re_inv_aux: LEMMA
  FORALL(k:nat,P:(ddl_dom?),re:(diff_re?(k,P))):
  (FORALL(env:Environment): re(env) /= 0) IMPLIES
  diff_re?(k, P)(real_fun_ops./(1,re))

  diff_re_inv: LEMMA
  FORALL(k:nat,P:(ddl_dom?),re:(diff_re?(k,P))):
  (FORALL(env:Environment): re(env) /= 0) IMPLIES
  diff_re?(k, P)(cnst(1) / re)

  diff_re_div: LEMMA
  FORALL(k:nat,P:(ddl_dom?),re1,re2:(diff_re?(k,P))):
  (FORALL(env:Environment): re2(env) /= 0) IMPLIES
  diff_re?(k, P)(re1 / re2)

END diff_re_props
