(|trace_semantics|
 (|wf_trace?_TCC1| 0
  (|wf_trace?_TCC1-1| |nil| 3888662962 ("" (ASSERT) NIL NIL) NIL NIL
   (|wf_trace?| SUBTYPE "trace_semantics.i"
    "below[length[TraceState](trace)]")))
 (|finite_trace?_TCC1| 0
  (|finite_trace?_TCC1-1| |nil| 3791212029
   ("" (SKEEP)
    (("" (TYPEPRED "trace")
      (("" (EXPAND "wf_trace?") (("" (FLATTEN) (("" (ASSERT) NIL NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|Trace| TYPE-EQ-DECL NIL |trace_semantics| NIL)
    (|wf_trace?| CONST-DECL "bool" |trace_semantics| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|TraceState| TYPE-DECL NIL |TraceState_adt| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|finite_trace?| SUBTYPE "trace_semantics.trace"
    "{l: list_adt[TraceState_adt.TraceState].list | (booleans.NOT)(list_adt[TraceState_adt.TraceState].null?(l))}")))
 (|wf_append| 0
  (|wf_append-1| |nil| 3889824595
   ("" (SKEEP)
    (("" (TYPEPRED "trace1")
      (("" (TYPEPRED "trace2")
        (("" (EXPAND "wf_trace?")
          (("" (FLATTEN)
            (("" (CASE "cdr(trace2) = null")
              (("1" (REPLACE -1)
                (("1" (REWRITE "append_null_right")
                  (("1" (ASSERT)
                    (("1" (SKEEP)
                      (("1" (INST -5 "i")
                        (("1" (ASSERT) NIL NIL)
                         ("2" (TYPEPRED "i")
                          (("2" (REPLACE -2)
                            (("2" (REWRITE "append_null_right") NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (SPLIT)
                (("1" (GRIND) NIL NIL)
                 ("2" (USE "car_append[TraceState]")
                  (("2" (REPLACE -1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)
                 ("3" (SKEEP)
                  (("3" (LEMMA "nth_append[TraceState]")
                    (("3" (INST -1 "trace1" "cdr(trace2)" "i")
                      (("3" (SPLIT)
                        (("1" (ASSERT)
                          (("1" (REPLACE -1 :HIDE? T)
                            (("1" (LIFT-IF)
                              (("1" (INST -4 "i")
                                (("1" (SPLIT)
                                  (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)
                                   ("2" (SPLIT)
                                    (("1" (FLATTEN) NIL NIL)
                                     ("2" (FLATTEN)
                                      (("2" (ASSERT)
                                        (("2" (INST -2 "i - length(trace1)+1")
                                          (("1" (HIDE-ALL-BUT (2 4 -2 5 -3 -1))
                                            (("1" (EXPAND "nth" -)
                                              (("1" (PROPAX) NIL NIL)) NIL))
                                            NIL)
                                           ("2" (TYPEPRED "i")
                                            (("2"
                                              (USE "length_append[TraceState]")
                                              (("2" (REPLACE -1 :HIDE? T)
                                                (("2" (EXPAND "length" -1 2)
                                                  (("2" (HIDE-ALL-BUT (1 -1))
                                                    (("2" (GRIND) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (ASSERT)
                                  (("2"
                                    (CASE "i = length[TraceState](trace1) - 1")
                                    (("1" (REPLACE -1)
                                      (("1" (ASSERT)
                                        (("1" (INST -3 "0")
                                          (("1" (EXPAND "nth" -3)
                                            (("1" (GRIND) NIL NIL)) NIL)
                                           ("2" (GRIND) NIL NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (ASSERT)
                                      (("2" (INST -2 "i - length(trace1) + 1")
                                        (("1" (EXPAND "nth" -2)
                                          (("1" (PROPAX) NIL NIL)) NIL)
                                         ("2" (TYPEPRED "i")
                                          (("2"
                                            (USE "length_append[TraceState]")
                                            (("2" (REPLACE -1 :HIDE? T)
                                              (("2" (GRIND) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (TYPEPRED "i")
                          (("2" (USE "length_append[TraceState]")
                            (("2" (REPLACE -1 :HIDE? T)
                              (("2" (ASSERT) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|Trace| TYPE-EQ-DECL NIL |trace_semantics| NIL)
    (|wf_trace?| CONST-DECL "bool" |trace_semantics| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|TraceState| TYPE-DECL NIL |TraceState_adt| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|append_null_right| FORMULA-DECL NIL |more_list_props| |structures|)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|append| DEF-DECL "list[T]" |list_props| NIL)
    (|trace1| SKOLEM-CONST-DECL "Trace" |trace_semantics| NIL)
    (|trace2| SKOLEM-CONST-DECL "Trace" |trace_semantics| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|i| SKOLEM-CONST-DECL "below(length(append(trace1, cdr(trace2))) - 1)"
     |trace_semantics| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|length_append| FORMULA-DECL NIL |list_props| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|i| SKOLEM-CONST-DECL "below(length(append(trace1, cdr(trace2))) - 1)"
     |trace_semantics| NIL)
    (|nth_append| FORMULA-DECL NIL |more_list_props| |structures|)
    (|car_append| FORMULA-DECL NIL |more_list_props| |structures|)
    (|last| CONST-DECL "T" |more_list_props| |structures|)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL))
   SHOSTAK))
 (|wf_append_finite| 0
  (|wf_append_finite-1| |nil| 3896947009
   ("" (SKEEP)
    (("" (TYPEPRED "trace1")
      (("" (TYPEPRED "trace2")
        (("" (EXPAND "wf_trace?")
          (("" (EXPAND "finite_trace?")
            (("" (EXPAND "last")
              (("" (FLATTEN)
                (("" (SPLIT 3)
                  (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)
                   ("3" (SKEEP)
                    (("3" (LEMMA "nth_append[TraceState]")
                      (("3" (INST?)
                        (("3" (ASSERT)
                          (("3" (LEMMA "length_append[TraceState]")
                            (("3" (INST?)
                              (("3" (ASSERT)
                                (("3" (LIFT-IF)
                                  (("3" (SPLIT)
                                    (("1" (FLATTEN)
                                      (("1" (REPLACE -2)
                                        (("1" (CASE "i = length(trace1)-1")
                                          (("1" (ASSERT) NIL NIL)
                                           ("2" (INST -7 "i")
                                            (("1" (ASSERT) NIL NIL)
                                             ("2" (ASSERT) NIL NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (FLATTEN)
                                      (("2" (REPLACE -1)
                                        (("2" (TYPEPRED "i")
                                          (("2" (REPLACE -3)
                                            (("2"
                                              (INST -5 "i - length(trace1)")
                                              (("1" (ASSERT) NIL NIL)
                                               ("2" (ASSERT) NIL NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|finite_trace?| CONST-DECL "bool" |trace_semantics| NIL)
    (|Trace| TYPE-EQ-DECL NIL |trace_semantics| NIL)
    (|wf_trace?| CONST-DECL "bool" |trace_semantics| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|TraceState| TYPE-DECL NIL |TraceState_adt| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|last| CONST-DECL "T" |more_list_props| |structures|)
    (|append| DEF-DECL "list[T]" |list_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nth_append| FORMULA-DECL NIL |more_list_props| |structures|)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|trace1| SKOLEM-CONST-DECL "(finite_trace?)" |trace_semantics| NIL)
    (|trace2| SKOLEM-CONST-DECL "Trace" |trace_semantics| NIL)
    (|i| SKOLEM-CONST-DECL "below(length(append(trace1, trace2)) - 1)"
     |trace_semantics| NIL)
    (|length_append| FORMULA-DECL NIL |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   SHOSTAK))
 (|init_env_TCC1| 0
  (|init_env_TCC1-1| |nil| 3896265592 ("" (SUBTYPE-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|TraceState| TYPE-DECL NIL |TraceState_adt| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|wf_trace?| CONST-DECL "bool" |trace_semantics| NIL)
    (|Trace| TYPE-EQ-DECL NIL |trace_semantics| NIL))
   NIL
   (|init_env| SUBTYPE
    "list_adt[TraceState_adt.TraceState].car(trace_semantics.trace)"
    "{x: TraceState_adt.TraceState | booleans.OR(TraceState_adt.inf_diff?(x), TraceState_adt.state_diff?(x))}")))
 (|final_env_TCC1| 0
  (|final_env_TCC1-1| |nil| 3892812644 ("" (SUBTYPE-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|TraceState| TYPE-DECL NIL |TraceState_adt| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|wf_trace?| CONST-DECL "bool" |trace_semantics| NIL)
    (|Trace| TYPE-EQ-DECL NIL |trace_semantics| NIL)
    (|finite_trace?| CONST-DECL "bool" |trace_semantics| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|last| CONST-DECL "T" |more_list_props| |structures|))
   NIL
   (|final_env| SUBTYPE
    "more_list_props[TraceState_adt.TraceState].last(trace_semantics.trace)"
    "(TraceState_adt.state_diff?)")))
 (|final_env_TCC2| 0
  (|final_env_TCC2-1| |nil| 3892812644
   ("" (SKEEP)
    (("" (TYPEPRED "D(last[TraceState](trace))")
      (("" (SKEEP)
        (("" (REPLACE -2)
          (("" (EXPAND "closed_interval?")
            (("" (INST 2 "0" "b") (("" (ASSERT) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|finite_trace?| CONST-DECL "bool" |trace_semantics| NIL)
    (|Trace| TYPE-EQ-DECL NIL |trace_semantics| NIL)
    (|wf_trace?| CONST-DECL "bool" |trace_semantics| NIL)
    (|last| CONST-DECL "T" |more_list_props| |structures|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (D ADT-ACCESSOR-DECL "[(state_diff?) ->
   {D: (dd?) | EXISTS (b: posreal): D = closed_interval(0, b)}]"
       |TraceState_adt| NIL)
    (|closed_interval| CONST-DECL "(closed_interval?(a, b))" |interval_def|
     |ODEs|)
    (|closed_interval?| CONST-DECL "bool" |interval_def| |ODEs|)
    (< CONST-DECL "bool" |reals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|state_diff?| ADT-RECOGNIZER-DECL "[TraceState -> boolean]"
     |TraceState_adt| NIL)
    (|TraceState| TYPE-DECL NIL |TraceState_adt| NIL)
    (|dd?| CONST-DECL "bool" |hp_expr| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|closed_interval?| CONST-DECL "bool" |interval_def| |ODEs|))
   NIL
   (|final_env| SUBTYPE
    "TraceState_adt.D(more_list_props[TraceState_adt.TraceState].last(trace_semantics.trace))"
    "(interval_def.closed_interval?)")))
 (|trace_semantic_rel_TCC1| 0
  (|trace_semantic_rel_TCC2-1| |nil| 3790681048 ("" (GRIND) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|TraceState| TYPE-DECL NIL |TraceState_adt| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|wf_trace?| CONST-DECL "bool" |trace_semantics| NIL)
    (|Trace| TYPE-EQ-DECL NIL |trace_semantics| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL))
   NIL (|trace_semantic_rel| SUBTYPE "1" "below[length[TraceState](trace)]")))
 (|trace_semantic_rel_TCC2| 0
  (|trace_semantic_rel_TCC5-1| |nil| 3790681048 ("" (SUBTYPE-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|TraceState| TYPE-DECL NIL |TraceState_adt| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|wf_trace?| CONST-DECL "bool" |trace_semantics| NIL)
    (|Trace| TYPE-EQ-DECL NIL |trace_semantics| NIL))
   NIL
   (|trace_semantic_rel| SUBTYPE "trace_semantics.hp"
    "{x: HP_adt.HP | booleans.OR(HP_adt.diff?(x), HP_adt.test?(x))}")))
 (|trace_semantic_rel_TCC3| 0
  (|trace_semantic_rel_TCC5-1| |nil| 3896265592 ("" (SUBTYPE-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|TraceState| TYPE-DECL NIL |TraceState_adt| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|wf_trace?| CONST-DECL "bool" |trace_semantics| NIL)
    (|Trace| TYPE-EQ-DECL NIL |trace_semantics| NIL))
   NIL
   (|trace_semantic_rel| SUBTYPE "trace_semantics.env"
    "{x: TraceState_adt.TraceState | booleans.OR(TraceState_adt.inf_diff?(x), TraceState_adt.state_diff?(x))}")))
 (|trace_semantic_rel_TCC4| 0
  (|trace_semantic_rel_TCC8-1| |nil| 3790681048 ("" (GRIND) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|TraceState| TYPE-DECL NIL |TraceState_adt| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|wf_trace?| CONST-DECL "bool" |trace_semantics| NIL)
    (|Trace| TYPE-EQ-DECL NIL |trace_semantics| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|dd?| CONST-DECL "bool" |hp_expr| NIL)
    (|dLVar| TYPE-DECL NIL |hp_def| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|MapExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|mapexpr_inj| CONST-DECL "bool" |hp_def| NIL)
    (|ODEs| TYPE-EQ-DECL NIL |hp_def| NIL) (< CONST-DECL "bool" |reals| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|solution_odes_u?| CONST-DECL "bool" |hp_expr| NIL)
    (|state_diff?| ADT-RECOGNIZER-DECL "[TraceState -> boolean]"
     |TraceState_adt| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|closed_interval?| CONST-DECL "bool" |interval_def| |ODEs|)
    (|closed_interval| CONST-DECL "(closed_interval?(a, b))" |interval_def|
     |ODEs|)
    (D ADT-ACCESSOR-DECL "[(state_diff?) ->
   {D: (dd?) | EXISTS (b: posreal): D = closed_interval(0, b)}]"
       |TraceState_adt| NIL)
    (HP TYPE-DECL NIL |HP_adt| NIL)
    (|diff?| ADT-RECOGNIZER-DECL "[HP -> boolean]" |HP_adt| NIL)
    (|odes| ADT-ACCESSOR-DECL "[(diff?) -> ODEs]" |HP_adt| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|inf_diff?| ADT-RECOGNIZER-DECL "[TraceState -> boolean]" |TraceState_adt|
     NIL)
    (|s0| SHARED-ADT-ACCESSOR-DECL
     "[{x: TraceState | inf_diff?(x) OR state_diff?(x)} -> Environment]"
     |TraceState_adt| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL))
   NIL
   (|trace_semantic_rel| SUBTYPE "trace_semantics.hp"
    "{x: HP_adt.HP | booleans.OR(HP_adt.diff?(x), HP_adt.test?(x))}")))
 (|trace_semantic_rel_TCC5| 0
  (|trace_semantic_rel_TCC7-1| |nil| 3888662962 ("" (SUBTYPE-TCC) NIL NIL)
   ((|dd?| CONST-DECL "bool" |hp_expr| NIL)) NIL
   (|trace_semantic_rel| SUBTYPE "interval_def.hp(0)" "(hp_expr.dd?)")))
 (|trace_semantic_rel_TCC6| 0
  (|trace_semantic_rel_TCC8-1| |nil| 3896265592 ("" (SUBTYPE-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|TraceState| TYPE-DECL NIL |TraceState_adt| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|wf_trace?| CONST-DECL "bool" |trace_semantics| NIL)
    (|Trace| TYPE-EQ-DECL NIL |trace_semantics| NIL))
   NIL
   (|trace_semantic_rel| SUBTYPE "trace_semantics.env"
    "{x: TraceState_adt.TraceState | booleans.OR(TraceState_adt.inf_diff?(x), TraceState_adt.state_diff?(x))}")))
 (|trace_semantic_rel_TCC7| 0
  (|trace_semantic_rel_TCC12-1| |nil| 3790681048 ("" (SUBTYPE-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|TraceState| TYPE-DECL NIL |TraceState_adt| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|wf_trace?| CONST-DECL "bool" |trace_semantics| NIL)
    (|Trace| TYPE-EQ-DECL NIL |trace_semantics| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|dd?| CONST-DECL "bool" |hp_expr| NIL)
    (|dLVar| TYPE-DECL NIL |hp_def| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|MapExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|mapexpr_inj| CONST-DECL "bool" |hp_def| NIL)
    (|ODEs| TYPE-EQ-DECL NIL |hp_def| NIL) (< CONST-DECL "bool" |reals| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|solution_odes_u?| CONST-DECL "bool" |hp_expr| NIL)
    (|hp| CONST-DECL "bool" |interval_def| |ODEs|)
    (HP TYPE-DECL NIL |HP_adt| NIL)
    (|diff?| ADT-RECOGNIZER-DECL "[HP -> boolean]" |HP_adt| NIL)
    (|odes| ADT-ACCESSOR-DECL "[(diff?) -> ODEs]" |HP_adt| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|inf_diff?| ADT-RECOGNIZER-DECL "[TraceState -> boolean]" |TraceState_adt|
     NIL)
    (|state_diff?| ADT-RECOGNIZER-DECL "[TraceState -> boolean]"
     |TraceState_adt| NIL)
    (|s0| SHARED-ADT-ACCESSOR-DECL
     "[{x: TraceState | inf_diff?(x) OR state_diff?(x)} -> Environment]"
     |TraceState_adt| NIL))
   NIL
   (|trace_semantic_rel| SUBTYPE "trace_semantics.hp"
    "{x: HP_adt.HP | booleans.OR(HP_adt.diff?(x), HP_adt.test?(x))}")))
 (|trace_semantic_rel_TCC8| 0
  (|trace_semantic_rel_TCC4-1| |nil| 3790681048 ("" (SUBTYPE-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|TraceState| TYPE-DECL NIL |TraceState_adt| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|wf_trace?| CONST-DECL "bool" |trace_semantics| NIL)
    (|Trace| TYPE-EQ-DECL NIL |trace_semantics| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL))
   NIL (|trace_semantic_rel| SUBTYPE "1" "below[length[TraceState](trace)]")))
 (|trace_semantic_rel_TCC9| 0
  (|trace_semantic_rel_TCC13-1| |nil| 3790681048 ("" (SUBTYPE-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|TraceState| TYPE-DECL NIL |TraceState_adt| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|wf_trace?| CONST-DECL "bool" |trace_semantics| NIL)
    (|Trace| TYPE-EQ-DECL NIL |trace_semantics| NIL))
   NIL
   (|trace_semantic_rel| SUBTYPE "trace_semantics.hp"
    "{x: HP_adt.HP | booleans.OR(HP_adt.diff?(x), HP_adt.test?(x))}")))
 (|trace_semantic_rel_TCC10| 0
  (|trace_semantic_rel_TCC10-1| |nil| 3790681048 ("" (SUBTYPE-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|TraceState| TYPE-DECL NIL |TraceState_adt| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|wf_trace?| CONST-DECL "bool" |trace_semantics| NIL)
    (|Trace| TYPE-EQ-DECL NIL |trace_semantics| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL))
   NIL (|trace_semantic_rel| SUBTYPE "1" "below[length[TraceState](trace)]")))
 (|trace_semantic_rel_TCC11| 0
  (|trace_semantic_rel_TCC16-1| |nil| 3790681048 ("" (SUBTYPE-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|TraceState| TYPE-DECL NIL |TraceState_adt| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|wf_trace?| CONST-DECL "bool" |trace_semantics| NIL)
    (|Trace| TYPE-EQ-DECL NIL |trace_semantics| NIL))
   NIL
   (|trace_semantic_rel| SUBTYPE "trace_semantics.hp"
    "{x: HP_adt.HP | booleans.OR(HP_adt.diff?(x), HP_adt.test?(x))}")))
 (|trace_semantic_rel_TCC12| 0
  (|trace_semantic_rel_TCC21-1| |nil| 3790681048 ("" (SUBTYPE-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|TraceState| TYPE-DECL NIL |TraceState_adt| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|wf_trace?| CONST-DECL "bool" |trace_semantics| NIL)
    (|Trace| TYPE-EQ-DECL NIL |trace_semantics| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL))
   NIL (|trace_semantic_rel| SUBTYPE "1" "below[length[TraceState](trace)]")))
 (|trace_semantic_rel_TCC13| 0
  (|trace_semantic_rel_TCC17-1| |nil| 3790681048 ("" (SUBTYPE-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|TraceState| TYPE-DECL NIL |TraceState_adt| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|wf_trace?| CONST-DECL "bool" |trace_semantics| NIL)
    (|Trace| TYPE-EQ-DECL NIL |trace_semantics| NIL))
   NIL
   (|trace_semantic_rel| SUBTYPE "trace_semantics.hp"
    "{x: HP_adt.HP | booleans.OR(HP_adt.diff?(x), HP_adt.test?(x))}")))
 (|trace_semantic_rel_TCC14| 0
  (|trace_semantic_rel_TCC18-1| |nil| 3888662962 ("" (SUBTYPE-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|TraceState| TYPE-DECL NIL |TraceState_adt| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|wf_trace?| CONST-DECL "bool" |trace_semantics| NIL)
    (|Trace| TYPE-EQ-DECL NIL |trace_semantics| NIL))
   NIL
   (|trace_semantic_rel| SUBTYPE "trace_semantics.hp"
    "{x: HP_adt.HP | booleans.OR(HP_adt.seq?(x), HP_adt.union?(x))}")))
 (|trace_semantic_rel_TCC15| 0
  (|trace_semantic_rel_TCC23-1| |nil| 3892812644 ("" (SUBTYPE-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|TraceState| TYPE-DECL NIL |TraceState_adt| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|wf_trace?| CONST-DECL "bool" |trace_semantics| NIL)
    (|Trace| TYPE-EQ-DECL NIL |trace_semantics| NIL)
    (|last| CONST-DECL "T" |more_list_props| |structures|)
    (|finite_trace?| CONST-DECL "bool" |trace_semantics| NIL))
   NIL
   (|trace_semantic_rel| SUBTYPE "trace_semantics.hp"
    "{x: HP_adt.HP | booleans.OR(HP_adt.seq?(x), HP_adt.union?(x))}")))
 (|trace_semantic_rel_TCC16| 0
  (|trace_semantic_rel_TCC24-1| |nil| 3892812644 ("" (SUBTYPE-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|TraceState| TYPE-DECL NIL |TraceState_adt| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|wf_trace?| CONST-DECL "bool" |trace_semantics| NIL)
    (|Trace| TYPE-EQ-DECL NIL |trace_semantics| NIL)
    (|last| CONST-DECL "T" |more_list_props| |structures|)
    (|finite_trace?| CONST-DECL "bool" |trace_semantics| NIL))
   NIL
   (|trace_semantic_rel| SUBTYPE "trace_semantics.hp"
    "{x: HP_adt.HP | booleans.OR(HP_adt.seq?(x), HP_adt.union?(x))}")))
 (|trace_semantics_correct_assign| 0
  (|trace_semantics_correct_assign-1| |nil| 3899811609
   ("" (SKEEP)
    (("" (SKOLETIN)
      (("" (SKOLETIN)
        (("" (REPLACE -2 :HIDE? TRUE)
          (("" (REPLACE -1 :HIDE? TRUE)
            (("" (FLATTEN)
              (("" (EXPAND "semantic_rel")
                (("" (EXPAND "trace_semantic_rel")
                  (("" (FLATTEN)
                    (("" (SPLIT)
                      (("1" (SKEEP)
                        (("1" (INST -4 "i")
                          (("1" (ASSERT)
                            (("1" (EXPAND "init_env")
                              (("1" (EXPAND "final_env")
                                (("1" (EXPAND "last")
                                  (("1" (REPLACE -1) (("1" (ASSERT) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (SKEEP)
                        (("2" (INST -5 "i")
                          (("2" (EXPAND "final_env")
                            (("2" (EXPAND "init_env")
                              (("2" (EXPAND "last")
                                (("2" (REPLACE -1) (("2" (ASSERT) NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (HP TYPE-DECL NIL |HP_adt| NIL)
    (|trace_semantic_rel| INDUCTIVE-DECL "bool" |trace_semantics| NIL)
    (|dLVar| TYPE-DECL NIL |hp_def| NIL)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|MapExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|mapexpr_inj| CONST-DECL "bool" |hp_def| NIL)
    (|Assigns| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|assign?| ADT-RECOGNIZER-DECL "[HP -> boolean]" |HP_adt| NIL)
    (ASSIGN ADT-CONSTRUCTOR-DECL "[Assigns -> (assign?)]" |HP_adt| NIL)
    (|semantic_rel| INDUCTIVE-DECL "bool" |hp_expr| NIL)
    (|final_env| CONST-DECL "Environment" |trace_semantics| NIL)
    (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|TraceState| TYPE-DECL NIL |TraceState_adt| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|wf_trace?| CONST-DECL "bool" |trace_semantics| NIL)
    (|Trace| TYPE-EQ-DECL NIL |trace_semantics| NIL)
    (|init_env| CONST-DECL "Environment" |trace_semantics| NIL)
    (|finite_trace?| CONST-DECL "bool" |trace_semantics| NIL)
    (|FiniteTrace| TYPE-EQ-DECL NIL |trace_semantics| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL) (< CONST-DECL "bool" |reals| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|last| CONST-DECL "T" |more_list_props| |structures|)
    (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|minus_i16_u16| APPLICATION-JUDGEMENT "int32" |integertypes| NIL)
    (|minus_i32_u32| APPLICATION-JUDGEMENT "int64" |integertypes| NIL)
    (|minus_u8_u8| APPLICATION-JUDGEMENT "int16" |integertypes| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|MapExprInj| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|not_in_map| CONST-DECL "bool" |hp_def| NIL)
    (|null_MapExprInj| NAME-JUDGEMENT "MapExprInj" |hp_def| NIL))
   SHOSTAK))
 (|trace_semantics_correct_diff| 0
  (|trace_semantics_correct_diff-1| |nil| 3899811930
   ("" (SKEEP*)
    (("" (SKOLETIN)
      (("" (SKOLETIN)
        (("" (REPLACE -1 :HIDE? T)
          (("" (REPLACE -1 :HIDE? T)
            (("" (FLATTEN)
              (("" (EXPAND "semantic_rel")
                (("" (EXPAND "trace_semantic_rel")
                  (("" (FLATTEN)
                    (("" (SPLIT)
                      (("1" (FLATTEN)
                        (("1" (SPLIT)
                          (("1" (FLATTEN)
                            (("1" (EXPAND "init_env")
                              (("1" (ASSERT)
                                (("1" (EXPAND "final_env")
                                  (("1" (EXPAND "last")
                                    (("1" (REPLACE -3)
                                      (("1" (EXPAND "nth")
                                        (("1" (PROPAX) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (FLATTEN)
                            (("2" (CASE "car(trace) = last(trace)")
                              (("1" (EXPAND "init_env")
                                (("1" (ASSERT)
                                  (("1" (EXPAND "final_env")
                                    (("1" (REPLACE -1)
                                      (("1" (SKEEP)
                                        (("1" (INST 2 "D(car(trace))")
                                          (("1" (EXPAND "semantic_rel_diff")
                                            (("1"
                                              (INST 2 "max_ci(D(last(trace)))")
                                              (("1" (INST 2 "fs")
                                                (("1" (REPLACE -3)
                                                  (("1" (ASSERT)
                                                    (("1" (SKEEP)
                                                      (("1" (INST -4 "t")
                                                        (("1" (TYPEPRED "env")
                                                          (("1" (ASSERT)
                                                            (("1"
                                                              (TYPEPRED
                                                               "env_at_t(odes, fs, s0(last(trace)))(t)")
                                                              (("1"
                                                                (INST -2 "env")
                                                                (("1"
                                                                  (REPLACE -2)
                                                                  (("1"
                                                                    (PROPAX)
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("2"
                                                (TYPEPRED
                                                 "D(last[TraceState](trace))")
                                                (("2" (SKEEP)
                                                  (("2" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL)
                                               ("3" (EXPAND "closed_interval?")
                                                (("3"
                                                  (TYPEPRED
                                                   "D(last[TraceState](trace))")
                                                  (("3" (SKEEP)
                                                    (("3" (INST 1 "0" "b")
                                                      (("3" (ASSERT) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (HIDE-ALL-BUT (1 -3))
                                (("2" (GRIND) NIL NIL)) NIL)
                               ("3" (HIDE-ALL-BUT (-1 -4))
                                (("3" (GRIND) NIL NIL)) NIL))
                              NIL))
                            NIL)
                           ("3" (FLATTEN)
                            (("3" (TYPEPRED "trace")
                              (("3" (EXPAND "finite_trace?")
                                (("3" (CASE "car(trace) = last(trace)")
                                  (("1" (REPLACE -1) (("1" (GRIND) NIL NIL))
                                    NIL)
                                   ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (TYPEPRED "trace")
                        (("2" (FLATTEN)
                          (("2" (EXPAND "finite_trace?")
                            (("2" (HIDE-ALL-BUT (-5 -3 -2))
                              (("2" (GRIND) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (HP TYPE-DECL NIL |HP_adt| NIL)
    (|trace_semantic_rel| INDUCTIVE-DECL "bool" |trace_semantics| NIL)
    (|dLVar| TYPE-DECL NIL |hp_def| NIL)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|MapExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|mapexpr_inj| CONST-DECL "bool" |hp_def| NIL)
    (|ODEs| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|diff?| ADT-RECOGNIZER-DECL "[HP -> boolean]" |HP_adt| NIL)
    (DIFF ADT-CONSTRUCTOR-DECL "[[ODEs, BoolExpr] -> (diff?)]" |HP_adt| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|semantic_rel| INDUCTIVE-DECL "bool" |hp_expr| NIL)
    (|final_env| CONST-DECL "Environment" |trace_semantics| NIL)
    (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|TraceState| TYPE-DECL NIL |TraceState_adt| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|wf_trace?| CONST-DECL "bool" |trace_semantics| NIL)
    (|Trace| TYPE-EQ-DECL NIL |trace_semantics| NIL)
    (|init_env| CONST-DECL "Environment" |trace_semantics| NIL)
    (|finite_trace?| CONST-DECL "bool" |trace_semantics| NIL)
    (|FiniteTrace| TYPE-EQ-DECL NIL |trace_semantics| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|last| CONST-DECL "T" |more_list_props| |structures|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|dd?| CONST-DECL "bool" |hp_expr| NIL)
    (|state_diff?| ADT-RECOGNIZER-DECL "[TraceState -> boolean]"
     |TraceState_adt| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|closed_interval?| CONST-DECL "bool" |interval_def| |ODEs|)
    (|closed_interval| CONST-DECL "(closed_interval?(a, b))" |interval_def|
     |ODEs|)
    (D ADT-ACCESSOR-DECL "[(state_diff?) ->
   {D: (dd?) | EXISTS (b: posreal): D = closed_interval(0, b)}]"
       |TraceState_adt| NIL)
    (|trace| SKOLEM-CONST-DECL "FiniteTrace" |trace_semantics| NIL)
    (|closed_interval?| CONST-DECL "bool" |interval_def| |ODEs|)
    (|max_ci| CONST-DECL "{rr: (d) | FORALL (x: (d)): x <= rr}" |more_ci_props|
     |ODEs|)
    (<= CONST-DECL "bool" |reals| NIL)
    (|env_at_t?| CONST-DECL "bool" |hp_expr| NIL)
    (|env_at_t| CONST-DECL "{env: (env_at_t?(odes, fs, envi, t)) |
   FORALL (env2: (env_at_t?(odes, fs, envi, t))): env = env2}"
     |hp_expr| NIL)
    (|s0| SHARED-ADT-ACCESSOR-DECL
     "[{x: TraceState | inf_diff?(x) OR state_diff?(x)} -> Environment]"
     |TraceState_adt| NIL)
    (|inf_diff?| ADT-RECOGNIZER-DECL "[TraceState -> boolean]" |TraceState_adt|
     NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|solution_odes_u?| CONST-DECL "bool" |hp_expr| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|semantic_rel_diff| CONST-DECL "bool" |hp_expr| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|minus_u8_u8| APPLICATION-JUDGEMENT "int16" |integertypes| NIL)
    (|minus_i32_u32| APPLICATION-JUDGEMENT "int64" |integertypes| NIL)
    (|minus_i16_u16| APPLICATION-JUDGEMENT "int32" |integertypes| NIL)
    (|odd_minus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic|
     |mv_analysis|)
    (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|null_MapExprInj| NAME-JUDGEMENT "MapExprInj" |hp_def| NIL))
   SHOSTAK))
 (|trace_semantics_correct_any| 0
  (|trace_semantics_correct_any-1| |nil| 3900062811
   ("" (SKEEP*)
    (("" (SKOLETIN)
      (("" (SKOLETIN)
        (("" (REPLACE -1 :HIDE? T)
          (("" (REPLACE -1 :HIDE? T)
            (("" (FLATTEN)
              (("" (EXPAND "semantic_rel")
                (("" (EXPAND "trace_semantic_rel")
                  (("" (FLATTEN) (("" (SKEEP) (("" (GRIND) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (HP TYPE-DECL NIL |HP_adt| NIL)
    (|trace_semantic_rel| INDUCTIVE-DECL "bool" |trace_semantics| NIL)
    (|dLVar| TYPE-DECL NIL |hp_def| NIL)
    (|any?| ADT-RECOGNIZER-DECL "[HP -> boolean]" |HP_adt| NIL)
    (ANY ADT-CONSTRUCTOR-DECL "[dLVar -> (any?)]" |HP_adt| NIL)
    (|semantic_rel| INDUCTIVE-DECL "bool" |hp_expr| NIL)
    (|final_env| CONST-DECL "Environment" |trace_semantics| NIL)
    (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|TraceState| TYPE-DECL NIL |TraceState_adt| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|wf_trace?| CONST-DECL "bool" |trace_semantics| NIL)
    (|Trace| TYPE-EQ-DECL NIL |trace_semantics| NIL)
    (|init_env| CONST-DECL "Environment" |trace_semantics| NIL)
    (|finite_trace?| CONST-DECL "bool" |trace_semantics| NIL)
    (|FiniteTrace| TYPE-EQ-DECL NIL |trace_semantics| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (|dlvar_index| ADT-ACCESSOR-DECL "[dLVar -> nat]" |hp_def| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|last| CONST-DECL "T" |more_list_props| |structures|)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL))
   SHOSTAK))
 (|trace_semantics_correct_test| 0
  (|trace_semantics_correct_test-1| |nil| 3900071207
   ("" (SKEEP*)
    (("" (SKOLETIN)
      (("" (SKOLETIN)
        (("" (REPLACE -1 :HIDE? T)
          (("" (REPLACE -1 :HIDE? T)
            (("" (FLATTEN)
              (("" (EXPAND "trace_semantic_rel")
                (("" (EXPAND "semantic_rel")
                  (("" (ASSERT)
                    (("" (SPLIT)
                      (("1" (FLATTEN)
                        (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL)
                       ("2" (FLATTEN)
                        (("2" (TYPEPRED "trace")
                          (("2" (EXPAND "finite_trace?")
                            (("2" (EXPAND "wf_trace?")
                              (("2" (FLATTEN) (("2" (GRIND) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (HP TYPE-DECL NIL |HP_adt| NIL)
    (|trace_semantic_rel| INDUCTIVE-DECL "bool" |trace_semantics| NIL)
    (|test?| ADT-RECOGNIZER-DECL "[HP -> boolean]" |HP_adt| NIL)
    (TEST ADT-CONSTRUCTOR-DECL "[BoolExpr -> (test?)]" |HP_adt| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|semantic_rel| INDUCTIVE-DECL "bool" |hp_expr| NIL)
    (|final_env| CONST-DECL "Environment" |trace_semantics| NIL)
    (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|TraceState| TYPE-DECL NIL |TraceState_adt| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|wf_trace?| CONST-DECL "bool" |trace_semantics| NIL)
    (|Trace| TYPE-EQ-DECL NIL |trace_semantics| NIL)
    (|init_env| CONST-DECL "Environment" |trace_semantics| NIL)
    (|finite_trace?| CONST-DECL "bool" |trace_semantics| NIL)
    (|FiniteTrace| TYPE-EQ-DECL NIL |trace_semantics| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|last| CONST-DECL "T" |more_list_props| |structures|)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|max_ci| CONST-DECL "{rr: (d) | FORALL (x: (d)): x <= rr}" |more_ci_props|
     |ODEs|)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic|
     |mv_analysis|)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL))
   SHOSTAK))
 (|trace_semantics_correct_seq| 0
  (|trace_semantics_correct_seq-1| |nil| 3900071304
   ("" (SKEEP*)
    (("" (SKOLETIN)
      (("" (SKOLETIN)
        (("" (REPLACE -1 :HIDE? T)
          (("" (REPLACE -1 :HIDE? T)
            (("" (FLATTEN)
              (("" (EXPAND "semantic_rel" 1)
                (("" (EXPAND "trace_semantic_rel" -1)
                  (("" (SPLIT)
                    (("1" (SKEEP)
                      (("1" (INST -6 "trace1")
                        (("1" (BETA)
                          (("1" (INST -7 "trace2")
                            (("1" (ASSERT)
                              (("1" (INST 1 "final_env(trace1)")
                                (("1" (REPLACE -5 :HIDE? T)
                                  (("1" (SPLIT)
                                    (("1" (HIDE -4 -6)
                                      (("1" (EXPAND "init_env")
                                        (("1" (SPLIT)
                                          (("1" (FLATTEN)
                                            (("1"
                                              (REWRITE
                                               "car_append[TraceState]")
                                              (("1" (ASSERT) NIL NIL)
                                               ("2" (TYPEPRED "trace1")
                                                (("2" (EXPAND "wf_trace?")
                                                  (("2" (PROPAX) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("2" (FLATTEN)
                                            (("2"
                                              (REWRITE
                                               "car_append[TraceState]")
                                              (("1" (ASSERT) NIL NIL)
                                               ("2" (TYPEPRED "trace1")
                                                (("2" (EXPAND "wf_trace?")
                                                  (("2" (PROPAX) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (HIDE -5)
                                      (("2" (EXPAND "final_env")
                                        (("2" (ASSERT)
                                          (("2" (SPLIT)
                                            (("1" (FLATTEN)
                                              (("1" (ASSERT)
                                                (("1" (SPLIT)
                                                  (("1" (FLATTEN)
                                                    (("1"
                                                      (REWRITE
                                                       "last_append[TraceState]")
                                                      (("1" (ASSERT) NIL NIL)
                                                       ("2" (TYPEPRED "trace2")
                                                        (("2"
                                                          (EXPAND "wf_trace?")
                                                          (("2" (PROPAX) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (FLATTEN)
                                                    (("2"
                                                      (REWRITE
                                                       "last_append[TraceState]")
                                                      (("1" (ASSERT) NIL NIL)
                                                       ("2" (TYPEPRED "trace2")
                                                        (("2"
                                                          (EXPAND "wf_trace?")
                                                          (("2" (PROPAX) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2" (FLATTEN)
                                              (("2" (ASSERT)
                                                (("2"
                                                  (REWRITE
                                                   "last_append[TraceState]")
                                                  (("1" (SPLIT)
                                                    (("1" (FLATTEN)
                                                      (("1" (ASSERT) NIL NIL))
                                                      NIL)
                                                     ("2" (FLATTEN)
                                                      (("2" (ASSERT) NIL NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (TYPEPRED "trace2")
                                                    (("2" (EXPAND "wf_trace?")
                                                      (("2" (PROPAX) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (TYPEPRED "trace")
                              (("2" (EXPAND "finite_trace?")
                                (("2" (REPLACE -7)
                                  (("2" (REWRITE "last_append[TraceState]") NIL
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (TYPEPRED "trace")
                      (("2" (EXPAND "finite_trace?")
                        (("2" (FLATTEN)
                          (("2" (HIDE-ALL-BUT (-2 -3)) (("2" (GRIND) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (HP TYPE-DECL NIL |HP_adt| NIL)
    (|trace_semantic_rel| INDUCTIVE-DECL "bool" |trace_semantics| NIL)
    (|seq?| ADT-RECOGNIZER-DECL "[HP -> boolean]" |HP_adt| NIL)
    (SEQ ADT-CONSTRUCTOR-DECL "[[HP, HP] -> (seq?)]" |HP_adt| NIL)
    (|semantic_rel| INDUCTIVE-DECL "bool" |hp_expr| NIL)
    (|final_env| CONST-DECL "Environment" |trace_semantics| NIL)
    (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|TraceState| TYPE-DECL NIL |TraceState_adt| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|wf_trace?| CONST-DECL "bool" |trace_semantics| NIL)
    (|Trace| TYPE-EQ-DECL NIL |trace_semantics| NIL)
    (|init_env| CONST-DECL "Environment" |trace_semantics| NIL)
    (|finite_trace?| CONST-DECL "bool" |trace_semantics| NIL)
    (|FiniteTrace| TYPE-EQ-DECL NIL |trace_semantics| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (|last_append| FORMULA-DECL NIL |more_list_props| |structures|)
    (|car_append| FORMULA-DECL NIL |more_list_props| |structures|)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|trace2| SKOLEM-CONST-DECL "Trace" |trace_semantics| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL))
   SHOSTAK))
 (|trace_semantics_correct_union| 0
  (|trace_semantics_correct_union-1| |nil| 3900760304
   ("" (SKEEP*)
    (("" (BETA)
      (("" (FLATTEN)
        (("" (EXPAND "semantic_rel" 1)
          (("" (FLATTEN)
            (("" (EXPAND "trace_semantic_rel" -3)
              (("" (SPLIT)
                (("1" (INST -2 "trace") (("1" (ASSERT) NIL NIL)) NIL)
                 ("2" (INST -3 "trace") (("2" (ASSERT) NIL NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|semantic_rel| INDUCTIVE-DECL "bool" |hp_expr| NIL)
    (|trace_semantic_rel| INDUCTIVE-DECL "bool" |trace_semantics| NIL)
    (|TraceState| TYPE-DECL NIL |TraceState_adt| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|wf_trace?| CONST-DECL "bool" |trace_semantics| NIL)
    (|Trace| TYPE-EQ-DECL NIL |trace_semantics| NIL)
    (|finite_trace?| CONST-DECL "bool" |trace_semantics| NIL)
    (|FiniteTrace| TYPE-EQ-DECL NIL |trace_semantics| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL))
   SHOSTAK))
 (|trace_semantics_correct_star| 0
  (|trace_semantics_correct_star-1| |nil| 3901397779
   ("" (SKEEP*)
    (("" (LEMMA "trace_semantic_rel_induction")
      ((""
        (INST -1
         ("LAMBDA(hp:HP)(trace:Trace): finite_trace?(trace) IMPLIES EXISTS (i: nat): semantic_rel_bounded_star(i)(hp )(init_env(trace))(final_env(trace))"))
        (("" (SPLIT)
          (("1" (INST -1 "STAR(hp)" "trace") (("1" (ASSERT) NIL NIL)) NIL)
           ("2" (SKEEP*)
            (("2" (SPLIT)
              (("1" (FLATTEN)
                (("1" (INST 1 "0")
                  (("1" (EXPAND "semantic_rel_bounded_star" 1)
                    (("1" (ASSERT)
                      (("1" (LEMMA "trace_semantics_correct_assign")
                        (("1" (INST -1 "trace_1" "assigns(hp_1)")
                          (("1" (BETA)
                            (("1" (USE "HP_ASSIGN_eta")
                              (("1" (REPLACE -1)
                                (("1" (ASSERT)
                                  (("1" (EXPAND "trace_semantic_rel" 1)
                                    (("1" (SPLIT)
                                      (("1" (PROPAX) NIL NIL)
                                       ("2" (PROPAX) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (INST 1 "0")
                (("2" (EXPAND "semantic_rel_bounded_star")
                  (("2" (ASSERT)
                    (("2" (FLATTEN)
                      (("2" (ASSERT)
                        (("2" (LEMMA "trace_semantics_correct_diff")
                          (("2" (INST -1 "trace_1" "odes(hp_1)" "be(hp_1)")
                            (("2" (BETA)
                              (("2" (USE "HP_DIFF_eta")
                                (("2" (REPLACE -1)
                                  (("2" (ASSERT)
                                    (("2" (EXPAND "trace_semantic_rel" 1)
                                      (("2" (PROPAX) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("3" (FLATTEN)
                (("3" (INST 1 "0")
                  (("3" (EXPAND "semantic_rel_bounded_star" 1)
                    (("3" (ASSERT)
                      (("3" (LEMMA "trace_semantics_correct_any")
                        (("3" (INST -1 "trace_1" "anyvar(hp_1)")
                          (("3" (BETA)
                            (("3" (USE "HP_ANY_eta")
                              (("3" (REPLACE -1)
                                (("3" (EXPAND "semantic_rel" 1)
                                  (("3" (ASSERT)
                                    (("3" (EXPAND "trace_semantic_rel" 1)
                                      (("3" (PROPAX) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("4" (FLATTEN)
                (("4" (INST 1 "0")
                  (("4" (EXPAND "semantic_rel_bounded_star" 1)
                    (("4" (ASSERT)
                      (("4" (LEMMA "trace_semantics_correct_test")
                        (("4" (INST -1 "trace_1" "be(hp_1)")
                          (("4" (BETA)
                            (("4" (USE "HP_TEST_eta")
                              (("4" (REPLACE -1)
                                (("4" (ASSERT)
                                  (("4" (EXPAND "trace_semantic_rel" 1)
                                    (("4" (PROPAX) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("5" (FLATTEN)
                (("5" (HIDE -5 -6)
                  (("5" (SPLIT -2)
                    (("1" (SKEEP)
                      (("1" (ASSERT)
                        (("1" (SKOLEM -2 "i1")
                          (("1" (SPLIT)
                            (("1" (SKOLEM -1 "i2")
                              (("1" (INST 1 "max(i1,i2)")
                                (("1" (EXPAND "semantic_rel_bounded_star" 1)
                                  (("1" (INST 1 "final_env(trace1)")
                                    (("1" (SPLIT)
                                      (("1"
                                        (LEMMA "semantic_rel_bounded_star_inc")
                                        (("1"
                                          (INST -1 "stm1(hp_1)"
                                           "init_env(trace1)"
                                           "final_env(trace1)" "i1")
                                          (("1" (ASSERT)
                                            (("1" (INST -1 "max(i1,i2)")
                                              (("1"
                                                (CASE
                                                    "init_env(trace_1) = init_env(trace1)")
                                                (("1" (REPLACE -1)
                                                  (("1" (PROPAX) NIL NIL)) NIL)
                                                 ("2" (HIDE-ALL-BUT (1 -8))
                                                  (("2" (REPLACE -1)
                                                    (("2" (EXPAND "init_env")
                                                      (("2"
                                                        (USE
                                                         "car_append[TraceState]")
                                                        (("1" (REPLACE -1)
                                                          (("1" (PROPAX) NIL
                                                            NIL))
                                                          NIL)
                                                         ("2"
                                                          (TYPEPRED "trace1")
                                                          (("2"
                                                            (EXPAND
                                                             "wf_trace?")
                                                            (("2" (ASSERT) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2"
                                        (LEMMA "semantic_rel_bounded_star_inc")
                                        (("2"
                                          (INST -1 "stm2(hp_1)"
                                           "init_env(trace2)"
                                           "final_env(trace2)" "i2")
                                          (("2" (ASSERT)
                                            (("2" (INST -1 "max(i1,i2)")
                                              (("2" (REPLACE -7)
                                                (("2"
                                                  (CASE
                                                      "final_env(trace2) = final_env(trace_1)")
                                                  (("1" (REPLACE -1)
                                                    (("1" (PROPAX) NIL NIL))
                                                    NIL)
                                                   ("2" (HIDE-ALL-BUT (1 -8))
                                                    (("2" (EXPAND "final_env")
                                                      (("2"
                                                        (USE
                                                         "last_append[TraceState]")
                                                        (("1" (REPLACE -2)
                                                          (("1" (REPLACE -1)
                                                            (("1" (PROPAX) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL)
                                                         ("2"
                                                          (TYPEPRED "trace2")
                                                          (("2"
                                                            (EXPAND
                                                             "wf_trace?")
                                                            (("2" (ASSERT) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (HIDE-ALL-BUT (1 -8 -6))
                              (("2" (EXPAND "finite_trace?")
                                (("2" (USE "last_append[TraceState]")
                                  (("2" (REPLACE -2)
                                    (("2" (REPLACE -1) (("2" (PROPAX) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (FLATTEN)
                      (("2" (HIDE-ALL-BUT (-1 -5))
                        (("2" (EXPAND "finite_trace?") (("2" (GRIND) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("6" (FLATTEN)
                (("6" (SPLIT)
                  (("1" (FLATTEN)
                    (("1" (ASSERT)
                      (("1" (SKEEP)
                        (("1" (INSTEEP)
                          (("1" (EXPAND "semantic_rel_bounded_star" 1)
                            (("1" (ASSERT) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (FLATTEN)
                    (("2" (ASSERT)
                      (("2" (SKEEP)
                        (("2" (INSTEEP)
                          (("2" (EXPAND "semantic_rel_bounded_star" 1)
                            (("2" (ASSERT) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("7" (FLATTEN)
                (("7" (SPLIT)
                  (("1" (FLATTEN)
                    (("1" (INST 1 "0")
                      (("1" (EXPAND "semantic_rel_bounded_star" 1)
                        (("1" (ASSERT)
                          (("1" (HIDE-ALL-BUT (-1 -2 -4 1))
                            (("1" (EXPAND "init_env")
                              (("1" (EXPAND "final_env")
                                (("1" (CASE "car(trace_1)=last(trace_1)")
                                  (("1" (REPLACE -1) (("1" (ASSERT) NIL NIL))
                                    NIL)
                                   ("2" (HIDE-ALL-BUT (1 -1))
                                    (("2" (GRIND) NIL NIL)) NIL)
                                   ("3" (TYPEPRED "trace_1")
                                    (("3" (EXPAND "wf_trace?")
                                      (("3" (ASSERT) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (FLATTEN)
                    (("2" (ASSERT)
                      (("2" (SKEEP)
                        (("2" (INST 1 "i+1")
                          (("2" (EXPAND "semantic_rel_bounded_star" 1)
                            (("2" (FLATTEN)
                              (("2" (EXPAND "semantic_rel_bounded_star" -2)
                                (("2" (USE "HP_STAR_eta")
                                  (("2" (REPLACE -1)
                                    (("2" (SKEEP)
                                      (("2" (INST 2 "env")
                                        (("2" (ASSERT)
                                          (("2"
                                            (USE
                                             "bounded_implies_semantic_rel")
                                            (("2" (ASSERT) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|trace_semantic_rel_induction| FORMULA-DECL NIL |trace_semantics| NIL)
    (|FiniteTrace| TYPE-EQ-DECL NIL |trace_semantics| NIL)
    (STAR ADT-CONSTRUCTOR-DECL "[HP -> (star?)]" |HP_adt| NIL)
    (|star?| ADT-RECOGNIZER-DECL "[HP -> boolean]" |HP_adt| NIL)
    (|dLVar| TYPE-DECL NIL |hp_def| NIL)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|MapExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|mapexpr_inj| CONST-DECL "bool" |hp_def| NIL)
    (|Assigns| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|assign?| ADT-RECOGNIZER-DECL "[HP -> boolean]" |HP_adt| NIL)
    (|assigns| ADT-ACCESSOR-DECL "[(assign?) -> Assigns]" |HP_adt| NIL)
    (|HP_ASSIGN_eta| FORMULA-DECL NIL |HP_adt| NIL)
    (|null_MapExprInj| NAME-JUDGEMENT "MapExprInj" |hp_def| NIL)
    (|trace_semantic_rel| INDUCTIVE-DECL "bool" |trace_semantics| NIL)
    (|trace_semantics_correct_assign| FORMULA-DECL NIL |trace_semantics| NIL)
    (|trace_semantics_correct_diff| FORMULA-DECL NIL |trace_semantics| NIL)
    (|HP_DIFF_eta| FORMULA-DECL NIL |HP_adt| NIL)
    (|be| SHARED-ADT-ACCESSOR-DECL
     "[{x: HP | diff?(x) OR test?(x)} -> BoolExpr]" |HP_adt| NIL)
    (|test?| ADT-RECOGNIZER-DECL "[HP -> boolean]" |HP_adt| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|odes| ADT-ACCESSOR-DECL "[(diff?) -> ODEs]" |HP_adt| NIL)
    (|diff?| ADT-RECOGNIZER-DECL "[HP -> boolean]" |HP_adt| NIL)
    (|ODEs| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|any?| ADT-RECOGNIZER-DECL "[HP -> boolean]" |HP_adt| NIL)
    (|anyvar| ADT-ACCESSOR-DECL "[(any?) -> dLVar]" |HP_adt| NIL)
    (|HP_ANY_eta| FORMULA-DECL NIL |HP_adt| NIL)
    (|semantic_rel| INDUCTIVE-DECL "bool" |hp_expr| NIL)
    (|trace_semantics_correct_any| FORMULA-DECL NIL |trace_semantics| NIL)
    (|HP_TEST_eta| FORMULA-DECL NIL |HP_adt| NIL)
    (|trace_semantics_correct_test| FORMULA-DECL NIL |trace_semantics| NIL)
    (|seq?| ADT-RECOGNIZER-DECL "[HP -> boolean]" |HP_adt| NIL)
    (|union?| ADT-RECOGNIZER-DECL "[HP -> boolean]" |HP_adt| NIL)
    (|stm1| SHARED-ADT-ACCESSOR-DECL "[{x: HP | seq?(x) OR union?(x)} -> HP]"
     |HP_adt| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|trace1| SKOLEM-CONST-DECL "Trace" |trace_semantics| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|car_append| FORMULA-DECL NIL |more_list_props| |structures|)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|semantic_rel_bounded_star_inc| FORMULA-DECL NIL |bounded_star_semantics|
     NIL)
    (|stm2| SHARED-ADT-ACCESSOR-DECL "[{x: HP | seq?(x) OR union?(x)} -> HP]"
     |HP_adt| NIL)
    (|trace2| SKOLEM-CONST-DECL "Trace" |trace_semantics| NIL)
    (|last_append| FORMULA-DECL NIL |more_list_props| |structures|)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|last| CONST-DECL "T" |more_list_props| |structures|)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|HP_STAR_eta| FORMULA-DECL NIL |HP_adt| NIL)
    (|stm| ADT-ACCESSOR-DECL "[(star?) -> HP]" |HP_adt| NIL)
    (|bounded_implies_semantic_rel| FORMULA-DECL NIL |bounded_star_semantics|
     NIL)
    (|final_env| CONST-DECL "Environment" |trace_semantics| NIL)
    (|init_env| CONST-DECL "Environment" |trace_semantics| NIL)
    (|semantic_rel_bounded_star| DEF-DECL "bool" |bounded_star_semantics| NIL)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|finite_trace?| CONST-DECL "bool" |trace_semantics| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|Trace| TYPE-EQ-DECL NIL |trace_semantics| NIL)
    (|wf_trace?| CONST-DECL "bool" |trace_semantics| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|TraceState| TYPE-DECL NIL |TraceState_adt| NIL)
    (HP TYPE-DECL NIL |HP_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL))
   SHOSTAK))
 (|trace_semantics_correct| 0
  (|trace_semantics_correct-1| |nil| 3901637860
   ("" (INDUCT "hp")
    (("1" (BETA) (("1" (PROPAX) NIL NIL)) NIL)
     ("2" (USE "trace_semantics_correct_assign")
      (("2" (SKEEP)
        (("2" (BETA)
          (("2" (SKEEP)
            (("2" (INST -1 "trace" "ASSIGN1_var") (("2" (ASSERT) NIL NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("3" (USE "trace_semantics_correct_diff")
      (("3" (SKEEP*)
        (("3" (INST -1 "trace" "DIFF1_var" "DIFF2_var")
          (("3" (BETA) (("3" (ASSERT) NIL NIL)) NIL)) NIL))
        NIL))
      NIL)
     ("4" (USE "trace_semantics_correct_test")
      (("4" (SKEEP*)
        (("4" (INST -1 "trace" "TEST1_var")
          (("4" (BETA) (("4" (ASSERT) NIL NIL)) NIL)) NIL))
        NIL))
      NIL)
     ("5" (USE "trace_semantics_correct_seq")
      (("5" (SKEEP*)
        (("5" (INST -1 "SEQ1_var" "SEQ2_var")
          (("5" (SPLIT)
            (("1" (INST -1 "trace") (("1" (BETA) (("1" (ASSERT) NIL NIL)) NIL))
              NIL)
             ("2" (BETA) (("2" (PROPAX) NIL NIL)) NIL)
             ("3" (BETA) (("3" (PROPAX) NIL NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("6" (USE "trace_semantics_correct_union")
      (("6" (SKEEP)
        (("6" (INST -1 "UNION1_var" "UNION2_var")
          (("6" (ASSERT)
            (("6" (SPLIT)
              (("1" (PROPAX) NIL NIL) ("2" (PROPAX) NIL NIL)
               ("3" (PROPAX) NIL NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("7" (USE "trace_semantics_correct_star")
      (("7" (SKEEP*)
        (("7" (INST -1 "STAR1_var")
          (("7" (SPLIT)
            (("1" (INST -1 "trace")
              (("1" (ASSERT)
                (("1" (SKEEP)
                  (("1" (USE "bounded_implies_semantic_rel")
                    (("1" (ASSERT) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (PROPAX) NIL NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("8" (USE "trace_semantics_correct_any")
      (("8" (SKEEP*)
        (("8" (INST -1 "trace" "ANY1_var")
          (("8" (BETA) (("8" (ASSERT) NIL NIL)) NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|trace_semantics_correct_any| FORMULA-DECL NIL |trace_semantics| NIL)
    (|trace_semantics_correct_star| FORMULA-DECL NIL |trace_semantics| NIL)
    (|star?| ADT-RECOGNIZER-DECL "[HP -> boolean]" |HP_adt| NIL)
    (STAR ADT-CONSTRUCTOR-DECL "[HP -> (star?)]" |HP_adt| NIL)
    (|bounded_implies_semantic_rel| FORMULA-DECL NIL |bounded_star_semantics|
     NIL)
    (|trace_semantics_correct_union| FORMULA-DECL NIL |trace_semantics| NIL)
    (|trace_semantics_correct_seq| FORMULA-DECL NIL |trace_semantics| NIL)
    (|trace_semantics_correct_test| FORMULA-DECL NIL |trace_semantics| NIL)
    (|trace_semantics_correct_diff| FORMULA-DECL NIL |trace_semantics| NIL)
    (|ODEs| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|trace_semantics_correct_assign| FORMULA-DECL NIL |trace_semantics| NIL)
    (|dLVar| TYPE-DECL NIL |hp_def| NIL)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|MapExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|mapexpr_inj| CONST-DECL "bool" |hp_def| NIL)
    (|Assigns| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|null_MapExprInj| NAME-JUDGEMENT "MapExprInj" |hp_def| NIL)
    (|HP_induction| FORMULA-DECL NIL |HP_adt| NIL)
    (|init_env| CONST-DECL "Environment" |trace_semantics| NIL)
    (|final_env| CONST-DECL "Environment" |trace_semantics| NIL)
    (|semantic_rel| INDUCTIVE-DECL "bool" |hp_expr| NIL)
    (|trace_semantic_rel| INDUCTIVE-DECL "bool" |trace_semantics| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|FiniteTrace| TYPE-EQ-DECL NIL |trace_semantics| NIL)
    (|finite_trace?| CONST-DECL "bool" |trace_semantics| NIL)
    (|Trace| TYPE-EQ-DECL NIL |trace_semantics| NIL)
    (|wf_trace?| CONST-DECL "bool" |trace_semantics| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|TraceState| TYPE-DECL NIL |TraceState_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (HP TYPE-DECL NIL |HP_adt| NIL))
   SHOSTAK))
 (|trace_semantics_complete_assign| 0
  (|trace_semantics_complete_assign-1| |nil| 3888957866
   ("" (SKEEP*)
    (("" (INST 1 "(: STATE(envi), STATE(envo) :)")
      (("1" (SPLIT)
        (("1" (EXPAND "init_env") (("1" (PROPAX) NIL NIL)) NIL)
         ("2" (EXPAND "final_env") (("2" (GRIND) NIL NIL)) NIL)
         ("3" (EXPAND "semantic_rel")
          (("3" (EXPAND "trace_semantic_rel")
            (("3" (FLATTEN)
              (("3" (SPLIT)
                (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL)
                 ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)
                 ("3" (GRIND) NIL NIL) ("4" (GRIND) NIL NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (GRIND) NIL NIL))
      NIL))
    NIL)
   ((|FiniteTrace| TYPE-EQ-DECL NIL |trace_semantics| NIL)
    (|finite_trace?| CONST-DECL "bool" |trace_semantics| NIL)
    (|Trace| TYPE-EQ-DECL NIL |trace_semantics| NIL)
    (|envo| SKOLEM-CONST-DECL "Environment" |trace_semantics| NIL)
    (|envi| SKOLEM-CONST-DECL "Environment" |trace_semantics| NIL)
    (STATE ADT-CONSTRUCTOR-DECL "[Environment -> (state?)]" |TraceState_adt|
     NIL)
    (|state?| ADT-RECOGNIZER-DECL "[TraceState -> boolean]" |TraceState_adt|
     NIL)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|wf_trace?| CONST-DECL "bool" |trace_semantics| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|TraceState| TYPE-DECL NIL |TraceState_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|semantic_rel| INDUCTIVE-DECL "bool" |hp_expr| NIL)
    (|trace_semantic_rel| INDUCTIVE-DECL "bool" |trace_semantics| NIL)
    (|final_env| CONST-DECL "Environment" |trace_semantics| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|last| CONST-DECL "T" |more_list_props| |structures|)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|init_env| CONST-DECL "Environment" |trace_semantics| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|null_MapExprInj| NAME-JUDGEMENT "MapExprInj" |hp_def| NIL))
   SHOSTAK))
 (|trace_semantics_complete_diff| 0
  (|trace_semantics_complete_diff-1| |nil| 3889102892
   ("" (SKEEP*)
    (("" (EXPAND "semantic_rel")
      (("" (SPLIT)
        (("1" (FLATTEN)
          (("1" (INST 1 "(: STATE(envi) :)")
            (("1" (EXPAND "init_env")
              (("1" (EXPAND "final_env")
                (("1" (EXPAND "last")
                  (("1" (EXPAND "nth")
                    (("1" (EXPAND "length")
                      (("1" (EXPAND "length")
                        (("1" (ASSERT)
                          (("1" (EXPAND "trace_semantic_rel")
                            (("1" (EXPAND "length")
                              (("1" (EXPAND "length") (("1" (PROPAX) NIL NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (GRIND) NIL NIL))
            NIL))
          NIL)
         ("2" (SKEEP)
          (("2" (EXPAND "semantic_rel_diff")
            (("2" (SKEEP)
              (("2" (SKEEP)
                (("2" (CASE "r=0")
                  (("1" (REPLACE -1)
                    (("1" (INST 1 "(: STATE(envi) :)")
                      (("1" (EXPAND "init_env")
                        (("1" (EXPAND "final_env")
                          (("1" (EXPAND "last")
                            (("1" (EXPAND "nth")
                              (("1" (EXPAND "length")
                                (("1" (EXPAND "length")
                                  (("1" (EXPAND "trace_semantic_rel")
                                    (("1" (ASSERT)
                                      (("1" (INST -3 "0" "envi")
                                        (("1" (ASSERT)
                                          (("1" (TYPEPRED "fs")
                                            (("1" (EXPAND "solution_odes_u?")
                                              (("1" (EXPAND "solution_odes?")
                                                (("1" (FLATTEN)
                                                  (("1"
                                                    (TYPEPRED
                                                     "env_at_t(odes, fs, envi)(0)")
                                                    (("1" (INST-CP -2 "envi")
                                                      (("1" (INST-CP -2 "envo")
                                                        (("1" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (TYPEPRED "fs")
                                          (("2" (EXPAND "solution_odes_u?")
                                            (("2" (FLATTEN)
                                              (("2" (EXPAND "solution_odes?")
                                                (("2" (FLATTEN) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (EXPAND "wf_trace?")
                        (("2" (EXPAND "finite_trace?")
                          (("2" (EXPAND "last")
                            (("2" (EXPAND "nth")
                              (("2" (ASSERT)
                                (("2" (SKEEP)
                                  (("2" (TYPEPRED "i") (("2" (ASSERT) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2"
                    (INST 2
                     "(: STATE_DIFF(closed_interval(0,r), envi, LAMBDA (r1:closed_interval[real](0,r)): env_at_t(odes,fs,envi)(r1)) :)")
                    (("1" (EXPAND "init_env")
                      (("1" (EXPAND "final_env")
                        (("1" (EXPAND "last")
                          (("1" (EXPAND "nth")
                            (("1" (ASSERT)
                              (("1" (SPLIT)
                                (("1" (USE "db_max")
                                  (("1" (REPLACE -1)
                                    (("1"
                                      (TYPEPRED "env_at_t(odes,
 fs, envi)(r)")
                                      (("1" (INST -2 "envo")
                                        (("1" (REPLACE -2)
                                          (("1" (PROPAX) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (TYPEPRED "r")
                                    (("2" (TYPEPRED "D")
                                      (("2" (EXPAND "dd?")
                                        (("2" (SPLIT)
                                          (("1" (SKEEP) (("1" (GRIND) NIL NIL))
                                            NIL)
                                           ("2" (GRIND) NIL NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (EXPAND "trace_semantic_rel")
                                  (("2" (EXPAND "length")
                                    (("2" (EXPAND "length")
                                      (("2" (INST 1 "fs")
                                        (("1" (ASSERT)
                                          (("1" (SPLIT)
                                            (("1" (DECOMPOSE-EQUALITY)
                                              (("1" (GRIND) NIL NIL)
                                               ("2" (TYPEPRED "r")
                                                (("2" (TYPEPRED "D")
                                                  (("2" (EXPAND "dd?")
                                                    (("2" (GRIND) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2" (SKEEP)
                                              (("2" (TYPEPRED "t")
                                                (("2"
                                                  (INST -3 "t"
                                                   "env_at_t(odes, fs, envi)(t)")
                                                  (("2"
                                                    (EXPAND "closed_interval")
                                                    (("2" (ASSERT)
                                                      (("2" (FLATTEN)
                                                        (("2" (ASSERT)
                                                          (("2" (TYPEPRED "D")
                                                            (("2"
                                                              (EXPAND "dd?")
                                                              (("2" (SPLIT)
                                                                (("1" (SKEEP)
                                                                  (("1"
                                                                    (EXPAND
                                                                     "closed_interval")
                                                                    (("1"
                                                                      (TYPEPRED
                                                                       "r")
                                                                      (("1"
                                                                        (REPLACE
                                                                         -2)
                                                                        (("1"
                                                                          (ASSERT)
                                                                          NIL
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL)
                                                                 ("2"
                                                                  (EXPAND "hp")
                                                                  (("2"
                                                                    (ASSERT)
                                                                    (("2"
                                                                      (REPLACE
                                                                       -1)
                                                                      (("2"
                                                                        (ASSERT)
                                                                        NIL
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (TYPEPRED "fs")
                                          (("2" (LEMMA "solution_odes_subset")
                                            (("2"
                                              (INST -1 "D" "odes" "envi" "fs"
                                               "closed_interval(0, r)")
                                              (("1" (ASSERT) NIL NIL)
                                               ("2" (TYPEPRED "r")
                                                (("2" (TYPEPRED "D")
                                                  (("2" (EXPAND "dd?")
                                                    (("2" (SPLIT)
                                                      (("1" (SKEEP*)
                                                        (("1" (REPLACE -1)
                                                          (("1"
                                                            (EXPAND
                                                             "closed_interval")
                                                            (("1" (FLATTEN)
                                                              (("1" (ASSERT)
                                                                NIL NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL)
                                                       ("2" (REPLACE -1)
                                                        (("2" (SKEEP)
                                                          (("2"
                                                            (EXPAND
                                                             "closed_interval")
                                                            (("2" (FLATTEN)
                                                              (("2"
                                                                (EXPAND "hp")
                                                                (("2" (ASSERT)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (SPLIT)
                      (("1" (EXPAND "wf_trace?")
                        (("1" (SKEEP)
                          (("1" (TYPEPRED "i")
                            (("1" (EXPAND "length")
                              (("1" (EXPAND "length") (("1" (GRIND) NIL NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (EXPAND "finite_trace?")
                        (("2" (FLATTEN)
                          (("2" (HIDE 1)
                            (("2" (EXPAND "last")
                              (("2" (EXPAND "length")
                                (("2" (EXPAND "length")
                                  (("2" (EXPAND "nth") (("2" (PROPAX) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("3" (TYPEPRED "env_at_t(odes, fs, envi)(0)")
                      (("3" (TYPEPRED "fs")
                        (("3" (EXPAND "solution_odes_u?")
                          (("3" (EXPAND "solution_odes?")
                            (("3" (FLATTEN) (("3" (INST -6 "envi") NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("4" (EXPAND "closed_interval") (("4" (PROPAX) NIL NIL))
                      NIL)
                     ("5" (TYPEPRED "r")
                      (("5" (TYPEPRED "D")
                        (("5" (EXPAND "dd?")
                          (("5" (SPLIT -1)
                            (("1" (SKEEP)
                              (("1" (REPLACE -1)
                                (("1" (EXPAND "closed_interval" -2)
                                  (("1" (FLATTEN)
                                    (("1" (SPLIT)
                                      (("1" (FLATTEN)
                                        (("1" (INST 1 "r")
                                          (("1" (ASSERT) NIL NIL)) NIL))
                                        NIL)
                                       ("2" (INST 1 "r")
                                        (("2" (ASSERT) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (REPLACE -1)
                              (("2" (EXPAND "hp")
                                (("2" (SPLIT)
                                  (("1" (FLATTEN)
                                    (("1" (INST 1 "r") (("1" (ASSERT) NIL NIL))
                                      NIL))
                                    NIL)
                                   ("2" (INST 1 "r") (("2" (ASSERT) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("6" (TYPEPRED "r")
                      (("6" (TYPEPRED "D")
                        (("6" (EXPAND "dd?") (("6" (GRIND) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|semantic_rel| INDUCTIVE-DECL "bool" |hp_expr| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|dd?| CONST-DECL "bool" |hp_expr| NIL)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|env_at_t| CONST-DECL "{env: (env_at_t?(odes, fs, envi, t)) |
   FORALL (env2: (env_at_t?(odes, fs, envi, t))): env = env2}"
     |hp_expr| NIL)
    (|solution_odes?| CONST-DECL "bool" |hp_expr| NIL)
    (<= CONST-DECL "bool" |reals| NIL) (|ODEs| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|dLVar| TYPE-DECL NIL |hp_def| NIL)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|MapExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|mapexpr_inj| CONST-DECL "bool" |hp_def| NIL)
    (|env_at_t?| CONST-DECL "bool" |hp_expr| NIL)
    (|odes| SKOLEM-CONST-DECL "ODEs" |trace_semantics| NIL)
    (|solution_odes_u?| CONST-DECL "bool" |hp_expr| NIL)
    (D SKOLEM-CONST-DECL "(dd?)" |trace_semantics| NIL)
    (|fs| SKOLEM-CONST-DECL "(solution_odes_u?(D, odes, envi))"
     |trace_semantics| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|solution_odes_subset| FORMULA-DECL NIL |ODEs_equiv| NIL)
    (|t| SKOLEM-CONST-DECL "(closed_interval(0, r))" |trace_semantics| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|not_in_map| CONST-DECL "bool" |hp_def| NIL)
    (|MapExprInj| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|dlvar_index| ADT-ACCESSOR-DECL "[dLVar -> nat]" |hp_def| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|db_max| FORMULA-DECL NIL |more_ci_props| |ODEs|)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic|
     |mv_analysis|)
    (|max_ci| CONST-DECL "{rr: (d) | FORALL (x: (d)): x <= rr}" |more_ci_props|
     |ODEs|)
    (|hp| CONST-DECL "bool" |interval_def| |ODEs|)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|r| SKOLEM-CONST-DECL "(D)" |trace_semantics| NIL)
    (|closed_interval?| CONST-DECL "bool" |interval_def| |ODEs|)
    (|closed_interval| CONST-DECL "(closed_interval?(a, b))" |interval_def|
     |ODEs|)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|state_diff?| ADT-RECOGNIZER-DECL "[TraceState -> boolean]"
     |TraceState_adt| NIL)
    (STATE_DIFF ADT-CONSTRUCTOR-DECL
     "[[D: {D: (dd?) | EXISTS (b: posreal): D = closed_interval(0, b)},
  s0: Environment, {b: [(D) -> Environment] | b(0) = s0}] ->
   (state_diff?)]"
     |TraceState_adt| NIL)
    (|closed_interval| TYPE-EQ-DECL NIL |intervals_real| |reals|)
    (|semantic_rel_diff| CONST-DECL "bool" |hp_expr| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|init_env| CONST-DECL "Environment" |trace_semantics| NIL)
    (|last| CONST-DECL "T" |more_list_props| |structures|)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|trace_semantic_rel| INDUCTIVE-DECL "bool" |trace_semantics| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|final_env| CONST-DECL "Environment" |trace_semantics| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|TraceState| TYPE-DECL NIL |TraceState_adt| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|wf_trace?| CONST-DECL "bool" |trace_semantics| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|state?| ADT-RECOGNIZER-DECL "[TraceState -> boolean]" |TraceState_adt|
     NIL)
    (STATE ADT-CONSTRUCTOR-DECL "[Environment -> (state?)]" |TraceState_adt|
     NIL)
    (|envi| SKOLEM-CONST-DECL "Environment" |trace_semantics| NIL)
    (|Trace| TYPE-EQ-DECL NIL |trace_semantics| NIL)
    (|finite_trace?| CONST-DECL "bool" |trace_semantics| NIL)
    (|FiniteTrace| TYPE-EQ-DECL NIL |trace_semantics| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|null_MapExprInj| NAME-JUDGEMENT "MapExprInj" |hp_def| NIL))
   SHOSTAK))
 (|trace_semantics_complete_any| 0
  (|trace_semantics_complete_any-1| |nil| 3889351265
   ("" (SKEEP*)
    (("" (INST 1 "(: STATE(envi), STATE(envo) :)")
      (("1" (SPLIT)
        (("1" (EXPAND "init_env") (("1" (PROPAX) NIL NIL)) NIL)
         ("2" (EXPAND "final_env") (("2" (GRIND) NIL NIL)) NIL)
         ("3" (EXPAND "semantic_rel")
          (("3" (EXPAND "trace_semantic_rel")
            (("3" (EXPAND "length")
              (("3" (EXPAND "length")
                (("3" (EXPAND "length")
                  (("3" (SPLIT)
                    (("1" (GRIND) NIL NIL)
                     ("2" (SKEEP)
                      (("2" (EXPAND "nth")
                        (("2" (EXPAND "nth")
                          (("2" (INSTEEP) (("2" (GRIND) NIL NIL)) NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (GRIND) NIL NIL))
      NIL))
    NIL)
   ((|FiniteTrace| TYPE-EQ-DECL NIL |trace_semantics| NIL)
    (|finite_trace?| CONST-DECL "bool" |trace_semantics| NIL)
    (|Trace| TYPE-EQ-DECL NIL |trace_semantics| NIL)
    (|envo| SKOLEM-CONST-DECL "Environment" |trace_semantics| NIL)
    (|envi| SKOLEM-CONST-DECL "Environment" |trace_semantics| NIL)
    (STATE ADT-CONSTRUCTOR-DECL "[Environment -> (state?)]" |TraceState_adt|
     NIL)
    (|state?| ADT-RECOGNIZER-DECL "[TraceState -> boolean]" |TraceState_adt|
     NIL)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|wf_trace?| CONST-DECL "bool" |trace_semantics| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|TraceState| TYPE-DECL NIL |TraceState_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|semantic_rel| INDUCTIVE-DECL "bool" |hp_expr| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|dLVar| TYPE-DECL NIL |hp_def| NIL)
    (|dlvar_index| ADT-ACCESSOR-DECL "[dLVar -> nat]" |hp_def| NIL)
    (|trace_semantic_rel| INDUCTIVE-DECL "bool" |trace_semantics| NIL)
    (|final_env| CONST-DECL "Environment" |trace_semantics| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|last| CONST-DECL "T" |more_list_props| |structures|)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|init_env| CONST-DECL "Environment" |trace_semantics| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL))
   SHOSTAK))
 (|trace_semantics_complete_test| 0
  (|trace_semantics_complete_test-1| |nil| 3889519796
   ("" (SKEEP*)
    (("" (EXPAND "semantic_rel")
      (("" (FLATTEN)
        (("" (INST 1 "(:STATE(envi):)")
          (("1" (ASSERT)
            (("1" (EXPAND "init_env")
              (("1" (EXPAND "final_env")
                (("1" (EXPAND "last")
                  (("1" (EXPAND "length")
                    (("1" (EXPAND "length")
                      (("1" (EXPAND "nth")
                        (("1" (EXPAND "trace_semantic_rel")
                          (("1" (ASSERT) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (GRIND) NIL NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|semantic_rel| INDUCTIVE-DECL "bool" |hp_expr| NIL)
    (|FiniteTrace| TYPE-EQ-DECL NIL |trace_semantics| NIL)
    (|finite_trace?| CONST-DECL "bool" |trace_semantics| NIL)
    (|Trace| TYPE-EQ-DECL NIL |trace_semantics| NIL)
    (|envi| SKOLEM-CONST-DECL "Environment" |trace_semantics| NIL)
    (STATE ADT-CONSTRUCTOR-DECL "[Environment -> (state?)]" |TraceState_adt|
     NIL)
    (|state?| ADT-RECOGNIZER-DECL "[TraceState -> boolean]" |TraceState_adt|
     NIL)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|wf_trace?| CONST-DECL "bool" |trace_semantics| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|TraceState| TYPE-DECL NIL |TraceState_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|init_env| CONST-DECL "Environment" |trace_semantics| NIL)
    (|last| CONST-DECL "T" |more_list_props| |structures|)
    (|trace_semantic_rel| INDUCTIVE-DECL "bool" |trace_semantics| NIL)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|final_env| CONST-DECL "Environment" |trace_semantics| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL))
   SHOSTAK))
 (|trace_semantics_complete_seq| 0
  (|trace_semantics_complete_seq-1| |nil| 3791545264
   ("" (SKEEP*)
    (("" (EXPAND "semantic_rel" -3)
      (("" (SKEEP -3)
        (("" (INST -1 "envi" "env")
          (("" (INST -2 "env" "envo")
            (("" (ASSERT)
              (("" (SKOLEM -1 "trace1")
                (("" (SKOLEM -2 "trace2")
                  (("" (FLATTEN)
                    (("" (INST 1 "append(trace1,trace2)")
                      (("1" (SPLIT)
                        (("1" (EXPAND "init_env" 1)
                          (("1" (EXPAND "init_env" -1)
                            (("1" (REWRITE "car_append[TraceState]")
                              (("1" (TYPEPRED "trace1")
                                (("1" (EXPAND "wf_trace?")
                                  (("1" (PROPAX) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (EXPAND "final_env" 1)
                          (("2" (EXPAND "final_env" -5)
                            (("2" (REWRITE "last_append[TraceState]")
                              (("2" (TYPEPRED "trace2")
                                (("2" (EXPAND "wf_trace?")
                                  (("2" (PROPAX) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("3" (EXPAND "trace_semantic_rel" 1)
                          (("3" (FLATTEN)
                            (("3" (INST 1 "trace1" "trace2")
                              (("3" (ASSERT) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (TYPEPRED "trace1")
                        (("2" (TYPEPRED "trace2")
                          (("2" (HIDE (-5 -6 -7 -8 -9 -10 -11 -12))
                            (("2" (SPLIT)
                              (("1" (EXPAND "wf_trace?")
                                (("1" (FLATTEN)
                                  (("1" (SPLIT)
                                    (("1" (HIDE-ALL-BUT (1 -1 -4))
                                      (("1" (GRIND) NIL NIL)) NIL)
                                     ("2" (REWRITE "car_append[TraceState]")
                                      NIL NIL)
                                     ("3" (SKEEP)
                                      (("3" (LEMMA "nth_append[TraceState]")
                                        (("3" (INST -1 "trace1" "trace2" "i")
                                          (("3" (TYPEPRED "i")
                                            (("3"
                                              (REWRITE
                                               "length_append[TraceState]")
                                              (("3" (ASSERT)
                                                (("3" (LIFT-IF)
                                                  (("3" (SPLIT)
                                                    (("1" (FLATTEN)
                                                      (("1" (INST -8 "i")
                                                        (("1" (REPLACE -2)
                                                          (("1" (ASSERT) NIL
                                                            NIL))
                                                          NIL)
                                                         ("2"
                                                          (CASE
                                                              "i=length[TraceState](trace1) - 1")
                                                          (("1" (REPLACE -1)
                                                            (("1" (HIDE 1 -2)
                                                              (("1"
                                                                (REPLACE -2)
                                                                (("1"
                                                                  (EXPAND
                                                                   "finite_trace?"
                                                                   -8)
                                                                  (("1"
                                                                    (CASE
                                                                        "last(trace1) = nth(trace1, length[TraceState](trace1) - 1)")
                                                                    (("1"
                                                                      (REPLACE
                                                                       -1)
                                                                      (("1"
                                                                        (ASSERT)
                                                                        NIL
                                                                        NIL))
                                                                      NIL)
                                                                     ("2"
                                                                      (HIDE-ALL-BUT
                                                                       (1 -7))
                                                                      (("2"
                                                                        (GRIND)
                                                                        NIL
                                                                        NIL))
                                                                      NIL)
                                                                     ("3"
                                                                      (ASSERT)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL)
                                                           ("2" (ASSERT) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL)
                                                     ("2" (FLATTEN)
                                                      (("2" (REPLACE -1)
                                                        (("2"
                                                          (INST -4
                                                           "i - length(trace1)")
                                                          (("1" (ASSERT) NIL
                                                            NIL)
                                                           ("2" (ASSERT) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (EXPAND "finite_trace?")
                                (("2" (REWRITE "last_append[TraceState]")
                                  (("2" (EXPAND "wf_trace?")
                                    (("2" (PROPAX) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|semantic_rel| INDUCTIVE-DECL "bool" |hp_expr| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|TraceState| TYPE-DECL NIL |TraceState_adt| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|wf_trace?| CONST-DECL "bool" |trace_semantics| NIL)
    (|append| DEF-DECL "list[T]" |list_props| NIL)
    (|Trace| TYPE-EQ-DECL NIL |trace_semantics| NIL)
    (|finite_trace?| CONST-DECL "bool" |trace_semantics| NIL)
    (|FiniteTrace| TYPE-EQ-DECL NIL |trace_semantics| NIL)
    (|trace1| SKOLEM-CONST-DECL "FiniteTrace" |trace_semantics| NIL)
    (|trace2| SKOLEM-CONST-DECL "FiniteTrace" |trace_semantics| NIL)
    (|trace_semantic_rel| INDUCTIVE-DECL "bool" |trace_semantics| NIL)
    (|final_env| CONST-DECL "Environment" |trace_semantics| NIL)
    (|last_append| FORMULA-DECL NIL |more_list_props| |structures|)
    (|init_env| CONST-DECL "Environment" |trace_semantics| NIL)
    (|car_append| FORMULA-DECL NIL |more_list_props| |structures|)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length_append| FORMULA-DECL NIL |list_props| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|last| CONST-DECL "T" |more_list_props| |structures|)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|i| SKOLEM-CONST-DECL
     "below(length(append[TraceState](trace1, trace2)) - 1)" |trace_semantics|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|nth_append| FORMULA-DECL NIL |more_list_props| |structures|)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL))
   NIL))
 (|trace_semantics_complete_union| 0
  (|trace_semantics_complete_union-1| |nil| 3889103604
   ("" (SKEEP*)
    (("" (EXPAND "semantic_rel" -3)
      (("" (SPLIT)
        (("1" (INST -2 "envi" "envo")
          (("1" (ASSERT)
            (("1" (SKEEP)
              (("1" (INST 1 "trace")
                (("1" (ASSERT)
                  (("1" (EXPAND "trace_semantic_rel" 1)
                    (("1" (PROPAX) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (EXPAND "trace_semantic_rel" 1)
          (("2" (INST -3 "envi" "envo")
            (("2" (ASSERT)
              (("2" (SKEEP)
                (("2" (INST 1 "trace") (("2" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|semantic_rel| INDUCTIVE-DECL "bool" |hp_expr| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|trace_semantic_rel| INDUCTIVE-DECL "bool" |trace_semantics| NIL)
    (|TraceState| TYPE-DECL NIL |TraceState_adt| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|wf_trace?| CONST-DECL "bool" |trace_semantics| NIL)
    (|Trace| TYPE-EQ-DECL NIL |trace_semantics| NIL)
    (|finite_trace?| CONST-DECL "bool" |trace_semantics| NIL)
    (|FiniteTrace| TYPE-EQ-DECL NIL |trace_semantics| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL))
   SHOSTAK))
 (|trace_semantics_complete_star| 0
  (|trace_semantics_complete_star-1| |nil| 3889783976
   ("" (SKEEP)
    (("" (INDUCT "i")
      (("1" (SKEEP)
        (("1" (EXPAND "semantic_rel_bounded_star")
          (("1" (INST 1 "(:STATE(envi):)")
            (("1" (ASSERT)
              (("1" (REPLACE -1)
                (("1" (SPLIT)
                  (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL)
                   ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)
                   ("3" (EXPAND "trace_semantic_rel" 1)
                    (("3" (FLATTEN) (("3" (ASSERT) NIL NIL)) NIL)) NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL))
            NIL))
          NIL))
        NIL)
       ("2" (SKEEP*)
        (("2" (EXPAND "semantic_rel_bounded_star" -2)
          (("2" (SPLIT -2)
            (("1" (INST 1 "(:STATE(envi):)")
              (("1" (REPLACE -1)
                (("1" (ASSERT)
                  (("1" (SPLIT)
                    (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL)
                     ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)
                     ("3" (EXPAND "trace_semantic_rel" 1)
                      (("3" (ASSERT) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL))
              NIL)
             ("2" (SKEEP)
              (("2" (INST -3 "env" "envo")
                (("2" (ASSERT)
                  (("2" (SKEEP)
                    (("2" (INST -6 "envi" "env")
                      (("2" (ASSERT)
                        (("2" (SKEEP)
                          (("2" (INST 1 "append(trace!1,trace)")
                            (("1" (SPLIT)
                              (("1" (EXPAND "init_env")
                                (("1" (LIFT-IF)
                                  (("1" (SPLIT)
                                    (("1" (FLATTEN)
                                      (("1" (REWRITE "car_append[TraceState]")
                                        (("1" (ASSERT) NIL NIL)
                                         ("2" (TYPEPRED "trace!1")
                                          (("2" (EXPAND "wf_trace?")
                                            (("2" (PROPAX) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (FLATTEN)
                                      (("2" (REWRITE "car_append[TraceState]")
                                        (("1" (ASSERT) NIL NIL)
                                         ("2" (TYPEPRED "trace!1")
                                          (("2" (EXPAND "wf_trace?")
                                            (("2" (PROPAX) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (EXPAND "final_env")
                                (("2" (LIFT-IF)
                                  (("2" (SPLIT)
                                    (("1" (FLATTEN)
                                      (("1" (REWRITE "last_append")
                                        (("1" (ASSERT) NIL NIL)
                                         ("2" (TYPEPRED "trace")
                                          (("2" (EXPAND "wf_trace?")
                                            (("2" (PROPAX) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (FLATTEN)
                                      (("2" (REWRITE "last_append")
                                        (("1" (ASSERT) NIL NIL)
                                         ("2" (TYPEPRED "trace")
                                          (("2" (EXPAND "wf_trace?")
                                            (("2" (PROPAX) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("3" (EXPAND "trace_semantic_rel" 1)
                                (("3" (FLATTEN)
                                  (("3" (EXPAND "trace_semantic_rel" 2)
                                    (("3" (FLATTEN)
                                      (("3" (INST 2 "trace!1" "trace")
                                        (("3" (ASSERT) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (HIDE-ALL-BUT 1)
                              (("2" (TYPEPRED "trace")
                                (("2" (TYPEPRED "trace!1")
                                  (("2" (SPLIT)
                                    (("1" (EXPAND "wf_trace?")
                                      (("1" (FLATTEN)
                                        (("1" (SPLIT)
                                          (("1" (HIDE-ALL-BUT (1 -1 -4))
                                            (("1" (GRIND) NIL NIL)) NIL)
                                           ("2"
                                            (REWRITE "car_append[TraceState]")
                                            NIL NIL)
                                           ("3"
                                            (LEMMA "nth_append[TraceState]")
                                            (("3" (SKEEP)
                                              (("3"
                                                (INST -1 "trace!1" "trace" "i")
                                                (("3" (TYPEPRED "i")
                                                  (("3"
                                                    (REWRITE
                                                     "length_append[TraceState]")
                                                    (("3" (ASSERT)
                                                      (("3"
                                                        (REPLACE -2 :HIDE? T)
                                                        (("3" (LIFT-IF)
                                                          (("3" (SPLIT)
                                                            (("1" (FLATTEN)
                                                              (("1" (ASSERT)
                                                                (("1"
                                                                  (INST -4 "i")
                                                                  (("1"
                                                                    (ASSERT)
                                                                    NIL NIL)
                                                                   ("2"
                                                                    (CASE
                                                                        "i =  length[TraceState](trace!1) - 1")
                                                                    (("1"
                                                                      (REPLACE
                                                                       -1)
                                                                      (("1"
                                                                        (HIDE 1
                                                                         -2)
                                                                        (("1"
                                                                          (EXPAND
                                                                           "finite_trace?")
                                                                          (("1"
                                                                            (CASE
                                                                                "last(trace!1) = nth(trace!1, length[TraceState](trace!1) - 1)")
                                                                            (("1"
                                                                              (REPLACE
                                                                               -1)
                                                                              (("1"
                                                                                (ASSERT)
                                                                                NIL
                                                                                NIL))
                                                                              NIL)
                                                                             ("2"
                                                                              (HIDE-ALL-BUT
                                                                               (1
                                                                                -3))
                                                                              (("2"
                                                                                (GRIND)
                                                                                NIL
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL)
                                                                     ("2"
                                                                      (ASSERT)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL)
                                                             ("2" (FLATTEN)
                                                              (("2" (ASSERT)
                                                                (("2"
                                                                  (INST -6
                                                                   "i - length(trace!1)")
                                                                  (("2"
                                                                    (ASSERT)
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (EXPAND "finite_trace?")
                                      (("2" (REWRITE "last_append[TraceState]")
                                        (("2" (EXPAND "wf_trace?")
                                          (("2" (PROPAX) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (HP TYPE-DECL NIL |HP_adt| NIL)
    (|semantic_rel_bounded_star| DEF-DECL "bool" |bounded_star_semantics| NIL)
    (|star?| ADT-RECOGNIZER-DECL "[HP -> boolean]" |HP_adt| NIL)
    (STAR ADT-CONSTRUCTOR-DECL "[HP -> (star?)]" |HP_adt| NIL)
    (|TraceState| TYPE-DECL NIL |TraceState_adt| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|wf_trace?| CONST-DECL "bool" |trace_semantics| NIL)
    (|Trace| TYPE-EQ-DECL NIL |trace_semantics| NIL)
    (|finite_trace?| CONST-DECL "bool" |trace_semantics| NIL)
    (|FiniteTrace| TYPE-EQ-DECL NIL |trace_semantics| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|init_env| CONST-DECL "Environment" |trace_semantics| NIL)
    (|final_env| CONST-DECL "Environment" |trace_semantics| NIL)
    (|trace_semantic_rel| INDUCTIVE-DECL "bool" |trace_semantics| NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|last| CONST-DECL "T" |more_list_props| |structures|)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|state?| ADT-RECOGNIZER-DECL "[TraceState -> boolean]" |TraceState_adt|
     NIL)
    (STATE ADT-CONSTRUCTOR-DECL "[Environment -> (state?)]" |TraceState_adt|
     NIL)
    (|envi| SKOLEM-CONST-DECL "Environment" |trace_semantics| NIL)
    (|i| SKOLEM-CONST-DECL
     "below(length(append[TraceState](trace!1, trace)) - 1)" |trace_semantics|
     NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|length_append| FORMULA-DECL NIL |list_props| NIL)
    (|nth_append| FORMULA-DECL NIL |more_list_props| |structures|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|car_append| FORMULA-DECL NIL |more_list_props| |structures|)
    (|last_append| FORMULA-DECL NIL |more_list_props| |structures|)
    (|append| DEF-DECL "list[T]" |list_props| NIL)
    (|trace!1| SKOLEM-CONST-DECL "FiniteTrace" |trace_semantics| NIL)
    (|trace| SKOLEM-CONST-DECL "FiniteTrace" |trace_semantics| NIL)
    (|envi| SKOLEM-CONST-DECL "Environment" |trace_semantics| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL))
   SHOSTAK))
 (|trace_semantics_complete| 0
  (|trace_semantics_complete-4| "" 3791650339
   ("" (INDUCT "hp")
    (("1" (SKEEP*)
      (("1" (USE "trace_semantics_complete_assign") (("1" (GRIND) NIL NIL))
        NIL))
      NIL)
     ("2" (USE "trace_semantics_complete_diff") (("2" (GRIND) NIL NIL)) NIL)
     ("3" (USE "trace_semantics_complete_test") (("3" (GRIND) NIL NIL)) NIL)
     ("4" (USE "trace_semantics_complete_seq") NIL NIL)
     ("5" (USE "trace_semantics_complete_union") NIL NIL)
     ("6" (USE "trace_semantics_complete_star")
      (("6" (SKEEP*)
        (("6" (INST -1 "STAR1_var")
          (("6" (SPLIT)
            (("1" (HIDE -2)
              (("1" (USE "semantic_rel_implies_bounded")
                (("1" (ASSERT)
                  (("1" (SKEEP)
                    (("1" (INST -2 "envi" "envo" "i") (("1" (ASSERT) NIL NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (PROPAX) NIL NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("7" (USE "trace_semantics_complete_any")
      (("7" (SKEEP*)
        (("7" (INST -1 "envi" "envo" "ANY1_var") (("7" (ASSERT) NIL NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|trace_semantics_complete_any| FORMULA-DECL NIL |trace_semantics| NIL)
    (|trace_semantics_complete_star| FORMULA-DECL NIL |trace_semantics| NIL)
    (|star?| ADT-RECOGNIZER-DECL "[HP -> boolean]" |HP_adt| NIL)
    (STAR ADT-CONSTRUCTOR-DECL "[HP -> (star?)]" |HP_adt| NIL)
    (|semantic_rel_implies_bounded| FORMULA-DECL NIL |bounded_star_semantics|
     NIL)
    (|trace_semantics_complete_union| FORMULA-DECL NIL |trace_semantics| NIL)
    (|trace_semantics_complete_seq| FORMULA-DECL NIL |trace_semantics| NIL)
    (|trace_semantics_complete_test| FORMULA-DECL NIL |trace_semantics| NIL)
    (|trace_semantics_complete_diff| FORMULA-DECL NIL |trace_semantics| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|ODEs| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|DIFF1_var!1| SKOLEM-CONST-DECL "ODEs" |trace_semantics| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|subrange| TYPE-EQ-DECL NIL |integers| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|minus_u8_u8| APPLICATION-JUDGEMENT "int16" |integertypes| NIL)
    (|minus_i32_u32| APPLICATION-JUDGEMENT "int64" |integertypes| NIL)
    (|minus_i16_u16| APPLICATION-JUDGEMENT "int32" |integertypes| NIL)
    (|odd_minus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|last| CONST-DECL "T" |more_list_props| |structures|)
    (|max_ci| CONST-DECL "{rr: (d) | FORALL (x: (d)): x <= rr}" |more_ci_props|
     |ODEs|)
    (|null_MapExprInj| NAME-JUDGEMENT "MapExprInj" |hp_def| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|dLVar| TYPE-DECL NIL |hp_def| NIL)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|MapExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|mapexpr_inj| CONST-DECL "bool" |hp_def| NIL)
    (|Assigns| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|trace_semantics_complete_assign| FORMULA-DECL NIL |trace_semantics| NIL)
    (|HP_induction| FORMULA-DECL NIL |HP_adt| NIL)
    (|trace_semantic_rel| INDUCTIVE-DECL "bool" |trace_semantics| NIL)
    (|final_env| CONST-DECL "Environment" |trace_semantics| NIL)
    (|init_env| CONST-DECL "Environment" |trace_semantics| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|FiniteTrace| TYPE-EQ-DECL NIL |trace_semantics| NIL)
    (|finite_trace?| CONST-DECL "bool" |trace_semantics| NIL)
    (|Trace| TYPE-EQ-DECL NIL |trace_semantics| NIL)
    (|wf_trace?| CONST-DECL "bool" |trace_semantics| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|TraceState| TYPE-DECL NIL |TraceState_adt| NIL)
    (|semantic_rel| INDUCTIVE-DECL "bool" |hp_expr| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (HP TYPE-DECL NIL |HP_adt| NIL))
   SHOSTAK)
  (|trace_semantics_complete-3| "" 3791309500
   ("" (INDUCT "hp")
    (("1" (SKEEP*)
      (("1" (INST 1 "(: STATE(envi), STATE(envo) :)")
        (("1" (SPLIT)
          (("1" (GRIND) NIL) ("2" (GRIND) NIL) ("3" (GRIND) NIL)
           ("4" (GRIND) NIL) ("5" (GRIND) NIL)
           ("6" (GRIND)
            (("6" (EXPAND "semantic_rel")
              (("6" (EXPAND "trace_semantic_rel")
                (("6" (FLATTEN)
                  (("6" (SPLIT)
                    (("1" (GRIND) NIL) ("2" (GRIND) NIL) ("3" (GRIND) NIL)
                     ("4" (GRIND) NIL) ("5" (GRIND) NIL)))))))))))))
         ("2" (EXPAND "wf_trace?") (("2" (GRIND) NIL)))))))
     ("2" (SKEEP*)
      (("2" (INST 1 "(: STATE(envi), STATE(envo) :)")
        (("1" (SPLIT)
          (("1" (ASSERT) NIL) ("2" (GRIND) NIL) ("3" (GRIND) NIL)
           ("4" (GRIND) NIL) ("5" (GRIND) NIL)
           ("6" (EXPAND "semantic_rel")
            (("6" (EXPAND "trace_semantic_rel")
              (("6" (SPLIT)
                (("1" (ASSERT)
                  (("1" (EXPAND "length")
                    (("1" (EXPAND "length")
                      (("1" (EXPAND "length") (("1" (PROPAX) NIL)))))))))
                 ("2" (FLATTEN)
                  (("2" (SPLIT 1)
                    (("1" (GRIND) NIL) ("2" (GRIND) NIL)
                     ("3" (HIDE 2)
                      (("3" (EXPAND "semantic_rel_diff")
                        (("3" (EXPAND "semantic_rel_diff_trace")
                          (("3" (SKEEP -1)
                            (("3" (SKEEP -1)
                              (("3" (INST 1 "t" "fs")
                                (("1" (SPLIT)
                                  (("1" (INST -2 "t" "envo")
                                    (("1" (EXPAND "nth")
                                      (("1" (EXPAND "nth")
                                        (("1" (PROPAX) NIL)))))))
                                   ("2" (SKEEP 1)
                                    (("2" (INSTEEP -2)
                                      (("2" (TYPEPRED "env")
                                        (("2" (EXPAND "nth")
                                          (("2" (PROPAX) NIL)))))))))))
                                 ("2" (GRIND) NIL)))))))))))))))))))))))))
         ("2" (GRIND) NIL)))))
     ("3" (SKEEP *)
      (("3" (SKEEP*)
        (("3" (EXPAND "semantic_rel")
          (("3" (INST 1 "(: STATE(envi) :)")
            (("1" (SPLIT)
              (("1" (ASSERT) NIL) ("2" (GRIND) NIL) ("3" (GRIND) NIL)
               ("4" (GRIND) NIL) ("5" (FLATTEN) (("5" (GRIND) NIL)))
               ("6" (EXPAND "trace_semantic_rel")
                (("6" (FLATTEN) (("6" (GRIND) NIL)))))))
             ("2" (GRIND) NIL)))))))))
     ("4" (SKEEP*)
      (("4" (EXPAND "semantic_rel" -3)
        (("4" (SKEEP -3)
          (("4" (INST -1 "envi" "env")
            (("4" (INST -2 "env" "envo")
              (("4" (ASSERT)
                (("4" (SKOLEM -1 "trace1")
                  (("4" (SKOLEM -2 "trace2")
                    (("4" (INST 1 "append(trace1, cdr(trace2))")
                      (("1" (FLATTEN)
                        (("1" (SPLIT)
                          (("1" (GRIND) NIL) ("2" (GRIND) NIL)
                           ("3" (CASE "null?(cdr(trace2))")
                            (("1" (LEMMA "append_null_right[TraceState]")
                              (("1" (CASE "cdr(trace2)=null")
                                (("1" (REPLACE -1)
                                  (("1" (INST -2 "trace1")
                                    (("1" (REPLACE -2)
                                      (("1" (PROPAX) NIL)))))))
                                 ("2" (ASSERT) NIL)))))
                             ("2" (REWRITE "last_append[TraceState]")
                              (("2" (REWRITE "last_cdr[TraceState]") NIL)))))
                           ("4" (REWRITE "car_append[TraceState]") NIL)
                           ("5" (CASE "cdr(trace2) = null")
                            (("1" (REPLACE -1)
                              (("1" (REWRITE "append_null_right[TraceState]")
                                (("1" (REPLACE -5)
                                  (("1" (REPLACE -9)
                                    (("1" (REPLACE -10)
                                      (("1" (GRIND) NIL)))))))))))
                             ("2" (REWRITE "last_append[TraceState]")
                              (("2" (REWRITE "last_cdr[TraceState]") NIL)))))
                           ("6" (EXPAND "trace_semantic_rel" 1)
                            (("6" (INST 1 "trace1" "trace2")
                              (("6" (FLATTEN)
                                (("6" (SPLIT)
                                  (("1" (PROPAX) NIL) ("2" (PROPAX) NIL)
                                   ("3" (PROPAX) NIL) ("4" (PROPAX) NIL)
                                   ("5" (REPLACE -4)
                                    (("5" (PROPAX) NIL)))))))))))))))
                       ("2" (TYPEPRED "trace1")
                        (("2" (TYPEPRED "trace2")
                          (("2" (EXPAND "wf_trace?")
                            (("2" (SPLIT)
                              (("1" (GRIND) NIL)
                               ("2" (SKEEP)
                                (("2" (CASE "i < length(trace1)")
                                  (("1" (INST -5 "i")
                                    (("1" (REWRITE "nth_append[TraceState]")
                                      (("1" (GRIND) NIL)))
                                     ("2" (EXPAND "last")
                                      (("2" (REWRITE "nth_append[TraceState]")
                                        (("2" (ASSERT) NIL)))))))
                                   ("2" (INST -2 "i - length(trace1) + 1")
                                    (("1" (REWRITE "nth_append[TraceState]")
                                      (("1" (ASSERT) (("1" (GRIND) NIL)))
                                       ("2" (TYPEPRED "i")
                                        (("2"
                                          (REWRITE "length_append[TraceState]")
                                          (("2" (ASSERT) NIL)))))))
                                     ("2" (TYPEPRED "i")
                                      (("2"
                                        (REWRITE "length_append[TraceState]")
                                        (("2" (ASSERT)
                                          (("2" (EXPAND "length" 1 2)
                                            (("2" (ASSERT)
                                              NIL)))))))))))))))))))))))))))))))))))))))))
     ("5" (SKEEP)
      (("5" (SKEEP*)
        (("5" (EXPAND "semantic_rel" -3)
          (("5" (SPLIT -3)
            (("1" (INST -2 "envi" "envo")
              (("1" (ASSERT)
                (("1" (SKEEP -2)
                  (("1" (INST 2 "trace")
                    (("1" (SPLIT)
                      (("1" (PROPAX) NIL) ("2" (PROPAX) NIL) ("3" (PROPAX) NIL)
                       ("4" (PROPAX) NIL) ("5" (PROPAX) NIL)
                       ("6" (EXPAND "trace_semantic_rel" 1)
                        (("6" (FLATTEN) NIL)))))))))))))
             ("2" (INST -3 "envi" "envo")
              (("2" (ASSERT)
                (("2" (SKEEP -3)
                  (("2" (INST 2 "trace")
                    (("2" (SPLIT)
                      (("1" (PROPAX) NIL) ("2" (PROPAX) NIL) ("3" (PROPAX) NIL)
                       ("4" (PROPAX) NIL) ("5" (PROPAX) NIL)
                       ("6" (EXPAND "trace_semantic_rel" 1)
                        (("6" (FLATTEN) NIL)))))))))))))))))))))
     ("6" (SKEEP*)
      (("6" (EXPAND "semantic_rel" -2)
        (("6" (SPLIT)
          (("1" (INST 1 "(: STATE(envi) :)")
            (("1" (SPLIT)
              (("1" (GRIND) NIL) ("2" (GRIND) NIL) ("3" (GRIND) NIL)
               ("4" (GRIND) NIL) ("5" (GRIND) NIL)
               ("6" (EXPAND "trace_semantic_rel" 1)
                (("6" (FLATTEN) (("6" (GRIND) NIL)))))))
             ("2" (GRIND) NIL)))
           ("2" (SKIP) NIL)))))))
     ("7" (SKEEP*)
      (("7" (EXPAND "semantic_rel" -1)
        (("7" (FLATTEN)
          (("7" (INST 1 "(: STATE(envi), STATE(envo) :)")
            (("1" (SKEEP -1)
              (("1" (SPLIT)
                (("1" (GRIND) NIL) ("2" (GRIND) NIL) ("3" (GRIND) NIL)
                 ("4" (GRIND) NIL) ("5" (GRIND) NIL)
                 ("6" (EXPAND "trace_semantic_rel")
                  (("6" (SPLIT)
                    (("1" (GRIND) NIL) ("2" (GRIND) NIL) ("3" (GRIND) NIL)
                     ("4" (INST 1 "r")
                      (("4" (SPLIT) (("1" (GRIND) NIL) ("2" (GRIND) NIL)))))
                     ("5" (SKEEP 1)
                      (("5" (INST -3 "i") (("5" (GRIND) NIL)))))))))))))
             ("2" (EXPAND "wf_trace?")
              (("2" (SKEEP)
                (("2" (TYPEPRED "i") (("2" (GRIND) NIL))))))))))))))))
    NIL)
   NIL NIL)
  (|trace_semantics_complete-2| "" 3791309348
   ("" (INDUCT "hp")
    (("1" (SKEEP*)
      (("1" (INST 1 "(: STATE(envi), STATE(envo) :)")
        (("1" (SPLIT)
          (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL)
           ("4" (GRIND) NIL NIL) ("5" (GRIND) NIL NIL)
           ("6" (GRIND)
            (("6" (EXPAND "semantic_rel")
              (("6" (EXPAND "trace_semantic_rel")
                (("6" (FLATTEN)
                  (("6" (SPLIT)
                    (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)
                     ("3" (GRIND) NIL NIL) ("4" (GRIND) NIL NIL)
                     ("5" (GRIND) NIL NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (EXPAND "wf_trace?") (("2" (GRIND) NIL NIL)) NIL))
        NIL))
      NIL)
     ("2" (SKEEP*)
      (("2" (INST 1 "(: STATE(envi), STATE(envo) :)")
        (("1" (SPLIT)
          (("1" (ASSERT) NIL NIL) ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL)
           ("4" (GRIND) NIL NIL) ("5" (GRIND) NIL NIL)
           ("6" (EXPAND "semantic_rel")
            (("6" (EXPAND "trace_semantic_rel")
              (("6" (SPLIT)
                (("1" (ASSERT)
                  (("1" (EXPAND "length")
                    (("1" (EXPAND "length")
                      (("1" (EXPAND "length") (("1" (PROPAX) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (FLATTEN)
                  (("2" (SPLIT 1)
                    (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)
                     ("3" (HIDE 2)
                      (("3" (EXPAND "semantic_rel_diff")
                        (("3" (EXPAND "semantic_rel_diff_trace")
                          (("3" (SKEEP -1)
                            (("3" (SKEEP -1)
                              (("3" (INST 1 "t" "fs")
                                (("1" (SPLIT)
                                  (("1" (INST -2 "t" "envo")
                                    (("1" (EXPAND "nth")
                                      (("1" (EXPAND "nth")
                                        (("1" (PROPAX) NIL NIL)) NIL))
                                      NIL))
                                    NIL)
                                   ("2" (SKEEP 1)
                                    (("2" (INSTEEP -2)
                                      (("2" (TYPEPRED "env")
                                        (("2" (EXPAND "nth")
                                          (("2" (PROPAX) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (GRIND) NIL NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (GRIND) NIL NIL))
        NIL))
      NIL)
     ("3" (SKEEP *)
      (("3" (SKEEP*)
        (("3" (EXPAND "semantic_rel")
          (("3" (INST 1 "(: STATE(envi) :)")
            (("1" (SPLIT)
              (("1" (ASSERT) NIL NIL) ("2" (GRIND) NIL NIL)
               ("3" (GRIND) NIL NIL) ("4" (GRIND) NIL NIL)
               ("5" (FLATTEN) (("5" (GRIND) NIL NIL)) NIL)
               ("6" (EXPAND "trace_semantic_rel")
                (("6" (FLATTEN) (("6" (GRIND) NIL NIL)) NIL)) NIL))
              NIL)
             ("2" (GRIND) NIL NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("4" (SKEEP*)
      (("4" (EXPAND "semantic_rel" -3)
        (("4" (SKEEP -3)
          (("4" (INST -1 "envi" "env")
            (("4" (INST -2 "env" "envo")
              (("4" (ASSERT)
                (("4" (SKOLEM -1 "trace1")
                  (("4" (SKOLEM -2 "trace2")
                    (("4" (INST 1 "append(trace1, cdr(trace2))")
                      (("1" (FLATTEN)
                        (("1" (SPLIT)
                          (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)
                           ("3" (CASE "null?(cdr(trace2))")
                            (("1" (LEMMA "append_null_right[TraceState]")
                              (("1" (CASE "cdr(trace2)=null")
                                (("1" (REPLACE -1)
                                  (("1" (INST -2 "trace1")
                                    (("1" (REPLACE -2) (("1" (PROPAX) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (ASSERT) NIL NIL))
                                NIL))
                              NIL)
                             ("2" (REWRITE "last_append[TraceState]")
                              (("2" (REWRITE "last_cdr[TraceState]") NIL NIL))
                              NIL))
                            NIL)
                           ("4" (REWRITE "car_append[TraceState]") NIL NIL)
                           ("5" (CASE "cdr(trace2) = null")
                            (("1" (REPLACE -1)
                              (("1" (REWRITE "append_null_right[TraceState]")
                                (("1" (REPLACE -5)
                                  (("1" (REPLACE -9)
                                    (("1" (REPLACE -10) (("1" (GRIND) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (REWRITE "last_append[TraceState]")
                              (("2" (REWRITE "last_cdr[TraceState]") NIL NIL))
                              NIL))
                            NIL)
                           ("6" (EXPAND "trace_semantic_rel" 1)
                            (("6" (INST 1 "trace1" "trace2")
                              (("6" (FLATTEN)
                                (("6" (SPLIT)
                                  (("1" (PROPAX) NIL NIL)
                                   ("2" (PROPAX) NIL NIL)
                                   ("3" (PROPAX) NIL NIL)
                                   ("4" (PROPAX) NIL NIL)
                                   ("5" (REPLACE -4) (("5" (PROPAX) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (TYPEPRED "trace1")
                        (("2" (TYPEPRED "trace2")
                          (("2" (EXPAND "wf_trace?")
                            (("2" (SPLIT)
                              (("1" (GRIND) NIL NIL)
                               ("2" (SKEEP)
                                (("2" (CASE "i < length(trace1)")
                                  (("1" (INST -5 "i")
                                    (("1" (REWRITE "nth_append[TraceState]")
                                      (("1" (GRIND) NIL NIL)) NIL)
                                     ("2" (EXPAND "last")
                                      (("2" (REWRITE "nth_append[TraceState]")
                                        (("2" (ASSERT) NIL NIL)) NIL))
                                      NIL))
                                    NIL)
                                   ("2" (INST -2 "i - length(trace1) + 1")
                                    (("1" (REWRITE "nth_append[TraceState]")
                                      (("1" (ASSERT) (("1" (GRIND) NIL NIL))
                                        NIL)
                                       ("2" (TYPEPRED "i")
                                        (("2"
                                          (REWRITE "length_append[TraceState]")
                                          (("2" (ASSERT) NIL NIL)) NIL))
                                        NIL))
                                      NIL)
                                     ("2" (TYPEPRED "i")
                                      (("2"
                                        (REWRITE "length_append[TraceState]")
                                        (("2" (ASSERT)
                                          (("2" (EXPAND "length" 1 2)
                                            (("2" (ASSERT) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("5" (SKEEP)
      (("5" (SKEEP*)
        (("5" (EXPAND "semantic_rel" -3)
          (("5" (SPLIT -3)
            (("1" (INST -2 "envi" "envo")
              (("1" (ASSERT)
                (("1" (SKEEP -2)
                  (("1" (INST 2 "trace")
                    (("1" (SPLIT)
                      (("1" (PROPAX) NIL NIL) ("2" (PROPAX) NIL NIL)
                       ("3" (PROPAX) NIL NIL) ("4" (PROPAX) NIL NIL)
                       ("5" (PROPAX) NIL NIL)
                       ("6" (EXPAND "trace_semantic_rel" 1)
                        (("6" (FLATTEN) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (INST -3 "envi" "envo")
              (("2" (ASSERT)
                (("2" (SKEEP -3)
                  (("2" (INST 2 "trace")
                    (("2" (SPLIT)
                      (("1" (PROPAX) NIL NIL) ("2" (PROPAX) NIL NIL)
                       ("3" (PROPAX) NIL NIL) ("4" (PROPAX) NIL NIL)
                       ("5" (PROPAX) NIL NIL)
                       ("6" (EXPAND "trace_semantic_rel" 1)
                        (("6" (FLATTEN) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("6" (SKEEP*)
      (("6" (CASE "envi=envo")
        (("1" (INST 1 "(: STATE(envi) :)")
          (("1" (HIDE -2)
            (("1" (SPLIT)
              (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)
               ("3" (ASSERT) (("3" (GRIND) NIL NIL)) NIL)
               ("4" (ASSERT) NIL NIL) ("5" (GRIND) NIL NIL)
               ("6" (EXPAND "trace_semantic_rel")
                (("6" (FLATTEN) (("6" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL)
           ("2" (GRIND) NIL NIL))
          NIL)
         ("2" (USE "star_gen_seq_io")
          (("1" (ASSERT)
            (("1" (SKEEP -1)
              (("1" (USE "trace_semantics_complete_gen_seq")
                (("1" (SPLIT -1)
                  (("1" (INST -1 "envi" "envo" "i")
                    (("1" (ASSERT)
                      (("1" (SKEEP)
                        (("1" (INSTEEP 3)
                          (("1" (ASSERT)
                            (("1" (USE "star_gen_seq_trace")
                              (("1" (ASSERT) (("1" (INST 1 "i") NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (PROPAX) NIL NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (ASSERT) NIL NIL))
          NIL))
        NIL))
      NIL)
     ("7" (SKEEP*)
      (("7" (EXPAND "semantic_rel" -1)
        (("7" (FLATTEN)
          (("7" (INST 1 "(: STATE(envi), STATE(envo) :)")
            (("1" (SKEEP -1)
              (("1" (SPLIT)
                (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)
                 ("3" (GRIND) NIL NIL) ("4" (GRIND) NIL NIL)
                 ("5" (GRIND) NIL NIL)
                 ("6" (EXPAND "trace_semantic_rel")
                  (("6" (SPLIT)
                    (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)
                     ("3" (GRIND) NIL NIL)
                     ("4" (INST 1 "r")
                      (("4" (SPLIT)
                        (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL))
                      NIL)
                     ("5" (SKEEP 1)
                      (("5" (INST -3 "i") (("5" (GRIND) NIL NIL)) NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (EXPAND "wf_trace?")
              (("2" (SKEEP) (("2" (TYPEPRED "i") (("2" (GRIND) NIL NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((HP TYPE-DECL NIL |HP_adt| NIL)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|semantic_rel| INDUCTIVE-DECL "bool" |hp_expr| NIL)
    (|TraceState| TYPE-DECL NIL |TraceState_adt| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|state?| ADT-RECOGNIZER-DECL "[TraceState -> boolean]" |TraceState_adt|
     NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|last| CONST-DECL "T" |more_list_props| |structures|)
    (|state| ADT-ACCESSOR-DECL "[(state?) -> Environment]" |TraceState_adt|
     NIL)
    (|HP_induction| FORMULA-DECL NIL |HP_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (STATE ADT-CONSTRUCTOR-DECL "[Environment -> (state?)]" |TraceState_adt|
     NIL)
    (|null_is_MapExprInj| NAME-JUDGEMENT "MapExprInj" |hp_def| NIL)
    (|semantic_rel_diff| CONST-DECL "bool" |hp_expr| NIL)
    (|solution_odes?| CONST-DECL "bool" |hp_expr| NIL)
    (|ODEs| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|mapexpr_inj| CONST-DECL "bool" |hp_def| NIL)
    (|MapExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|env_at_t?| CONST-DECL "bool" |hp_expr| NIL)
    (|nth_append| FORMULA-DECL NIL |more_list_props| |structures|)
    (|car_append| FORMULA-DECL NIL |more_list_props| |structures|)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|append_null_right| FORMULA-DECL NIL |more_list_props| |structures|)
    (|last_cdr| FORMULA-DECL NIL |more_list_props| |structures|)
    (|last_append| FORMULA-DECL NIL |more_list_props| |structures|)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|))
   SHOSTAK)
  (|trace_semantics_complete-1| |nil| 3791034133
   ("" (INDUCT "hp")
    (("1" (SKEEP*)
      (("1" (INST 1 "(: STATE(envi), STATE(envo) :)")
        (("1" (SPLIT)
          (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL)
           ("4" (GRIND) NIL NIL) ("5" (GRIND) NIL NIL)
           ("6" (GRIND)
            (("6" (EXPAND "semantic_rel")
              (("6" (EXPAND "trace_semantic_rel")
                (("6" (FLATTEN)
                  (("6" (SPLIT)
                    (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)
                     ("3" (GRIND) NIL NIL) ("4" (GRIND) NIL NIL)
                     ("5" (GRIND) NIL NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (EXPAND "wf_trace?") (("2" (GRIND) NIL NIL)) NIL))
        NIL))
      NIL)
     ("2" (SKEEP*)
      (("2" (INST 1 "(: STATE(envi), STATE(envo) :)")
        (("1" (SPLIT)
          (("1" (ASSERT) NIL NIL) ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL)
           ("4" (GRIND) NIL NIL) ("5" (GRIND) NIL NIL)
           ("6" (EXPAND "semantic_rel")
            (("6" (EXPAND "trace_semantic_rel")
              (("6" (SPLIT)
                (("1" (ASSERT)
                  (("1" (EXPAND "length")
                    (("1" (EXPAND "length")
                      (("1" (EXPAND "length") (("1" (PROPAX) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (FLATTEN)
                  (("2" (SPLIT 1)
                    (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)
                     ("3" (HIDE 2)
                      (("3" (EXPAND "semantic_rel_diff")
                        (("3" (EXPAND "semantic_rel_diff_trace")
                          (("3" (SKEEP -1)
                            (("3" (SKEEP -1)
                              (("3" (INST 1 "t" "fs")
                                (("1" (SPLIT)
                                  (("1" (INST -2 "t" "envo")
                                    (("1" (EXPAND "nth")
                                      (("1" (EXPAND "nth")
                                        (("1" (PROPAX) NIL NIL)) NIL))
                                      NIL))
                                    NIL)
                                   ("2" (SKEEP 1)
                                    (("2" (INSTEEP -2)
                                      (("2" (TYPEPRED "env")
                                        (("2" (EXPAND "nth")
                                          (("2" (PROPAX) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (GRIND) NIL NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (GRIND) NIL NIL))
        NIL))
      NIL)
     ("3" (SKEEP *)
      (("3" (SKEEP*)
        (("3" (EXPAND "semantic_rel")
          (("3" (INST 1 "(: STATE(envi) :)")
            (("1" (SPLIT)
              (("1" (ASSERT) NIL NIL) ("2" (GRIND) NIL NIL)
               ("3" (GRIND) NIL NIL) ("4" (GRIND) NIL NIL)
               ("5" (FLATTEN) (("5" (GRIND) NIL NIL)) NIL)
               ("6" (EXPAND "trace_semantic_rel")
                (("6" (FLATTEN) (("6" (GRIND) NIL NIL)) NIL)) NIL))
              NIL)
             ("2" (GRIND) NIL NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("4" (SKEEP*)
      (("4" (EXPAND "semantic_rel" -3)
        (("4" (SKEEP -3)
          (("4" (INST -1 "envi" "env")
            (("4" (INST -2 "env" "envo")
              (("4" (ASSERT)
                (("4" (SKOLEM -1 "trace1")
                  (("4" (SKOLEM -2 "trace2")
                    (("4" (INST 1 "append(trace1, cdr(trace2))")
                      (("1" (FLATTEN)
                        (("1" (SPLIT)
                          (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)
                           ("3" (CASE "null?(cdr(trace2))")
                            (("1" (LEMMA "append_null_right[TraceState]")
                              (("1" (CASE "cdr(trace2)=null")
                                (("1" (REPLACE -1)
                                  (("1" (INST -2 "trace1")
                                    (("1" (REPLACE -2) (("1" (PROPAX) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (ASSERT) NIL NIL))
                                NIL))
                              NIL)
                             ("2" (REWRITE "last_append[TraceState]")
                              (("2" (REWRITE "last_cdr[TraceState]") NIL NIL))
                              NIL))
                            NIL)
                           ("4" (REWRITE "car_append[TraceState]") NIL NIL)
                           ("5" (CASE "cdr(trace2) = null")
                            (("1" (REPLACE -1)
                              (("1" (REWRITE "append_null_right[TraceState]")
                                (("1" (REPLACE -5)
                                  (("1" (REPLACE -9)
                                    (("1" (REPLACE -10) (("1" (GRIND) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (REWRITE "last_append[TraceState]")
                              (("2" (REWRITE "last_cdr[TraceState]") NIL NIL))
                              NIL))
                            NIL)
                           ("6" (EXPAND "trace_semantic_rel" 1)
                            (("6" (INST 1 "trace1" "trace2")
                              (("6" (FLATTEN)
                                (("6" (SPLIT)
                                  (("1" (PROPAX) NIL NIL)
                                   ("2" (PROPAX) NIL NIL)
                                   ("3" (PROPAX) NIL NIL)
                                   ("4" (PROPAX) NIL NIL)
                                   ("5" (REPLACE -4) (("5" (PROPAX) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (TYPEPRED "trace1")
                        (("2" (TYPEPRED "trace2")
                          (("2" (EXPAND "wf_trace?")
                            (("2" (SPLIT)
                              (("1" (GRIND) NIL NIL)
                               ("2" (SKEEP)
                                (("2" (CASE "i < length(trace1)")
                                  (("1" (INST -5 "i")
                                    (("1" (REWRITE "nth_append[TraceState]")
                                      (("1" (GRIND) NIL NIL)) NIL)
                                     ("2" (EXPAND "last")
                                      (("2" (REWRITE "nth_append[TraceState]")
                                        (("2" (ASSERT) NIL NIL)) NIL))
                                      NIL))
                                    NIL)
                                   ("2" (INST -2 "i - length(trace1) + 1")
                                    (("1" (REWRITE "nth_append[TraceState]")
                                      (("1" (ASSERT) (("1" (GRIND) NIL NIL))
                                        NIL)
                                       ("2" (TYPEPRED "i")
                                        (("2"
                                          (REWRITE "length_append[TraceState]")
                                          (("2" (ASSERT) NIL NIL)) NIL))
                                        NIL))
                                      NIL)
                                     ("2" (TYPEPRED "i")
                                      (("2"
                                        (REWRITE "length_append[TraceState]")
                                        (("2" (ASSERT)
                                          (("2" (EXPAND "length" 1 2)
                                            (("2" (ASSERT) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("5" (SKEEP)
      (("5" (SKEEP*)
        (("5" (EXPAND "semantic_rel" -3)
          (("5" (SPLIT -3)
            (("1" (INST -2 "envi" "envo")
              (("1" (ASSERT)
                (("1" (SKEEP -2)
                  (("1" (INST 2 "trace")
                    (("1" (SPLIT)
                      (("1" (PROPAX) NIL NIL) ("2" (PROPAX) NIL NIL)
                       ("3" (PROPAX) NIL NIL) ("4" (PROPAX) NIL NIL)
                       ("5" (PROPAX) NIL NIL)
                       ("6" (EXPAND "trace_semantic_rel" 1)
                        (("6" (FLATTEN) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (INST -3 "envi" "envo")
              (("2" (ASSERT)
                (("2" (SKEEP -3)
                  (("2" (INST 2 "trace")
                    (("2" (SPLIT)
                      (("1" (PROPAX) NIL NIL) ("2" (PROPAX) NIL NIL)
                       ("3" (PROPAX) NIL NIL) ("4" (PROPAX) NIL NIL)
                       ("5" (PROPAX) NIL NIL)
                       ("6" (EXPAND "trace_semantic_rel" 1)
                        (("6" (FLATTEN) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("6" (SKEEP*)
      (("6" (EXPAND "semantic_rel" -2)
        (("6" (SPLIT)
          (("1" (INST 1 "(: STATE(envi) :)")
            (("1" (SPLIT)
              (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)
               ("3" (GRIND) NIL NIL) ("4" (GRIND) NIL NIL)
               ("5" (GRIND) NIL NIL)
               ("6" (EXPAND "trace_semantic_rel" 1)
                (("6" (FLATTEN) (("6" (GRIND) NIL NIL)) NIL)) NIL))
              NIL)
             ("2" (GRIND) NIL NIL))
            NIL)
           ("2" (SKEEP)
            (("2" (INST -3 "envi" "envo")
              (("2" (EXPAND "semantic_rel" -2)
                (("2" (SPLIT -2)
                  (("1" (REPLACE -1)
                    (("1" (ASSERT)
                      (("1" (SKEEP)
                        (("1" (INST 2 "trace")
                          (("1" (SPLIT)
                            (("1" (PROPAX) NIL NIL) ("2" (PROPAX) NIL NIL)
                             ("3" (PROPAX) NIL NIL) ("4" (PROPAX) NIL NIL)
                             ("5" (PROPAX) NIL NIL)
                             ("6" (EXPAND "trace_semantic_rel" 1)
                              (("6" (FLATTEN) (("6" (POSTPONE) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (POSTPONE) NIL NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("7" (SKEEP*)
      (("7" (EXPAND "semantic_rel" -1)
        (("7" (FLATTEN)
          (("7" (INST 1 "(: STATE(envi), STATE(envo) :)")
            (("1" (SKEEP -1)
              (("1" (SPLIT)
                (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)
                 ("3" (GRIND) NIL NIL) ("4" (GRIND) NIL NIL)
                 ("5" (GRIND) NIL NIL)
                 ("6" (EXPAND "trace_semantic_rel")
                  (("6" (SPLIT)
                    (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)
                     ("3" (GRIND) NIL NIL)
                     ("4" (INST 1 "r")
                      (("4" (SPLIT)
                        (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL))
                      NIL)
                     ("5" (SKEEP 1)
                      (("5" (INST -3 "i") (("5" (GRIND) NIL NIL)) NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (EXPAND "wf_trace?")
              (("2" (SKEEP) (("2" (TYPEPRED "i") (("2" (GRIND) NIL NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK)))

