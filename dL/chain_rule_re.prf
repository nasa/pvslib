(|chain_rule_re|
 (|env_2_vec_TCC1| 0
  (|env_2_vec_TCC1-1| |nil| 3798369964 ("" (SUBTYPE-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|))
   NIL
   (|env_2_vec| SUBTYPE "(: chain_rule_re.env(0) :)"
    "VectorN((number_fields.+)(1, chain_rule_re.k))")))
 (|env_2_vec_TCC2| 0
  (|env_2_vec_TCC2-1| |nil| 3798369964 ("" (SUBTYPE-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL))
   NIL (|env_2_vec| SUBTYPE "(number_fields.-)(chain_rule_re.k, 1)" "nat")))
 (|env_2_vec_TCC3| 0
  (|env_2_vec_TCC3-1| |nil| 3798369964 ("" (TERMINATION-TCC) NIL NIL) NIL NIL
   (|env_2_vec| TERMINATION
    "chain_rule_re.env_2_vec((number_fields.-)(chain_rule_re.k, 1), chain_rule_re.shift_d(chain_rule_re.env))"
    "NIL")))
 (|env_2_vec_TCC4| 0
  (|env_2_vec_TCC4-1| |nil| 3798369964
   ("" (SKEEP) (("" (EXPAND "length" 2 1) (("" (ASSERT) NIL NIL)) NIL)) NIL)
   ((|length| DEF-DECL "nat" |list_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic|
     |mv_analysis|))
   NIL
   (|env_2_vec| SUBTYPE
    "list_adt[real].cons(chain_rule_re.env(0), chain_rule_re.env_2_vec((number_fields.-)(chain_rule_re.k, 1), chain_rule_re.shift_d(chain_rule_re.env)))"
    "VectorN((number_fields.+)(1, chain_rule_re.k))")))
 (|env_2_vec_nth_TCC1| 0
  (|env_2_vec_nth_TCC1-1| |nil| 3798369964 ("" (SUBTYPE-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic|
     |mv_analysis|)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL))
   NIL
   (|env_2_vec_nth| SUBTYPE "chain_rule_re.i"
    "below[length[real](env_2_vec(k, env))]")))
 (|env_2_vec_nth| 0
  (|env_2_vec_nth-1| |nil| 3798369995
   ("" (INDUCT "k")
    (("1" (SKEEP) (("1" (TYPEPRED "i") (("1" (GRIND) NIL NIL)) NIL)) NIL)
     ("2" (SKEEP)
      (("2" (SKEEP)
        (("2" (CASE "i=0")
          (("1" (REPLACE -1)
            (("1" (EXPAND "nth" 1)
              (("1" (EXPAND "env_2_vec") (("1" (PROPAX) NIL NIL)) NIL)) NIL))
            NIL)
           ("2" (EXPAND "env_2_vec" 2 1)
            (("2" (EXPAND "nth" 2 1)
              (("2" (ASSERT)
                (("2" (INST -1 "shift_d(env)" "i-1")
                  (("2" (EXPAND "shift_d" -1 2) (("2" (PROPAX) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("3" (HIDE 2)
      (("3" (SKEEP) (("3" (TYPEPRED "i") (("3" (ASSERT) NIL NIL)) NIL)) NIL))
      NIL))
    NIL)
   ((|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|shift_d| CONST-DECL "Environment" |chain_rule_re| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic|
     |mv_analysis|)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|env_2_vec| DEF-DECL "VectorN(k + 1)" |chain_rule_re| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL))
   SHOSTAK))
 (|projv_dd| 0
  (|projv_dd-1| |nil| 3852126491
   ("" (SKEEP)
    (("" (TYPEPRED "P")
      (("" (LEMMA "dd_norm_equiv[1+k]")
        (("" (INST -1 "projv(k,P)")
          (("" (ASSERT)
            (("" (HIDE 2)
              (("" (INST 1 "norm_inf(1+k)")
                (("" (EXPAND "ddl_dom?" -1)
                  (("" (EXPAND "deriv_domain?")
                    (("" (SKEEP)
                      (("" (TYPEPRED "p")
                        (("" (HIDE -1)
                          (("" (EXPAND "projv" -2)
                            (("" (SKEEP)
                              (("" (INST -4 "0")
                                (("" (EXPAND "not_one_element?")
                                  (("" (EXPAND "not_one_element?")
                                    (("" (INST -4 "car(p)")
                                      (("1" (SKEEP)
                                        (("1" (TYPEPRED "y")
                                          (("1" (CASE "car(p) > y")
                                            (("1"
                                              (INST 1
                                               "-min(e!1,car(p)-y)/2*e(1+k,0)")
                                              (("1" (LEMMA "norm_inf_e_scal")
                                                (("1" (INST?)
                                                  (("1" (ASSERT)
                                                    (("1" (REPLACE -1)
                                                      (("1"
                                                        (HIDE -1 -3 -4 -5 -6)
                                                        (("1" (GRIND) NIL NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (SPLIT 1)
                                                (("1"
                                                  (TYPEPRED
                                                   "-min(e!1, car[real](p) - y) / 2 * e(1 + k, 0)"
                                                   "e(1 + k, 0)")
                                                  (("1" (REPLACE -4)
                                                    (("1" (PROPAX) NIL NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (ASSERT)
                                                  (("2"
                                                    (CASE
                                                        " -min(e!1, car[real](p) - y) / 2 * e(1 + k, 0) = zero_vec(1 + k)")
                                                    (("1"
                                                      (EXPAND "zero_vec" -1)
                                                      (("1" (EXPAND "*" -1)
                                                        (("1" (EXPAND "e" -1)
                                                          (("1"
                                                            (EXPAND "scal" -1)
                                                            (("1"
                                                              (DECOMPOSE-EQUALITY
                                                               -1)
                                                              (("1"
                                                                (HIDE -2 -3 -4)
                                                                (("1" (GRIND)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL)
                                                     ("2" (ASSERT) NIL NIL))
                                                    NIL))
                                                  NIL)
                                                 ("3" (EXPAND "projv" 1)
                                                  (("3"
                                                    (INST 1
                                                     "LAMBDA(i:nat): IF i=0 THEN car(p) + -min(e!1, car[real](p) - y) / 2 ELSE env(i) ENDIF")
                                                    (("1"
                                                      (LEMMA "env_2_vec_nth")
                                                      (("1"
                                                        (LEMMA
                                                         "list_extensionality[real]")
                                                        (("1" (INST?)
                                                          (("1" (ASSERT)
                                                            (("1" (HIDE 2)
                                                              (("1" (SPLIT 1)
                                                                (("1"
                                                                  (TYPEPRED
                                                                   "p + -min(e!1, car[real](p) - y) / 2 * e(1 + k, 0)"
                                                                   "p"
                                                                   "e(1+k,0)")
                                                                  (("1"
                                                                    (HIDE -1)
                                                                    (("1"
                                                                      (EXPAND
                                                                       "max" -)
                                                                      (("1"
                                                                        (ASSERT)
                                                                        NIL
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL)
                                                                 ("2" (SKEEP)
                                                                  (("2"
                                                                    (TYPEPRED
                                                                     "n")
                                                                    (("2"
                                                                      (CASE
                                                                          "n=0")
                                                                      (("1"
                                                                        (REPLACE
                                                                         -1)
                                                                        (("1"
                                                                          (EXPAND
                                                                           "nth"
                                                                           1)
                                                                          (("1"
                                                                            (EXPAND
                                                                             "env_2_vec")
                                                                            (("1"
                                                                              (EXPAND
                                                                               "env_2_vec")
                                                                              (("1"
                                                                                (EXPAND
                                                                                 "env_2_vec")
                                                                                (("1"
                                                                                  (ASSERT)
                                                                                  (("1"
                                                                                    (GRIND)
                                                                                    NIL
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL)
                                                                       ("2"
                                                                        (INST
                                                                         -2 "k"
                                                                         "LAMBDA (i: nat): IF i = 0 THEN car(p) + -min(e!1, car[real](p) - y) / 2 ELSE env(i) ENDIF"
                                                                         "n")
                                                                        (("2"
                                                                          (REPLACE
                                                                           -2)
                                                                          (("2"
                                                                            (ASSERT)
                                                                            (("2"
                                                                              (CASE
                                                                                  "nth(p + -min(e!1, car[real](p) - y) / 2 * e(1 + k, 0), n) = nth(p,n)")
                                                                              (("1"
                                                                                (REPLACE
                                                                                 -1)
                                                                                (("1"
                                                                                  (ASSERT)
                                                                                  (("1"
                                                                                    (LEMMA
                                                                                     "env_2_vec_nth")
                                                                                    (("1"
                                                                                      (INST
                                                                                       -1
                                                                                       "k"
                                                                                       "env"
                                                                                       "n")
                                                                                      (("1"
                                                                                        (REPLACE
                                                                                         -1
                                                                                         2
                                                                                         RL)
                                                                                        (("1"
                                                                                          (REPLACE
                                                                                           -8
                                                                                           -1)
                                                                                          (("1"
                                                                                            (ASSERT)
                                                                                            NIL
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL)
                                                                               ("2"
                                                                                (ASSERT)
                                                                                (("2"
                                                                                  (LEMMA
                                                                                   "nth_sum")
                                                                                  (("2"
                                                                                    (INST?)
                                                                                    (("2"
                                                                                      (ASSERT)
                                                                                      (("2"
                                                                                        (INST
                                                                                         -1
                                                                                         "n")
                                                                                        (("2"
                                                                                          (REPLACE
                                                                                           -1)
                                                                                          (("2"
                                                                                            (LEMMA
                                                                                             "nth_dist")
                                                                                            (("2"
                                                                                              (LEMMA
                                                                                               "nth_e")
                                                                                              (("2"
                                                                                                (INST
                                                                                                 -1
                                                                                                 "1+k"
                                                                                                 "0"
                                                                                                 "n")
                                                                                                (("2"
                                                                                                  (ASSERT)
                                                                                                  (("2"
                                                                                                    (INST
                                                                                                     -2
                                                                                                     "e(1+k,0)"
                                                                                                     "-min(e!1, car[real](p) - y) / 2"
                                                                                                     "n")
                                                                                                    (("2"
                                                                                                      (REPLACE
                                                                                                       -2)
                                                                                                      (("2"
                                                                                                        (ASSERT)
                                                                                                        NIL
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL)
                                                     ("2" (ASSERT)
                                                      (("2"
                                                        (EXPAND "connected?"
                                                                -5)
                                                        (("2"
                                                          (EXPAND "proj" -2)
                                                          (("2" (SKEEP)
                                                            (("2"
                                                              (INST -5 "env"
                                                               "env!1"
                                                               "LAMBDA (i: nat): IF i = 0 THEN car[real](p) + -min(e!1, car[real](p) - y) / 2 ELSE env(i) ENDIF")
                                                              (("2"
                                                                (EXPAND
                                                                 "between?" 1)
                                                                (("2" (HIDE 2)
                                                                  (("2" (SKEEP)
                                                                    (("2"
                                                                      (CASE
                                                                          "i_1=0")
                                                                      (("1"
                                                                        (ASSERT)
                                                                        (("1"
                                                                          (REPLACE
                                                                           -1)
                                                                          (("1"
                                                                            (SPLIT
                                                                             1)
                                                                            (("1"
                                                                              (LEMMA
                                                                               "env_2_vec_nth")
                                                                              (("1"
                                                                                (INST
                                                                                 -1
                                                                                 "k"
                                                                                 "env"
                                                                                 "0")
                                                                                (("1"
                                                                                  (ASSERT)
                                                                                  NIL
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL)
                                                                             ("2"
                                                                              (ASSERT)
                                                                              (("2"
                                                                                (TYPEPRED
                                                                                 "e!1")
                                                                                (("2"
                                                                                  (REPLACE
                                                                                   -5
                                                                                   1)
                                                                                  (("2"
                                                                                    (CASE
                                                                                        "env(0) = car[real](p)")
                                                                                    (("1"
                                                                                      (REPLACE
                                                                                       -1)
                                                                                      (("1"
                                                                                        (GRIND)
                                                                                        NIL
                                                                                        NIL))
                                                                                      NIL)
                                                                                     ("2"
                                                                                      (ASSERT)
                                                                                      (("2"
                                                                                        (LEMMA
                                                                                         "env_2_vec_nth")
                                                                                        (("2"
                                                                                          (INST
                                                                                           -1
                                                                                           "k"
                                                                                           "env"
                                                                                           "0")
                                                                                          (("2"
                                                                                            (ASSERT)
                                                                                            (("2"
                                                                                              (REPLACE
                                                                                               -8
                                                                                               -1)
                                                                                              (("2"
                                                                                                (EXPAND
                                                                                                 "nth"
                                                                                                 -1)
                                                                                                (("2"
                                                                                                  (ASSERT)
                                                                                                  NIL
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL)
                                                                       ("2"
                                                                        (ASSERT)
                                                                        NIL
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2" (CASE "car(p) < y")
                                              (("1" (HIDE 1)
                                                (("1"
                                                  (INST 1
                                                   "min(e!1,y-car(p))/2*e(1+k,0)")
                                                  (("1"
                                                    (LEMMA "norm_inf_e_scal")
                                                    (("1" (INST?)
                                                      (("1" (ASSERT)
                                                        (("1" (REPLACE -1)
                                                          (("1"
                                                            (HIDE -1 -3 -4 -5
                                                             -6)
                                                            (("1" (GRIND) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (SPLIT 1)
                                                    (("1"
                                                      (TYPEPRED
                                                       "min(e!1, y - car[real](p)) / 2 * e(1 + k, 0)"
                                                       "e(1 + k, 0)")
                                                      (("1" (REPLACE -4)
                                                        (("1" (PROPAX) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL)
                                                     ("2" (ASSERT)
                                                      (("2"
                                                        (CASE
                                                            " min(e!1, y - car[real](p)) / 2 * e(1 + k, 0) = zero_vec(1 + k)")
                                                        (("1"
                                                          (EXPAND "zero_vec"
                                                                  -1)
                                                          (("1" (EXPAND "*" -1)
                                                            (("1"
                                                              (EXPAND "e" -1)
                                                              (("1"
                                                                (EXPAND "scal"
                                                                        -1)
                                                                (("1"
                                                                  (DECOMPOSE-EQUALITY
                                                                   -1)
                                                                  (("1"
                                                                    (HIDE -2 -3
                                                                     -4)
                                                                    (("1"
                                                                      (GRIND)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL)
                                                         ("2" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL)
                                                     ("3" (EXPAND "projv" 1)
                                                      (("3"
                                                        (INST 1
                                                         "LAMBDA(i:nat): IF i=0 THEN car(p) + min(e!1, y - car[real](p)) / 2 ELSE env(i) ENDIF")
                                                        (("1"
                                                          (LEMMA
                                                           "env_2_vec_nth")
                                                          (("1"
                                                            (LEMMA
                                                             "list_extensionality[real]")
                                                            (("1" (INST?)
                                                              (("1" (ASSERT)
                                                                (("1" (HIDE 2)
                                                                  (("1"
                                                                    (SPLIT 1)
                                                                    (("1"
                                                                      (HIDE -1)
                                                                      (("1"
                                                                        (TYPEPRED
                                                                         "p + min(e!1, y - car[real](p)) / 2 * e(1 + k, 0)"
                                                                         "p"
                                                                         "e(1+k,0)")
                                                                        (("1"
                                                                          (HIDE
                                                                           -1)
                                                                          (("1"
                                                                            (EXPAND
                                                                             "max"
                                                                             -)
                                                                            (("1"
                                                                              (ASSERT)
                                                                              NIL
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL)
                                                                     ("2"
                                                                      (SKEEP)
                                                                      (("2"
                                                                        (TYPEPRED
                                                                         "n")
                                                                        (("2"
                                                                          (CASE
                                                                              "n=0")
                                                                          (("1"
                                                                            (REPLACE
                                                                             -1)
                                                                            (("1"
                                                                              (EXPAND
                                                                               "nth"
                                                                               1)
                                                                              (("1"
                                                                                (EXPAND
                                                                                 "env_2_vec")
                                                                                (("1"
                                                                                  (EXPAND
                                                                                   "env_2_vec")
                                                                                  (("1"
                                                                                    (EXPAND
                                                                                     "env_2_vec")
                                                                                    (("1"
                                                                                      (ASSERT)
                                                                                      (("1"
                                                                                        (GRIND)
                                                                                        NIL
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL)
                                                                           ("2"
                                                                            (INST
                                                                             -2
                                                                             "k"
                                                                             "LAMBDA (i: nat): IF i = 0 THEN car(p) + min(e!1, y - car[real](p)) / 2 ELSE env(i) ENDIF"
                                                                             "n")
                                                                            (("2"
                                                                              (REPLACE
                                                                               -2)
                                                                              (("2"
                                                                                (ASSERT)
                                                                                (("2"
                                                                                  (CASE
                                                                                      "nth(p + min(e!1, y - car[real](p)) / 2 * e(1 + k, 0), n) = nth(p,n)")
                                                                                  (("1"
                                                                                    (REPLACE
                                                                                     -1)
                                                                                    (("1"
                                                                                      (ASSERT)
                                                                                      (("1"
                                                                                        (LEMMA
                                                                                         "env_2_vec_nth")
                                                                                        (("1"
                                                                                          (INST
                                                                                           -1
                                                                                           "k"
                                                                                           "env"
                                                                                           "n")
                                                                                          (("1"
                                                                                            (REPLACE
                                                                                             -1
                                                                                             2
                                                                                             RL)
                                                                                            (("1"
                                                                                              (REPLACE
                                                                                               -8
                                                                                               -1)
                                                                                              (("1"
                                                                                                (ASSERT)
                                                                                                NIL
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL)
                                                                                   ("2"
                                                                                    (ASSERT)
                                                                                    (("2"
                                                                                      (LEMMA
                                                                                       "nth_sum")
                                                                                      (("2"
                                                                                        (INST?)
                                                                                        (("2"
                                                                                          (ASSERT)
                                                                                          (("2"
                                                                                            (INST
                                                                                             -1
                                                                                             "n")
                                                                                            (("2"
                                                                                              (REPLACE
                                                                                               -1)
                                                                                              (("2"
                                                                                                (LEMMA
                                                                                                 "nth_dist")
                                                                                                (("2"
                                                                                                  (LEMMA
                                                                                                   "nth_e")
                                                                                                  (("2"
                                                                                                    (INST
                                                                                                     -1
                                                                                                     "1+k"
                                                                                                     "0"
                                                                                                     "n")
                                                                                                    (("2"
                                                                                                      (ASSERT)
                                                                                                      (("2"
                                                                                                        (INST
                                                                                                         -2
                                                                                                         "e(1+k,0)"
                                                                                                         " min(e!1, y - car[real](p)) / 2 "
                                                                                                         "n")
                                                                                                        (("2"
                                                                                                          (REPLACE
                                                                                                           -2)
                                                                                                          (("2"
                                                                                                            (ASSERT)
                                                                                                            NIL
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL)
                                                         ("2" (ASSERT)
                                                          (("2"
                                                            (EXPAND
                                                             "connected?" -5)
                                                            (("2"
                                                              (EXPAND "proj"
                                                                      -2)
                                                              (("2" (SKEEP)
                                                                (("2"
                                                                  (INST -5
                                                                   "env"
                                                                   "env!1"
                                                                   "LAMBDA (i: nat): IF i = 0 THEN car[real](p) + min(e!1, y - car[real](p)) / 2 ELSE env(i) ENDIF")
                                                                  (("2"
                                                                    (EXPAND
                                                                     "between?"
                                                                     1)
                                                                    (("2"
                                                                      (HIDE 2)
                                                                      (("2"
                                                                        (SKEEP)
                                                                        (("2"
                                                                          (CASE
                                                                              "i_1=0")
                                                                          (("1"
                                                                            (ASSERT)
                                                                            (("1"
                                                                              (REPLACE
                                                                               -1)
                                                                              (("1"
                                                                                (SPLIT
                                                                                 1)
                                                                                (("1"
                                                                                  (LEMMA
                                                                                   "env_2_vec_nth")
                                                                                  (("1"
                                                                                    (INST
                                                                                     -1
                                                                                     "k"
                                                                                     "env"
                                                                                     "0")
                                                                                    (("1"
                                                                                      (ASSERT)
                                                                                      (("1"
                                                                                        (GRIND)
                                                                                        NIL
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL)
                                                                                 ("2"
                                                                                  (GRIND)
                                                                                  NIL
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL)
                                                                           ("2"
                                                                            (ASSERT)
                                                                            NIL
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (ASSERT) NIL NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (EXPAND "proj" 1)
                                        (("2" (INST 1 "env")
                                          (("2" (LEMMA "env_2_vec_nth")
                                            (("2" (INST -1 "k" "env" "0")
                                              (("2" (REPLACE -3 -1)
                                                (("2" (EXPAND "nth" -1)
                                                  (("2" (REPLACE -1)
                                                    (("2" (PROPAX) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|ddl_dom?| CONST-DECL "bool" |differentiation| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|domain| TYPE-EQ-DECL NIL |domain_vec2real_def| |mv_analysis|)
    (|projv| CONST-DECL "bool" |chain_rule_re| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic|
     |mv_analysis|)
    (|not_one_element?| CONST-DECL "bool" |differentiation| NIL)
    (|p| SKOLEM-CONST-DECL "(projv(k, P))" |chain_rule_re| NIL)
    (|k| SKOLEM-CONST-DECL "nat" |chain_rule_re| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (P SKOLEM-CONST-DECL "(ddl_dom?)" |chain_rule_re| NIL)
    (|proj| CONST-DECL "bool" |differentiation| NIL)
    (|env!1| SKOLEM-CONST-DECL "(P)" |chain_rule_re| NIL)
    (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (+ CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices| |matrices|)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|zero_vec| DEF-DECL "VectorN(m)" |vector_arithmetic| |mv_analysis|)
    (|e| DEF-DECL "VectorN(m)" |vector_arithmetic| |mv_analysis|)
    (< CONST-DECL "bool" |reals| NIL)
    (|y| SKOLEM-CONST-DECL "(proj(0)(P))" |chain_rule_re| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|e!1| SKOLEM-CONST-DECL "posreal" |chain_rule_re| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (* CONST-DECL "VectorN(length(v2))" |matrices| |matrices|)
    (|Vector| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types|
     NIL)
    (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|norm_inf_e_scal| FORMULA-DECL NIL |norms| |mv_analysis|)
    (|between?| CONST-DECL "bool" |differentiation| NIL)
    (|env!1| SKOLEM-CONST-DECL "(P)" |chain_rule_re| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|env_2_vec_nth| FORMULA-DECL NIL |chain_rule_re| NIL)
    (|env_2_vec| DEF-DECL "VectorN(k + 1)" |chain_rule_re| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|add| DEF-DECL "VectorN(max(length(v1), length(v2)))" |matrices|
     |matrices|)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nth_sum| FORMULA-DECL NIL |vector_arithmetic| |mv_analysis|)
    (|nth_e| FORMULA-DECL NIL |vector_arithmetic| |mv_analysis|)
    (|nth_dist| FORMULA-DECL NIL |vector_arithmetic| |mv_analysis|)
    (|list_extensionality| FORMULA-DECL NIL |more_list_props| |structures|)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|env| SKOLEM-CONST-DECL "(P)" |chain_rule_re| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|connected?| CONST-DECL "bool" |differentiation| NIL)
    (|scal| DEF-DECL "VectorN(length(v2))" |matrices| |matrices|)
    (|not_one_element?| CONST-DECL "bool" |deriv_domain_def| |analysis|)
    (|deriv_domain?| CONST-DECL "bool" |derivative_domain_multi| |mv_analysis|)
    (|norm_inf| CONST-DECL "(norm?(m))" |norms| |mv_analysis|)
    (|norm?| CONST-DECL "bool" |norms| |mv_analysis|)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|dd_norm_equiv| FORMULA-DECL NIL |derivative_domain_multi| |mv_analysis|)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL))
   SHOSTAK))
 (|proj_projv_TCC1| 0
  (|proj_projv_TCC1-1| |nil| 3806834657 ("" (SUBTYPE-TCC) NIL NIL)
   ((|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|proj| CONST-DECL "bool" |differentiation| NIL))
   NIL
   (|proj_projv| SUBTYPE "chain_rule_re.i"
    "{ii: naturalnumbers.nat | reals.<(ii, (number_fields.+)(1, chain_rule_re.k))}")))
 (|proj_projv_TCC2| 0
  (|proj_projv_TCC2-1| |nil| 3806834657
   ("" (SKEEP*)
    (("" (TYPEPRED "p + c * e(1 + k, i)" "p" "c*e(1+k,i)" "e(1+k,i)")
      (("" (HIDE -1 -3 -6 -8)
        (("" (REPLACE -2)
          (("" (REPLACE -4)
            (("" (REPLACE -5) (("" (EXPAND "max") (("" (PROPAX) NIL NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|Vector| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (+ CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices| |matrices|)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|projv| CONST-DECL "bool" |chain_rule_re| NIL)
    (|connected?| CONST-DECL "bool" |differentiation| NIL)
    (* CONST-DECL "VectorN(length(v2))" |matrices| |matrices|)
    (< CONST-DECL "bool" |reals| NIL)
    (|e| DEF-DECL "VectorN(m)" |vector_arithmetic| |mv_analysis|)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic|
     |mv_analysis|))
   NIL
   (|proj_projv| SUBTYPE
    "(matrices.+)(chain_rule_re.p, matrices.*(chain_rule_re.c, vector_arithmetic.e((number_fields.+)(1, chain_rule_re.k), chain_rule_re.i)))"
    "VectorN((number_fields.+)(1, chain_rule_re.k))")))
 (|proj_projv| 0
  (|proj_projv-1| |nil| 3806834751
   ("" (SKEEP*)
    (("" (EXPAND "projv" 1 1)
      (("" (EXPAND "proj" -1 1)
        (("" (SKEEP)
          (("" (TYPEPRED "p")
            (("" (EXPAND "projv" -3)
              (("" (SKEEP)
                (("" (TYPEPRED "P")
                  (("" (HIDE -2)
                    (("" (EXPAND "connected?" -1)
                      ((""
                        (INST 1
                         "LAMBDA(x:nat): IF x=i THEN env(i) ELSE env!1(x) ENDIF")
                        (("1" (ASSERT)
                          (("1" (LEMMA "env_2_vec_nth")
                            (("1" (LEMMA "list_extensionality[real]")
                              (("1"
                                (INST -1 "env_2_vec(k,
                        LAMBDA (x: nat): IF x = i THEN env(i) ELSE env!1(x) ENDIF)"
                                 " p + c * e(1 + k, i)")
                                (("1" (ASSERT)
                                  (("1" (SPLIT 1)
                                    (("1" (ASSERT)
                                      (("1"
                                        (TYPEPRED "env_2_vec(k,
                                   LAMBDA (x: nat):
                                     IF x = i THEN env(i) ELSE env!1(x) ENDIF)")
                                        (("1" (HIDE -1)
                                          (("1" (REPLACE -1)
                                            (("1" (HIDE -1)
                                              (("1"
                                                (TYPEPRED "p + c * e(1 + k, i)"
                                                 "p" "c*e(1+k,i)" "e(1+k,i)")
                                                (("1" (HIDE -1 -3 -6 -8)
                                                  (("1" (REPLACE -2)
                                                    (("1" (REPLACE -4)
                                                      (("1" (REPLACE -5)
                                                        (("1" (EXPAND "max")
                                                          (("1" (ASSERT) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (SKEEP)
                                      (("2"
                                        (INST -1 "k" "LAMBDA (x: nat):
                                  IF x = i THEN env(i) ELSE env!1(x) ENDIF"
                                         "n")
                                        (("2" (REPLACE -1 1)
                                          (("2" (ASSERT)
                                            (("2" (CASE "n=i")
                                              (("1" (ASSERT)
                                                (("1" (LEMMA "nth_sum")
                                                  (("1" (INST?)
                                                    (("1" (ASSERT)
                                                      (("1" (INST -1 "n")
                                                        (("1" (REPLACE -1 1)
                                                          (("1"
                                                            (LEMMA "nth_dist")
                                                            (("1" (INST?)
                                                              (("1"
                                                                (REPLACE -1 1)
                                                                (("1" (ASSERT)
                                                                  (("1"
                                                                    (LEMMA
                                                                     "nth_e")
                                                                    (("1"
                                                                      (INST?)
                                                                      (("1"
                                                                        (ASSERT)
                                                                        NIL
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (ASSERT)
                                                (("2" (LEMMA "env_2_vec_nth")
                                                  (("2"
                                                    (LEMMA
                                                     "list_extensionality[real]")
                                                    (("2"
                                                      (INST -1
                                                       "env_2_vec(k,env!1)"
                                                       "p")
                                                      (("2" (FLATTEN)
                                                        (("2" (HIDE -2)
                                                          (("2" (SPLIT -1)
                                                            (("1" (FLATTEN)
                                                              (("1"
                                                                (INST -2 "n")
                                                                (("1"
                                                                  (INST -3 "k"
                                                                   "env!1" "n")
                                                                  (("1"
                                                                    (LEMMA
                                                                     "nth_dist")
                                                                    (("1"
                                                                      (LEMMA
                                                                       "nth_e")
                                                                      (("1"
                                                                        (LEMMA
                                                                         "nth_sum")
                                                                        (("1"
                                                                          (INST?)
                                                                          (("1"
                                                                            (ASSERT)
                                                                            (("1"
                                                                              (INST
                                                                               -1
                                                                               "n")
                                                                              (("1"
                                                                                (REPLACE
                                                                                 -1)
                                                                                (("1"
                                                                                  (INST
                                                                                   -2
                                                                                   "1+k"
                                                                                   "i"
                                                                                   "n")
                                                                                  (("1"
                                                                                    (ASSERT)
                                                                                    (("1"
                                                                                      (INST
                                                                                       -3
                                                                                       "e(1+k,i)"
                                                                                       "c"
                                                                                       "n")
                                                                                      (("1"
                                                                                        (REPLACE
                                                                                         -3)
                                                                                        (("1"
                                                                                          (ASSERT)
                                                                                          NIL
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL)
                                                             ("2" (PROPAX) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (TYPEPRED "P")
                          (("2" (EXPAND "connected?")
                            (("2"
                              (INST -1 "env!1" "env"
                               "(LAMBDA (x: nat): IF x = i THEN env(i) ELSE env!1(x) ENDIF)")
                              (("2" (HIDE -1)
                                (("2" (EXPAND "between?" 1)
                                  (("2" (SKEEP)
                                    (("2" (CASE "i_1=i")
                                      (("1" (ASSERT) NIL NIL)
                                       ("2" (ASSERT) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|projv| CONST-DECL "bool" |chain_rule_re| NIL)
    (|between?| CONST-DECL "bool" |differentiation| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|list_extensionality| FORMULA-DECL NIL |more_list_props| |structures|)
    (|nth_sum| FORMULA-DECL NIL |vector_arithmetic| |mv_analysis|)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|nth_e| FORMULA-DECL NIL |vector_arithmetic| |mv_analysis|)
    (|nth_dist| FORMULA-DECL NIL |vector_arithmetic| |mv_analysis|)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|e| DEF-DECL "VectorN(m)" |vector_arithmetic| |mv_analysis|)
    (* CONST-DECL "VectorN(length(v2))" |matrices| |matrices|)
    (+ CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices| |matrices|)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|Vector| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|env_2_vec| DEF-DECL "VectorN(k + 1)" |chain_rule_re| NIL)
    (|env_2_vec_nth| FORMULA-DECL NIL |chain_rule_re| NIL)
    (P SKOLEM-CONST-DECL "(connected?)" |chain_rule_re| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|k| SKOLEM-CONST-DECL "nat" |chain_rule_re| NIL)
    (|p| SKOLEM-CONST-DECL "(projv(k, P))" |chain_rule_re| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|i| SKOLEM-CONST-DECL "below(length(p))" |chain_rule_re| NIL)
    (|env| SKOLEM-CONST-DECL "(P)" |chain_rule_re| NIL)
    (|env!1| SKOLEM-CONST-DECL "(P)" |chain_rule_re| NIL)
    (|connected?| CONST-DECL "bool" |differentiation| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|proj| CONST-DECL "bool" |differentiation| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic|
     |mv_analysis|))
   SHOSTAK))
 (|projv_proj_TCC1| 0
  (|projv_proj_TCC1-1| |nil| 3806854900 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|projv_proj| SUBTYPE "chain_rule_re.i"
    "{ii: naturalnumbers.nat | reals.<(ii, (number_fields.+)(1, chain_rule_re.k))}")))
 (|projv_proj_TCC2| 0
  (|projv_proj_TCC2-1| |nil| 3806854900
   ("" (SKEEP)
    (("" (TYPEPRED "p+c*e(1+k,i)" "p" "c*e(1+k,i)" "e(1+k,i)")
      (("" (HIDE -1 -3 -5 -7)
        (("" (REPLACE -1)
          (("" (REPLACE -2)
            (("" (REPLACE -3)
              (("" (REPLACE -4)
                (("" (EXPAND "max") (("" (PROPAX) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|Vector| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (+ CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices| |matrices|)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (* CONST-DECL "VectorN(length(v2))" |matrices| |matrices|)
    (< CONST-DECL "bool" |reals| NIL)
    (|e| DEF-DECL "VectorN(m)" |vector_arithmetic| |mv_analysis|)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic|
     |mv_analysis|))
   NIL
   (|projv_proj| SUBTYPE
    "(matrices.+)(chain_rule_re.p, matrices.*(chain_rule_re.c, vector_arithmetic.e((number_fields.+)(1, chain_rule_re.k), chain_rule_re.i)))"
    "VectorN((number_fields.+)(1, chain_rule_re.k))")))
 (|projv_proj| 0
  (|projv_proj-1| |nil| 3806860048
   ("" (SKEEP)
    (("" (EXPAND "proj")
      (("" (EXPAND "projv" -1)
        (("" (SKEEP)
          (("" (INST 1 "env")
            (("" (ASSERT)
              (("" (LEMMA "list_extensionality[real]")
                (("" (INST?)
                  (("" (FLATTEN)
                    (("" (HIDE -2)
                      (("" (SPLIT -1)
                        (("1" (FLATTEN)
                          (("1" (INST -2 "i")
                            (("1" (LEMMA "env_2_vec_nth")
                              (("1" (INST?)
                                (("1" (ASSERT)
                                  (("1"
                                    (CASE
                                        "nth(p, i) + c = nth(p + c * e(1 + k, i), i)")
                                    (("1" (ASSERT) NIL NIL)
                                     ("2" (LEMMA "nth_sum")
                                      (("2" (INST?)
                                        (("2" (LEMMA "nth_dist")
                                          (("2" (ASSERT)
                                            (("2" (INST -2 "i")
                                              (("2" (INST?)
                                                (("2" (REPLACE -1)
                                                  (("2" (REPLACE -2)
                                                    (("2" (LEMMA "nth_e")
                                                      (("2" (INST?)
                                                        (("2" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (PROPAX) NIL NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|proj| CONST-DECL "bool" |differentiation| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|env_2_vec| DEF-DECL "VectorN(k + 1)" |chain_rule_re| NIL)
    (|Vector| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (+ CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices| |matrices|)
    (* CONST-DECL "VectorN(length(v2))" |matrices| |matrices|)
    (< CONST-DECL "bool" |reals| NIL)
    (|e| DEF-DECL "VectorN(m)" |vector_arithmetic| |mv_analysis|)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|env_2_vec_nth| FORMULA-DECL NIL |chain_rule_re| NIL)
    (|nth_sum| FORMULA-DECL NIL |vector_arithmetic| |mv_analysis|)
    (|nth_dist| FORMULA-DECL NIL |vector_arithmetic| |mv_analysis|)
    (|nth_e| FORMULA-DECL NIL |vector_arithmetic| |mv_analysis|)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|list_extensionality| FORMULA-DECL NIL |more_list_props| |structures|)
    (|connected?| CONST-DECL "bool" |differentiation| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|projv| CONST-DECL "bool" |chain_rule_re| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic|
     |mv_analysis|))
   SHOSTAK))
 (|ddl_dom_dom_dir| 0
  (|ddl_dom_dom_dir-1| |nil| 3806919719
   ("" (SKEEP*)
    (("" (EXPAND "deriv_domain_partial?" 1 1)
      (("" (SKEEP)
        (("" (TYPEPRED "P")
          (("" (TYPEPRED "p")
            (("" (HIDE -1)
              (("" (EXPAND "projv" -2)
                (("" (SKEEP)
                  (("" (EXPAND "ddl_dom?" -3)
                    (("" (FLATTEN)
                      (("" (EXPAND "not_one_element?")
                        (("" (EXPAND "not_one_element?")
                          (("" (INST -4 "nth(p,i)")
                            (("1" (SKEEP)
                              (("1" (TYPEPRED "y")
                                (("1" (EXPAND "proj" -1)
                                  (("1" (SKEEP)
                                    (("1" (CASE "nth(p,i) = env(i)")
                                      (("1" (CASE " y > nth(p,i)")
                                        (("1" (INST 2 "min(y-nth(p,i),e_1)/2")
                                          (("1" (GRIND) NIL NIL)
                                           ("2" (SPLIT 1)
                                            (("1" (GRIND) NIL NIL)
                                             ("2" (LEMMA "proj_projv")
                                              (("2" (HIDE 2)
                                                (("2"
                                                  (INST -1 "k" "P" "p"
                                                   "min(y - nth[real](p, i), e_1) / 2"
                                                   "i")
                                                  (("2" (ASSERT)
                                                    (("2"
                                                      (LEMMA "connection_proj")
                                                      (("2"
                                                        (INST -1 "P" "i"
                                                         "nth(p,i)" "y")
                                                        (("1" (ASSERT)
                                                          (("1"
                                                            (INST -1
                                                             "nth(p, i) + min(y - nth[real](p, i), e_1) / 2")
                                                            (("1" (ASSERT)
                                                              (("1"
                                                                (CASE
                                                                    "0 < min(y - nth[real](p, i), e_1) / 2")
                                                                (("1" (ASSERT)
                                                                  NIL NIL)
                                                                 ("2"
                                                                  (HIDE-ALL-BUT
                                                                   1)
                                                                  (("2" (GRIND)
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL)
                                                         ("2" (EXPAND "proj" 1)
                                                          (("2" (INST 1 "env")
                                                            (("2" (ASSERT) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (CASE " y < nth(p,i)")
                                          (("1" (HIDE 1)
                                            (("1"
                                              (INST 2 "-min(nth(p,i)-y,e_1)/2")
                                              (("1" (GRIND) NIL NIL)
                                               ("2" (SPLIT 1)
                                                (("1" (GRIND) NIL NIL)
                                                 ("2" (LEMMA "proj_projv")
                                                  (("2" (HIDE 2)
                                                    (("2"
                                                      (INST -1 "k" "P" "p"
                                                       "-min(nth(p,i)-y,e_1)/2"
                                                       "i")
                                                      (("2" (ASSERT)
                                                        (("2"
                                                          (LEMMA
                                                           "connection_proj")
                                                          (("2"
                                                            (INST -1 "P" "i"
                                                             "y" "nth(p,i)")
                                                            (("1" (ASSERT)
                                                              (("1"
                                                                (INST -1
                                                                 "nth(p, i) + -min(nth(p,i)-y,e_1)/2")
                                                                (("1" (ASSERT)
                                                                  (("1"
                                                                    (CASE
                                                                        "0 > -min(nth(p,i)-y,e_1)/2")
                                                                    (("1"
                                                                      (ASSERT)
                                                                      NIL NIL)
                                                                     ("2"
                                                                      (HIDE-ALL-BUT
                                                                       1)
                                                                      (("2"
                                                                        (GRIND)
                                                                        NIL
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL)
                                                             ("2"
                                                              (EXPAND "proj" 1)
                                                              (("2"
                                                                (INST 1 "env")
                                                                (("2" (ASSERT)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("2" (ASSERT) NIL NIL))
                                          NIL))
                                        NIL)
                                       ("2" (LEMMA "env_2_vec_nth")
                                        (("2" (INST?) (("2" (ASSERT) NIL NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (EXPAND "proj" 1)
                              (("2" (INST 1 "env")
                                (("2" (LEMMA "env_2_vec_nth")
                                  (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|deriv_domain_partial?| CONST-DECL "bool" |derivative_domain_multi|
     |mv_analysis|)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|ddl_dom?| CONST-DECL "bool" |differentiation| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|not_one_element?| CONST-DECL "bool" |deriv_domain_def| |analysis|)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL)
    (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types|
     NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|e| DEF-DECL "VectorN(m)" |vector_arithmetic| |mv_analysis|)
    (* CONST-DECL "VectorN(length(v2))" |matrices| |matrices|)
    (+ CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices| |matrices|)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|Vector| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|e_1| SKOLEM-CONST-DECL "posreal" |chain_rule_re| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|y| SKOLEM-CONST-DECL "(proj(i)(P))" |chain_rule_re| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|connected?| CONST-DECL "bool" |differentiation| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|proj_projv| FORMULA-DECL NIL |chain_rule_re| NIL)
    (|connection_proj| FORMULA-DECL NIL |differentiation| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|env_2_vec_nth| FORMULA-DECL NIL |chain_rule_re| NIL)
    (|proj| CONST-DECL "bool" |differentiation| NIL)
    (|k| SKOLEM-CONST-DECL "nat" |chain_rule_re| NIL)
    (|i| SKOLEM-CONST-DECL "below(1 + k)" |chain_rule_re| NIL)
    (P SKOLEM-CONST-DECL "(ddl_dom?(i))" |chain_rule_re| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|p| SKOLEM-CONST-DECL "(projv(k, P))" |chain_rule_re| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|not_one_element?| CONST-DECL "bool" |differentiation| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|projv| CONST-DECL "bool" |chain_rule_re| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic|
     |mv_analysis|)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL))
   NIL))
 (|dd_e_partial| 0
  (|dd_e_partial-1| |nil| 3853849475
   ("" (SKEEP)
    (("" (EXPAND "deriv_domain_e_partial?")
      (("" (TYPEPRED "D")
        (("" (SKEEP)
          (("" (CASE "NOT i=0")
            (("1" (TYPEPRED "i") (("1" (ASSERT) NIL NIL)) NIL)
             ("2" (REPLACE -1)
              (("2" (EXPAND "lift_rd" 1)
                (("2" (EXPAND "deriv_domain_partial?")
                  (("2" (SKEEP)
                    (("2" (TYPEPRED "e_1" "p")
                      (("2" (HIDE -3)
                        (("2" (EXPAND "dd?" -6)
                          (("2" (SPLIT -6)
                            (("1" (SKEEP)
                              (("1" (TYPEPRED "b")
                                (("1" (CASE "car(p)=b")
                                  (("1" (INST 1 "-min(b/2,e_1)/2")
                                    (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)
                                     ("2" (ASSERT)
                                      (("2" (EXPAND "+" 1)
                                        (("2" (EXPAND "add" 1)
                                          (("2" (EXPAND "*" 1)
                                            (("2" (EXPAND "scal" 1)
                                              (("2" (DECOMPOSE-EQUALITY -4)
                                                (("2" (INST?)
                                                  (("2" (ASSERT)
                                                    (("2" (REPLACE -1)
                                                      (("2" (HIDE -1)
                                                        (("2" (GRIND) NIL NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (ASSERT)
                                    (("2" (INST 2 "min(b-car(p),e_1)/2")
                                      (("1" (ASSERT) (("1" (GRIND) NIL NIL))
                                        NIL)
                                       ("2" (SPLIT 1)
                                        (("1" (GRIND) NIL NIL)
                                         ("2" (REPLACE -3 1)
                                          (("2" (GRIND) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (ASSERT)
                              (("2" (INST 1 "e_1/2")
                                (("1" (GRIND) NIL NIL)
                                 ("2" (REPLACE -1)
                                  (("2" (EXPAND "hp" 1) (("2" (GRIND) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|deriv_domain_e_partial?| CONST-DECL "bool" |derivative_domain_multi|
     |mv_analysis|)
    (|deriv_domain_partial?| CONST-DECL "bool" |derivative_domain_multi|
     |mv_analysis|)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|hp| CONST-DECL "bool" |interval_def| |ODEs|)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|add| DEF-DECL "VectorN(max(length(v1), length(v2)))" |matrices|
     |matrices|)
    (|scal| DEF-DECL "VectorN(length(v2))" |matrices| |matrices|)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|zero_vec| DEF-DECL "VectorN(m)" |vector_arithmetic| |mv_analysis|)
    (|closed_interval?| CONST-DECL "bool" |interval_def| |ODEs|)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|nonzero_abs_is_pos| APPLICATION-JUDGEMENT "{y: posreal | y >= x}"
     |real_defs| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|closed_interval| CONST-DECL "(closed_interval?(a, b))" |interval_def|
     |ODEs|)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (D SKOLEM-CONST-DECL "(dd?)" |chain_rule_re| NIL)
    (|Vector| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (+ CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices| |matrices|)
    (|p| SKOLEM-CONST-DECL "(LAMBDA (x: VectorN(1)): D(car(x)))"
     |chain_rule_re| NIL)
    (* CONST-DECL "VectorN(length(v2))" |matrices| |matrices|)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL)
    (|b| SKOLEM-CONST-DECL "posreal" |chain_rule_re| NIL)
    (|e_1| SKOLEM-CONST-DECL "posreal" |chain_rule_re| NIL)
    (|e| DEF-DECL "VectorN(m)" |vector_arithmetic| |mv_analysis|)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types|
     NIL)
    (|posreal_min| APPLICATION-JUDGEMENT "{z: posreal | z <= x AND z <= y}"
     |real_defs| NIL)
    (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic|
     |mv_analysis|)
    (|lift_rd| CONST-DECL "domain[1]" |lift_real_fun_def| |mv_analysis|)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|dd?| CONST-DECL "bool" |hp_expr| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL))
 (|vec_2_env_TCC1| 0
  (|vec_2_env_TCC1-1| |nil| 3798372614
   ("" (SKEEP) (("" (TYPEPRED "v") (("" (ASSERT) NIL NIL)) NIL)) NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic|
     |mv_analysis|))
   NIL (|vec_2_env| SUBTYPE "chain_rule_re.i" "below[length[real](v)]")))
 (|vec_2_env_id| 0
  (|vec_2_env_id-1| |nil| 3798373574
   ("" (INDUCT "k")
    (("1" (SKEEP)
      (("1" (EXPAND "env_2_vec" 1 1)
        (("1" (DECOMPOSE-EQUALITY 1)
          (("1" (CASE "x!1=0") (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("2" (SKEEP)
      (("2" (SKEEP)
        (("2" (DECOMPOSE-EQUALITY 1)
          (("2" (EXPAND "vec_2_env" 1 1)
            (("2" (CASE "x!1<2+j")
              (("1" (ASSERT)
                (("1" (LEMMA "env_2_vec_nth")
                  (("1" (INST -1 "1+j" "env" "x!1") NIL NIL)) NIL))
                NIL)
               ("2" (ASSERT) NIL NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|env_2_vec_nth| FORMULA-DECL NIL |chain_rule_re| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic|
     |mv_analysis|)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|env_2_vec| DEF-DECL "VectorN(k + 1)" |chain_rule_re| NIL)
    (|vec_2_env| CONST-DECL "Environment" |chain_rule_re| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   NIL))
 (|env_2_vec_id| 0
  (|env_2_vec_id-1| |nil| 3801826188
   ("" (INDUCT "k")
    (("1" (SKEEP)
      (("1" (GRIND)
        (("1" (TYPEPRED "v") (("1" (DECOMPOSE-EQUALITY 1) NIL NIL)) NIL)) NIL))
      NIL)
     ("2" (SKEEP)
      (("2" (SKEEP)
        (("2" (ASSERT)
          (("2" (LEMMA "list_extensionality")
            (("2" (INST -1 "v" "env_2_vec(1 + j, vec_2_env(1 + j, v, env))")
              (("2" (ASSERT)
                (("2" (SKEEP)
                  (("2" (LEMMA "env_2_vec_nth")
                    (("2" (INST -1 "1+j" "vec_2_env(1+j,v,env)" "n")
                      (("2" (REPLACE -1)
                        (("2" (REPLACE -1 1 RL)
                          (("2" (REPLACE -1 1)
                            (("2" (EXPAND "vec_2_env" 1 1)
                              (("2" (PROPAX) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|env_2_vec_nth| FORMULA-DECL NIL |chain_rule_re| NIL)
    (|list_extensionality| FORMULA-DECL NIL |more_list_props| |structures|)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic|
     |mv_analysis|)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|list_cons_extensionality| FORMULA-DECL NIL |list_adt| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|vec_2_env| CONST-DECL "Environment" |chain_rule_re| NIL)
    (|env_2_vec| DEF-DECL "VectorN(k + 1)" |chain_rule_re| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   SHOSTAK))
 (|vec_2_env_plus_TCC1| 0
  (|vec_2_env_plus_TCC1-1| |nil| 3870961583
   ("" (SKEEP)
    (("" (TYPEPRED "v+w")
      (("" (TYPEPRED "v" "w")
        (("" (REPLACE -2)
          (("" (ASSERT)
            (("" (REPLACE -4)
              (("" (REPLACE -6)
                (("" (EXPAND "max" 1) (("" (PROPAX) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|Vector| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (+ CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices| |matrices|)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic|
     |mv_analysis|))
   NIL
   (|vec_2_env_plus| SUBTYPE "((matrices.+)(chain_rule_re.v, chain_rule_re.w))"
    "VectorN((number_fields.+)(1, chain_rule_re.k))")))
 (|vec_2_env_plus_TCC2| 0
  (|vec_2_env_plus_TCC2-1| |nil| 3870965556
   ("" (SKEEP)
    (("" (TYPEPRED "v+w" "v" "w")
      (("" (REPLACE -2)
        (("" (REPLACE -4)
          (("" (REPLACE -6) (("" (EXPAND "max" 2) (("" (PROPAX) NIL NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|Vector| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (+ CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices| |matrices|)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic|
     |mv_analysis|))
   NIL
   (|vec_2_env_plus| SUBTYPE "((matrices.+)(chain_rule_re.v, chain_rule_re.w))"
    "VectorN((number_fields.+)(1, chain_rule_re.k))")))
 (|vec_2_env_plus| 0
  (|vec_2_env_plus-1| |nil| 3870961588
   ("" (SKEEP)
    (("" (SPLIT)
      (("1" (FLATTEN)
        (("1" (EXPAND "vec_2_env")
          (("1" (ASSERT)
            (("1"
              (CASE
                  "FORALL(k:nat,i:below(1+k), v,w:VectorN(1+k)): nth((v+w), i) = nth(v, i) + nth(w, i)")
              (("1" (INST?) NIL NIL)
               ("2" (HIDE 2 -1)
                (("2" (INDUCT "k")
                  (("1" (SKEEP) (("1" (GRIND) NIL NIL)) NIL)
                   ("2" (SKEEP)
                    (("2" (SKEEP)
                      (("2" (CASE "i!1=0")
                        (("1" (EXPAND "nth" 1)
                          (("1" (ASSERT)
                            (("1" (EXPAND "+")
                              (("1" (EXPAND "add") (("1" (PROPAX) NIL NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (EXPAND "nth" 2)
                          (("2" (ASSERT)
                            (("2" (EXPAND "+" 2)
                              (("2" (EXPAND "add")
                                (("2" (INST -1 "i!1-1" "cdr(v!1)" "cdr(w!1)")
                                  (("1" (ASSERT)
                                    (("1" (EXPAND "+") (("1" (PROPAX) NIL NIL))
                                      NIL))
                                    NIL)
                                   ("2" (TYPEPRED "w!1")
                                    (("2" (GRIND) NIL NIL)) NIL)
                                   ("3" (TYPEPRED "v!1")
                                    (("3" (GRIND) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("3"
                    (CASE "FORALL(k:nat, v,w:VectorN(1+k)): length(v+w) = 1+k")
                    (("1" (SKEEP)
                      (("1" (TYPEPRED "v!1")
                        (("1" (INST -3 "k!2" "v!1" "w!1")
                          (("1" (ASSERT) NIL NIL)) NIL))
                        NIL))
                      NIL)
                     ("2" (HIDE 2 3)
                      (("2" (INDUCT "k")
                        (("1" (SKEEP)
                          (("1" (TYPEPRED "v!1")
                            (("1" (TYPEPRED "w!1")
                              (("1" (EXPAND "length")
                                (("1" (ASSERT)
                                  (("1" (LIFT-IF)
                                    (("1" (EXPAND "+")
                                      (("1" (EXPAND "add")
                                        (("1" (EXPAND "add")
                                          (("1" (EXPAND "length" (-2 -4))
                                            (("1" (LIFT-IF)
                                              (("1" (GRIND) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (SKEEP)
                          (("2" (SKEEP)
                            (("2" (EXPAND "+")
                              (("2" (EXPAND "add" 1)
                                (("2" (EXPAND "length" 1)
                                  (("2" (INST -1 "cdr(v!1)" "cdr(w!1)")
                                    (("1" (ASSERT) NIL NIL)
                                     ("2" (TYPEPRED "w!1")
                                      (("2" (GRIND) NIL NIL)) NIL)
                                     ("3" (TYPEPRED "v!1")
                                      (("3" (GRIND) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("3" (HIDE -1)
                (("3"
                  (CASE "FORALL(k:nat, v,w:VectorN(1+k)): length(v+w) = 1+k")
                  (("1" (SKEEP)
                    (("1" (TYPEPRED "v!1")
                      (("1" (INST -3 "k!1" "v!1" "w!1")
                        (("1" (ASSERT) NIL NIL)) NIL))
                      NIL))
                    NIL)
                   ("2" (HIDE 2 3)
                    (("2" (INDUCT "k")
                      (("1" (SKEEP)
                        (("1" (TYPEPRED "v!1")
                          (("1" (TYPEPRED "w!1")
                            (("1" (EXPAND "length")
                              (("1" (ASSERT)
                                (("1" (LIFT-IF)
                                  (("1" (EXPAND "+")
                                    (("1" (EXPAND "add")
                                      (("1" (EXPAND "add")
                                        (("1" (EXPAND "length" (-2 -4))
                                          (("1" (LIFT-IF)
                                            (("1" (GRIND) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (SKEEP)
                        (("2" (SKEEP)
                          (("2" (EXPAND "+")
                            (("2" (EXPAND "add" 1)
                              (("2" (EXPAND "length" 1)
                                (("2" (INST -1 "cdr(v!1)" "cdr(w!1)")
                                  (("1" (ASSERT) NIL NIL)
                                   ("2" (TYPEPRED "w!1")
                                    (("2" (GRIND) NIL NIL)) NIL)
                                   ("3" (TYPEPRED "v!1")
                                    (("3" (GRIND) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (FLATTEN) (("2" (EXPAND "vec_2_env") (("2" (ASSERT) NIL NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|vec_2_env| CONST-DECL "Environment" |chain_rule_re| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|Vector| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (+ CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices| |matrices|)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|add| DEF-DECL "VectorN(max(length(v1), length(v2)))" |matrices|
     |matrices|)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|v!1| SKOLEM-CONST-DECL "VectorN(2 + j)" |chain_rule_re| NIL)
    (|j| SKOLEM-CONST-DECL "nat" |chain_rule_re| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|w!1| SKOLEM-CONST-DECL "VectorN(2 + j)" |chain_rule_re| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|w!1| SKOLEM-CONST-DECL "VectorN(2 + j)" |chain_rule_re| NIL)
    (|j| SKOLEM-CONST-DECL "nat" |chain_rule_re| NIL)
    (|v!1| SKOLEM-CONST-DECL "VectorN(2 + j)" |chain_rule_re| NIL)
    (|v!1| SKOLEM-CONST-DECL "VectorN(2 + j)" |chain_rule_re| NIL)
    (|j| SKOLEM-CONST-DECL "nat" |chain_rule_re| NIL)
    (|w!1| SKOLEM-CONST-DECL "VectorN(2 + j)" |chain_rule_re| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic|
     |mv_analysis|))
   SHOSTAK))
 (|differentiable_re_p?_TCC1| 0
  (|differentiable_re_p?_TCC1-1| |nil| 3852126449
   ("" (LEMMA "projv_dd") (("" (SKEEP) (("" (INST?) NIL NIL)) NIL)) NIL)
   ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|ddl_dom?| CONST-DECL "bool" |differentiation| NIL)
    (|projv_dd| FORMULA-DECL NIL |chain_rule_re| NIL))
   NIL
   (|differentiable_re_p?| SUBTYPE
    "chain_rule_re.projv(chain_rule_re.k, chain_rule_re.P)"
    "(derivative_domain_multi[(number_fields.+)(chain_rule_re.k, 1)].deriv_domain?)")))
 (|differentiable_re_p?_TCC2| 0
  (|differentiable_re_p?_TCC2-1| |nil| 3852126449
   ("" (SKEEP)
    (("" (TYPEPRED "env")
      (("" (EXPAND "projv") (("" (INST 1 "env") NIL NIL)) NIL)) NIL))
    NIL)
   ((|ddl_dom?| CONST-DECL "bool" |differentiation| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|projv| CONST-DECL "bool" |chain_rule_re| NIL))
   NIL
   (|differentiable_re_p?| SUBTYPE
    "chain_rule_re.env_2_vec(chain_rule_re.k, chain_rule_re.env)"
    "(chain_rule_re.projv(chain_rule_re.k, chain_rule_re.P))")))
 (|diff_env_change| 0
  (|diff_env_change-1| |nil| 3853330986
   ("" (SKEEP)
    (("" (SPLIT 1)
      (("1" (FLATTEN)
        (("1" (EXPAND "differentiable?")
          (("1" (SKEEP)
            (("1" (INST 1 "g")
              (("1" (EXPAND "convergence_zero?")
                (("1" (SKEEP)
                  (("1" (INST -1 "epsilon")
                    (("1" (SKEEP -1)
                      (("1" (INST 1 "delta")
                        (("1" (SKEEP)
                          (("1" (INST -1 "x")
                            (("1" (ASSERT)
                              (("1"
                                (CASE
                                    "vec_re(k, env1, re) = vec_re(k, env2, re)")
                                (("1" (ASSERT) NIL NIL)
                                 ("2" (DECOMPOSE-EQUALITY 1)
                                  (("2" (TYPEPRED "env2")
                                    (("2" (EXPAND "vec_re" 1)
                                      (("2"
                                        (CASE
                                            "vec_2_env(k, x!1, env1) = vec_2_env(k, x!1, env2)")
                                        (("1" (ASSERT) NIL NIL)
                                         ("2" (DECOMPOSE-EQUALITY 1)
                                          (("2" (EXPAND "vec_2_env" 1)
                                            (("2" (CASE "x!2< 1+k")
                                              (("1" (ASSERT) NIL NIL)
                                               ("2" (ASSERT)
                                                (("2" (EXPAND "after_k?" -2)
                                                  (("2" (INST -2 "x!2") NIL
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (FLATTEN)
        (("2" (EXPAND "differentiable?")
          (("2" (SKEEP)
            (("2" (INST 1 "g")
              (("2" (CASE "vec_re(k, env1, re) = vec_re(k, env2, re)")
                (("1" (ASSERT) NIL NIL)
                 ("2" (HIDE 2 -1)
                  (("2" (EXPAND "vec_re" 1)
                    (("2" (DECOMPOSE-EQUALITY 1)
                      (("2"
                        (CASE
                            "vec_2_env(k, x!1, env1) = vec_2_env(k, x!1, env2)")
                        (("1" (ASSERT) NIL NIL)
                         ("2" (HIDE 2)
                          (("2" (DECOMPOSE-EQUALITY 1)
                            (("2" (EXPAND "vec_2_env")
                              (("2" (CASE "x!2 < 1 +k")
                                (("1" (ASSERT) NIL NIL)
                                 ("2" (ASSERT)
                                  (("2" (TYPEPRED "env2")
                                    (("2" (EXPAND "after_k?" -2)
                                      (("2" (INST -2 "x!2") NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|differentiable?| CONST-DECL "bool" |differentiable_def| |mv_analysis|)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|vec_2_env| CONST-DECL "Environment" |chain_rule_re| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|vec_re| CONST-DECL "real" |chain_rule_re| NIL)
    (|after_k?| CONST-DECL "bool" |chain_rule_re| NIL)
    (|zero_vec| DEF-DECL "VectorN(m)" |vector_arithmetic| |mv_analysis|)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|env_2_vec| DEF-DECL "VectorN(k + 1)" |chain_rule_re| NIL)
    (|ddl_dom?| CONST-DECL "bool" |differentiation| NIL)
    (|projv| CONST-DECL "bool" |chain_rule_re| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| NIL)
    (NQ CONST-DECL "bool" |differentiable_def| |mv_analysis|)
    (|domain| TYPE-EQ-DECL NIL |domain_vec2real_def| |mv_analysis|)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|convergence_zero?| CONST-DECL "bool" |vector_sequences| |mv_analysis|)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic|
     |mv_analysis|))
   SHOSTAK))
 (|diff_re_diff_mv_TCC1| 0
  (|diff_re_diff_mv_TCC1-1| |nil| 3853415144
   ("" (SKEEP) (("" (LEMMA "projv_dd") (("" (INST?) NIL NIL)) NIL)) NIL)
   ((|projv_dd| FORMULA-DECL NIL |chain_rule_re| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|ddl_dom?| CONST-DECL "bool" |differentiation| NIL))
   NIL
   (|diff_re_diff_mv| SUBTYPE
    "chain_rule_re.projv(chain_rule_re.k, chain_rule_re.P)"
    "(derivative_domain_multi[(number_fields.+)(1, chain_rule_re.k)].deriv_domain?)")))
 (|diff_re_diff_mv| 0
  (|diff_re_diff_mv-1| |nil| 3853415294
   ("" (SKEEP)
    (("" (SKEEP)
      (("" (SPLIT 1)
        (("1" (FLATTEN)
          (("1" (SKEEP)
            (("1" (EXPAND "diff_re?")
              (("1" (EXPAND "differentiable_re_p?")
                (("1" (EXPAND "differentiableD?")
                  (("1" (SKEEP)
                    (("1" (TYPEPRED "p")
                      (("1" (INST -4 "vec_2_env(k,p,env)")
                        (("1" (ASSERT)
                          (("1" (LEMMA "env_2_vec_id")
                            (("1" (INST?)
                              (("1" (REPLACE -1)
                                (("1"
                                  (CASE
                                      "vec_re(k, vec_2_env(k, p, env),re) =  vec_re(k, env, re)")
                                  (("1" (ASSERT) NIL NIL)
                                   ("2" (DECOMPOSE-EQUALITY 1)
                                    (("2" (EXPAND "vec_re" 1)
                                      (("2" (EXPAND "vec_2_env" 1)
                                        (("2" (PROPAX) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (TYPEPRED "P")
                          (("2" (EXPAND "ddl_dom?" -1)
                            (("2" (FLATTEN)
                              (("2" (EXPAND "connected?" -1)
                                (("2" (EXPAND "projv" -5)
                                  (("2" (SKEEP)
                                    (("2"
                                      (INST -1 "env" "env!1"
                                       "vec_2_env(k,p,env)")
                                      (("2" (EXPAND "between?" 1)
                                        (("2" (SKEEP)
                                          (("2" (EXPAND "vec_2_env" +)
                                            (("2" (CASE "i < 1 + k")
                                              (("1" (LEMMA "env_2_vec_nth")
                                                (("1" (INST?)
                                                  (("1" (REPLACE -6 -1 LR)
                                                    (("1" (ASSERT)
                                                      (("1" (INST -1 "i")
                                                        (("1" (REPLACE -1)
                                                          (("1" (ASSERT) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (ASSERT) NIL NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (FLATTEN)
          (("2" (EXPAND "diff_re?")
            (("2" (SKEEP)
              (("2" (EXPAND "differentiable_re_p?")
                (("2" (INST -1 "env")
                  (("2" (EXPAND "differentiableD?") (("2" (INST?) NIL NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|env_2_vec| DEF-DECL "VectorN(k + 1)" |chain_rule_re| NIL)
    (|diff_re?| CONST-DECL "bool" |chain_rule_re| NIL)
    (|differentiableD?| CONST-DECL "bool" |differentiable_def| |mv_analysis|)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|projv| CONST-DECL "bool" |chain_rule_re| NIL)
    (|ddl_dom?| CONST-DECL "bool" |differentiation| NIL)
    (|between?| CONST-DECL "bool" |differentiation| NIL)
    (|env!1| SKOLEM-CONST-DECL "(P)" |chain_rule_re| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|env_2_vec_nth| FORMULA-DECL NIL |chain_rule_re| NIL)
    (|connected?| CONST-DECL "bool" |differentiation| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|vec_re| CONST-DECL "real" |chain_rule_re| NIL)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|env_2_vec_id| FORMULA-DECL NIL |chain_rule_re| NIL)
    (P SKOLEM-CONST-DECL "(ddl_dom?)" |chain_rule_re| NIL)
    (|vec_2_env| CONST-DECL "Environment" |chain_rule_re| NIL)
    (|k| SKOLEM-CONST-DECL "nat" |chain_rule_re| NIL)
    (|p| SKOLEM-CONST-DECL "(projv(k, P))" |chain_rule_re| NIL)
    (|env| SKOLEM-CONST-DECL "(P)" |chain_rule_re| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic|
     |mv_analysis|)
    (|differentiable_re_p?| CONST-DECL "bool" |chain_rule_re| NIL))
   SHOSTAK))
 (|der_re_p_TCC1| 0
  (|der_re_p_TCC1-1| |nil| 3853405662 ("" (SUBTYPE-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|ddl_dom?| CONST-DECL "bool" |differentiation| NIL)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|differentiable_re_p?| CONST-DECL "bool" |chain_rule_re| NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|connected?| CONST-DECL "bool" |differentiation| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|not_one_element?| CONST-DECL "bool" |deriv_domain_def| |analysis|)
    (|not_one_element?| CONST-DECL "bool" |differentiation| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic|
     |mv_analysis|)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|differentiable?| CONST-DECL "bool" |differentiable_def| |mv_analysis|)
    (|convergence_zero?| CONST-DECL "bool" |vector_sequences| |mv_analysis|)
    (NQ CONST-DECL "real" |differentiable_def| |mv_analysis|)
    (* CONST-DECL "real" |matrices| |matrices|)
    (|vec_re| CONST-DECL "real" |chain_rule_re| NIL)
    (+ CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices| |matrices|)
    (|norm_inf| CONST-DECL "[(cons?) -> nonneg_real]" |norms| |mv_analysis|)
    (- CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices| |matrices|)
    (|sub| CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices|
     |matrices|)
    (|norm_inf| CONST-DECL "(norm?(m))" |norms| |mv_analysis|)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL))
   NIL
   (|der_re_p| SUBTYPE
    "chain_rule_re.vec_re(chain_rule_re.k, chain_rule_re.env, chain_rule_re.re)"
    "{ff: domain_vec2real_def[(number_fields.+)(1, chain_rule_re.k)].vec2real_f | differentiable_def[(number_fields.+)(1, chain_rule_re.k)].differentiable?(chain_rule_re.projv(chain_rule_re.k, chain_rule_re.P), ff, chain_rule_re.env_2_vec(chain_rule_re.k, chain_rule_re.env))}")))
 (|der_re_TCC1| 0
  (|der_re_TCC1-1| |nil| 3853408358 ("" (SUBTYPE-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|ddl_dom?| CONST-DECL "bool" |differentiation| NIL)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|diff_re?| CONST-DECL "bool" |chain_rule_re| NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|not_one_element?| CONST-DECL "bool" |differentiation| NIL)
    (|not_one_element?| CONST-DECL "bool" |deriv_domain_def| |analysis|)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|connected?| CONST-DECL "bool" |differentiation| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (P!1 SKOLEM-CONST-DECL "(ddl_dom?)" |chain_rule_re| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|env!1| SKOLEM-CONST-DECL "Environment" |chain_rule_re| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|k!1| SKOLEM-CONST-DECL "nat" |chain_rule_re| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|i!1| SKOLEM-CONST-DECL "nat" |chain_rule_re| NIL)
    (|x!1| SKOLEM-CONST-DECL "real" |chain_rule_re| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|int_abs_is_nonneg| APPLICATION-JUDGEMENT "{j: nonneg_int | j >= i}"
     |real_defs| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|x!1| SKOLEM-CONST-DECL "real" |chain_rule_re| NIL)
    (|differentiable_re_p?| CONST-DECL "bool" |chain_rule_re| NIL)
    (|differentiable?| CONST-DECL "bool" |differentiable_def| |mv_analysis|)
    (|convergence_zero?| CONST-DECL "bool" |vector_sequences| |mv_analysis|)
    (NQ CONST-DECL "real" |differentiable_def| |mv_analysis|)
    (* CONST-DECL "real" |matrices| |matrices|)
    (|vec_re| CONST-DECL "real" |chain_rule_re| NIL)
    (+ CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices| |matrices|)
    (|norm_inf| CONST-DECL "[(cons?) -> nonneg_real]" |norms| |mv_analysis|)
    (- CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices| |matrices|)
    (|sub| CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices|
     |matrices|)
    (|norm_inf| CONST-DECL "(norm?(m))" |norms| |mv_analysis|)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|proj| CONST-DECL "bool" |differentiation| NIL)
    (|between?| CONST-DECL "bool" |differentiation| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL))
   NIL
   (|der_re| SUBTYPE "chain_rule_re.re"
    "(chain_rule_re.differentiable_re_p?(chain_rule_re.k, chain_rule_re.P, chain_rule_re.env))")))
 (|der_re_grad_TCC1| 0
  (|der_re_grad_TCC1-1| |nil| 3853408358
   ("" (EXPAND "deriv_domain_e_partial?")
    (("" (SKEEP*)
      (("" (LEMMA "ddl_dom_dom_dir")
        (("" (INST?)
          (("" (ASSERT)
            (("" (TYPEPRED "P")
              (("" (EXPAND "ddl_dom?")
                (("" (FLATTEN) (("" (INST -2 "i") (("" (ASSERT) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (P SKOLEM-CONST-DECL "(ddl_dom?)" |chain_rule_re| NIL)
    (|i| SKOLEM-CONST-DECL "below(1 + k)" |chain_rule_re| NIL)
    (|k| SKOLEM-CONST-DECL "nat" |chain_rule_re| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|ddl_dom?| CONST-DECL "bool" |differentiation| NIL)
    (|ddl_dom?| CONST-DECL "bool" |differentiation| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic|
     |mv_analysis|)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|ddl_dom_dom_dir| FORMULA-DECL NIL |chain_rule_re| NIL)
    (|deriv_domain_e_partial?| CONST-DECL "bool" |derivative_domain_multi|
     |mv_analysis|))
   NIL
   (|der_re_grad| SUBTYPE
    "chain_rule_re.projv(chain_rule_re.k, chain_rule_re.P)"
    "(derivative_domain_multi[(number_fields.+)(1, chain_rule_re.k)].deriv_domain_e_partial?)")))
 (|der_re_grad_TCC2| 0
  (|der_re_grad_TCC2-1| |nil| 3853408358
   ("" (SKEEP)
    (("" (LEMMA "diffD_imp_gradD[1+k]")
      (("" (INST?)
        (("" (ASSERT)
          (("" (TYPEPRED "re")
            (("" (EXPAND "diff_re?" -1)
              (("" (EXPAND "differentiableD?" 1)
                (("" (SKEEP)
                  (("" (TYPEPRED "p")
                    (("" (EXPAND "differentiable_re_p?")
                      (("" (EXPAND "projv" -3)
                        (("" (SKEEP -3)
                          (("" (INST -4 "vec_2_env(k,p,env)")
                            (("1" (LEMMA "env_2_vec_id")
                              (("1" (INST?)
                                (("1" (REPLACE -1)
                                  (("1" (ASSERT)
                                    (("1" (HIDE 2)
                                      (("1"
                                        (CASE
                                            "NOT vec_re(k, vec_2_env(k, p, env), re) = vec_re(k, env, re)")
                                        (("1" (DECOMPOSE-EQUALITY 1)
                                          (("1" (EXPAND "vec_re" 1)
                                            (("1"
                                              (CASE
                                                  "vec_2_env(k, x!1, vec_2_env(k, p, env)) = vec_2_env(k, x!1, env)")
                                              (("1" (ASSERT) NIL NIL)
                                               ("2" (HIDE 2)
                                                (("2" (DECOMPOSE-EQUALITY 1)
                                                  (("2" (EXPAND "vec_2_env" 1)
                                                    (("2" (PROPAX) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (REPLACE -1)
                                          (("2" (PROPAX) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (TYPEPRED "env")
                              (("2" (TYPEPRED "P")
                                (("2" (EXPAND "ddl_dom?" -1)
                                  (("2" (FLATTEN)
                                    (("2" (EXPAND "connected?" -1)
                                      (("2"
                                        (INST -1 "env" "env!1"
                                         "vec_2_env(k, p, env)")
                                        (("2" (HIDE 2 3 4)
                                          (("2" (HIDE -3)
                                            (("2" (EXPAND "between?" 1)
                                              (("2" (SKEEP)
                                                (("2" (TYPEPRED "i")
                                                  (("2" (HIDE -2)
                                                    (("2"
                                                      (EXPAND "vec_2_env" +)
                                                      (("2" (CASE "i < 1+k")
                                                        (("1" (ASSERT)
                                                          (("1"
                                                            (LEMMA
                                                             "env_2_vec_nth")
                                                            (("1"
                                                              (INST-CP -1 "k"
                                                               "env!1" "i")
                                                              (("1"
                                                                (REPLACE -7 -2)
                                                                (("1"
                                                                  (REPLACE -2)
                                                                  (("1"
                                                                    (ASSERT)
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL)
                                                         ("2" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|diffD_imp_gradD| FORMULA-DECL NIL |gradient_def| |mv_analysis|)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic|
     |mv_analysis|)
    (|differentiable_re_p?| CONST-DECL "bool" |chain_rule_re| NIL)
    (|connected?| CONST-DECL "bool" |differentiation| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|env_2_vec_nth| FORMULA-DECL NIL |chain_rule_re| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|env!1| SKOLEM-CONST-DECL "(P)" |chain_rule_re| NIL)
    (|between?| CONST-DECL "bool" |differentiation| NIL)
    (|env_2_vec_id| FORMULA-DECL NIL |chain_rule_re| NIL)
    (|vec_2_env| CONST-DECL "Environment" |chain_rule_re| NIL)
    (|p| SKOLEM-CONST-DECL "(projv(k, P))" |chain_rule_re| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|diff_re?| CONST-DECL "bool" |chain_rule_re| NIL)
    (|vec_re| CONST-DECL "real" |chain_rule_re| NIL)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|differentiableD?| CONST-DECL "bool" |differentiable_def| |mv_analysis|)
    (|deriv_domain?| CONST-DECL "bool" |derivative_domain_multi| |mv_analysis|)
    (|vec2real_f| TYPE-EQ-DECL NIL |domain_vec2real_def| |mv_analysis|)
    (|ddl_dom?| CONST-DECL "bool" |differentiation| NIL)
    (|projv| CONST-DECL "bool" |chain_rule_re| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|deriv_domain_e_partial?| CONST-DECL "bool" |derivative_domain_multi|
     |mv_analysis|)
    (|domain| TYPE-EQ-DECL NIL |domain_vec2real_def| |mv_analysis|)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|k| SKOLEM-CONST-DECL "nat" |chain_rule_re| NIL)
    (P SKOLEM-CONST-DECL "(ddl_dom?)" |chain_rule_re| NIL)
    (|env| SKOLEM-CONST-DECL "(P)" |chain_rule_re| NIL)
    (|re| SKOLEM-CONST-DECL "(diff_re?(k, P))" |chain_rule_re| NIL))
   NIL
   (|der_re_grad| SUBTYPE
    "chain_rule_re.vec_re(chain_rule_re.k, chain_rule_re.env, chain_rule_re.re)"
    "(gradient_def[(number_fields.+)(1, chain_rule_re.k)].gradientD?(chain_rule_re.projv(chain_rule_re.k, chain_rule_re.P)))")))
 (|der_re_grad| 0
  (|der_re_grad-1| |nil| 3853409572
   ("" (SKEEP)
    (("" (EXPAND "der_re" 1)
      (("" (EXPAND "der_re_p")
        (("" (LEMMA "der_f_is_grad_e[1+k]")
          (("" (INST -1 "projv(k,P)" "vec_re(k, env, re)")
            (("1" (DECOMPOSE-EQUALITY -1)
              (("1" (INST -1 "env_2_vec(k,env)")
                (("1" (ASSERT)
                  (("1" (EXPAND "der_f" -1)
                    (("1" (ASSERT)
                      (("1" (REPLACE -1 1)
                        (("1" (ASSERT)
                          (("1" (EXPAND "gradient") (("1" (PROPAX) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (HIDE 2)
              (("2" (TYPEPRED "re")
                (("2" (LEMMA "diff_re_diff_mv")
                  (("2" (INST?) (("2" (ASSERT) (("2" (INST?) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|der_re| CONST-DECL "Environment" |chain_rule_re| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|der_f_is_grad_e| FORMULA-DECL NIL |gradient_def| |mv_analysis|)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|diff_re_diff_mv| FORMULA-DECL NIL |chain_rule_re| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic|
     |mv_analysis|)
    (|gradient| CONST-DECL "VectorN(n)" |gradient_def| |mv_analysis|)
    (|der_f| CONST-DECL "{gg: [(D) -> VectorN(n)] |
   FORALL (p: (D)):
     convergence_zero?(NQ(D, p), NQ(f, gg(p), p), zero_vec(n))}"
     |differentiable_def| |mv_analysis|)
    (|zero_vec| DEF-DECL "VectorN(m)" |vector_arithmetic| |mv_analysis|)
    (NQ CONST-DECL "real" |differentiable_def| |mv_analysis|)
    (NQ CONST-DECL "bool" |differentiable_def| |mv_analysis|)
    (|convergence_zero?| CONST-DECL "bool" |vector_sequences| |mv_analysis|)
    (|gradient| CONST-DECL "VectorN(n)" |gradient_def| |mv_analysis|)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|env_2_vec| DEF-DECL "VectorN(k + 1)" |chain_rule_re| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|k| SKOLEM-CONST-DECL "nat" |chain_rule_re| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|domain| TYPE-EQ-DECL NIL |domain_vec2real_def| |mv_analysis|)
    (|deriv_domain?| CONST-DECL "bool" |derivative_domain_multi| |mv_analysis|)
    (|vec2real_f| TYPE-EQ-DECL NIL |domain_vec2real_def| |mv_analysis|)
    (|differentiableD?| CONST-DECL "bool" |differentiable_def| |mv_analysis|)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|projv| CONST-DECL "bool" |chain_rule_re| NIL)
    (|ddl_dom?| CONST-DECL "bool" |differentiation| NIL)
    (P SKOLEM-CONST-DECL "(ddl_dom?)" |chain_rule_re| NIL)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|vec_re| CONST-DECL "real" |chain_rule_re| NIL)
    (|env| SKOLEM-CONST-DECL "(P)" |chain_rule_re| NIL)
    (|diff_re?| CONST-DECL "bool" |chain_rule_re| NIL)
    (|re| SKOLEM-CONST-DECL "(diff_re?(k, P))" |chain_rule_re| NIL)
    (|deriv_domain_e_partial?| CONST-DECL "bool" |derivative_domain_multi|
     |mv_analysis|)
    (|der_re_p| CONST-DECL "Environment" |chain_rule_re| NIL))
   SHOSTAK))
 (|diff_re_init_partial_TCC1| 0
  (|diff_re_init_partial_TCC2-1| |nil| 3853426595
   ("" (SKEEP)
    (("" (LEMMA "ddl_dom_dom_dir")
      (("" (INST?)
        (("" (ASSERT)
          (("" (TYPEPRED "P")
            (("" (EXPAND "ddl_dom?")
              (("" (FLATTEN) (("" (ASSERT) (("" (INST -2 "i") NIL NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|ddl_dom_dom_dir| FORMULA-DECL NIL |chain_rule_re| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic|
     |mv_analysis|)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|ddl_dom?| CONST-DECL "bool" |differentiation| NIL)
    (|ddl_dom?| CONST-DECL "bool" |differentiation| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|k| SKOLEM-CONST-DECL "nat" |chain_rule_re| NIL)
    (|i| SKOLEM-CONST-DECL "below(1 + k)" |chain_rule_re| NIL)
    (P SKOLEM-CONST-DECL "(ddl_dom?)" |chain_rule_re| NIL))
   NIL
   (|diff_re_init_partial| SUBTYPE
    "chain_rule_re.projv(chain_rule_re.k, chain_rule_re.P)"
    "(derivative_domain_multi[(number_fields.+)(1, chain_rule_re.k)].deriv_domain_partial?(vector_arithmetic.e((number_fields.+)(1, chain_rule_re.k), chain_rule_re.i)))")))
 (|diff_re_init_partial| 0
  (|diff_re_init_partial-1| |nil| 3853426663
   ("" (SKEEP)
    (("" (TYPEPRED "re")
      (("" (EXPAND "diff_re?")
        (("" (INST -1 "env")
          (("" (EXPAND "differentiable_re_p?" -1)
            (("" (LEMMA "diff_imp_init_partial2[1+k]")
              (("" (EXPAND "init_partial?" 1)
                (("" (SKEEP)
                  (("" (INST -1 "e(1+k,i)" "projv(k,P)" "vec_re(k,env,re)" "p")
                    (("1" (ASSERT)
                      (("1" (HIDE 2)
                        (("1" (LEMMA "diff_re_diff_mv")
                          (("1" (INST -1 "k" "P" "re")
                            (("1" (ASSERT)
                              (("1" (INST -1 "env")
                                (("1" (EXPAND "differentiableD?" -1)
                                  (("1" (INST -1 "p") NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (LEMMA "e_not_zero") (("2" (INST?) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|diff_re?| CONST-DECL "bool" |chain_rule_re| NIL)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|ddl_dom?| CONST-DECL "bool" |differentiation| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|diff_imp_init_partial2| FORMULA-DECL NIL |init_partial_def|
     |mv_analysis|)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic|
     |mv_analysis|)
    (|e_not_zero| FORMULA-DECL NIL |vector_arithmetic| |mv_analysis|)
    (|diff_re_diff_mv| FORMULA-DECL NIL |chain_rule_re| NIL)
    (|differentiableD?| CONST-DECL "bool" |differentiable_def| |mv_analysis|)
    (|vec_re| CONST-DECL "real" |chain_rule_re| NIL)
    (|vec2real_f| TYPE-EQ-DECL NIL |domain_vec2real_def| |mv_analysis|)
    (|projv| CONST-DECL "bool" |chain_rule_re| NIL)
    (|deriv_domain_partial?| CONST-DECL "bool" |derivative_domain_multi|
     |mv_analysis|)
    (|domain| TYPE-EQ-DECL NIL |domain_vec2real_def| |mv_analysis|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL) (< CONST-DECL "bool" |reals| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|e| DEF-DECL "VectorN(m)" |vector_arithmetic| |mv_analysis|)
    (|k| SKOLEM-CONST-DECL "nat" |chain_rule_re| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|i| SKOLEM-CONST-DECL "below(1 + k)" |chain_rule_re| NIL)
    (|zero_vec| DEF-DECL "VectorN(m)" |vector_arithmetic| |mv_analysis|)
    (|init_partial?| CONST-DECL "bool" |init_partial_def| |mv_analysis|)
    (|differentiable_re_p?| CONST-DECL "bool" |chain_rule_re| NIL))
   NIL))
 (|der_re_partial_TCC1| 0
  (|der_re_partial_TCC2-1| |nil| 3853408461
   ("" (SKEEP)
    (("" (TYPEPRED "re")
      (("" (EXPAND "diff_re?")
        (("" (INST -1 "env")
          (("" (EXPAND "differentiable_re_p?" -1)
            (("" (LEMMA "diff_imp_init_partial2[1+k]")
              (("" (EXPAND "init_partial?" 1)
                (("" (SKEEP)
                  (("" (INST -1 "e(1+k,i)" "projv(k,P)" "vec_re(k,env,re)" "p")
                    (("1" (ASSERT)
                      (("1" (HIDE 2)
                        (("1" (LEMMA "diff_re_diff_mv")
                          (("1" (INST -1 "k" "P" "re")
                            (("1" (ASSERT)
                              (("1" (INST -1 "env")
                                (("1" (EXPAND "differentiableD?" -1)
                                  (("1" (INST -1 "p") NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (LEMMA "e_not_zero") (("2" (INST?) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|diff_re?| CONST-DECL "bool" |chain_rule_re| NIL)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|ddl_dom?| CONST-DECL "bool" |differentiation| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|diff_imp_init_partial2| FORMULA-DECL NIL |init_partial_def|
     |mv_analysis|)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic|
     |mv_analysis|)
    (|e_not_zero| FORMULA-DECL NIL |vector_arithmetic| |mv_analysis|)
    (|diff_re_diff_mv| FORMULA-DECL NIL |chain_rule_re| NIL)
    (|differentiableD?| CONST-DECL "bool" |differentiable_def| |mv_analysis|)
    (|vec_re| CONST-DECL "real" |chain_rule_re| NIL)
    (|vec2real_f| TYPE-EQ-DECL NIL |domain_vec2real_def| |mv_analysis|)
    (|projv| CONST-DECL "bool" |chain_rule_re| NIL)
    (|deriv_domain_partial?| CONST-DECL "bool" |derivative_domain_multi|
     |mv_analysis|)
    (|domain| TYPE-EQ-DECL NIL |domain_vec2real_def| |mv_analysis|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL) (< CONST-DECL "bool" |reals| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|e| DEF-DECL "VectorN(m)" |vector_arithmetic| |mv_analysis|)
    (|k| SKOLEM-CONST-DECL "nat" |chain_rule_re| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|i| SKOLEM-CONST-DECL "below(1 + k)" |chain_rule_re| NIL)
    (|zero_vec| DEF-DECL "VectorN(m)" |vector_arithmetic| |mv_analysis|)
    (|init_partial?| CONST-DECL "bool" |init_partial_def| |mv_analysis|)
    (|differentiable_re_p?| CONST-DECL "bool" |chain_rule_re| NIL))
   NIL
   (|der_re_partial| SUBTYPE
    "chain_rule_re.vec_re(chain_rule_re.k, chain_rule_re.env, chain_rule_re.re)"
    "(init_partial_def[(number_fields.+)(1, chain_rule_re.k)].init_partial?(vector_arithmetic.e((number_fields.+)(chain_rule_re.k, 1), chain_rule_re.i), chain_rule_re.projv(chain_rule_re.k, chain_rule_re.P)))")))
 (|der_re_partial| 0
  (|der_re_partial-1| |nil| 3853426727
   ("" (SKEEP)
    (("" (LEMMA "der_re_grad")
      (("" (INST?)
        (("" (REPLACE -1)
          (("" (EXPAND "vec_2_env" 1)
            (("" (LEMMA "grad_nth[1+k]")
              (("" (HIDE -2) (("" (INST?) NIL NIL)) NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|der_re_grad| FORMULA-DECL NIL |chain_rule_re| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|grad_nth| FORMULA-DECL NIL |gradient_def| |mv_analysis|)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|env_2_vec| DEF-DECL "VectorN(k + 1)" |chain_rule_re| NIL)
    (|vec_re| CONST-DECL "real" |chain_rule_re| NIL)
    (|gradientD?| CONST-DECL "bool" |gradient_def| |mv_analysis|)
    (|vec2real_f| TYPE-EQ-DECL NIL |domain_vec2real_def| |mv_analysis|)
    (|projv| CONST-DECL "bool" |chain_rule_re| NIL)
    (|deriv_domain_e_partial?| CONST-DECL "bool" |derivative_domain_multi|
     |mv_analysis|)
    (|domain| TYPE-EQ-DECL NIL |domain_vec2real_def| |mv_analysis|)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|vec_2_env| CONST-DECL "Environment" |chain_rule_re| NIL)
    (|diff_re?| CONST-DECL "bool" |chain_rule_re| NIL)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|ddl_dom?| CONST-DECL "bool" |differentiation| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   SHOSTAK))
 (|re_diff_mv| 0
  (|re_diff_mv-1| |nil| 3852126815
   ("" (SKEEP)
    (("" (LEMMA "lift_diff_right")
      (("" (INST?)
        (("" (ASSERT)
          (("" (EXPAND "differentiable_re_p?" 1 1) (("" (PROPAX) NIL NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|lift_diff_right| FORMULA-DECL NIL |lift_real_fun_def| |mv_analysis|)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic|
     |mv_analysis|)
    (|differentiable_re_p?| CONST-DECL "bool" |chain_rule_re| NIL)
    (|env_2_vec| DEF-DECL "VectorN(k + 1)" |chain_rule_re| NIL)
    (|vec_re| CONST-DECL "real" |chain_rule_re| NIL)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|vec2real_f| TYPE-EQ-DECL NIL |domain_vec2real_def| |mv_analysis|)
    (|ddl_dom?| CONST-DECL "bool" |differentiation| NIL)
    (|projv| CONST-DECL "bool" |chain_rule_re| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|deriv_domain?| CONST-DECL "bool" |derivative_domain_multi| |mv_analysis|)
    (|domain| TYPE-EQ-DECL NIL |domain_vec2real_def| |mv_analysis|)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL))
   SHOSTAK))
 (|re_der_mv_TCC1| 0
  (|re_der_mv_TCC1-1| |nil| 3853927758
   ("" (SKEEP)
    (("" (LEMMA "re_diff_mv") (("" (INST?) (("" (ASSERT) NIL NIL)) NIL)) NIL))
    NIL)
   ((|re_diff_mv| FORMULA-DECL NIL |chain_rule_re| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic|
     |mv_analysis|)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|ddl_dom?| CONST-DECL "bool" |differentiation| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   NIL
   (|re_der_mv| SUBTYPE
    "lift_real_fun_def.liftr((number_fields.+)(chain_rule_re.k, 1), chain_rule_re.projv(chain_rule_re.k, chain_rule_re.P), chain_rule_re.vec_re(chain_rule_re.k, chain_rule_re.env, chain_rule_re.re))"
    "{ff: domain_vec2real_def[(number_fields.+)(chain_rule_re.k, 1)].vec2vec(1) | convergence_vec2vec[(number_fields.+)(1, chain_rule_re.k)].differentiable?(1, chain_rule_re.projv(chain_rule_re.k, chain_rule_re.P), ff, chain_rule_re.env_2_vec(chain_rule_re.k, chain_rule_re.env))}")))
 (|re_der_mv| 0
  (|re_der_mv-1| |nil| 3853927923
   ("" (SKEEP)
    (("" (LEMMA "lift_der_right")
      (("" (INST?)
        (("1" (ASSERT)
          (("1" (LEMMA "re_diff_mv")
            (("1" (INST?)
              (("1" (ASSERT)
                (("1" (EXPAND "differentiable_re_p?" -2)
                  (("1" (PROPAX) NIL NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (LEMMA "ddl_dom_dom_dir")
          (("2" (EXPAND "deriv_domain_e_partial?")
            (("2" (SKEEP 1)
              (("2" (INST -1 "k" "i" "P")
                (("2" (TYPEPRED "P")
                  (("2" (EXPAND "ddl_dom?")
                    (("2" (FLATTEN)
                      (("2" (INST -2 "i") (("2" (ASSERT) NIL NIL)) NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|lift_der_right| FORMULA-DECL NIL |lift_real_fun_def| |mv_analysis|)
    (|ddl_dom_dom_dir| FORMULA-DECL NIL |chain_rule_re| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|i| SKOLEM-CONST-DECL "below(1 + k)" |chain_rule_re| NIL)
    (|ddl_dom?| CONST-DECL "bool" |differentiation| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic|
     |mv_analysis|)
    (|differentiable_re_p?| CONST-DECL "bool" |chain_rule_re| NIL)
    (|re_diff_mv| FORMULA-DECL NIL |chain_rule_re| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|k| SKOLEM-CONST-DECL "nat" |chain_rule_re| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|domain| TYPE-EQ-DECL NIL |domain_vec2real_def| |mv_analysis|)
    (|deriv_domain_e_partial?| CONST-DECL "bool" |derivative_domain_multi|
     |mv_analysis|)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|projv| CONST-DECL "bool" |chain_rule_re| NIL)
    (|ddl_dom?| CONST-DECL "bool" |differentiation| NIL)
    (P SKOLEM-CONST-DECL "(ddl_dom?)" |chain_rule_re| NIL)
    (|env_2_vec| DEF-DECL "VectorN(k + 1)" |chain_rule_re| NIL)
    (|vec_re| CONST-DECL "real" |chain_rule_re| NIL)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|vec2real_f| TYPE-EQ-DECL NIL |domain_vec2real_def| |mv_analysis|)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL))
   SHOSTAK))
 (|re_diff_mv_ll_TCC1| 0
  (|re_diff_mv_ll_TCC1-1| |nil| 3853923345
   ("" (SKEEP) (("" (ASSERT) NIL NIL)) NIL)
   ((|null_MapExprInj| NAME-JUDGEMENT "MapExprInj" |hp_def| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic|
     |mv_analysis|))
   NIL (|re_diff_mv_ll| SUBTYPE "chain_rule_re.p" "(list_adt[real].cons?)")))
 (|re_diff_mv_ll_TCC2| 0
  (|re_diff_mv_ll_TCC2-1| |nil| 3853923345 ("" (SUBTYPE-TCC) NIL NIL)
   ((|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic|
     |mv_analysis|)
    (|null_MapExprInj| NAME-JUDGEMENT "MapExprInj" |hp_def| NIL)
    (|ODEs_s?| CONST-DECL "bool" |ODEs_equiv| NIL)
    (|ODEs| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|mapexpr_inj| CONST-DECL "bool" |hp_def| NIL)
    (|MapExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|dLVar| TYPE-DECL NIL |hp_def| NIL)
    (|lift_rd| CONST-DECL "domain[1]" |lift_real_fun_def| |mv_analysis|)
    (|domain| TYPE-EQ-DECL NIL |domain_vec2real_def| |mv_analysis|)
    (|real_dom| TYPE-EQ-DECL NIL |lift_real_fun_def| |mv_analysis|)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|ddl_dom?| CONST-DECL "bool" |differentiation| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|dd?| CONST-DECL "bool" |hp_expr| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|connected?| CONST-DECL "bool" |differentiation| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|not_one_element?| CONST-DECL "bool" |deriv_domain_def| |analysis|)
    (|not_one_element?| CONST-DECL "bool" |differentiation| NIL)
    (|env_at_t?| CONST-DECL "bool" |hp_expr| NIL)
    (|deriv| CONST-DECL "real" |derivatives_def| |analysis|)
    (|deriv| CONST-DECL "[T -> real]" |derivatives| |analysis|)
    (|sol_at_t?| CONST-DECL "bool" |hp_expr| NIL)
    (|solution_odes?| CONST-DECL "bool" |hp_expr| NIL)
    (|fullset| CONST-DECL "set" |sets| NIL)
    (|adh| CONST-DECL "setof[real]" |convergence_functions| |analysis|)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (NQ CONST-DECL "real" |derivatives_def| |analysis|)
    (|convergence| CONST-DECL "bool" |convergence_functions| |analysis|)
    (|convergence| CONST-DECL "bool" |lim_of_functions| |analysis|)
    (|convergent?| CONST-DECL "bool" |lim_of_functions| |analysis|)
    (|derivable?| CONST-DECL "bool" |derivatives_def| |analysis|)
    (|derivable?| CONST-DECL "bool" |derivatives| |analysis|)
    (|derivable_odes?| CONST-DECL "bool" |hp_expr| NIL)
    (|solution_odes_u?| CONST-DECL "bool" |hp_expr| NIL))
   NIL
   (|re_diff_mv_ll| SUBTYPE "list_adt[real].car(chain_rule_re.p)"
    "(chain_rule_re.D)")))
 (|re_diff_mv_ll_TCC3| 0
  (|re_diff_mv_ll_TCC4-1| |nil| 3853923345
   ("" (SKEEP)
    (("" (LEMMA "projv_dd") (("" (ASSERT) (("" (INST?) NIL NIL)) NIL)) NIL))
    NIL)
   ((|projv_dd| FORMULA-DECL NIL |chain_rule_re| NIL)
    (|ddl_dom?| CONST-DECL "bool" |differentiation| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|ODEs_s?| CONST-DECL "bool" |ODEs_equiv| NIL)
    (|dd?| CONST-DECL "bool" |hp_expr| NIL)
    (|ODEs| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|mapexpr_inj| CONST-DECL "bool" |hp_def| NIL)
    (|max_var| CONST-DECL "nat" |hp_def| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|MapExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|dLVar| TYPE-DECL NIL |hp_def| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|null_MapExprInj| NAME-JUDGEMENT "MapExprInj" |hp_def| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic|
     |mv_analysis|))
   NIL
   (|re_diff_mv_ll| SUBTYPE
    "chain_rule_re.projv(hp_def.max_var(chain_rule_re.ode), chain_rule_re.P)"
    "(derivative_domain_multi[(number_fields.+)(1, hp_def.max_var(chain_rule_re.ode))].deriv_domain?)")))
 (|re_diff_mv_ll_TCC4| 0
  (|re_diff_mv_ll_TCC5-1| |nil| 3853923345
   ("" (SKEEP) (("" (ASSERT) NIL NIL)) NIL)
   ((|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|null_MapExprInj| NAME-JUDGEMENT "MapExprInj" |hp_def| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic|
     |mv_analysis|))
   NIL
   (|re_diff_mv_ll| SUBTYPE
    "(: chain_rule_re.vec_re(hp_def.max_var(chain_rule_re.ode), chain_rule_re.envi, chain_rule_re.R)(chain_rule_re.v) :)"
    "VectorN(1)")))
 (|re_diff_mv_ll_TCC5| 0
  (|re_diff_mv_ll_TCC6-1| |nil| 3853923345
   ("" (SKEEP)
    (("" (EXPAND "liftl" 1)
      (("" (TYPEPRED "p")
        (("" (EXPAND "lift_rd" -3)
          (("" (ASSERT) (("" (EXPAND "projv") (("" (INST?) NIL NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|liftl| CONST-DECL "vec2vec[1](k)" |lift_real_fun_def| |mv_analysis|)
    (|projv| CONST-DECL "bool" |chain_rule_re| NIL)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|ddl_dom?| CONST-DECL "bool" |differentiation| NIL)
    (|dLVar| TYPE-DECL NIL |hp_def| NIL)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|MapExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|mapexpr_inj| CONST-DECL "bool" |hp_def| NIL)
    (|ODEs| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|ODEs_s?| CONST-DECL "bool" |ODEs_equiv| NIL)
    (|env_sol| CONST-DECL "Environment" |ODEs_equiv| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|dd?| CONST-DECL "bool" |hp_expr| NIL)
    (|lift_rd| CONST-DECL "domain[1]" |lift_real_fun_def| |mv_analysis|)
    (|domain| TYPE-EQ-DECL NIL |domain_vec2real_def| |mv_analysis|)
    (|real_dom| TYPE-EQ-DECL NIL |lift_real_fun_def| |mv_analysis|)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|null_MapExprInj| NAME-JUDGEMENT "MapExprInj" |hp_def| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic|
     |mv_analysis|))
   NIL
   (|re_diff_mv_ll| SUBTYPE
    "lift_real_fun_def.liftl((number_fields.+)(1, hp_def.max_var(chain_rule_re.ode)), chain_rule_re.D, LAMBDA (tt: (chain_rule_re.D)): chain_rule_re.env_2_vec(hp_def.max_var(chain_rule_re.ode), ODEs_equiv.env_sol(chain_rule_re.D, chain_rule_re.envi, chain_rule_re.ode)(tt)))(chain_rule_re.p)"
    "(chain_rule_re.projv(hp_def.max_var(chain_rule_re.ode), chain_rule_re.P))")))
 (|re_diff_mv_ll| 0
  (|re_diff_mv_ll-1| |nil| 3853924090
   ("" (SKEEP)
    (("" (LEMMA "re_diff_mv")
      (("" (INST?)
        (("" (ASSERT)
          ((""
            (CASE " differentiable?[1 + max_var(ode)]
           (1, projv(max_var(ode), P),
            liftr(1 + max_var(ode), projv(max_var(ode), P),
                  vec_re(max_var(ode), env_sol(D, envi, ode)(car(p)), R)),
            env_2_vec(max_var(ode), env_sol(D, envi, ode)(car(p)))) IFF   differentiable?[1 + max_var(ode)]
            (1, projv(max_var(ode), P),
             LAMBDA (v: VectorN(1 + max_var(ode))):
               (: vec_re(max_var(ode), envi, R)(v) :),
             liftl(1 + max_var(ode), D,
                   LAMBDA (tt: (D)):
                     env_2_vec(max_var(ode), env_sol(D, envi, ode)(tt)))
                  (p))")
            (("1" (FLATTEN)
              (("1" (ASSERT)
                (("1" (SPLIT 1)
                  (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)
                   ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (HIDE 2)
              (("2" (FLATTEN)
                (("2" (ASSERT)
                  (("2" (HIDE -1 -2)
                    (("2" (EXPAND "liftl" 1)
                      (("2" (TYPEPRED "p")
                        (("2" (EXPAND "lift_rd" -3)
                          (("2" (ASSERT)
                            (("2" (SPLIT 1)
                              (("1" (FLATTEN)
                                (("1" (LEMMA "same_on_D_same_diff")
                                  (("1"
                                    (INST -1 "1+max_var(ode)"
                                     "projv(max_var(ode),P)"
                                     "env_2_vec(max_var(ode), env_sol(D, envi, ode)(car(p)))"
                                     " liftr(1 + max_var(ode), projv(max_var(ode), P),
                 vec_re(max_var(ode), env_sol(D, envi, ode)(car(p)), R))"
                                     "LAMBDA (v: VectorN(1 + max_var(ode))):
             (: vec_re(max_var(ode), envi, R)(v) :)")
                                    (("1" (ASSERT)
                                      (("1" (SKEEP 1)
                                        (("1" (EXPAND "liftr" 1)
                                          (("1" (ASSERT)
                                            (("1" (EXPAND "vec_re" 1)
                                              (("1" (DECOMPOSE-EQUALITY 1)
                                                (("1"
                                                  (CASE
                                                      "vec_2_env(max_var(ode), x, env_sol(D, envi, ode)(car(p))) = vec_2_env(max_var(ode), x, envi)")
                                                  (("1" (ASSERT) NIL NIL)
                                                   ("2" (EXPAND "vec_2_env" 1)
                                                    (("2" (ASSERT)
                                                      (("2"
                                                        (DECOMPOSE-EQUALITY 1)
                                                        (("1"
                                                          (CASE
                                                              "x!1 < 1 + max_var(ode)")
                                                          (("1" (ASSERT) NIL
                                                            NIL)
                                                           ("2" (ASSERT)
                                                            (("2"
                                                              (EXPAND "env_sol"
                                                                      2)
                                                              (("2"
                                                                (TYPEPRED
                                                                 "env_at_t(ode, fs_sol(D, envi, ode), envi)(car(p))")
                                                                (("2"
                                                                  (EXPAND
                                                                   "env_at_t?"
                                                                   -1)
                                                                  (("2"
                                                                    (FLATTEN)
                                                                    (("2"
                                                                      (INST -1
                                                                       "x!1")
                                                                      (("1"
                                                                        (ASSERT)
                                                                        NIL
                                                                        NIL)
                                                                       ("2"
                                                                        (LEMMA
                                                                         " nip_max_var")
                                                                        (("2"
                                                                          (INST?)
                                                                          NIL
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL)
                                                         ("2" (SKEEP)
                                                          (("2" (ASSERT) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (FLATTEN)
                                (("2" (LEMMA "same_on_D_same_diff")
                                  (("2"
                                    (INST -1 "1+max_var(ode)"
                                     "projv(max_var(ode),P)"
                                     "env_2_vec(max_var(ode), env_sol(D, envi, ode)(car(p)))"
                                     "LAMBDA (v: VectorN(1 + max_var(ode))):
             (: vec_re(max_var(ode), envi, R)(v) :)"
                                     " liftr(1 + max_var(ode), projv(max_var(ode), P),
                 vec_re(max_var(ode), env_sol(D, envi, ode)(car(p)), R))")
                                    (("2" (ASSERT)
                                      (("2" (HIDE 2)
                                        (("2" (SKEEP)
                                          (("2" (EXPAND "liftr" 1)
                                            (("2" (DECOMPOSE-EQUALITY 1)
                                              (("2" (EXPAND "vec_re" 1)
                                                (("2"
                                                  (CASE
                                                      "vec_2_env(max_var(ode), x, env_sol(D, envi, ode)(car(p))) = vec_2_env(max_var(ode), x, envi)")
                                                  (("1" (ASSERT) NIL NIL)
                                                   ("2" (HIDE 2)
                                                    (("2"
                                                      (EXPAND "vec_2_env" 1)
                                                      (("2"
                                                        (DECOMPOSE-EQUALITY 1)
                                                        (("1"
                                                          (CASE
                                                              "x!1 < 1 + max_var(ode)")
                                                          (("1" (ASSERT) NIL
                                                            NIL)
                                                           ("2" (ASSERT)
                                                            (("2"
                                                              (EXPAND
                                                               "env_sol")
                                                              (("2"
                                                                (TYPEPRED
                                                                 "env_at_t(ode, fs_sol(D, envi, ode), envi)(car(p))")
                                                                (("2"
                                                                  (EXPAND
                                                                   "env_at_t?"
                                                                   -1)
                                                                  (("2"
                                                                    (FLATTEN)
                                                                    (("2"
                                                                      (INST -1
                                                                       "x!1")
                                                                      (("1"
                                                                        (ASSERT)
                                                                        NIL
                                                                        NIL)
                                                                       ("2"
                                                                        (LEMMA
                                                                         " nip_max_var")
                                                                        (("2"
                                                                          (INST?)
                                                                          NIL
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL)
                                                         ("2" (SKEEP)
                                                          (("2" (ASSERT) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|re_diff_mv| FORMULA-DECL NIL |chain_rule_re| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|same_on_D_same_diff| FORMULA-DECL NIL |lift_real_fun_def| |mv_analysis|)
    (|x!1| SKOLEM-CONST-DECL "nat" |chain_rule_re| NIL)
    (|not_in_map| CONST-DECL "bool" |hp_def| NIL)
    (|MapExprInj| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nip_max_var| FORMULA-DECL NIL |hp_def| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|env_at_t?| CONST-DECL "bool" |hp_expr| NIL)
    (|solution_odes_u?| CONST-DECL "bool" |hp_expr| NIL)
    (|fs_sol| CONST-DECL "(solution_odes_u?(D, odes, envi))" |ODEs_equiv| NIL)
    (|env_at_t| CONST-DECL "{env: (env_at_t?(odes, fs, envi, t)) |
   FORALL (env2: (env_at_t?(odes, fs, envi, t))): env = env2}"
     |hp_expr| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|x| SKOLEM-CONST-DECL "(projv(max_var(ode), P))" |chain_rule_re| NIL)
    (P SKOLEM-CONST-DECL "(ddl_dom?)" |chain_rule_re| NIL)
    (|ode| SKOLEM-CONST-DECL "(ODEs_s?(D, envi))" |chain_rule_re| NIL)
    (|envi| SKOLEM-CONST-DECL "Environment" |chain_rule_re| NIL)
    (D SKOLEM-CONST-DECL "(dd?)" |chain_rule_re| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|vec_2_env| CONST-DECL "Environment" |chain_rule_re| NIL)
    (|list_cons_extensionality| FORMULA-DECL NIL |list_adt| NIL)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|x!1| SKOLEM-CONST-DECL "nat" |chain_rule_re| NIL)
    (|x| SKOLEM-CONST-DECL "(projv(max_var(ode), P))" |chain_rule_re| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|deriv_domain?| CONST-DECL "bool" |derivative_domain_multi| |mv_analysis|)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|vec2vec| TYPE-EQ-DECL NIL |domain_vec2real_def| |mv_analysis|)
    (|differentiable?| CONST-DECL "bool" |convergence_vec2vec| |mv_analysis|)
    (|projv| CONST-DECL "bool" |chain_rule_re| NIL)
    (|liftr| CONST-DECL "vec2vec[k](1)" |lift_real_fun_def| |mv_analysis|)
    (|vec_re| CONST-DECL "real" |chain_rule_re| NIL)
    (|env_2_vec| DEF-DECL "VectorN(k + 1)" |chain_rule_re| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|liftl| CONST-DECL "vec2vec[1](k)" |lift_real_fun_def| |mv_analysis|)
    (|lift_rd| CONST-DECL "domain[1]" |lift_real_fun_def| |mv_analysis|)
    (|domain| TYPE-EQ-DECL NIL |domain_vec2real_def| |mv_analysis|)
    (|real_dom| TYPE-EQ-DECL NIL |lift_real_fun_def| |mv_analysis|)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|env_sol| CONST-DECL "Environment" |ODEs_equiv| NIL)
    (|ddl_dom?| CONST-DECL "bool" |differentiation| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|ODEs_s?| CONST-DECL "bool" |ODEs_equiv| NIL)
    (|dd?| CONST-DECL "bool" |hp_expr| NIL)
    (|ODEs| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|mapexpr_inj| CONST-DECL "bool" |hp_def| NIL)
    (|max_var| CONST-DECL "nat" |hp_def| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|MapExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|dLVar| TYPE-DECL NIL |hp_def| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|null_MapExprInj| NAME-JUDGEMENT "MapExprInj" |hp_def| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic|
     |mv_analysis|))
   SHOSTAK))
 (|re_der_mv_ll_TCC1| 0
  (|re_der_mv_ll_TCC1-1| |nil| 3853928506
   ("" (SKEEP)
    (("" (LEMMA "re_diff_mv_ll") (("" (INST?) (("" (ASSERT) NIL NIL)) NIL))
      NIL))
    NIL)
   ((|re_diff_mv_ll| FORMULA-DECL NIL |chain_rule_re| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|ODEs_s?| CONST-DECL "bool" |ODEs_equiv| NIL)
    (|ODEs| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|mapexpr_inj| CONST-DECL "bool" |hp_def| NIL)
    (|MapExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|dLVar| TYPE-DECL NIL |hp_def| NIL)
    (|lift_rd| CONST-DECL "domain[1]" |lift_real_fun_def| |mv_analysis|)
    (|domain| TYPE-EQ-DECL NIL |domain_vec2real_def| |mv_analysis|)
    (|real_dom| TYPE-EQ-DECL NIL |lift_real_fun_def| |mv_analysis|)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|ddl_dom?| CONST-DECL "bool" |differentiation| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|dd?| CONST-DECL "bool" |hp_expr| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|null_MapExprInj| NAME-JUDGEMENT "MapExprInj" |hp_def| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic|
     |mv_analysis|))
   NIL
   (|re_der_mv_ll| SUBTYPE
    "LAMBDA (v: matrices.VectorN((number_fields.+)(hp_def.max_var(chain_rule_re.ode), 1))): (: chain_rule_re.vec_re(hp_def.max_var(chain_rule_re.ode), chain_rule_re.envi, chain_rule_re.R)(v) :)"
    "{ff: domain_vec2real_def[(number_fields.+)(hp_def.max_var(chain_rule_re.ode), 1)].vec2vec(1) | convergence_vec2vec[(number_fields.+)(1, hp_def.max_var(chain_rule_re.ode))].differentiable?(1, chain_rule_re.projv(hp_def.max_var(chain_rule_re.ode), chain_rule_re.P), ff, lift_real_fun_def.liftl((number_fields.+)(1, hp_def.max_var(chain_rule_re.ode)), chain_rule_re.D, (LAMBDA (tt: (chain_rule_re.D)): chain_rule_re.env_2_vec(hp_def.max_var(chain_rule_re.ode), ODEs_equiv.env_sol(chain_rule_re.D, chain_rule_re.envi, chain_rule_re.ode)(tt))))(chain_rule_re.p))}")))
 (|re_der_mv_ll_TCC2| 0
  (|re_der_mv_ll_TCC2-1| |nil| 3853928506
   ("" (SKEEP) (("" (LEMMA "projv_dd") (("" (INST?) NIL NIL)) NIL)) NIL)
   ((|projv_dd| FORMULA-DECL NIL |chain_rule_re| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|dLVar| TYPE-DECL NIL |hp_def| NIL)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|MapExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|max_var| CONST-DECL "nat" |hp_def| NIL)
    (|mapexpr_inj| CONST-DECL "bool" |hp_def| NIL)
    (|ODEs| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|dd?| CONST-DECL "bool" |hp_expr| NIL)
    (|ODEs_s?| CONST-DECL "bool" |ODEs_equiv| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|ddl_dom?| CONST-DECL "bool" |differentiation| NIL)
    (|null_MapExprInj| NAME-JUDGEMENT "MapExprInj" |hp_def| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic|
     |mv_analysis|))
   NIL
   (|re_der_mv_ll| SUBTYPE
    "chain_rule_re.projv(hp_def.max_var(chain_rule_re.ode), chain_rule_re.P)"
    "(derivative_domain_multi[(number_fields.+)(hp_def.max_var(chain_rule_re.ode), 1)].deriv_domain?)")))
 (|re_der_mv_ll_TCC3| 0
  (|re_der_mv_ll_TCC3-1| |nil| 3853928506
   ("" (SKEEP)
    (("" (EXPAND "projv" 1)
      (("" (EXPAND "liftl" 1)
        (("" (TYPEPRED "p")
          (("" (EXPAND "lift_rd" -3) (("" (ASSERT) (("" (INST?) NIL NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|projv| CONST-DECL "bool" |chain_rule_re| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|real_dom| TYPE-EQ-DECL NIL |lift_real_fun_def| |mv_analysis|)
    (|domain| TYPE-EQ-DECL NIL |domain_vec2real_def| |mv_analysis|)
    (|lift_rd| CONST-DECL "domain[1]" |lift_real_fun_def| |mv_analysis|)
    (|dd?| CONST-DECL "bool" |hp_expr| NIL)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|ddl_dom?| CONST-DECL "bool" |differentiation| NIL)
    (|dLVar| TYPE-DECL NIL |hp_def| NIL)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|MapExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|mapexpr_inj| CONST-DECL "bool" |hp_def| NIL)
    (|ODEs| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|ODEs_s?| CONST-DECL "bool" |ODEs_equiv| NIL)
    (|env_sol| CONST-DECL "Environment" |ODEs_equiv| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|liftl| CONST-DECL "vec2vec[1](k)" |lift_real_fun_def| |mv_analysis|)
    (|null_MapExprInj| NAME-JUDGEMENT "MapExprInj" |hp_def| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic|
     |mv_analysis|))
   NIL
   (|re_der_mv_ll| SUBTYPE
    "lift_real_fun_def.liftl((number_fields.+)(hp_def.max_var(chain_rule_re.ode), 1), chain_rule_re.D, (LAMBDA (tt: (chain_rule_re.D)): chain_rule_re.env_2_vec(hp_def.max_var(chain_rule_re.ode), ODEs_equiv.env_sol(chain_rule_re.D, chain_rule_re.envi, chain_rule_re.ode)(tt))))(chain_rule_re.p)"
    "(chain_rule_re.projv(hp_def.max_var(chain_rule_re.ode), chain_rule_re.P))")))
 (|re_der_mv_ll| 0
  (|re_der_mv_ll-1| |nil| 3853929286
   ("" (SKEEP)
    (("" (LEMMA "re_der_mv")
      (("" (INST?)
        (("" (ASSERT)
          (("" (LEMMA "same_on_D_same_der")
            ((""
              (CASE "NOT liftl(1 + max_var(ode), D,
                 LAMBDA (tt: (D)):
                   env_2_vec(max_var(ode), env_sol(D, envi, ode)(tt)))
                (p) =  env_2_vec(max_var(ode), env_sol(D, envi, ode)(car(p)))")
              (("1" (EXPAND "liftl" 1)
                (("1" (TYPEPRED "p")
                  (("1" (EXPAND "lift_rd" -3) (("1" (ASSERT) NIL NIL)) NIL))
                  NIL))
                NIL)
               ("2" (REPLACE -1 1 LR)
                (("2" (HIDE -1)
                  (("2"
                    (INST -1 "1+max_var(ode)" "projv(max_var(ode), P)"
                     "env_2_vec(max_var(ode), env_sol(D, envi, ode)(car(p)))"
                     " (liftr(1 + max_var(ode), projv(max_var(ode), P),
                 vec_re(max_var(ode), env_sol(D, envi, ode)(car(p)), R)))"
                     "(LAMBDA (v: VectorN(1 + max_var(ode))):
             (: vec_re(max_var(ode), envi, R)(v) :))")
                    (("1" (ASSERT)
                      (("1" (HIDE 2)
                        (("1" (SPLIT 1)
                          (("1" (SKEEP)
                            (("1" (EXPAND "liftr")
                              (("1" (EXPAND "vec_re")
                                (("1"
                                  (CASE
                                      "vec_2_env(max_var(ode), x, env_sol(D, envi, ode)(car(p))) = (vec_2_env(max_var(ode), x, envi))")
                                  (("1" (ASSERT) NIL NIL)
                                   ("2" (HIDE 2)
                                    (("2" (EXPAND "vec_2_env")
                                      (("2" (DECOMPOSE-EQUALITY 1)
                                        (("1" (CASE "x!1 <  1  + max_var(ode)")
                                          (("1" (ASSERT) NIL NIL)
                                           ("2" (ASSERT)
                                            (("2" (EXPAND "env_sol" 2 1)
                                              (("2"
                                                (TYPEPRED
                                                 "env_at_t(ode, fs_sol(D, envi, ode), envi)(car(p))")
                                                (("2" (EXPAND "env_at_t?" -1)
                                                  (("2" (FLATTEN)
                                                    (("2" (INST?)
                                                      (("1" (ASSERT) NIL NIL)
                                                       ("2"
                                                        (LEMMA "nip_max_var")
                                                        (("2" (INST?) NIL NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (SKEEP) (("2" (ASSERT) NIL NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (LEMMA "re_diff_mv")
                            (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (HIDE 2)
                      (("2" (LEMMA "ddl_dom_dom_dir")
                        (("2" (EXPAND "deriv_domain_e_partial?")
                          (("2" (SKEEP)
                            (("2" (INST?)
                              (("2" (ASSERT)
                                (("2" (TYPEPRED "P")
                                  (("2" (EXPAND "ddl_dom?")
                                    (("2" (FLATTEN)
                                      (("2" (INST -2 "i")
                                        (("2" (ASSERT) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|re_der_mv| FORMULA-DECL NIL |chain_rule_re| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|env_2_vec| DEF-DECL "VectorN(k + 1)" |chain_rule_re| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|liftl| CONST-DECL "vec2vec[1](k)" |lift_real_fun_def| |mv_analysis|)
    (|vec2vec| TYPE-EQ-DECL NIL |domain_vec2real_def| |mv_analysis|)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|ddl_dom?| CONST-DECL "bool" |differentiation| NIL)
    (|i| SKOLEM-CONST-DECL "below(1 + max_var(ode))" |chain_rule_re| NIL)
    (|ddl_dom_dom_dir| FORMULA-DECL NIL |chain_rule_re| NIL)
    (|vec_2_env| CONST-DECL "Environment" |chain_rule_re| NIL)
    (|x!1| SKOLEM-CONST-DECL "nat" |chain_rule_re| NIL)
    (|not_in_map| CONST-DECL "bool" |hp_def| NIL)
    (|MapExprInj| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nip_max_var| FORMULA-DECL NIL |hp_def| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|env_at_t?| CONST-DECL "bool" |hp_expr| NIL)
    (|solution_odes_u?| CONST-DECL "bool" |hp_expr| NIL)
    (|fs_sol| CONST-DECL "(solution_odes_u?(D, odes, envi))" |ODEs_equiv| NIL)
    (|env_at_t| CONST-DECL "{env: (env_at_t?(odes, fs, envi, t)) |
   FORALL (env2: (env_at_t?(odes, fs, envi, t))): env = env2}"
     |hp_expr| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|x| SKOLEM-CONST-DECL "(projv(max_var(ode), P))" |chain_rule_re| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|re_diff_mv| FORMULA-DECL NIL |chain_rule_re| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|vec_re| CONST-DECL "real" |chain_rule_re| NIL)
    (|liftr| CONST-DECL "vec2vec[k](1)" |lift_real_fun_def| |mv_analysis|)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (D SKOLEM-CONST-DECL "(dd?)" |chain_rule_re| NIL)
    (|envi| SKOLEM-CONST-DECL "Environment" |chain_rule_re| NIL)
    (|ode| SKOLEM-CONST-DECL "(ODEs_s?(D, envi))" |chain_rule_re| NIL)
    (|deriv_domain_e_partial?| CONST-DECL "bool" |derivative_domain_multi|
     |mv_analysis|)
    (|projv| CONST-DECL "bool" |chain_rule_re| NIL)
    (P SKOLEM-CONST-DECL "(ddl_dom?)" |chain_rule_re| NIL)
    (|same_on_D_same_der| FORMULA-DECL NIL |lift_real_fun_def| |mv_analysis|)
    (|lift_rd| CONST-DECL "domain[1]" |lift_real_fun_def| |mv_analysis|)
    (|domain| TYPE-EQ-DECL NIL |domain_vec2real_def| |mv_analysis|)
    (|real_dom| TYPE-EQ-DECL NIL |lift_real_fun_def| |mv_analysis|)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|env_sol| CONST-DECL "Environment" |ODEs_equiv| NIL)
    (|ddl_dom?| CONST-DECL "bool" |differentiation| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|ODEs_s?| CONST-DECL "bool" |ODEs_equiv| NIL)
    (|dd?| CONST-DECL "bool" |hp_expr| NIL)
    (|ODEs| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|mapexpr_inj| CONST-DECL "bool" |hp_def| NIL)
    (|max_var| CONST-DECL "nat" |hp_def| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|MapExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|dLVar| TYPE-DECL NIL |hp_def| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|null_MapExprInj| NAME-JUDGEMENT "MapExprInj" |hp_def| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic|
     |mv_analysis|))
   SHOSTAK))
 (|with_e_vec_TCC1| 0
  (|with_e_vec_TCC1-1| |nil| 3801772333 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|with_e_vec| SUBTYPE "chain_rule_re.i" "below[length[real](v)]")))
 (|with_e_vec_TCC2| 0
  (|with_e_vec_TCC2-1| |nil| 3801772333
   ("" (SKEEP)
    (("" (TYPEPRED "v + x * e(k+1, i)" "v" "x * e(k+1, i)" "e(k+1, i)")
      (("" (REPLACE -8)
        (("" (REPLACE -6)
          (("" (REPLACE -4)
            (("" (EXPAND "max" -2) (("" (ASSERT) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|Vector| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (+ CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices| |matrices|)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (* CONST-DECL "VectorN(length(v2))" |matrices| |matrices|)
    (< CONST-DECL "bool" |reals| NIL)
    (|e| DEF-DECL "VectorN(m)" |vector_arithmetic| |mv_analysis|)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic|
     |mv_analysis|))
   NIL
   (|with_e_vec| SUBTYPE
    "(matrices.+)(chain_rule_re.v, matrices.*(chain_rule_re.x, vector_arithmetic.e((number_fields.+)(chain_rule_re.k, 1), chain_rule_re.i)))"
    "VectorN((number_fields.+)(1, chain_rule_re.k))")))
 (|with_e_vec| 0
  (|with_e_vec-1| |nil| 3801772395
   ("" (SKEEP)
    (("" (DECOMPOSE-EQUALITY 1)
      (("" (EXPAND "vec_2_env")
        (("" (CASE "x!1=i")
          (("1" (TYPEPRED "i")
            (("1" (ASSERT)
              (("1" (LEMMA "nth_sum")
                (("1" (LEMMA "nth_dist")
                  (("1" (LEMMA "nth_e")
                    (("1" (INST?)
                      (("1" (INST?)
                        (("1" (INST?)
                          (("1" (ASSERT)
                            (("1" (INST?)
                              (("1" (ASSERT)
                                (("1" (INST -3 "i") (("1" (ASSERT) NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (ASSERT)
            (("2" (CASE "NOT x!1<1+k")
              (("1" (ASSERT) NIL NIL)
               ("2" (ASSERT)
                (("2" (LEMMA "nth_e")
                  (("2" (LEMMA "nth_dist")
                    (("2" (LEMMA "nth_sum")
                      (("2" (INST?)
                        (("2" (INST?)
                          (("2" (ASSERT)
                            (("2" (INST?)
                              (("2" (ASSERT)
                                (("2" (INST?)
                                  (("2" (ASSERT)
                                    (("2" (REPLACE -1)
                                      (("2" (REPLACE -2)
                                        (("2" (INST?) (("2" (ASSERT) NIL NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|vec_2_env| CONST-DECL "Environment" |chain_rule_re| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|Vector| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (+ CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices| |matrices|)
    (* CONST-DECL "VectorN(length(v2))" |matrices| |matrices|)
    (|e| DEF-DECL "VectorN(m)" |vector_arithmetic| |mv_analysis|)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nth_dist| FORMULA-DECL NIL |vector_arithmetic| |mv_analysis|)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|nth_e| FORMULA-DECL NIL |vector_arithmetic| |mv_analysis|)
    (|nth_sum| FORMULA-DECL NIL |vector_arithmetic| |mv_analysis|)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic|
     |mv_analysis|))
   SHOSTAK))
 (|derivable_partial_TCC1| 0
  (|derivable_partial_TCC2-1| |nil| 3801825817
   ("" (SKEEP)
    (("" (EXPAND "projv")
      (("" (TYPEPRED "v")
        (("" (INST 1 "env")
          (("" (LEMMA "vec_2_env_id")
            (("" (INST?)
              (("" (LEMMA "env_2_vec_id")
                (("" (INST -1 "k" "env" "v") (("" (ASSERT) NIL NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|projv| CONST-DECL "bool" |chain_rule_re| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|env_2_vec_id| FORMULA-DECL NIL |chain_rule_re| NIL)
    (|vec_2_env_id| FORMULA-DECL NIL |chain_rule_re| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|ddl_dom?| CONST-DECL "bool" |differentiation| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|vec_2_env| CONST-DECL "Environment" |chain_rule_re| NIL)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic|
     |mv_analysis|))
   NIL
   (|derivable_partial| SUBTYPE "chain_rule_re.v"
    "(chain_rule_re.projv(chain_rule_re.k, chain_rule_re.P))")))
 (|derivable_partial_TCC2| 0
  (|derivable_partial_TCC1-1| |nil| 3801777685
   ("" (LEMMA "ddl_dom_dom_dir")
    (("" (SKEEP) (("" (INST -1 "k" "i" "P") NIL NIL)) NIL)) NIL)
   ((|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic|
     |mv_analysis|)
    (|ddl_dom?| CONST-DECL "bool" |differentiation| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|ddl_dom_dom_dir| FORMULA-DECL NIL |chain_rule_re| NIL))
   NIL
   (|derivable_partial| SUBTYPE
    "chain_rule_re.projv(chain_rule_re.k, chain_rule_re.P)"
    "(derivative_domain_multi[(number_fields.+)(1, chain_rule_re.k)].deriv_domain_partial?(vector_arithmetic.e((number_fields.+)(chain_rule_re.k, 1), chain_rule_re.i)))")))
 (|derivable_partial_TCC3| 0
  (|derivable_partial_TCC3-1| |nil| 3801777685
   ("" (SKEEP)
    (("" (TYPEPRED "v")
      (("" (TYPEPRED "env")
        (("" (TYPEPRED "P")
          (("" (EXPAND "projv" -6)
            (("" (SKEEP)
              (("" (EXPAND "ddl_dom?")
                (("" (FLATTEN)
                  (("" (EXPAND "connected?")
                    ((""
                      (INST -1 "env" "env!1"
                       "LAMBDA(i:nat): IF i <= k THEN env!1(i) ELSE env(i) ENDIF")
                      (("1" (ASSERT)
                        (("1"
                          (CASE
                              "vec_2_env(k, v, env) = LAMBDA (i: nat): IF i <= k THEN env!1(i) ELSE env(i) ENDIF")
                          (("1" (ASSERT) NIL NIL)
                           ("2" (DECOMPOSE-EQUALITY 1)
                            (("2" (LIFT-IF 1)
                              (("2" (SPLIT 1)
                                (("1" (FLATTEN)
                                  (("1" (ASSERT)
                                    (("1" (LEMMA "env_2_vec_nth")
                                      (("1" (INST -1 "k" "env!1" "x!1")
                                        (("1" (ASSERT)
                                          (("1" (LEMMA "list_extensionality")
                                            (("1"
                                              (INST -1 "env_2_vec(k, env!1)"
                                               "v")
                                              (("1" (FLATTEN)
                                                (("1" (SPLIT -1)
                                                  (("1" (FLATTEN)
                                                    (("1" (INST -2 "x!1")
                                                      (("1" (REPLACE -2)
                                                        (("1" (REPLACE -12)
                                                          (("1"
                                                            (REPLACE -1 1 RL)
                                                            (("1"
                                                              (EXPAND
                                                               "vec_2_env" 1 1)
                                                              (("1" (PROPAX)
                                                                NIL NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (PROPAX) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (FLATTEN)
                                  (("2" (EXPAND "vec_2_env" 2)
                                    (("2" (ASSERT) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (EXPAND "between?" 1)
                        (("2" (SKEEP)
                          (("2" (LIFT-IF 1)
                            (("2" (SPLIT 1)
                              (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)
                               ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|vec_2_env| CONST-DECL "Environment" |chain_rule_re| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|ddl_dom?| CONST-DECL "bool" |differentiation| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|connected?| CONST-DECL "bool" |differentiation| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic|
     |mv_analysis|))
   NIL
   (|derivable_partial| SUBTYPE
    "chain_rule_re.vec_2_env(chain_rule_re.k, chain_rule_re.v, chain_rule_re.env)"
    "(chain_rule_re.P)")))
 (|derivable_partial| 0
  (|derivable_partial-1| |nil| 3801825137
   ("" (SKEEP)
    (("" (SPLIT 1)
      (("1" (FLATTEN)
        (("1" (EXPAND "derivable?")
          (("1" (EXPAND "init_partial?")
            (("1" (EXPAND "restrict" -1)
              (("1" (EXPAND "vec_re" -1)
                (("1" (EXPAND "derivable?")
                  (("1" (EXPAND "convergent?")
                    (("1" (SKEEP)
                      (("1" (INST 1 "l")
                        (("1" (EXPAND "convergence")
                          (("1" (EXPAND "NQ")
                            (("1" (EXPAND "convergence")
                              (("1" (FLATTEN)
                                (("1" (SPLIT 1)
                                  (("1" (EXPAND "adh")
                                    (("1" (SKEEP)
                                      (("1" (INST -1 "e!1")
                                        (("1" (SKEEP)
                                          (("1" (TYPEPRED "x")
                                            (("1" (EXPAND "A" -2)
                                              (("1" (EXPAND "D_down" -2)
                                                (("1" (TYPEPRED "v")
                                                  (("1" (HIDE -1)
                                                    (("1" (INST 1 "x")
                                                      (("1" (ASSERT) NIL NIL)
                                                       ("2" (TYPEPRED "x")
                                                        (("2" (TYPEPRED "v")
                                                          (("2" (EXPAND "A")
                                                            (("2" (ASSERT)
                                                              (("2"
                                                                (EXPAND
                                                                 "D_down" -5)
                                                                (("2"
                                                                  (TYPEPRED
                                                                   "v")
                                                                  (("2"
                                                                    (EXPAND
                                                                     "projv"
                                                                     -8)
                                                                    (("2"
                                                                      (ASSERT)
                                                                      (("2"
                                                                        (LEMMA
                                                                         "projv_proj")
                                                                        (("2"
                                                                          (INST
                                                                           -1
                                                                           "k"
                                                                           "P"
                                                                           "v"
                                                                           "x"
                                                                           "i")
                                                                          (("1"
                                                                            (ASSERT)
                                                                            (("1"
                                                                              (GRIND)
                                                                              NIL
                                                                              NIL))
                                                                            NIL)
                                                                           ("2"
                                                                            (TYPEPRED
                                                                             "P")
                                                                            (("2"
                                                                              (EXPAND
                                                                               "ddl_dom?"
                                                                               -1)
                                                                              (("2"
                                                                                (FLATTEN)
                                                                                NIL
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (ASSERT)
                                    (("2" (SKEEP)
                                      (("2" (INST -2 "epsilon")
                                        (("2" (SKEEP)
                                          (("2" (INST 1 "delta")
                                            (("2" (SKEEP)
                                              (("2" (LEMMA "with_e_vec")
                                                (("2" (TYPEPRED "i")
                                                  (("2"
                                                    (EXPAND "vec_2_env" 1 3)
                                                    (("2" (ASSERT)
                                                      (("2"
                                                        (INST -2 "k" "env" "i"
                                                         "x" "re" "v")
                                                        (("2" (TYPEPRED "v")
                                                          (("2"
                                                            (CASE
                                                                "vec_2_env(k, v + 0 * e(1 + k, i), env) = env")
                                                            (("1" (REPLACE -1)
                                                              (("1"
                                                                (CASE
                                                                    "(LAMBDA (i: nat) -> real:
                                            IF i < 1 + k THEN nth(v, i) ELSE env(i) ENDIF)
                                           WITH [(i) := vec_2_env(k, v, env)(i)] = env")
                                                                (("1"
                                                                  (REPLACE -1)
                                                                  (("1"
                                                                    (ASSERT)
                                                                    (("1"
                                                                      (ASSERT)
                                                                      (("1"
                                                                        (CASE
                                                                            "vec_2_env(k, v, env)
                                              WITH [(i) := vec_2_env(k, v, env)(i) + x] =vec_2_env(k, v + x * e(1 + k, i), env)")
                                                                        (("1"
                                                                          (ASSERT)
                                                                          (("1"
                                                                            (REPLACE
                                                                             -1
                                                                             1)
                                                                            (("1"
                                                                              (INST
                                                                               -12
                                                                               "x")
                                                                              (("1"
                                                                                (ASSERT)
                                                                                NIL
                                                                                NIL)
                                                                               ("2"
                                                                                (EXPAND
                                                                                 "A"
                                                                                 1)
                                                                                (("2"
                                                                                  (HIDE
                                                                                   2)
                                                                                  (("2"
                                                                                    (EXPAND
                                                                                     "D_down"
                                                                                     1
                                                                                     1)
                                                                                    (("2"
                                                                                      (TYPEPRED
                                                                                       "x")
                                                                                      (("2"
                                                                                        (EXPAND
                                                                                         "A"
                                                                                         -2)
                                                                                        (("2"
                                                                                          (LEMMA
                                                                                           "proj_projv")
                                                                                          (("2"
                                                                                            (INST?)
                                                                                            (("1"
                                                                                              (ASSERT)
                                                                                              NIL
                                                                                              NIL)
                                                                                             ("2"
                                                                                              (TYPEPRED
                                                                                               "v")
                                                                                              (("2"
                                                                                                (EXPAND
                                                                                                 "projv"
                                                                                                 1
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (INST
                                                                                                   1
                                                                                                   "env")
                                                                                                  (("2"
                                                                                                    (ASSERT)
                                                                                                    (("2"
                                                                                                      (REPLACE
                                                                                                       -3
                                                                                                       1
                                                                                                       RL)
                                                                                                      (("2"
                                                                                                        (LEMMA
                                                                                                         "env_2_vec_id")
                                                                                                        (("2"
                                                                                                          (INST?)
                                                                                                          NIL
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL)
                                                                                             ("3"
                                                                                              (ASSERT)
                                                                                              (("3"
                                                                                                (TYPEPRED
                                                                                                 "P")
                                                                                                (("3"
                                                                                                  (EXPAND
                                                                                                   "ddl_dom?"
                                                                                                   -1)
                                                                                                  (("3"
                                                                                                    (PROPAX)
                                                                                                    NIL
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL)
                                                                         ("2"
                                                                          (EXPAND
                                                                           "vec_2_env"
                                                                           1 1)
                                                                          (("2"
                                                                            (ASSERT)
                                                                            (("2"
                                                                              (EXPAND
                                                                               "vec_2_env"
                                                                               1)
                                                                              (("2"
                                                                                (REPLACE
                                                                                 -5)
                                                                                (("2"
                                                                                  (DECOMPOSE-EQUALITY
                                                                                   1)
                                                                                  (("1"
                                                                                    (CASE
                                                                                        "x!1=i")
                                                                                    (("1"
                                                                                      (REPLACE
                                                                                       -1)
                                                                                      (("1"
                                                                                        (ASSERT)
                                                                                        (("1"
                                                                                          (LEMMA
                                                                                           "nth_sum")
                                                                                          (("1"
                                                                                            (INST?)
                                                                                            (("1"
                                                                                              (ASSERT)
                                                                                              (("1"
                                                                                                (INST
                                                                                                 -1
                                                                                                 "i")
                                                                                                (("1"
                                                                                                  (REPLACE
                                                                                                   -1
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (LEMMA
                                                                                                     "nth_dist")
                                                                                                    (("1"
                                                                                                      (INST?)
                                                                                                      (("1"
                                                                                                        (REPLACE
                                                                                                         -1
                                                                                                         1)
                                                                                                        (("1"
                                                                                                          (LEMMA
                                                                                                           "nth_e")
                                                                                                          (("1"
                                                                                                            (INST
                                                                                                             -1
                                                                                                             "1+k"
                                                                                                             "i"
                                                                                                             "i")
                                                                                                            (("1"
                                                                                                              (ASSERT)
                                                                                                              NIL
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL)
                                                                                     ("2"
                                                                                      (ASSERT)
                                                                                      (("2"
                                                                                        (TYPEPRED
                                                                                         "x!1")
                                                                                        (("2"
                                                                                          (CASE
                                                                                              "x!1<1+k")
                                                                                          (("1"
                                                                                            (ASSERT)
                                                                                            (("1"
                                                                                              (LEMMA
                                                                                               "nth_sum")
                                                                                              (("1"
                                                                                                (INST?)
                                                                                                (("1"
                                                                                                  (ASSERT)
                                                                                                  (("1"
                                                                                                    (INST
                                                                                                     -1
                                                                                                     "x!1")
                                                                                                    (("1"
                                                                                                      (LEMMA
                                                                                                       "nth_dist")
                                                                                                      (("1"
                                                                                                        (LEMMA
                                                                                                         "nth_e")
                                                                                                        (("1"
                                                                                                          (REPLACE
                                                                                                           -3
                                                                                                           2)
                                                                                                          (("1"
                                                                                                            (INST?)
                                                                                                            (("1"
                                                                                                              (INST?)
                                                                                                              (("1"
                                                                                                                (REPLACE
                                                                                                                 -2
                                                                                                                 2)
                                                                                                                (("1"
                                                                                                                  (ASSERT)
                                                                                                                  NIL
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL)
                                                                                           ("2"
                                                                                            (ASSERT)
                                                                                            NIL
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL)
                                                                                   ("2"
                                                                                    (SKEEP)
                                                                                    (("2"
                                                                                      (ASSERT)
                                                                                      (("2"
                                                                                        (TYPEPRED
                                                                                         "v+x*e(1+k,i)"
                                                                                         "v"
                                                                                         "x*e(1+k,i)"
                                                                                         "e(1+k,i)")
                                                                                        (("2"
                                                                                          (ASSERT)
                                                                                          NIL
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL)
                                                                                   ("3"
                                                                                    (SKEEP)
                                                                                    (("3"
                                                                                      (ASSERT)
                                                                                      NIL
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL)
                                                                 ("2" (HIDE 2)
                                                                  (("2"
                                                                    (ASSERT)
                                                                    (("2"
                                                                      (DECOMPOSE-EQUALITY
                                                                       1)
                                                                      (("1"
                                                                        (CASE
                                                                            "x!1<1+k")
                                                                        (("1"
                                                                          (ASSERT)
                                                                          (("1"
                                                                            (LIFT-IF
                                                                             1)
                                                                            (("1"
                                                                              (ASSERT)
                                                                              (("1"
                                                                                (CASE
                                                                                    "x!1=i")
                                                                                (("1"
                                                                                  (ASSERT)
                                                                                  NIL
                                                                                  NIL)
                                                                                 ("2"
                                                                                  (ASSERT)
                                                                                  (("2"
                                                                                    (DECOMPOSE-EQUALITY
                                                                                     -5)
                                                                                    (("2"
                                                                                      (INST
                                                                                       -1
                                                                                       "x!1")
                                                                                      (("2"
                                                                                        (EXPAND
                                                                                         "vec_2_env"
                                                                                         -1)
                                                                                        (("2"
                                                                                          (PROPAX)
                                                                                          NIL
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL)
                                                                         ("2"
                                                                          (ASSERT)
                                                                          NIL
                                                                          NIL))
                                                                        NIL)
                                                                       ("2"
                                                                        (SKEEP)
                                                                        (("2"
                                                                          (ASSERT)
                                                                          NIL
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL)
                                                                 ("3" (HIDE 2)
                                                                  (("3" (SKEEP)
                                                                    (("3"
                                                                      (ASSERT)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL)
                                                             ("2" (HIDE 2)
                                                              (("2" (ASSERT)
                                                                (("2"
                                                                  (CASE
                                                                      "v + 0 * e(1 + k, i) = v")
                                                                  (("1"
                                                                    (ASSERT)
                                                                    NIL NIL)
                                                                   ("2"
                                                                    (LEMMA
                                                                     "mult_zero")
                                                                    (("2"
                                                                      (INST -1
                                                                       "e(1+k,i)")
                                                                      (("2"
                                                                        (REPLACE
                                                                         -1)
                                                                        (("2"
                                                                          (LEMMA
                                                                           "zero_id")
                                                                          (("2"
                                                                            (INST
                                                                             -1
                                                                             "v")
                                                                            (("2"
                                                                              (ASSERT)
                                                                              NIL
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL)
                                                             ("3" (ASSERT)
                                                              (("3"
                                                                (TYPEPRED
                                                                 "e(1+k,i)")
                                                                (("3" (ASSERT)
                                                                  (("3"
                                                                    (TYPEPRED
                                                                     "v + 0 * e(1 + k, i)"
                                                                     "v"
                                                                     " 0 * e(1 + k, i)"
                                                                     "e(1+k,i)")
                                                                    (("3"
                                                                      (ASSERT)
                                                                      (("3"
                                                                        (REPLACE
                                                                         -2)
                                                                        (("3"
                                                                          (REPLACE
                                                                           -4)
                                                                          (("3"
                                                                            (REPLACE
                                                                             -7)
                                                                            (("3"
                                                                              (HIDE
                                                                               -1
                                                                               -3
                                                                               -6
                                                                               -8)
                                                                              (("3"
                                                                                (REPLACE
                                                                                 -5)
                                                                                (("3"
                                                                                  (EXPAND
                                                                                   "max"
                                                                                   -1)
                                                                                  (("3"
                                                                                    (ASSERT)
                                                                                    NIL
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (FLATTEN)
        (("2" (EXPAND "derivable?" -1)
          (("2" (EXPAND "init_partial?" 1 1)
            (("2" (EXPAND "restrict" 1 1)
              (("2" (EXPAND "derivable?" -1)
                (("2" (EXPAND "derivable?" 1 1)
                  (("2" (EXPAND "NQ")
                    (("2" (EXPAND "convergent?")
                      (("2" (SKEEP)
                        (("2" (INST 1 "l")
                          (("2" (EXPAND "convergence")
                            (("2" (EXPAND "convergence")
                              (("2" (FLATTEN)
                                (("2" (SPLIT 1)
                                  (("1" (EXPAND "adh" 1)
                                    (("1" (EXPAND "adh" -1)
                                      (("1" (SKEEP)
                                        (("1" (INST -1 "e!1")
                                          (("1" (SKEEP)
                                            (("1" (INST 1 "x")
                                              (("1" (ASSERT) NIL NIL)
                                               ("2" (EXPAND "A")
                                                (("2" (TYPEPRED "x")
                                                  (("2" (EXPAND "D_down" 1 1)
                                                    (("2" (FLATTEN)
                                                      (("2" (EXPAND "A" -1)
                                                        (("2"
                                                          (EXPAND "vec_2_env"
                                                                  -1)
                                                          (("2"
                                                            (LEMMA
                                                             "proj_projv")
                                                            (("2" (INST?)
                                                              (("1" (ASSERT)
                                                                NIL NIL)
                                                               ("2"
                                                                (EXPAND "projv"
                                                                        1)
                                                                (("2"
                                                                  (TYPEPRED
                                                                   "v")
                                                                  (("2"
                                                                    (INST 1
                                                                     "env")
                                                                    (("2"
                                                                      (ASSERT)
                                                                      (("2"
                                                                        (LEMMA
                                                                         "env_2_vec_id")
                                                                        (("2"
                                                                          (INST?)
                                                                          (("2"
                                                                            (ASSERT)
                                                                            NIL
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL)
                                                               ("3"
                                                                (TYPEPRED "P")
                                                                (("3"
                                                                  (EXPAND
                                                                   "ddl_dom?"
                                                                   -1)
                                                                  (("3"
                                                                    (FLATTEN)
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (SKEEP)
                                    (("2" (INST -2 "epsilon")
                                      (("2" (SKEEP)
                                        (("2" (INST 1 "delta")
                                          (("2" (SKEEP)
                                            (("2" (INST -4 "x")
                                              (("1" (ASSERT)
                                                (("1" (EXPAND "vec_re" 1)
                                                  (("1" (ASSERT)
                                                    (("1" (LEMMA "with_e_vec")
                                                      (("1" (TYPEPRED "i")
                                                        (("1"
                                                          (EXPAND "vec_2_env"
                                                                  -6 3)
                                                          (("1" (ASSERT)
                                                            (("1"
                                                              (INST -2 "k"
                                                               "env" "i" "x"
                                                               "re" "v")
                                                              (("1"
                                                                (TYPEPRED "v")
                                                                (("1"
                                                                  (CASE
                                                                      "vec_2_env(k, v + 0 * e(1 + k, i), env) = env")
                                                                  (("1"
                                                                    (REPLACE
                                                                     -1)
                                                                    (("1"
                                                                      (CASE
                                                                          "(LAMBDA (i: nat) -> real:
                                              IF i < 1 + k THEN nth(v, i) ELSE env(i) ENDIF)
                                             WITH [(i) := vec_2_env(k, v, env)(i)] = env")
                                                                      (("1"
                                                                        (REPLACE
                                                                         -1)
                                                                        (("1"
                                                                          (CASE
                                                                              "vec_2_env(k, v, env)
                                                WITH [(i) := vec_2_env(k, v, env)(i) + x] =vec_2_env(k, v + x * e(1 + k, i), env)")
                                                                          (("1"
                                                                            (EXPAND
                                                                             "vec_2_env"
                                                                             -12
                                                                             2)
                                                                            (("1"
                                                                              (REPLACE
                                                                               -8
                                                                               -12)
                                                                              (("1"
                                                                                (PROPAX)
                                                                                NIL
                                                                                NIL))
                                                                              NIL))
                                                                            NIL)
                                                                           ("2"
                                                                            (HIDE
                                                                             2)
                                                                            (("2"
                                                                              (EXPAND
                                                                               "vec_2_env"
                                                                               1
                                                                               1)
                                                                              (("2"
                                                                                (ASSERT
                                                                                 :FLUSH?
                                                                                 T)
                                                                                (("2"
                                                                                  (DECOMPOSE-EQUALITY
                                                                                   1)
                                                                                  (("1"
                                                                                    (LIFT-IF
                                                                                     1)
                                                                                    (("1"
                                                                                      (SPLIT
                                                                                       1)
                                                                                      (("1"
                                                                                        (FLATTEN)
                                                                                        (("1"
                                                                                          (ASSERT)
                                                                                          (("1"
                                                                                            (EXPAND
                                                                                             "vec_2_env"
                                                                                             1
                                                                                             1)
                                                                                            (("1"
                                                                                              (EXPAND
                                                                                               "vec_2_env"
                                                                                               1)
                                                                                              (("1"
                                                                                                (ASSERT)
                                                                                                (("1"
                                                                                                  (LEMMA
                                                                                                   "nth_sum")
                                                                                                  (("1"
                                                                                                    (INST?)
                                                                                                    (("1"
                                                                                                      (ASSERT)
                                                                                                      (("1"
                                                                                                        (INST
                                                                                                         -1
                                                                                                         "i")
                                                                                                        (("1"
                                                                                                          (LEMMA
                                                                                                           "nth_dist")
                                                                                                          (("1"
                                                                                                            (INST?)
                                                                                                            (("1"
                                                                                                              (LEMMA
                                                                                                               "nth_e")
                                                                                                              (("1"
                                                                                                                (INST
                                                                                                                 -1
                                                                                                                 "1+k"
                                                                                                                 "i"
                                                                                                                 "i")
                                                                                                                (("1"
                                                                                                                  (ASSERT)
                                                                                                                  NIL
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL)
                                                                                       ("2"
                                                                                        (ASSERT)
                                                                                        (("2"
                                                                                          (TYPEPRED
                                                                                           "x!1")
                                                                                          (("2"
                                                                                            (CASE
                                                                                                "x!1<1+k")
                                                                                            (("1"
                                                                                              (ASSERT)
                                                                                              (("1"
                                                                                                (LEMMA
                                                                                                 "nth_sum")
                                                                                                (("1"
                                                                                                  (INST?)
                                                                                                  (("1"
                                                                                                    (ASSERT)
                                                                                                    (("1"
                                                                                                      (FLATTEN)
                                                                                                      (("1"
                                                                                                        (ASSERT)
                                                                                                        (("1"
                                                                                                          (EXPAND
                                                                                                           "vec_2_env")
                                                                                                          (("1"
                                                                                                            (INST
                                                                                                             -1
                                                                                                             "x!1")
                                                                                                            (("1"
                                                                                                              (LEMMA
                                                                                                               "nth_dist")
                                                                                                              (("1"
                                                                                                                (LEMMA
                                                                                                                 "nth_e")
                                                                                                                (("1"
                                                                                                                  (REPLACE
                                                                                                                   -3
                                                                                                                   2)
                                                                                                                  (("1"
                                                                                                                    (INST?)
                                                                                                                    (("1"
                                                                                                                      (INST?)
                                                                                                                      (("1"
                                                                                                                        (REPLACE
                                                                                                                         -2
                                                                                                                         2)
                                                                                                                        (("1"
                                                                                                                          (ASSERT)
                                                                                                                          NIL
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL)
                                                                                             ("2"
                                                                                              (ASSERT)
                                                                                              NIL
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL)
                                                                                   ("2"
                                                                                    (SKEEP)
                                                                                    (("2"
                                                                                      (ASSERT)
                                                                                      NIL
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL)
                                                                       ("2"
                                                                        (ASSERT
                                                                         :FLUSH?
                                                                         T)
                                                                        (("2"
                                                                          (DECOMPOSE-EQUALITY
                                                                           1)
                                                                          (("1"
                                                                            (CASE
                                                                                "x!1<1+k")
                                                                            (("1"
                                                                              (ASSERT)
                                                                              (("1"
                                                                                (HIDE
                                                                                 -11)
                                                                                (("1"
                                                                                  (LIFT-IF
                                                                                   1)
                                                                                  (("1"
                                                                                    (SPLIT
                                                                                     1)
                                                                                    (("1"
                                                                                      (FLATTEN)
                                                                                      (("1"
                                                                                        (ASSERT)
                                                                                        NIL
                                                                                        NIL))
                                                                                      NIL)
                                                                                     ("2"
                                                                                      (FLATTEN)
                                                                                      (("2"
                                                                                        (ASSERT)
                                                                                        (("2"
                                                                                          (DECOMPOSE-EQUALITY
                                                                                           -5)
                                                                                          (("2"
                                                                                            (INST
                                                                                             -1
                                                                                             "x!1")
                                                                                            (("2"
                                                                                              (EXPAND
                                                                                               "vec_2_env")
                                                                                              (("2"
                                                                                                (PROPAX)
                                                                                                NIL
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL)
                                                                             ("2"
                                                                              (ASSERT)
                                                                              NIL
                                                                              NIL))
                                                                            NIL)
                                                                           ("2"
                                                                            (SKEEP)
                                                                            (("2"
                                                                              (ASSERT)
                                                                              NIL
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL)
                                                                       ("3"
                                                                        (SKEEP)
                                                                        (("3"
                                                                          (ASSERT)
                                                                          NIL
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL)
                                                                   ("2"
                                                                    (CASE
                                                                        "v + 0 * e(1 + k, i) = v")
                                                                    (("1"
                                                                      (ASSERT)
                                                                      NIL NIL)
                                                                     ("2"
                                                                      (LEMMA
                                                                       "mult_zero")
                                                                      (("2"
                                                                        (INST
                                                                         -1
                                                                         "e(1+k,i)")
                                                                        (("2"
                                                                          (REPLACE
                                                                           -1)
                                                                          (("2"
                                                                            (LEMMA
                                                                             "zero_id")
                                                                            (("2"
                                                                              (INST
                                                                               -1
                                                                               "v")
                                                                              (("2"
                                                                                (ASSERT)
                                                                                NIL
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (TYPEPRED "x")
                                                (("2" (EXPAND "A")
                                                  (("2" (EXPAND "D_down" -2)
                                                    (("2" (FLATTEN)
                                                      (("2"
                                                        (LEMMA "projv_proj")
                                                        (("2" (INST?)
                                                          (("1"
                                                            (EXPAND "vec_2_env"
                                                                    2 1)
                                                            (("1" (ASSERT) NIL
                                                              NIL))
                                                            NIL)
                                                           ("2" (TYPEPRED "P")
                                                            (("2"
                                                              (EXPAND
                                                               "ddl_dom?" -1)
                                                              (("2" (FLATTEN)
                                                                NIL NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|derivable?| CONST-DECL "bool" |differentiation| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (|derivable?| CONST-DECL "bool" |derivatives_def| |analysis|)
    (|convergence| CONST-DECL "bool" |lim_of_functions| |analysis|)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|convergence| CONST-DECL "bool" |convergence_functions| |analysis|)
    (|x| SKOLEM-CONST-DECL
     "(A[(D_down[1 + k](projv(k, P), v, e(k + 1, i)))](0))" |chain_rule_re|
     NIL)
    (|v| SKOLEM-CONST-DECL "{vv: VectorN(1 + k) | vec_2_env(k, vv, env) = env}"
     |chain_rule_re| NIL)
    (|env| SKOLEM-CONST-DECL "(P)" |chain_rule_re| NIL)
    (P SKOLEM-CONST-DECL "(ddl_dom?(i))" |chain_rule_re| NIL)
    (|i| SKOLEM-CONST-DECL "below(1 + k)" |chain_rule_re| NIL)
    (|k| SKOLEM-CONST-DECL "nat" |chain_rule_re| NIL)
    (|proj| CONST-DECL "bool" |differentiation| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_is_complete| NAME-JUDGEMENT "metric_complete" |real_topology|
     |metric_space|)
    (|fullset_is_clopen| NAME-JUDGEMENT
     "clopen[real, (metric_induced_topology)]" |real_topology| |metric_space|)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nonzero_abs_is_pos| APPLICATION-JUDGEMENT "{y: posreal | y >= x}"
     |real_defs| NIL)
    (|connected?| CONST-DECL "bool" |differentiation| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|projv_proj| FORMULA-DECL NIL |chain_rule_re| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|domain| TYPE-EQ-DECL NIL |domain_vec2real_def| |mv_analysis|)
    (|D_down| CONST-DECL "bool" |init_partial_def| |mv_analysis|)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|projv| CONST-DECL "bool" |chain_rule_re| NIL)
    (|ddl_dom?| CONST-DECL "bool" |differentiation| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|vec_2_env| CONST-DECL "Environment" |chain_rule_re| NIL)
    (|e| DEF-DECL "VectorN(m)" |vector_arithmetic| |mv_analysis|)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (A CONST-DECL "setof[nzreal]" |derivatives_def| |analysis|)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|adh| CONST-DECL "setof[real]" |convergence_functions| |analysis|)
    (|zero_id| FORMULA-DECL NIL |vector_arithmetic| |mv_analysis|)
    (|mult_zero| FORMULA-DECL NIL |vector_arithmetic| |mv_analysis|)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nth_sum| FORMULA-DECL NIL |vector_arithmetic| |mv_analysis|)
    (|nth_e| FORMULA-DECL NIL |vector_arithmetic| |mv_analysis|)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|nth_dist| FORMULA-DECL NIL |vector_arithmetic| |mv_analysis|)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|x| SKOLEM-CONST-DECL "(A[(proj(i)(P))](vec_2_env(k, v, env)(i)))"
     |chain_rule_re| NIL)
    (|proj_projv| FORMULA-DECL NIL |chain_rule_re| NIL)
    (|env_2_vec_id| FORMULA-DECL NIL |chain_rule_re| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|Vector| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (+ CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices| |matrices|)
    (* CONST-DECL "VectorN(length(v2))" |matrices| |matrices|)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|with_e_vec| FORMULA-DECL NIL |chain_rule_re| NIL)
    (NQ CONST-DECL "real" |derivatives_def| |analysis|)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|convergent?| CONST-DECL "bool" |lim_of_functions| |analysis|)
    (|vec_re| CONST-DECL "real" |chain_rule_re| NIL)
    (|init_partial?| CONST-DECL "bool" |init_partial_def| |mv_analysis|)
    (|x| SKOLEM-CONST-DECL "(A[(proj(i)(P))](vec_2_env(k, v, env)(i)))"
     |chain_rule_re| NIL)
    (|x| SKOLEM-CONST-DECL
     "(A[(D_down[1 + k](projv(k, P), v, e(k + 1, i)))](0))" |chain_rule_re|
     NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic|
     |mv_analysis|))
   SHOSTAK))
 (|derivable_partial_D_TCC1| 0
  (|derivable_partial_D_TCC1-1| |nil| 3806919202
   ("" (SKEEP) (("" (LEMMA "ddl_dom_dom_dir") (("" (INST?) NIL NIL)) NIL)) NIL)
   ((|ddl_dom_dom_dir| FORMULA-DECL NIL |chain_rule_re| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|ddl_dom?| CONST-DECL "bool" |differentiation| NIL))
   NIL
   (|derivable_partial_D| SUBTYPE
    "chain_rule_re.projv(chain_rule_re.k, chain_rule_re.P)"
    "(derivative_domain_multi[(number_fields.+)(1, chain_rule_re.k)].deriv_domain_partial?(vector_arithmetic.e((number_fields.+)(chain_rule_re.k, 1), chain_rule_re.i)))")))
 (|derivable_partial_D| 0
  (|derivable_partial_D-1| |nil| 3806918710
   ("" (SKEEP)
    (("" (LEMMA "derivable_partial")
      (("" (SPLIT 1)
        (("1" (FLATTEN)
          (("1" (EXPAND "derivable?" 1)
            (("1" (SKEEP)
              (("1" (INST -1 "env")
                (("1" (ASSERT)
                  (("1" (INST?)
                    (("1" (INST -2 "env_2_vec(k,env)")
                      (("1" (ASSERT)
                        (("1" (LEMMA "vec_2_env_id")
                          (("1" (INST?)
                            (("1" (ASSERT)
                              (("1" (HIDE 1)
                                (("1" (EXPAND "init_partial?" -2)
                                  (("1" (INST -2 "env_2_vec(k,env)") NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (LEMMA "vec_2_env_id") (("2" (INST?) NIL NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (FLATTEN)
          (("2" (SKEEP)
            (("2" (EXPAND "init_partial?" 1)
              (("2" (SKEEP)
                (("2" (TYPEPRED "p")
                  (("2" (HIDE -1)
                    (("2" (EXPAND "projv" -2)
                      (("2" (TYPEPRED "P")
                        (("2" (EXPAND "ddl_dom?" -1)
                          (("2" (FLATTEN)
                            (("2" (EXPAND "connected?" -1)
                              (("2" (SKEEP -4)
                                (("2"
                                  (NAME "envwow"
                                        "LAMBDA(i:nat): IF i <= k THEN nth(p,i) ELSE env(i) ENDIF")
                                  (("1" (INST -7 "k" "i" "P" "envwow" "p" "re")
                                    (("1" (ASSERT)
                                      (("1" (FLATTEN)
                                        (("1" (EXPAND "derivable?" -6)
                                          (("1"
                                            (INST -6 "vec_2_env(k,p,envwow)")
                                            (("1" (ASSERT)
                                              (("1" (HIDE -7)
                                                (("1"
                                                  (CASE
                                                      "vec_re(k, envwow, re) = vec_re(k, env, re)")
                                                  (("1" (ASSERT) NIL NIL)
                                                   ("2" (DECOMPOSE-EQUALITY 1)
                                                    (("2" (HIDE 2)
                                                      (("2" (EXPAND "vec_re" 1)
                                                        (("2"
                                                          (CASE
                                                              "vec_2_env(k, x!1, envwow) = vec_2_env(k, x!1, env)")
                                                          (("1" (ASSERT) NIL
                                                            NIL)
                                                           ("2" (HIDE 2)
                                                            (("2"
                                                              (DECOMPOSE-EQUALITY
                                                               1)
                                                              (("2"
                                                                (EXPAND
                                                                 "vec_2_env" 1)
                                                                (("2" (ASSERT)
                                                                  (("2"
                                                                    (LIFT-IF 1)
                                                                    (("2"
                                                                      (SPLIT 1)
                                                                      (("1"
                                                                        (PROPAX)
                                                                        NIL
                                                                        NIL)
                                                                       ("2"
                                                                        (FLATTEN)
                                                                        (("2"
                                                                          (ASSERT)
                                                                          (("2"
                                                                            (REPLACE
                                                                             -1
                                                                             2
                                                                             RL)
                                                                            (("2"
                                                                              (ASSERT)
                                                                              NIL
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2"
                                              (INST -2 "env!1" "env"
                                               "vec_2_env(k,p,envwow)")
                                              (("2" (ASSERT)
                                                (("2" (HIDE 2 3)
                                                  (("2" (EXPAND "between?" 1)
                                                    (("2" (SKEEP)
                                                      (("2"
                                                        (EXPAND "vec_2_env" 1)
                                                        (("2" (SPLIT 1)
                                                          (("1" (LIFT-IF 1)
                                                            (("1" (SPLIT 1)
                                                              (("1" (FLATTEN)
                                                                (("1" (ASSERT)
                                                                  (("1"
                                                                    (LEMMA
                                                                     "env_2_vec_nth")
                                                                    (("1"
                                                                      (INST -1
                                                                       "k"
                                                                       "env!1"
                                                                       "i!1")
                                                                      (("1"
                                                                        (ASSERT)
                                                                        NIL
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL)
                                                               ("2" (FLATTEN)
                                                                (("2" (ASSERT)
                                                                  (("2"
                                                                    (REPLACE -1
                                                                             2
                                                                             RL)
                                                                    (("2"
                                                                      (ASSERT)
                                                                      (("2"
                                                                        (EXPAND
                                                                         " vec_2_env"
                                                                         3)
                                                                        (("2"
                                                                          (REPLACE
                                                                           -1 3
                                                                           RL)
                                                                          (("2"
                                                                            (ASSERT)
                                                                            NIL
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL)
                                                           ("2" (ASSERT)
                                                            (("2" (LIFT-IF 1)
                                                              (("2" (SPLIT 1)
                                                                (("1" (FLATTEN)
                                                                  (("1"
                                                                    (ASSERT)
                                                                    (("1"
                                                                      (LEMMA
                                                                       "env_2_vec_nth")
                                                                      (("1"
                                                                        (INST
                                                                         -1 "k"
                                                                         "env!1"
                                                                         "i!1")
                                                                        (("1"
                                                                          (ASSERT)
                                                                          (("1"
                                                                            (LEMMA
                                                                             "list_extensionality[real]")
                                                                            (("1"
                                                                              (INST
                                                                               -1
                                                                               "p"
                                                                               "env_2_vec(k,env!1)")
                                                                              (("1"
                                                                                (FLATTEN)
                                                                                (("1"
                                                                                  (HIDE
                                                                                   -2)
                                                                                  (("1"
                                                                                    (SPLIT
                                                                                     -1)
                                                                                    (("1"
                                                                                      (FLATTEN)
                                                                                      (("1"
                                                                                        (INST
                                                                                         -2
                                                                                         "i!1")
                                                                                        (("1"
                                                                                          (REPLACE
                                                                                           -2
                                                                                           1)
                                                                                          (("1"
                                                                                            (REPLACE
                                                                                             -3
                                                                                             1)
                                                                                            (("1"
                                                                                              (EXPAND
                                                                                               "vec_2_env"
                                                                                               2
                                                                                               1)
                                                                                              (("1"
                                                                                                (ASSERT)
                                                                                                (("1"
                                                                                                  (EXPAND
                                                                                                   "vec_2_env"
                                                                                                   2
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (ASSERT)
                                                                                                    NIL
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL)
                                                                                     ("2"
                                                                                      (ASSERT)
                                                                                      NIL
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL)
                                                                 ("2" (FLATTEN)
                                                                  (("2"
                                                                    (ASSERT)
                                                                    (("2"
                                                                      (REPLACE
                                                                       -1 2 RL)
                                                                      (("2"
                                                                        (ASSERT)
                                                                        NIL
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (DECOMPOSE-EQUALITY 1)
                                      (("2" (EXPAND "vec_2_env" 1)
                                        (("2" (REPLACE -1 1 RL)
                                          (("2" (ASSERT)
                                            (("2" (LIFT-IF 1)
                                              (("2" (SPLIT 1)
                                                (("1" (FLATTEN)
                                                  (("1" (ASSERT) NIL NIL)) NIL)
                                                 ("2" (FLATTEN)
                                                  (("2" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("3" (INST -2 "env!1" "env" "envwow")
                                      (("3" (ASSERT)
                                        (("3" (HIDE 2 3)
                                          (("3" (EXPAND "between?" 1)
                                            (("3" (SKEEP)
                                              (("3" (REPLACE -1 1 RL)
                                                (("3" (CASE "i!1<= k")
                                                  (("1" (ASSERT)
                                                    (("1" (REPLACE -2 2 RL)
                                                      (("1" (ASSERT)
                                                        (("1"
                                                          (LEMMA
                                                           "env_2_vec_nth")
                                                          (("1"
                                                            (INST -1 "k"
                                                             "env!1" "i!1")
                                                            (("1"
                                                              (LEMMA
                                                               "list_extensionality[real]")
                                                              (("1"
                                                                (INST -1 "p"
                                                                 "env_2_vec(k,env!1)")
                                                                (("1" (FLATTEN)
                                                                  (("1"
                                                                    (HIDE -2)
                                                                    (("1"
                                                                      (SPLIT
                                                                       -1)
                                                                      (("1"
                                                                        (FLATTEN)
                                                                        (("1"
                                                                          (INST
                                                                           -2
                                                                           "i!1")
                                                                          (("1"
                                                                            (ASSERT)
                                                                            NIL
                                                                            NIL))
                                                                          NIL))
                                                                        NIL)
                                                                       ("2"
                                                                        (ASSERT)
                                                                        NIL
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (ASSERT)
                                                    (("2" (REPLACE -1 3 RL)
                                                      (("2" (ASSERT) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (SKEEP)
                                    (("2" (TYPEPRED "i!1")
                                      (("2" (ASSERT) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|derivable_partial| FORMULA-DECL NIL |chain_rule_re| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|connected?| CONST-DECL "bool" |differentiation| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|between?| CONST-DECL "bool" |differentiation| NIL)
    (|env| SKOLEM-CONST-DECL "(P)" |chain_rule_re| NIL)
    (|env!1| SKOLEM-CONST-DECL "(P)" |chain_rule_re| NIL)
    (|env_2_vec_nth| FORMULA-DECL NIL |chain_rule_re| NIL)
    (|list_extensionality| FORMULA-DECL NIL |more_list_props| |structures|)
    (|vec_re| CONST-DECL "real" |chain_rule_re| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|p| SKOLEM-CONST-DECL "(projv(k, P))" |chain_rule_re| NIL)
    (|envwow| SKOLEM-CONST-DECL "[nat -> real]" |chain_rule_re| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic|
     |mv_analysis|)
    (|env| SKOLEM-CONST-DECL "(P)" |chain_rule_re| NIL)
    (P SKOLEM-CONST-DECL "(ddl_dom?(i))" |chain_rule_re| NIL)
    (|i| SKOLEM-CONST-DECL "below(1 + k)" |chain_rule_re| NIL)
    (|env_2_vec| DEF-DECL "VectorN(k + 1)" |chain_rule_re| NIL)
    (|k| SKOLEM-CONST-DECL "nat" |chain_rule_re| NIL)
    (|vec_2_env| CONST-DECL "Environment" |chain_rule_re| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|vec_2_env_id| FORMULA-DECL NIL |chain_rule_re| NIL)
    (|init_partial?| CONST-DECL "bool" |init_partial_def| |mv_analysis|)
    (|projv| CONST-DECL "bool" |chain_rule_re| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|ddl_dom?| CONST-DECL "bool" |differentiation| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|derivable?| CONST-DECL "bool" |differentiation| NIL))
   SHOSTAK))
 (|deriv_partial_TCC1| 0
  (|deriv_partial_TCC3-1| |nil| 3806918673
   ("" (LEMMA "derivable_partial_D")
    (("" (SKEEP)
      (("" (INST -1 "k" "i" "P" "re")
        (("" (ASSERT)
          (("" (FLATTEN)
            (("" (SPLIT -2)
              (("1" (ASSERT) (("1" (INST -1 "env") NIL NIL)) NIL)
               ("2" (ASSERT)
                (("2" (TYPEPRED "P") (("2" (POSTPONE) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic|
     |mv_analysis|)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|derivable?| CONST-DECL "bool" |differentiation| NIL)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|ddl_dom?| CONST-DECL "bool" |differentiation| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|derivable_partial_D| FORMULA-DECL NIL |chain_rule_re| NIL))
   NIL
   (|deriv_partial| SUBTYPE
    "chain_rule_re.vec_re(chain_rule_re.k, chain_rule_re.env, chain_rule_re.re)"
    "(init_partial_def[(number_fields.+)(1, chain_rule_re.k)].init_partial?(vector_arithmetic.e((number_fields.+)(chain_rule_re.k, 1), chain_rule_re.i), chain_rule_re.projv(chain_rule_re.k, chain_rule_re.P)))")))
 (|deriv_partial| 0
  (|deriv_partial-1| |nil| 3814887354
   ("" (SKEEP)
    (("" (EXPAND "partial" 1)
      (("" (EXPAND "partial_diff" 1)
        (("" (EXPAND "partial" 1)
          (("" (EXPAND "init_partial" 1)
            (("" (LEMMA "deriv_def[(proj(i)(P))]")
              (("1"
                (WITH-TCCS
                 (NAME "l" "deriv[(D_down(projv(k, P), v, e(1 + k, i)))]
                                                  (restrict[real, (D_down(projv(k, P), v, e(1 + k, i))), real]
                                                       (LAMBDA (Delta: real):
                                                          vec_re(k, env, re)(v + Delta * e(1 + k, i))),
                                                   0)"))
                (("1" (REPLACE -1 1)
                  (("1"
                    (INST -2
                     " (LAMBDA (x: (proj(i)(P))): re(env WITH [(i) := x]))" "l"
                     "env(i)")
                    (("1" (ASSERT)
                      (("1" (HIDE 2)
                        (("1" (EXPAND "deriv" -1 1)
                          (("1" (EXPAND "restrict" -1)
                            (("1"
                              (LEMMA
                               "lim_fun_lemma[(A[(D_down(projv(k, P), v, e(1 + k, i)))](0))]")
                              (("1"
                                (INST -1
                                 "NQ(LAMBDA (s: (D_down(projv(k, P), v, e(1 + k, i)))):
                                     vec_re(k, env, re)(v + s * e(1 + k, i)),
                                   0)"
                                 "0")
                                (("1" (REPLACE -2 -1)
                                  (("1" (HIDE -2)
                                    (("1" (EXPAND "convergence")
                                      (("1" (EXPAND "NQ")
                                        (("1" (EXPAND "convergence")
                                          (("1" (FLATTEN)
                                            (("1" (SPLIT 1)
                                              (("1" (EXPAND "adh")
                                                (("1" (SKEEP)
                                                  (("1" (INST -1 "e!1")
                                                    (("1" (SKEEP)
                                                      (("1" (TYPEPRED "x")
                                                        (("1" (EXPAND "A" -2)
                                                          (("1"
                                                            (EXPAND "D_down"
                                                                    -2)
                                                            (("1" (FLATTEN)
                                                              (("1"
                                                                (TYPEPRED "v")
                                                                (("1" (HIDE -1)
                                                                  (("1"
                                                                    (INST 2
                                                                     "x")
                                                                    (("1"
                                                                      (ASSERT)
                                                                      NIL NIL)
                                                                     ("2"
                                                                      (TYPEPRED
                                                                       "x")
                                                                      (("2"
                                                                        (TYPEPRED
                                                                         "v")
                                                                        (("2"
                                                                          (EXPAND
                                                                           "A")
                                                                          (("2"
                                                                            (ASSERT)
                                                                            (("2"
                                                                              (EXPAND
                                                                               "D_down"
                                                                               -5)
                                                                              (("2"
                                                                                (FLATTEN)
                                                                                (("2"
                                                                                  (TYPEPRED
                                                                                   "v")
                                                                                  (("2"
                                                                                    (EXPAND
                                                                                     "projv"
                                                                                     -7)
                                                                                    (("2"
                                                                                      (ASSERT)
                                                                                      (("2"
                                                                                        (LEMMA
                                                                                         "projv_proj")
                                                                                        (("2"
                                                                                          (INST
                                                                                           -1
                                                                                           "k"
                                                                                           "P"
                                                                                           "v"
                                                                                           "x"
                                                                                           "i")
                                                                                          (("1"
                                                                                            (ASSERT)
                                                                                            (("1"
                                                                                              (ASSERT)
                                                                                              (("1"
                                                                                                (CASE
                                                                                                    "nth(v,i)=env(i)")
                                                                                                (("1"
                                                                                                  (ASSERT)
                                                                                                  NIL
                                                                                                  NIL)
                                                                                                 ("2"
                                                                                                  (DECOMPOSE-EQUALITY
                                                                                                   -10)
                                                                                                  (("2"
                                                                                                    (INST
                                                                                                     -1
                                                                                                     "i")
                                                                                                    (("2"
                                                                                                      (EXPAND
                                                                                                       "vec_2_env"
                                                                                                       -1)
                                                                                                      (("2"
                                                                                                        (PROPAX)
                                                                                                        NIL
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL)
                                                                                           ("2"
                                                                                            (TYPEPRED
                                                                                             "P")
                                                                                            (("2"
                                                                                              (EXPAND
                                                                                               "ddl_dom?"
                                                                                               -1)
                                                                                              (("2"
                                                                                                (FLATTEN)
                                                                                                NIL
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (ASSERT)
                                                (("2" (SKEEP)
                                                  (("2" (INST -2 "epsilon")
                                                    (("2" (SKEEP)
                                                      (("2" (INST 1 "delta")
                                                        (("2" (SKEEP)
                                                          (("2"
                                                            (LEMMA
                                                             "with_e_vec")
                                                            (("2"
                                                              (TYPEPRED "i")
                                                              (("2"
                                                                (TYPEPRED "v")
                                                                (("2"
                                                                  (CASE
                                                                      "env WITH [(i) := env(i)] = env")
                                                                  (("1"
                                                                    (REPLACE -1
                                                                             1)
                                                                    (("1"
                                                                      (ASSERT)
                                                                      (("1"
                                                                        (INST
                                                                         -10
                                                                         "x")
                                                                        (("1"
                                                                          (ASSERT)
                                                                          (("1"
                                                                            (EXPAND
                                                                             "vec_re"
                                                                             -10)
                                                                            (("1"
                                                                              (CASE
                                                                                  "vec_2_env(k, v + 0 * e(1 + k, i), env) = env")
                                                                              (("1"
                                                                                (REPLACE
                                                                                 -1)
                                                                                (("1"
                                                                                  (ASSERT)
                                                                                  (("1"
                                                                                    (CASE
                                                                                        "env WITH [(i) := env(i) + x] = vec_2_env(k, v + x * e(1 + k, i), env)")
                                                                                    (("1"
                                                                                      (ASSERT)
                                                                                      NIL
                                                                                      NIL)
                                                                                     ("2"
                                                                                      (HIDE
                                                                                       2)
                                                                                      (("2"
                                                                                        (LEMMA
                                                                                         "with_e_vec")
                                                                                        (("2"
                                                                                          (INST
                                                                                           -1
                                                                                           "k"
                                                                                           "env"
                                                                                           "i"
                                                                                           "x"
                                                                                           "re"
                                                                                           "v")
                                                                                          (("2"
                                                                                            (ASSERT)
                                                                                            (("2"
                                                                                              (REPLACE
                                                                                               -1
                                                                                               1
                                                                                               RL)
                                                                                              (("2"
                                                                                                (CASE
                                                                                                    "env(i) = nth(v,i)")
                                                                                                (("1"
                                                                                                  (ASSERT)
                                                                                                  NIL
                                                                                                  NIL)
                                                                                                 ("2"
                                                                                                  (HIDE
                                                                                                   2)
                                                                                                  (("2"
                                                                                                    (EXPAND
                                                                                                     "vec_2_env"
                                                                                                     -6
                                                                                                     1)
                                                                                                    (("2"
                                                                                                      (DECOMPOSE-EQUALITY
                                                                                                       -6)
                                                                                                      (("2"
                                                                                                        (INST
                                                                                                         -1
                                                                                                         "i")
                                                                                                        (("2"
                                                                                                          (ASSERT)
                                                                                                          NIL
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL)
                                                                               ("2"
                                                                                (HIDE
                                                                                 2)
                                                                                (("2"
                                                                                  (ASSERT)
                                                                                  (("2"
                                                                                    (CASE
                                                                                        " v + 0 * e(1 + k, i) = v")
                                                                                    (("1"
                                                                                      (ASSERT)
                                                                                      NIL
                                                                                      NIL)
                                                                                     ("2"
                                                                                      (HIDE
                                                                                       2)
                                                                                      (("2"
                                                                                        (LEMMA
                                                                                         "mult_zero")
                                                                                        (("2"
                                                                                          (INST
                                                                                           -1
                                                                                           "e(1+k,i)")
                                                                                          (("2"
                                                                                            (REPLACE
                                                                                             -1)
                                                                                            (("2"
                                                                                              (LEMMA
                                                                                               "zero_id")
                                                                                              (("2"
                                                                                                (INST
                                                                                                 -1
                                                                                                 "v")
                                                                                                (("2"
                                                                                                  (ASSERT)
                                                                                                  NIL
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL)
                                                                         ("2"
                                                                          (EXPAND
                                                                           "A")
                                                                          (("2"
                                                                            (TYPEPRED
                                                                             "x")
                                                                            (("2"
                                                                              (EXPAND
                                                                               "D_down"
                                                                               1
                                                                               1)
                                                                              (("2"
                                                                                (FLATTEN)
                                                                                (("2"
                                                                                  (EXPAND
                                                                                   "A"
                                                                                   -1)
                                                                                  (("2"
                                                                                    (LEMMA
                                                                                     "proj_projv")
                                                                                    (("2"
                                                                                      (INST?)
                                                                                      (("1"
                                                                                        (ASSERT)
                                                                                        (("1"
                                                                                          (CASE
                                                                                              "nth(v,i) = env(i)")
                                                                                          (("1"
                                                                                            (ASSERT)
                                                                                            NIL
                                                                                            NIL)
                                                                                           ("2"
                                                                                            (EXPAND
                                                                                             "vec_2_env"
                                                                                             -5)
                                                                                            (("2"
                                                                                              (DECOMPOSE-EQUALITY
                                                                                               -5)
                                                                                              (("2"
                                                                                                (INST
                                                                                                 -1
                                                                                                 "i")
                                                                                                (("2"
                                                                                                  (ASSERT)
                                                                                                  NIL
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL)
                                                                                       ("2"
                                                                                        (ASSERT)
                                                                                        (("2"
                                                                                          (EXPAND
                                                                                           "projv"
                                                                                           1)
                                                                                          (("2"
                                                                                            (TYPEPRED
                                                                                             "v")
                                                                                            (("2"
                                                                                              (INST
                                                                                               1
                                                                                               "env")
                                                                                              (("2"
                                                                                                (ASSERT)
                                                                                                (("2"
                                                                                                  (LEMMA
                                                                                                   "env_2_vec_id")
                                                                                                  (("2"
                                                                                                    (INST?)
                                                                                                    (("2"
                                                                                                      (ASSERT)
                                                                                                      NIL
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL)
                                                                                       ("3"
                                                                                        (TYPEPRED
                                                                                         "P")
                                                                                        (("3"
                                                                                          (EXPAND
                                                                                           "ddl_dom?"
                                                                                           -1)
                                                                                          (("3"
                                                                                            (FLATTEN)
                                                                                            NIL
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL)
                                                                   ("2"
                                                                    (DECOMPOSE-EQUALITY
                                                                     1)
                                                                    (("2"
                                                                      (ASSERT)
                                                                      (("2"
                                                                        (CASE
                                                                            "x!1=i")
                                                                        (("1"
                                                                          (ASSERT)
                                                                          NIL
                                                                          NIL)
                                                                         ("2"
                                                                          (ASSERT)
                                                                          NIL
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (LEMMA "D_down_partial_not_one[k+1]")
                                  (("2" (INST -1 "e(1+k,i)" "projv(k,P)" "v")
                                    (("1" (ASSERT)
                                      (("1" (HIDE -2 2)
                                        (("1" (EXPAND "not_one_element?")
                                          (("1" (SKEEP)
                                            (("1" (INST?)
                                              (("1" (SKEEP)
                                                (("1" (INST 2 "y")
                                                  (("1" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (TYPEPRED "v")
                                      (("2" (HIDE -4)
                                        (("2" (HIDE 2 3)
                                          (("2" (EXPAND "projv" 1)
                                            (("2" (INST 1 "env")
                                              (("2" (LEMMA "env_2_vec_id")
                                                (("2" (INST?)
                                                  (("2" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("3" (LEMMA "ddl_dom_dom_dir")
                                      (("3" (INST?) (("3" (ASSERT) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("3" (LEMMA "D_down_partial[k+1]")
                                  (("3" (INST -1 "e(1+k,i)" "projv(k,P)" "v")
                                    (("1" (ASSERT)
                                      (("1" (HIDE -2 2)
                                        (("1" (EXPAND "deriv_domain?")
                                          (("1" (SKEEP)
                                            (("1" (INST -1 "e!1" "x")
                                              (("1" (SKEEP)
                                                (("1" (INST 1 "y") NIL NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (TYPEPRED "v")
                                      (("2" (HIDE -4)
                                        (("2" (HIDE 2 3)
                                          (("2" (EXPAND "projv" 1)
                                            (("2" (INST 1 "env")
                                              (("2" (LEMMA "env_2_vec_id")
                                                (("2" (INST?)
                                                  (("2" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("3" (LEMMA "ddl_dom_dom_dir")
                                      (("3" (INST?) (("3" (ASSERT) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("4" (HIDE 2 -1)
                                  (("4" (SKEEP)
                                    (("4"
                                      (TYPEPRED "v + s * e(1 + k, i)" "v"
                                       "s * e(1 + k, i)" "e(1 + k, i)")
                                      (("4" (HIDE -1 -3 -6 -8)
                                        (("4" (REPLACE -2)
                                          (("4" (REPLACE -5)
                                            (("4" (ASSERT)
                                              (("4" (REPLACE -1)
                                                (("4" (REPLACE -4)
                                                  (("4" (EXPAND "max" 1)
                                                    (("4" (PROPAX) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (HIDE 2 -1)
                                (("2" (LEMMA "D_down_partial_not_one[1+k]")
                                  (("2" (INST -1 "e(1+k,i)" "projv(k,P)" "v")
                                    (("1" (ASSERT)
                                      (("1" (TYPEPRED "v")
                                        (("1" (EXPAND "projv" 1)
                                          (("1" (INST 1 "env")
                                            (("1" (LEMMA "env_2_vec_id")
                                              (("1" (INST?)
                                                (("1" (ASSERT) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (LEMMA "ddl_dom_dom_dir")
                                      (("2" (INST?) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("3" (ASSERT)
                                (("3" (LEMMA "D_down_partial[k+1]")
                                  (("3" (INST -1 "e(1+k,i)" "projv(k,P)" "v")
                                    (("1" (ASSERT)
                                      (("1" (HIDE -2 2)
                                        (("1" (EXPAND "deriv_domain?")
                                          (("1" (SKEEP)
                                            (("1" (INST?)
                                              (("1" (SKEEP)
                                                (("1" (INST 1 "y") NIL NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (TYPEPRED "v")
                                      (("2" (HIDE -4)
                                        (("2" (HIDE 2 3)
                                          (("2" (EXPAND "projv" 1)
                                            (("2" (INST 1 "env")
                                              (("2" (LEMMA "env_2_vec_id")
                                                (("2" (INST?)
                                                  (("2" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("3" (LEMMA "ddl_dom_dom_dir")
                                      (("3" (INST?) (("3" (ASSERT) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (HIDE 2)
                (("2" (TYPEPRED "P")
                  (("2" (EXPAND "ddl_dom?")
                    (("2" (FLATTEN)
                      (("2" (EXPAND "not_one_element?" -2)
                        (("2" (PROPAX) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("3" (LEMMA "ddl_dom_dd")
                (("3" (INST -1 "i" "P") (("3" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|partial| CONST-DECL "real" |partial_def| |mv_analysis|)
    (|partial| CONST-DECL "real" |partial_def| |mv_analysis|)
    (|deriv_def| FORMULA-DECL NIL |derivatives_def| |analysis|)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|proj| CONST-DECL "bool" |differentiation| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|ddl_dom?| CONST-DECL "bool" |differentiation| NIL)
    (|deriv_domain?| CONST-DECL "bool" |deriv_domain_def| |analysis|)
    (|not_one_element?| CONST-DECL "bool" |deriv_domain_def| |analysis|)
    (|lim_fun_lemma| FORMULA-DECL NIL |lim_of_functions| |analysis|)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|D_down_partial| FORMULA-DECL NIL |init_partial_def| |mv_analysis|)
    (|D_down_partial_not_one| FORMULA-DECL NIL |init_partial_def|
     |mv_analysis|)
    (|ddl_dom_dom_dir| FORMULA-DECL NIL |chain_rule_re| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|deriv_domain_partial?| CONST-DECL "bool" |derivative_domain_multi|
     |mv_analysis|)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|convergence| CONST-DECL "bool" |convergence_functions| |analysis|)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|connected?| CONST-DECL "bool" |differentiation| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|projv_proj| FORMULA-DECL NIL |chain_rule_re| NIL)
    (|nonzero_abs_is_pos| APPLICATION-JUDGEMENT "{y: posreal | y >= x}"
     |real_defs| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|fullset_is_clopen| NAME-JUDGEMENT
     "clopen[real, (metric_induced_topology)]" |real_topology| |metric_space|)
    (|real_is_complete| NAME-JUDGEMENT "metric_complete" |real_topology|
     |metric_space|)
    (|x| SKOLEM-CONST-DECL "(A[(D_down(projv(k, P), v, e(1 + k, i)))](0))"
     |chain_rule_re| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|adh| CONST-DECL "setof[real]" |convergence_functions| |analysis|)
    (|env_2_vec_id| FORMULA-DECL NIL |chain_rule_re| NIL)
    (|proj_projv| FORMULA-DECL NIL |chain_rule_re| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|zero_id| FORMULA-DECL NIL |vector_arithmetic| |mv_analysis|)
    (|mult_zero| FORMULA-DECL NIL |vector_arithmetic| |mv_analysis|)
    (|x| SKOLEM-CONST-DECL "(A(env(i)))" |chain_rule_re| NIL)
    (|with_e_vec| FORMULA-DECL NIL |chain_rule_re| NIL)
    (|convergent?| CONST-DECL "bool" |lim_of_functions| |analysis|)
    (|k| SKOLEM-CONST-DECL "nat" |chain_rule_re| NIL)
    (|i| SKOLEM-CONST-DECL "below(1 + k)" |chain_rule_re| NIL)
    (P SKOLEM-CONST-DECL "(ddl_dom?(i))" |chain_rule_re| NIL)
    (|env| SKOLEM-CONST-DECL "(P)" |chain_rule_re| NIL)
    (|v| SKOLEM-CONST-DECL "{vv: VectorN(1 + k) | vec_2_env(k, vv, env) = env}"
     |chain_rule_re| NIL)
    (|deriv| CONST-DECL "real" |derivatives_def| |analysis|)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (NQ CONST-DECL "real" |derivatives_def| |analysis|)
    (|convergence| CONST-DECL "bool" |lim_of_functions| |analysis|)
    (A CONST-DECL "setof[nzreal]" |derivatives_def| |analysis|)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|derivable?| CONST-DECL "bool" |derivatives_def| |analysis|)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|derivable?| CONST-DECL "bool" |differentiation| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|domain| TYPE-EQ-DECL NIL |domain_vec2real_def| |mv_analysis|)
    (|D_down| CONST-DECL "bool" |init_partial_def| |mv_analysis|)
    (|projv| CONST-DECL "bool" |chain_rule_re| NIL)
    (|vec_2_env| CONST-DECL "Environment" |chain_rule_re| NIL)
    (|e| DEF-DECL "VectorN(m)" |vector_arithmetic| |mv_analysis|)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (|vec_re| CONST-DECL "real" |chain_rule_re| NIL)
    (|Vector| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (+ CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices| |matrices|)
    (* CONST-DECL "VectorN(length(v2))" |matrices| |matrices|)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|not_one_element?| CONST-DECL "bool" |differentiation| NIL)
    (|ddl_dom_dd| FORMULA-DECL NIL |differentiation| NIL)
    (|init_partial| CONST-DECL "real" |init_partial_def| |mv_analysis|)
    (|partial_diff| CONST-DECL "RealExpr" |differentiation| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic|
     |mv_analysis|))
   SHOSTAK))
 (|diff_re_derivable_partial_TCC1| 0
  (|diff_re_derivable_partial_TCC1-1| |nil| 3853427499
   ("" (SUBTYPE-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|ddl_dom?| CONST-DECL "bool" |differentiation| NIL)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|diff_re?| CONST-DECL "bool" |chain_rule_re| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|proj| CONST-DECL "bool" |differentiation| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|env!1| SKOLEM-CONST-DECL "(P!1)" |chain_rule_re| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (P!1 SKOLEM-CONST-DECL "(ddl_dom?)" |chain_rule_re| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|norm_inf| CONST-DECL "(norm?(m))" |norms| |mv_analysis|)
    (|sub| CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices|
     |matrices|)
    (- CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices| |matrices|)
    (|norm_inf| CONST-DECL "[(cons?) -> nonneg_real]" |norms| |mv_analysis|)
    (+ CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices| |matrices|)
    (|vec_re| CONST-DECL "real" |chain_rule_re| NIL)
    (* CONST-DECL "real" |matrices| |matrices|)
    (NQ CONST-DECL "real" |differentiable_def| |mv_analysis|)
    (|convergence_zero?| CONST-DECL "bool" |vector_sequences| |mv_analysis|)
    (|differentiable?| CONST-DECL "bool" |differentiable_def| |mv_analysis|)
    (|differentiable_re_p?| CONST-DECL "bool" |chain_rule_re| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|connected?| CONST-DECL "bool" |differentiation| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|not_one_element?| CONST-DECL "bool" |deriv_domain_def| |analysis|)
    (|not_one_element?| CONST-DECL "bool" |differentiation| NIL)
    (|ddl_dom?| CONST-DECL "bool" |differentiation| NIL)
    (|between?| CONST-DECL "bool" |differentiation| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL))
   NIL
   (|diff_re_derivable_partial| SUBTYPE "chain_rule_re.P"
    "(differentiation.ddl_dom?(chain_rule_re.i))")))
 (|diff_re_derivable_partial| 0
  (|diff_re_derivable_partial-1| |nil| 3853427591
   ("" (SKEEP)
    (("" (LEMMA "derivable_partial_D")
      (("" (INST -1 "k" "i" "P" "re")
        (("" (ASSERT)
          (("" (LEMMA "diff_re_init_partial")
            (("" (INST?) (("" (SKEEP) (("" (INST -1 "env" "re") NIL NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|derivable_partial_D| FORMULA-DECL NIL |chain_rule_re| NIL)
    (|diff_re_init_partial| FORMULA-DECL NIL |chain_rule_re| NIL)
    (|diff_re?| CONST-DECL "bool" |chain_rule_re| NIL)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|ddl_dom?| CONST-DECL "bool" |differentiation| NIL)
    (|ddl_dom?| CONST-DECL "bool" |differentiation| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   SHOSTAK))
 (|diff_re_partialable_p_TCC1| 0
  (|diff_re_partialable_p_TCC1-1| |nil| 3853245071 ("" (SUBTYPE-TCC) NIL NIL)
   ((|ddl_dom?| CONST-DECL "bool" |differentiation| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|env!2| SKOLEM-CONST-DECL "(P!1)" |chain_rule_re| NIL)
    (|env!1| SKOLEM-CONST-DECL "(P!1)" |chain_rule_re| NIL)
    (P!1 SKOLEM-CONST-DECL "(ddl_dom?)" |chain_rule_re| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|proj| CONST-DECL "bool" |differentiation| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic|
     |mv_analysis|)
    (|ddl_dom?| CONST-DECL "bool" |differentiation| NIL)
    (|not_one_element?| CONST-DECL "bool" |differentiation| NIL)
    (|not_one_element?| CONST-DECL "bool" |deriv_domain_def| |analysis|)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|connected?| CONST-DECL "bool" |differentiation| NIL)
    (|differentiable_re_p?| CONST-DECL "bool" |chain_rule_re| NIL)
    (|differentiable?| CONST-DECL "bool" |differentiable_def| |mv_analysis|)
    (|convergence_zero?| CONST-DECL "bool" |vector_sequences| |mv_analysis|)
    (NQ CONST-DECL "real" |differentiable_def| |mv_analysis|)
    (* CONST-DECL "real" |matrices| |matrices|)
    (|vec_re| CONST-DECL "real" |chain_rule_re| NIL)
    (+ CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices| |matrices|)
    (|norm_inf| CONST-DECL "[(cons?) -> nonneg_real]" |norms| |mv_analysis|)
    (- CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices| |matrices|)
    (|sub| CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices|
     |matrices|)
    (|norm_inf| CONST-DECL "(norm?(m))" |norms| |mv_analysis|)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|between?| CONST-DECL "bool" |differentiation| NIL))
   NIL
   (|diff_re_partialable_p| SUBTYPE "chain_rule_re.P"
    "(differentiation.ddl_dom?(chain_rule_re.i))")))
 (|diff_re_partialable_p| 0
  (|diff_re_partialable_p-1| |nil| 3853245896
   ("" (SKEEP)
    (("" (LEMMA "derivable_partial")
      (("" (SKEEP)
        (("" (INST -1 "k" "i" "P" "env" "env_2_vec(k,env)" "re")
          (("1" (ASSERT)
            (("1" (LEMMA "vec_2_env_id")
              (("1" (INST?)
                (("1" (REPLACE -1)
                  (("1" (ASSERT)
                    (("1" (HIDE 2)
                      (("1" (HIDE -1)
                        (("1" (EXPAND "differentiable_re_p?")
                          (("1" (LEMMA "diff_imp_init_partial2[1+k]")
                            (("1"
                              (INST -1 "e(1+k,i)" "projv(k,P)"
                               "vec_re(k,env,re)" "env_2_vec(k,env)")
                              (("1" (ASSERT) NIL NIL)
                               ("2" (LEMMA "e_not_zero")
                                (("2" (INST?) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (LEMMA "vec_2_env_id") (("2" (INST?) NIL NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|derivable_partial| FORMULA-DECL NIL |chain_rule_re| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|ddl_dom?| CONST-DECL "bool" |differentiation| NIL)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|env| SKOLEM-CONST-DECL "(P)" |chain_rule_re| NIL)
    (P SKOLEM-CONST-DECL "(ddl_dom?)" |chain_rule_re| NIL)
    (|ddl_dom?| CONST-DECL "bool" |differentiation| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|env_2_vec| DEF-DECL "VectorN(k + 1)" |chain_rule_re| NIL)
    (|k| SKOLEM-CONST-DECL "nat" |chain_rule_re| NIL)
    (|vec_2_env| CONST-DECL "Environment" |chain_rule_re| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic|
     |mv_analysis|)
    (|vec_2_env_id| FORMULA-DECL NIL |chain_rule_re| NIL)
    (|differentiable_re_p?| CONST-DECL "bool" |chain_rule_re| NIL)
    (|zero_vec| DEF-DECL "VectorN(m)" |vector_arithmetic| |mv_analysis|)
    (|i| SKOLEM-CONST-DECL "below(1 + k)" |chain_rule_re| NIL)
    (|e| DEF-DECL "VectorN(m)" |vector_arithmetic| |mv_analysis|)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|domain| TYPE-EQ-DECL NIL |domain_vec2real_def| |mv_analysis|)
    (|deriv_domain_partial?| CONST-DECL "bool" |derivative_domain_multi|
     |mv_analysis|)
    (|projv| CONST-DECL "bool" |chain_rule_re| NIL)
    (|vec2real_f| TYPE-EQ-DECL NIL |domain_vec2real_def| |mv_analysis|)
    (|vec_re| CONST-DECL "real" |chain_rule_re| NIL)
    (|e_not_zero| FORMULA-DECL NIL |vector_arithmetic| |mv_analysis|)
    (|diff_imp_init_partial2| FORMULA-DECL NIL |init_partial_def|
     |mv_analysis|)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL))
   SHOSTAK))
 (|diff_re_derivable_up_TCC1| 0
  (|diff_re_derivable_up_TCC1-1| |nil| 3853999301 ("" (SUBTYPE-TCC) NIL NIL)
   ((|ddl_dom?| CONST-DECL "bool" |differentiation| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (P!1 SKOLEM-CONST-DECL "(ddl_dom?)" |chain_rule_re| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|env!1| SKOLEM-CONST-DECL "(P!1)" |chain_rule_re| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|proj| CONST-DECL "bool" |differentiation| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|ddl_dom_upto?| CONST-DECL "bool" |differentiation| NIL)
    (|not_one_element?| CONST-DECL "bool" |differentiation| NIL)
    (|not_one_element?| CONST-DECL "bool" |deriv_domain_def| |analysis|)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|connected?| CONST-DECL "bool" |differentiation| NIL)
    (|diff_re?| CONST-DECL "bool" |chain_rule_re| NIL)
    (|differentiable_re_p?| CONST-DECL "bool" |chain_rule_re| NIL)
    (|differentiable?| CONST-DECL "bool" |differentiable_def| |mv_analysis|)
    (|convergence_zero?| CONST-DECL "bool" |vector_sequences| |mv_analysis|)
    (NQ CONST-DECL "real" |differentiable_def| |mv_analysis|)
    (* CONST-DECL "real" |matrices| |matrices|)
    (|vec_re| CONST-DECL "real" |chain_rule_re| NIL)
    (+ CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices| |matrices|)
    (|norm_inf| CONST-DECL "[(cons?) -> nonneg_real]" |norms| |mv_analysis|)
    (- CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices| |matrices|)
    (|sub| CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices|
     |matrices|)
    (|norm_inf| CONST-DECL "(norm?(m))" |norms| |mv_analysis|)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|between?| CONST-DECL "bool" |differentiation| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL))
   NIL
   (|diff_re_derivable_up| SUBTYPE "chain_rule_re.P"
    "(differentiation.ddl_dom_upto?(chain_rule_re.k))")))
 (|diff_re_derivable_up| 0
  (|diff_re_derivable_up-1| |nil| 3853999466
   ("" (SKEEP)
    (("" (EXPAND "derivable_up?")
      (("" (EXPAND "diff_re?")
        (("" (SKEEP)
          (("" (EXPAND "derivable?")
            (("" (LEMMA "diff_re_derivable_partial")
              (("" (INST?)
                (("" (INST -1 "P" "re" "i")
                  (("1" (EXPAND "derivable?" -1) (("1" (PROPAX) NIL NIL)) NIL)
                   ("2" (EXPAND "diff_re?") (("2" (PROPAX) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|derivable_up?| CONST-DECL "bool" |differentiation| NIL)
    (|diff_re_derivable_partial| FORMULA-DECL NIL |chain_rule_re| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|re| SKOLEM-CONST-DECL "RealExpr" |chain_rule_re| NIL)
    (P SKOLEM-CONST-DECL "(ddl_dom?)" |chain_rule_re| NIL)
    (|k| SKOLEM-CONST-DECL "nat" |chain_rule_re| NIL)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|ddl_dom?| CONST-DECL "bool" |differentiation| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|derivable?| CONST-DECL "bool" |differentiation| NIL)
    (|diff_re?| CONST-DECL "bool" |chain_rule_re| NIL))
   SHOSTAK))
 (|der_re_partial_der_TCC1| 0
  (|der_re_partial_der_TCC1-1| |nil| 3853427499
   ("" (LEMMA "diff_re_derivable_partial")
    (("" (SKEEP) (("" (INST?) NIL NIL)) NIL)) NIL)
   ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|ddl_dom?| CONST-DECL "bool" |differentiation| NIL)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|diff_re?| CONST-DECL "bool" |chain_rule_re| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|diff_re_derivable_partial| FORMULA-DECL NIL |chain_rule_re| NIL))
   NIL
   (|der_re_partial_der| SUBTYPE "chain_rule_re.re"
    "(differentiation.derivable?(chain_rule_re.i, chain_rule_re.P))")))
 (|der_re_partial_der| 0
  (|der_re_partial_der-1| |nil| 3853427981
   ("" (SKEEP)
    (("" (LEMMA "deriv_partial")
      (("" (LEMMA "der_re_partial")
        (("" (INST?)
          (("" (REPLACE -1)
            (("" (INST?)
              (("" (LEMMA "vec_2_env_id") (("" (INST -1 "k" "env") NIL NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|deriv_partial| FORMULA-DECL NIL |chain_rule_re| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|ddl_dom?| CONST-DECL "bool" |differentiation| NIL)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|diff_re?| CONST-DECL "bool" |chain_rule_re| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic|
     |mv_analysis|)
    (|ddl_dom?| CONST-DECL "bool" |differentiation| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|vec_2_env| CONST-DECL "Environment" |chain_rule_re| NIL)
    (|env_2_vec| DEF-DECL "VectorN(k + 1)" |chain_rule_re| NIL)
    (|derivable?| CONST-DECL "bool" |differentiation| NIL)
    (|env| SKOLEM-CONST-DECL "(P)" |chain_rule_re| NIL)
    (P SKOLEM-CONST-DECL "(ddl_dom?)" |chain_rule_re| NIL)
    (|k| SKOLEM-CONST-DECL "nat" |chain_rule_re| NIL)
    (|vec_2_env_id| FORMULA-DECL NIL |chain_rule_re| NIL)
    (|der_re_partial| FORMULA-DECL NIL |chain_rule_re| NIL))
   SHOSTAK))
 (|der_ll_partial_der_TCC1| 0
  (|der_ll_partial_der_TCC1-1| |nil| 3853930613
   ("" (SKEEP)
    (("" (EXPAND "diff_re?")
      (("" (INST -2 "env_sol(D, envi, ode)(car[real](p))")
        (("" (EXPAND "differentiable_re_p?" -2) (("" (PROPAX) NIL NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|diff_re?| CONST-DECL "bool" |chain_rule_re| NIL)
    (|differentiable_re_p?| CONST-DECL "bool" |chain_rule_re| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|ddl_dom?| CONST-DECL "bool" |differentiation| NIL)
    (P SKOLEM-CONST-DECL "(ddl_dom?)" |chain_rule_re| NIL)
    (|dd?| CONST-DECL "bool" |hp_expr| NIL)
    (|dLVar| TYPE-DECL NIL |hp_def| NIL)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|MapExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|mapexpr_inj| CONST-DECL "bool" |hp_def| NIL)
    (|ODEs| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|ODEs_s?| CONST-DECL "bool" |ODEs_equiv| NIL)
    (|env_sol| CONST-DECL "Environment" |ODEs_equiv| NIL)
    (D SKOLEM-CONST-DECL "(dd?)" |chain_rule_re| NIL)
    (|envi| SKOLEM-CONST-DECL "Environment" |chain_rule_re| NIL)
    (|ode| SKOLEM-CONST-DECL "(ODEs_s?(D, envi))" |chain_rule_re| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|real_dom| TYPE-EQ-DECL NIL |lift_real_fun_def| |mv_analysis|)
    (|domain| TYPE-EQ-DECL NIL |domain_vec2real_def| |mv_analysis|)
    (|lift_rd| CONST-DECL "domain[1]" |lift_real_fun_def| |mv_analysis|)
    (|p| SKOLEM-CONST-DECL "(lift_rd(D))" |chain_rule_re| NIL)
    (|null_MapExprInj| NAME-JUDGEMENT "MapExprInj" |hp_def| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic|
     |mv_analysis|))
   NIL
   (|der_ll_partial_der| SUBTYPE
    "chain_rule_re.vec_re(hp_def.max_var(chain_rule_re.ode), ODEs_equiv.env_sol(chain_rule_re.D, chain_rule_re.envi, chain_rule_re.ode)(list_adt[real].car(chain_rule_re.p)), chain_rule_re.R)"
    "{ff: domain_vec2real_def[(number_fields.+)(1, hp_def.max_var(chain_rule_re.ode))].vec2real_f | differentiable_def[(number_fields.+)(1, hp_def.max_var(chain_rule_re.ode))].differentiable?(chain_rule_re.projv(hp_def.max_var(chain_rule_re.ode), chain_rule_re.P), ff, chain_rule_re.env_2_vec(hp_def.max_var(chain_rule_re.ode), ODEs_equiv.env_sol(chain_rule_re.D, chain_rule_re.envi, chain_rule_re.ode)(list_adt[real].car(chain_rule_re.p))))}")))
 (|der_ll_partial_der_TCC2| 0
  (|der_ll_partial_der_TCC2-1| |nil| 3853930613
   ("" (SKEEP) (("" (EXPAND "projv" 1) (("" (INST?) NIL NIL)) NIL)) NIL)
   ((|projv| CONST-DECL "bool" |chain_rule_re| NIL)
    (|p| SKOLEM-CONST-DECL "(lift_rd(D))" |chain_rule_re| NIL)
    (|ode| SKOLEM-CONST-DECL "(ODEs_s?(D, envi))" |chain_rule_re| NIL)
    (|envi| SKOLEM-CONST-DECL "Environment" |chain_rule_re| NIL)
    (D SKOLEM-CONST-DECL "(dd?)" |chain_rule_re| NIL)
    (P SKOLEM-CONST-DECL "(ddl_dom?)" |chain_rule_re| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|ddl_dom?| CONST-DECL "bool" |differentiation| NIL)
    (|dd?| CONST-DECL "bool" |hp_expr| NIL)
    (|dLVar| TYPE-DECL NIL |hp_def| NIL)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|MapExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|mapexpr_inj| CONST-DECL "bool" |hp_def| NIL)
    (|ODEs| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|ODEs_s?| CONST-DECL "bool" |ODEs_equiv| NIL)
    (|env_sol| CONST-DECL "Environment" |ODEs_equiv| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|real_dom| TYPE-EQ-DECL NIL |lift_real_fun_def| |mv_analysis|)
    (|domain| TYPE-EQ-DECL NIL |domain_vec2real_def| |mv_analysis|)
    (|lift_rd| CONST-DECL "domain[1]" |lift_real_fun_def| |mv_analysis|)
    (|null_MapExprInj| NAME-JUDGEMENT "MapExprInj" |hp_def| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic|
     |mv_analysis|))
   NIL
   (|der_ll_partial_der| SUBTYPE
    "chain_rule_re.env_2_vec(hp_def.max_var(chain_rule_re.ode), ODEs_equiv.env_sol(chain_rule_re.D, chain_rule_re.envi, chain_rule_re.ode)(list_adt[real].car(chain_rule_re.p)))"
    "(chain_rule_re.projv(hp_def.max_var(chain_rule_re.ode), chain_rule_re.P))")))
 (|der_ll_partial_der_TCC3| 0
  (|der_ll_partial_der_TCC3-1| |nil| 3853930613
   ("" (SKEEP)
    ((""
      (TYPEPRED "der_f[1 + max_var(ode)]
                (projv(max_var(ode), P),
                 env_2_vec(max_var(ode),
                           env_sol(D, envi, ode)(car[real](p))))
                (vec_re(max_var(ode), env_sol(D, envi, ode)(car[real](p)),
                        R))")
      (("" (ASSERT) NIL NIL)) NIL))
    NIL)
   ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|dLVar| TYPE-DECL NIL |hp_def| NIL)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|MapExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|max_var| CONST-DECL "nat" |hp_def| NIL)
    (|mapexpr_inj| CONST-DECL "bool" |hp_def| NIL)
    (|ODEs| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|dd?| CONST-DECL "bool" |hp_expr| NIL)
    (|ODEs_s?| CONST-DECL "bool" |ODEs_equiv| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|domain| TYPE-EQ-DECL NIL |domain_vec2real_def| |mv_analysis|)
    (|deriv_domain?| CONST-DECL "bool" |derivative_domain_multi| |mv_analysis|)
    (|vec2real_f| TYPE-EQ-DECL NIL |domain_vec2real_def| |mv_analysis|)
    (|differentiable?| CONST-DECL "bool" |differentiable_def| |mv_analysis|)
    (|convergence_zero?| CONST-DECL "bool" |vector_sequences| |mv_analysis|)
    (NQ CONST-DECL "bool" |differentiable_def| |mv_analysis|)
    (NQ CONST-DECL "real" |differentiable_def| |mv_analysis|)
    (|zero_vec| DEF-DECL "VectorN(m)" |vector_arithmetic| |mv_analysis|)
    (|der_f| CONST-DECL
     "{gg: VectorN(n) | convergence_zero?(NQ(D, p), NQ(f, gg, p), zero_vec(n))}"
     |differentiable_def| |mv_analysis|)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|projv| CONST-DECL "bool" |chain_rule_re| NIL)
    (|ddl_dom?| CONST-DECL "bool" |differentiation| NIL)
    (|env_2_vec| DEF-DECL "VectorN(k + 1)" |chain_rule_re| NIL)
    (|env_sol| CONST-DECL "Environment" |ODEs_equiv| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|real_dom| TYPE-EQ-DECL NIL |lift_real_fun_def| |mv_analysis|)
    (|lift_rd| CONST-DECL "domain[1]" |lift_real_fun_def| |mv_analysis|)
    (|vec_re| CONST-DECL "real" |chain_rule_re| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|null_MapExprInj| NAME-JUDGEMENT "MapExprInj" |hp_def| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic|
     |mv_analysis|))
   NIL
   (|der_ll_partial_der| SUBTYPE "chain_rule_re.i"
    "below[length[real](der_f[1 + max_var(ode)](projv(max_var(ode), P), env_2_vec(max_var(ode), env_sol(D, envi, ode)(car[real](p))))(vec_re(max_var(ode), env_sol(D, envi, ode)(car[real](p)), R)))]")))
 (|der_ll_partial_der_TCC4| 0
  (|der_ll_partial_der_TCC4-1| |nil| 3853930613
   ("" (SKEEP)
    (("" (LEMMA "diff_re_partialable_p")
      (("" (INST -1 "max_var(ode)" "P" "R" _)
        (("" (EXPAND "derivable?" 1)
          (("" (SKEEP)
            (("" (INST -1 "env")
              (("" (ASSERT)
                (("" (SPLIT -1)
                  (("1" (INST -1 "i") NIL NIL)
                   ("2" (ASSERT)
                    (("2" (EXPAND "diff_re?") (("2" (INST -2 "env") NIL NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|diff_re_partialable_p| FORMULA-DECL NIL |chain_rule_re| NIL)
    (|derivable?| CONST-DECL "bool" |differentiation| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|diff_re?| CONST-DECL "bool" |chain_rule_re| NIL)
    (|ddl_dom?| CONST-DECL "bool" |differentiation| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|ODEs_s?| CONST-DECL "bool" |ODEs_equiv| NIL)
    (|dd?| CONST-DECL "bool" |hp_expr| NIL)
    (|ODEs| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|mapexpr_inj| CONST-DECL "bool" |hp_def| NIL)
    (|max_var| CONST-DECL "nat" |hp_def| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|MapExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|dLVar| TYPE-DECL NIL |hp_def| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|null_MapExprInj| NAME-JUDGEMENT "MapExprInj" |hp_def| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic|
     |mv_analysis|))
   NIL
   (|der_ll_partial_der| SUBTYPE "chain_rule_re.R"
    "(differentiation.derivable?(chain_rule_re.i, chain_rule_re.P))")))
 (|der_ll_partial_der_TCC5| 0
  (|der_ll_partial_der_TCC5-1| |nil| 3853930613 ("" (SUBTYPE-TCC) NIL NIL)
   ((|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|ODEs_s?| CONST-DECL "bool" |ODEs_equiv| NIL)
    (|ODEs| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|mapexpr_inj| CONST-DECL "bool" |hp_def| NIL)
    (|MapExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|dLVar| TYPE-DECL NIL |hp_def| NIL)
    (|lift_rd| CONST-DECL "domain[1]" |lift_real_fun_def| |mv_analysis|)
    (|domain| TYPE-EQ-DECL NIL |domain_vec2real_def| |mv_analysis|)
    (|real_dom| TYPE-EQ-DECL NIL |lift_real_fun_def| |mv_analysis|)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|ddl_dom?| CONST-DECL "bool" |differentiation| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|dd?| CONST-DECL "bool" |hp_expr| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|null_MapExprInj| NAME-JUDGEMENT "MapExprInj" |hp_def| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic|
     |mv_analysis|)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|solution_odes_u?| CONST-DECL "bool" |hp_expr| NIL)
    (|derivable_odes?| CONST-DECL "bool" |hp_expr| NIL)
    (|derivable?| CONST-DECL "bool" |derivatives| |analysis|)
    (|derivable?| CONST-DECL "bool" |derivatives_def| |analysis|)
    (|convergent?| CONST-DECL "bool" |lim_of_functions| |analysis|)
    (|convergence| CONST-DECL "bool" |lim_of_functions| |analysis|)
    (|convergence| CONST-DECL "bool" |convergence_functions| |analysis|)
    (NQ CONST-DECL "real" |derivatives_def| |analysis|)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (|adh| CONST-DECL "setof[real]" |convergence_functions| |analysis|)
    (|fullset| CONST-DECL "set" |sets| NIL)
    (|solution_odes?| CONST-DECL "bool" |hp_expr| NIL)
    (|sol_at_t?| CONST-DECL "bool" |hp_expr| NIL)
    (|deriv| CONST-DECL "[T -> real]" |derivatives| |analysis|)
    (|deriv| CONST-DECL "real" |derivatives_def| |analysis|)
    (|env_at_t?| CONST-DECL "bool" |hp_expr| NIL)
    (|env!1| SKOLEM-CONST-DECL "(P!1)" |chain_rule_re| NIL)
    (|l!1| SKOLEM-CONST-DECL "real" |chain_rule_re| NIL)
    (|x2!1| SKOLEM-CONST-DECL "(A(i!1))" |chain_rule_re| NIL)
    (|env!1| SKOLEM-CONST-DECL "(P!1)" |chain_rule_re| NIL)
    (|l!1| SKOLEM-CONST-DECL "real" |chain_rule_re| NIL)
    (|x2!1| SKOLEM-CONST-DECL "(A(i!1))" |chain_rule_re| NIL)
    (|envi!1| SKOLEM-CONST-DECL "Environment" |chain_rule_re| NIL)
    (P!1 SKOLEM-CONST-DECL "(ddl_dom?)" |chain_rule_re| NIL)
    (|proj| CONST-DECL "bool" |differentiation| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|i!1| SKOLEM-CONST-DECL "below(1 + max_var(ode!1))" |chain_rule_re| NIL)
    (|ode!1| SKOLEM-CONST-DECL "(ODEs_s?(D!1, envi!1))" |chain_rule_re| NIL)
    (D!1 SKOLEM-CONST-DECL "(dd?)" |chain_rule_re| NIL)
    (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|nonzero_abs_is_pos| APPLICATION-JUDGEMENT "{y: posreal | y >= x}"
     |real_defs| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|x2!1| SKOLEM-CONST-DECL "(A(i!1))" |chain_rule_re| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|env!1| SKOLEM-CONST-DECL "(P!1)" |chain_rule_re| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (|l!1| SKOLEM-CONST-DECL "real" |chain_rule_re| NIL)
    (|closed_interval?| CONST-DECL "bool" |interval_def| |ODEs|)
    (<= CONST-DECL "bool" |reals| NIL)
    (|b!1| SKOLEM-CONST-DECL "posreal" |chain_rule_re| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|env!1| SKOLEM-CONST-DECL "(P!1)" |chain_rule_re| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|x2!1| SKOLEM-CONST-DECL "(A(i!1))" |chain_rule_re| NIL)
    (|l!1| SKOLEM-CONST-DECL "real" |chain_rule_re| NIL)
    (|b!1| SKOLEM-CONST-DECL "posreal" |chain_rule_re| NIL)
    (|ddl_dom?| CONST-DECL "bool" |differentiation| NIL)
    (|not_one_element?| CONST-DECL "bool" |differentiation| NIL)
    (|not_one_element?| CONST-DECL "bool" |deriv_domain_def| |analysis|)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|connected?| CONST-DECL "bool" |differentiation| NIL)
    (|diff_re?| CONST-DECL "bool" |chain_rule_re| NIL)
    (|differentiable_re_p?| CONST-DECL "bool" |chain_rule_re| NIL)
    (|differentiable?| CONST-DECL "bool" |differentiable_def| |mv_analysis|)
    (|convergence_zero?| CONST-DECL "bool" |vector_sequences| |mv_analysis|)
    (NQ CONST-DECL "real" |differentiable_def| |mv_analysis|)
    (* CONST-DECL "real" |matrices| |matrices|)
    (|vec_re| CONST-DECL "real" |chain_rule_re| NIL)
    (+ CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices| |matrices|)
    (|norm_inf| CONST-DECL "[(cons?) -> nonneg_real]" |norms| |mv_analysis|)
    (- CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices| |matrices|)
    (|sub| CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices|
     |matrices|)
    (|norm_inf| CONST-DECL "(norm?(m))" |norms| |mv_analysis|)
    (|max_var| CONST-DECL "nat" |hp_def| NIL)
    (|env_sol| CONST-DECL "Environment" |ODEs_equiv| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|hp| CONST-DECL "bool" |interval_def| |ODEs|)
    (|between?| CONST-DECL "bool" |differentiation| NIL)
    (A CONST-DECL "setof[nzreal]" |derivatives_def| |analysis|)
    (|closed_interval| CONST-DECL "(closed_interval?(a, b))" |interval_def|
     |ODEs|))
   NIL
   (|der_ll_partial_der| SUBTYPE "chain_rule_re.P"
    "(differentiation.ddl_dom?(chain_rule_re.i))")))
 (|der_ll_partial_der| 0
  (|der_ll_partial_der-1| |nil| 3853931424
   ("" (SKEEP)
    (("" (LEMMA "der_re_partial_der")
      (("" (INST -1 "max_var(ode)" "P" _ _ _)
        (("" (INST -1 "env_sol(D,envi,ode)(car(p))" "R" "i")
          (("" (REPLACE -1 1 RL)
            (("" (EXPAND "der_re" 1)
              (("" (ASSERT)
                (("" (EXPAND "der_re_p" 1)
                  (("" (EXPAND "vec_2_env" 1) (("" (PROPAX) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|der_re_partial_der| FORMULA-DECL NIL |chain_rule_re| NIL)
    (|p| SKOLEM-CONST-DECL "(lift_rd(D))" |chain_rule_re| NIL)
    (|lift_rd| CONST-DECL "domain[1]" |lift_real_fun_def| |mv_analysis|)
    (|domain| TYPE-EQ-DECL NIL |domain_vec2real_def| |mv_analysis|)
    (|real_dom| TYPE-EQ-DECL NIL |lift_real_fun_def| |mv_analysis|)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|ode| SKOLEM-CONST-DECL "(ODEs_s?(D, envi))" |chain_rule_re| NIL)
    (|envi| SKOLEM-CONST-DECL "Environment" |chain_rule_re| NIL)
    (D SKOLEM-CONST-DECL "(dd?)" |chain_rule_re| NIL)
    (|env_sol| CONST-DECL "Environment" |ODEs_equiv| NIL)
    (P SKOLEM-CONST-DECL "(ddl_dom?)" |chain_rule_re| NIL)
    (R SKOLEM-CONST-DECL "RealExpr" |chain_rule_re| NIL)
    (|diff_re?| CONST-DECL "bool" |chain_rule_re| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|der_re| CONST-DECL "Environment" |chain_rule_re| NIL)
    (|der_re_p| CONST-DECL "Environment" |chain_rule_re| NIL)
    (|vec_2_env| CONST-DECL "Environment" |chain_rule_re| NIL)
    (|ddl_dom?| CONST-DECL "bool" |differentiation| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|ODEs_s?| CONST-DECL "bool" |ODEs_equiv| NIL)
    (|dd?| CONST-DECL "bool" |hp_expr| NIL)
    (|ODEs| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|mapexpr_inj| CONST-DECL "bool" |hp_def| NIL)
    (|max_var| CONST-DECL "nat" |hp_def| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|MapExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|dLVar| TYPE-DECL NIL |hp_def| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|null_MapExprInj| NAME-JUDGEMENT "MapExprInj" |hp_def| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic|
     |mv_analysis|))
   SHOSTAK))
 (|eq_re_comp| 0
  (|eq_re_comp-1| |nil| 3798373313
   ("" (SKEEP*)
    (("" (DECOMPOSE-EQUALITY 1)
      (("" (EXPAND "vec_re" 1)
        (("" (LEMMA "vec_2_env_id")
          (("" (INST?)
            (("" (ASSERT)
              ((""
                (CASE "vec_2_env(max_var(ode),
                       env_2_vec(max_var(ode), env_sol(D, envi, ode)(x!1)),
                       env_sol(D, envi, ode)(x!1)) = vec_2_env(max_var(ode),
                          env_2_vec(max_var(ode), env_sol(D, envi, ode)(x!1)),
                          envi)")
                (("1" (ASSERT) NIL NIL)
                 ("2" (HIDE 2)
                  (("2" (DECOMPOSE-EQUALITY 1)
                    (("2" (CASE "x!2<=max_var(ode)")
                      (("1" (DECOMPOSE-EQUALITY -2)
                        (("1" (INST -1 "x!2")
                          (("1" (REPLACE -1 1)
                            (("1" (EXPAND "vec_2_env" 1 1)
                              (("1" (ASSERT)
                                (("1" (LEMMA "env_2_vec_nth")
                                  (("1"
                                    (INST -1 "max_var(ode)"
                                     "env_sol(D, envi, ode)(x!1)" "x!2")
                                    (("1" (REPLACE -1 1)
                                      (("1" (PROPAX) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (DECOMPOSE-EQUALITY -1)
                        (("2" (INST -1 "x!2")
                          (("2" (EXPAND "vec_2_env" 2 1)
                            (("2" (ASSERT)
                              (("2" (EXPAND "vec_2_env" 2 1)
                                (("2" (EXPAND "env_sol" 2 1)
                                  (("2"
                                    (TYPEPRED
                                     "env_at_t(ode, fs_sol(D, envi, ode), envi)(x!1)")
                                    (("2" (EXPAND "env_at_t?" -1)
                                      (("2" (FLATTEN)
                                        (("2" (INST -1 "x!2")
                                          (("1" (ASSERT) NIL NIL)
                                           ("2" (LEMMA "nip_max_var")
                                            (("2" (INST -1 "ode" "x!2") NIL
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic|
     |mv_analysis|)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|dLVar| TYPE-DECL NIL |hp_def| NIL)
    (|MapExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|mapexpr_inj| CONST-DECL "bool" |hp_def| NIL)
    (|ODEs| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|ODEs_s?| CONST-DECL "bool" |ODEs_equiv| NIL)
    (|env_sol| CONST-DECL "Environment" |ODEs_equiv| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|vec_re| CONST-DECL "real" |chain_rule_re| NIL)
    (|max_var| CONST-DECL "nat" |hp_def| NIL)
    (|env_2_vec| DEF-DECL "VectorN(k + 1)" |chain_rule_re| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|dd?| CONST-DECL "bool" |hp_expr| NIL)
    (|vec_2_env_id| FORMULA-DECL NIL |chain_rule_re| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|env_2_vec_nth| FORMULA-DECL NIL |chain_rule_re| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|x!2| SKOLEM-CONST-DECL "nat" |chain_rule_re| NIL)
    (|ode| SKOLEM-CONST-DECL "(ODEs_s?(D, envi))" |chain_rule_re| NIL)
    (|envi| SKOLEM-CONST-DECL "Environment" |chain_rule_re| NIL)
    (D SKOLEM-CONST-DECL "(dd?)" |chain_rule_re| NIL)
    (|not_in_map| CONST-DECL "bool" |hp_def| NIL)
    (|MapExprInj| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nip_max_var| FORMULA-DECL NIL |hp_def| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|env_at_t?| CONST-DECL "bool" |hp_expr| NIL)
    (|solution_odes_u?| CONST-DECL "bool" |hp_expr| NIL)
    (|fs_sol| CONST-DECL "(solution_odes_u?(D, odes, envi))" |ODEs_equiv| NIL)
    (|env_at_t| CONST-DECL "{env: (env_at_t?(odes, fs, envi, t)) |
   FORALL (env2: (env_at_t?(odes, fs, envi, t))): env = env2}"
     |hp_expr| NIL)
    (|vec_2_env| CONST-DECL "Environment" |chain_rule_re| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|null_MapExprInj| NAME-JUDGEMENT "MapExprInj" |hp_def| NIL))
   SHOSTAK))
 (|env_sol_env2vec| 0
  (|env_sol_env2vec-1| |nil| 3852214243
   ("" (SKEEP)
    (("" (DECOMPOSE-EQUALITY 1)
      (("" (EXPAND "env_sol")
        (("" (EXPAND "vec_2_env")
          (("" (EXPAND "env_at_t")
            (("" (LIFT-IF 1)
              (("" (LIFT-IF 1)
                (("" (SPLIT 1)
                  (("1" (FLATTEN)
                    (("1" (SPLIT)
                      (("1" (FLATTEN)
                        (("1" (LEMMA "env_2_vec_nth")
                          (("1" (INST?)
                            (("1" (REPLACE -1) (("1" (ASSERT) NIL NIL)) NIL)
                             ("2" (HIDE 2)
                              (("2" (SKEEP)
                                (("2" (EXPAND "nonempty?")
                                  (("2" (EXPAND "empty?")
                                    (("2" (EXPAND "not_in_map")
                                      (("2" (SKEEP 1)
                                        (("2" (INST -2 "i_1")
                                          (("2" (EXPAND "member")
                                            (("2" (ASSERT) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (PROPAX) NIL NIL))
                      NIL))
                    NIL)
                   ("2" (FLATTEN)
                    (("2" (LIFT-IF 2)
                      (("2" (SPLIT 2)
                        (("1" (FLATTEN)
                          (("1" (LEMMA "env_2_vec_nth")
                            (("1" (INST?)
                              (("1" (REPLACE -1) (("1" (ASSERT) NIL NIL)) NIL)
                               ("2" (HIDE 3)
                                (("2" (SKEEP)
                                  (("2" (EXPAND "nonempty?")
                                    (("2" (EXPAND "empty?")
                                      (("2" (EXPAND "not_in_map")
                                        (("2" (SKEEP 1)
                                          (("2" (INST -2 "i_1")
                                            (("2" (EXPAND "member")
                                              (("2" (ASSERT) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (FLATTEN)
                          (("2" (LEMMA "nip_max_var")
                            (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|dd?| CONST-DECL "bool" |hp_expr| NIL)
    (|dLVar| TYPE-DECL NIL |hp_def| NIL)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|MapExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|mapexpr_inj| CONST-DECL "bool" |hp_def| NIL)
    (|ODEs| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|ODEs_s?| CONST-DECL "bool" |ODEs_equiv| NIL)
    (|env_sol| CONST-DECL "Environment" |ODEs_equiv| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|real_dom| TYPE-EQ-DECL NIL |lift_real_fun_def| |mv_analysis|)
    (|domain| TYPE-EQ-DECL NIL |domain_vec2real_def| |mv_analysis|)
    (|lift_rd| CONST-DECL "domain[1]" |lift_real_fun_def| |mv_analysis|)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|vec_2_env| CONST-DECL "Environment" |chain_rule_re| NIL)
    (|max_var| CONST-DECL "nat" |hp_def| NIL)
    (|env_2_vec| DEF-DECL "VectorN(k + 1)" |chain_rule_re| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|env_2_vec_nth| FORMULA-DECL NIL |chain_rule_re| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|choose| CONST-DECL "(p)" |sets| NIL)
    (|fs_sol| CONST-DECL "(solution_odes_u?(D, odes, envi))" |ODEs_equiv| NIL)
    (|solution_odes_u?| CONST-DECL "bool" |hp_expr| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|MapExprInj| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|not_in_map| CONST-DECL "bool" |hp_def| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (|dlvar_index| ADT-ACCESSOR-DECL "[dLVar -> nat]" |hp_def| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL) (< CONST-DECL "bool" |reals| NIL)
    (|x!1| SKOLEM-CONST-DECL "nat" |chain_rule_re| NIL)
    (D SKOLEM-CONST-DECL "(dd?)" |chain_rule_re| NIL)
    (|envi| SKOLEM-CONST-DECL "Environment" |chain_rule_re| NIL)
    (|ode| SKOLEM-CONST-DECL "(ODEs_s?(D, envi))" |chain_rule_re| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nip_max_var| FORMULA-DECL NIL |hp_def| NIL)
    (|env_at_t| CONST-DECL "{env: (env_at_t?(odes, fs, envi, t)) |
   FORALL (env2: (env_at_t?(odes, fs, envi, t))): env = env2}"
     |hp_expr| NIL)
    (|null_MapExprInj| NAME-JUDGEMENT "MapExprInj" |hp_def| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic|
     |mv_analysis|))
   SHOSTAK))
 (|e2v_diff_p_TCC1| 0
  (|e2v_diff_p_TCC1-1| |nil| 3798447050
   ("" (SKEEP)
    (("" (LEMMA "dd_lift_dd")
      (("" (INST?)
        (("" (ASSERT)
          (("" (TYPEPRED "D")
            (("" (LEMMA "dd_deriv_domain") (("" (INST?) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|dd_lift_dd| FORMULA-DECL NIL |lift_real_fun_def| |mv_analysis|)
    (|dd_deriv_domain| FORMULA-DECL NIL |hp_expr| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|dd?| CONST-DECL "bool" |hp_expr| NIL)
    (|real_dom| TYPE-EQ-DECL NIL |lift_real_fun_def| |mv_analysis|)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|null_MapExprInj| NAME-JUDGEMENT "MapExprInj" |hp_def| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic|
     |mv_analysis|))
   NIL
   (|e2v_diff_p| SUBTYPE "lift_real_fun_def.lift_rd(chain_rule_re.D)"
    "(derivative_domain_multi[1].deriv_domain?)")))
 (|e2v_diff_p| 0
  (|e2v_diff_p-3| |nil| 3853854063
   ("" (SKEEP)
    (("" (LEMMA "derivable_nth_mat_point[1]")
      ((""
        (INST -1 "max_var(ode) + 1" "lift_rd(D)"
         "           liftl(max_var(ode) + 1, D,
                     LAMBDA (tt: (D)):
                       env_2_vec(max_var(ode), env_sol(D, envi, ode)(tt)))"
         "p")
        (("" (ASSERT)
          (("" (HIDE 2)
            (("" (SKEEP)
              (("" (CASE "not_in_map(ode)(i)")
                (("1" (EXPAND "differentiable?")
                  (("1" (INST 1 "(: 0 :)")
                    (("1" (EXPAND "convergence_zero?")
                      (("1" (SKEEP)
                        (("1" (INST 1 "1")
                          (("1" (SKEEP)
                            (("1" (EXPAND "NQ" 1)
                              (("1" (EXPAND "nth" 1)
                                (("1" (EXPAND "liftl" 1)
                                  (("1" (TYPEPRED "p")
                                    (("1" (EXPAND "lift_rd" -3)
                                      (("1" (ASSERT)
                                        (("1" (TYPEPRED "x")
                                          (("1" (EXPAND "NQ" -3)
                                            (("1" (EXPAND "lift_rd" -3)
                                              (("1" (ASSERT)
                                                (("1" (FLATTEN)
                                                  (("1" (ASSERT)
                                                    (("1"
                                                      (LEMMA "env_2_vec_nth")
                                                      (("1"
                                                        (INST-CP -1
                                                         "max_var(ode)"
                                                         "env_sol(D, envi, ode)(car(p + x))"
                                                         "i")
                                                        (("1" (REPLACE -2)
                                                          (("1"
                                                            (INST -1
                                                             "max_var(ode)"
                                                             "env_sol(D, envi, ode)(car(p))"
                                                             "i")
                                                            (("1" (REPLACE -1)
                                                              (("1"
                                                                (CASE
                                                                    "(env_sol(D, envi, ode)(car(p + x))(i) - (: 0 :) * x -
                                env_sol(D, envi, ode)(car(p))(i)) = 0")
                                                                (("1"
                                                                  (REPLACE -1)
                                                                  (("1"
                                                                    (ASSERT)
                                                                    (("1"
                                                                      (GRIND)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL)
                                                                 ("2" (HIDE 3)
                                                                  (("2"
                                                                    (EXPAND "*"
                                                                            1
                                                                            1)
                                                                    (("2"
                                                                      (EXPAND
                                                                       "dot" 1
                                                                       1)
                                                                      (("2"
                                                                        (EXPAND
                                                                         "dot"
                                                                         1 1)
                                                                        (("2"
                                                                          (EXPAND
                                                                           "env_sol"
                                                                           1 1)
                                                                          (("2"
                                                                            (EXPAND
                                                                             "env_sol"
                                                                             1)
                                                                            (("2"
                                                                              (TYPEPRED
                                                                               "env_at_t(ode, fs_sol(D, envi, ode), envi)(car(p + x))")
                                                                              (("2"
                                                                                (TYPEPRED
                                                                                 " env_at_t(ode, fs_sol(D, envi, ode), envi)(car(p))")
                                                                                (("2"
                                                                                  (EXPAND
                                                                                   "env_at_t?"
                                                                                   -1)
                                                                                  (("2"
                                                                                    (EXPAND
                                                                                     "env_at_t?"
                                                                                     -3)
                                                                                    (("2"
                                                                                      (FLATTEN)
                                                                                      (("2"
                                                                                        (INST
                                                                                         -4
                                                                                         "i")
                                                                                        (("2"
                                                                                          (INST
                                                                                           -1
                                                                                           "i")
                                                                                          (("2"
                                                                                            (REPLACE
                                                                                             -)
                                                                                            (("2"
                                                                                              (ASSERT)
                                                                                              NIL
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (EXPAND "nth" 2 1)
                  (("2" (EXPAND "liftl" 2 1)
                    (("2" (LEMMA "env_2_vec_nth")
                      (("2" (INST -1 "max_var(ode)" _ "i")
                        (("2" (EXPAND "env_sol" 2 1)
                          (("2"
                            (TYPEPRED "env_at_t
                                                     (ode,
                                                      fs_sol(D, envi, ode),
                                                      envi)
                                                     (car(p))")
                            (("2" (EXPAND "env_at_t?" -1)
                              (("2" (FLATTEN)
                                (("2" (EXPAND "not_in_map" 1 1)
                                  (("2" (SKEEP)
                                    (("2" (INST -2 "i_1")
                                      (("2" (TYPEPRED "fs_sol(D, envi, ode)")
                                        (("2" (EXPAND "solution_odes_u?" -1)
                                          (("2" (FLATTEN)
                                            (("2" (HIDE -2)
                                              (("2"
                                                (EXPAND "solution_odes?" -1)
                                                (("2" (FLATTEN)
                                                  (("2" (HIDE -3)
                                                    (("2"
                                                      (EXPAND "derivable_odes?"
                                                              -1)
                                                      (("2" (INST -1 "i_1")
                                                        (("2"
                                                          (EXPAND "derivable?"
                                                                  -1)
                                                          (("2"
                                                            (INST -1 "car(p)")
                                                            (("1"
                                                              (EXPAND
                                                               "restrict" -1)
                                                              (("1"
                                                                (EXPAND
                                                                 "derivable?"
                                                                 -1)
                                                                (("1" (HIDE -2)
                                                                  (("1"
                                                                    (HIDE -4)
                                                                    (("1"
                                                                      (EXPAND
                                                                       "differentiable?")
                                                                      (("1"
                                                                        (EXPAND
                                                                         "convergent?"
                                                                         -1)
                                                                        (("1"
                                                                          (SKEEP)
                                                                          (("1"
                                                                            (INST
                                                                             1
                                                                             "(: l :)")
                                                                            (("1"
                                                                              (EXPAND
                                                                               "convergence_zero?"
                                                                               1)
                                                                              (("1"
                                                                                (EXPAND
                                                                                 "convergence")
                                                                                (("1"
                                                                                  (EXPAND
                                                                                   "convergence")
                                                                                  (("1"
                                                                                    (FLATTEN)
                                                                                    (("1"
                                                                                      (SKEEP)
                                                                                      (("1"
                                                                                        (INST
                                                                                         -2
                                                                                         "epsilon")
                                                                                        (("1"
                                                                                          (SKEEP)
                                                                                          (("1"
                                                                                            (INST
                                                                                             1
                                                                                             "delta")
                                                                                            (("1"
                                                                                              (SKEEP)
                                                                                              (("1"
                                                                                                (INST
                                                                                                 -2
                                                                                                 "car(x)")
                                                                                                (("1"
                                                                                                  (SPLIT
                                                                                                   -2)
                                                                                                  (("1"
                                                                                                    (EXPAND
                                                                                                     "NQ")
                                                                                                    (("1"
                                                                                                      (ASSERT)
                                                                                                      (("1"
                                                                                                        (TYPEPRED
                                                                                                         "x")
                                                                                                        (("1"
                                                                                                          (EXPAND
                                                                                                           "NQ"
                                                                                                           -3)
                                                                                                          (("1"
                                                                                                            (ASSERT)
                                                                                                            (("1"
                                                                                                              (FLATTEN)
                                                                                                              (("1"
                                                                                                                (EXPAND
                                                                                                                 "lift_rd"
                                                                                                                 -3)
                                                                                                                (("1"
                                                                                                                  (ASSERT)
                                                                                                                  (("1"
                                                                                                                    (TYPEPRED
                                                                                                                     "p")
                                                                                                                    (("1"
                                                                                                                      (EXPAND
                                                                                                                       "lift_rd"
                                                                                                                       -3)
                                                                                                                      (("1"
                                                                                                                        (ASSERT)
                                                                                                                        (("1"
                                                                                                                          (HIDE
                                                                                                                           -1
                                                                                                                           -4)
                                                                                                                          (("1"
                                                                                                                            (INST-CP
                                                                                                                             -9
                                                                                                                             "env_at_t(ode, fs_sol(D, envi, ode), envi)
                                                       (car(p + x))")
                                                                                                                            (("1"
                                                                                                                              (INST
                                                                                                                               -9
                                                                                                                               "                          env_at_t(ode, fs_sol(D, envi, ode), envi)
                                                        (car(p))")
                                                                                                                              (("1"
                                                                                                                                (REPLACE
                                                                                                                                 -9)
                                                                                                                                (("1"
                                                                                                                                  (REPLACE
                                                                                                                                   -10)
                                                                                                                                  (("1"
                                                                                                                                    (REPLACE
                                                                                                                                     -8)
                                                                                                                                    (("1"
                                                                                                                                      (HIDE
                                                                                                                                       -7)
                                                                                                                                      (("1"
                                                                                                                                        (REPLACE
                                                                                                                                         -10
                                                                                                                                         -7)
                                                                                                                                        (("1"
                                                                                                                                          (REPLACE
                                                                                                                                           -7
                                                                                                                                           2
                                                                                                                                           RL)
                                                                                                                                          (("1"
                                                                                                                                            (TYPEPRED
                                                                                                                                             "env_at_t(ode, fs_sol(D, envi, ode), envi)(car(p + x))")
                                                                                                                                            (("1"
                                                                                                                                              (EXPAND
                                                                                                                                               "env_at_t?"
                                                                                                                                               -1)
                                                                                                                                              (("1"
                                                                                                                                                (FLATTEN)
                                                                                                                                                (("1"
                                                                                                                                                  (INST
                                                                                                                                                   -2
                                                                                                                                                   "i_1")
                                                                                                                                                  (("1"
                                                                                                                                                    (REPLACE
                                                                                                                                                     -13
                                                                                                                                                     -2)
                                                                                                                                                    (("1"
                                                                                                                                                      (REPLACE
                                                                                                                                                       -2
                                                                                                                                                       2
                                                                                                                                                       RL)
                                                                                                                                                      (("1"
                                                                                                                                                        (REPLACE
                                                                                                                                                         -13
                                                                                                                                                         -8)
                                                                                                                                                        (("1"
                                                                                                                                                          (REPLACE
                                                                                                                                                           -10
                                                                                                                                                           -8
                                                                                                                                                           RL)
                                                                                                                                                          (("1"
                                                                                                                                                            (ASSERT)
                                                                                                                                                            (("1"
                                                                                                                                                              (EXPAND
                                                                                                                                                               "+"
                                                                                                                                                               2
                                                                                                                                                               1)
                                                                                                                                                              (("1"
                                                                                                                                                                (EXPAND
                                                                                                                                                                 "add"
                                                                                                                                                                 2
                                                                                                                                                                 1)
                                                                                                                                                                (("1"
                                                                                                                                                                  (ASSERT)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (EXPAND
                                                                                                                                                                     "*"
                                                                                                                                                                     2)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (EXPAND
                                                                                                                                                                       "dot"
                                                                                                                                                                       2
                                                                                                                                                                       1)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (ASSERT)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (EXPAND
                                                                                                                                                                           "dot"
                                                                                                                                                                           2
                                                                                                                                                                           1)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (HIDE
                                                                                                                                                                             -1
                                                                                                                                                                             -2
                                                                                                                                                                             -3
                                                                                                                                                                             -4
                                                                                                                                                                             -5
                                                                                                                                                                             -6
                                                                                                                                                                             -7)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (HIDE
                                                                                                                                                                               -2
                                                                                                                                                                               -3
                                                                                                                                                                               -4
                                                                                                                                                                               -5
                                                                                                                                                                               -6
                                                                                                                                                                               -7)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (LEMMA
                                                                                                                                                                                 "abs_div")
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (INST
                                                                                                                                                                                   -1
                                                                                                                                                                                   "norm_inf(1)(x)"
                                                                                                                                                                                   "(fs_sol(D, envi, ode)(i_1)(car(p) + car(x)) -
                                  fs_sol(D, envi, ode)(i_1)(car(p))
                                  - l * car(x))")
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (EXPAND
                                                                                                                                                                                     "norm_inf"
                                                                                                                                                                                     2
                                                                                                                                                                                     1)
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (EXPAND
                                                                                                                                                                                       "norm_inf"
                                                                                                                                                                                       2)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (EXPAND
                                                                                                                                                                                         "abs"
                                                                                                                                                                                         2
                                                                                                                                                                                         2)
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (EXPAND
                                                                                                                                                                                           "max"
                                                                                                                                                                                           2)
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (EXPAND
                                                                                                                                                                                             "length"
                                                                                                                                                                                             2)
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (ASSERT)
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (HIDE
                                                                                                                                                                                                 -1)
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (LEMMA
                                                                                                                                                                                                   "abs_div")
                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                    (CASE
                                                                                                                                                                                                        "NOT (fs_sol(D, envi, ode)(i_1)(car(p) + car(x)) -
                                            fs_sol(D, envi, ode)(i_1)(car(p)))
                                           / car(x)
                                           - l = ((fs_sol(D, envi, ode)(i_1)(car(p) + car(x)) -
                                            fs_sol(D, envi, ode)(i_1)(car(p)))
                                           - l*car(x))/car(x)")
                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                      (ASSERT)
                                                                                                                                                                                                      NIL
                                                                                                                                                                                                      NIL)
                                                                                                                                                                                                     ("2"
                                                                                                                                                                                                      (REPLACE
                                                                                                                                                                                                       -1)
                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                        (INST
                                                                                                                                                                                                         -2
                                                                                                                                                                                                         "car(x)"
                                                                                                                                                                                                         "(fs_sol(D, envi, ode)(i_1)(car(p) + car(x)) -
                                       fs_sol(D, envi, ode)(i_1)(car(p)))
                                      - l * car(x)")
                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                          (REPLACE
                                                                                                                                                                                                           -2
                                                                                                                                                                                                           -3)
                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                            (ASSERT)
                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                              (HIDE
                                                                                                                                                                                                               -1)
                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                (LEMMA
                                                                                                                                                                                                                 "abs_div")
                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                  (INST
                                                                                                                                                                                                                   -1
                                                                                                                                                                                                                   "abs(car(x))"
                                                                                                                                                                                                                   "(fs_sol(D, envi, ode)(i_1)(car(p) + car(x)) -
                                      fs_sol(D, envi, ode)(i_1)(car(p))
                                      - l * car(x))")
                                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                                    (REPLACE
                                                                                                                                                                                                                     -1
                                                                                                                                                                                                                     2)
                                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                                      (EXPAND
                                                                                                                                                                                                                       "abs"
                                                                                                                                                                                                                       2
                                                                                                                                                                                                                       2)
                                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                                        (PROPAX)
                                                                                                                                                                                                                        NIL
                                                                                                                                                                                                                        NIL))
                                                                                                                                                                                                                      NIL))
                                                                                                                                                                                                                    NIL))
                                                                                                                                                                                                                  NIL))
                                                                                                                                                                                                                NIL))
                                                                                                                                                                                                              NIL))
                                                                                                                                                                                                            NIL))
                                                                                                                                                                                                          NIL))
                                                                                                                                                                                                        NIL))
                                                                                                                                                                                                      NIL))
                                                                                                                                                                                                    NIL))
                                                                                                                                                                                                  NIL))
                                                                                                                                                                                                NIL))
                                                                                                                                                                                              NIL))
                                                                                                                                                                                            NIL))
                                                                                                                                                                                          NIL))
                                                                                                                                                                                        NIL))
                                                                                                                                                                                      NIL))
                                                                                                                                                                                    NIL))
                                                                                                                                                                                  NIL))
                                                                                                                                                                                NIL))
                                                                                                                                                                              NIL))
                                                                                                                                                                            NIL))
                                                                                                                                                                          NIL))
                                                                                                                                                                        NIL))
                                                                                                                                                                      NIL))
                                                                                                                                                                    NIL))
                                                                                                                                                                  NIL))
                                                                                                                                                                NIL))
                                                                                                                                                              NIL))
                                                                                                                                                            NIL))
                                                                                                                                                          NIL))
                                                                                                                                                        NIL))
                                                                                                                                                      NIL))
                                                                                                                                                    NIL))
                                                                                                                                                  NIL))
                                                                                                                                                NIL))
                                                                                                                                              NIL))
                                                                                                                                            NIL))
                                                                                                                                          NIL))
                                                                                                                                        NIL))
                                                                                                                                      NIL))
                                                                                                                                    NIL))
                                                                                                                                  NIL))
                                                                                                                                NIL))
                                                                                                                              NIL))
                                                                                                                            NIL))
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL)
                                                                                                   ("2"
                                                                                                    (HIDE
                                                                                                     2)
                                                                                                    (("2"
                                                                                                      (EXPAND
                                                                                                       "fullset")
                                                                                                      (("2"
                                                                                                        (PROPAX)
                                                                                                        NIL
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL)
                                                                                                   ("3"
                                                                                                    (HIDE
                                                                                                     2)
                                                                                                    (("3"
                                                                                                      (EXPAND
                                                                                                       "-"
                                                                                                       -6)
                                                                                                      (("3"
                                                                                                        (EXPAND
                                                                                                         "sub"
                                                                                                         -6)
                                                                                                        (("3"
                                                                                                          (EXPAND
                                                                                                           "zero_vec"
                                                                                                           -6)
                                                                                                          (("3"
                                                                                                            (EXPAND
                                                                                                             "zero_vec"
                                                                                                             -6)
                                                                                                            (("3"
                                                                                                              (EXPAND
                                                                                                               "scal"
                                                                                                               -6)
                                                                                                              (("3"
                                                                                                                (EXPAND
                                                                                                                 "scal"
                                                                                                                 -6)
                                                                                                                (("3"
                                                                                                                  (EXPAND
                                                                                                                   "add"
                                                                                                                   -6)
                                                                                                                  (("3"
                                                                                                                    (EXPAND
                                                                                                                     "add"
                                                                                                                     -6)
                                                                                                                    (("3"
                                                                                                                      (ASSERT)
                                                                                                                      (("3"
                                                                                                                        (TYPEPRED
                                                                                                                         "x")
                                                                                                                        (("3"
                                                                                                                          (EXPAND
                                                                                                                           "length"
                                                                                                                           -2)
                                                                                                                          (("3"
                                                                                                                            (EXPAND
                                                                                                                             "length"
                                                                                                                             -2)
                                                                                                                            (("3"
                                                                                                                              (LIFT-IF
                                                                                                                               -2)
                                                                                                                              (("3"
                                                                                                                                (FLATTEN)
                                                                                                                                (("3"
                                                                                                                                  (SPLIT
                                                                                                                                   -2)
                                                                                                                                  (("1"
                                                                                                                                    (ASSERT)
                                                                                                                                    (("1"
                                                                                                                                      (EXPAND
                                                                                                                                       "norm_inf")
                                                                                                                                      (("1"
                                                                                                                                        (EXPAND
                                                                                                                                         "norm_inf")
                                                                                                                                        (("1"
                                                                                                                                          (EXPAND
                                                                                                                                           "abs")
                                                                                                                                          (("1"
                                                                                                                                            (EXPAND
                                                                                                                                             "length")
                                                                                                                                            (("1"
                                                                                                                                              (EXPAND
                                                                                                                                               "max")
                                                                                                                                              (("1"
                                                                                                                                                (EXPAND
                                                                                                                                                 "length")
                                                                                                                                                (("1"
                                                                                                                                                  (ASSERT)
                                                                                                                                                  NIL
                                                                                                                                                  NIL))
                                                                                                                                                NIL))
                                                                                                                                              NIL))
                                                                                                                                            NIL))
                                                                                                                                          NIL))
                                                                                                                                        NIL))
                                                                                                                                      NIL))
                                                                                                                                    NIL)
                                                                                                                                   ("2"
                                                                                                                                    (FLATTEN)
                                                                                                                                    (("2"
                                                                                                                                      (ASSERT)
                                                                                                                                      NIL
                                                                                                                                      NIL))
                                                                                                                                    NIL))
                                                                                                                                  NIL))
                                                                                                                                NIL))
                                                                                                                              NIL))
                                                                                                                            NIL))
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL)
                                                                                                 ("2"
                                                                                                  (HIDE
                                                                                                   2)
                                                                                                  (("2"
                                                                                                    (SPLIT
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (TYPEPRED
                                                                                                       "x")
                                                                                                      (("1"
                                                                                                        (EXPAND
                                                                                                         "zero_vec"
                                                                                                         -4)
                                                                                                        (("1"
                                                                                                          (EXPAND
                                                                                                           "zero_vec"
                                                                                                           1
                                                                                                           1)
                                                                                                          (("1"
                                                                                                            (DECOMPOSE-EQUALITY
                                                                                                             1)
                                                                                                            (("1"
                                                                                                              (GRIND)
                                                                                                              NIL
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL)
                                                                                                     ("2"
                                                                                                      (EXPAND
                                                                                                       "A"
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (TYPEPRED
                                                                                                         "p")
                                                                                                        (("2"
                                                                                                          (TYPEPRED
                                                                                                           "x")
                                                                                                          (("2"
                                                                                                            (EXPAND
                                                                                                             "NQ"
                                                                                                             -3)
                                                                                                            (("2"
                                                                                                              (EXPAND
                                                                                                               "lift_rd"
                                                                                                               -3)
                                                                                                              (("2"
                                                                                                                (FLATTEN)
                                                                                                                (("2"
                                                                                                                  (TYPEPRED
                                                                                                                   "x")
                                                                                                                  (("2"
                                                                                                                    (ASSERT)
                                                                                                                    (("2"
                                                                                                                      (EXPAND
                                                                                                                       "+"
                                                                                                                       -7)
                                                                                                                      (("2"
                                                                                                                        (ASSERT)
                                                                                                                        (("2"
                                                                                                                          (EXPAND
                                                                                                                           "add"
                                                                                                                           -7)
                                                                                                                          (("2"
                                                                                                                            (PROPAX)
                                                                                                                            NIL
                                                                                                                            NIL))
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL)
                                                             ("2" (HIDE 2)
                                                              (("2"
                                                                (TYPEPRED "p")
                                                                (("2"
                                                                  (EXPAND
                                                                   "lift_rd"
                                                                   -3)
                                                                  (("2"
                                                                    (PROPAX)
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|derivable_nth_mat_point| FORMULA-DECL NIL |convergence_vec2vec|
     |mv_analysis|)
    (|derivable_odes?| CONST-DECL "bool" |hp_expr| NIL)
    (|derivable?| CONST-DECL "bool" |derivatives| |analysis|)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (|convergence| CONST-DECL "bool" |convergence_functions| |analysis|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|list_cons_extensionality| FORMULA-DECL NIL |list_adt| NIL)
    (|fullset_is_clopen| NAME-JUDGEMENT
     "clopen[real, (metric_induced_topology)]" |real_topology| |metric_space|)
    (|real_is_complete| NAME-JUDGEMENT "metric_complete" |real_topology|
     |metric_space|)
    (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|norm?| CONST-DECL "bool" |norms| |mv_analysis|)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|nonzero_abs_is_pos| APPLICATION-JUDGEMENT "{y: posreal | y >= x}"
     |real_defs| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|abs_div| FORMULA-DECL NIL |real_props| NIL)
    (NQ CONST-DECL "real" |derivatives_def| |analysis|)
    (|fullset| CONST-DECL "set" |sets| NIL)
    (|x| SKOLEM-CONST-DECL "{xx: (NQ[1](lift_rd(D), p)) | xx /= zero_vec(1)}"
     |chain_rule_re| NIL)
    (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (A CONST-DECL "setof[nzreal]" |derivatives_def| |analysis|)
    (|convergence| CONST-DECL "bool" |lim_of_functions| |analysis|)
    (|convergent?| CONST-DECL "bool" |lim_of_functions| |analysis|)
    (|derivable?| CONST-DECL "bool" |derivatives_def| |analysis|)
    (|p| SKOLEM-CONST-DECL "(lift_rd(D))" |chain_rule_re| NIL)
    (|solution_odes?| CONST-DECL "bool" |hp_expr| NIL)
    (|differentiable?| CONST-DECL "bool" |differentiable_def| |mv_analysis|)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|convergence_zero?| CONST-DECL "bool" |vector_sequences| |mv_analysis|)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (NQ CONST-DECL "real" |differentiable_def| |mv_analysis|)
    (|zero_vec| DEF-DECL "VectorN(m)" |vector_arithmetic| |mv_analysis|)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (NQ CONST-DECL "bool" |differentiable_def| |mv_analysis|)
    (|env_2_vec_nth| FORMULA-DECL NIL |chain_rule_re| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|fs_sol| CONST-DECL "(solution_odes_u?(D, odes, envi))" |ODEs_equiv| NIL)
    (|solution_odes_u?| CONST-DECL "bool" |hp_expr| NIL)
    (|env_at_t?| CONST-DECL "bool" |hp_expr| NIL)
    (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|max| DEF-DECL "real" |norms| |mv_analysis|)
    (|abs| DEF-DECL "{l: list | length(l) = length(ll)}" |norms| |mv_analysis|)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (|norm_inf| CONST-DECL "[(cons?) -> nonneg_real]" |norms| |mv_analysis|)
    (- CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices| |matrices|)
    (|sub| CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices|
     |matrices|)
    (|scal| DEF-DECL "VectorN(length(v2))" |matrices| |matrices|)
    (|norm_inf| CONST-DECL "(norm?(m))" |norms| |mv_analysis|)
    (|dot| DEF-DECL "real" |matrices| |matrices|)
    (|env_at_t| CONST-DECL "{env: (env_at_t?(odes, fs, envi, t)) |
   FORALL (env2: (env_at_t?(odes, fs, envi, t))): env = env2}"
     |hp_expr| NIL)
    (|add| DEF-DECL "VectorN(max(length(v1), length(v2)))" |matrices|
     |matrices|)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (D SKOLEM-CONST-DECL "(dd?)" |chain_rule_re| NIL)
    (|envi| SKOLEM-CONST-DECL "Environment" |chain_rule_re| NIL)
    (|ode| SKOLEM-CONST-DECL "(ODEs_s?(D, envi))" |chain_rule_re| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (* CONST-DECL "real" |matrices| |matrices|)
    (+ CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices| |matrices|)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|Vector| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|nth| CONST-DECL "vec2real_f" |convergence_vec2vec| |mv_analysis|)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|MapExprInj| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|not_in_map| CONST-DECL "bool" |hp_def| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|env_sol| CONST-DECL "Environment" |ODEs_equiv| NIL)
    (|env_2_vec| DEF-DECL "VectorN(k + 1)" |chain_rule_re| NIL)
    (|liftl| CONST-DECL "vec2vec[1](k)" |lift_real_fun_def| |mv_analysis|)
    (|vec2vec| TYPE-EQ-DECL NIL |domain_vec2real_def| |mv_analysis|)
    (|lift_rd| CONST-DECL "domain[1]" |lift_real_fun_def| |mv_analysis|)
    (|real_dom| TYPE-EQ-DECL NIL |lift_real_fun_def| |mv_analysis|)
    (|deriv_domain?| CONST-DECL "bool" |derivative_domain_multi| |mv_analysis|)
    (|domain| TYPE-EQ-DECL NIL |domain_vec2real_def| |mv_analysis|)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|ODEs_s?| CONST-DECL "bool" |ODEs_equiv| NIL)
    (|dd?| CONST-DECL "bool" |hp_expr| NIL)
    (|ODEs| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|mapexpr_inj| CONST-DECL "bool" |hp_def| NIL)
    (|max_var| CONST-DECL "nat" |hp_def| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|MapExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|dLVar| TYPE-DECL NIL |hp_def| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|null_MapExprInj| NAME-JUDGEMENT "MapExprInj" |hp_def| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic|
     |mv_analysis|))
   NIL)
  (|e2v_diff_p-2| |nil| 3853853725
   ("" (SKEEP)
    (("" (LEMMA "derivable_nth_mat_point[1]")
      ((""
        (INST -1 "max_var(ode) + 1" "lift_rd(D)"
         "           liftl(max_var(ode) + 1, D,
                     LAMBDA (tt: (D)):
                       env_2_vec(max_var(ode), env_sol(D, envi, ode)(tt)))"
         "p")
        (("" (ASSERT)
          (("" (HIDE 2)
            (("" (SKEEP)
              (("" (CASE "not_in_map(ode)(i)")
                (("1" (EXPAND "differentiable?")
                  (("1" (INST 1 "(: 0 :)")
                    (("1" (EXPAND "convergence_zero?")
                      (("1" (SKEEP)
                        (("1" (INST 1 "1")
                          (("1" (SKEEP)
                            (("1" (EXPAND "NQ" 1)
                              (("1" (EXPAND "nth" 1)
                                (("1" (EXPAND "liftl" 1)
                                  (("1" (TYPEPRED "p")
                                    (("1" (EXPAND "lift_rd" -3)
                                      (("1" (ASSERT)
                                        (("1" (TYPEPRED "x")
                                          (("1" (EXPAND "NQ" -3)
                                            (("1" (EXPAND "lift_rd" -3)
                                              (("1" (ASSERT)
                                                (("1" (FLATTEN)
                                                  (("1" (ASSERT)
                                                    (("1"
                                                      (LEMMA "env_2_vec_nth")
                                                      (("1"
                                                        (INST-CP -1
                                                         "max_var(ode)"
                                                         "env_sol(D, envi, ode)(car(p + x))"
                                                         "i")
                                                        (("1" (REPLACE -2)
                                                          (("1"
                                                            (INST -1
                                                             "max_var(ode)"
                                                             "env_sol(D, envi, ode)(car(p))"
                                                             "i")
                                                            (("1" (REPLACE -1)
                                                              (("1"
                                                                (CASE
                                                                    "(env_sol(D, envi, ode)(car(p + x))(i) - (: 0 :) * x -
                                env_sol(D, envi, ode)(car(p))(i)) = 0")
                                                                (("1"
                                                                  (REPLACE -1)
                                                                  (("1"
                                                                    (ASSERT)
                                                                    (("1"
                                                                      (GRIND)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL)
                                                                 ("2" (HIDE 3)
                                                                  (("2"
                                                                    (EXPAND "*"
                                                                            1
                                                                            1)
                                                                    (("2"
                                                                      (EXPAND
                                                                       "dot" 1
                                                                       1)
                                                                      (("2"
                                                                        (EXPAND
                                                                         "dot"
                                                                         1 1)
                                                                        (("2"
                                                                          (EXPAND
                                                                           "env_sol"
                                                                           1 1)
                                                                          (("2"
                                                                            (EXPAND
                                                                             "env_sol"
                                                                             1)
                                                                            (("2"
                                                                              (TYPEPRED
                                                                               "env_at_t(ode, fs_sol(D, envi, ode), envi)(car(p + x))")
                                                                              (("2"
                                                                                (TYPEPRED
                                                                                 " env_at_t(ode, fs_sol(D, envi, ode), envi)(car(p))")
                                                                                (("2"
                                                                                  (EXPAND
                                                                                   "env_at_t?"
                                                                                   -1)
                                                                                  (("2"
                                                                                    (EXPAND
                                                                                     "env_at_t?"
                                                                                     -3)
                                                                                    (("2"
                                                                                      (FLATTEN)
                                                                                      (("2"
                                                                                        (INST
                                                                                         -4
                                                                                         "i")
                                                                                        (("2"
                                                                                          (INST
                                                                                           -1
                                                                                           "i")
                                                                                          (("2"
                                                                                            (REPLACE
                                                                                             -)
                                                                                            (("2"
                                                                                              (ASSERT)
                                                                                              NIL
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (EXPAND "nth" 2 1)
                  (("2" (EXPAND "liftl" 2 1)
                    (("2" (LEMMA "env_2_vec_nth")
                      (("2" (INST -1 "max_var(ode)" _ "i")
                        (("2" (EXPAND "env_sol" 2 1)
                          (("2"
                            (TYPEPRED "env_at_t
                                                     (ode,
                                                      fs_sol(D, envi, ode),
                                                      envi)
                                                     (car(p))")
                            (("2" (EXPAND "env_at_t?" -1)
                              (("2" (FLATTEN)
                                (("2" (EXPAND "not_in_map" 1 1)
                                  (("2" (SKEEP)
                                    (("2" (INST -2 "i_1")
                                      (("2" (TYPEPRED "fs_sol(D, envi, ode)")
                                        (("2" (EXPAND "solution_odes_u?" -1)
                                          (("2" (FLATTEN)
                                            (("2" (HIDE -2)
                                              (("2"
                                                (EXPAND "solution_odes?" -1)
                                                (("2" (FLATTEN)
                                                  (("2" (HIDE -3)
                                                    (("2"
                                                      (EXPAND "derivable_odes?"
                                                              -1)
                                                      (("2" (INST -1 "i_1")
                                                        (("2"
                                                          (EXPAND "derivable?"
                                                                  -1)
                                                          (("2"
                                                            (INST -1 "car(p)")
                                                            (("1"
                                                              (EXPAND
                                                               "restrict" -1)
                                                              (("1"
                                                                (EXPAND
                                                                 "derivable?"
                                                                 -1)
                                                                (("1" (HIDE -2)
                                                                  (("1"
                                                                    (HIDE -4)
                                                                    (("1"
                                                                      (EXPAND
                                                                       "differentiable?")
                                                                      (("1"
                                                                        (EXPAND
                                                                         "convergent?"
                                                                         -1)
                                                                        (("1"
                                                                          (SKEEP)
                                                                          (("1"
                                                                            (INST
                                                                             1
                                                                             "(: l :)")
                                                                            (("1"
                                                                              (EXPAND
                                                                               "convergence_zero?"
                                                                               1)
                                                                              (("1"
                                                                                (EXPAND
                                                                                 "convergence")
                                                                                (("1"
                                                                                  (EXPAND
                                                                                   "convergence")
                                                                                  (("1"
                                                                                    (FLATTEN)
                                                                                    (("1"
                                                                                      (SKEEP)
                                                                                      (("1"
                                                                                        (INST
                                                                                         -2
                                                                                         "epsilon")
                                                                                        (("1"
                                                                                          (SKEEP)
                                                                                          (("1"
                                                                                            (INST
                                                                                             1
                                                                                             "delta")
                                                                                            (("1"
                                                                                              (SKEEP)
                                                                                              (("1"
                                                                                                (INST
                                                                                                 -2
                                                                                                 "car(x)")
                                                                                                (("1"
                                                                                                  (SPLIT
                                                                                                   -2)
                                                                                                  (("1"
                                                                                                    (EXPAND
                                                                                                     "NQ")
                                                                                                    (("1"
                                                                                                      (ASSERT)
                                                                                                      (("1"
                                                                                                        (TYPEPRED
                                                                                                         "x")
                                                                                                        (("1"
                                                                                                          (EXPAND
                                                                                                           "NQ"
                                                                                                           -3)
                                                                                                          (("1"
                                                                                                            (ASSERT)
                                                                                                            (("1"
                                                                                                              (FLATTEN)
                                                                                                              (("1"
                                                                                                                (EXPAND
                                                                                                                 "lift_rd"
                                                                                                                 -3)
                                                                                                                (("1"
                                                                                                                  (ASSERT)
                                                                                                                  (("1"
                                                                                                                    (TYPEPRED
                                                                                                                     "p")
                                                                                                                    (("1"
                                                                                                                      (EXPAND
                                                                                                                       "lift_rd"
                                                                                                                       -3)
                                                                                                                      (("1"
                                                                                                                        (ASSERT)
                                                                                                                        (("1"
                                                                                                                          (HIDE
                                                                                                                           -1
                                                                                                                           -4)
                                                                                                                          (("1"
                                                                                                                            (INST-CP
                                                                                                                             -9
                                                                                                                             "env_at_t(ode, fs_sol(D, envi, ode), envi)
                                                       (car(p + x))")
                                                                                                                            (("1"
                                                                                                                              (INST
                                                                                                                               -9
                                                                                                                               "                          env_at_t(ode, fs_sol(D, envi, ode), envi)
                                                        (car(p))")
                                                                                                                              (("1"
                                                                                                                                (REPLACE
                                                                                                                                 -9)
                                                                                                                                (("1"
                                                                                                                                  (REPLACE
                                                                                                                                   -10)
                                                                                                                                  (("1"
                                                                                                                                    (REPLACE
                                                                                                                                     -8)
                                                                                                                                    (("1"
                                                                                                                                      (HIDE
                                                                                                                                       -7)
                                                                                                                                      (("1"
                                                                                                                                        (REPLACE
                                                                                                                                         -10
                                                                                                                                         -7)
                                                                                                                                        (("1"
                                                                                                                                          (REPLACE
                                                                                                                                           -7
                                                                                                                                           2
                                                                                                                                           RL)
                                                                                                                                          (("1"
                                                                                                                                            (TYPEPRED
                                                                                                                                             "env_at_t(ode, fs_sol(D, envi, ode), envi)(car(p + x))")
                                                                                                                                            (("1"
                                                                                                                                              (EXPAND
                                                                                                                                               "env_at_t?"
                                                                                                                                               -1)
                                                                                                                                              (("1"
                                                                                                                                                (FLATTEN)
                                                                                                                                                (("1"
                                                                                                                                                  (INST
                                                                                                                                                   -2
                                                                                                                                                   "i_1")
                                                                                                                                                  (("1"
                                                                                                                                                    (REPLACE
                                                                                                                                                     -13
                                                                                                                                                     -2)
                                                                                                                                                    (("1"
                                                                                                                                                      (REPLACE
                                                                                                                                                       -2
                                                                                                                                                       2
                                                                                                                                                       RL)
                                                                                                                                                      (("1"
                                                                                                                                                        (REPLACE
                                                                                                                                                         -13
                                                                                                                                                         -8)
                                                                                                                                                        (("1"
                                                                                                                                                          (REPLACE
                                                                                                                                                           -10
                                                                                                                                                           -8
                                                                                                                                                           RL)
                                                                                                                                                          (("1"
                                                                                                                                                            (ASSERT)
                                                                                                                                                            (("1"
                                                                                                                                                              (EXPAND
                                                                                                                                                               "+"
                                                                                                                                                               2
                                                                                                                                                               1)
                                                                                                                                                              (("1"
                                                                                                                                                                (EXPAND
                                                                                                                                                                 "add"
                                                                                                                                                                 2
                                                                                                                                                                 1)
                                                                                                                                                                (("1"
                                                                                                                                                                  (ASSERT)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (EXPAND
                                                                                                                                                                     "*"
                                                                                                                                                                     2)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (EXPAND
                                                                                                                                                                       "dot"
                                                                                                                                                                       2
                                                                                                                                                                       1)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (ASSERT)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (EXPAND
                                                                                                                                                                           "dot"
                                                                                                                                                                           2
                                                                                                                                                                           1)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (HIDE
                                                                                                                                                                             -1
                                                                                                                                                                             -2
                                                                                                                                                                             -3
                                                                                                                                                                             -4
                                                                                                                                                                             -5
                                                                                                                                                                             -6
                                                                                                                                                                             -7)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (HIDE
                                                                                                                                                                               -2
                                                                                                                                                                               -3
                                                                                                                                                                               -4
                                                                                                                                                                               -5
                                                                                                                                                                               -6
                                                                                                                                                                               -7)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (LEMMA
                                                                                                                                                                                 "abs_div")
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (INST
                                                                                                                                                                                   -1
                                                                                                                                                                                   "norm_inf(1)(x)"
                                                                                                                                                                                   "(fs_sol(D, envi, ode)(i_1)(car(p) + car(x)) -
                                  fs_sol(D, envi, ode)(i_1)(car(p))
                                  - l * car(x))")
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (EXPAND
                                                                                                                                                                                     "norm_inf"
                                                                                                                                                                                     2
                                                                                                                                                                                     1)
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (EXPAND
                                                                                                                                                                                       "norm_inf"
                                                                                                                                                                                       2)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (EXPAND
                                                                                                                                                                                         "abs"
                                                                                                                                                                                         2
                                                                                                                                                                                         2)
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (EXPAND
                                                                                                                                                                                           "max"
                                                                                                                                                                                           2)
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (EXPAND
                                                                                                                                                                                             "length"
                                                                                                                                                                                             2)
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (ASSERT)
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (HIDE
                                                                                                                                                                                                 -1)
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (LEMMA
                                                                                                                                                                                                   "abs_div")
                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                    (CASE
                                                                                                                                                                                                        "NOT (fs_sol(D, envi, ode)(i_1)(car(p) + car(x)) -
                                            fs_sol(D, envi, ode)(i_1)(car(p)))
                                           / car(x)
                                           - l = ((fs_sol(D, envi, ode)(i_1)(car(p) + car(x)) -
                                            fs_sol(D, envi, ode)(i_1)(car(p)))
                                           - l*car(x))/car(x)")
                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                      (ASSERT)
                                                                                                                                                                                                      NIL
                                                                                                                                                                                                      NIL)
                                                                                                                                                                                                     ("2"
                                                                                                                                                                                                      (REPLACE
                                                                                                                                                                                                       -1)
                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                        (INST
                                                                                                                                                                                                         -2
                                                                                                                                                                                                         "car(x)"
                                                                                                                                                                                                         "(fs_sol(D, envi, ode)(i_1)(car(p) + car(x)) -
                                       fs_sol(D, envi, ode)(i_1)(car(p)))
                                      - l * car(x)")
                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                          (REPLACE
                                                                                                                                                                                                           -2
                                                                                                                                                                                                           -3)
                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                            (ASSERT)
                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                              (HIDE
                                                                                                                                                                                                               -1)
                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                (LEMMA
                                                                                                                                                                                                                 "abs_div")
                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                  (INST
                                                                                                                                                                                                                   -1
                                                                                                                                                                                                                   "abs(car(x))"
                                                                                                                                                                                                                   "(fs_sol(D, envi, ode)(i_1)(car(p) + car(x)) -
                                      fs_sol(D, envi, ode)(i_1)(car(p))
                                      - l * car(x))")
                                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                                    (REPLACE
                                                                                                                                                                                                                     -1
                                                                                                                                                                                                                     2)
                                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                                      (EXPAND
                                                                                                                                                                                                                       "abs"
                                                                                                                                                                                                                       2
                                                                                                                                                                                                                       2)
                                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                                        (PROPAX)
                                                                                                                                                                                                                        NIL
                                                                                                                                                                                                                        NIL))
                                                                                                                                                                                                                      NIL))
                                                                                                                                                                                                                    NIL))
                                                                                                                                                                                                                  NIL))
                                                                                                                                                                                                                NIL))
                                                                                                                                                                                                              NIL))
                                                                                                                                                                                                            NIL))
                                                                                                                                                                                                          NIL))
                                                                                                                                                                                                        NIL))
                                                                                                                                                                                                      NIL))
                                                                                                                                                                                                    NIL))
                                                                                                                                                                                                  NIL))
                                                                                                                                                                                                NIL))
                                                                                                                                                                                              NIL))
                                                                                                                                                                                            NIL))
                                                                                                                                                                                          NIL))
                                                                                                                                                                                        NIL))
                                                                                                                                                                                      NIL))
                                                                                                                                                                                    NIL))
                                                                                                                                                                                  NIL))
                                                                                                                                                                                NIL))
                                                                                                                                                                              NIL))
                                                                                                                                                                            NIL))
                                                                                                                                                                          NIL))
                                                                                                                                                                        NIL))
                                                                                                                                                                      NIL))
                                                                                                                                                                    NIL))
                                                                                                                                                                  NIL))
                                                                                                                                                                NIL))
                                                                                                                                                              NIL))
                                                                                                                                                            NIL))
                                                                                                                                                          NIL))
                                                                                                                                                        NIL))
                                                                                                                                                      NIL))
                                                                                                                                                    NIL))
                                                                                                                                                  NIL))
                                                                                                                                                NIL))
                                                                                                                                              NIL))
                                                                                                                                            NIL))
                                                                                                                                          NIL))
                                                                                                                                        NIL))
                                                                                                                                      NIL))
                                                                                                                                    NIL))
                                                                                                                                  NIL))
                                                                                                                                NIL))
                                                                                                                              NIL))
                                                                                                                            NIL))
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL)
                                                                                                   ("2"
                                                                                                    (HIDE
                                                                                                     2)
                                                                                                    (("2"
                                                                                                      (EXPAND
                                                                                                       "fullset")
                                                                                                      (("2"
                                                                                                        (PROPAX)
                                                                                                        NIL
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL)
                                                                                                   ("3"
                                                                                                    (HIDE
                                                                                                     2)
                                                                                                    (("3"
                                                                                                      (EXPAND
                                                                                                       "-"
                                                                                                       -6)
                                                                                                      (("3"
                                                                                                        (EXPAND
                                                                                                         "sub"
                                                                                                         -6)
                                                                                                        (("3"
                                                                                                          (EXPAND
                                                                                                           "zero_vec"
                                                                                                           -6)
                                                                                                          (("3"
                                                                                                            (EXPAND
                                                                                                             "zero_vec"
                                                                                                             -6)
                                                                                                            (("3"
                                                                                                              (EXPAND
                                                                                                               "scal"
                                                                                                               -6)
                                                                                                              (("3"
                                                                                                                (EXPAND
                                                                                                                 "scal"
                                                                                                                 -6)
                                                                                                                (("3"
                                                                                                                  (EXPAND
                                                                                                                   "add"
                                                                                                                   -6)
                                                                                                                  (("3"
                                                                                                                    (EXPAND
                                                                                                                     "add"
                                                                                                                     -6)
                                                                                                                    (("3"
                                                                                                                      (ASSERT)
                                                                                                                      (("3"
                                                                                                                        (TYPEPRED
                                                                                                                         "x")
                                                                                                                        (("3"
                                                                                                                          (EXPAND
                                                                                                                           "length"
                                                                                                                           -2)
                                                                                                                          (("3"
                                                                                                                            (EXPAND
                                                                                                                             "length"
                                                                                                                             -2)
                                                                                                                            (("3"
                                                                                                                              (LIFT-IF
                                                                                                                               -2)
                                                                                                                              (("3"
                                                                                                                                (FLATTEN)
                                                                                                                                (("3"
                                                                                                                                  (SPLIT
                                                                                                                                   -2)
                                                                                                                                  (("1"
                                                                                                                                    (ASSERT)
                                                                                                                                    (("1"
                                                                                                                                      (EXPAND
                                                                                                                                       "norm_inf")
                                                                                                                                      (("1"
                                                                                                                                        (EXPAND
                                                                                                                                         "norm_inf")
                                                                                                                                        (("1"
                                                                                                                                          (EXPAND
                                                                                                                                           "abs")
                                                                                                                                          (("1"
                                                                                                                                            (EXPAND
                                                                                                                                             "length")
                                                                                                                                            (("1"
                                                                                                                                              (EXPAND
                                                                                                                                               "max")
                                                                                                                                              (("1"
                                                                                                                                                (EXPAND
                                                                                                                                                 "length")
                                                                                                                                                (("1"
                                                                                                                                                  (ASSERT)
                                                                                                                                                  NIL
                                                                                                                                                  NIL))
                                                                                                                                                NIL))
                                                                                                                                              NIL))
                                                                                                                                            NIL))
                                                                                                                                          NIL))
                                                                                                                                        NIL))
                                                                                                                                      NIL))
                                                                                                                                    NIL)
                                                                                                                                   ("2"
                                                                                                                                    (FLATTEN)
                                                                                                                                    (("2"
                                                                                                                                      (ASSERT)
                                                                                                                                      NIL
                                                                                                                                      NIL))
                                                                                                                                    NIL))
                                                                                                                                  NIL))
                                                                                                                                NIL))
                                                                                                                              NIL))
                                                                                                                            NIL))
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL)
                                                                                                 ("2"
                                                                                                  (HIDE
                                                                                                   2)
                                                                                                  (("2"
                                                                                                    (SPLIT
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (TYPEPRED
                                                                                                       "x")
                                                                                                      (("1"
                                                                                                        (EXPAND
                                                                                                         "zero_vec"
                                                                                                         -4)
                                                                                                        (("1"
                                                                                                          (EXPAND
                                                                                                           "zero_vec"
                                                                                                           1
                                                                                                           1)
                                                                                                          (("1"
                                                                                                            (DECOMPOSE-EQUALITY
                                                                                                             1)
                                                                                                            (("1"
                                                                                                              (GRIND)
                                                                                                              NIL
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL)
                                                                                                     ("2"
                                                                                                      (EXPAND
                                                                                                       "A"
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (TYPEPRED
                                                                                                         "p")
                                                                                                        (("2"
                                                                                                          (TYPEPRED
                                                                                                           "x")
                                                                                                          (("2"
                                                                                                            (EXPAND
                                                                                                             "NQ"
                                                                                                             -3)
                                                                                                            (("2"
                                                                                                              (EXPAND
                                                                                                               "lift_rd"
                                                                                                               -3)
                                                                                                              (("2"
                                                                                                                (FLATTEN)
                                                                                                                (("2"
                                                                                                                  (TYPEPRED
                                                                                                                   "x")
                                                                                                                  (("2"
                                                                                                                    (ASSERT)
                                                                                                                    (("2"
                                                                                                                      (EXPAND
                                                                                                                       "+"
                                                                                                                       -7)
                                                                                                                      (("2"
                                                                                                                        (ASSERT)
                                                                                                                        (("2"
                                                                                                                          (EXPAND
                                                                                                                           "add"
                                                                                                                           -7)
                                                                                                                          (("2"
                                                                                                                            (PROPAX)
                                                                                                                            NIL
                                                                                                                            NIL))
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL)
                                                             ("2" (HIDE 2)
                                                              (("2"
                                                                (TYPEPRED "p")
                                                                (("2"
                                                                  (EXPAND
                                                                   "lift_rd"
                                                                   -3)
                                                                  (("2"
                                                                    (PROPAX)
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|null_MapExprInj| NAME-JUDGEMENT "MapExprInj" |hp_def| NIL)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|MapExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|mapexpr_inj| CONST-DECL "bool" |hp_def| NIL)
    (|ODEs| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|max_var| CONST-DECL "nat" |hp_def| NIL)
    (|dd?| CONST-DECL "bool" |hp_expr| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|domain| TYPE-EQ-DECL NIL |domain_vec2real_def| |mv_analysis|)
    (|real_dom| TYPE-EQ-DECL NIL |lift_real_fun_def| |mv_analysis|)
    (|lift_rd| CONST-DECL "domain[1]" |lift_real_fun_def| |mv_analysis|)
    (|vec2vec| TYPE-EQ-DECL NIL |domain_vec2real_def| |mv_analysis|)
    (|liftl| CONST-DECL "vec2vec[1](k)" |lift_real_fun_def| |mv_analysis|)
    (|env_sol| CONST-DECL "Environment" |ODEs_equiv| NIL)
    (|MapExprInj| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|not_in_map| CONST-DECL "bool" |hp_def| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|nth| CONST-DECL "vec2real_f" |convergence_vec2vec| |mv_analysis|)
    (+ CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices| |matrices|)
    (|Vector| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (* CONST-DECL "real" |matrices| |matrices|)
    (|max| DEF-DECL "real" |norms| |mv_analysis|)
    (|abs| DEF-DECL "{l: list | length(l) = length(ll)}" |norms| |mv_analysis|)
    (|norm_inf| CONST-DECL "[(cons?) -> nonneg_real]" |norms| |mv_analysis|)
    (- CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices| |matrices|)
    (|sub| CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices|
     |matrices|)
    (|scal| DEF-DECL "VectorN(length(v2))" |matrices| |matrices|)
    (|norm_inf| CONST-DECL "(norm?(m))" |norms| |mv_analysis|)
    (|dot| DEF-DECL "real" |matrices| |matrices|)
    (|env_at_t| CONST-DECL "{env: (env_at_t?(odes, fs, envi, t)) |
   FORALL (env2: (env_at_t?(odes, fs, envi, t))): env = env2}"
     |hp_expr| NIL)
    (|add| DEF-DECL "VectorN(max(length(v1), length(v2)))" |matrices|
     |matrices|)
    (|fs_sol| CONST-DECL "(solution_odes_u?(D, odes, envi))" |ODEs_equiv| NIL)
    (|solution_odes_u?| CONST-DECL "bool" |hp_expr| NIL)
    (|env_at_t?| CONST-DECL "bool" |hp_expr| NIL)
    (|zero_vec| DEF-DECL "VectorN(m)" |vector_arithmetic| |mv_analysis|)
    (NQ CONST-DECL "bool" |differentiable_def| |mv_analysis|)
    (NQ CONST-DECL "real" |differentiable_def| |mv_analysis|)
    (|convergence_zero?| CONST-DECL "bool" |vector_sequences| |mv_analysis|)
    (|differentiable?| CONST-DECL "bool" |differentiable_def| |mv_analysis|)
    (|solution_odes?| CONST-DECL "bool" |hp_expr| NIL)
    (|derivable?| CONST-DECL "bool" |derivatives_def| |analysis|)
    (|convergent?| CONST-DECL "bool" |lim_of_functions| |analysis|)
    (|convergence| CONST-DECL "bool" |lim_of_functions| |analysis|)
    (A CONST-DECL "setof[nzreal]" |derivatives_def| |analysis|)
    (|fullset| CONST-DECL "set" |sets| NIL)
    (NQ CONST-DECL "real" |derivatives_def| |analysis|)
    (|norm?| CONST-DECL "bool" |norms| |mv_analysis|)
    (|real_is_complete| NAME-JUDGEMENT "metric_complete" |real_topology|
     |metric_space|)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|list_cons_extensionality| FORMULA-DECL NIL |list_adt| NIL)
    (|convergence| CONST-DECL "bool" |convergence_functions| |analysis|)
    (|derivable?| CONST-DECL "bool" |derivatives| |analysis|)
    (|derivable_odes?| CONST-DECL "bool" |hp_expr| NIL)
    (|derivable_nth_mat_point| FORMULA-DECL NIL |convergence_vec2vec|
     |mv_analysis|))
   NIL)
  (|e2v_diff_p-1| |nil| 3798447110
   ("" (SKEEP)
    (("" (LEMMA "derivable_nth_mat_point[1]")
      ((""
        (INST -1 "max_var(ode) + 1" "lift_rd(D)"
         "           liftl(max_var(ode) + 1, D,
                     LAMBDA (tt: (D)):
                       env_2_vec(max_var(ode), env_sol(D, envi, ode)(tt)))"
         "p")
        (("" (ASSERT)
          (("" (HIDE 2)
            (("" (SKEEP)
              (("" (CASE "not_in_map(ode)(i)")
                (("1" (EXPAND "differentiable?")
                  (("1" (INST 1 "(: 0 :)")
                    (("1" (EXPAND "convergence_zero?")
                      (("1" (SKEEP)
                        (("1" (INST 1 "1")
                          (("1" (SKEEP)
                            (("1" (EXPAND "NQ" 1)
                              (("1" (EXPAND "nth" 1)
                                (("1" (EXPAND "liftl" 1)
                                  (("1" (TYPEPRED "p")
                                    (("1" (EXPAND "lift_rd" -3)
                                      (("1" (ASSERT)
                                        (("1" (TYPEPRED "x")
                                          (("1" (EXPAND "NQ" -3)
                                            (("1" (EXPAND "lift_rd" -3)
                                              (("1" (ASSERT)
                                                (("1" (FLATTEN)
                                                  (("1" (ASSERT)
                                                    (("1"
                                                      (LEMMA "env_2_vec_nth")
                                                      (("1"
                                                        (INST-CP -1
                                                         "max_var(ode)"
                                                         "env_sol(D, envi, ode)(car(p + x))"
                                                         "i")
                                                        (("1" (REPLACE -2)
                                                          (("1"
                                                            (INST -1
                                                             "max_var(ode)"
                                                             "env_sol(D, envi, ode)(car(p))"
                                                             "i")
                                                            (("1" (REPLACE -1)
                                                              (("1"
                                                                (CASE
                                                                    "(env_sol(D, envi, ode)(car(p + x))(i) - (: 0 :) * x -
                                env_sol(D, envi, ode)(car(p))(i)) = 0")
                                                                (("1"
                                                                  (REPLACE -1)
                                                                  (("1"
                                                                    (ASSERT)
                                                                    (("1"
                                                                      (GRIND)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL)
                                                                 ("2" (HIDE 3)
                                                                  (("2"
                                                                    (EXPAND "*"
                                                                            1
                                                                            1)
                                                                    (("2"
                                                                      (EXPAND
                                                                       "dot" 1
                                                                       1)
                                                                      (("2"
                                                                        (EXPAND
                                                                         "dot"
                                                                         1 1)
                                                                        (("2"
                                                                          (EXPAND
                                                                           "env_sol"
                                                                           1 1)
                                                                          (("2"
                                                                            (EXPAND
                                                                             "env_sol"
                                                                             1)
                                                                            (("2"
                                                                              (TYPEPRED
                                                                               "env_at_t(ode, fs_sol(D, envi, ode), envi)(car(p + x))")
                                                                              (("2"
                                                                                (TYPEPRED
                                                                                 " env_at_t(ode, fs_sol(D, envi, ode), envi)(car(p))")
                                                                                (("2"
                                                                                  (EXPAND
                                                                                   "env_at_t?"
                                                                                   -1)
                                                                                  (("2"
                                                                                    (EXPAND
                                                                                     "env_at_t?"
                                                                                     -3)
                                                                                    (("2"
                                                                                      (FLATTEN)
                                                                                      (("2"
                                                                                        (INST
                                                                                         -4
                                                                                         "i")
                                                                                        (("2"
                                                                                          (INST
                                                                                           -1
                                                                                           "i")
                                                                                          (("2"
                                                                                            (REPLACE
                                                                                             -)
                                                                                            (("2"
                                                                                              (ASSERT)
                                                                                              NIL
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (EXPAND "nth" 2 1)
                  (("2" (EXPAND "liftl" 2 1)
                    (("2" (LEMMA "env_2_vec_nth")
                      (("2" (INST -1 "max_var(ode)" _ "i")
                        (("2" (EXPAND "env_sol" 2 1)
                          (("2"
                            (TYPEPRED "env_at_t
                                                     (ode,
                                                      fs_sol(D, envi, ode),
                                                      envi)
                                                     (car(p))")
                            (("2" (EXPAND "env_at_t?" -1)
                              (("2" (FLATTEN)
                                (("2" (EXPAND "not_in_map" 1 1)
                                  (("2" (SKEEP)
                                    (("2" (INST -2 "i_1")
                                      (("2" (TYPEPRED "fs_sol(D, envi, ode)")
                                        (("2" (EXPAND "solution_odes_u?" -1)
                                          (("2" (FLATTEN)
                                            (("2" (HIDE -2)
                                              (("2"
                                                (EXPAND "solution_odes?" -1)
                                                (("2" (FLATTEN)
                                                  (("2" (HIDE -3)
                                                    (("2"
                                                      (EXPAND "derivable_odes?"
                                                              -1)
                                                      (("2" (INST -1 "i_1")
                                                        (("2"
                                                          (EXPAND "derivable?"
                                                                  -1)
                                                          (("2"
                                                            (INST -1 "car(p)")
                                                            (("1"
                                                              (EXPAND
                                                               "restrict" -1)
                                                              (("1" (POSTPONE)
                                                                NIL NIL))
                                                              NIL)
                                                             ("2" (POSTPONE)
                                                              NIL NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|derivable_nth_mat_point| FORMULA-DECL NIL |convergence_vec2vec|
     |mv_analysis|)
    (|derivable_odes?| CONST-DECL "bool" |hp_expr| NIL)
    (|derivable?| CONST-DECL "bool" |derivatives| |analysis|)
    (|convergence| CONST-DECL "bool" |convergence_functions| |analysis|)
    (|list_cons_extensionality| FORMULA-DECL NIL |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|real_is_complete| NAME-JUDGEMENT "metric_complete" |real_topology|
     |metric_space|)
    (|norm?| CONST-DECL "bool" |norms| |mv_analysis|)
    (NQ CONST-DECL "real" |derivatives_def| |analysis|)
    (|fullset| CONST-DECL "set" |sets| NIL)
    (A CONST-DECL "setof[nzreal]" |derivatives_def| |analysis|)
    (|convergence| CONST-DECL "bool" |lim_of_functions| |analysis|)
    (|convergent?| CONST-DECL "bool" |lim_of_functions| |analysis|)
    (|derivable?| CONST-DECL "bool" |derivatives_def| |analysis|)
    (|solution_odes?| CONST-DECL "bool" |hp_expr| NIL)
    (|differentiable?| CONST-DECL "bool" |differentiable_def| |mv_analysis|)
    (|convergence_zero?| CONST-DECL "bool" |vector_sequences| |mv_analysis|)
    (NQ CONST-DECL "real" |differentiable_def| |mv_analysis|)
    (NQ CONST-DECL "bool" |differentiable_def| |mv_analysis|)
    (|zero_vec| DEF-DECL "VectorN(m)" |vector_arithmetic| |mv_analysis|)
    (|env_at_t?| CONST-DECL "bool" |hp_expr| NIL)
    (|solution_odes_u?| CONST-DECL "bool" |hp_expr| NIL)
    (|fs_sol| CONST-DECL "(solution_odes_u?(D, odes, envi))" |ODEs_equiv| NIL)
    (|add| DEF-DECL "VectorN(max(length(v1), length(v2)))" |matrices|
     |matrices|)
    (|env_at_t| CONST-DECL "{env: (env_at_t?(odes, fs, envi, t)) |
   FORALL (env2: (env_at_t?(odes, fs, envi, t))): env = env2}"
     |hp_expr| NIL)
    (|dot| DEF-DECL "real" |matrices| |matrices|)
    (|norm_inf| CONST-DECL "(norm?(m))" |norms| |mv_analysis|)
    (|scal| DEF-DECL "VectorN(length(v2))" |matrices| |matrices|)
    (|sub| CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices|
     |matrices|)
    (- CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices| |matrices|)
    (|norm_inf| CONST-DECL "[(cons?) -> nonneg_real]" |norms| |mv_analysis|)
    (|abs| DEF-DECL "{l: list | length(l) = length(ll)}" |norms| |mv_analysis|)
    (|max| DEF-DECL "real" |norms| |mv_analysis|)
    (* CONST-DECL "real" |matrices| |matrices|)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|Vector| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (+ CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices| |matrices|)
    (|nth| CONST-DECL "vec2real_f" |convergence_vec2vec| |mv_analysis|)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|not_in_map| CONST-DECL "bool" |hp_def| NIL)
    (|MapExprInj| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|env_sol| CONST-DECL "Environment" |ODEs_equiv| NIL)
    (|liftl| CONST-DECL "vec2vec[1](k)" |lift_real_fun_def| |mv_analysis|)
    (|vec2vec| TYPE-EQ-DECL NIL |domain_vec2real_def| |mv_analysis|)
    (|lift_rd| CONST-DECL "domain[1]" |lift_real_fun_def| |mv_analysis|)
    (|real_dom| TYPE-EQ-DECL NIL |lift_real_fun_def| |mv_analysis|)
    (|domain| TYPE-EQ-DECL NIL |domain_vec2real_def| |mv_analysis|)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|dd?| CONST-DECL "bool" |hp_expr| NIL)
    (|max_var| CONST-DECL "nat" |hp_def| NIL)
    (|ODEs| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|mapexpr_inj| CONST-DECL "bool" |hp_def| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|MapExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|null_MapExprInj| NAME-JUDGEMENT "MapExprInj" |hp_def| NIL))
   SHOSTAK))
 (|e2v_der_p_TCC1| 0
  (|e2v_der_p_TCC1-1| |nil| 3853843328
   ("" (SKEEP)
    (("" (LEMMA "e2v_diff_p") (("" (INST?) (("" (ASSERT) NIL NIL)) NIL)) NIL))
    NIL)
   ((|e2v_diff_p| FORMULA-DECL NIL |chain_rule_re| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|ODEs_s?| CONST-DECL "bool" |ODEs_equiv| NIL)
    (|ODEs| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|mapexpr_inj| CONST-DECL "bool" |hp_def| NIL)
    (|MapExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|dLVar| TYPE-DECL NIL |hp_def| NIL)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|lift_rd| CONST-DECL "domain[1]" |lift_real_fun_def| |mv_analysis|)
    (|domain| TYPE-EQ-DECL NIL |domain_vec2real_def| |mv_analysis|)
    (|real_dom| TYPE-EQ-DECL NIL |lift_real_fun_def| |mv_analysis|)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|dd?| CONST-DECL "bool" |hp_expr| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|null_MapExprInj| NAME-JUDGEMENT "MapExprInj" |hp_def| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic|
     |mv_analysis|))
   NIL
   (|e2v_der_p| SUBTYPE
    "lift_real_fun_def.liftl((number_fields.+)(hp_def.max_var(chain_rule_re.ode), 1), chain_rule_re.D, (LAMBDA (tt: (chain_rule_re.D)): chain_rule_re.env_2_vec(hp_def.max_var(chain_rule_re.ode), ODEs_equiv.env_sol(chain_rule_re.D, chain_rule_re.envi, chain_rule_re.ode)(tt))))"
    "{ff: domain_vec2real_def[1].vec2vec((number_fields.+)(1, hp_def.max_var(chain_rule_re.ode))) | convergence_vec2vec[1].differentiable?((number_fields.+)(1, hp_def.max_var(chain_rule_re.ode)), lift_real_fun_def.lift_rd(chain_rule_re.D), ff, chain_rule_re.p)}")))
 (|e2v_der_p_TCC2| 0
  (|e2v_der_p_TCC2-1| |nil| 3853843328 ("" (SUBTYPE-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|dd?| CONST-DECL "bool" |hp_expr| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|real_dom| TYPE-EQ-DECL NIL |lift_real_fun_def| |mv_analysis|)
    (|domain| TYPE-EQ-DECL NIL |domain_vec2real_def| |mv_analysis|)
    (|lift_rd| CONST-DECL "domain[1]" |lift_real_fun_def| |mv_analysis|)
    (|dLVar| TYPE-DECL NIL |hp_def| NIL)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|MapExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|mapexpr_inj| CONST-DECL "bool" |hp_def| NIL)
    (|ODEs| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|ODEs_s?| CONST-DECL "bool" |ODEs_equiv| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|null_MapExprInj| NAME-JUDGEMENT "MapExprInj" |hp_def| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic|
     |mv_analysis|)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|env_at_t?| CONST-DECL "bool" |hp_expr| NIL)
    (|deriv| CONST-DECL "real" |derivatives_def| |analysis|)
    (|deriv| CONST-DECL "[T -> real]" |derivatives| |analysis|)
    (|sol_at_t?| CONST-DECL "bool" |hp_expr| NIL)
    (|solution_odes?| CONST-DECL "bool" |hp_expr| NIL)
    (|fullset| CONST-DECL "set" |sets| NIL)
    (|adh| CONST-DECL "setof[real]" |convergence_functions| |analysis|)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (NQ CONST-DECL "real" |derivatives_def| |analysis|)
    (|convergence| CONST-DECL "bool" |convergence_functions| |analysis|)
    (|convergence| CONST-DECL "bool" |lim_of_functions| |analysis|)
    (|convergent?| CONST-DECL "bool" |lim_of_functions| |analysis|)
    (|derivable?| CONST-DECL "bool" |derivatives_def| |analysis|)
    (|derivable?| CONST-DECL "bool" |derivatives| |analysis|)
    (|derivable_odes?| CONST-DECL "bool" |hp_expr| NIL)
    (|solution_odes_u?| CONST-DECL "bool" |hp_expr| NIL)
    (|max_var| CONST-DECL "nat" |hp_def| NIL)
    (|env_sol| CONST-DECL "Environment" |ODEs_equiv| NIL)
    (|der_f| CONST-DECL "{T: MatrixMN(m, n) |
   convergence_zero?(NQ(D, p), NQ(m, f, p, T), zero_vec(n))}"
     |convergence_vec2vec| |mv_analysis|))
   NIL
   (|e2v_der_p| SUBTYPE "chain_rule_re.i"
    "below[length[list[real]](der_f[1](1 + max_var(ode), lift_rd(D), p)(liftl(1 + max_var(ode), D, (LAMBDA (tt: (D)): env_2_vec(max_var(ode), env_sol(D, envi, ode)(tt))))))]")))
 (|e2v_der_p_TCC3| 0
  (|e2v_der_p_TCC3-1| |nil| 3853843328
   ("" (SKEEP)
    (("" (LEMMA "e2v_diff_p")
      (("" (INST?)
        (("" (INST -1 "p")
          (("" (LEMMA "derivable_nth_mat_point[1]")
            (("" (INST?)
              (("" (ASSERT)
                (("" (INST -1 "i")
                  (("" (ASSERT)
                    (("" (HIDE -2)
                      (("" (EXPAND "differentiable?")
                        (("" (ASSERT)
                          (("" (SKEEP -1)
                            (("" (INST 1 "g")
                              (("" (ASSERT)
                                ((""
                                  (CASE "nth(1 + max_var(ode),
                 liftl(1 + max_var(ode), D,
                       LAMBDA (tt: (D)):
                         env_2_vec(max_var(ode),
                                   env_sol(D, envi, ode)(tt))),
                 i) = nth[1]
                 (1 + max_var(ode),
                  liftl(1 + max_var(ode), D,
                        LAMBDA (tt: (D)):
                          env_2_vec(max_var(ode),
                                    env_sol(D, envi, ode)(tt))),i)")
                                  (("1" (REPLACE -1)
                                    (("1" (REPLACE -1 1 RL)
                                      (("1" (HIDE -1)
                                        (("1" (EXPAND "convergence_zero?")
                                          (("1" (SKEEP)
                                            (("1" (INST -1 "epsilon")
                                              (("1" (SKEEP)
                                                (("1" (INST 1 "delta")
                                                  (("1" (SKEEP)
                                                    (("1" (INST -1 "x")
                                                      (("1" (ASSERT)
                                                        (("1" (ASSERT)
                                                          (("1" (EXPAND "nth")
                                                            (("1" (PROPAX) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (PROPAX) NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|e2v_diff_p| FORMULA-DECL NIL |chain_rule_re| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|real_dom| TYPE-EQ-DECL NIL |lift_real_fun_def| |mv_analysis|)
    (|domain| TYPE-EQ-DECL NIL |domain_vec2real_def| |mv_analysis|)
    (|lift_rd| CONST-DECL "domain[1]" |lift_real_fun_def| |mv_analysis|)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|max_var| CONST-DECL "nat" |hp_def| NIL)
    (|deriv_domain?| CONST-DECL "bool" |derivative_domain_multi| |mv_analysis|)
    (|vec2vec| TYPE-EQ-DECL NIL |domain_vec2real_def| |mv_analysis|)
    (|liftl| CONST-DECL "vec2vec[1](k)" |lift_real_fun_def| |mv_analysis|)
    (|env_2_vec| DEF-DECL "VectorN(k + 1)" |chain_rule_re| NIL)
    (|env_sol| CONST-DECL "Environment" |ODEs_equiv| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|nth| CONST-DECL "vec2real_f" |fundamentals_constrained_optimization|
     |mv_analysis|)
    (|constraints| TYPE-EQ-DECL NIL |domain_vec2real_def| |mv_analysis|)
    (|vec2real_f| TYPE-EQ-DECL NIL |domain_vec2real_def| |mv_analysis|)
    (|convergence_zero?| CONST-DECL "bool" |vector_sequences| |mv_analysis|)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (NQ CONST-DECL "bool" |differentiable_def| |mv_analysis|)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|zero_vec| DEF-DECL "VectorN(m)" |vector_arithmetic| |mv_analysis|)
    (|nth| CONST-DECL "vec2real_f" |convergence_vec2vec| |mv_analysis|)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|differentiable?| CONST-DECL "bool" |differentiable_def| |mv_analysis|)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|derivable_nth_mat_point| FORMULA-DECL NIL |convergence_vec2vec|
     |mv_analysis|)
    (|ODEs_s?| CONST-DECL "bool" |ODEs_equiv| NIL)
    (|ODEs| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|mapexpr_inj| CONST-DECL "bool" |hp_def| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|MapExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|dLVar| TYPE-DECL NIL |hp_def| NIL)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|dd?| CONST-DECL "bool" |hp_expr| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|odd_minus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|minus_i16_u16| APPLICATION-JUDGEMENT "int32" |integertypes| NIL)
    (|minus_i32_u32| APPLICATION-JUDGEMENT "int64" |integertypes| NIL)
    (|minus_u8_u8| APPLICATION-JUDGEMENT "int16" |integertypes| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|null_MapExprInj| NAME-JUDGEMENT "MapExprInj" |hp_def| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic|
     |mv_analysis|))
   NIL
   (|e2v_der_p| SUBTYPE
    "fundamentals_constrained_optimization[1].nth((number_fields.+)(hp_def.max_var(chain_rule_re.ode), 1), lift_real_fun_def.liftl((number_fields.+)(hp_def.max_var(chain_rule_re.ode), 1), chain_rule_re.D, (LAMBDA (tt: (chain_rule_re.D)): chain_rule_re.env_2_vec(hp_def.max_var(chain_rule_re.ode), ODEs_equiv.env_sol(chain_rule_re.D, chain_rule_re.envi, chain_rule_re.ode)(tt)))), chain_rule_re.i)"
    "{ff: domain_vec2real_def[1].vec2real_f | differentiable_def[1].differentiable?(lift_real_fun_def.lift_rd(chain_rule_re.D), ff, chain_rule_re.p)}")))
 (|e2v_der_p| 0
  (|e2v_der_p-1| |nil| 3853844519
   ("" (SKEEP)
    (("" (LEMMA "e2v_diff_p")
      (("" (INST?)
        (("" (LEMMA "der_nth_mat_point[1]")
          (("" (INST?)
            (("1" (ASSERT)
              (("1" (INST -2 "p")
                (("1" (ASSERT)
                  (("1" (INST -1 "i")
                    (("1" (ASSERT)
                      (("1" (REPLACE -1 1 LR)
                        (("1" (EXPAND "nth" 1) (("1" (PROPAX) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (ASSERT)
              (("2" (HIDE -1)
                (("2" (LEMMA "dd_e_partial") (("2" (INST?) NIL NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|e2v_diff_p| FORMULA-DECL NIL |chain_rule_re| NIL)
    (|der_nth_mat_point| FORMULA-DECL NIL |convergence_vec2vec| |mv_analysis|)
    (|dd_e_partial| FORMULA-DECL NIL |chain_rule_re| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nth| CONST-DECL "vec2real_f" |fundamentals_constrained_optimization|
     |mv_analysis|)
    (|nth| CONST-DECL "vec2real_f" |convergence_vec2vec| |mv_analysis|)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|env_sol| CONST-DECL "Environment" |ODEs_equiv| NIL)
    (|env_2_vec| DEF-DECL "VectorN(k + 1)" |chain_rule_re| NIL)
    (|liftl| CONST-DECL "vec2vec[1](k)" |lift_real_fun_def| |mv_analysis|)
    (|vec2vec| TYPE-EQ-DECL NIL |domain_vec2real_def| |mv_analysis|)
    (|max_var| CONST-DECL "nat" |hp_def| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|domain| TYPE-EQ-DECL NIL |domain_vec2real_def| |mv_analysis|)
    (|deriv_domain_e_partial?| CONST-DECL "bool" |derivative_domain_multi|
     |mv_analysis|)
    (|real_dom| TYPE-EQ-DECL NIL |lift_real_fun_def| |mv_analysis|)
    (|lift_rd| CONST-DECL "domain[1]" |lift_real_fun_def| |mv_analysis|)
    (D SKOLEM-CONST-DECL "(dd?)" |chain_rule_re| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|ODEs_s?| CONST-DECL "bool" |ODEs_equiv| NIL)
    (|ODEs| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|mapexpr_inj| CONST-DECL "bool" |hp_def| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|MapExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|dLVar| TYPE-DECL NIL |hp_def| NIL)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|dd?| CONST-DECL "bool" |hp_expr| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|odd_minus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|minus_i16_u16| APPLICATION-JUDGEMENT "int32" |integertypes| NIL)
    (|minus_i32_u32| APPLICATION-JUDGEMENT "int64" |integertypes| NIL)
    (|minus_u8_u8| APPLICATION-JUDGEMENT "int16" |integertypes| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|null_MapExprInj| NAME-JUDGEMENT "MapExprInj" |hp_def| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic|
     |mv_analysis|))
   SHOSTAK))
 (|e2v_der_p_not_in_map| 0
  (|e2v_der_p_not_in_map-1| |nil| 3853850092
   ("" (LEMMA "e2v_der_p")
    (("" (SKEEP)
      (("" (INST?)
        (("" (REPLACE -1)
          (("" (HIDE -1)
            (("" (LEMMA "init_partial_def[1].der_f_unique")
              ((""
                (INST -1 "lift_rd(D)" "p" " (nth[1]
                    (max_var(ode) + 1,
                     liftl(max_var(ode) + 1, D,
                           LAMBDA (tt: (D)):
                             env_2_vec(max_var(ode),
                                       env_sol(D, envi, ode)(tt))),
                     i))"
                 "(: 0 :)")
                (("1" (ASSERT)
                  (("1" (HIDE 2)
                    (("1" (EXPAND "convergence_zero?")
                      (("1" (SKEEP)
                        (("1" (INST 1 "1")
                          (("1" (SKEEP)
                            (("1" (EXPAND "NQ" 1)
                              (("1" (EXPAND "nth" 1)
                                (("1" (EXPAND "liftl" 1)
                                  (("1" (TYPEPRED "p")
                                    (("1" (EXPAND "lift_rd" -3)
                                      (("1" (ASSERT)
                                        (("1" (TYPEPRED "x")
                                          (("1" (EXPAND "NQ" -3)
                                            (("1" (EXPAND "lift_rd" -3)
                                              (("1" (ASSERT)
                                                (("1" (FLATTEN)
                                                  (("1" (ASSERT)
                                                    (("1"
                                                      (LEMMA "env_2_vec_nth")
                                                      (("1"
                                                        (INST-CP -1
                                                         "max_var(ode)"
                                                         "env_sol(D, envi, ode)(car(p + x))"
                                                         "i")
                                                        (("1" (REPLACE -2)
                                                          (("1"
                                                            (INST -1
                                                             "max_var(ode)"
                                                             "env_sol(D, envi, ode)(car(p))"
                                                             "i")
                                                            (("1" (REPLACE -1)
                                                              (("1"
                                                                (CASE
                                                                    "(env_sol(D, envi, ode)(car(p + x))(i) - (: 0 :) * x -
                                         env_sol(D, envi, ode)(car(p))(i)) = 0")
                                                                (("1"
                                                                  (REPLACE -1)
                                                                  (("1"
                                                                    (ASSERT)
                                                                    (("1"
                                                                      (GRIND)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL)
                                                                 ("2" (HIDE 3)
                                                                  (("2"
                                                                    (EXPAND "*"
                                                                            1
                                                                            1)
                                                                    (("2"
                                                                      (EXPAND
                                                                       "dot" 1
                                                                       1)
                                                                      (("2"
                                                                        (EXPAND
                                                                         "dot"
                                                                         1 1)
                                                                        (("2"
                                                                          (EXPAND
                                                                           "env_sol"
                                                                           1 1)
                                                                          (("2"
                                                                            (EXPAND
                                                                             "env_sol"
                                                                             1)
                                                                            (("2"
                                                                              (TYPEPRED
                                                                               "env_at_t(ode, fs_sol(D, envi, ode), envi)(car(p + x))")
                                                                              (("2"
                                                                                (TYPEPRED
                                                                                 " env_at_t(ode, fs_sol(D, envi, ode), envi)(car(p))")
                                                                                (("2"
                                                                                  (EXPAND
                                                                                   "env_at_t?"
                                                                                   -1)
                                                                                  (("2"
                                                                                    (EXPAND
                                                                                     "env_at_t?"
                                                                                     -3)
                                                                                    (("2"
                                                                                      (FLATTEN)
                                                                                      (("2"
                                                                                        (INST
                                                                                         -4
                                                                                         "i")
                                                                                        (("2"
                                                                                          (INST
                                                                                           -1
                                                                                           "i")
                                                                                          (("2"
                                                                                            (REPLACE
                                                                                             -)
                                                                                            (("2"
                                                                                              (ASSERT)
                                                                                              NIL
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (LEMMA "dd_e_partial") (("2" (INST?) NIL NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|null_MapExprInj| NAME-JUDGEMENT "MapExprInj" |hp_def| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic|
     |mv_analysis|)
    (|der_f_unique| FORMULA-DECL NIL |init_partial_def| |mv_analysis|)
    (|dd_e_partial| FORMULA-DECL NIL |chain_rule_re| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|convergence_zero?| CONST-DECL "bool" |vector_sequences| |mv_analysis|)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (NQ CONST-DECL "real" |differentiable_def| |mv_analysis|)
    (|zero_vec| DEF-DECL "VectorN(m)" |vector_arithmetic| |mv_analysis|)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (NQ CONST-DECL "bool" |differentiable_def| |mv_analysis|)
    (|env_2_vec_nth| FORMULA-DECL NIL |chain_rule_re| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|fs_sol| CONST-DECL "(solution_odes_u?(D, odes, envi))" |ODEs_equiv| NIL)
    (|solution_odes_u?| CONST-DECL "bool" |hp_expr| NIL)
    (|env_at_t?| CONST-DECL "bool" |hp_expr| NIL)
    (|MapExprInj| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|not_in_map| CONST-DECL "bool" |hp_def| NIL)
    (|max| DEF-DECL "real" |norms| |mv_analysis|)
    (|abs| DEF-DECL "{l: list | length(l) = length(ll)}" |norms| |mv_analysis|)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (|norm_inf| CONST-DECL "[(cons?) -> nonneg_real]" |norms| |mv_analysis|)
    (- CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices| |matrices|)
    (|sub| CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices|
     |matrices|)
    (|scal| DEF-DECL "VectorN(length(v2))" |matrices| |matrices|)
    (|norm_inf| CONST-DECL "(norm?(m))" |norms| |mv_analysis|)
    (|dot| DEF-DECL "real" |matrices| |matrices|)
    (|env_at_t| CONST-DECL "{env: (env_at_t?(odes, fs, envi, t)) |
   FORALL (env2: (env_at_t?(odes, fs, envi, t))): env = env2}"
     |hp_expr| NIL)
    (|add| DEF-DECL "VectorN(max(length(v1), length(v2)))" |matrices|
     |matrices|)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|envi| SKOLEM-CONST-DECL "Environment" |chain_rule_re| NIL)
    (|ode| SKOLEM-CONST-DECL "(ODEs_s?(D, envi))" |chain_rule_re| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (* CONST-DECL "real" |matrices| |matrices|)
    (+ CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices| |matrices|)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|Vector| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|env_sol| CONST-DECL "Environment" |ODEs_equiv| NIL)
    (|env_2_vec| DEF-DECL "VectorN(k + 1)" |chain_rule_re| NIL)
    (|liftl| CONST-DECL "vec2vec[1](k)" |lift_real_fun_def| |mv_analysis|)
    (|vec2vec| TYPE-EQ-DECL NIL |domain_vec2real_def| |mv_analysis|)
    (|nth| CONST-DECL "vec2real_f" |fundamentals_constrained_optimization|
     |mv_analysis|)
    (|constraints| TYPE-EQ-DECL NIL |domain_vec2real_def| |mv_analysis|)
    (|differentiable?| CONST-DECL "bool" |differentiable_def| |mv_analysis|)
    (|deriv_domain?| CONST-DECL "bool" |derivative_domain_multi| |mv_analysis|)
    (|vec2real_f| TYPE-EQ-DECL NIL |domain_vec2real_def| |mv_analysis|)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|deriv_domain_e_partial?| CONST-DECL "bool" |derivative_domain_multi|
     |mv_analysis|)
    (D SKOLEM-CONST-DECL "(dd?)" |chain_rule_re| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|max_var| CONST-DECL "nat" |hp_def| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|ODEs_s?| CONST-DECL "bool" |ODEs_equiv| NIL)
    (|ODEs| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|mapexpr_inj| CONST-DECL "bool" |hp_def| NIL)
    (|MapExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|dLVar| TYPE-DECL NIL |hp_def| NIL)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|lift_rd| CONST-DECL "domain[1]" |lift_real_fun_def| |mv_analysis|)
    (|domain| TYPE-EQ-DECL NIL |domain_vec2real_def| |mv_analysis|)
    (|real_dom| TYPE-EQ-DECL NIL |lift_real_fun_def| |mv_analysis|)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|dd?| CONST-DECL "bool" |hp_expr| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|e2v_der_p| FORMULA-DECL NIL |chain_rule_re| NIL))
   SHOSTAK))
 (|e2v_der_p_in_map| 0
  (|e2v_der_p_in_map-1| |nil| 3853853798
   ("" (SKEEP)
    (("" (SKOLETIN*)
      (("" (LEMMA "e2v_der_p")
        (("" (INST?)
          (("" (REPLACE -1)
            (("" (LEMMA "init_partial_def[1].der_f_unique")
              ((""
                (INST -1 "lift_rd(D)" "p" " (nth[1]
                    (max_var(ode) + 1,
                     liftl(max_var(ode) + 1, D,
                           LAMBDA (tt: (D)):
                             env_2_vec(max_var(ode),
                                       env_sol(D, envi, ode)(tt))),
                     i))"
                 "(: deriv[(D)](restrict[real, (D), real](fs(k)))(car(p)) :)")
                (("1" (ASSERT)
                  (("1" (HIDE 2)
                    (("1" (ASSERT)
                      (("1" (HIDE -1)
                        (("1" (EXPAND "deriv" 1)
                          (("1" (EXPAND "deriv" 1)
                            (("1"
                              (TYPEPRED
                               "lim(NQ(restrict[real, (D), real](fs(k)),
                                              car(p)),
                                           0)")
                              (("1" (EXPAND "nth" 1 1)
                                (("1" (EXPAND "liftl" 1 1)
                                  (("1" (LEMMA "env_2_vec_nth")
                                    (("1" (INST -1 "max_var(ode)" _ "i")
                                      (("1" (EXPAND "env_sol" 1 1)
                                        (("1"
                                          (TYPEPRED "env_at_t
                                                                     (ode,
                                                                      fs_sol(D, envi, ode),
                                                                      envi)
                                                                     (car(p))")
                                          (("1" (EXPAND "env_at_t?" -1)
                                            (("1" (FLATTEN)
                                              (("1" (INST -2 "k")
                                                (("1"
                                                  (TYPEPRED
                                                   "fs_sol(D, envi, ode)")
                                                  (("1"
                                                    (EXPAND "solution_odes_u?"
                                                            -1)
                                                    (("1" (FLATTEN)
                                                      (("1" (HIDE -2)
                                                        (("1"
                                                          (EXPAND
                                                           "solution_odes?" -1)
                                                          (("1" (FLATTEN)
                                                            (("1"
                                                              (EXPAND
                                                               "restrict" -8)
                                                              (("1" (HIDE -2)
                                                                (("1" (HIDE -4)
                                                                  (("1"
                                                                    (HIDE -1 -2
                                                                     -3 -4 -5)
                                                                    (("1"
                                                                      (EXPAND
                                                                       "convergence")
                                                                      (("1"
                                                                        (EXPAND
                                                                         "convergence_zero?"
                                                                         1)
                                                                        (("1"
                                                                          (EXPAND
                                                                           "convergence")
                                                                          (("1"
                                                                            (FLATTEN)
                                                                            (("1"
                                                                              (SKEEP)
                                                                              (("1"
                                                                                (INST
                                                                                 -2
                                                                                 "epsilon")
                                                                                (("1"
                                                                                  (SKEEP)
                                                                                  (("1"
                                                                                    (INST
                                                                                     1
                                                                                     "delta")
                                                                                    (("1"
                                                                                      (SKEEP)
                                                                                      (("1"
                                                                                        (INST
                                                                                         -2
                                                                                         "car(x)")
                                                                                        (("1"
                                                                                          (SPLIT
                                                                                           -2)
                                                                                          (("1"
                                                                                            (EXPAND
                                                                                             "NQ")
                                                                                            (("1"
                                                                                              (ASSERT)
                                                                                              (("1"
                                                                                                (TYPEPRED
                                                                                                 "x")
                                                                                                (("1"
                                                                                                  (EXPAND
                                                                                                   "NQ"
                                                                                                   -3)
                                                                                                  (("1"
                                                                                                    (ASSERT)
                                                                                                    (("1"
                                                                                                      (FLATTEN)
                                                                                                      (("1"
                                                                                                        (EXPAND
                                                                                                         "lift_rd"
                                                                                                         -3)
                                                                                                        (("1"
                                                                                                          (ASSERT)
                                                                                                          (("1"
                                                                                                            (TYPEPRED
                                                                                                             "p")
                                                                                                            (("1"
                                                                                                              (EXPAND
                                                                                                               "lift_rd"
                                                                                                               -3)
                                                                                                              (("1"
                                                                                                                (ASSERT)
                                                                                                                (("1"
                                                                                                                  (HIDE
                                                                                                                   -1
                                                                                                                   -4)
                                                                                                                  (("1"
                                                                                                                    (REVEAL
                                                                                                                     -)
                                                                                                                    (("1"
                                                                                                                      (HIDE
                                                                                                                       -19)
                                                                                                                      (("1"
                                                                                                                        (HIDE
                                                                                                                         -18
                                                                                                                         -17)
                                                                                                                        (("1"
                                                                                                                          (HIDE
                                                                                                                           -16)
                                                                                                                          (("1"
                                                                                                                            (HIDE
                                                                                                                             -15)
                                                                                                                            (("1"
                                                                                                                              (HIDE
                                                                                                                               -12)
                                                                                                                              (("1"
                                                                                                                                (HIDE
                                                                                                                                 -1
                                                                                                                                 -2
                                                                                                                                 -3
                                                                                                                                 -4)
                                                                                                                                (("1"
                                                                                                                                  (HIDE
                                                                                                                                   -3)
                                                                                                                                  (("1"
                                                                                                                                    (INST-CP
                                                                                                                                     -4
                                                                                                                                     "env_at_t(ode, fs_sol(D, envi, ode), envi)
                                                                                     (car(p + x))")
                                                                                                                                    (("1"
                                                                                                                                      (INST
                                                                                                                                       -4
                                                                                                                                       "                          env_at_t(ode, fs_sol(D, envi, ode), envi)
                                                                                      (car(p))")
                                                                                                                                      (("1"
                                                                                                                                        (REPLACE
                                                                                                                                         -4)
                                                                                                                                        (("1"
                                                                                                                                          (REPLACE
                                                                                                                                           -5)
                                                                                                                                          (("1"
                                                                                                                                            (CASE
                                                                                                                                                "i = dlvar_index(nth(ode, k)`1)")
                                                                                                                                            (("1"
                                                                                                                                              (REPLACE
                                                                                                                                               -1
                                                                                                                                               -7
                                                                                                                                               RL)
                                                                                                                                              (("1"
                                                                                                                                                (REPLACE
                                                                                                                                                 -7
                                                                                                                                                 2
                                                                                                                                                 RL)
                                                                                                                                                (("1"
                                                                                                                                                  (HIDE
                                                                                                                                                   -7)
                                                                                                                                                  (("1"
                                                                                                                                                    (HIDE
                                                                                                                                                     -7)
                                                                                                                                                    (("1"
                                                                                                                                                      (REPLACE
                                                                                                                                                       -16
                                                                                                                                                       2)
                                                                                                                                                      (("1"
                                                                                                                                                        (REPLACE
                                                                                                                                                         -16
                                                                                                                                                         2
                                                                                                                                                         RL)
                                                                                                                                                        (("1"
                                                                                                                                                          (ASSERT)
                                                                                                                                                          (("1"
                                                                                                                                                            (EXPAND
                                                                                                                                                             "restrict")
                                                                                                                                                            (("1"
                                                                                                                                                              (TYPEPRED
                                                                                                                                                               "env_at_t(ode, fs_sol(D, envi, ode), envi)(car(p + x))")
                                                                                                                                                              (("1"
                                                                                                                                                                (EXPAND
                                                                                                                                                                 "env_at_t?"
                                                                                                                                                                 -1)
                                                                                                                                                                (("1"
                                                                                                                                                                  (FLATTEN)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (INST
                                                                                                                                                                     -2
                                                                                                                                                                     "k")
                                                                                                                                                                    (("1"
                                                                                                                                                                      (REPLACE
                                                                                                                                                                       -4
                                                                                                                                                                       -2
                                                                                                                                                                       RL)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (REPLACE
                                                                                                                                                                         -19
                                                                                                                                                                         -2
                                                                                                                                                                         RL)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (REPLACE
                                                                                                                                                                           -2
                                                                                                                                                                           2
                                                                                                                                                                           RL)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (EXPAND
                                                                                                                                                                             "+"
                                                                                                                                                                             2
                                                                                                                                                                             1)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (EXPAND
                                                                                                                                                                               "add"
                                                                                                                                                                               2
                                                                                                                                                                               1)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (HIDE
                                                                                                                                                                                 -1
                                                                                                                                                                                 -2
                                                                                                                                                                                 -3
                                                                                                                                                                                 -4
                                                                                                                                                                                 -5
                                                                                                                                                                                 -6
                                                                                                                                                                                 -7
                                                                                                                                                                                 -8
                                                                                                                                                                                 -9
                                                                                                                                                                                 -10
                                                                                                                                                                                 -11
                                                                                                                                                                                 -12
                                                                                                                                                                                 -13
                                                                                                                                                                                 -14
                                                                                                                                                                                 -15)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (HIDE
                                                                                                                                                                                   -2)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (LEMMA
                                                                                                                                                                                     "abs_div")
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (EXPAND
                                                                                                                                                                                       "*"
                                                                                                                                                                                       2)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (EXPAND
                                                                                                                                                                                         "dot"
                                                                                                                                                                                         2
                                                                                                                                                                                         1)
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (EXPAND
                                                                                                                                                                                           "dot"
                                                                                                                                                                                           2
                                                                                                                                                                                           1)
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (EXPAND
                                                                                                                                                                                             "norm_inf"
                                                                                                                                                                                             2
                                                                                                                                                                                             1)
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (EXPAND
                                                                                                                                                                                               "norm_inf")
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (EXPAND
                                                                                                                                                                                                 "abs"
                                                                                                                                                                                                 2
                                                                                                                                                                                                 2)
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (EXPAND
                                                                                                                                                                                                   "max"
                                                                                                                                                                                                   2
                                                                                                                                                                                                   1)
                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                    (EXPAND
                                                                                                                                                                                                     "length"
                                                                                                                                                                                                     2)
                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                      (GRIND)
                                                                                                                                                                                                      NIL
                                                                                                                                                                                                      NIL))
                                                                                                                                                                                                    NIL))
                                                                                                                                                                                                  NIL))
                                                                                                                                                                                                NIL))
                                                                                                                                                                                              NIL))
                                                                                                                                                                                            NIL))
                                                                                                                                                                                          NIL))
                                                                                                                                                                                        NIL))
                                                                                                                                                                                      NIL))
                                                                                                                                                                                    NIL))
                                                                                                                                                                                  NIL))
                                                                                                                                                                                NIL))
                                                                                                                                                                              NIL))
                                                                                                                                                                            NIL))
                                                                                                                                                                          NIL))
                                                                                                                                                                        NIL))
                                                                                                                                                                      NIL))
                                                                                                                                                                    NIL))
                                                                                                                                                                  NIL))
                                                                                                                                                                NIL))
                                                                                                                                                              NIL))
                                                                                                                                                            NIL))
                                                                                                                                                          NIL))
                                                                                                                                                        NIL))
                                                                                                                                                      NIL))
                                                                                                                                                    NIL))
                                                                                                                                                  NIL))
                                                                                                                                                NIL))
                                                                                                                                              NIL)
                                                                                                                                             ("2"
                                                                                                                                              (HIDE
                                                                                                                                               3)
                                                                                                                                              (("2"
                                                                                                                                                (HIDE
                                                                                                                                                 -1
                                                                                                                                                 -2
                                                                                                                                                 -3
                                                                                                                                                 -4
                                                                                                                                                 -5
                                                                                                                                                 -6
                                                                                                                                                 -7
                                                                                                                                                 -8
                                                                                                                                                 -9
                                                                                                                                                 -10
                                                                                                                                                 -11
                                                                                                                                                 -12
                                                                                                                                                 -13
                                                                                                                                                 -14
                                                                                                                                                 -15
                                                                                                                                                 -16
                                                                                                                                                 -17)
                                                                                                                                                (("2"
                                                                                                                                                  (TYPEPRED
                                                                                                                                                   "k")
                                                                                                                                                  (("2"
                                                                                                                                                    (EXPAND
                                                                                                                                                     "extend"
                                                                                                                                                     -1)
                                                                                                                                                    (("2"
                                                                                                                                                      (ASSERT)
                                                                                                                                                      (("2"
                                                                                                                                                        (SPLIT
                                                                                                                                                         -1)
                                                                                                                                                        (("1"
                                                                                                                                                          (FLATTEN)
                                                                                                                                                          (("1"
                                                                                                                                                            (EXPAND
                                                                                                                                                             "index_of"
                                                                                                                                                             -2)
                                                                                                                                                            (("1"
                                                                                                                                                              (ASSERT)
                                                                                                                                                              NIL
                                                                                                                                                              NIL))
                                                                                                                                                            NIL))
                                                                                                                                                          NIL)
                                                                                                                                                         ("2"
                                                                                                                                                          (PROPAX)
                                                                                                                                                          NIL
                                                                                                                                                          NIL))
                                                                                                                                                        NIL))
                                                                                                                                                      NIL))
                                                                                                                                                    NIL))
                                                                                                                                                  NIL))
                                                                                                                                                NIL))
                                                                                                                                              NIL))
                                                                                                                                            NIL))
                                                                                                                                          NIL))
                                                                                                                                        NIL))
                                                                                                                                      NIL))
                                                                                                                                    NIL))
                                                                                                                                  NIL))
                                                                                                                                NIL))
                                                                                                                              NIL))
                                                                                                                            NIL))
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL)
                                                                                           ("2"
                                                                                            (HIDE
                                                                                             2)
                                                                                            (("2"
                                                                                              (TYPEPRED
                                                                                               "x")
                                                                                              (("2"
                                                                                                (EXPAND
                                                                                                 "fullset")
                                                                                                (("2"
                                                                                                  (PROPAX)
                                                                                                  NIL
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL)
                                                                                           ("3"
                                                                                            (HIDE
                                                                                             2)
                                                                                            (("3"
                                                                                              (HIDE
                                                                                               -3
                                                                                               -4)
                                                                                              (("3"
                                                                                                (HIDE
                                                                                                 -1)
                                                                                                (("3"
                                                                                                  (CASE
                                                                                                      "x = (: car(x) :)")
                                                                                                  (("1"
                                                                                                    (EXPAND
                                                                                                     "zero_vec"
                                                                                                     -2)
                                                                                                    (("1"
                                                                                                      (EXPAND
                                                                                                       "zero_vec"
                                                                                                       -2)
                                                                                                      (("1"
                                                                                                        (EXPAND
                                                                                                         "-"
                                                                                                         -2)
                                                                                                        (("1"
                                                                                                          (GRIND)
                                                                                                          (("1"
                                                                                                            (EXPAND
                                                                                                             "add"
                                                                                                             -3)
                                                                                                            (("1"
                                                                                                              (REPLACE
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (ASSERT)
                                                                                                                NIL
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL)
                                                                                                           ("2"
                                                                                                            (GRIND)
                                                                                                            (("2"
                                                                                                              (EXPAND
                                                                                                               "add"
                                                                                                               -2)
                                                                                                              (("2"
                                                                                                                (REPLACE
                                                                                                                 -1)
                                                                                                                (("2"
                                                                                                                  (ASSERT)
                                                                                                                  NIL
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL)
                                                                                                   ("2"
                                                                                                    (TYPEPRED
                                                                                                     "x")
                                                                                                    (("2"
                                                                                                      (HIDE
                                                                                                       -3
                                                                                                       -4
                                                                                                       -5)
                                                                                                      (("2"
                                                                                                        (DECOMPOSE-EQUALITY
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (EXPAND
                                                                                                           "length"
                                                                                                           -2)
                                                                                                          (("2"
                                                                                                            (EXPAND
                                                                                                             "length"
                                                                                                             -2)
                                                                                                            (("2"
                                                                                                              (ASSERT)
                                                                                                              NIL
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL)
                                                                                         ("2"
                                                                                          (HIDE
                                                                                           2)
                                                                                          (("2"
                                                                                            (ASSERT)
                                                                                            (("2"
                                                                                              (HIDE
                                                                                               -4)
                                                                                              (("2"
                                                                                                (TYPEPRED
                                                                                                 "x")
                                                                                                (("2"
                                                                                                  (SPLIT
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (CASE
                                                                                                        "car(x) = 0")
                                                                                                    (("1"
                                                                                                      (ASSERT)
                                                                                                      (("1"
                                                                                                        (CASE
                                                                                                            "NOT x = zero_vec(1)")
                                                                                                        (("1"
                                                                                                          (EXPAND
                                                                                                           "zero_vec"
                                                                                                           1)
                                                                                                          (("1"
                                                                                                            (EXPAND
                                                                                                             "zero_vec"
                                                                                                             1)
                                                                                                            (("1"
                                                                                                              (ASSERT)
                                                                                                              (("1"
                                                                                                                (DECOMPOSE-EQUALITY
                                                                                                                 1)
                                                                                                                (("1"
                                                                                                                  (EXPAND
                                                                                                                   "length"
                                                                                                                   -3)
                                                                                                                  (("1"
                                                                                                                    (EXPAND
                                                                                                                     "length"
                                                                                                                     -3)
                                                                                                                    (("1"
                                                                                                                      (ASSERT)
                                                                                                                      NIL
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL)
                                                                                                         ("2"
                                                                                                          (ASSERT)
                                                                                                          NIL
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL)
                                                                                                     ("2"
                                                                                                      (ASSERT)
                                                                                                      NIL
                                                                                                      NIL))
                                                                                                    NIL)
                                                                                                   ("2"
                                                                                                    (EXPAND
                                                                                                     "A"
                                                                                                     1)
                                                                                                    (("2"
                                                                                                      (EXPAND
                                                                                                       "NQ"
                                                                                                       -3)
                                                                                                      (("2"
                                                                                                        (EXPAND
                                                                                                         "lift_rd")
                                                                                                        (("2"
                                                                                                          (EXPAND
                                                                                                           "+"
                                                                                                           -)
                                                                                                          (("2"
                                                                                                            (EXPAND
                                                                                                             "add"
                                                                                                             -3)
                                                                                                            (("2"
                                                                                                              (PROPAX)
                                                                                                              NIL
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (HIDE 2)
                                (("2" (LEMMA "dd_noe") (("2" (INST?) NIL NIL))
                                  NIL))
                                NIL)
                               ("3" (HIDE 2)
                                (("3" (LEMMA "dd_deriv_domain")
                                  (("3" (INST?) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (ASSERT)
                  (("2" (LEMMA "dd_noe") (("2" (INST -1 "D") NIL NIL)) NIL))
                  NIL)
                 ("3" (LEMMA "dd_deriv_domain") (("3" (INST -1 "D") NIL NIL))
                  NIL)
                 ("4" (LEMMA "dd_e_partial") (("4" (INST -1 "D") NIL NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|derivable?| CONST-DECL "bool" |derivatives| |analysis|)
    (|deriv_fun| TYPE-EQ-DECL NIL |derivatives| |analysis|)
    (|deriv| CONST-DECL "[T -> real]" |derivatives| |analysis|)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|index_of_j| APPLICATION-JUDGEMENT
     "(singleton?[below(length[MapExpr](me))])" |hp_def| NIL)
    (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|der_f| CONST-DECL "{T: MatrixMN(m, n) |
   convergence_zero?(NQ(D, p), NQ(m, f, p, T), zero_vec(n))}"
     |convergence_vec2vec| |mv_analysis|)
    (|zero_vec| DEF-DECL "VectorN(m)" |vector_arithmetic| |mv_analysis|)
    (NQ CONST-DECL "real" |convergence_vec2vec| |mv_analysis|)
    (NQ CONST-DECL "bool" |differentiable_def| |mv_analysis|)
    (|convergence_zero?| CONST-DECL "bool" |vector_sequences| |mv_analysis|)
    (|vec2real_f| TYPE-EQ-DECL NIL |domain_vec2real_def| |mv_analysis|)
    (|MatrixMN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|Matrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|env_sol| CONST-DECL "Environment" |ODEs_equiv| NIL)
    (|env_2_vec| DEF-DECL "VectorN(k + 1)" |chain_rule_re| NIL)
    (|liftl| CONST-DECL "vec2vec[1](k)" |lift_real_fun_def| |mv_analysis|)
    (|lift_rd| CONST-DECL "domain[1]" |lift_real_fun_def| |mv_analysis|)
    (|real_dom| TYPE-EQ-DECL NIL |lift_real_fun_def| |mv_analysis|)
    (|differentiable?| CONST-DECL "bool" |convergence_vec2vec| |mv_analysis|)
    (|vec2vec| TYPE-EQ-DECL NIL |domain_vec2real_def| |mv_analysis|)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|deriv_domain?| CONST-DECL "bool" |derivative_domain_multi| |mv_analysis|)
    (|domain| TYPE-EQ-DECL NIL |domain_vec2real_def| |mv_analysis|)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|fs_sol| CONST-DECL "(solution_odes_u?(D, odes, envi))" |ODEs_equiv| NIL)
    (|the| CONST-DECL "(p)" |sets| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|solution_odes_u?| CONST-DECL "bool" |hp_expr| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|singleton_extend| APPLICATION-JUDGEMENT "(singleton?[T])"
     |extend_set_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|singleton?| CONST-DECL "bool" |sets| NIL)
    (< CONST-DECL "bool" |reals| NIL) (|dLVar| TYPE-DECL NIL |hp_def| NIL)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|MapExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|mapexpr_inj| CONST-DECL "bool" |hp_def| NIL)
    (|ODEs| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|dd?| CONST-DECL "bool" |hp_expr| NIL)
    (|ODEs_s?| CONST-DECL "bool" |ODEs_equiv| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (FALSE CONST-DECL "bool" |booleans| NIL)
    (|extend| CONST-DECL "R" |extend| NIL)
    (|MapExprInj| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|in_map| CONST-DECL "bool" |hp_def| NIL)
    (|index_of| CONST-DECL "bool" |hp_def| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|max_var| CONST-DECL "nat" |hp_def| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|der_f_unique| FORMULA-DECL NIL |init_partial_def| |mv_analysis|)
    (|dd_e_partial| FORMULA-DECL NIL |chain_rule_re| NIL)
    (|lim| CONST-DECL "{l: real | convergence(f, x0, l)}" |lim_of_functions|
     |analysis|)
    (|convergent?| CONST-DECL "bool" |lim_of_functions| |analysis|)
    (NQ CONST-DECL "real" |derivatives_def| |analysis|)
    (|convergence| CONST-DECL "bool" |lim_of_functions| |analysis|)
    (A CONST-DECL "setof[nzreal]" |derivatives_def| |analysis|)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|env_at_t| CONST-DECL "{env: (env_at_t?(odes, fs, envi, t)) |
   FORALL (env2: (env_at_t?(odes, fs, envi, t))): env = env2}"
     |hp_expr| NIL)
    (|env_at_t?| CONST-DECL "bool" |hp_expr| NIL)
    (|solution_odes?| CONST-DECL "bool" |hp_expr| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|convergence| CONST-DECL "bool" |convergence_functions| |analysis|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|fullset_is_clopen| NAME-JUDGEMENT
     "clopen[real, (metric_induced_topology)]" |real_topology| |metric_space|)
    (|real_is_complete| NAME-JUDGEMENT "metric_complete" |real_topology|
     |metric_space|)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|add| DEF-DECL "VectorN(max(length(v1), length(v2)))" |matrices|
     |matrices|)
    (* CONST-DECL "real" |matrices| |matrices|)
    (|norm_inf| CONST-DECL "[(cons?) -> nonneg_real]" |norms| |mv_analysis|)
    (|max| DEF-DECL "real" |norms| |mv_analysis|)
    (|fullset| CONST-DECL "set" |sets| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (- CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices| |matrices|)
    (|sub| CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices|
     |matrices|)
    (|scal| DEF-DECL "VectorN(length(v2))" |matrices| |matrices|)
    (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|x!1| SKOLEM-CONST-DECL "(D)" |chain_rule_re| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|envi| SKOLEM-CONST-DECL "Environment" |chain_rule_re| NIL)
    (|ode| SKOLEM-CONST-DECL "(ODEs_s?(D, envi))" |chain_rule_re| NIL)
    (|i| SKOLEM-CONST-DECL "{i: below(1 + max_var(ode)) | in_map(ode)(i)}"
     |chain_rule_re| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|abs| DEF-DECL "{l: list | length(l) = length(ll)}" |norms| |mv_analysis|)
    (|norm_inf| CONST-DECL "(norm?(m))" |norms| |mv_analysis|)
    (|dot| DEF-DECL "real" |matrices| |matrices|)
    (|abs_div| FORMULA-DECL NIL |real_props| NIL)
    (|dlvar_index| ADT-ACCESSOR-DECL "[dLVar -> nat]" |hp_def| NIL)
    (+ CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices| |matrices|)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|Vector| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (NQ CONST-DECL "real" |differentiable_def| |mv_analysis|)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|list_cons_extensionality| FORMULA-DECL NIL |list_adt| NIL)
    (|p| SKOLEM-CONST-DECL "(lift_rd(D))" |chain_rule_re| NIL)
    (|x| SKOLEM-CONST-DECL "{xx: (NQ(lift_rd(D), p)) | xx /= zero_vec(1)}"
     |chain_rule_re| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|env_2_vec_nth| FORMULA-DECL NIL |chain_rule_re| NIL)
    (|dd_noe| FORMULA-DECL NIL |hp_expr| NIL)
    (|dd_deriv_domain| FORMULA-DECL NIL |hp_expr| NIL)
    (|deriv| CONST-DECL "real" |derivatives_def| |analysis|)
    (|nth| CONST-DECL "vec2real_f" |fundamentals_constrained_optimization|
     |mv_analysis|)
    (|constraints| TYPE-EQ-DECL NIL |domain_vec2real_def| |mv_analysis|)
    (|differentiable?| CONST-DECL "bool" |differentiable_def| |mv_analysis|)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|not_one_element?| CONST-DECL "bool" |deriv_domain_def| |analysis|)
    (|deriv_domain?| CONST-DECL "bool" |deriv_domain_def| |analysis|)
    (|deriv_domain_e_partial?| CONST-DECL "bool" |derivative_domain_multi|
     |mv_analysis|)
    (D SKOLEM-CONST-DECL "(dd?)" |chain_rule_re| NIL)
    (|e2v_der_p| FORMULA-DECL NIL |chain_rule_re| NIL)
    (|null_MapExprInj| NAME-JUDGEMENT "MapExprInj" |hp_def| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic|
     |mv_analysis|))
   SHOSTAK))
 (|e2v_der_p_in_map_ode| 0
  (|e2v_der_p_in_map_ode-1| |nil| 3853933662
   ("" (LEMMA "e2v_der_p_in_map")
    (("" (SKEEP)
      (("" (INST?)
        (("" (SKOLETIN*)
          (("" (REPLACE -4)
            (("" (EXPAND "env_sol" 1 1)
              ((""
                (TYPEPRED "env_at_t(ode, fs_sol(D, envi, ode), envi)(car(p))")
                (("" (EXPAND "env_at_t?" -1)
                  (("" (FLATTEN)
                    (("" (INST -2 "k")
                      (("" (DECOMPOSE-EQUALITY 1)
                        (("" (REPLACE -5 1 LR)
                          (("" (EXPAND "expr" 1 1)
                            (("" (EXPAND "extend" -9)
                              (("" (ASSERT)
                                (("" (TYPEPRED "k")
                                  (("" (EXPAND "extend" -1)
                                    ((""
                                      (CASE " sets
                           [naturalnumbers.below(list_props[hp_def.MapExpr].length
                                                 (ode))].the
                           (hp_def.index_of(ode, i)) = k")
                                      (("1" (REPLACE -1)
                                        (("1" (ASSERT)
                                          (("1" (TYPEPRED "fs")
                                            (("1" (EXPAND "solution_odes_u?")
                                              (("1" (FLATTEN)
                                                (("1" (HIDE -2)
                                                  (("1"
                                                    (EXPAND "solution_odes?"
                                                            -1)
                                                    (("1" (FLATTEN)
                                                      (("1" (EXPAND "expr" -10)
                                                        (("1" (REPLACE -4 -10)
                                                          (("1"
                                                            (REPLACE -10 1 RL)
                                                            (("1"
                                                              (CASE
                                                                  "dlvar_index(nth(ode,k)`1) = i")
                                                              (("1"
                                                                (REPLACE -1)
                                                                (("1"
                                                                  (INST -4
                                                                   "car(p)"
                                                                   "env_at_t(ode, fs_sol(D, envi, ode), envi)(car(p))")
                                                                  (("1"
                                                                    (EXPAND
                                                                     "sol_at_t?"
                                                                     -4)
                                                                    (("1"
                                                                      (INST -4
                                                                       "k")
                                                                      (("1"
                                                                        (REPLACE
                                                                         -4 1)
                                                                        (("1"
                                                                          (ASSERT)
                                                                          NIL
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL)
                                                               ("2" (ASSERT)
                                                                (("2" (HIDE 2)
                                                                  (("2"
                                                                    (EXPAND
                                                                     "index_of"
                                                                     -5)
                                                                    (("2"
                                                                      (PROPAX)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (HIDE 2)
                                        (("2" (ASSERT)
                                          (("2"
                                            (TYPEPRED
                                             "sets[below(list_props[hp_def.MapExpr].length(ode))].the
              (hp_def.index_of(ode, i))")
                                            (("2" (EXPAND "index_of")
                                              (("2" (ASSERT)
                                                (("2" (TYPEPRED "ode")
                                                  (("2" (EXPAND "mapexpr_inj")
                                                    (("2"
                                                      (LEMMA "mapexpr_inj_eq")
                                                      (("2" (HIDE -2)
                                                        (("2" (INST?)
                                                          (("2" (ASSERT)
                                                            (("2"
                                                              (INST -1 "k"
                                                               "sets[below(list_props[hp_def.MapExpr].length(ode))].the
              (LAMBDA (k: below(length(ode))): dlvar_index(nth(ode, k)`1) = i)")
                                                              (("1" (ASSERT)
                                                                (("1"
                                                                  (SPLIT -1)
                                                                  (("1"
                                                                    (FLATTEN)
                                                                    (("1"
                                                                      (HIDE 2)
                                                                      (("1"
                                                                        (WITH-TCCS
                                                                         (NAME-REPLACE
                                                                          "V"
                                                                          "nth(ode,
           sets[below(list_props[hp_def.MapExpr].length(ode))].the
               (LAMBDA (k: below(length(ode))):
                  dlvar_index(nth(ode, k)`1) = i))"))
                                                                        (("1"
                                                                          (LEMMA
                                                                           "dlvar_inj")
                                                                          (("1"
                                                                            (INST
                                                                             -1
                                                                             "nth(ode,k)`1"
                                                                             "V`1")
                                                                            (("1"
                                                                              (ASSERT)
                                                                              NIL
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL)
                                                                   ("2"
                                                                    (ASSERT)
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL)
                                                               ("2" (HIDE 2)
                                                                (("2"
                                                                  (EXPAND
                                                                   "singleton?")
                                                                  (("2"
                                                                    (INST 1
                                                                     "k")
                                                                    (("2"
                                                                      (SKEEP)
                                                                      (("2"
                                                                        (TYPEPRED
                                                                         "y")
                                                                        (("2"
                                                                          (LEMMA
                                                                           "mapexpr_inj_eq")
                                                                          (("2"
                                                                            (INST
                                                                             -1
                                                                             "ode")
                                                                            (("2"
                                                                              (ASSERT)
                                                                              (("2"
                                                                                (INST
                                                                                 -1
                                                                                 "k"
                                                                                 "y")
                                                                                (("2"
                                                                                  (SPLIT
                                                                                   -1)
                                                                                  (("1"
                                                                                    (FLATTEN)
                                                                                    (("1"
                                                                                      (DECOMPOSE-EQUALITY
                                                                                       1)
                                                                                      NIL
                                                                                      NIL))
                                                                                    NIL)
                                                                                   ("2"
                                                                                    (ASSERT)
                                                                                    NIL
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|null_MapExprInj| NAME-JUDGEMENT "MapExprInj" |hp_def| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic|
     |mv_analysis|)
    (|expr| CONST-DECL "RealExpr" |hp_def| NIL)
    (|index_of| CONST-DECL "bool" |hp_def| NIL)
    (|extend| CONST-DECL "R" |extend| NIL)
    (FALSE CONST-DECL "bool" |booleans| NIL)
    (|singleton?| CONST-DECL "bool" |sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|singleton_extend| APPLICATION-JUDGEMENT "(singleton?[T])"
     |extend_set_props| NIL)
    (|solution_odes_u?| CONST-DECL "bool" |hp_expr| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|the| CONST-DECL "(p)" |sets| NIL)
    (|fs_sol| CONST-DECL "(solution_odes_u?(D, odes, envi))" |ODEs_equiv| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|deriv_domain?| CONST-DECL "bool" |derivative_domain_multi| |mv_analysis|)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|vec2vec| TYPE-EQ-DECL NIL |domain_vec2real_def| |mv_analysis|)
    (|differentiable?| CONST-DECL "bool" |convergence_vec2vec| |mv_analysis|)
    (|liftl| CONST-DECL "vec2vec[1](k)" |lift_real_fun_def| |mv_analysis|)
    (|env_2_vec| DEF-DECL "VectorN(k + 1)" |chain_rule_re| NIL)
    (|env_sol| CONST-DECL "Environment" |ODEs_equiv| NIL)
    (|Matrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|MatrixMN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|vec2real_f| TYPE-EQ-DECL NIL |domain_vec2real_def| |mv_analysis|)
    (|convergence_zero?| CONST-DECL "bool" |vector_sequences| |mv_analysis|)
    (NQ CONST-DECL "bool" |differentiable_def| |mv_analysis|)
    (NQ CONST-DECL "real" |convergence_vec2vec| |mv_analysis|)
    (|zero_vec| DEF-DECL "VectorN(m)" |vector_arithmetic| |mv_analysis|)
    (|der_f| CONST-DECL "{T: MatrixMN(m, n) |
   convergence_zero?(NQ(D, p), NQ(m, f, p, T), zero_vec(n))}"
     |convergence_vec2vec| |mv_analysis|)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|index_of_j| APPLICATION-JUDGEMENT
     "(singleton?[below(length[MapExpr](me))])" |hp_def| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (|deriv| CONST-DECL "[T -> real]" |derivatives| |analysis|)
    (|deriv_fun| TYPE-EQ-DECL NIL |derivatives| |analysis|)
    (|derivable?| CONST-DECL "bool" |derivatives| |analysis|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|dlvar_index| ADT-ACCESSOR-DECL "[dLVar -> nat]" |hp_def| NIL)
    (|sol_at_t?| CONST-DECL "bool" |hp_expr| NIL)
    (|solution_odes?| CONST-DECL "bool" |hp_expr| NIL)
    (|mapexpr_inj_eq| FORMULA-DECL NIL |hp_def| NIL)
    (|i| SKOLEM-CONST-DECL "{i: below(1 + max_var(ode)) | in_map(ode)(i)}"
     |chain_rule_re| NIL)
    (|ode| SKOLEM-CONST-DECL "(ODEs_s?(D, envi))" |chain_rule_re| NIL)
    (|envi| SKOLEM-CONST-DECL "Environment" |chain_rule_re| NIL)
    (D SKOLEM-CONST-DECL "(dd?)" |chain_rule_re| NIL)
    (|dlvar_inj| FORMULA-DECL NIL |hp_def| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|dlvar?| ADT-RECOGNIZER-DECL "[dLVar -> boolean]" |hp_def| NIL)
    (|dLVar_dlvar_extensionality| FORMULA-DECL NIL |hp_def| NIL)
    (|k| SKOLEM-CONST-DECL
     "(extend[nat, below(length[MapExpr](ode)), bool, FALSE](index_of(ode, i)))"
     |chain_rule_re| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|list_cons_extensionality| FORMULA-DECL NIL |list_adt| NIL)
    (|env_at_t?| CONST-DECL "bool" |hp_expr| NIL)
    (|env_at_t| CONST-DECL "{env: (env_at_t?(odes, fs, envi, t)) |
   FORALL (env2: (env_at_t?(odes, fs, envi, t))): env = env2}"
     |hp_expr| NIL)
    (|in_map| CONST-DECL "bool" |hp_def| NIL)
    (|MapExprInj| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|max_var| CONST-DECL "nat" |hp_def| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|ODEs_s?| CONST-DECL "bool" |ODEs_equiv| NIL)
    (|ODEs| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|mapexpr_inj| CONST-DECL "bool" |hp_def| NIL)
    (|MapExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|dLVar| TYPE-DECL NIL |hp_def| NIL)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|lift_rd| CONST-DECL "domain[1]" |lift_real_fun_def| |mv_analysis|)
    (|domain| TYPE-EQ-DECL NIL |domain_vec2real_def| |mv_analysis|)
    (|real_dom| TYPE-EQ-DECL NIL |lift_real_fun_def| |mv_analysis|)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|dd?| CONST-DECL "bool" |hp_expr| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|e2v_der_p_in_map| FORMULA-DECL NIL |chain_rule_re| NIL))
   SHOSTAK))
 (|e2v_re_diff_p_TCC1| 0
  (|e2v_re_diff_p_TCC1-1| |nil| 3853923565
   ("" (SKEEP) (("" (ASSERT) (("" (INST?) NIL NIL)) NIL)) NIL)
   ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|dd?| CONST-DECL "bool" |hp_expr| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|real_dom| TYPE-EQ-DECL NIL |lift_real_fun_def| |mv_analysis|)
    (|domain| TYPE-EQ-DECL NIL |domain_vec2real_def| |mv_analysis|)
    (|lift_rd| CONST-DECL "domain[1]" |lift_real_fun_def| |mv_analysis|)
    (|null_MapExprInj| NAME-JUDGEMENT "MapExprInj" |hp_def| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic|
     |mv_analysis|))
   NIL
   (|e2v_re_diff_p| SUBTYPE
    "ODEs_equiv.env_sol(chain_rule_re.D, chain_rule_re.envi, chain_rule_re.ode)(list_adt[real].car(chain_rule_re.p))"
    "(chain_rule_re.P)")))
 (|e2v_re_diff_p_TCC2| 0
  (|e2v_re_diff_p_TCC3-1| |nil| 3852129151
   ("" (SKEEP) (("" (ASSERT) NIL NIL)) NIL)
   ((|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|null_MapExprInj| NAME-JUDGEMENT "MapExprInj" |hp_def| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic|
     |mv_analysis|))
   NIL
   (|e2v_re_diff_p| SUBTYPE
    "(: chain_rule_re.R(ODEs_equiv.env_sol(chain_rule_re.D, chain_rule_re.envi, chain_rule_re.ode)(chain_rule_re.tt)) :)"
    "VectorN(1)")))
 (|e2v_re_diff_p| 0
  (|e2v_re_diff_p-1| |nil| 3852129216
   ("" (SKEEP)
    (("" (LEMMA "e2v_diff_p")
      (("" (INST?)
        (("" (INST -1 "p")
          (("" (LEMMA "chain_rule_multi[1,max_var(ode)+1,1]")
            ((""
              (INST -1 "projv(max_var(ode),P)" "lift_rd(D)"
               "LAMBDA(v:VectorN(max_var(ode)+1)): (: vec_re(max_var(ode), envi, R)(v) :)"
               "liftl(max_var(ode)+1,D,
           (LAMBDA(tt:(D)):env_2_vec(max_var(ode),env_sol(D,envi,ode)(tt))))"
               "p")
              (("1"
                (CASE
                    "NOT comp_dom[1,max_var(ode)+1,1](projv(max_var(ode), P), lift_rd(D),
                                                liftl(max_var(ode) + 1, D,
                                                      (LAMBDA (tt: (D)):
                                                         env_2_vec(max_var(ode),
                                                                   env_sol(D, envi, ode)(tt))))) = lift_rd(D)")
                (("1" (EXPAND "comp_dom" 1)
                  (("1" (HIDE -)
                    (("1" (DECOMPOSE-EQUALITY 1)
                      (("1" (IFF 1)
                        (("1" (SPLIT 1)
                          (("1" (FLATTEN) NIL NIL)
                           ("2" (FLATTEN)
                            (("2" (ASSERT)
                              (("2" (HIDE 2)
                                (("2" (EXPAND "projv" 1)
                                  (("2" (EXPAND "liftl" 1)
                                    (("2" (REVEAL -)
                                      (("2" (HIDE -8 -7 -6 -5 -3 -2 -1)
                                        (("2" (EXPAND "lift_rd" -2)
                                          (("2" (ASSERT)
                                            (("2" (INST -1 "car(x!1)")
                                              (("2" (ASSERT)
                                                (("2"
                                                  (INST 1
                                                   "env_sol(D, envi, ode)(car(x!1))")
                                                  NIL NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (SPLIT -2)
                  (("1" (LEMMA "same_on_D_same_diff")
                    (("1"
                      (INST -1 "1" "lift_rd(D)" "p"
                       "comp(LAMBDA (v: VectorN(max_var(ode) + 1)):
                          (: vec_re(max_var(ode), envi, R)(v) :),
                        liftl(max_var(ode) + 1, D,
                              (LAMBDA (tt: (D)):
                                 env_2_vec(max_var(ode),
                                           env_sol(D, envi, ode)(tt)))))"
                       " liftl(1, D,
                         LAMBDA (tt: (D)): (: R(env_sol(D, envi, ode)(tt)) :))")
                      (("1" (ASSERT)
                        (("1" (HIDE 2)
                          (("1" (SKEEP)
                            (("1" (EXPAND "comp" 1)
                              (("1" (EXPAND "liftl" 1)
                                (("1" (ASSERT)
                                  (("1" (TYPEPRED "x")
                                    (("1" (EXPAND "lift_rd" -3)
                                      (("1" (ASSERT)
                                        (("1" (DECOMPOSE-EQUALITY 1)
                                          (("1" (LEMMA "eq_re_comp")
                                            (("1"
                                              (INST -1 "D" "envi" "ode" "R")
                                              (("1" (DECOMPOSE-EQUALITY -1)
                                                (("1" (INST -1 "car(x)")
                                                  (("1" (REPLACE -1)
                                                    (("1" (PROPAX) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (LEMMA "re_diff_mv")
                    (("2" (ASSERT)
                      (("2" (HIDE -5)
                        (("2" (HIDE 2)
                          (("2" (HIDE -3)
                            (("2"
                              (INST -1 "max_var(ode)" "P" "R"
                               "env_sol(D, envi, ode)(car(p))")
                              (("1" (ASSERT)
                                (("1" (HIDE -3)
                                  (("1" (LEMMA "same_on_D_same_diff")
                                    (("1"
                                      (INST -1 "max_var(ode)+1"
                                       "projv(max_var(ode), P)"
                                       "(env_2_vec(max_var(ode), env_sol(D, envi, ode)(car(p))))"
                                       "liftr(1 + max_var(ode), projv(max_var(ode), P),
                         vec_re(max_var(ode), envi, R))"
                                       " LAMBDA (v: VectorN(max_var(ode) + 1)):
                     (: vec_re(max_var(ode), envi, R)(v) :)")
                                      (("1" (ASSERT)
                                        (("1" (SPLIT -1)
                                          (("1"
                                            (CASE
                                                " (env_2_vec(max_var(ode), env_sol(D, envi, ode)(car(p)))) = liftl(1 + max_var(ode), D,
                                (LAMBDA (tt: (D)):
                                   env_2_vec(max_var(ode), env_sol(D, envi, ode)(tt))))
                               (p)")
                                            (("1" (ASSERT) NIL NIL)
                                             ("2" (HIDE 2)
                                              (("2" (EXPAND "liftl" 1)
                                                (("2" (TYPEPRED "p")
                                                  (("2" (EXPAND "lift_rd" -3)
                                                    (("2" (ASSERT) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("2" (SKEEP)
                                            (("2" (EXPAND "liftr" 1)
                                              (("2" (PROPAX) NIL NIL)) NIL))
                                            NIL)
                                           ("3" (HIDE -2)
                                            (("3" (HIDE 2)
                                              (("3" (LEMMA "diff_env_change")
                                                (("3"
                                                  (CASE
                                                      "vec_re(max_var(ode), env_sol(D, envi, ode)(car(p)),R)=   vec_re(max_var(ode), envi, R)")
                                                  (("1" (ASSERT) NIL NIL)
                                                   ("2" (DECOMPOSE-EQUALITY 1)
                                                    (("2" (HIDE 2 -2 -1)
                                                      (("2" (EXPAND "vec_re" 1)
                                                        (("2"
                                                          (CASE
                                                              "vec_2_env(max_var(ode), x!1, env_sol(D, envi, ode)(car(p))) = vec_2_env(max_var(ode), x!1, envi)")
                                                          (("1" (ASSERT) NIL
                                                            NIL)
                                                           ("2"
                                                            (DECOMPOSE-EQUALITY
                                                             1)
                                                            (("2" (HIDE 2)
                                                              (("2"
                                                                (EXPAND
                                                                 "vec_2_env" 1)
                                                                (("2" (ASSERT)
                                                                  (("2"
                                                                    (CASE
                                                                        "x!2 < 1 + max_var(ode)")
                                                                    (("1"
                                                                      (ASSERT)
                                                                      NIL NIL)
                                                                     ("2"
                                                                      (ASSERT)
                                                                      (("2"
                                                                        (EXPAND
                                                                         "env_sol"
                                                                         2)
                                                                        (("2"
                                                                          (TYPEPRED
                                                                           "env_at_t(ode, fs_sol(D, envi, ode), envi)(car(p))")
                                                                          (("2"
                                                                            (EXPAND
                                                                             "env_at_t?"
                                                                             -1)
                                                                            (("2"
                                                                              (FLATTEN)
                                                                              (("2"
                                                                                (INST
                                                                                 -1
                                                                                 "x!2")
                                                                                (("1"
                                                                                  (ASSERT)
                                                                                  NIL
                                                                                  NIL)
                                                                                 ("2"
                                                                                  (LEMMA
                                                                                   "nip_max_var")
                                                                                  (("2"
                                                                                    (INST?)
                                                                                    NIL
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (ASSERT) (("2" (INST?) NIL NIL)) NIL)
                               ("3" (ASSERT)
                                (("3" (TYPEPRED "p")
                                  (("3" (EXPAND "lift_rd" -3)
                                    (("3" (PROPAX) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("3" (PROPAX) NIL NIL)
                   ("4" (REPLACE -1)
                    (("4" (ASSERT)
                      (("4" (TYPEPRED "D")
                        (("4" (LEMMA "dd_deriv_domain")
                          (("4" (INST -1 "D")
                            (("4" (HIDE -3 -4 -5 -6)
                              (("4" (LEMMA "dd_norm_equiv[1]")
                                (("4" (ASSERT)
                                  (("4" (INST -1 "lift_rd(D)")
                                    (("4" (ASSERT)
                                      (("4" (INST 1 "norm_inf(1)")
                                        (("4" (HIDE 2)
                                          (("4" (EXPAND "deriv_domain?")
                                            (("4" (SKEEP)
                                              (("4" (INST -1 "e!1" "car(p!1)")
                                                (("1" (SKEEP)
                                                  (("1" (INST 1 "(: y :)")
                                                    (("1" (GRIND) NIL NIL)
                                                     ("2" (TYPEPRED "y")
                                                      (("2" (SPLIT 1)
                                                        (("1"
                                                          (DECOMPOSE-EQUALITY
                                                           1)
                                                          (("1"
                                                            (EXPAND "zero_vec"
                                                                    -2)
                                                            (("1" (PROPAX) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL)
                                                         ("2" (TYPEPRED "p!1")
                                                          (("2"
                                                            (EXPAND "lift_rd"
                                                                    -3)
                                                            (("2"
                                                              (EXPAND "lift_rd"
                                                                      1)
                                                              (("2"
                                                                (EXPAND "+" 1)
                                                                (("2"
                                                                  (EXPAND "add"
                                                                          1)
                                                                  (("2"
                                                                    (ASSERT)
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (TYPEPRED "p!1")
                                                  (("2" (EXPAND "lift_rd" -3)
                                                    (("2" (PROPAX) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("3" (HIDE -)
                  (("3" (TYPEPRED "P")
                    (("3" (HIDE 2)
                      (("3" (LEMMA "projv_dd")
                        (("3" (INST?) (("3" (ASSERT) NIL NIL)) NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (ASSERT)
                (("2" (HIDE 2)
                  (("2" (EXPAND "projv" 1)
                    (("2" (EXPAND "liftl")
                      (("2" (TYPEPRED "p")
                        (("2" (EXPAND "lift_rd" -3)
                          (("2" (ASSERT) (("2" (INST? 1) NIL NIL)) NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("3" (ASSERT)
                (("3" (ASSERT)
                  (("3" (HIDE -)
                    (("3" (TYPEPRED "P")
                      (("3" (HIDE 2)
                        (("3" (LEMMA "projv_dd")
                          (("3" (INST?) (("3" (ASSERT) NIL NIL)) NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|e2v_diff_p| FORMULA-DECL NIL |chain_rule_re| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|real_dom| TYPE-EQ-DECL NIL |lift_real_fun_def| |mv_analysis|)
    (|domain| TYPE-EQ-DECL NIL |domain_vec2real_def| |mv_analysis|)
    (|lift_rd| CONST-DECL "domain[1]" |lift_real_fun_def| |mv_analysis|)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (P SKOLEM-CONST-DECL "(ddl_dom?)" |chain_rule_re| NIL)
    (|ddl_dom?| CONST-DECL "bool" |differentiation| NIL)
    (|projv| CONST-DECL "bool" |chain_rule_re| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|deriv_domain?| CONST-DECL "bool" |derivative_domain_multi| |mv_analysis|)
    (|ode| SKOLEM-CONST-DECL "(ODEs_s?(D, envi))" |chain_rule_re| NIL)
    (|envi| SKOLEM-CONST-DECL "Environment" |chain_rule_re| NIL)
    (D SKOLEM-CONST-DECL "(dd?)" |chain_rule_re| NIL)
    (|p| SKOLEM-CONST-DECL "(lift_rd(D))" |chain_rule_re| NIL)
    (|env_sol| CONST-DECL "Environment" |ODEs_equiv| NIL)
    (|env_2_vec| DEF-DECL "VectorN(k + 1)" |chain_rule_re| NIL)
    (|liftl| CONST-DECL "vec2vec[1](k)" |lift_real_fun_def| |mv_analysis|)
    (|vec2vec| TYPE-EQ-DECL NIL |domain_vec2real_def| |mv_analysis|)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|vec_re| CONST-DECL "real" |chain_rule_re| NIL)
    (|projv_dd| FORMULA-DECL NIL |chain_rule_re| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|comp| CONST-DECL "vec2vec[n](m2)" |chain_rule_multi| |mv_analysis|)
    (|list_cons_extensionality| FORMULA-DECL NIL |list_adt| NIL)
    (|eq_re_comp| FORMULA-DECL NIL |chain_rule_re| NIL)
    (|same_on_D_same_diff| FORMULA-DECL NIL |lift_real_fun_def| |mv_analysis|)
    (|liftr| CONST-DECL "vec2vec[k](1)" |lift_real_fun_def| |mv_analysis|)
    (|vec_2_env| CONST-DECL "Environment" |chain_rule_re| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|env_at_t| CONST-DECL "{env: (env_at_t?(odes, fs, envi, t)) |
   FORALL (env2: (env_at_t?(odes, fs, envi, t))): env = env2}"
     |hp_expr| NIL)
    (|fs_sol| CONST-DECL "(solution_odes_u?(D, odes, envi))" |ODEs_equiv| NIL)
    (|solution_odes_u?| CONST-DECL "bool" |hp_expr| NIL)
    (|env_at_t?| CONST-DECL "bool" |hp_expr| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|nip_max_var| FORMULA-DECL NIL |hp_def| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|MapExprInj| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|not_in_map| CONST-DECL "bool" |hp_def| NIL)
    (|x!2| SKOLEM-CONST-DECL "nat" |chain_rule_re| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|diff_env_change| FORMULA-DECL NIL |chain_rule_re| NIL)
    (|re_diff_mv| FORMULA-DECL NIL |chain_rule_re| NIL)
    (|dd_deriv_domain| FORMULA-DECL NIL |hp_expr| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (|abs| DEF-DECL "{l: list | length(l) = length(ll)}" |norms| |mv_analysis|)
    (|max| DEF-DECL "real" |norms| |mv_analysis|)
    (|norm_inf| CONST-DECL "[(cons?) -> nonneg_real]" |norms| |mv_analysis|)
    (|scal| DEF-DECL "VectorN(length(v2))" |matrices| |matrices|)
    (|add| DEF-DECL "VectorN(max(length(v1), length(v2)))" |matrices|
     |matrices|)
    (|sub| CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices|
     |matrices|)
    (- CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices| |matrices|)
    (|rows| CONST-DECL "nat" |matrices| |matrices|)
    (* CONST-DECL "real" |matrices| |matrices|)
    (|matvec| DEF-DECL "VectorN(m)" |mat_vec_mult| |mv_analysis|)
    (* CONST-DECL "VectorN(rows(A))" |mat_vec_mult| |mv_analysis|)
    (NQ CONST-DECL "real" |convergence_vec2vec| |mv_analysis|)
    (|convergence_zero?| CONST-DECL "bool" |vector_sequences| |mv_analysis|)
    (|differentiable?| CONST-DECL "bool" |convergence_vec2vec| |mv_analysis|)
    (|nonzero_abs_is_pos| APPLICATION-JUDGEMENT "{y: posreal | y >= x}"
     |real_defs| NIL)
    (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|y| SKOLEM-CONST-DECL "{u: nzreal | D(u + car(p!1))}" |chain_rule_re| NIL)
    (|zero_vec| DEF-DECL "VectorN(m)" |vector_arithmetic| |mv_analysis|)
    (|Vector| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (+ CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices| |matrices|)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|p!1| SKOLEM-CONST-DECL "(lift_rd(D))" |chain_rule_re| NIL)
    (|deriv_domain?| CONST-DECL "bool" |derivative_domain_multi| |mv_analysis|)
    (|deriv_domain?| CONST-DECL "bool" |deriv_domain_def| |analysis|)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|norm_inf| CONST-DECL "(norm?(m))" |norms| |mv_analysis|)
    (|norm?| CONST-DECL "bool" |norms| |mv_analysis|)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|dd_norm_equiv| FORMULA-DECL NIL |derivative_domain_multi| |mv_analysis|)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|comp_dom| CONST-DECL "[VectorN(n) -> bool]" |chain_rule_multi|
     |mv_analysis|)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|chain_rule_multi| FORMULA-DECL NIL |chain_rule_multi| |mv_analysis|)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|max_var| CONST-DECL "nat" |hp_def| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|ODEs_s?| CONST-DECL "bool" |ODEs_equiv| NIL)
    (|ODEs| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|mapexpr_inj| CONST-DECL "bool" |hp_def| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|MapExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|dLVar| TYPE-DECL NIL |hp_def| NIL)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|dd?| CONST-DECL "bool" |hp_expr| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|odd_minus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|minus_i16_u16| APPLICATION-JUDGEMENT "int32" |integertypes| NIL)
    (|minus_i32_u32| APPLICATION-JUDGEMENT "int64" |integertypes| NIL)
    (|minus_u8_u8| APPLICATION-JUDGEMENT "int16" |integertypes| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|null_MapExprInj| NAME-JUDGEMENT "MapExprInj" |hp_def| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic|
     |mv_analysis|))
   SHOSTAK))
 (|e2v_re_der_p_TCC1| 0
  (|e2v_re_der_p_TCC1-1| |nil| 3853863442
   ("" (SKEEP)
    (("" (LEMMA "e2v_re_diff_p") (("" (INST?) (("" (ASSERT) NIL NIL)) NIL))
      NIL))
    NIL)
   ((|e2v_re_diff_p| FORMULA-DECL NIL |chain_rule_re| NIL)
    (|ODEs_s?| CONST-DECL "bool" |ODEs_equiv| NIL)
    (|ODEs| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|mapexpr_inj| CONST-DECL "bool" |hp_def| NIL)
    (|MapExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|dLVar| TYPE-DECL NIL |hp_def| NIL)
    (|lift_rd| CONST-DECL "domain[1]" |lift_real_fun_def| |mv_analysis|)
    (|domain| TYPE-EQ-DECL NIL |domain_vec2real_def| |mv_analysis|)
    (|real_dom| TYPE-EQ-DECL NIL |lift_real_fun_def| |mv_analysis|)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|ddl_dom?| CONST-DECL "bool" |differentiation| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|dd?| CONST-DECL "bool" |hp_expr| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|null_MapExprInj| NAME-JUDGEMENT "MapExprInj" |hp_def| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic|
     |mv_analysis|))
   NIL
   (|e2v_re_der_p| SUBTYPE
    "lift_real_fun_def.liftl(1, chain_rule_re.D, (LAMBDA (tt: (chain_rule_re.D)): (: chain_rule_re.R(ODEs_equiv.env_sol(chain_rule_re.D, chain_rule_re.envi, chain_rule_re.ode)(tt)) :)))"
    "{ff: domain_vec2real_def[1].vec2vec(1) | convergence_vec2vec[1].differentiable?(1, lift_real_fun_def.lift_rd(chain_rule_re.D), ff, chain_rule_re.p)}")))
 (|e2v_re_der_p_TCC2| 0
  (|e2v_re_der_p_TCC2-1| |nil| 3853923565
   ("" (SKEEP) (("" (ASSERT) NIL NIL)) NIL)
   ((|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|null_MapExprInj| NAME-JUDGEMENT "MapExprInj" |hp_def| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic|
     |mv_analysis|))
   NIL
   (|e2v_re_der_p| SUBTYPE
    "(: chain_rule_re.vec_re(hp_def.max_var(chain_rule_re.ode), chain_rule_re.envi, chain_rule_re.R)(chain_rule_re.v) :)"
    "VectorN(1)")))
 (|e2v_re_der_p_TCC3| 0
  (|e2v_re_der_p_TCC3-1| |nil| 3853881805
   ("" (SKEEP)
    (("" (LEMMA "re_diff_mv_ll")
      (("" (INST?) (("" (ASSERT) (("" (INST?) NIL NIL)) NIL)) NIL)) NIL))
    NIL)
   ((|re_diff_mv_ll| FORMULA-DECL NIL |chain_rule_re| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|ODEs_s?| CONST-DECL "bool" |ODEs_equiv| NIL)
    (|ODEs| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|mapexpr_inj| CONST-DECL "bool" |hp_def| NIL)
    (|MapExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|dLVar| TYPE-DECL NIL |hp_def| NIL)
    (|lift_rd| CONST-DECL "domain[1]" |lift_real_fun_def| |mv_analysis|)
    (|domain| TYPE-EQ-DECL NIL |domain_vec2real_def| |mv_analysis|)
    (|real_dom| TYPE-EQ-DECL NIL |lift_real_fun_def| |mv_analysis|)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|ddl_dom?| CONST-DECL "bool" |differentiation| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|dd?| CONST-DECL "bool" |hp_expr| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|null_MapExprInj| NAME-JUDGEMENT "MapExprInj" |hp_def| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic|
     |mv_analysis|))
   NIL
   (|e2v_re_der_p| SUBTYPE
    "LAMBDA (v: matrices.VectorN((number_fields.+)(hp_def.max_var(chain_rule_re.ode), 1))): (: chain_rule_re.vec_re(hp_def.max_var(chain_rule_re.ode), chain_rule_re.envi, chain_rule_re.R)(v) :)"
    "{ff: domain_vec2real_def[(number_fields.+)(hp_def.max_var(chain_rule_re.ode), 1)].vec2vec(1) | convergence_vec2vec[(number_fields.+)(1, hp_def.max_var(chain_rule_re.ode))].differentiable?(1, chain_rule_re.projv(hp_def.max_var(chain_rule_re.ode), chain_rule_re.P), ff, lift_real_fun_def.liftl((number_fields.+)(1, hp_def.max_var(chain_rule_re.ode)), chain_rule_re.D, (LAMBDA (tt: (chain_rule_re.D)): chain_rule_re.env_2_vec(hp_def.max_var(chain_rule_re.ode), ODEs_equiv.env_sol(chain_rule_re.D, chain_rule_re.envi, chain_rule_re.ode)(tt))))(chain_rule_re.p))}")))
 (|e2v_re_der_p_TCC4| 0
  (|e2v_re_der_p_TCC4-1| |nil| 3853881805
   ("" (SKEEP) (("" (LEMMA "projv_dd") (("" (INST?) NIL NIL)) NIL)) NIL)
   ((|projv_dd| FORMULA-DECL NIL |chain_rule_re| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|dLVar| TYPE-DECL NIL |hp_def| NIL)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|MapExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|max_var| CONST-DECL "nat" |hp_def| NIL)
    (|mapexpr_inj| CONST-DECL "bool" |hp_def| NIL)
    (|ODEs| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|dd?| CONST-DECL "bool" |hp_expr| NIL)
    (|ODEs_s?| CONST-DECL "bool" |ODEs_equiv| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|ddl_dom?| CONST-DECL "bool" |differentiation| NIL)
    (|null_MapExprInj| NAME-JUDGEMENT "MapExprInj" |hp_def| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic|
     |mv_analysis|))
   NIL
   (|e2v_re_der_p| SUBTYPE
    "chain_rule_re.projv(hp_def.max_var(chain_rule_re.ode), chain_rule_re.P)"
    "(derivative_domain_multi[(number_fields.+)(hp_def.max_var(chain_rule_re.ode), 1)].deriv_domain?)")))
 (|e2v_re_der_p_TCC5| 0
  (|e2v_re_der_p_TCC5-1| |nil| 3853881805
   ("" (SKEEP)
    (("" (EXPAND "projv" 1)
      (("" (EXPAND "liftl" 1)
        (("" (TYPEPRED "p")
          (("" (EXPAND "lift_rd" -3)
            (("" (ASSERT) (("" (INST 1 "env_sol(D,envi,ode)(car(p))") NIL NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|projv| CONST-DECL "bool" |chain_rule_re| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|real_dom| TYPE-EQ-DECL NIL |lift_real_fun_def| |mv_analysis|)
    (|domain| TYPE-EQ-DECL NIL |domain_vec2real_def| |mv_analysis|)
    (|lift_rd| CONST-DECL "domain[1]" |lift_real_fun_def| |mv_analysis|)
    (|dd?| CONST-DECL "bool" |hp_expr| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|env_sol| CONST-DECL "Environment" |ODEs_equiv| NIL)
    (|ODEs_s?| CONST-DECL "bool" |ODEs_equiv| NIL)
    (|ODEs| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|mapexpr_inj| CONST-DECL "bool" |hp_def| NIL)
    (|MapExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|dLVar| TYPE-DECL NIL |hp_def| NIL)
    (|ddl_dom?| CONST-DECL "bool" |differentiation| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|liftl| CONST-DECL "vec2vec[1](k)" |lift_real_fun_def| |mv_analysis|)
    (|null_MapExprInj| NAME-JUDGEMENT "MapExprInj" |hp_def| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic|
     |mv_analysis|))
   NIL
   (|e2v_re_der_p| SUBTYPE
    "lift_real_fun_def.liftl((number_fields.+)(hp_def.max_var(chain_rule_re.ode), 1), chain_rule_re.D, (LAMBDA (tt: (chain_rule_re.D)): chain_rule_re.env_2_vec(hp_def.max_var(chain_rule_re.ode), ODEs_equiv.env_sol(chain_rule_re.D, chain_rule_re.envi, chain_rule_re.ode)(tt))))(chain_rule_re.p)"
    "(chain_rule_re.projv(hp_def.max_var(chain_rule_re.ode), chain_rule_re.P))")))
 (|e2v_re_der_p_TCC6| 0
  (|e2v_re_der_p_TCC6-1| |nil| 3853881805
   ("" (SKEEP)
    (("" (LEMMA "e2v_diff_p") (("" (INST?) (("" (ASSERT) NIL NIL)) NIL)) NIL))
    NIL)
   ((|e2v_diff_p| FORMULA-DECL NIL |chain_rule_re| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|ODEs_s?| CONST-DECL "bool" |ODEs_equiv| NIL)
    (|ODEs| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|mapexpr_inj| CONST-DECL "bool" |hp_def| NIL)
    (|MapExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|dLVar| TYPE-DECL NIL |hp_def| NIL)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|lift_rd| CONST-DECL "domain[1]" |lift_real_fun_def| |mv_analysis|)
    (|domain| TYPE-EQ-DECL NIL |domain_vec2real_def| |mv_analysis|)
    (|real_dom| TYPE-EQ-DECL NIL |lift_real_fun_def| |mv_analysis|)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|dd?| CONST-DECL "bool" |hp_expr| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|null_MapExprInj| NAME-JUDGEMENT "MapExprInj" |hp_def| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic|
     |mv_analysis|))
   NIL
   (|e2v_re_der_p| SUBTYPE
    "lift_real_fun_def.liftl((number_fields.+)(hp_def.max_var(chain_rule_re.ode), 1), chain_rule_re.D, (LAMBDA (tt: (chain_rule_re.D)): chain_rule_re.env_2_vec(hp_def.max_var(chain_rule_re.ode), ODEs_equiv.env_sol(chain_rule_re.D, chain_rule_re.envi, chain_rule_re.ode)(tt))))"
    "{ff: domain_vec2real_def[1].vec2vec((number_fields.+)(1, hp_def.max_var(chain_rule_re.ode))) | convergence_vec2vec[1].differentiable?((number_fields.+)(1, hp_def.max_var(chain_rule_re.ode)), lift_real_fun_def.lift_rd(chain_rule_re.D), ff, chain_rule_re.p)}")))
 (|e2v_re_der_p| 0
  (|e2v_re_der_p-1| |nil| 3853865557
   ("" (SKEEP)
    (("" (LEMMA "e2v_diff_p")
      (("" (INST?)
        (("" (INST -1 "p")
          (("" (LEMMA "chain_rule_multi_der_is[1,max_var(ode)+1,1]")
            ((""
              (INST -1 "projv(max_var(ode),P)" "lift_rd(D)"
               "LAMBDA(v:VectorN(max_var(ode)+1)): (: vec_re(max_var(ode), envi, R)(v) :)"
               "liftl(max_var(ode)+1,D,
               (LAMBDA(tt:(D)):env_2_vec(max_var(ode),env_sol(D,envi,ode)(tt))))"
               "p")
              (("1"
                (CASE
                    "NOT comp_dom[1,max_var(ode)+1,1](projv(max_var(ode), P), lift_rd(D),
                                                                  liftl(max_var(ode) + 1, D,
                                                                        (LAMBDA (tt: (D)):
                                                                           env_2_vec(max_var(ode),
                                                                                     env_sol(D, envi, ode)(tt))))) = lift_rd(D)")
                (("1" (EXPAND "comp_dom" 1)
                  (("1" (HIDE -)
                    (("1" (DECOMPOSE-EQUALITY 1)
                      (("1" (IFF 1)
                        (("1" (SPLIT 1)
                          (("1" (FLATTEN) NIL NIL)
                           ("2" (FLATTEN)
                            (("2" (ASSERT)
                              (("2" (HIDE 2)
                                (("2" (EXPAND "projv" 1)
                                  (("2" (EXPAND "liftl" 1)
                                    (("2" (REVEAL -)
                                      (("2" (HIDE -8 -7 -6 -5 -3 -2 -1)
                                        (("2" (EXPAND "lift_rd" -2)
                                          (("2" (ASSERT)
                                            (("2" (INST -1 "car(x!1)")
                                              (("2" (ASSERT)
                                                (("2"
                                                  (INST 1
                                                   "env_sol(D, envi, ode)(car(x!1))")
                                                  NIL NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (SPLIT -2)
                  (("1" (LEMMA "same_on_D_same_der")
                    (("1"
                      (INST -1 "1" "lift_rd(D)" "p"
                       "comp(LAMBDA (v: VectorN(max_var(ode) + 1)):
                                          (: vec_re(max_var(ode), envi, R)(v) :),
                                        liftl(max_var(ode) + 1, D,
                                              (LAMBDA (tt: (D)):
                                                 env_2_vec(max_var(ode),
                                                           env_sol(D, envi, ode)(tt)))))"
                       " liftl(1, D,
                                         LAMBDA (tt: (D)): (: R(env_sol(D, envi, ode)(tt)) :))")
                      (("1" (ASSERT)
                        (("1" (SPLIT -1)
                          (("1" (ASSERT)
                            (("1" (REPLACE -1 1 RL)
                              (("1" (REPLACE -2 1 RL)
                                (("1" (REPLACE -3 1 LR)
                                  (("1" (ASSERT)
                                    (("1" (REPLACE -1) (("1" (PROPAX) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (HIDE 2)
                            (("2" (SKEEP)
                              (("2" (EXPAND "comp" 1)
                                (("2" (EXPAND "liftl" 1)
                                  (("2" (ASSERT)
                                    (("2" (TYPEPRED "x")
                                      (("2" (EXPAND "lift_rd" -3)
                                        (("2" (ASSERT)
                                          (("2" (DECOMPOSE-EQUALITY 1)
                                            (("2" (LEMMA "eq_re_comp")
                                              (("2"
                                                (INST -1 "D" "envi" "ode" "R")
                                                (("2" (DECOMPOSE-EQUALITY -1)
                                                  (("2" (INST -1 "car(x)")
                                                    (("2" (REPLACE -1)
                                                      (("2" (PROPAX) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("3" (HIDE 2)
                            (("3" (HIDE -1)
                              (("3" (ASSERT)
                                (("3" (LEMMA "e2v_re_diff_p")
                                  (("3" (INST?)
                                    (("3" (ASSERT)
                                      (("3" (SPLIT -1)
                                        (("1" (ASSERT)
                                          (("1" (LEMMA "same_on_D_same_diff")
                                            (("1"
                                              (INST -1 "1" "lift_rd(D)" "p"
                                               "liftl(1, D,
                 LAMBDA (tt: (D)): (: R(env_sol(D, envi, ode)(tt)) :))"
                                               " comp(LAMBDA (v: VectorN(max_var(ode) + 1)):
                  (: vec_re(max_var(ode), envi, R)(v) :),
                liftl(1 + max_var(ode), D,
                      (LAMBDA (tt: (D)):
                         env_2_vec(max_var(ode),
                                   env_sol(D, envi, ode)(tt)))))")
                                              (("1" (ASSERT)
                                                (("1" (HIDE 2)
                                                  (("1" (SKEEP)
                                                    (("1" (EXPAND "comp" 1)
                                                      (("1" (EXPAND "liftl" 1)
                                                        (("1" (TYPEPRED "x")
                                                          (("1"
                                                            (EXPAND "lift_rd"
                                                                    -3)
                                                            (("1" (ASSERT)
                                                              (("1"
                                                                (LEMMA
                                                                 "eq_re_comp")
                                                                (("1" (INST?)
                                                                  (("1"
                                                                    (DECOMPOSE-EQUALITY
                                                                     -1)
                                                                    (("1"
                                                                      (INST?)
                                                                      (("1"
                                                                        (ASSERT)
                                                                        NIL
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (PROPAX) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (HIDE 2)
                        (("2" (TYPEPRED "D")
                          (("2" (LEMMA "dd_e_partial") (("2" (INST?) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (ASSERT)
                    (("2" (HIDE 2)
                      (("2" (LEMMA "re_diff_mv_ll")
                        (("2" (INST?)
                          (("2" (ASSERT)
                            (("2" (INST -4 "car[real](p)")
                              (("2" (ASSERT)
                                (("2" (HIDE -2 -3 -4 -5)
                                  (("2"
                                    (NAME "tt"
                                          " LAMBDA (v: VectorN(1 + max_var(ode))):
             (: vec_re(max_var(ode), envi, R)(v) :)")
                                    (("2" (REPLACE -1)
                                      (("2" (ASSERT)
                                        (("2"
                                          (NAME "lft"
                                                " liftl(1 + max_var(ode), D,
                 LAMBDA (tt: (D)):
                   env_2_vec(max_var(ode), env_sol(D, envi, ode)(tt)))")
                                          (("2" (REPLACE -1)
                                            (("2" (ASSERT)
                                              (("2" (EXPAND "differentiable?")
                                                (("2" (ASSERT)
                                                  (("2" (SKEEP)
                                                    (("2" (INST 1 "T")
                                                      (("2"
                                                        (EXPAND
                                                         "convergence_zero?")
                                                        (("2" (SKEEP)
                                                          (("2"
                                                            (INST -3 "epsilon")
                                                            (("2" (SKEEP)
                                                              (("2"
                                                                (INST 1
                                                                 "delta")
                                                                (("2" (SKEEP)
                                                                  (("2"
                                                                    (INST -3
                                                                     "x")
                                                                    (("1"
                                                                      (ASSERT)
                                                                      (("1"
                                                                        (EXPAND
                                                                         "NQ")
                                                                        (("1"
                                                                          (PROPAX)
                                                                          NIL
                                                                          NIL))
                                                                        NIL))
                                                                      NIL)
                                                                     ("2"
                                                                      (TYPEPRED
                                                                       "x")
                                                                      (("2"
                                                                        (ASSERT)
                                                                        (("2"
                                                                          (EXPAND
                                                                           "NQ")
                                                                          (("2"
                                                                            (PROPAX)
                                                                            NIL
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("3" (PROPAX) NIL NIL)
                   ("4" (HIDE 2)
                    (("4" (REPLACE -1)
                      (("4" (LEMMA "dd_e_partial") (("4" (INST?) NIL NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("3" (HIDE 2)
                  (("3" (LEMMA "projv_dd")
                    (("3" (INST?) (("3" (ASSERT) NIL NIL)) NIL)) NIL))
                  NIL))
                NIL)
               ("2" (HIDE 2)
                (("2" (EXPAND "projv" 1)
                  (("2" (EXPAND "liftl" 1)
                    (("2" (TYPEPRED "p")
                      (("2" (EXPAND "lift_rd" -3)
                        (("2" (ASSERT) (("2" (INST?) NIL NIL)) NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("3" (HIDE 2)
                (("3" (LEMMA "projv_dd")
                  (("3" (INST?) (("3" (ASSERT) NIL NIL)) NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|e2v_diff_p| FORMULA-DECL NIL |chain_rule_re| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|real_dom| TYPE-EQ-DECL NIL |lift_real_fun_def| |mv_analysis|)
    (|domain| TYPE-EQ-DECL NIL |domain_vec2real_def| |mv_analysis|)
    (|lift_rd| CONST-DECL "domain[1]" |lift_real_fun_def| |mv_analysis|)
    (P SKOLEM-CONST-DECL "(ddl_dom?)" |chain_rule_re| NIL)
    (|ddl_dom?| CONST-DECL "bool" |differentiation| NIL)
    (|projv| CONST-DECL "bool" |chain_rule_re| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|deriv_domain?| CONST-DECL "bool" |derivative_domain_multi| |mv_analysis|)
    (|ode| SKOLEM-CONST-DECL "(ODEs_s?(D, envi))" |chain_rule_re| NIL)
    (|envi| SKOLEM-CONST-DECL "Environment" |chain_rule_re| NIL)
    (D SKOLEM-CONST-DECL "(dd?)" |chain_rule_re| NIL)
    (|p| SKOLEM-CONST-DECL "(lift_rd(D))" |chain_rule_re| NIL)
    (|env_sol| CONST-DECL "Environment" |ODEs_equiv| NIL)
    (|env_2_vec| DEF-DECL "VectorN(k + 1)" |chain_rule_re| NIL)
    (|liftl| CONST-DECL "vec2vec[1](k)" |lift_real_fun_def| |mv_analysis|)
    (|vec2vec| TYPE-EQ-DECL NIL |domain_vec2real_def| |mv_analysis|)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|vec_re| CONST-DECL "real" |chain_rule_re| NIL)
    (|projv_dd| FORMULA-DECL NIL |chain_rule_re| NIL)
    (|deriv_domain_e_partial?| CONST-DECL "bool" |derivative_domain_multi|
     |mv_analysis|)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|comp| CONST-DECL "vec2vec[n](m2)" |chain_rule_multi| |mv_analysis|)
    (|eq_re_comp| FORMULA-DECL NIL |chain_rule_re| NIL)
    (|list_cons_extensionality| FORMULA-DECL NIL |list_adt| NIL)
    (|e2v_re_diff_p| FORMULA-DECL NIL |chain_rule_re| NIL)
    (|same_on_D_same_diff| FORMULA-DECL NIL |lift_real_fun_def| |mv_analysis|)
    (|dd_e_partial| FORMULA-DECL NIL |chain_rule_re| NIL)
    (|same_on_D_same_der| FORMULA-DECL NIL |lift_real_fun_def| |mv_analysis|)
    (|Matrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|MatrixMN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (NQ CONST-DECL "real" |convergence_vec2vec| |mv_analysis|)
    (NQ CONST-DECL "bool" |differentiable_def| |mv_analysis|)
    (|lft| SKOLEM-CONST-DECL "vec2vec[1](1 + max_var(ode))" |chain_rule_re|
     NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|zero_vec| DEF-DECL "VectorN(m)" |vector_arithmetic| |mv_analysis|)
    (|x| SKOLEM-CONST-DECL
     "{xx: (NQ[max_var(ode) + 1](projv(max_var(ode), P), lft(p))) |
   xx /= zero_vec(1 + max_var(ode))}"
     |chain_rule_re| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|convergence_zero?| CONST-DECL "bool" |vector_sequences| |mv_analysis|)
    (|differentiable?| CONST-DECL "bool" |convergence_vec2vec| |mv_analysis|)
    (|re_diff_mv_ll| FORMULA-DECL NIL |chain_rule_re| NIL)
    (|mult_full| APPLICATION-JUDGEMENT "FullMatrix" |matrices| |matrices|)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|comp_dom| CONST-DECL "[VectorN(n) -> bool]" |chain_rule_multi|
     |mv_analysis|)
    (|chain_rule_multi_der_is| FORMULA-DECL NIL |chain_rule_multi|
     |mv_analysis|)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|max_var| CONST-DECL "nat" |hp_def| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|ODEs_s?| CONST-DECL "bool" |ODEs_equiv| NIL)
    (|ODEs| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|mapexpr_inj| CONST-DECL "bool" |hp_def| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|MapExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|dLVar| TYPE-DECL NIL |hp_def| NIL)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|dd?| CONST-DECL "bool" |hp_expr| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|odd_minus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|minus_i16_u16| APPLICATION-JUDGEMENT "int32" |integertypes| NIL)
    (|minus_i32_u32| APPLICATION-JUDGEMENT "int64" |integertypes| NIL)
    (|minus_u8_u8| APPLICATION-JUDGEMENT "int16" |integertypes| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|null_MapExprInj| NAME-JUDGEMENT "MapExprInj" |hp_def| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic|
     |mv_analysis|))
   SHOSTAK))
 (|re_diff_chain_TCC1| 0
  (|re_diff_chain_TCC1-1| |nil| 3852144486
   ("" (SKEEP)
    (("" (LEMMA "env_sol_env2vec")
      (("" (INST?)
        (("" (INST -1 "P" "(: t:)")
          (("1" (ASSERT) (("1" (INST -2 "t") (("1" (ASSERT) NIL NIL)) NIL))
            NIL)
           ("2" (EXPAND "lift_rd" 1) (("2" (PROPAX) NIL NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|env_sol_env2vec| FORMULA-DECL NIL |chain_rule_re| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic|
     |mv_analysis|)
    (|t| SKOLEM-CONST-DECL "(D)" |chain_rule_re| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (D SKOLEM-CONST-DECL "(dd?)" |chain_rule_re| NIL)
    (|lift_rd| CONST-DECL "domain[1]" |lift_real_fun_def| |mv_analysis|)
    (|domain| TYPE-EQ-DECL NIL |domain_vec2real_def| |mv_analysis|)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|real_dom| TYPE-EQ-DECL NIL |lift_real_fun_def| |mv_analysis|)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|ddl_dom?| CONST-DECL "bool" |differentiation| NIL)
    (|ODEs_s?| CONST-DECL "bool" |ODEs_equiv| NIL)
    (|ODEs| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|mapexpr_inj| CONST-DECL "bool" |hp_def| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|MapExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|dLVar| TYPE-DECL NIL |hp_def| NIL)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|dd?| CONST-DECL "bool" |hp_expr| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|null_MapExprInj| NAME-JUDGEMENT "MapExprInj" |hp_def| NIL))
   NIL
   (|re_diff_chain| SUBTYPE
    "ODEs_equiv.env_sol(chain_rule_re.D, chain_rule_re.envi, chain_rule_re.ode)(chain_rule_re.t)"
    "(chain_rule_re.P)")))
 (|re_diff_chain_TCC2| 0
  (|re_diff_chain_TCC2-1| |nil| 3852144486
   ("" (SKEEP)
    (("" (TYPEPRED "D")
      (("" (LEMMA "dd_deriv_domain") (("" (INST?) NIL NIL)) NIL)) NIL))
    NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|dd?| CONST-DECL "bool" |hp_expr| NIL)
    (|dd_deriv_domain| FORMULA-DECL NIL |hp_expr| NIL)
    (|null_MapExprInj| NAME-JUDGEMENT "MapExprInj" |hp_def| NIL))
   NIL
   (|re_diff_chain| ASSUMING
    "analysis@derivatives_def[(chain_rule_re.D)].derivatives_def"
    "deriv_domain: ASSUMPTION deriv_domain_def[T].deriv_domain?")))
 (|re_diff_chain_TCC3| 0
  (|re_diff_chain_TCC3-1| |nil| 3852144486
   ("" (SKEEP)
    (("" (TYPEPRED "D") (("" (LEMMA "dd_noe") (("" (INST?) NIL NIL)) NIL))
      NIL))
    NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|dd?| CONST-DECL "bool" |hp_expr| NIL)
    (|dd_noe| FORMULA-DECL NIL |hp_expr| NIL)
    (|null_MapExprInj| NAME-JUDGEMENT "MapExprInj" |hp_def| NIL))
   NIL
   (|re_diff_chain| ASSUMING
    "analysis@derivatives_def[(chain_rule_re.D)].derivatives_def"
    "not_one_element: ASSUMPTION deriv_domain_def[T].not_one_element?")))
 (|re_diff_chain| 0
  (|re_diff_chain-1| |nil| 3852144615
   ("" (SKEEP)
    (("" (LEMMA "e2v_re_diff_p")
      (("" (LEMMA "lift_diff")
        (("" (ASSERT)
          (("" (INST -2 "D" "P" "(: t :)" "envi" "ode" "R")
            (("1" (ASSERT)
              (("1" (SPLIT -2)
                (("1"
                  (INST -2 "D" "t"
                   "(LAMBDA (tt: (D)): R(env_sol(D, envi, ode)(tt)))")
                  (("1" (ASSERT)
                    (("1" (HIDE 2)
                      (("1" (LEMMA "same_on_D_same_diff")
                        (("1"
                          (INST -1 "1" "lift_rd(D)" "(: t :) " "liftl(1, D,
              LAMBDA (tt: (D)): (: R(env_sol(D, envi, ode)(tt)) :))"
                           "lift_re(D, (LAMBDA (tt: (D)): R(env_sol(D, envi, ode)(tt))))")
                          (("1" (ASSERT)
                            (("1" (HIDE 2)
                              (("1" (SKEEP)
                                (("1" (TYPEPRED "x")
                                  (("1" (EXPAND "lift_re")
                                    (("1" (EXPAND "liftl")
                                      (("1" (EXPAND "lift_rd" -3)
                                        (("1" (ASSERT) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (TYPEPRED "D")
                    (("2" (LEMMA "dd_deriv_domain") (("2" (INST?) NIL NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (PROPAX) NIL NIL))
                NIL))
              NIL)
             ("2" (EXPAND "lift_rd" 1) (("2" (PROPAX) NIL NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|e2v_re_diff_p| FORMULA-DECL NIL |chain_rule_re| NIL)
    (|deriv_domain?| CONST-DECL "bool" |deriv_domain_def| |analysis|)
    (|env_sol| CONST-DECL "Environment" |ODEs_equiv| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|deriv_domain?| CONST-DECL "bool" |derivative_domain_multi| |mv_analysis|)
    (|vec2vec| TYPE-EQ-DECL NIL |domain_vec2real_def| |mv_analysis|)
    (|liftl| CONST-DECL "vec2vec[1](k)" |lift_real_fun_def| |mv_analysis|)
    (|lift_re| CONST-DECL "vec2vec[1](1)" |lift_real_fun_def| |mv_analysis|)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|same_on_D_same_diff| FORMULA-DECL NIL |lift_real_fun_def| |mv_analysis|)
    (|dd_deriv_domain| FORMULA-DECL NIL |hp_expr| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic|
     |mv_analysis|)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|real_dom| TYPE-EQ-DECL NIL |lift_real_fun_def| |mv_analysis|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|domain| TYPE-EQ-DECL NIL |domain_vec2real_def| |mv_analysis|)
    (|lift_rd| CONST-DECL "domain[1]" |lift_real_fun_def| |mv_analysis|)
    (|dd?| CONST-DECL "bool" |hp_expr| NIL)
    (D SKOLEM-CONST-DECL "(dd?)" |chain_rule_re| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|t| SKOLEM-CONST-DECL "(D)" |chain_rule_re| NIL)
    (|ODEs_s?| CONST-DECL "bool" |ODEs_equiv| NIL)
    (|ODEs| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|mapexpr_inj| CONST-DECL "bool" |hp_def| NIL)
    (|MapExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|dLVar| TYPE-DECL NIL |hp_def| NIL)
    (|ddl_dom?| CONST-DECL "bool" |differentiation| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|lift_diff| FORMULA-DECL NIL |lift_real_fun_def| |mv_analysis|)
    (|null_MapExprInj| NAME-JUDGEMENT "MapExprInj" |hp_def| NIL))
   SHOSTAK))
 (|init_re_der_chain_TCC1| 0
  (|init_re_der_chain_TCC1-1| |nil| 3853937274
   ("" (SKEEP)
    (("" (LEMMA "re_diff_chain") (("" (INST?) (("" (ASSERT) NIL NIL)) NIL))
      NIL))
    NIL)
   ((|re_diff_chain| FORMULA-DECL NIL |chain_rule_re| NIL)
    (|ddl_dom?| CONST-DECL "bool" |differentiation| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|ODEs_s?| CONST-DECL "bool" |ODEs_equiv| NIL)
    (|ODEs| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|mapexpr_inj| CONST-DECL "bool" |hp_def| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|MapExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|dLVar| TYPE-DECL NIL |hp_def| NIL)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|dd?| CONST-DECL "bool" |hp_expr| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|null_MapExprInj| NAME-JUDGEMENT "MapExprInj" |hp_def| NIL))
   NIL
   (|init_re_der_chain| SUBTYPE "chain_rule_re.t"
    "{x | derivatives_def[(chain_rule_re.D)].derivable?(LAMBDA (tt: (chain_rule_re.D)): chain_rule_re.R(ODEs_equiv.env_sol(chain_rule_re.D, chain_rule_re.envi, chain_rule_re.ode)(tt)), x)}")))
 (|init_re_der_chain_TCC2| 0
  (|init_re_der_chain_TCC2-1| |nil| 3853937274
   ("" (SKEEP) (("" (ASSERT) NIL NIL)) NIL)
   ((|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|null_MapExprInj| NAME-JUDGEMENT "MapExprInj" |hp_def| NIL))
   NIL
   (|init_re_der_chain| SUBTYPE
    "(: chain_rule_re.vec_re(hp_def.max_var(chain_rule_re.ode), chain_rule_re.envi, chain_rule_re.R)(chain_rule_re.v) :)"
    "VectorN(1)")))
 (|init_re_der_chain_TCC3| 0
  (|init_re_der_chain_TCC3-1| |nil| 3853937274
   ("" (SKEEP)
    (("" (ASSERT)
      (("" (LEMMA "re_diff_mv_ll")
        (("" (INST?)
          (("1" (ASSERT) (("1" (INST -1 "t") NIL NIL)) NIL)
           ("2" (EXPAND "lift_rd" 1) (("2" (PROPAX) NIL NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic|
     |mv_analysis|)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|ddl_dom?| CONST-DECL "bool" |differentiation| NIL)
    (|dLVar| TYPE-DECL NIL |hp_def| NIL)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|MapExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|mapexpr_inj| CONST-DECL "bool" |hp_def| NIL)
    (|ODEs| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|ODEs_s?| CONST-DECL "bool" |ODEs_equiv| NIL)
    (|t| SKOLEM-CONST-DECL "(D)" |chain_rule_re| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (D SKOLEM-CONST-DECL "(dd?)" |chain_rule_re| NIL)
    (|dd?| CONST-DECL "bool" |hp_expr| NIL)
    (|lift_rd| CONST-DECL "domain[1]" |lift_real_fun_def| |mv_analysis|)
    (|domain| TYPE-EQ-DECL NIL |domain_vec2real_def| |mv_analysis|)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|real_dom| TYPE-EQ-DECL NIL |lift_real_fun_def| |mv_analysis|)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|re_diff_mv_ll| FORMULA-DECL NIL |chain_rule_re| NIL)
    (|null_MapExprInj| NAME-JUDGEMENT "MapExprInj" |hp_def| NIL))
   NIL
   (|init_re_der_chain| SUBTYPE
    "LAMBDA (v: matrices.VectorN((number_fields.+)(hp_def.max_var(chain_rule_re.ode), 1))): (: chain_rule_re.vec_re(hp_def.max_var(chain_rule_re.ode), chain_rule_re.envi, chain_rule_re.R)(v) :)"
    "{ff: domain_vec2real_def[(number_fields.+)(hp_def.max_var(chain_rule_re.ode), 1)].vec2vec(1) | convergence_vec2vec[(number_fields.+)(1, hp_def.max_var(chain_rule_re.ode))].differentiable?(1, chain_rule_re.projv(hp_def.max_var(chain_rule_re.ode), chain_rule_re.P), ff, lift_real_fun_def.liftl((number_fields.+)(1, hp_def.max_var(chain_rule_re.ode)), chain_rule_re.D, (LAMBDA (tt: (chain_rule_re.D)): chain_rule_re.env_2_vec(hp_def.max_var(chain_rule_re.ode), ODEs_equiv.env_sol(chain_rule_re.D, chain_rule_re.envi, chain_rule_re.ode)(tt))))((: chain_rule_re.t :)))}")))
 (|init_re_der_chain_TCC4| 0
  (|init_re_der_chain_TCC4-1| |nil| 3853937274
   ("" (SKEEP) (("" (LEMMA "projv_dd") (("" (INST?) NIL NIL)) NIL)) NIL)
   ((|projv_dd| FORMULA-DECL NIL |chain_rule_re| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|dLVar| TYPE-DECL NIL |hp_def| NIL)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|MapExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|max_var| CONST-DECL "nat" |hp_def| NIL)
    (|mapexpr_inj| CONST-DECL "bool" |hp_def| NIL)
    (|ODEs| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|dd?| CONST-DECL "bool" |hp_expr| NIL)
    (|ODEs_s?| CONST-DECL "bool" |ODEs_equiv| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|ddl_dom?| CONST-DECL "bool" |differentiation| NIL)
    (|null_MapExprInj| NAME-JUDGEMENT "MapExprInj" |hp_def| NIL))
   NIL
   (|init_re_der_chain| SUBTYPE
    "chain_rule_re.projv(hp_def.max_var(chain_rule_re.ode), chain_rule_re.P)"
    "(derivative_domain_multi[(number_fields.+)(hp_def.max_var(chain_rule_re.ode), 1)].deriv_domain?)")))
 (|init_re_der_chain_TCC5| 0
  (|init_re_der_chain_TCC5-1| |nil| 3853937274
   ("" (SKEEP) (("" (ASSERT) NIL NIL)) NIL)
   ((|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic|
     |mv_analysis|)
    (|null_MapExprInj| NAME-JUDGEMENT "MapExprInj" |hp_def| NIL))
   NIL (|init_re_der_chain| SUBTYPE "(: chain_rule_re.t :)" "VectorN(1)")))
 (|init_re_der_chain_TCC6| 0
  (|init_re_der_chain_TCC6-1| |nil| 3853937274
   ("" (SKEEP)
    (("" (EXPAND "projv" 1)
      (("" (EXPAND "liftl" 1)
        (("" (INST?)
          (("" (ASSERT) (("" (INST 1 "env_sol(D,envi,ode)(t)") NIL NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|projv| CONST-DECL "bool" |chain_rule_re| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|dd?| CONST-DECL "bool" |hp_expr| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|ddl_dom?| CONST-DECL "bool" |differentiation| NIL)
    (|dLVar| TYPE-DECL NIL |hp_def| NIL)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|MapExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|mapexpr_inj| CONST-DECL "bool" |hp_def| NIL)
    (|ODEs| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|ODEs_s?| CONST-DECL "bool" |ODEs_equiv| NIL)
    (|env_sol| CONST-DECL "Environment" |ODEs_equiv| NIL)
    (|liftl| CONST-DECL "vec2vec[1](k)" |lift_real_fun_def| |mv_analysis|)
    (|null_MapExprInj| NAME-JUDGEMENT "MapExprInj" |hp_def| NIL))
   NIL
   (|init_re_der_chain| SUBTYPE
    "lift_real_fun_def.liftl((number_fields.+)(hp_def.max_var(chain_rule_re.ode), 1), chain_rule_re.D, (LAMBDA (tt: (chain_rule_re.D)): chain_rule_re.env_2_vec(hp_def.max_var(chain_rule_re.ode), ODEs_equiv.env_sol(chain_rule_re.D, chain_rule_re.envi, chain_rule_re.ode)(tt))))((: chain_rule_re.t :))"
    "(chain_rule_re.projv(hp_def.max_var(chain_rule_re.ode), chain_rule_re.P))")))
 (|init_re_der_chain_TCC7| 0
  (|init_re_der_chain_TCC7-1| |nil| 3853937274
   ("" (SKEEP)
    (("" (LEMMA "e2v_diff_p") (("" (INST?) (("" (ASSERT) NIL NIL)) NIL)) NIL))
    NIL)
   ((|e2v_diff_p| FORMULA-DECL NIL |chain_rule_re| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic|
     |mv_analysis|)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|ODEs_s?| CONST-DECL "bool" |ODEs_equiv| NIL)
    (|ODEs| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|mapexpr_inj| CONST-DECL "bool" |hp_def| NIL)
    (|MapExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|dLVar| TYPE-DECL NIL |hp_def| NIL)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|lift_rd| CONST-DECL "domain[1]" |lift_real_fun_def| |mv_analysis|)
    (|domain| TYPE-EQ-DECL NIL |domain_vec2real_def| |mv_analysis|)
    (|real_dom| TYPE-EQ-DECL NIL |lift_real_fun_def| |mv_analysis|)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|dd?| CONST-DECL "bool" |hp_expr| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|null_MapExprInj| NAME-JUDGEMENT "MapExprInj" |hp_def| NIL))
   NIL
   (|init_re_der_chain| SUBTYPE
    "lift_real_fun_def.liftl((number_fields.+)(hp_def.max_var(chain_rule_re.ode), 1), chain_rule_re.D, (LAMBDA (tt: (chain_rule_re.D)): chain_rule_re.env_2_vec(hp_def.max_var(chain_rule_re.ode), ODEs_equiv.env_sol(chain_rule_re.D, chain_rule_re.envi, chain_rule_re.ode)(tt))))"
    "{ff: domain_vec2real_def[1].vec2vec((number_fields.+)(1, hp_def.max_var(chain_rule_re.ode))) | convergence_vec2vec[1].differentiable?((number_fields.+)(1, hp_def.max_var(chain_rule_re.ode)), lift_real_fun_def.lift_rd(chain_rule_re.D), ff, (: chain_rule_re.t :))}")))
 (|init_re_der_chain_TCC8| 0
  (|init_re_der_chain_TCC8-1| |nil| 3853937274
   ("" (LEMMA "projv_dd")
    (("" (SKEEP)
      (("" (TYPEPRED "D")
        (("" (LEMMA "dd_deriv_domain")
          (("" (LEMMA "dd_lift_dd")
            (("" (INST?) (("" (INST?) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|null_MapExprInj| NAME-JUDGEMENT "MapExprInj" |hp_def| NIL)
    (|dd_deriv_domain| FORMULA-DECL NIL |hp_expr| NIL)
    (|real_dom| TYPE-EQ-DECL NIL |lift_real_fun_def| |mv_analysis|)
    (|dd_lift_dd| FORMULA-DECL NIL |lift_real_fun_def| |mv_analysis|)
    (|dd?| CONST-DECL "bool" |hp_expr| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|projv_dd| FORMULA-DECL NIL |chain_rule_re| NIL))
   NIL
   (|init_re_der_chain| SUBTYPE "lift_real_fun_def.lift_rd(chain_rule_re.D)"
    "(derivative_domain_multi[1].deriv_domain?)")))
 (|init_re_der_chain_TCC9| 0
  (|init_re_der_chain_TCC9-1| |nil| 3853937274
   ("" (SKEEP)
    (("" (ASSERT) (("" (EXPAND "lift_rd" 1) (("" (PROPAX) NIL NIL)) NIL)) NIL))
    NIL)
   ((|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic|
     |mv_analysis|)
    (|lift_rd| CONST-DECL "domain[1]" |lift_real_fun_def| |mv_analysis|)
    (|null_MapExprInj| NAME-JUDGEMENT "MapExprInj" |hp_def| NIL))
   NIL
   (|init_re_der_chain| SUBTYPE "(: chain_rule_re.t :)"
    "(lift_real_fun_def.lift_rd(chain_rule_re.D))")))
 (|init_re_der_chain_TCC10| 0
  (|init_re_der_chain_TCC10-1| |nil| 3853937274
   ("" (SKEEP)
    (("" (ASSERT)
      ((""
        (TYPEPRED "der_f[1 + max_var(ode)]
               (1, projv(max_var(ode), P),
                liftl(1 + max_var(ode), D,
                      LAMBDA (tt: (D)):
                        env_2_vec(max_var(ode), env_sol(D, envi, ode)(tt)))
                     ((: t :)))
               (LAMBDA (v: VectorN(1 + max_var(ode))):
                  (: vec_re(max_var(ode), envi, R)(v) :))
            *
            der_f[1]
                (1 + max_var(ode), lift_rd(D), (: t :))
                (liftl(1 + max_var(ode), D,
                       LAMBDA (tt: (D)):
                         env_2_vec(max_var(ode),
                                   env_sol(D, envi, ode)(tt))))")
        (("1" (ASSERT)
          (("1" (HIDE -5)
            (("1" (HIDE -4)
              (("1" (HIDE -3)
                (("1" (EXPAND "rows")
                  (("1" (HIDE -1)
                    (("1"
                      (TYPEPRED "der_f[1 + max_var(ode)]
                  (1, projv(max_var(ode), P),
                   liftl(1 + max_var(ode), D,
                         LAMBDA (tt: (D)):
                           env_2_vec(max_var(ode),
                                     env_sol(D, envi, ode)(tt)))
                        ((: t :)))
                  (LAMBDA (v: VectorN(1 + max_var(ode))):
                     (: vec_re(max_var(ode), envi, R)(v) :))")
                      (("1" (ASSERT)
                        (("1" (EXPAND "length" -5 1) (("1" (ASSERT) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (LEMMA "re_diff_mv_ll")
          (("2" (INST?) (("2" (ASSERT) (("2" (INST -1 "t") NIL NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|mult_full| APPLICATION-JUDGEMENT "FullMatrix" |matrices| |matrices|)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic|
     |mv_analysis|)
    (|re_diff_mv_ll| FORMULA-DECL NIL |chain_rule_re| NIL)
    (|lift_rd| CONST-DECL "domain[1]" |lift_real_fun_def| |mv_analysis|)
    (|vec_re| CONST-DECL "real" |chain_rule_re| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|env_sol| CONST-DECL "Environment" |ODEs_equiv| NIL)
    (|env_2_vec| DEF-DECL "VectorN(k + 1)" |chain_rule_re| NIL)
    (|liftl| CONST-DECL "vec2vec[1](k)" |lift_real_fun_def| |mv_analysis|)
    (|real_dom| TYPE-EQ-DECL NIL |lift_real_fun_def| |mv_analysis|)
    (|ddl_dom?| CONST-DECL "bool" |differentiation| NIL)
    (|projv| CONST-DECL "bool" |chain_rule_re| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|der_f| CONST-DECL "{T: MatrixMN(m, n) |
   convergence_zero?(NQ(D, p), NQ(m, f, p, T), zero_vec(n))}"
     |convergence_vec2vec| |mv_analysis|)
    (|zero_vec| DEF-DECL "VectorN(m)" |vector_arithmetic| |mv_analysis|)
    (NQ CONST-DECL "real" |convergence_vec2vec| |mv_analysis|)
    (NQ CONST-DECL "bool" |differentiable_def| |mv_analysis|)
    (|convergence_zero?| CONST-DECL "bool" |vector_sequences| |mv_analysis|)
    (|vec2real_f| TYPE-EQ-DECL NIL |domain_vec2real_def| |mv_analysis|)
    (|differentiable?| CONST-DECL "bool" |convergence_vec2vec| |mv_analysis|)
    (|vec2vec| TYPE-EQ-DECL NIL |domain_vec2real_def| |mv_analysis|)
    (|deriv_domain?| CONST-DECL "bool" |derivative_domain_multi| |mv_analysis|)
    (|domain| TYPE-EQ-DECL NIL |domain_vec2real_def| |mv_analysis|)
    (|ODEs_s?| CONST-DECL "bool" |ODEs_equiv| NIL)
    (|dd?| CONST-DECL "bool" |hp_expr| NIL)
    (|ODEs| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|mapexpr_inj| CONST-DECL "bool" |hp_def| NIL)
    (|max_var| CONST-DECL "nat" |hp_def| NIL)
    (|MapExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|dLVar| TYPE-DECL NIL |hp_def| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (* CONST-DECL "{A: MatrixMN(rows(M), columns(N)) |
   FORALL (i: nat, j: nat): entry(A)(i, j) = row(M)(i) * col(N)(j)}"
       |matrices| |matrices|)
    (|col| DEF-DECL "VectorN(rows(M))" |matrices| |matrices|)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|row| CONST-DECL "Vector" |matrices| |matrices|)
    (* CONST-DECL "real" |matrices| |matrices|)
    (|Vector| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|entry| CONST-DECL "real" |matrices| |matrices|)
    (|MatrixMN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|columns| DEF-DECL "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}"
     |matrices| |matrices|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (<= CONST-DECL "bool" |reals| NIL) (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|rows| CONST-DECL "nat" |matrices| |matrices|)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|Matrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|null_MapExprInj| NAME-JUDGEMENT "MapExprInj" |hp_def| NIL))
   NIL
   (|init_re_der_chain| SUBTYPE
    "matrices.*(convergence_vec2vec[(number_fields.+)(hp_def.max_var(chain_rule_re.ode), 1)].der_f(1, chain_rule_re.projv(hp_def.max_var(chain_rule_re.ode), chain_rule_re.P), lift_real_fun_def.liftl((number_fields.+)(hp_def.max_var(chain_rule_re.ode), 1), chain_rule_re.D, (LAMBDA (tt: (chain_rule_re.D)): chain_rule_re.env_2_vec(hp_def.max_var(chain_rule_re.ode), ODEs_equiv.env_sol(chain_rule_re.D, chain_rule_re.envi, chain_rule_re.ode)(tt))))((: chain_rule_re.t :)))(LAMBDA (v: matrices.VectorN((number_fields.+)(hp_def.max_var(chain_rule_re.ode), 1))): (: chain_rule_re.vec_re(hp_def.max_var(chain_rule_re.ode), chain_rule_re.envi, chain_rule_re.R)(v) :)), convergence_vec2vec[1].der_f((number_fields.+)(hp_def.max_var(chain_rule_re.ode), 1), lift_real_fun_def.lift_rd(chain_rule_re.D), (: chain_rule_re.t :))(lift_real_fun_def.liftl((number_fields.+)(hp_def.max_var(chain_rule_re.ode), 1), chain_rule_re.D, (LAMBDA (tt: (chain_rule_re.D)): chain_rule_re.env_2_vec(hp_def.max_var(chain_rule_re.ode), ODEs_equiv.env_sol(chain_rule_re.D, chain_rule_re.envi, chain_rule_re.ode)(tt))))))"
    "(list_adt[list[real]].cons?)")))
 (|init_re_der_chain_TCC11| 0
  (|init_re_der_chain_TCC11-1| |nil| 3853937274
   ("" (SKEEP)
    ((""
      (TYPEPRED "der_f[1 + max_var(ode)]
               (1, projv(max_var(ode), P),
                liftl(1 + max_var(ode), D,
                      LAMBDA (tt: (D)):
                        env_2_vec(max_var(ode), env_sol(D, envi, ode)(tt)))
                     ((: t :)))
               (LAMBDA (v: VectorN(1 + max_var(ode))):
                  (: vec_re(max_var(ode), envi, R)(v) :))
            *
            der_f[1]
                (1 + max_var(ode), lift_rd(D), (: t :))
                (liftl(1 + max_var(ode), D,
                       LAMBDA (tt: (D)):
                         env_2_vec(max_var(ode),
                                   env_sol(D, envi, ode)(tt))))")
      (("1" (INST -3 "0")
        (("1" (ASSERT)
          (("1" (EXPAND "nth" -3 1)
            (("1" (EXPAND "length" -3)
              (("1" (HIDE -5)
                (("1" (HIDE -4)
                  (("1" (HIDE -2)
                    (("1" (HIDE -1)
                      (("1" (LEMMA "columns_mn")
                        (("1" (INST?)
                          (("1"
                            (INST -1 "1 + max_var(ode)" "1" "der_f[1]
                   (1 + max_var(ode), lift_rd(D), (: t :))
                   (liftl(1 + max_var(ode), D,
                          LAMBDA (tt: (D)):
                            env_2_vec(max_var(ode),
                                      env_sol(D, envi, ode)(tt))))")
                            (("1" (ASSERT) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (HIDE 2)
          (("2" (ASSERT)
            (("2" (HIDE -4)
              (("2" (HIDE -3)
                (("2" (EXPAND "rows" -2)
                  (("2"
                    (TYPEPRED "der_f[1 + max_var(ode)]
                  (1, projv(max_var(ode), P),
                   liftl(1 + max_var(ode), D,
                         LAMBDA (tt: (D)):
                           env_2_vec(max_var(ode),
                                     env_sol(D, envi, ode)(tt)))
                        ((: t :)))
                  (LAMBDA (v: VectorN(1 + max_var(ode))):
                     (: vec_re(max_var(ode), envi, R)(v) :))")
                    (("2" (ASSERT) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (HIDE 2)
        (("2" (LEMMA "e2v_diff_p") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL))
          NIL))
        NIL)
       ("3" (HIDE 2)
        (("3" (EXPAND "liftl")
          (("3" (EXPAND "projv")
            (("3" (INST 1 "env_sol(D,envi,ode)(t)") NIL NIL)) NIL))
          NIL))
        NIL)
       ("4" (HIDE 2)
        (("4" (ASSERT)
          (("4" (LEMMA "re_diff_mv_ll")
            (("4" (INST?)
              (("1" (ASSERT) (("1" (INST -1 "t") NIL NIL)) NIL)
               ("2" (EXPAND "lift_rd" 1) (("2" (PROPAX) NIL NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|mult_full| APPLICATION-JUDGEMENT "FullMatrix" |matrices| |matrices|)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|Matrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|rows| CONST-DECL "nat" |matrices| |matrices|)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL) (<= CONST-DECL "bool" |reals| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|columns| DEF-DECL "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}"
     |matrices| |matrices|)
    (|MatrixMN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|entry| CONST-DECL "real" |matrices| |matrices|)
    (|Vector| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (* CONST-DECL "real" |matrices| |matrices|)
    (|row| CONST-DECL "Vector" |matrices| |matrices|)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|col| DEF-DECL "VectorN(rows(M))" |matrices| |matrices|)
    (* CONST-DECL "{A: MatrixMN(rows(M), columns(N)) |
   FORALL (i: nat, j: nat): entry(A)(i, j) = row(M)(i) * col(N)(j)}"
       |matrices| |matrices|)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|dLVar| TYPE-DECL NIL |hp_def| NIL)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|MapExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|max_var| CONST-DECL "nat" |hp_def| NIL)
    (|mapexpr_inj| CONST-DECL "bool" |hp_def| NIL)
    (|ODEs| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|dd?| CONST-DECL "bool" |hp_expr| NIL)
    (|ODEs_s?| CONST-DECL "bool" |ODEs_equiv| NIL)
    (|domain| TYPE-EQ-DECL NIL |domain_vec2real_def| |mv_analysis|)
    (|deriv_domain?| CONST-DECL "bool" |derivative_domain_multi| |mv_analysis|)
    (|vec2vec| TYPE-EQ-DECL NIL |domain_vec2real_def| |mv_analysis|)
    (|differentiable?| CONST-DECL "bool" |convergence_vec2vec| |mv_analysis|)
    (|vec2real_f| TYPE-EQ-DECL NIL |domain_vec2real_def| |mv_analysis|)
    (|convergence_zero?| CONST-DECL "bool" |vector_sequences| |mv_analysis|)
    (NQ CONST-DECL "bool" |differentiable_def| |mv_analysis|)
    (NQ CONST-DECL "real" |convergence_vec2vec| |mv_analysis|)
    (|zero_vec| DEF-DECL "VectorN(m)" |vector_arithmetic| |mv_analysis|)
    (|der_f| CONST-DECL "{T: MatrixMN(m, n) |
   convergence_zero?(NQ(D, p), NQ(m, f, p, T), zero_vec(n))}"
     |convergence_vec2vec| |mv_analysis|)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|projv| CONST-DECL "bool" |chain_rule_re| NIL)
    (|ddl_dom?| CONST-DECL "bool" |differentiation| NIL)
    (|real_dom| TYPE-EQ-DECL NIL |lift_real_fun_def| |mv_analysis|)
    (|liftl| CONST-DECL "vec2vec[1](k)" |lift_real_fun_def| |mv_analysis|)
    (|env_2_vec| DEF-DECL "VectorN(k + 1)" |chain_rule_re| NIL)
    (|env_sol| CONST-DECL "Environment" |ODEs_equiv| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|vec_re| CONST-DECL "real" |chain_rule_re| NIL)
    (|lift_rd| CONST-DECL "domain[1]" |lift_real_fun_def| |mv_analysis|)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic|
     |mv_analysis|)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|columns_mn| FORMULA-DECL NIL |matrices| |matrices|)
    (D SKOLEM-CONST-DECL "(dd?)" |chain_rule_re| NIL)
    (|envi| SKOLEM-CONST-DECL "Environment" |chain_rule_re| NIL)
    (|ode| SKOLEM-CONST-DECL "(ODEs_s?(D, envi))" |chain_rule_re| NIL)
    (P SKOLEM-CONST-DECL "(ddl_dom?)" |chain_rule_re| NIL)
    (|t| SKOLEM-CONST-DECL "(D)" |chain_rule_re| NIL)
    (R SKOLEM-CONST-DECL "RealExpr" |chain_rule_re| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|e2v_diff_p| FORMULA-DECL NIL |chain_rule_re| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|re_diff_mv_ll| FORMULA-DECL NIL |chain_rule_re| NIL)
    (|null_MapExprInj| NAME-JUDGEMENT "MapExprInj" |hp_def| NIL))
   NIL
   (|init_re_der_chain| SUBTYPE
    "list_adt[list[real]].car(matrices.*(convergence_vec2vec[(number_fields.+)(hp_def.max_var(chain_rule_re.ode), 1)].der_f(1, chain_rule_re.projv(hp_def.max_var(chain_rule_re.ode), chain_rule_re.P), lift_real_fun_def.liftl((number_fields.+)(hp_def.max_var(chain_rule_re.ode), 1), chain_rule_re.D, (LAMBDA (tt: (chain_rule_re.D)): chain_rule_re.env_2_vec(hp_def.max_var(chain_rule_re.ode), ODEs_equiv.env_sol(chain_rule_re.D, chain_rule_re.envi, chain_rule_re.ode)(tt))))((: chain_rule_re.t :)))(LAMBDA (v: matrices.VectorN((number_fields.+)(hp_def.max_var(chain_rule_re.ode), 1))): (: chain_rule_re.vec_re(hp_def.max_var(chain_rule_re.ode), chain_rule_re.envi, chain_rule_re.R)(v) :)), convergence_vec2vec[1].der_f((number_fields.+)(hp_def.max_var(chain_rule_re.ode), 1), lift_real_fun_def.lift_rd(chain_rule_re.D), (: chain_rule_re.t :))(lift_real_fun_def.liftl((number_fields.+)(hp_def.max_var(chain_rule_re.ode), 1), chain_rule_re.D, (LAMBDA (tt: (chain_rule_re.D)): chain_rule_re.env_2_vec(hp_def.max_var(chain_rule_re.ode), ODEs_equiv.env_sol(chain_rule_re.D, chain_rule_re.envi, chain_rule_re.ode)(tt)))))))"
    "(list_adt[real].cons?)")))
 (|init_re_der_chain| 0
  (|init_re_der_chain-1| |nil| 3853938195
   ("" (SKEEP)
    (("" (LEMMA "e2v_re_der_p")
      (("" (LEMMA "lift_der")
        (("" (ASSERT)
          (("" (INST -2 "D" "P" "(: t :)" "envi" "ode" "R")
            (("" (ASSERT)
              (("" (SPLIT -2)
                (("1"
                  (INST -2 "D" "t"
                   "(LAMBDA (tt: (D)): R(env_sol(D, envi, ode)(tt)))")
                  (("1" (ASSERT)
                    (("1" (SPLIT -2)
                      (("1" (REPLACE -2 1 RL)
                        (("1" (EXPAND "lift_re" -1 1)
                          (("1" (EXPAND "liftl" -2 1)
                            (("1" (EXPAND "zero_vec" -2 1)
                              (("1" (EXPAND "zero_vec" -2 1)
                                (("1" (EXPAND "liftl" 1)
                                  (("1" (EXPAND "zero_vec" 1)
                                    (("1" (EXPAND "zero_vec" 1)
                                      (("1" (REPLACE -1 1 RL)
                                        (("1" (ASSERT) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (HIDE 2)
                        (("2" (LEMMA "re_diff_chain")
                          (("2" (INST -1 "D" "envi" "ode" "P" "R" "t")
                            (("2" (ASSERT) NIL NIL)) NIL))
                          NIL))
                        NIL)
                       ("3" (HIDE 2)
                        (("3" (LEMMA "dd_e_partial") (("3" (INST?) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (TYPEPRED "D")
                    (("2" (LEMMA "dd_deriv_domain") (("2" (INST?) NIL NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (PROPAX) NIL NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|e2v_re_der_p| FORMULA-DECL NIL |chain_rule_re| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|mult_full| APPLICATION-JUDGEMENT "FullMatrix" |matrices| |matrices|)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic|
     |mv_analysis|)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|deriv_domain?| CONST-DECL "bool" |deriv_domain_def| |analysis|)
    (D SKOLEM-CONST-DECL "(dd?)" |chain_rule_re| NIL)
    (|env_sol| CONST-DECL "Environment" |ODEs_equiv| NIL)
    (|lift_re| CONST-DECL "vec2vec[1](1)" |lift_real_fun_def| |mv_analysis|)
    (|zero_vec| DEF-DECL "VectorN(m)" |vector_arithmetic| |mv_analysis|)
    (|liftl| CONST-DECL "vec2vec[1](k)" |lift_real_fun_def| |mv_analysis|)
    (|re_diff_chain| FORMULA-DECL NIL |chain_rule_re| NIL)
    (|dd_e_partial| FORMULA-DECL NIL |chain_rule_re| NIL)
    (|dd_deriv_domain| FORMULA-DECL NIL |hp_expr| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|ODEs_s?| CONST-DECL "bool" |ODEs_equiv| NIL)
    (|ODEs| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|mapexpr_inj| CONST-DECL "bool" |hp_def| NIL)
    (|MapExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|dLVar| TYPE-DECL NIL |hp_def| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|lift_rd| CONST-DECL "domain[1]" |lift_real_fun_def| |mv_analysis|)
    (|domain| TYPE-EQ-DECL NIL |domain_vec2real_def| |mv_analysis|)
    (|real_dom| TYPE-EQ-DECL NIL |lift_real_fun_def| |mv_analysis|)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|ddl_dom?| CONST-DECL "bool" |differentiation| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|dd?| CONST-DECL "bool" |hp_expr| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|lift_der| FORMULA-DECL NIL |lift_real_fun_def| |mv_analysis|)
    (|null_MapExprInj| NAME-JUDGEMENT "MapExprInj" |hp_def| NIL))
   SHOSTAK))
 (|init2_re_der_chain_TCC1| 0
  (|init2_re_der_chain_TCC1-1| |nil| 3853939157
   ("" (SKEEP)
    (("" (EXPAND "differentiable_re_p?") (("" (PROPAX) NIL NIL)) NIL)) NIL)
   ((|differentiable_re_p?| CONST-DECL "bool" |chain_rule_re| NIL)
    (|null_MapExprInj| NAME-JUDGEMENT "MapExprInj" |hp_def| NIL))
   NIL
   (|init2_re_der_chain| SUBTYPE
    "chain_rule_re.vec_re(hp_def.max_var(chain_rule_re.ode), ODEs_equiv.env_sol(chain_rule_re.D, chain_rule_re.envi, chain_rule_re.ode)(chain_rule_re.t), chain_rule_re.R)"
    "{ff: domain_vec2real_def[(number_fields.+)(1, hp_def.max_var(chain_rule_re.ode))].vec2real_f | differentiable_def[(number_fields.+)(1, hp_def.max_var(chain_rule_re.ode))].differentiable?(chain_rule_re.projv(hp_def.max_var(chain_rule_re.ode), chain_rule_re.P), ff, chain_rule_re.env_2_vec(hp_def.max_var(chain_rule_re.ode), ODEs_equiv.env_sol(chain_rule_re.D, chain_rule_re.envi, chain_rule_re.ode)(chain_rule_re.t)))}")))
 (|init2_re_der_chain_TCC2| 0
  (|init2_re_der_chain_TCC2-1| |nil| 3853939157
   ("" (SKEEP) (("" (LEMMA "projv_dd") (("" (INST?) NIL NIL)) NIL)) NIL)
   ((|projv_dd| FORMULA-DECL NIL |chain_rule_re| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|dLVar| TYPE-DECL NIL |hp_def| NIL)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|MapExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|max_var| CONST-DECL "nat" |hp_def| NIL)
    (|mapexpr_inj| CONST-DECL "bool" |hp_def| NIL)
    (|ODEs| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|dd?| CONST-DECL "bool" |hp_expr| NIL)
    (|ODEs_s?| CONST-DECL "bool" |ODEs_equiv| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|ddl_dom?| CONST-DECL "bool" |differentiation| NIL)
    (|null_MapExprInj| NAME-JUDGEMENT "MapExprInj" |hp_def| NIL))
   NIL
   (|init2_re_der_chain| SUBTYPE
    "chain_rule_re.projv(hp_def.max_var(chain_rule_re.ode), chain_rule_re.P)"
    "(derivative_domain_multi[(number_fields.+)(1, hp_def.max_var(chain_rule_re.ode))].deriv_domain?)")))
 (|init2_re_der_chain_TCC3| 0
  (|init2_re_der_chain_TCC3-1| |nil| 3853939157
   ("" (SKEEP)
    (("" (EXPAND "projv" 1)
      (("" (INST?) (("" (INST 1 "env_sol(D,envi,ode)(t)") NIL NIL)) NIL)) NIL))
    NIL)
   ((|projv| CONST-DECL "bool" |chain_rule_re| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|ddl_dom?| CONST-DECL "bool" |differentiation| NIL)
    (|dLVar| TYPE-DECL NIL |hp_def| NIL)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|MapExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|mapexpr_inj| CONST-DECL "bool" |hp_def| NIL)
    (|ODEs| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|ODEs_s?| CONST-DECL "bool" |ODEs_equiv| NIL)
    (|env_sol| CONST-DECL "Environment" |ODEs_equiv| NIL)
    (|dd?| CONST-DECL "bool" |hp_expr| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|null_MapExprInj| NAME-JUDGEMENT "MapExprInj" |hp_def| NIL))
   NIL
   (|init2_re_der_chain| SUBTYPE
    "chain_rule_re.env_2_vec(hp_def.max_var(chain_rule_re.ode), ODEs_equiv.env_sol(chain_rule_re.D, chain_rule_re.envi, chain_rule_re.ode)(chain_rule_re.t))"
    "(chain_rule_re.projv(hp_def.max_var(chain_rule_re.ode), chain_rule_re.P))")))
 (|init2_re_der_chain| 0
  (|init2_re_der_chain-1| |nil| 3853939405
   ("" (SKEEP)
    (("" (LEMMA "init_re_der_chain")
      (("" (INST?)
        (("" (ASSERT)
          (("" (SPLIT -1)
            (("1" (REPLACE -1)
              (("1" (LEMMA "re_der_mv_ll")
                (("1" (INST?)
                  (("1" (SPLIT -1)
                    (("1" (REPLACE -1 1 LR)
                      (("1" (ASSERT)
                        (("1" (HIDE -)
                          (("1"
                            (TYPEPRED "(: der_f(projv(max_var(ode), P),
                       env_2_vec(max_var(ode), env_sol(D, envi, ode)(t)))
                      (vec_re(max_var(ode), env_sol(D, envi, ode)(t),
                              R)) :)
               *
               der_f[1]
                   (1 + max_var(ode), lift_rd(D), (: t :))
                   (liftl(1 + max_var(ode), D,
                          LAMBDA (tt: (D)):
                            env_2_vec(max_var(ode),
                                      env_sol(D, envi, ode)(tt))))")
                            (("1" (HIDE -5)
                              (("1" (INST -4 "0" "0")
                                (("1" (EXPAND "entry" -4)
                                  (("1" (EXPAND "access" -4)
                                    (("1" (ASSERT)
                                      (("1" (LIFT-IF)
                                        (("1" (SPLIT)
                                          (("1" (FLATTEN)
                                            (("1" (EXPAND "row" -2)
                                              (("1" (ASSERT)
                                                (("1" (LIFT-IF -2)
                                                  (("1" (HIDE -5)
                                                    (("1" (HIDE -4)
                                                      (("1" (HIDE -3)
                                                        (("1" (SPLIT)
                                                          (("1"
                                                            (TYPEPRED
                                                             "((: der_f(projv(max_var(ode), P),
                       env_2_vec(max_var(ode), env_sol(D, envi, ode)(t)))
                      (vec_re(max_var(ode), env_sol(D, envi, ode)(t),
                              R)) :)
               *
               der_f[1]
                   (1 + max_var(ode), lift_rd(D), (: t :))
                   (liftl(1 + max_var(ode), D,
                          LAMBDA (tt: (D)):
                            env_2_vec(max_var(ode),
                                      env_sol(D, envi, ode)(tt)))))")
                                                            (("1"
                                                              (EXPAND "rows"
                                                                      -2)
                                                              (("1"
                                                                (EXPAND
                                                                 "length" -2 2)
                                                                (("1" (ASSERT)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL)
                                                           ("2" (FLATTEN)
                                                            (("2" (HIDE -2)
                                                              (("2" (HIDE 1)
                                                                (("2"
                                                                  (EXPAND "nth"
                                                                          -1 1)
                                                                  (("2"
                                                                    (EXPAND
                                                                     "nth" -1)
                                                                    (("2"
                                                                      (PROPAX)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("2" (FLATTEN)
                                            (("2" (ASSERT)
                                              (("2" (HIDE -4)
                                                (("2" (HIDE -3)
                                                  (("2" (HIDE -2)
                                                    (("2" (HIDE -1)
                                                      (("2"
                                                        (TYPEPRED
                                                         "((: der_f(projv(max_var(ode), P),
                       env_2_vec(max_var(ode), env_sol(D, envi, ode)(t)))
                      (vec_re(max_var(ode), env_sol(D, envi, ode)(t),
                              R)) :)
               *
               der_f[1]
                   (1 + max_var(ode), lift_rd(D), (: t :))
                   (liftl(1 + max_var(ode), D,
                          LAMBDA (tt: (D)):
                            env_2_vec(max_var(ode),
                                      env_sol(D, envi, ode)(tt)))))")
                                                        (("2" (HIDE -5)
                                                          (("2" (HIDE -4)
                                                            (("2" (INST -3 "0")
                                                              (("1"
                                                                (EXPAND "row" 1
                                                                        1)
                                                                (("1" (ASSERT)
                                                                  (("1"
                                                                    (LIFT-IF 1)
                                                                    (("1"
                                                                      (SPLIT 1)
                                                                      (("1"
                                                                        (FLATTEN)
                                                                        (("1"
                                                                          (EXPAND
                                                                           "rows"
                                                                           -3)
                                                                          (("1"
                                                                            (ASSERT)
                                                                            NIL
                                                                            NIL))
                                                                          NIL))
                                                                        NIL)
                                                                       ("2"
                                                                        (FLATTEN)
                                                                        (("2"
                                                                          (ASSERT)
                                                                          (("2"
                                                                            (REPLACE
                                                                             -3
                                                                             2)
                                                                            (("2"
                                                                              (HIDE
                                                                               -)
                                                                              (("2"
                                                                                (LEMMA
                                                                                 "columns_mn")
                                                                                (("2"
                                                                                  (INST
                                                                                   -1
                                                                                   "1 + max_var(ode)"
                                                                                   "1"
                                                                                   "der_f[1]
                   (1 + max_var(ode), lift_rd(D), (: t :))
                   (liftl(1 + max_var(ode), D,
                          LAMBDA (tt: (D)):
                            env_2_vec(max_var(ode),
                                      env_sol(D, envi, ode)(tt))))")
                                                                                  (("2"
                                                                                    (ASSERT)
                                                                                    NIL
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL)
                                                               ("2" (HIDE 2)
                                                                (("2"
                                                                  (EXPAND
                                                                   "rows" -)
                                                                  (("2"
                                                                    (ASSERT)
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (INST -2 "t") (("2" (ASSERT) NIL NIL)) NIL)
                     ("3" (ASSERT) NIL NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (PROPAX) NIL NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|init_re_der_chain| FORMULA-DECL NIL |chain_rule_re| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic|
     |mv_analysis|)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|real_dom| TYPE-EQ-DECL NIL |lift_real_fun_def| |mv_analysis|)
    (|domain| TYPE-EQ-DECL NIL |domain_vec2real_def| |mv_analysis|)
    (|lift_rd| CONST-DECL "domain[1]" |lift_real_fun_def| |mv_analysis|)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (R SKOLEM-CONST-DECL "RealExpr" |chain_rule_re| NIL)
    (|t| SKOLEM-CONST-DECL "(D)" |chain_rule_re| NIL)
    (P SKOLEM-CONST-DECL "(ddl_dom?)" |chain_rule_re| NIL)
    (|ode| SKOLEM-CONST-DECL "(ODEs_s?(D, envi))" |chain_rule_re| NIL)
    (|envi| SKOLEM-CONST-DECL "Environment" |chain_rule_re| NIL)
    (D SKOLEM-CONST-DECL "(dd?)" |chain_rule_re| NIL)
    (|length_null| FORMULA-DECL NIL |more_list_props| |structures|)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|columns_mn| FORMULA-DECL NIL |matrices| |matrices|)
    (|access| CONST-DECL "real" |matrices| |matrices|)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|Matrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|rows| CONST-DECL "nat" |matrices| |matrices|)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL) (<= CONST-DECL "bool" |reals| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|columns| DEF-DECL "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}"
     |matrices| |matrices|)
    (|MatrixMN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|entry| CONST-DECL "real" |matrices| |matrices|)
    (|Vector| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (* CONST-DECL "real" |matrices| |matrices|)
    (|row| CONST-DECL "Vector" |matrices| |matrices|)
    (|col| DEF-DECL "VectorN(rows(M))" |matrices| |matrices|)
    (* CONST-DECL "{A: MatrixMN(rows(M), columns(N)) |
   FORALL (i: nat, j: nat): entry(A)(i, j) = row(M)(i) * col(N)(j)}"
       |matrices| |matrices|)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|max_var| CONST-DECL "nat" |hp_def| NIL)
    (|deriv_domain?| CONST-DECL "bool" |derivative_domain_multi| |mv_analysis|)
    (|vec2real_f| TYPE-EQ-DECL NIL |domain_vec2real_def| |mv_analysis|)
    (|differentiable?| CONST-DECL "bool" |differentiable_def| |mv_analysis|)
    (|convergence_zero?| CONST-DECL "bool" |vector_sequences| |mv_analysis|)
    (NQ CONST-DECL "bool" |differentiable_def| |mv_analysis|)
    (NQ CONST-DECL "real" |differentiable_def| |mv_analysis|)
    (|zero_vec| DEF-DECL "VectorN(m)" |vector_arithmetic| |mv_analysis|)
    (|der_f| CONST-DECL
     "{gg: VectorN(n) | convergence_zero?(NQ(D, p), NQ(f, gg, p), zero_vec(n))}"
     |differentiable_def| |mv_analysis|)
    (|projv| CONST-DECL "bool" |chain_rule_re| NIL)
    (|env_2_vec| DEF-DECL "VectorN(k + 1)" |chain_rule_re| NIL)
    (|env_sol| CONST-DECL "Environment" |ODEs_equiv| NIL)
    (|vec_re| CONST-DECL "real" |chain_rule_re| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|vec2vec| TYPE-EQ-DECL NIL |domain_vec2real_def| |mv_analysis|)
    (|differentiable?| CONST-DECL "bool" |convergence_vec2vec| |mv_analysis|)
    (NQ CONST-DECL "real" |convergence_vec2vec| |mv_analysis|)
    (|der_f| CONST-DECL "{T: MatrixMN(m, n) |
   convergence_zero?(NQ(D, p), NQ(m, f, p, T), zero_vec(n))}"
     |convergence_vec2vec| |mv_analysis|)
    (|liftl| CONST-DECL "vec2vec[1](k)" |lift_real_fun_def| |mv_analysis|)
    (|mult_full| APPLICATION-JUDGEMENT "FullMatrix" |matrices| |matrices|)
    (|re_der_mv_ll| FORMULA-DECL NIL |chain_rule_re| NIL)
    (|ddl_dom?| CONST-DECL "bool" |differentiation| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|ODEs_s?| CONST-DECL "bool" |ODEs_equiv| NIL)
    (|ODEs| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|mapexpr_inj| CONST-DECL "bool" |hp_def| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|MapExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|dLVar| TYPE-DECL NIL |hp_def| NIL)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|dd?| CONST-DECL "bool" |hp_expr| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|odd_minus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|minus_i16_u16| APPLICATION-JUDGEMENT "int32" |integertypes| NIL)
    (|minus_i32_u32| APPLICATION-JUDGEMENT "int64" |integertypes| NIL)
    (|minus_u8_u8| APPLICATION-JUDGEMENT "int16" |integertypes| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|null_MapExprInj| NAME-JUDGEMENT "MapExprInj" |hp_def| NIL))
   SHOSTAK))
 (|init3_re_der_chain_TCC1| 0
  (|init3_re_der_chain_TCC1-1| |nil| 3853940404
   ("" (SKEEP)
    (("" (TYPEPRED "t")
      (("" (EXPAND "differentiable_re_p?" -3) (("" (PROPAX) NIL NIL)) NIL))
      NIL))
    NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|dd?| CONST-DECL "bool" |hp_expr| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|ddl_dom?| CONST-DECL "bool" |differentiation| NIL)
    (|dLVar| TYPE-DECL NIL |hp_def| NIL)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|MapExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|mapexpr_inj| CONST-DECL "bool" |hp_def| NIL)
    (|ODEs| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|ODEs_s?| CONST-DECL "bool" |ODEs_equiv| NIL)
    (|env_sol| CONST-DECL "Environment" |ODEs_equiv| NIL)
    (|differentiable_re_p?| CONST-DECL "bool" |chain_rule_re| NIL)
    (|max_var| CONST-DECL "nat" |hp_def| NIL)
    (|null_MapExprInj| NAME-JUDGEMENT "MapExprInj" |hp_def| NIL))
   NIL
   (|init3_re_der_chain| SUBTYPE
    "chain_rule_re.vec_re(hp_def.max_var(chain_rule_re.ode), ODEs_equiv.env_sol(chain_rule_re.D, chain_rule_re.envi, chain_rule_re.ode)(chain_rule_re.t), chain_rule_re.R)"
    "{ff: domain_vec2real_def[(number_fields.+)(1, hp_def.max_var(chain_rule_re.ode))].vec2real_f | differentiable_def[(number_fields.+)(1, hp_def.max_var(chain_rule_re.ode))].differentiable?(chain_rule_re.projv(hp_def.max_var(chain_rule_re.ode), chain_rule_re.P), ff, chain_rule_re.env_2_vec(hp_def.max_var(chain_rule_re.ode), ODEs_equiv.env_sol(chain_rule_re.D, chain_rule_re.envi, chain_rule_re.ode)(chain_rule_re.t)))}")))
 (|init3_re_der_chain_TCC2| 0
  (|init3_re_der_chain_TCC2-1| |nil| 3853940404
   ("" (SKEEP) (("" (LEMMA "projv_dd") (("" (INST?) NIL NIL)) NIL)) NIL)
   ((|projv_dd| FORMULA-DECL NIL |chain_rule_re| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|dLVar| TYPE-DECL NIL |hp_def| NIL)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|MapExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|max_var| CONST-DECL "nat" |hp_def| NIL)
    (|mapexpr_inj| CONST-DECL "bool" |hp_def| NIL)
    (|ODEs| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|dd?| CONST-DECL "bool" |hp_expr| NIL)
    (|ODEs_s?| CONST-DECL "bool" |ODEs_equiv| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|ddl_dom?| CONST-DECL "bool" |differentiation| NIL)
    (|null_MapExprInj| NAME-JUDGEMENT "MapExprInj" |hp_def| NIL))
   NIL
   (|init3_re_der_chain| SUBTYPE
    "chain_rule_re.projv(hp_def.max_var(chain_rule_re.ode), chain_rule_re.P)"
    "(derivative_domain_multi[(number_fields.+)(1, hp_def.max_var(chain_rule_re.ode))].deriv_domain?)")))
 (|init3_re_der_chain_TCC3| 0
  (|init3_re_der_chain_TCC3-1| |nil| 3853940404
   ("" (SKEEP)
    (("" (EXPAND "projv" 1)
      (("" (INST 1 "env_sol(D,envi,ode)(t)")
        (("" (ASSERT) (("" (TYPEPRED "t") (("" (INST -2 "t") NIL NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|projv| CONST-DECL "bool" |chain_rule_re| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|max_var| CONST-DECL "nat" |hp_def| NIL)
    (|differentiable_re_p?| CONST-DECL "bool" |chain_rule_re| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|env_sol| CONST-DECL "Environment" |ODEs_equiv| NIL)
    (|ODEs_s?| CONST-DECL "bool" |ODEs_equiv| NIL)
    (|ODEs| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|mapexpr_inj| CONST-DECL "bool" |hp_def| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|MapExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|dLVar| TYPE-DECL NIL |hp_def| NIL)
    (|dd?| CONST-DECL "bool" |hp_expr| NIL)
    (|ddl_dom?| CONST-DECL "bool" |differentiation| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (P SKOLEM-CONST-DECL "(ddl_dom?)" |chain_rule_re| NIL)
    (D SKOLEM-CONST-DECL "(dd?)" |chain_rule_re| NIL)
    (|envi| SKOLEM-CONST-DECL "Environment" |chain_rule_re| NIL)
    (|ode| SKOLEM-CONST-DECL "(ODEs_s?(D, envi))" |chain_rule_re| NIL)
    (R SKOLEM-CONST-DECL "RealExpr" |chain_rule_re| NIL)
    (|t| SKOLEM-CONST-DECL "{t: (D) |
   (FORALL (tt: (D)): P(env_sol(D, envi, ode)(tt))) AND
    differentiable_re_p?(max_var(ode), P, env_sol(D, envi, ode)(t))(R)}"
     |chain_rule_re| NIL)
    (|null_MapExprInj| NAME-JUDGEMENT "MapExprInj" |hp_def| NIL))
   NIL
   (|init3_re_der_chain| SUBTYPE
    "chain_rule_re.env_2_vec(hp_def.max_var(chain_rule_re.ode), ODEs_equiv.env_sol(chain_rule_re.D, chain_rule_re.envi, chain_rule_re.ode)(chain_rule_re.t))"
    "(chain_rule_re.projv(hp_def.max_var(chain_rule_re.ode), chain_rule_re.P))")))
 (|init3_re_der_chain_TCC4| 0
  (|init3_re_der_chain_TCC4-1| |nil| 3853940404
   ("" (SKEEP)
    (("" (LEMMA "e2v_diff_p") (("" (INST?) (("" (ASSERT) NIL NIL)) NIL)) NIL))
    NIL)
   ((|e2v_diff_p| FORMULA-DECL NIL |chain_rule_re| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|max_var| CONST-DECL "nat" |hp_def| NIL)
    (|differentiable_re_p?| CONST-DECL "bool" |chain_rule_re| NIL)
    (|env_sol| CONST-DECL "Environment" |ODEs_equiv| NIL)
    (|ODEs_s?| CONST-DECL "bool" |ODEs_equiv| NIL)
    (|ODEs| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|mapexpr_inj| CONST-DECL "bool" |hp_def| NIL)
    (|MapExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|dLVar| TYPE-DECL NIL |hp_def| NIL)
    (|ddl_dom?| CONST-DECL "bool" |differentiation| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|lift_rd| CONST-DECL "domain[1]" |lift_real_fun_def| |mv_analysis|)
    (|domain| TYPE-EQ-DECL NIL |domain_vec2real_def| |mv_analysis|)
    (|real_dom| TYPE-EQ-DECL NIL |lift_real_fun_def| |mv_analysis|)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|dd?| CONST-DECL "bool" |hp_expr| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic|
     |mv_analysis|)
    (|null_MapExprInj| NAME-JUDGEMENT "MapExprInj" |hp_def| NIL))
   NIL
   (|init3_re_der_chain| SUBTYPE
    "lift_real_fun_def.liftl((number_fields.+)(hp_def.max_var(chain_rule_re.ode), 1), chain_rule_re.D, (LAMBDA (tt: (chain_rule_re.D)): chain_rule_re.env_2_vec(hp_def.max_var(chain_rule_re.ode), ODEs_equiv.env_sol(chain_rule_re.D, chain_rule_re.envi, chain_rule_re.ode)(tt))))"
    "{ff: domain_vec2real_def[1].vec2vec((number_fields.+)(1, hp_def.max_var(chain_rule_re.ode))) | convergence_vec2vec[1].differentiable?((number_fields.+)(1, hp_def.max_var(chain_rule_re.ode)), lift_real_fun_def.lift_rd(chain_rule_re.D), ff, (: chain_rule_re.t :))}")))
 (|init3_re_der_chain_TCC5| 0
  (|init3_re_der_chain_TCC5-1| |nil| 3853940404
   ("" (SKEEP)
    (("" (LEMMA "dd_lift_dd")
      (("" (INST?)
        (("" (ASSERT)
          (("" (TYPEPRED "D")
            (("" (LEMMA "dd_deriv_domain") (("" (INST?) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|dd_lift_dd| FORMULA-DECL NIL |lift_real_fun_def| |mv_analysis|)
    (|dd_deriv_domain| FORMULA-DECL NIL |hp_expr| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|dd?| CONST-DECL "bool" |hp_expr| NIL)
    (|real_dom| TYPE-EQ-DECL NIL |lift_real_fun_def| |mv_analysis|)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic|
     |mv_analysis|)
    (|null_MapExprInj| NAME-JUDGEMENT "MapExprInj" |hp_def| NIL))
   NIL
   (|init3_re_der_chain| SUBTYPE "lift_real_fun_def.lift_rd(chain_rule_re.D)"
    "(derivative_domain_multi[1].deriv_domain?)")))
 (|init3_re_der_chain_TCC6| 0
  (|init3_re_der_chain_TCC6-1| |nil| 3853940404
   ("" (SKEEP)
    (("" (ASSERT) (("" (EXPAND "lift_rd" 1) (("" (PROPAX) NIL NIL)) NIL)) NIL))
    NIL)
   ((|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|lift_rd| CONST-DECL "domain[1]" |lift_real_fun_def| |mv_analysis|)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic|
     |mv_analysis|)
    (|null_MapExprInj| NAME-JUDGEMENT "MapExprInj" |hp_def| NIL))
   NIL
   (|init3_re_der_chain| SUBTYPE "(: chain_rule_re.t :)"
    "(lift_real_fun_def.lift_rd(chain_rule_re.D))")))
 (|init3_re_der_chain_TCC7| 0
  (|init3_re_der_chain_TCC7-1| |nil| 3853940404
   ("" (SKEEP) (("" (SKEEP) (("" (ASSERT) NIL NIL)) NIL)) NIL)
   ((|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic|
     |mv_analysis|)
    (|null_MapExprInj| NAME-JUDGEMENT "MapExprInj" |hp_def| NIL))
   NIL
   (|init3_re_der_chain| SUBTYPE "chain_rule_re.i" "below[length[real](A)]")))
 (|init3_re_der_chain_TCC8| 0
  (|init3_re_der_chain_TCC8-1| |nil| 3853940404
   ("" (SKEEP)
    (("" (SKEEP)
      (("" (ASSERT)
        (("" (TYPEPRED "B")
          (("" (TYPEPRED "i")
            (("" (EXPAND "rows" -3 1) (("" (ASSERT) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|Matrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|rows| CONST-DECL "nat" |matrices| |matrices|)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|domain| TYPE-EQ-DECL NIL |domain_vec2real_def| |mv_analysis|)
    (|deriv_domain?| CONST-DECL "bool" |derivative_domain_multi| |mv_analysis|)
    (|vec2vec| TYPE-EQ-DECL NIL |domain_vec2real_def| |mv_analysis|)
    (|differentiable?| CONST-DECL "bool" |convergence_vec2vec| |mv_analysis|)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|MatrixMN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|vec2real_f| TYPE-EQ-DECL NIL |domain_vec2real_def| |mv_analysis|)
    (|convergence_zero?| CONST-DECL "bool" |vector_sequences| |mv_analysis|)
    (NQ CONST-DECL "bool" |differentiable_def| |mv_analysis|)
    (NQ CONST-DECL "real" |convergence_vec2vec| |mv_analysis|)
    (|zero_vec| DEF-DECL "VectorN(m)" |vector_arithmetic| |mv_analysis|)
    (|der_f| CONST-DECL "{T: MatrixMN(m, n) |
   convergence_zero?(NQ(D, p), NQ(m, f, p, T), zero_vec(n))}"
     |convergence_vec2vec| |mv_analysis|)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|dLVar| TYPE-DECL NIL |hp_def| NIL)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|MapExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|max_var| CONST-DECL "nat" |hp_def| NIL)
    (|mapexpr_inj| CONST-DECL "bool" |hp_def| NIL)
    (|ODEs| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|dd?| CONST-DECL "bool" |hp_expr| NIL)
    (|ODEs_s?| CONST-DECL "bool" |ODEs_equiv| NIL)
    (|real_dom| TYPE-EQ-DECL NIL |lift_real_fun_def| |mv_analysis|)
    (|lift_rd| CONST-DECL "domain[1]" |lift_real_fun_def| |mv_analysis|)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|ddl_dom?| CONST-DECL "bool" |differentiation| NIL)
    (|env_sol| CONST-DECL "Environment" |ODEs_equiv| NIL)
    (|differentiable_re_p?| CONST-DECL "bool" |chain_rule_re| NIL)
    (|liftl| CONST-DECL "vec2vec[1](k)" |lift_real_fun_def| |mv_analysis|)
    (|env_2_vec| DEF-DECL "VectorN(k + 1)" |chain_rule_re| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic|
     |mv_analysis|)
    (|null_MapExprInj| NAME-JUDGEMENT "MapExprInj" |hp_def| NIL))
   NIL
   (|init3_re_der_chain| SUBTYPE "chain_rule_re.i" "below[length[real](B)]")))
 (|init3_re_der_chain_TCC9| 0
  (|init3_re_der_chain_TCC9-1| |nil| 3853940404
   ("" (SKEEP)
    (("" (LEMMA "re_diff_chain")
      (("" (INST?)
        (("" (ASSERT)
          (("" (INST -1 "P") (("" (TYPEPRED "t") (("" (ASSERT) NIL NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|re_diff_chain| FORMULA-DECL NIL |chain_rule_re| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|max_var| CONST-DECL "nat" |hp_def| NIL)
    (|differentiable_re_p?| CONST-DECL "bool" |chain_rule_re| NIL)
    (|env_sol| CONST-DECL "Environment" |ODEs_equiv| NIL)
    (|ddl_dom?| CONST-DECL "bool" |differentiation| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|ODEs_s?| CONST-DECL "bool" |ODEs_equiv| NIL)
    (|ODEs| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|mapexpr_inj| CONST-DECL "bool" |hp_def| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|MapExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|dLVar| TYPE-DECL NIL |hp_def| NIL)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|dd?| CONST-DECL "bool" |hp_expr| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic|
     |mv_analysis|)
    (|null_MapExprInj| NAME-JUDGEMENT "MapExprInj" |hp_def| NIL))
   NIL
   (|init3_re_der_chain| SUBTYPE "chain_rule_re.t"
    "{x | derivatives_def[(chain_rule_re.D)].derivable?(LAMBDA (tt: (chain_rule_re.D)): chain_rule_re.R(ODEs_equiv.env_sol(chain_rule_re.D, chain_rule_re.envi, chain_rule_re.ode)(tt)), x)}")))
 (|init3_re_der_chain_TCC10| 0
  (|init3_re_der_chain_TCC10-1| |nil| 3853940404
   ("" (SKEEP) (("" (LEMMA "dd_deriv_domain") (("" (INST?) NIL NIL)) NIL)) NIL)
   ((|dd_deriv_domain| FORMULA-DECL NIL |hp_expr| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|dd?| CONST-DECL "bool" |hp_expr| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic|
     |mv_analysis|)
    (|null_MapExprInj| NAME-JUDGEMENT "MapExprInj" |hp_def| NIL))
   NIL
   (|init3_re_der_chain| ASSUMING
    "analysis@derivatives_def[(chain_rule_re.D)].derivatives_def"
    "deriv_domain: ASSUMPTION deriv_domain_def[T].deriv_domain?")))
 (|init3_re_der_chain_TCC11| 0
  (|init3_re_der_chain_TCC11-1| |nil| 3853940404
   ("" (SKEEP) (("" (LEMMA "dd_noe") (("" (INST?) NIL NIL)) NIL)) NIL)
   ((|dd_noe| FORMULA-DECL NIL |hp_expr| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|dd?| CONST-DECL "bool" |hp_expr| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic|
     |mv_analysis|)
    (|null_MapExprInj| NAME-JUDGEMENT "MapExprInj" |hp_def| NIL))
   NIL
   (|init3_re_der_chain| ASSUMING
    "analysis@derivatives_def[(chain_rule_re.D)].derivatives_def"
    "not_one_element: ASSUMPTION deriv_domain_def[T].not_one_element?")))
 (|init3_re_der_chain| 0
  (|init3_re_der_chain-1| |nil| 3853940489
   ("" (SKEEP)
    (("" (SKOLETIN*)
      (("" (LEMMA "init2_re_der_chain")
        (("" (INST?)
          (("" (ASSERT)
            (("" (SPLIT -1)
              (("1" (REPLACE -1 1 LR)
                (("1" (REPLACE -3 1 RL)
                  (("1" (REPLACE -4 1 RL)
                    (("1" (LEMMA "dot_is_sigma")
                      (("1" (INST -1 "A_1" "B")
                        (("1" (ASSERT)
                          (("1" (SPLIT -1)
                            (("1" (REPLACE -1 1)
                              (("1" (TYPEPRED "A_1")
                                (("1" (HIDE -1)
                                  (("1" (REPLACE -1)
                                    (("1" (ASSERT)
                                      (("1"
                                        (CASE "sumf = LAMBDA (i: nat):
              IF i < 1 + max_var(ode) THEN nth(A_1, i) * nth(B, i)
              ELSE 0
              ENDIF")
                                        (("1" (ASSERT) NIL NIL)
                                         ("2" (HIDE 2)
                                          (("2" (DECOMPOSE-EQUALITY 1)
                                            (("1"
                                              (CASE "x!1 < 1 + max_var(ode)")
                                              (("1" (ASSERT)
                                                (("1" (EXPAND "sumf" 1)
                                                  (("1" (PROPAX) NIL NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (ASSERT)
                                                (("2" (EXPAND "sumf" 2)
                                                  (("2" (PROPAX) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2" (SKEEP)
                                              (("2" (ASSERT)
                                                (("2" (HIDE -5)
                                                  (("2" (HIDE -3)
                                                    (("2" (HIDE -3)
                                                      (("2" (TYPEPRED "B")
                                                        (("2"
                                                          (EXPAND "rows" -2 1)
                                                          (("2" (ASSERT) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("3" (SKEEP)
                                              (("3" (ASSERT) NIL NIL)) NIL))
                                            NIL))
                                          NIL)
                                         ("3" (HIDE 2)
                                          (("3" (SKEEP)
                                            (("3" (ASSERT)
                                              (("3" (TYPEPRED "B")
                                                (("3" (EXPAND "rows" -2)
                                                  (("3" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("4" (HIDE 2)
                                          (("4" (SKEEP)
                                            (("4" (ASSERT) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (ASSERT)
                              (("2" (TYPEPRED "A_1" "B")
                                (("2" (EXPAND "rows" -5 1)
                                  (("2" (ASSERT) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (TYPEPRED "B")
                          (("2" (EXPAND "rows" -2) (("2" (ASSERT) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (HIDE 2) (("2" (REVEAL -) (("2" (ASSERT) NIL NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|deriv| CONST-DECL "real" |derivatives_def| |analysis|)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|T_low| TYPE-EQ-DECL NIL |sigma| |reals|)
    (|T_high| TYPE-EQ-DECL NIL |sigma| |reals|)
    (|sigma| DEF-DECL "real" |sigma| |reals|)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic|
     |mv_analysis|)
    (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|not_one_element?| CONST-DECL "bool" |deriv_domain_def| |analysis|)
    (|deriv_domain?| CONST-DECL "bool" |deriv_domain_def| |analysis|)
    (|derivable?| CONST-DECL "bool" |derivatives_def| |analysis|)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|col| DEF-DECL "VectorN(rows(M))" |matrices| |matrices|)
    (|der_f| CONST-DECL "{T: MatrixMN(m, n) |
   convergence_zero?(NQ(D, p), NQ(m, f, p, T), zero_vec(n))}"
     |convergence_vec2vec| |mv_analysis|)
    (NQ CONST-DECL "real" |convergence_vec2vec| |mv_analysis|)
    (|MatrixMN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|rows| CONST-DECL "nat" |matrices| |matrices|)
    (|Matrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|liftl| CONST-DECL "vec2vec[1](k)" |lift_real_fun_def| |mv_analysis|)
    (|lift_rd| CONST-DECL "domain[1]" |lift_real_fun_def| |mv_analysis|)
    (|real_dom| TYPE-EQ-DECL NIL |lift_real_fun_def| |mv_analysis|)
    (|differentiable?| CONST-DECL "bool" |convergence_vec2vec| |mv_analysis|)
    (|vec2vec| TYPE-EQ-DECL NIL |domain_vec2real_def| |mv_analysis|)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|der_f| CONST-DECL
     "{gg: VectorN(n) | convergence_zero?(NQ(D, p), NQ(f, gg, p), zero_vec(n))}"
     |differentiable_def| |mv_analysis|)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|zero_vec| DEF-DECL "VectorN(m)" |vector_arithmetic| |mv_analysis|)
    (NQ CONST-DECL "real" |differentiable_def| |mv_analysis|)
    (NQ CONST-DECL "bool" |differentiable_def| |mv_analysis|)
    (|convergence_zero?| CONST-DECL "bool" |vector_sequences| |mv_analysis|)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|dLVar| TYPE-DECL NIL |hp_def| NIL)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|MapExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|max_var| CONST-DECL "nat" |hp_def| NIL)
    (|mapexpr_inj| CONST-DECL "bool" |hp_def| NIL)
    (|ODEs| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|dd?| CONST-DECL "bool" |hp_expr| NIL)
    (|ODEs_s?| CONST-DECL "bool" |ODEs_equiv| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|domain| TYPE-EQ-DECL NIL |domain_vec2real_def| |mv_analysis|)
    (|deriv_domain?| CONST-DECL "bool" |derivative_domain_multi| |mv_analysis|)
    (|vec2real_f| TYPE-EQ-DECL NIL |domain_vec2real_def| |mv_analysis|)
    (|differentiable?| CONST-DECL "bool" |differentiable_def| |mv_analysis|)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|projv| CONST-DECL "bool" |chain_rule_re| NIL)
    (|ddl_dom?| CONST-DECL "bool" |differentiation| NIL)
    (|vec_re| CONST-DECL "real" |chain_rule_re| NIL)
    (|env_sol| CONST-DECL "Environment" |ODEs_equiv| NIL)
    (|differentiable_re_p?| CONST-DECL "bool" |chain_rule_re| NIL)
    (|env_2_vec| DEF-DECL "VectorN(k + 1)" |chain_rule_re| NIL)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|dot_is_sigma| FORMULA-DECL NIL |vector_arithmetic| |mv_analysis|)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|sumf| SKOLEM-CONST-DECL "[nat -> real]" |chain_rule_re| NIL)
    (A_1 SKOLEM-CONST-DECL "{gg: VectorN(1 + max_var(ode)) |
   convergence_zero?[1 + max_var(ode)]
       (NQ[1 + max_var(ode)]
            (projv(max_var(ode), P),
             env_2_vec(max_var(ode), env_sol(D, envi, ode)(t))),
        NQ[1 + max_var(ode)]
            (vec_re(max_var(ode), env_sol(D, envi, ode)(t), R), gg,
             env_2_vec(max_var(ode), env_sol(D, envi, ode)(t))),
        zero_vec(1 + max_var(ode)))}"
     |chain_rule_re| NIL)
    (D SKOLEM-CONST-DECL "(dd?)" |chain_rule_re| NIL)
    (|envi| SKOLEM-CONST-DECL "Environment" |chain_rule_re| NIL)
    (|ode| SKOLEM-CONST-DECL "(ODEs_s?(D, envi))" |chain_rule_re| NIL)
    (P SKOLEM-CONST-DECL "(ddl_dom?)" |chain_rule_re| NIL)
    (R SKOLEM-CONST-DECL "RealExpr" |chain_rule_re| NIL)
    (|t| SKOLEM-CONST-DECL "{t: (D) |
   (FORALL (tt: (D)): P(env_sol(D, envi, ode)(tt))) AND
    differentiable_re_p?(max_var(ode), P, env_sol(D, envi, ode)(t))(R)}"
     |chain_rule_re| NIL)
    (B SKOLEM-CONST-DECL "VectorN(rows(der_f[1]
                 (1 + max_var(ode), lift_rd(D), (: t :))
                 (liftl(1 + max_var(ode), D,
                        LAMBDA (tt: (D)):
                          env_2_vec(max_var(ode),
                                    env_sol(D, envi, ode)(tt))))))"
     |chain_rule_re| NIL)
    (|init2_re_der_chain| FORMULA-DECL NIL |chain_rule_re| NIL)
    (|null_MapExprInj| NAME-JUDGEMENT "MapExprInj" |hp_def| NIL))
   SHOSTAK))
 (|SUB_DIFTRe_sig_TCC1| 0
  (|SUB_DIFTRe_sig_TCC1-1| |nil| 3853942588
   ("" (SKEEP)
    (("" (LEMMA "re_diff_chain")
      (("" (INST?)
        (("" (INST -1 "P")
          (("" (ASSERT)
            (("" (TYPEPRED "t")
              (("" (TYPEPRED "R")
                (("" (EXPAND "diff_re?" -1)
                  (("" (INST?)
                    (("1" (ASSERT) NIL NIL) ("2" (INST -2 "t") NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|re_diff_chain| FORMULA-DECL NIL |chain_rule_re| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (P SKOLEM-CONST-DECL "(ddl_dom?)" |chain_rule_re| NIL)
    (|env_sol| CONST-DECL "Environment" |ODEs_equiv| NIL)
    (D SKOLEM-CONST-DECL "(dd?)" |chain_rule_re| NIL)
    (|envi| SKOLEM-CONST-DECL "Environment" |chain_rule_re| NIL)
    (|ode| SKOLEM-CONST-DECL "(ODEs_s?(D, envi))" |chain_rule_re| NIL)
    (|t| SKOLEM-CONST-DECL "(D)" |chain_rule_re| NIL)
    (|max_var| CONST-DECL "nat" |hp_def| NIL)
    (|diff_re?| CONST-DECL "bool" |chain_rule_re| NIL)
    (|ddl_dom?| CONST-DECL "bool" |differentiation| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|ODEs_s?| CONST-DECL "bool" |ODEs_equiv| NIL)
    (|ODEs| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|mapexpr_inj| CONST-DECL "bool" |hp_def| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|MapExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|dLVar| TYPE-DECL NIL |hp_def| NIL)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|dd?| CONST-DECL "bool" |hp_expr| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|null_MapExprInj| NAME-JUDGEMENT "MapExprInj" |hp_def| NIL))
   NIL
   (|SUB_DIFTRe_sig| SUBTYPE "chain_rule_re.t"
    "{x | derivatives_def[(chain_rule_re.D)].derivable?(LAMBDA (tt: (chain_rule_re.D)): chain_rule_re.R(ODEs_equiv.env_sol(chain_rule_re.D, chain_rule_re.envi, chain_rule_re.ode)(tt)), x)}")))
 (|SUB_DIFTRe_sig_TCC2| 0
  (|SUB_DIFTRe_sig_TCC2-1| |nil| 3853942588
   ("" (SKEEP) (("" (LEMMA "dd_deriv_domain") (("" (INST?) NIL NIL)) NIL)) NIL)
   ((|dd_deriv_domain| FORMULA-DECL NIL |hp_expr| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|dd?| CONST-DECL "bool" |hp_expr| NIL)
    (|null_MapExprInj| NAME-JUDGEMENT "MapExprInj" |hp_def| NIL))
   NIL
   (|SUB_DIFTRe_sig| ASSUMING
    "analysis@derivatives_def[(chain_rule_re.D)].derivatives_def"
    "deriv_domain: ASSUMPTION deriv_domain_def[T].deriv_domain?")))
 (|SUB_DIFTRe_sig_TCC3| 0
  (|SUB_DIFTRe_sig_TCC3-1| |nil| 3853942588
   ("" (SKEEP) (("" (LEMMA "dd_noe") (("" (INST?) NIL NIL)) NIL)) NIL)
   ((|dd_noe| FORMULA-DECL NIL |hp_expr| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|dd?| CONST-DECL "bool" |hp_expr| NIL)
    (|null_MapExprInj| NAME-JUDGEMENT "MapExprInj" |hp_def| NIL))
   NIL
   (|SUB_DIFTRe_sig| ASSUMING
    "analysis@derivatives_def[(chain_rule_re.D)].derivatives_def"
    "not_one_element: ASSUMPTION deriv_domain_def[T].not_one_element?")))
 (|SUB_DIFTRe_sig| 0
  (|SUB_DIFTRe_sig-1| |nil| 3853942621
   ("" (LEMMA "init3_re_der_chain")
    (("" (SKEEP)
      (("" (INST?)
        (("" (INST -1 "P" "t")
          (("1" (SKOLETIN*)
            (("1" (EXPAND "SUB_DIFTRe" 1)
              (("1" (EXPAND "DIFT_Re" 1)
                (("1" (LEMMA " sum_it_sigma")
                  (("1" (EXPAND "sum_it" 1)
                    (("1"
                      (INST -1 "LAMBDA (i_1: nat):
                       IF derivable?(i_1, P)(R)
                         THEN (partial_diff(i_1, P)(R) * ddt(ode)(i_1))
                                  (env_sol(D, envi, ode)(t))
                       ELSE cnst(0)(env_sol(D, envi, ode)(t))
                       ENDIF"
                       "max_var(ode)" "0")
                      (("1" (REPLACE -1 1)
                        (("1" (REPLACE -2 1)
                          (("1" (LEMMA " sigma_eq ")
                            (("1" (INST?)
                              (("1" (ASSERT)
                                (("1" (HIDE 2)
                                  (("1" (SKEEP)
                                    (("1" (TYPEPRED "n")
                                      (("1" (LEMMA "diff_re_derivable_partial")
                                        (("1" (INST?)
                                          (("1" (ASSERT)
                                            (("1" (EXPAND "sumf" 1)
                                              (("1"
                                                (LEMMA "der_ll_partial_der")
                                                (("1" (TYPEPRED "ode")
                                                  (("1"
                                                    (INST -3 "D" "P" "(: t:)"
                                                     "envi" "ode" "R" "n")
                                                    (("1" (ASSERT)
                                                      (("1" (SPLIT -3)
                                                        (("1"
                                                          (REPLACE -11 -1 RL)
                                                          (("1"
                                                            (REPLACE -1 1 LR)
                                                            (("1"
                                                              (EXPAND "*" 1 1)
                                                              (("1"
                                                                (TYPEPRED "n")
                                                                (("1"
                                                                  (CASE
                                                                      "null?(ode)")
                                                                  (("1"
                                                                    (EXPAND
                                                                     "max_var"
                                                                     -3)
                                                                    (("1"
                                                                      (EXPAND
                                                                       "max_var_rec"
                                                                       -3)
                                                                      (("1"
                                                                        (ASSERT)
                                                                        (("1"
                                                                          (EXPAND
                                                                           "ddt"
                                                                           1 1)
                                                                          (("1"
                                                                            (EXPAND
                                                                             "cnst"
                                                                             1
                                                                             1)
                                                                            (("1"
                                                                              (ASSERT)
                                                                              (("1"
                                                                                (LEMMA
                                                                                 "e2v_der_p_not_in_map")
                                                                                (("1"
                                                                                  (INST
                                                                                   -1
                                                                                   "D"
                                                                                   "(: t :)"
                                                                                   "envi"
                                                                                   "ode"
                                                                                   "n")
                                                                                  (("1"
                                                                                    (ASSERT)
                                                                                    (("1"
                                                                                      (CASE
                                                                                          "NOT not_in_map(ode)(n)")
                                                                                      (("1"
                                                                                        (EXPAND
                                                                                         "not_in_map"
                                                                                         1
                                                                                         1)
                                                                                        (("1"
                                                                                          (SKEEP
                                                                                           1)
                                                                                          (("1"
                                                                                            (TYPEPRED
                                                                                             "i")
                                                                                            (("1"
                                                                                              (EXPAND
                                                                                               "length"
                                                                                               -1)
                                                                                              (("1"
                                                                                                (ASSERT)
                                                                                                NIL
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL)
                                                                                       ("2"
                                                                                        (ASSERT)
                                                                                        (("2"
                                                                                          (REPLACE
                                                                                           -15
                                                                                           1)
                                                                                          (("2"
                                                                                            (CASE
                                                                                                " nth((col(der_f[1]
                                        (1 + max_var(ode), lift_rd(D), (: t :))
                                        (liftl(1 + max_var(ode), D,
                                               LAMBDA (tt: (D)):
                                                 env_2_vec(max_var(ode),
                                                           env_sol(D, envi, ode)(tt)))))
                                   (0)),n) = 0")
                                                                                            (("1"
                                                                                              (ASSERT)
                                                                                              NIL
                                                                                              NIL)
                                                                                             ("2"
                                                                                              (HIDE
                                                                                               2)
                                                                                              (("2"
                                                                                                (HIDE
                                                                                                 -15)
                                                                                                (("2"
                                                                                                  (HIDE
                                                                                                   -12)
                                                                                                  (("2"
                                                                                                    (LEMMA
                                                                                                     "col_def")
                                                                                                    (("2"
                                                                                                      (INST?)
                                                                                                      (("2"
                                                                                                        (FLATTEN)
                                                                                                        (("2"
                                                                                                          (INST
                                                                                                           -2
                                                                                                           "0")
                                                                                                          (("1"
                                                                                                            (ASSERT)
                                                                                                            (("1"
                                                                                                              (CASE
                                                                                                                  "NOT n=0")
                                                                                                              (("1"
                                                                                                                (ASSERT)
                                                                                                                NIL
                                                                                                                NIL)
                                                                                                               ("2"
                                                                                                                (REPLACE
                                                                                                                 -1)
                                                                                                                (("2"
                                                                                                                  (REPLACE
                                                                                                                   -3
                                                                                                                   1)
                                                                                                                  (("2"
                                                                                                                    (LIFT-IF
                                                                                                                     1)
                                                                                                                    (("2"
                                                                                                                      (SPLIT
                                                                                                                       1)
                                                                                                                      (("1"
                                                                                                                        (FLATTEN)
                                                                                                                        (("1"
                                                                                                                          (ASSERT)
                                                                                                                          (("1"
                                                                                                                            (REPLACE
                                                                                                                             -6
                                                                                                                             1)
                                                                                                                            (("1"
                                                                                                                              (EXPAND
                                                                                                                               "nth"
                                                                                                                               1)
                                                                                                                              (("1"
                                                                                                                                (PROPAX)
                                                                                                                                NIL
                                                                                                                                NIL))
                                                                                                                              NIL))
                                                                                                                            NIL))
                                                                                                                          NIL))
                                                                                                                        NIL)
                                                                                                                       ("2"
                                                                                                                        (PROPAX)
                                                                                                                        NIL
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL)
                                                                                                           ("2"
                                                                                                            (HIDE
                                                                                                             2)
                                                                                                            (("2"
                                                                                                              (EXPAND
                                                                                                               "rows"
                                                                                                               1)
                                                                                                              (("2"
                                                                                                                (ASSERT)
                                                                                                                NIL
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL)
                                                                   ("2"
                                                                    (ASSERT)
                                                                    (("2"
                                                                      (LEMMA
                                                                       "ddt_not_in_map")
                                                                      (("2"
                                                                        (CASE
                                                                            "not_in_map(ode)(n)")
                                                                        (("1"
                                                                          (INST
                                                                           -2
                                                                           "ode"
                                                                           "n")
                                                                          (("1"
                                                                            (REPLACE
                                                                             -2)
                                                                            (("1"
                                                                              (EXPAND
                                                                               "cnst"
                                                                               2)
                                                                              (("1"
                                                                                (LEMMA
                                                                                 "e2v_der_p_not_in_map")
                                                                                (("1"
                                                                                  (HIDE
                                                                                   -12)
                                                                                  (("1"
                                                                                    (INST
                                                                                     -1
                                                                                     "D"
                                                                                     "(: t :)"
                                                                                     "envi"
                                                                                     "ode"
                                                                                     "n")
                                                                                    (("1"
                                                                                      (ASSERT)
                                                                                      (("1"
                                                                                        (ASSERT)
                                                                                        (("1"
                                                                                          (LEMMA
                                                                                           "col_def")
                                                                                          (("1"
                                                                                            (INST?)
                                                                                            (("1"
                                                                                              (FLATTEN)
                                                                                              (("1"
                                                                                                (INST
                                                                                                 -2
                                                                                                 "n")
                                                                                                (("1"
                                                                                                  (REPLACE
                                                                                                   -16
                                                                                                   2
                                                                                                   LR)
                                                                                                  (("1"
                                                                                                    (REPLACE
                                                                                                     -2
                                                                                                     2)
                                                                                                    (("1"
                                                                                                      (LIFT-IF
                                                                                                       2)
                                                                                                      (("1"
                                                                                                        (SPLIT
                                                                                                         2)
                                                                                                        (("1"
                                                                                                          (FLATTEN)
                                                                                                          (("1"
                                                                                                            (ASSERT)
                                                                                                            (("1"
                                                                                                              (REPLACE
                                                                                                               -4
                                                                                                               1)
                                                                                                              (("1"
                                                                                                                (EXPAND
                                                                                                                 "nth"
                                                                                                                 1)
                                                                                                                (("1"
                                                                                                                  (PROPAX)
                                                                                                                  NIL
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL)
                                                                                                         ("2"
                                                                                                          (ASSERT)
                                                                                                          NIL
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL)
                                                                                                 ("2"
                                                                                                  (EXPAND
                                                                                                   "rows"
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (ASSERT)
                                                                                                    NIL
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL)
                                                                         ("2"
                                                                          (LEMMA
                                                                           "ddt_in_map")
                                                                          (("2"
                                                                            (INST
                                                                             -1
                                                                             "ode"
                                                                             "n")
                                                                            (("1"
                                                                              (SKOLETIN*)
                                                                              (("1"
                                                                                (REPLACE
                                                                                 -1)
                                                                                (("1"
                                                                                  (LEMMA
                                                                                   "e2v_der_p_in_map_ode")
                                                                                  (("1"
                                                                                    (HIDE
                                                                                     -13)
                                                                                    (("1"
                                                                                      (HIDE
                                                                                       -14)
                                                                                      (("1"
                                                                                        (INST
                                                                                         -1
                                                                                         "D"
                                                                                         "(: t :)"
                                                                                         "envi"
                                                                                         "ode"
                                                                                         "n")
                                                                                        (("1"
                                                                                          (SKOLETIN*)
                                                                                          (("1"
                                                                                            (EXPAND
                                                                                             "expr"
                                                                                             -3)
                                                                                            (("1"
                                                                                              (LEMMA
                                                                                               "col_def")
                                                                                              (("1"
                                                                                                (INST?)
                                                                                                (("1"
                                                                                                  (ASSERT)
                                                                                                  (("1"
                                                                                                    (INST
                                                                                                     -1
                                                                                                     "n")
                                                                                                    (("1"
                                                                                                      (REPLACE
                                                                                                       -18
                                                                                                       3)
                                                                                                      (("1"
                                                                                                        (REPLACE
                                                                                                         -1
                                                                                                         3)
                                                                                                        (("1"
                                                                                                          (LIFT-IF
                                                                                                           3)
                                                                                                          (("1"
                                                                                                            (SPLIT
                                                                                                             3)
                                                                                                            (("1"
                                                                                                              (FLATTEN)
                                                                                                              (("1"
                                                                                                                (ASSERT)
                                                                                                                (("1"
                                                                                                                  (REPLACE
                                                                                                                   -3
                                                                                                                   1)
                                                                                                                  (("1"
                                                                                                                    (EXPAND
                                                                                                                     "nth"
                                                                                                                     1
                                                                                                                     2)
                                                                                                                    (("1"
                                                                                                                      (ASSERT)
                                                                                                                      (("1"
                                                                                                                        (CASE
                                                                                                                            " nth(ode, k)`2(env_sol(D, envi, ode)(t)) =   re(env_sol(D, envi, ode)(t))")
                                                                                                                        (("1"
                                                                                                                          (ASSERT)
                                                                                                                          NIL
                                                                                                                          NIL)
                                                                                                                         ("2"
                                                                                                                          (HIDE
                                                                                                                           2)
                                                                                                                          (("2"
                                                                                                                            (HIDE
                                                                                                                             -1
                                                                                                                             -2
                                                                                                                             -3)
                                                                                                                            (("2"
                                                                                                                              (TYPEPRED
                                                                                                                               "k")
                                                                                                                              (("2"
                                                                                                                                (HIDE
                                                                                                                                 -17
                                                                                                                                 -18)
                                                                                                                                (("2"
                                                                                                                                  (HIDE
                                                                                                                                   -7)
                                                                                                                                  (("2"
                                                                                                                                    (HIDE
                                                                                                                                     -9)
                                                                                                                                    (("2"
                                                                                                                                      (HIDE
                                                                                                                                       -9
                                                                                                                                       -10
                                                                                                                                       -11
                                                                                                                                       -12
                                                                                                                                       -13
                                                                                                                                       -14
                                                                                                                                       -15)
                                                                                                                                      (("2"
                                                                                                                                        (TYPEPRED
                                                                                                                                         "ode")
                                                                                                                                        (("2"
                                                                                                                                          (LEMMA
                                                                                                                                           "mapexpr_inj_eq")
                                                                                                                                          (("2"
                                                                                                                                            (INST
                                                                                                                                             -1
                                                                                                                                             "ode")
                                                                                                                                            (("2"
                                                                                                                                              (ASSERT)
                                                                                                                                              (("2"
                                                                                                                                                (INST
                                                                                                                                                 -1
                                                                                                                                                 "k"
                                                                                                                                                 "k_1")
                                                                                                                                                (("1"
                                                                                                                                                  (SPLIT
                                                                                                                                                   -1)
                                                                                                                                                  (("1"
                                                                                                                                                    (FLATTEN)
                                                                                                                                                    (("1"
                                                                                                                                                      (ASSERT)
                                                                                                                                                      NIL
                                                                                                                                                      NIL))
                                                                                                                                                    NIL)
                                                                                                                                                   ("2"
                                                                                                                                                    (FLATTEN)
                                                                                                                                                    (("2"
                                                                                                                                                      (REPLACE
                                                                                                                                                       -1
                                                                                                                                                       -7
                                                                                                                                                       RL)
                                                                                                                                                      (("2"
                                                                                                                                                        (NAME
                                                                                                                                                         "th1"
                                                                                                                                                         " sets
                                                   [naturalnumbers.below(list_props[hp_def.MapExpr].length
                                                                         (ode))].the
                                                   (hp_def.index_of(ode, n))")
                                                                                                                                                        (("2"
                                                                                                                                                          (REPLACE
                                                                                                                                                           -1)
                                                                                                                                                          (("2"
                                                                                                                                                            (TYPEPRED
                                                                                                                                                             "th1")
                                                                                                                                                            (("2"
                                                                                                                                                              (EXPAND
                                                                                                                                                               "index_of"
                                                                                                                                                               -2)
                                                                                                                                                              (("2"
                                                                                                                                                                (ASSERT)
                                                                                                                                                                (("2"
                                                                                                                                                                  (CASE
                                                                                                                                                                      "th1 = k")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (ASSERT)
                                                                                                                                                                    NIL
                                                                                                                                                                    NIL)
                                                                                                                                                                   ("2"
                                                                                                                                                                    (HIDE
                                                                                                                                                                     2)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (LEMMA
                                                                                                                                                                       "mapexpr_inj_eq")
                                                                                                                                                                      (("2"
                                                                                                                                                                        (INST
                                                                                                                                                                         -1
                                                                                                                                                                         "ode")
                                                                                                                                                                        (("2"
                                                                                                                                                                          (ASSERT)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (INST
                                                                                                                                                                             -1
                                                                                                                                                                             "th1"
                                                                                                                                                                             "k")
                                                                                                                                                                            (("2"
                                                                                                                                                                              (ASSERT)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (ASSERT)
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (TYPEPRED
                                                                                                                                                                                   "k")
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (EXPAND
                                                                                                                                                                                     "extend"
                                                                                                                                                                                     -1)
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (SPLIT
                                                                                                                                                                                       -1)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (FLATTEN)
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (ASSERT)
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (EXPAND
                                                                                                                                                                                             "index_of"
                                                                                                                                                                                             -2)
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (DECOMPOSE-EQUALITY
                                                                                                                                                                                               1)
                                                                                                                                                                                              NIL
                                                                                                                                                                                              NIL))
                                                                                                                                                                                            NIL))
                                                                                                                                                                                          NIL))
                                                                                                                                                                                        NIL)
                                                                                                                                                                                       ("2"
                                                                                                                                                                                        (PROPAX)
                                                                                                                                                                                        NIL
                                                                                                                                                                                        NIL))
                                                                                                                                                                                      NIL))
                                                                                                                                                                                    NIL))
                                                                                                                                                                                  NIL))
                                                                                                                                                                                NIL))
                                                                                                                                                                              NIL))
                                                                                                                                                                            NIL))
                                                                                                                                                                          NIL))
                                                                                                                                                                        NIL))
                                                                                                                                                                      NIL))
                                                                                                                                                                    NIL))
                                                                                                                                                                  NIL))
                                                                                                                                                                NIL))
                                                                                                                                                              NIL))
                                                                                                                                                            NIL))
                                                                                                                                                          NIL))
                                                                                                                                                        NIL))
                                                                                                                                                      NIL))
                                                                                                                                                    NIL))
                                                                                                                                                  NIL)
                                                                                                                                                 ("2"
                                                                                                                                                  (ASSERT)
                                                                                                                                                  (("2"
                                                                                                                                                    (TYPEPRED
                                                                                                                                                     "k_1")
                                                                                                                                                    (("2"
                                                                                                                                                      (EXPAND
                                                                                                                                                       "extend"
                                                                                                                                                       -1)
                                                                                                                                                      (("2"
                                                                                                                                                        (PROPAX)
                                                                                                                                                        NIL
                                                                                                                                                        NIL))
                                                                                                                                                      NIL))
                                                                                                                                                    NIL))
                                                                                                                                                  NIL))
                                                                                                                                                NIL))
                                                                                                                                              NIL))
                                                                                                                                            NIL))
                                                                                                                                          NIL))
                                                                                                                                        NIL))
                                                                                                                                      NIL))
                                                                                                                                    NIL))
                                                                                                                                  NIL))
                                                                                                                                NIL))
                                                                                                                              NIL))
                                                                                                                            NIL))
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL)
                                                                                                             ("2"
                                                                                                              (FLATTEN)
                                                                                                              (("2"
                                                                                                                (ASSERT)
                                                                                                                (("2"
                                                                                                                  (REPLACE
                                                                                                                   -2
                                                                                                                   1)
                                                                                                                  (("2"
                                                                                                                    (ASSERT)
                                                                                                                    NIL
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL)
                                                                                                     ("2"
                                                                                                      (EXPAND
                                                                                                       "rows"
                                                                                                       1
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (ASSERT)
                                                                                                        NIL
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL)
                                                                             ("2"
                                                                              (ASSERT)
                                                                              (("2"
                                                                                (HIDE
                                                                                 -)
                                                                                (("2"
                                                                                  (EXPAND
                                                                                   "in_map"
                                                                                   1)
                                                                                  (("2"
                                                                                    (EXPAND
                                                                                     "not_in_map"
                                                                                     2)
                                                                                    (("2"
                                                                                      (SKEEP)
                                                                                      (("2"
                                                                                        (INST
                                                                                         1
                                                                                         "i")
                                                                                        NIL
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL)
                                                         ("2" (INST -11 "t")
                                                          NIL NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (HIDE -)
                                (("2" (SKEEP)
                                  (("2" (TYPEPRED " P")
                                    (("2" (EXPAND "ddl_dom?")
                                      (("2" (FLATTEN)
                                        (("2" (INST -2 "i_1")
                                          (("2" (ASSERT) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("3" (HIDE -)
                                (("3" (TYPEPRED "P")
                                  (("3" (SKEEP)
                                    (("3" (EXPAND "ddl_dom?")
                                      (("3" (FLATTEN)
                                        (("3" (INST -2 "i_1")
                                          (("3" (ASSERT) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (HIDE 2)
                        (("2" (SKEEP)
                          (("2" (TYPEPRED "P")
                            (("2" (EXPAND "ddl_dom?")
                              (("2" (FLATTEN)
                                (("2" (INST -2 "i_1") (("2" (ASSERT) NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("3" (HIDE -)
                        (("3" (HIDE 2)
                          (("3" (SKEEP)
                            (("3" (TYPEPRED "P")
                              (("3" (EXPAND "ddl_dom?")
                                (("3" (FLATTEN)
                                  (("3" (INST -2 "i_1")
                                    (("3" (ASSERT) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (HIDE 2)
            (("2" (ASSERT)
              (("2" (SPLIT 1)
                (("1" (PROPAX) NIL NIL)
                 ("2" (TYPEPRED "R")
                  (("2" (EXPAND "diff_re?" -1) (("2" (INST?) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|null_MapExprInj| NAME-JUDGEMENT "MapExprInj" |hp_def| NIL)
    (R SKOLEM-CONST-DECL "(diff_re?(max_var(ode), P))" |chain_rule_re| NIL)
    (|t| SKOLEM-CONST-DECL "(D)" |chain_rule_re| NIL)
    (|differentiable_re_p?| CONST-DECL "bool" |chain_rule_re| NIL)
    (|ode| SKOLEM-CONST-DECL "(ODEs_s?(D, envi))" |chain_rule_re| NIL)
    (|envi| SKOLEM-CONST-DECL "Environment" |chain_rule_re| NIL)
    (|env_sol| CONST-DECL "Environment" |ODEs_equiv| NIL)
    (P SKOLEM-CONST-DECL "(ddl_dom?)" |chain_rule_re| NIL)
    (D SKOLEM-CONST-DECL "(dd?)" |chain_rule_re| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|SUB_DIFTRe| CONST-DECL "RealExpr" |differentiation| NIL)
    (|sum_it_sigma| FORMULA-DECL NIL |sigma| |reals|)
    (|ddl_dom?| CONST-DECL "bool" |differentiation| NIL)
    (|derivable?| CONST-DECL "bool" |differentiation| NIL)
    (* CONST-DECL "[T -> real]" |real_fun_ops| |reals|)
    (|partial_diff| CONST-DECL "RealExpr" |differentiation| NIL)
    (|ddt| DEF-DECL "RealExpr" |differentiation| NIL)
    (|cnst| CONST-DECL "real" |hp_def| NIL)
    (|subrange| TYPE-EQ-DECL NIL |integers| NIL)
    (|sumf| SKOLEM-CONST-DECL "[nat -> real]" |chain_rule_re| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|max_var_rec| DEF-DECL "nat" |hp_def| NIL)
    (|not_in_map| CONST-DECL "bool" |hp_def| NIL)
    (|MapExprInj| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|col_def| FORMULA-DECL NIL |matrices| |matrices|)
    (|e2v_der_p_not_in_map| FORMULA-DECL NIL |chain_rule_re| NIL)
    (|ddt_not_in_map| FORMULA-DECL NIL |differentiation| NIL)
    (|ddt_in_map| FORMULA-DECL NIL |differentiation| NIL)
    (|index_of| CONST-DECL "bool" |hp_def| NIL)
    (|extend| CONST-DECL "R" |extend| NIL)
    (FALSE CONST-DECL "bool" |booleans| NIL)
    (|singleton?| CONST-DECL "bool" |sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|singleton_extend| APPLICATION-JUDGEMENT "(singleton?[T])"
     |extend_set_props| NIL)
    (|the| CONST-DECL "(p)" |sets| NIL)
    (|index_of_j| APPLICATION-JUDGEMENT
     "(singleton?[below(length[MapExpr](me))])" |hp_def| NIL)
    (|e2v_der_p_in_map_ode| FORMULA-DECL NIL |chain_rule_re| NIL)
    (|solution_odes_u?| CONST-DECL "bool" |hp_expr| NIL)
    (|expr| CONST-DECL "RealExpr" |hp_def| NIL)
    (|fs_sol| CONST-DECL "(solution_odes_u?(D, odes, envi))" |ODEs_equiv| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|mapexpr_inj_eq| FORMULA-DECL NIL |hp_def| NIL)
    (|dlvar?| ADT-RECOGNIZER-DECL "[dLVar -> boolean]" |hp_def| NIL)
    (|dLVar_dlvar_extensionality| FORMULA-DECL NIL |hp_def| NIL)
    (|k_1| SKOLEM-CONST-DECL
     "(extend[nat, below(length[MapExpr](ode)), bool, FALSE](index_of(ode, n)))"
     |chain_rule_re| NIL)
    (|in_map| CONST-DECL "bool" |hp_def| NIL)
    (|n| SKOLEM-CONST-DECL "subrange(0, max_var(ode))" |chain_rule_re| NIL)
    (|der_ll_partial_der| FORMULA-DECL NIL |chain_rule_re| NIL)
    (|diff_re_derivable_partial| FORMULA-DECL NIL |chain_rule_re| NIL)
    (|sigma_eq| FORMULA-DECL NIL |sigma| |reals|)
    (|sum_it| CONST-DECL "real" |differentiation| NIL)
    (|DIFT_Re| CONST-DECL "RealExpr" |differentiation| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|derivable?| CONST-DECL "bool" |derivatives_def| |analysis|)
    (|deriv| CONST-DECL "real" |derivatives_def| |analysis|)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|T_low| TYPE-EQ-DECL NIL |sigma| |reals|)
    (|T_high| TYPE-EQ-DECL NIL |sigma| |reals|)
    (|sigma| DEF-DECL "real" |sigma| |reals|)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic|
     |mv_analysis|)
    (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|not_one_element?| CONST-DECL "bool" |deriv_domain_def| |analysis|)
    (|deriv_domain?| CONST-DECL "bool" |deriv_domain_def| |analysis|)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|col| DEF-DECL "VectorN(rows(M))" |matrices| |matrices|)
    (|der_f| CONST-DECL "{T: MatrixMN(m, n) |
   convergence_zero?(NQ(D, p), NQ(m, f, p, T), zero_vec(n))}"
     |convergence_vec2vec| |mv_analysis|)
    (NQ CONST-DECL "real" |convergence_vec2vec| |mv_analysis|)
    (|MatrixMN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|rows| CONST-DECL "nat" |matrices| |matrices|)
    (|Matrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|liftl| CONST-DECL "vec2vec[1](k)" |lift_real_fun_def| |mv_analysis|)
    (|lift_rd| CONST-DECL "domain[1]" |lift_real_fun_def| |mv_analysis|)
    (|real_dom| TYPE-EQ-DECL NIL |lift_real_fun_def| |mv_analysis|)
    (|differentiable?| CONST-DECL "bool" |convergence_vec2vec| |mv_analysis|)
    (|vec2vec| TYPE-EQ-DECL NIL |domain_vec2real_def| |mv_analysis|)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|der_f| CONST-DECL
     "{gg: VectorN(n) | convergence_zero?(NQ(D, p), NQ(f, gg, p), zero_vec(n))}"
     |differentiable_def| |mv_analysis|)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|zero_vec| DEF-DECL "VectorN(m)" |vector_arithmetic| |mv_analysis|)
    (NQ CONST-DECL "real" |differentiable_def| |mv_analysis|)
    (NQ CONST-DECL "bool" |differentiable_def| |mv_analysis|)
    (|convergence_zero?| CONST-DECL "bool" |vector_sequences| |mv_analysis|)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|domain| TYPE-EQ-DECL NIL |domain_vec2real_def| |mv_analysis|)
    (|deriv_domain?| CONST-DECL "bool" |derivative_domain_multi| |mv_analysis|)
    (|vec2real_f| TYPE-EQ-DECL NIL |domain_vec2real_def| |mv_analysis|)
    (|differentiable?| CONST-DECL "bool" |differentiable_def| |mv_analysis|)
    (|projv| CONST-DECL "bool" |chain_rule_re| NIL)
    (|vec_re| CONST-DECL "real" |chain_rule_re| NIL)
    (|env_2_vec| DEF-DECL "VectorN(k + 1)" |chain_rule_re| NIL)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|max_var| CONST-DECL "nat" |hp_def| NIL)
    (|diff_re?| CONST-DECL "bool" |chain_rule_re| NIL)
    (|ddl_dom?| CONST-DECL "bool" |differentiation| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|ODEs_s?| CONST-DECL "bool" |ODEs_equiv| NIL)
    (|ODEs| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|mapexpr_inj| CONST-DECL "bool" |hp_def| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|MapExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|RealExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|dLVar| TYPE-DECL NIL |hp_def| NIL)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|dd?| CONST-DECL "bool" |hp_expr| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|init3_re_der_chain| FORMULA-DECL NIL |chain_rule_re| NIL))
   SHOSTAK))
 (|derivable_M_nqbool?_TCC1| 0
  (|derivable_M_nqbool?_TCC1-1| |nil| 3854016436 ("" (SUBTYPE-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|ddl_dom?| CONST-DECL "bool" |differentiation| NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|diff_re?| CONST-DECL "bool" |chain_rule_re| NIL)
    (|differentiable_re_p?| CONST-DECL "bool" |chain_rule_re| NIL)
    (|differentiable?| CONST-DECL "bool" |differentiable_def| |mv_analysis|)
    (|convergence_zero?| CONST-DECL "bool" |vector_sequences| |mv_analysis|)
    (NQ CONST-DECL "real" |differentiable_def| |mv_analysis|)
    (* CONST-DECL "real" |matrices| |matrices|)
    (|vec_re| CONST-DECL "real" |chain_rule_re| NIL)
    (+ CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices| |matrices|)
    (|norm_inf| CONST-DECL "[(cons?) -> nonneg_real]" |norms| |mv_analysis|)
    (- CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices| |matrices|)
    (|sub| CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices|
     |matrices|)
    (|norm_inf| CONST-DECL "(norm?(m))" |norms| |mv_analysis|)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL))
   NIL
   (|derivable_M_nqbool?| SUBTYPE "chain_rule_re.nqbe"
    "{x: NQBool_adt.NQBool | booleans.OR(NQBool_adt.nqb_and?(x), NQBool_adt.nqb_or?(x))}")))
 (|derivable_M_nqbool?_TCC2| 0
  (|derivable_M_nqbool?_TCC2-1| |nil| 3854016436 ("" (SUBTYPE-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|ddl_dom?| CONST-DECL "bool" |differentiation| NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|diff_re?| CONST-DECL "bool" |chain_rule_re| NIL)
    (|differentiable_re_p?| CONST-DECL "bool" |chain_rule_re| NIL)
    (|differentiable?| CONST-DECL "bool" |differentiable_def| |mv_analysis|)
    (|convergence_zero?| CONST-DECL "bool" |vector_sequences| |mv_analysis|)
    (NQ CONST-DECL "real" |differentiable_def| |mv_analysis|)
    (* CONST-DECL "real" |matrices| |matrices|)
    (|vec_re| CONST-DECL "real" |chain_rule_re| NIL)
    (+ CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices| |matrices|)
    (|norm_inf| CONST-DECL "[(cons?) -> nonneg_real]" |norms| |mv_analysis|)
    (- CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices| |matrices|)
    (|sub| CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices|
     |matrices|)
    (|norm_inf| CONST-DECL "(norm?(m))" |norms| |mv_analysis|)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL))
   NIL
   (|derivable_M_nqbool?| SUBTYPE "chain_rule_re.nqbe"
    "{x: NQBool_adt.NQBool | booleans.OR(NQBool_adt.nqb_and?(x), NQBool_adt.nqb_or?(x))}")))
 (|derivable_M_normalize_rec| 0
  (|derivable_M_normalize_rec-1| |nil| 3854016570
   ("" (SKEEP)
    (("" (INDUCT "nqbe")
      (("1" (ASSERT) NIL NIL)
       ("2" (SKEEP*)
        (("2" (EXPAND "normalize_rec")
          (("2" (GROUND)
            (("2" (EXPAND "derivable_M_nqbool?") (("2" (PROPAX) NIL NIL)) NIL))
            NIL))
          NIL))
        NIL)
       ("3" (SKEEP*)
        (("3" (EXPAND "normalize_rec" 1)
          (("3" (EXPAND "derivable_M_nqbool?" 1)
            (("3" (EXPAND "derivable_M_nqbool?" -3)
              (("3" (FLATTEN)
                (("3" (ASSERT)
                  (("3" (GROUND)
                    (("1" (INST? -2) NIL NIL) ("2" (INST? -3) NIL NIL)
                     ("3" (INST? -1) NIL NIL) ("4" (INST? -2) NIL NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("4" (SKEEP*)
        (("4" (EXPAND "derivable_M_nqbool?" -3)
          (("4" (FLATTEN)
            (("4" (ASSERT)
              (("4" (EXPAND "normalize_rec" 1)
                (("4" (EXPAND "derivable_M_nqbool?" 1)
                  (("4" (GROUND)
                    (("1" (INST? -2) NIL NIL) ("2" (INST? -3) NIL NIL)
                     ("3" (INST? -1) NIL NIL) ("4" (INST? -2) NIL NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("5" (SKEEP*)
        (("5" (EXPAND "derivable_M_nqbool?" -2)
          (("5" (ASSERT)
            (("5" (EXPAND "normalize_rec" 1) (("5" (INST? -1) NIL NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|NQBool| TYPE-DECL NIL |NQBool_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|ddl_dom?| CONST-DECL "bool" |differentiation| NIL)
    (|derivable_M_nqbool?| INDUCTIVE-DECL "bool" |chain_rule_re| NIL)
    (|nqb_normal?| INDUCTIVE-DECL "bool" |bool_expr| NIL)
    (|NormNQBool| TYPE-EQ-DECL NIL |bool_expr| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|nqb_to_be| DEF-DECL "BoolExpr" |bool_expr| NIL)
    (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|normalize_rec| DEF-DECL "{nnqbe: NormNQBool |
   FORALL (env: Environment):
     nqb_to_be(nnqbe)(env) = (pos IFF nqb_to_be(nqbe)(env))}"
     |bool_expr| NIL)
    (|NQBool_induction| FORMULA-DECL NIL |NQBool_adt| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (FALSE CONST-DECL "bool" |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL))
   SHOSTAK))
 (|derivable_M_normalize| 0
  (|derivable_M_normalize-1| |nil| 3854016658
   ("" (SKEEP*)
    (("" (EXPAND "normalize")
      (("" (REWRITE "derivable_M_normalize_rec") NIL NIL)) NIL))
    NIL)
   ((|normalize| CONST-DECL
     "{nnqbe: NormNQBool | nqb_to_be(nnqbe) = nqb_to_be(nqbe)}" |bool_expr|
     NIL)
    (|derivable_M_nqbool?| INDUCTIVE-DECL "bool" |chain_rule_re| NIL)
    (|NQBool| TYPE-DECL NIL |NQBool_adt| NIL)
    (|ddl_dom?| CONST-DECL "bool" |differentiation| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|Environment| TYPE-EQ-DECL NIL |hp_def| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|derivable_M_normalize_rec| FORMULA-DECL NIL |chain_rule_re| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL))
   SHOSTAK)))

