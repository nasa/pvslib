(nth_derivative_subtype
 (derivable_subtype_nth_TCC1 0
  (derivable_subtype_nth_TCC1-1 nil 3812985359
   ("" (lemma "deriv_domain") (("" (propax) nil nil)) nil)
   ((deriv_domain formula-decl nil nth_derivative_subtype nil)) nil
   (derivable_subtype_nth assuming
    "analysis@nth_derivatives[T].nth_derivatives"
    "deriv_domain: ASSUMPTION deriv_domain_def[T].deriv_domain?")))
 (derivable_subtype_nth_TCC2 0
  (derivable_subtype_nth_TCC2-1 nil 3812985359
   ("" (lemma "not_one_element") (("" (propax) nil nil)) nil)
   ((not_one_element formula-decl nil nth_derivative_subtype nil)) nil
   (derivable_subtype_nth assuming
    "analysis@nth_derivatives[T].nth_derivatives"
    "not_one_element: ASSUMPTION deriv_domain_def[T].not_one_element?")))
 (derivable_subtype_nth_TCC3 0
  (derivable_subtype_nth_TCC3-1 nil 3812985359
   ("" (assuming-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (/= const-decl "boolean" notequal nil)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil
   (derivable_subtype_nth assuming
    "analysis@nth_derivatives[S].nth_derivatives"
    "deriv_domain: ASSUMPTION deriv_domain_def[T].deriv_domain?")))
 (derivable_subtype_nth_TCC4 0
  (derivable_subtype_nth_TCC4-1 nil 3812985359
   ("" (assuming-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (/= const-decl "boolean" notequal nil)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil
   (derivable_subtype_nth assuming
    "analysis@nth_derivatives[S].nth_derivatives"
    "not_one_element: ASSUMPTION deriv_domain_def[T].not_one_element?")))
 (derivable_subtype_nth 0
  (derivable_subtype_nth-1 nil 3812985414
   ("" (induct "n")
    (("1" (skeep) (("1" (grind) nil nil)) nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (expand "restrict")
          (("2" (expand "derivable_n_times?" 1)
            (("2" (expand "derivable_n_times?" -2)
              (("2" (flatten)
                (("2" (lemma "derivable_subtype[T,S]")
                  (("1" (lemma "deriv_subtype_dd[T,S]")
                    (("1" (inst?)
                      (("1" (inst?)
                        (("1" (expand "restrict")
                          (("1" (assert)
                            (("1" (inst -3 "deriv[T](f)")
                              (("1" (assert) nil nil)
                               ("2"
                                (lemma "not_one_element")
                                (("2" (propax) nil nil))
                                nil)
                               ("3"
                                (lemma "deriv_domain")
                                (("3" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (lemma "not_one_element")
                    (("2" (propax) nil nil)) nil)
                   ("3" (lemma "deriv_domain") (("3" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2) (("3" (skeep) nil nil)) nil)
     ("4" (hide 2) (("4" (skeep) nil nil)) nil))
    nil)
   ((derivable_subtype formula-decl nil derivatives_subtype analysis)
    (deriv const-decl "[T -> real]" derivatives analysis)
    (deriv_fun type-eq-decl nil derivatives analysis)
    (derivable? const-decl "bool" derivatives analysis)
    (not_one_element formula-decl nil nth_derivative_subtype nil)
    (deriv_domain formula-decl nil nth_derivative_subtype nil)
    (deriv_subtype_dd formula-decl nil derivatives_subtype analysis)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (/= const-decl "boolean" notequal nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (restrict const-decl "R" restrict nil)
    (pred type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T_pred const-decl "[real -> boolean]" nth_derivative_subtype nil)
    (T formal-subtype-decl nil nth_derivative_subtype nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (derivable_n_times? def-decl "bool" nth_derivatives analysis)
    (S_pred const-decl "[T -> boolean]" nth_derivative_subtype nil)
    (S formal-subtype-decl nil nth_derivative_subtype nil)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis))
   shostak))
 (nderiv_subtype_TCC1 0
  (nderiv_subtype_TCC1-1 nil 3812985359
   ("" (skeep)
    (("" (lemma "derivable_subtype_nth")
      (("" (inst?) (("" (assert) nil nil)) nil)) nil))
    nil)
   ((derivable_subtype_nth formula-decl nil nth_derivative_subtype nil)
    (T formal-subtype-decl nil nth_derivative_subtype nil)
    (T_pred const-decl "[real -> boolean]" nth_derivative_subtype nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil
   (nderiv_subtype subtype
    "restrict[T, S, real].restrict(nth_derivative_subtype.f)"
    "nth_derivatives[S].nderiv_fun(nth_derivative_subtype.n)")))
 (nderiv_subtype 0
  (nderiv_subtype-1 nil 3812985982
   ("" (induct "n")
    (("1" (skeep)
      (("1" (expand "nderiv")
        (("1" (expand "restrict") (("1" (propax) nil nil)) nil)) nil))
      nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (decompose-equality 1)
          (("2" (expand "restrict")
            (("2" (expand "nderiv" 1)
              (("2" (lemma "deriv_subtype_dd[T,S]")
                (("1" (inst?)
                  (("1" (assert)
                    (("1" (expand "derivable_n_times?" -3)
                      (("1" (flatten)
                        (("1" (assert)
                          (("1" (expand "restrict")
                            (("1" (assert)
                              (("1"
                                (inst -2 "deriv[T](f)")
                                (("1"
                                  (assert)
                                  (("1"
                                    (assert)
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (lemma "not_one_element")
                                  (("2" (propax) nil nil))
                                  nil)
                                 ("3"
                                  (lemma "deriv_domain")
                                  (("3" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (lemma "not_one_element")
                  (("2" (propax) nil nil)) nil)
                 ("3" (lemma "deriv_domain") (("3" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2) (("3" (skeep) nil nil)) nil)
     ("4" (hide 2) (("4" (skeep) nil nil)) nil)
     ("5" (hide 2)
      (("5" (skeep)
        (("5" (expand "restrict")
          (("5" (lemma "derivable_subtype_nth")
            (("5" (inst?)
              (("5" (assert)
                (("5" (expand "restrict") (("5" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((derivable_subtype_nth formula-decl nil nth_derivative_subtype nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (f skolem-const-decl "[T -> real]" nth_derivative_subtype nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (j skolem-const-decl "nat" nth_derivative_subtype nil)
    (deriv_domain formula-decl nil nth_derivative_subtype nil)
    (not_one_element formula-decl nil nth_derivative_subtype nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (deriv const-decl "real" derivatives_def analysis)
    (fullset const-decl "set" sets nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (adh const-decl "setof[real]" convergence_functions analysis)
    (NQ const-decl "real" derivatives_def analysis)
    (convergence const-decl "bool" convergence_functions analysis)
    (convergence const-decl "bool" lim_of_functions analysis)
    (convergent? const-decl "bool" lim_of_functions analysis)
    (derivable? const-decl "bool" derivatives_def analysis)
    (/= const-decl "boolean" notequal nil)
    (derivable? const-decl "bool" derivatives analysis)
    (deriv_fun type-eq-decl nil derivatives analysis)
    (deriv const-decl "[T -> real]" derivatives analysis)
    (deriv_subtype_dd formula-decl nil derivatives_subtype analysis)
    (nat_induction formula-decl nil naturalnumbers nil)
    (nderiv def-decl "[T -> real]" nth_derivatives analysis)
    (nderiv_fun type-eq-decl nil nth_derivatives analysis)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (pred type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T_pred const-decl "[real -> boolean]" nth_derivative_subtype nil)
    (T formal-subtype-decl nil nth_derivative_subtype nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (derivable_n_times? def-decl "bool" nth_derivatives analysis)
    (S_pred const-decl "[T -> boolean]" nth_derivative_subtype nil)
    (S formal-subtype-decl nil nth_derivative_subtype nil)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (restrict const-decl "R" restrict nil))
   shostak)))

