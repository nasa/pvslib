(|cont_if_fun| (|discont_pts_lem| 0 (|discont_pts_lem-2| "" 3790090013 ("" (SKEEP) (("" (EXPAND "discont_pts") (("" (EXPAND "continuous?") (("" (INST - "1") (("" (SKOSIMP*) (("" (EXPAND "b2n") (("" (CASE "P(a)") (("1" (ASSERT) (("1" (INST + "delta!1") (("1" (FLATTEN) (("1" (SKOSIMP*) (("1" (ASSERT) (("1" (INST - "x!1") (("1" (ASSERT) (("1" (EXPAND "abs") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (INST + "delta!1") (("2" (SKOSIMP*) (("2" (ASSERT) (("2" (INST - "x!2") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|discont_pts| CONST-DECL "set[T]" |cont_if_fun| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|b2n| CONST-DECL "nbit" |bit| NIL) (|abs_nat| FORMULA-DECL NIL |abs_lems| |reals|) (|abs_0| FORMULA-DECL NIL |abs_lems| |reals|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (|T_pred| CONST-DECL "[real -> boolean]" |cont_if_fun| NIL) (T FORMAL-SUBTYPE-DECL NIL |cont_if_fun| NIL) (|continuous?| CONST-DECL "bool" |continuous_functions| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) SHOSTAK) (|discont_pts_lem-1| |nil| 3440865406 ("" (SKEEP) (("" (EXPAND "discont_pts") (("" (EXPAND "continuous?") (("" (INST - "1") (("" (SKOSIMP*) (("" (EXPAND "b2n") (("" (LIFT-IF) (("" (CASE "P(a)") (("1" (ASSERT) (("1" (INST + "delta!1") (("1" (FLATTEN) (("1" (SKOSIMP*) (("1" (ASSERT) (("1" (INST - "x!1") (("1" (ASSERT) (("1" (EXPAND "abs") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (INST + "delta!1") (("2" (SKOSIMP*) (("2" (ASSERT) (("2" (INST - "x!2") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (NIL NIL) SHOSTAK)) (|if_fun_cont| 0 (|if_fun_cont-3| "" 3882381940 ("" (SKEEP) (("" (EXPAND "continuous?") (("" (SKEEP) (("" (REWRITE "continuity_def") (("" (EXPAND "if_fun") (("" (EXPAND "continuous?") (("" (EXPAND "convergence") (("" (EXPAND "convergence") (("" (EXPAND "fullset") (("" (PROP) (("1" (HIDE -) (("1" (EXPAND "adh") (("1" (SKOSIMP*) (("1" (INST + "x0") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (INST - "x0") (("2" (INST -2 "x0") (("2" (INST - "epsilon!1/2") (("2" (INST - "epsilon!1/2") (("2" (SKOSIMP*) (("2" (INST -3 "x0") (("2" (CASE "discont_pts(P)(x0)") (("1" (INST + "min(delta!1,delta!2)") (("1" (SKOSIMP*) (("1" (CASE "P(x0)") (("1" (ASSERT) (("1" (CASE "P(x!1)") (("1" (ASSERT) (("1" (INST -5 "x!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (INST -5 "x!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "P(x!1)") (("1" (ASSERT) (("1" (INST -4 "x!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (INST -4 "x!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -3) (("2" (LEMMA "discont_pts_lem") (("2" (INST?) (("2" (ASSERT) (("2" (SKOSIMP*) (("2" (SPLIT -1) (("1" (CASE "P(x0)") (("1" (ASSERT) (("1" (INST + "min(delta!1,delta!3)") (("1" (HIDE -4) (("1" (SKOSIMP*) (("1" (ASSERT) (("1" (INST - "x!1") (("1" (INST - "x!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL) ("2" (INST + "min(delta!2,delta!3)") (("2" (SKOSIMP*) (("2" (INST - "x!1") (("2" (ASSERT) (("2" (CASE "P(x0)") (("1" (ASSERT) (("1" (REVEAL -1) (("1" (INST - "x0") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (INST -3 "x!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|if_fun_cont-2| |nil| 3440865362 ("" (SKEEP) (("" (EXPAND "continuous?") (("" (SKEEP) (("" (REWRITE CONTINUITY_DEF) (("" (EXPAND "if_fun") (("" (EXPAND "continuous?") (("" (EXPAND "convergence") (("" (EXPAND "convergence") (("" (EXPAND "fullset") (("" (PROP) (("1" (HIDE -) (("1" (EXPAND "adh") (("1" (SKOSIMP*) (("1" (INST + X0) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (INST - "x0") (("2" (INST -2 "x0") (("2" (INST - "epsilon!1/2") (("2" (INST - "epsilon!1/2") (("2" (SKOSIMP*) (("2" (INST -3 "x0") (("2" (CASE "discont_pts(P)(x0)") (("1" (INST + "min(delta!1,delta!2)") (("1" (SKOSIMP*) (("1" (CASE "P(x0)") (("1" (ASSERT) (("1" (CASE "P(x!1)") (("1" (ASSERT) (("1" (INST -5 "x!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (INST -5 "x!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "P(x!1)") (("1" (ASSERT) (("1" (INST -4 "x!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (INST -4 "x!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -3) (("2" (LEMMA "discont_pts_lem") (("2" (INST?) (("2" (ASSERT) (("2" (SKOSIMP*) (("2" (SPLIT -1) (("1" (CASE "P(x0)") (("1" (ASSERT) (("1" (INST + "min(delta!1,delta!3)") (("1" (HIDE -4) (("1" (SKOSIMP*) (("1" (ASSERT) (("1" (INST - "x!1") (("1" (INST - "x!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL) ("2" (INST + "min(delta!2,delta!3)") (("2" (SKOSIMP*) (("2" (INST - "x!1") (("2" (ASSERT) (("2" (CASE "P(x0)") (("1" (ASSERT) (("1" (REVEAL -1) (("1" (INST - "x0") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (INST -3 "x!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|continuous?| CONST-DECL "bool" |continuous_functions| NIL) (|continuity_def| FORMULA-DECL NIL |continuous_functions| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|if_fun| CONST-DECL "[T -> real]" |cont_if_fun| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|T_pred| CONST-DECL "[real -> boolean]" |cont_if_fun| NIL) (T FORMAL-SUBTYPE-DECL NIL |cont_if_fun| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|continuous?| CONST-DECL "bool" |continuous_functions| NIL) (|convergence| CONST-DECL "bool" |convergence_functions| NIL) (|adh| CONST-DECL "setof[real]" |convergence_functions| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|abs_0| FORMULA-DECL NIL |abs_lems| |reals|) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|discont_pts| CONST-DECL "set[T]" |cont_if_fun| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (<= CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|posreal_min| APPLICATION-JUDGEMENT "{z: posreal | z <= x AND z <= y}" |real_defs| NIL) (|discont_pts_lem| FORMULA-DECL NIL |cont_if_fun| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (|b2n| CONST-DECL "nbit" |bit| NIL) (|fullset| CONST-DECL "set" |sets| NIL) (|convergence| CONST-DECL "bool" |lim_of_functions| NIL)) NIL) (|if_fun_cont-1| |nil| 3440853945 ("" (SKEEP) (("" (EXPAND "continuous?") (("" (SKEEP) (("" (EXPAND "if_fun") (("" (INST -3 "x0") (("" (CASE "discont_pts(P)(x0)") (("1" (EXPAND "continuous?") (("1" (EXPAND "convergence") (("1" (EXPAND "convergence") (("1" (EXPAND "fullset") (("1" (PROP) (("1" (GRIND) NIL NIL) ("2" (SKOSIMP*) (("2" (INST - "x0") (("2" (INST - "x0") (("2" (FLATTEN) (("2" (INST - "epsilon!1/2") (("2" (INST - "epsilon!1/2") (("2" (SKOSIMP*) (("2" (CASE "P(x0)") (("1" (ASSERT) (("1" (INST + "min(delta!1,delta!2)") (("1" (SKOSIMP*) (("1" (CASE "P(x!1)") (("1" (ASSERT) (("1" (INST - "x!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (INST -8 "x!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (INST + "min(delta!1,delta!2)") (("2" (SKOSIMP*) (("2" (CASE "P(x!1)") (("1" (ASSERT) (("1" (INST - "x!1") (("1" (INST - "x!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (INST - "x!1") (("2" (INST - "x!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "discont_pts") (("2" (EXPAND "continuous?") (("2" (EXPAND "convergence") (("2" (EXPAND "convergence") (("2" (EXPAND "fullset") (("2" (PROP) (("1" (SKOSIMP*) (("1" (INST -4 "x0") (("1" (INST -5 "x0") (("1" (FLATTEN) (("1" (HIDE -4 -6) (("1" (INST -4 "epsilon!1/2") (("1" (INST -5 "epsilon!1/2") (("1" (SKOSIMP*) (("1" (INST + "min(delta!1,delta!2)") (("1" (ASSERT) (("1" (SKOSIMP*) (("1" (CASE "P(x0)") (("1" (ASSERT) (("1" (CASE "P(x!1)") (("1" (ASSERT) (("1" (INST -7 "x!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (INST -7 "x!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (ASSERT) (("2" (CASE "P(x!1)") (("1" (ASSERT) (("1" (INST -6 "x!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (INST -6 "x!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (CASE "P(x0)") (("1" (INST -6 "x0") (("1" (INST -7 "x0") (("1" (FLATTEN) (("1" (HIDE -6 -8) (("1" (INST -6 "epsilon!1/2") (("1" (INST -7 "epsilon!1/2") (("1" (SKOSIMP*) (("1" (INST + "min(delta!1,delta!2)") (("1" (ASSERT) (("1" (SKOSIMP*) (("1" (LIFT-IF) (("1" (CASE "P(x!1)") (("1" (ASSERT) (("1" (INST -8 "x!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (INST -8 "x!1") (("2" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|discont_pts_simple| 0 (|discont_pts_simple-3| "" 3790090015 ("" (SKOSIMP*) (("" (EXPAND "discont_pts") (("" (EXPAND "b2n") (("" (EXPAND "continuous?") (("" (EXPAND "continuous?") (("" (SKOSIMP*) (("" (CASE "P!1(x!1)") (("1" (ASSERT) (("1" (INST - "x!1") (("1" (INST -3 "x!1") (("1" (REPLACE -4 * LR) (("1" (HIDE -4) (("1" (ASSERT) (("1" (FLATTEN) (("1" (INST - "f1!1(x!1)/2") (("1" (INST - "f2!1(x!1)/2") (("1" (SKOSIMP*) (("1" (INST + "min(delta!1,delta!2)") (("1" (SKOSIMP*) (("1" (LIFT-IF) (("1" (PROP) (("1" (ASSERT) NIL NIL) ("2" (INST -4 "x!2") (("2" (ASSERT) (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (INST -4 "x!2") (("3" (ASSERT) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROP) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (PROP) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (INST - "x!1") (("2" (INST -2 "x!1") (("2" (REPLACE -3 * LR) (("2" (ASSERT) (("2" (SPLIT 1) (("1" (INST - "-f1!1(x!1)/2") (("1" (CASE "f2!1(x!1) > 0") (("1" (INST - "f2!1(x!1)/2") (("1" (SKOSIMP*) (("1" (INST + "min(delta!1,delta!2)") (("1" (SKOSIMP*) (("1" (INST - "x!2") (("1" (INST - "x!2") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (INST - "-f2!1(x!1)/2") (("1" (SKOSIMP*) (("1" (INST + "min(delta!1,delta!2)") (("1" (SKOSIMP*) (("1" (INST - "x!2") (("1" (INST - "x!2") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) (("2" (INST -2 "-f2!1(x!1)/2") (("2" (CASE "f1!1(x!1) > 0") (("1" (INST - "f1!1(x!1)/2") (("1" (SKOSIMP*) (("1" (INST + "min(delta!1,delta!2)") (("1" (SKOSIMP*) (("1" (INST - "x!2") (("1" (INST - "x!2") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (INST - "-f1!1(x!1)/2") (("1" (SKOSIMP*) (("1" (INST + "min(delta!1,delta!2)") (("1" (SKOSIMP*) (("1" (INST - "x!2") (("1" (INST - "x!2") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|discont_pts| CONST-DECL "set[T]" |cont_if_fun| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|continuous?| CONST-DECL "bool" |continuous_functions| NIL) (|continuous?| CONST-DECL "bool" |continuous_functions| NIL) (|abs_nat| FORMULA-DECL NIL |abs_lems| |reals|) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|f2!1| SKOLEM-CONST-DECL "[T -> real]" |cont_if_fun| NIL) (|posreal_min| APPLICATION-JUDGEMENT "{z: posreal | z <= x AND z <= y}" |real_defs| NIL) (<= CONST-DECL "bool" |reals| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nzint_abs_is_pos| APPLICATION-JUDGEMENT "{j: posint | j >= i}" |real_defs| NIL) (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_abs_is_nonneg| APPLICATION-JUDGEMENT "{j: nonneg_int | j >= i}" |real_defs| NIL) (|odd_minus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|abs_0| FORMULA-DECL NIL |abs_lems| |reals|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|x!1| SKOLEM-CONST-DECL "T" |cont_if_fun| NIL) (|f1!1| SKOLEM-CONST-DECL "[T -> real]" |cont_if_fun| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (>= CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (T FORMAL-SUBTYPE-DECL NIL |cont_if_fun| NIL) (|T_pred| CONST-DECL "[real -> boolean]" |cont_if_fun| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|b2n| CONST-DECL "nbit" |bit| NIL)) SHOSTAK) (|discont_pts_simple-2| |nil| 3440940498 ("" (SKOSIMP*) (("" (EXPAND "discont_pts") (("" (EXPAND "b2n") (("" (EXPAND "continuous?") (("" (EXPAND "continuous?") (("" (SKOSIMP*) (("" (LIFT-IF) (("" (CASE "P!1(x!1)") (("1" (ASSERT) (("1" (INST - "x!1") (("1" (INST -3 "x!1") (("1" (REPLACE -4 * LR) (("1" (HIDE -4) (("1" (ASSERT) (("1" (FLATTEN) (("1" (INST - "f1!1(x!1)/2") (("1" (INST - "f2!1(x!1)/2") (("1" (SKOSIMP*) (("1" (INST + "min(delta!1,delta!2)") (("1" (SKOSIMP*) (("1" (LIFT-IF) (("1" (PROP) (("1" (ASSERT) NIL NIL) ("2" (INST -4 "x!2") (("2" (ASSERT) (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (INST -4 "x!2") (("3" (ASSERT) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROP) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (PROP) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (INST - "x!1") (("2" (INST -2 "x!1") (("2" (REPLACE -3 * LR) (("2" (ASSERT) (("2" (SPLIT 1) (("1" (INST - "-f1!1(x!1)/2") (("1" (CASE "f2!1(x!1) > 0") (("1" (INST - "f2!1(x!1)/2") (("1" (SKOSIMP*) (("1" (INST + "min(delta!1,delta!2)") (("1" (SKOSIMP*) (("1" (INST - "x!2") (("1" (INST - "x!2") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (INST - "-f2!1(x!1)/2") (("1" (SKOSIMP*) (("1" (INST + "min(delta!1,delta!2)") (("1" (SKOSIMP*) (("1" (INST - "x!2") (("1" (INST - "x!2") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) (("2" (INST -2 "-f2!1(x!1)/2") (("2" (CASE "f1!1(x!1) > 0") (("1" (INST - "f1!1(x!1)/2") (("1" (SKOSIMP*) (("1" (INST + "min(delta!1,delta!2)") (("1" (SKOSIMP*) (("1" (INST - "x!2") (("1" (INST - "x!2") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (INST - "-f1!1(x!1)/2") (("1" (SKOSIMP*) (("1" (INST + "min(delta!1,delta!2)") (("1" (SKOSIMP*) (("1" (INST - "x!2") (("1" (INST - "x!2") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (NIL NIL) NIL) (|discont_pts_simple-1| |nil| 3440935759 ("" (SKOSIMP*) (("" (EXPAND "discont_pts") (("" (EXPAND "b2n") (("" (EXPAND "continuous?") (("" (EXPAND "continuous?") (("" (EXPAND "convergence") (("" (EXPAND "convergence") (("" (EXPAND "fullset") (("" (PROP) (("1" (GRIND) NIL NIL) ("2" (SKOSIMP*) (("2" (LIFT-IF) (("2" (CASE "P!1(x!1)") (("1" (ASSERT) (("1" (INST - "x!1") (("1" (INST - "x!1") (("1" (FLATTEN) (("1" (HIDE -2 -4) (("1" (REPLACE -4 * LR) (("1" (HIDE -4) (("1" (ASSERT) (("1" (FLATTEN) (("1" (INST - "f1!1(x!1)/2") (("1" (INST - "f2!1(x!1)/2") (("1" (SKOSIMP*) (("1" (INST + "min(delta!1,delta!2)") (("1" (SKOSIMP*) (("1" (LIFT-IF) (("1" (PROP) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) (("2" (INST -5 "x!2") (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (ASSERT) (("3" (INST -5 "x!2") (("3" (ASSERT) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROP) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (PROP) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (INST - "x!1") (("2" (INST - "x!1") (("2" (FLATTEN) (("2" (HIDE -1 -3) (("2" (REPLACE -3 * LR) (("2" (ASSERT) (("2" (SPLIT 1) (("1" (INST - "-f1!1(x!1)/2") (("1" (INST - "-f2!1(x!1)/2") (("1" (SKOSIMP*) (("1" (INST + "min(delta!1,delta!2)") (("1" (SKOSIMP*) (("1" (LIFT-IF) (("1" (PROP) (("1" (ASSERT) (("1" (INST - "x!2") (("1" (INST - "x!2") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST - "x!2") (("2" (INST - "x!2") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (INST - "x!2") (("3" (INST - "x!2") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL)) NIL) ("2" (POSTPONE) NIL NIL)) NIL) ("2" (ASSERT) (("2" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|prod_fun_lem| 0 (|prod_fun_lem-2| |nil| 3440931691 ("" (SKEEP) (("" (LEMMA "discont_pts_simple") (("" (INST?) (("" (INST - "x") (("" (ASSERT) (("" (SPLIT -1) (("1" (REPLACE -1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (REPLACE -1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|discont_pts_simple| FORMULA-DECL NIL |cont_if_fun| NIL) (|abs_0| FORMULA-DECL NIL |abs_lems| |reals|) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (T FORMAL-SUBTYPE-DECL NIL |cont_if_fun| NIL) (|T_pred| CONST-DECL "[real -> boolean]" |cont_if_fun| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL) (|prod_fun_lem-1| |nil| 3440931385 ("" (SKEEP) (("" (EXPAND "discont_pts") (("" (EXPAND "b2n") (("" (REPLACE -1 * LR) (("" (HIDE -1) (("" (EXPAND "continuous?") (("" (EXPAND "convergence") (("" (EXPAND "fullset") (("" (EXPAND "convergence") (("" (PROP) (("1" (EXPAND "adh") (("1" (ASSERT) (("1" (SKOSIMP*) (("1" (INST + "x") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (INST + "epsilon!1") (("2" (SKOSIMP*) (("2" (LIFT-IF) (("2" (CASE "f1(x!1) > 0 AND f2(x!1) > 0") (("1" (ASSERT) (("1" (FLATTEN) (("1" (ASSERT) (("1" (LIFT-IF) (("1" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)))
