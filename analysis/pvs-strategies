(defparameter *derivable-rews* '(("analysis@derivatives_lam" . "derivable_id_lam")
				 ("analysis@derivatives_lam" . "derivable_const_lam")
				 ("analysis@derivatives_lam" . "derivable_add_lam")
				 ("analysis@derivatives_lam" . "derivable_scal1_lam")
				 ("analysis@derivatives_lam" . "derivable_scal2_lam")
				 ("analysis@derivatives_lam" . "derivable_mult_lam")
				 ("analysis@derivatives_lam" . "derivable_pow_lam")
				 ("analysis@derivatives_lam" . "derivable_neg_lam")
				 ("analysis@derivatives_lam" . "derivable_sub_lam")
				 ("analysis@derivatives_lam" . "derivable_sq_lam")
				 ("analysis@derivatives_lam" . "derivable_scald1_lam")
				 ("analysis@derivatives_lam" . "derivable_scald2_lam")
				 ("analysis@derivatives_lam" . "derivable_div_lam")
				 ("analysis@sqrt_derivative_lam" . "derivable_sqrt_lam")
				 ("lnexp@ln_derivative_lam" . "derivable_ln_lam")))

(defparameter *deriv-rews* '(("analysis@derivatives_lam" . "deriv_id_lam")
			     ("analysis@derivatives_lam" . "deriv_const_lam")
			     ("analysis@derivatives_lam" . "deriv_add_lam")
			     ("analysis@derivatives_lam" . "deriv_scal1_lam")
			     ("analysis@derivatives_lam" . "deriv_scal2_lam")
			     ("analysis@derivatives_lam" . "deriv_mult_lam")
			     ("analysis@derivatives_lam" . "deriv_pow_lam")
			     ("analysis@derivatives_lam" . "deriv_neg_lam")
			     ("analysis@derivatives_lam" . "deriv_sub_lam")
			     ("analysis@derivatives_lam" . "deriv_sq_lam")
			     ("analysis@derivatives_lam" . "deriv_scald1_lam")
			     ("analysis@derivatives_lam" . "deriv_scald2_lam")
			     ("analysis@derivatives_lam" . "deriv_div_lam")
			     ("analysis@sqrt_derivative_lam" . "deriv_sqrt_lam")
			     ("lnexp@ln_derivative_lam" . "deriv_ln_lam")))

(defparameter *derivable-ops* '("function_props.o"
				"real_fun_ops.+"
				"real_fun_ops.-"
				"real_fun_ops.*"
				"real_fun_ops./"
				"real_fun_ops.inv"))

(defparameter *deriv-builtin* '(("trig@sincos_def" . "sin")
				("trig@sincos_def" . "cos")
				("lnexp@ln_exp" . "exp")))

(defparameter *deriv-lemmas* '("expt_x0"
			       "expt_x1"))

(defparameter *deriv-assumptions* '(("analysis@deriv_domain_def" . "deriv_domain?")
				    ("analysis@deriv_domain_def" . "not_one_element?")))

(defparameter *deriv-stop-rewrites* '("analysis@derivatives_def"
				      "analysis@lim_of_functions"
				      "analysis@convergence_functions"
				      "analysis@derivatives"))

;; association list where the data is used to check dependencies needed by the strategy, when
;; the constant is not defined in analysts
(defparameter *deriv-exclude* '(("sq")
				("sqrt")
				("ln" . "lnexp@strategies.LnExpStrategies__")))

(defun check-excluded-name (name names)
  (unless (member name names :test #'equal)
    (let ((lib (assoc name *deriv-exclude* :test #'equal)))
      (if lib
	  (let ((nqn (no-qualified-name (cdr lib))))
	    (when nqn
	      (error-format-if "~2%** To add support for function ~a, import ~a~%" name nqn)))
	name))))

(defhelper derivable__ (fnum names rws point module)
  (let ((ops   *derivable-ops*)
	(qfnum  (list 'quote fnum))
	(expr   (extra-get-formula fnum))
	(deriv  (is-function-expr expr '("derivable?")))
	(comprw (when deriv
		  (format nil "analysis@chain_rule[~a,~a].~:[comp_derivable_fun~;comp_derivable_point~]"
			  module module point)))
	(fderiv (when deriv (if point (args1 expr) (argument expr))))
	(name   (when (and deriv (is-const-decl-expr fderiv))
		  (expr2str fderiv)))
	(expnd  (check-excluded-name name names)))
    (when deriv
      (when expnd (expand expnd fnum))
      (mapstep@ #'(lambda(x)`(expand ,x ,qfnum)) ops)
      (try
       (rewrites rws fnum)
       (derivable__$ 1 names rws point module)
       (try
	(rewrite comprw fnum)
	(derivable__$ 1 names rws point module)
	(skip)))))
  "Internal strategy. DO NOT USE, use derivable instead"
  "")

(defun get-module-deriv (expr)
  (car (actuals (module-instance (car (resolutions expr))))))

(defun get-case-assumption-deriv (module)
  (format nil "~{~a~^ AND ~}"
	  (mapcar #'(lambda (x) (format nil "~a[~a].~a" (car x) module (cdr x)))
		  *deriv-assumptions*)))

(defhelper deriv-domain__ (module)
  (let ((noe (format nil "analysis@deriv_domain_def[~a].deriv_domain_not_one_element" module))
	(dd  (format nil "deriv_domain[~a]" module)))
    (spread
     (splash 1)
     ((rewrite noe)
      (finalize (rewrite dd)))))
  "Internal strategy. DO NOT USE, use derivable instead"
  "")

(defstep derivable (&optional fnum use exclude lemmas domain)
  (let ((nqn   (no-qualified-name "analysis@strategies.AnalysisStrategies__"))
	(names (append (enlist-it use)
		       (mapcar #'cdr *deriv-builtin*)
		       (enlist-it exclude))))
    (if nqn 
	(printf "This strategy requires theory ~a to be imported in the current context" nqn)
      (let ((fn   (if fnum (extra-get-fnum fnum)
		    (extra-get-fnum '(? + "derivable?"))))
	    (expr (and fn (> fn 0) (extra-get-formula fn))))
	(if (is-function-expr expr "derivable?")
	    (let ((module (or domain (get-module-deriv (operator expr))))
		  (castr  (get-case-assumption-deriv module))
		  (point  (tuple-expr? (argument expr)))
		  (rws    (append
			   (mapcar #'(lambda (x) (format nil "~a[~a].~a~:[~;_point~]"
							 (car x) module (cdr x) point)) *derivable-rews*)
			   (mapcar #'(lambda (x) (format nil "~a.derivable_~a~:[~;_point~]" (car x) (cdr x) point)) *deriv-builtin*)
			   (mapcar #'(lambda (x) (format nil "derivable_~a~:[~;_point~]" x point)) (enlist-it use))
			   (enlist-it lemmas)))
		  (stp-rws (loop for modnamestr in *deriv-stop-rewrites* 
				 append (let ((modname (pc-parse modnamestr 'modname)))
					  (loop for module in (resolve* modname 'module nil) 
						collect (format nil "~s" (module-instance module)))))))
	      (with-fresh-labels
	       ((fnum! fn) (assmps! :delete))
	       (stop-rewrite-theory :theories stp-rws)
	       (spread
		(with-tccs (case castr) :tcc-step (skip))
		((then
		  (relabel assmps! -1)
		  (flatten)
		  (derivable__$ fnum! names rws point module))
		 (deriv-domain__$ module)))))
	  (printf "Formula of the form derivable?(...) must appear in the consequent")))))
  "Discharges a formula of the form derivable?(f) in the consequent, where f
is a function of type [real->real].

If FNUM is not provided, the strategy discharges the first formula derivable?(f)
occurring in the consequent.

USE is a list of function names appearing in f that will not be expanded by the strategy.
For every NAME in USE, the strategy assumes the existence of lemmas
derivable_NAME and derivable_NAME_point that prove
derivable?(NAME) and derivable?(NAME,x), respectively.

EXCLUDE is a list of function names to be excluded from expansion.

LEMMAS is a list of lemmas that are used for rewriting.

DOMAIN is the domain of derivation. If DOMAIN is not provided, the strategy infers it
from the context."
  "Discharging derivable?(f)~@[ in ~a~]")

(defstrat differentiable (&optional fnum &inherit (derivable :except fnum))
  (derivable fnum)
  "Same as derivable")

(defun get-deriv-fun (fnums)
  (or (extra-get-expr `(~ ,fnums "deriv[%](%1)"))
      (extra-get-expr `(~ ,fnums "deriv(%1)"))))

(defun get-deriv-expr (fnums)
  (or (extra-get-expr `(~ ,fnums "deriv[%]"))
      (extra-get-expr `(~ ,fnums "deriv"))))

(defhelper deriv__ (fnum names rws module &optional fun)
  (let ((ops   *derivable-ops*)
	(qfnum (list 'quote fnum))
	(expr  (or fun (get-deriv-fun fnum)))
	(name  (when (is-const-decl-expr expr) (expr2str expr)))
	(expnd (check-excluded-name name names))
	(chrw  (format nil "analysis@chain_rule[~a,~a].chain_rule" module module))) 
    (when expr
      (when expnd (expand expnd fnum))
      (mapstep@ #'(lambda(x)`(expand ,x ,qfnum)) ops)
      (try-branch
       (rewrites rws fnum)
       ((then (beta fnum) (real-props fnum) (deriv__$ fnum names rws module))
	(then (hide fnum) (derivable 1)))
       (try-branch
	(rewrite chrw fnum)
	((then (expand "*" fnum) (deriv__$ fnum names rws module))
	 (then (hide fnum) (derivable 1)))
	(skip)))))
  "Internal strategy. DO NOT USE, use deriv instead"
  "")

(defstep deriv (&optional f (fnums *) use exclude lemmas domain)
  (let ((nqn (no-qualified-name "analysis@strategies.AnalysisStrategies__")))
    (if nqn
	(printf "This strategy requires theory ~a to be imported in the current context" nqn)
      (let ((fun  (if f (extra-get-expr f) (get-deriv-fun fnums))))
	(if fun
	    (let ((fn     (unless f (extra-get-fnum `(? ,fnums "deriv"))))
		  (expr   (unless f (get-deriv-expr fnums)))
		  (names  (append (enlist-it use)
				  (mapcar #'cdr *deriv-builtin*)
				  (enlist-it exclude)))
		  (module (or domain (if f (domain (type fun)) (get-module-deriv expr))))
		  (drvbl  (format nil "analysis@derivatives[~a].derivable?(~a)" module fun))
		  (drv    (format nil "analysis@derivatives[~a].deriv(~a)" module fun))
		  (castr  (get-case-assumption-deriv module))
		  (usrws  (append
			   (mapcar #'(lambda (x) (format nil "derivative_~a" x)) (enlist-it use))
			   *deriv-lemmas*
			   (enlist-it lemmas)))
		  (rws    (append
			   (mapcar #'(lambda (x) (format nil "~a[~a].~a"
							 (car x) module (cdr x))) *deriv-rews*)
			   (mapcar #'(lambda (x) (format nil "~a.derivative_~a" (car x) (cdr x))) *deriv-builtin*)
			   usrws))
		  (stp-rws (loop for modnamestr in *deriv-stop-rewrites* 
				 append (let ((modname (pc-parse modnamestr 'modname)))
					  (loop for module in (resolve* modname 'module nil) 
						collect (format nil "~s" (module-instance module)))))))
	      (with-fresh-labels
	       ((fnum!) (fnums! fnums) (fn! fn) (assmps! :delete))
	       (stop-rewrite-theory :theories stp-rws)
	       (spread
		(with-tccs (case castr) :tcc-step (skip))
		((then
		  (relabel assmps! -1)
		  (flatten)
		  (spread
		   (with-tccs (case drvbl) :tcc-step (skip))
		   ((with-fresh-names@
		     (d_)
		     (with-tccs (name-label d_ drv :label fnum! :dir rl) :tcc-step (skip))
		     (deriv__$ fnum! names rws module fun)
		     (let ((lmbd (let* ((nfn  (extra-get-fnum fn!)) 
					(expr (when (and nfn (> nfn 0)) (extra-get-formula fn!))))
				   (and expr
					(infix-equation? expr)
					(funtype? (type (args1 expr)))
					nfn))))
		       (then
			(replace fnum! fnums!)
			(beta fnums!)
			(when lmbd
			  (decompose-equality fn!)
			  (label fnums! lmbd))
			(rewrites usrws fnums!)
			(real-props fnums!))))
		    (derivable 1))))
		 (deriv-domain__$ module)))))
	  (printf "Formula of the form deriv(...) must appear in the sequent")))))
    "Computes the derivative of F and introduces the hypotheses derivable?(F) and deriv(F) = F', 
where F is a function of type [real->real]. If F is not provided,  the strategy finds the first
one occurring in formula of the form deriv(F). The derivative is replaced in the formulas in FNUMS. 

USE is a list of function names appearing in f that will not be expanded by the strategy.
For every NAME in USE, the strategy assumes the existence of lemmas
derivable_NAME and derivable_NAME_point that prove
derivable?(NAME) and derivable?(NAME,x), respectively.

EXCLUDE is a list of function names to be excluded from expansion.

LEMMAS is a list of lemmas that are used for rewriting.

DOMAIN is the domain of derivation. If DOMAIN is not provided, the strategy infers it
from the context."
  "Computing deriv~@[(~a)~]")

(defstrat derivative (&optional f &inherit (deriv :except f))
  (deriv f)
  "Same as deriv")
