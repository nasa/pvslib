(|integral_prep| (|IMP_integral_def_TCC1| 0 (|IMP_integral_def_TCC1-2| "" 3790090297 ("" (LEMMA "connected_domain") (("" (PROPAX) NIL NIL)) NIL) ((|connected_domain| FORMULA-DECL NIL |integral_prep| NIL)) SHOSTAK (|IMP_integral_def| ASSUMING "integral_def[T].integral_def" "connected_domain: ASSUMPTION deriv_domain_def[T].connected?")) (|IMP_integral_def_TCC1-1| |nil| 3253532115 ("" (SKOSIMP*) (("" (LEMMA "connected_domain") (("" (INST?) (("" (ASSERT) (("" (INST -1 "y!1") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|IMP_integral_def| ASSUMING "integral_def[T].integral_def" "connected_domain: ASSUMPTION deriv_domain_def[T].connected?"))) (|IMP_integral_def_TCC2| 0 (|IMP_integral_def_TCC2-2| "" 3790090297 ("" (LEMMA "not_one_element") (("" (PROPAX) NIL NIL)) NIL) ((|not_one_element| FORMULA-DECL NIL |integral_prep| NIL)) SHOSTAK (|IMP_integral_def| ASSUMING "integral_def[T].integral_def" "not_one_element: ASSUMPTION deriv_domain_def[T].not_one_element?")) (|IMP_integral_def_TCC2-1| |nil| 3253532115 ("" (SKOSIMP*) (("" (LEMMA "not_one_element") (("" (INST?) NIL NIL)) NIL)) NIL) NIL NIL (|IMP_integral_def| ASSUMING "integral_def[T].integral_def" "not_one_element: ASSUMPTION deriv_domain_def[T].not_one_element?"))) (|integral_const_fun| 0 (|integral_const_fun-2| "" 3790090299 ("" (SKOSIMP*) (("" (REWRITE "integral_def") (("" (EXPAND "integral?") (("" (SKOSIMP*) (("" (AUTO-REWRITE "Rie_sum") (("" (INST + "1") (("" (SKOSIMP*) (("" (CASE-REPLACE "R!1 = D!1*(b!1-a!1)") (("1" (ASSERT) (("1" (EXPAND "abs") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (TYPEPRED "R!1") (("2" (EXPAND "Riemann_sum?") (("2" (SKOSIMP*) (("2" (REPLACE -1) (("2" (HIDE -1) (("2" (ASSERT) (("2" (EXPAND "const_fun") (("2" (CASE "FORALL (n: below(length(P!1))): n > 0 IMPLIES          sigma[below(length(P!1) - 1)]          (0, n-1,           LAMBDA (n: below(length(P!1) - 1)):             seq(P!1)(1 + n) * D!1 - seq(P!1)(n) * D!1) =   D!1*seq(P!1)(n) - D!1*seq(P!1)(0)") (("1" (INST -1 "length(P!1)-1") (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (INDUCT "n" 1 "below_induction[length(P!1)]") (("1" (ASSERT) NIL NIL) ("2" (SKOSIMP*) (("2" (ASSERT) (("2" (CASE-REPLACE "jb!1 = 0") (("1" (HIDE -3) (("1" (EXPAND "sigma") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "sigma" 2) (("2" (REPLACE -2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("4" (HIDE 2) (("4" (SKOSIMP*) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("4" (HIDE 2) (("4" (SKOSIMP*) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((T FORMAL-SUBTYPE-DECL NIL |integral_prep| NIL) (|T_pred| CONST-DECL "[real -> boolean]" |integral_prep| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|const_fun| CONST-DECL "[T -> real]" |real_fun_ops| |reals|) (|integral_def| FORMULA-DECL NIL |integral_def| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (< CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|closed_interval| TYPE-EQ-DECL NIL |intervals_real| |reals|) (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|partition| TYPE-EQ-DECL NIL |integral_def| NIL) (|Riemann_sum?| CONST-DECL "bool" |integral_def| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|sigma_0_neg| FORMULA-DECL NIL |sigma_below| |reals|) (|below_induction| FORMULA-DECL NIL |bounded_nat_inductions| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|a!1| SKOLEM-CONST-DECL "T" |integral_prep| NIL) (|b!1| SKOLEM-CONST-DECL "T" |integral_prep| NIL) (P!1 SKOLEM-CONST-DECL "partition[T](a!1, b!1)" |integral_prep| NIL) (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|T_low| TYPE-EQ-DECL NIL |sigma| |reals|) (|T_high| TYPE-EQ-DECL NIL |sigma| |reals|) (|sigma| DEF-DECL "real" |sigma| |reals|) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|Rie_sum| CONST-DECL "real" |integral_def| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|integral?| CONST-DECL "bool" |integral_def| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK) (|integral_const_fun-1| |nil| 3253532115 ("" (SKOSIMP*) (("" (REWRITE "integral_def") (("" (EXPAND "integral?") (("" (SKOSIMP*) (("" (AUTO-REWRITE "Rie_sum") (("" (INST + "1") (("" (SKOSIMP*) (("" (CASE-REPLACE "R!1 = D!1*(b!1-a!1)") (("1" (ASSERT) (("1" (EXPAND "abs") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (TYPEPRED "R!1") (("2" (EXPAND "Riemann_sum?") (("2" (SKOSIMP*) (("2" (REPLACE -1) (("2" (HIDE -1) (("2" (ASSERT) (("1" (EXPAND "const_fun") (("1" (CASE "FORALL (n: below(length(P!1))): n > 0 IMPLIES          sigma[below(length(P!1) - 1)]          (0, n-1,           LAMBDA (n: below(length(P!1) - 1)):             seq(P!1)(1 + n) * D!1 - seq(P!1)(n) * D!1) =   D!1*seq(P!1)(n) - D!1*seq(P!1)(0)") (("1" (INST -1 "length(P!1)-1") (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (INDUCT "n" 1 "below_induction[length(P!1)]") (("1" (ASSERT) NIL NIL) ("2" (SKOSIMP*) (("2" (ASSERT) (("1" (CASE-REPLACE "jb!1 = 0") (("1" (HIDE -3) (("1" (EXPAND "sigma") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("1" (EXPAND "sigma" 2) (("1" (REPLACE -2) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("4" (HIDE 2) (("4" (SKOSIMP*) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("4" (HIDE 2) (("4" (SKOSIMP*) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) NIL)) (|integral_const_restrict| 0 (|integral_const_restrict-4| "" 3790090301 ("" (SKOSIMP*) (("" (LEMMA "integral_const_fun") (("" (INST?) (("" (ASSERT) (("" (FLATTEN) (("" (TYPEPRED "integral(a!1, b!1, const_fun[T](D!1))") (("" (EXPAND "integral?") (("" (SKOSIMP*) (("" (INST -1 "epsi!1") (("" (SKOSIMP*) (("" (INST + "delta!1") (("" (SKOSIMP*) (("" (INST?) (("" (ASSERT) (("" (REPLACE -3) (("" (TYPEPRED "R!1") (("" (INST -2 "R!1") (("1" (ASSERT) NIL NIL) ("2" (HIDE 2) (("2" (EXPAND "Riemann_sum?") (("2" (AUTO-REWRITE "Rie_sum") (("2" (SKOSIMP*) (("2" (ASSERT) (("2" (INST + "xis!1") (("2" (REPLACE -1) (("2" (HIDE -1) (("2" (ASSERT) (("2" (EXPAND "const_fun") (("2" (REWRITE "sigma_restrict_eq[below(length(P!1) - 1)]") (("1" (HIDE 2) (("1" (EXPAND "restrict") (("1" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (HIDE 2) (("2" (TYPEPRED "xis!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|integral_const_fun| FORMULA-DECL NIL |integral_prep| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (< CONST-DECL "bool" |reals| NIL) (|integral?| CONST-DECL "bool" |integral_def| NIL) (|const_fun| CONST-DECL "[T -> real]" |real_fun_ops| |reals|) (|integrable?| CONST-DECL "bool" |integral_def| NIL) (|integral| CONST-DECL "{S: real | integral?(a, b, ff, S)}" |integral_def| NIL) (|Riemann_sum?| CONST-DECL "bool" |integral_def| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|Rie_sum| CONST-DECL "real" |integral_def| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|sigma_restrict_eq| FORMULA-DECL NIL |sigma| |reals|) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|T_high| TYPE-EQ-DECL NIL |sigma| |reals|) (|T_low| TYPE-EQ-DECL NIL |sigma| |reals|) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|restrict| CONST-DECL "[T -> real]" |sigma| |reals|) (|xis?| CONST-DECL "bool" |integral_def| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|a!1| SKOLEM-CONST-DECL "T" |integral_prep| NIL) (|b!1| SKOLEM-CONST-DECL "T" |integral_prep| NIL) (P!1 SKOLEM-CONST-DECL "partition[T](a!1, b!1)" |integral_prep| NIL) (D!1 SKOLEM-CONST-DECL "real" |integral_prep| NIL) (|f!1| SKOLEM-CONST-DECL "[T -> real]" |integral_prep| NIL) (R!1 SKOLEM-CONST-DECL "(Riemann_sum?[T](a!1, b!1, P!1, f!1))" |integral_prep| NIL) (|partition| TYPE-EQ-DECL NIL |integral_def| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|closed_interval| TYPE-EQ-DECL NIL |intervals_real| |reals|) (<= CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (T FORMAL-SUBTYPE-DECL NIL |integral_prep| NIL) (|T_pred| CONST-DECL "[real -> boolean]" |integral_prep| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) SHOSTAK) (|integral_const_restrict-3| |nil| 3278176127 ("" (SKOSIMP*) (("" (LEMMA "integral_const_fun") (("" (INST?) (("" (ASSERT) (("" (FLATTEN) (("" (TYPEPRED "integral(a!1, b!1, const_fun[T](D!1))") (("1" (EXPAND "integral?") (("1" (SKOSIMP*) (("1" (INST -1 "epsi!1") (("1" (SKOSIMP*) (("1" (INST + "delta!1") (("1" (SKOSIMP*) (("1" (INST?) (("1" (ASSERT) (("1" (REPLACE -3) (("1" (TYPEPRED "R!1") (("1" (INST -2 "R!1") (("1" (ASSERT) NIL NIL) ("2" (HIDE 2) (("2" (EXPAND "Riemann_sum?") (("2" (AUTO-REWRITE "Rie_sum") (("2" (SKOSIMP*) (("2" (ASSERT) (("2" (INST + "xis!1") (("2" (REPLACE -1) (("2" (HIDE -1) (("2" (ASSERT) (("2" (EXPAND "const_fun") (("2" (REWRITE "sigma_restrict_eq[below(length(P!1) - 1)]") (("1" (HIDE 2) (("1" (EXPAND "restrict") (("1" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("1" (INST?) (("1" (ASSERT) NIL NIL) ("2" (HIDE 2) (("2" (TYPEPRED "P!1") (("2" (TYPEPRED "xis!1") (("2" (ASSERT) (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (TYPEPRED "xis!1") (("2" (ASSERT) (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (HIDE 2) (("2" (TYPEPRED "xis!1") (("2" (ASSERT) (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) NIL) (|integral_const_restrict-2| |nil| 3277741047 ("" (SKOSIMP*) (("" (LEMMA "integral_const_fun") (("" (INST?) (("" (ASSERT) (("" (FLATTEN) (("" (TYPEPRED "integral(a!1, b!1, const_fun[T](D!1))") (("1" (EXPAND "integral?") (("1" (SKOSIMP*) (("1" (INST -1 "epsi!1") (("1" (SKOSIMP*) (("1" (INST + "delta!1") (("1" (SKOSIMP*) (("1" (INST?) (("1" (ASSERT) (("1" (REPLACE -3) (("1" (TYPEPRED "R!1") (("1" (INST -2 "R!1") (("1" (ASSERT) NIL NIL) ("2" (HIDE 2) (("2" (EXPAND "Riemann_sum?") (("2" (SKOSIMP*) (("2" (ASSERT) (("2" (INST + "xis!1") (("2" (REPLACE -1) (("2" (HIDE -1) (("2" (ASSERT) (("2" (EXPAND "const_fun") (("2" (REWRITE "sigma_restrict_eq[below(length(P!1) - 1)]") (("1" (HIDE 2) (("1" (EXPAND "restrict") (("1" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("1" (INST?) (("1" (ASSERT) NIL NIL) ("2" (HIDE 2) (("2" (TYPEPRED "P!1") (("2" (TYPEPRED "xis!1") (("2" (ASSERT) (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (TYPEPRED "xis!1") (("2" (ASSERT) (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (HIDE 2) (("2" (TYPEPRED "xis!1") (("2" (ASSERT) (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) NIL) (|integral_const_restrict-1| |nil| 3253532115 ("" (SKOSIMP*) (("" (LEMMA "integral_const_fun") (("" (INST?) (("" (ASSERT) (("" (FLATTEN) (("" (TYPEPRED "integral(a!1, b!1, const_fun[T](D!1))") (("1" (EXPAND "is_integral") (("1" (SKOSIMP*) (("1" (INST -1 "epsi!1") (("1" (SKOSIMP*) (("1" (INST + "delta!1") (("1" (SKOSIMP*) (("1" (INST?) (("1" (ASSERT) (("1" (REPLACE -3) (("1" (HIDE -3) (("1" (CASE-REPLACE "Riemann_sum(a!1, b!1, P!1, f!1) = Riemann_sum(a!1, b!1, P!1, const_fun[T](D!1))") (("1" (ASSERT) NIL NIL) ("2" (HIDE -1 2) (("2" (EXPAND "Riemann_sum") (("2" (REWRITE "sigma_restrict_eq") (("1" (HIDE 2) (("1" (EXPAND "restrict") (("1" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("1" (LIFT-IF) (("1" (GROUND) (("1" (EXPAND "const_fun") (("1" (INST?) (("1" (REPLACE -3) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (TYPEPRED "P!1") (("2" (INST - "i!1-1") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (ASSERT) (("2" (TYPEPRED "P!1") (("2" (INST - "n!1-1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("4" (HIDE-ALL-BUT 1) (("4" (SKOSIMP*) (("4" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (NIL NIL NIL NIL NIL NIL NIL) NIL)) (|integral_scal| 0 (|integral_scal-4| "" 3790090307 ("" (SKOSIMP*) (("" (CASE-REPLACE "D!1 = 0") (("1" (ASSERT) (("1" (EXPAND "*") (("1" (LEMMA "integral_const_fun") (("1" (INST - "0" "a!1" "b!1") (("1" (EXPAND "const_fun") (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "integral_def") (("2" (TYPEPRED "integral(a!1, b!1, f!1)") (("2" (EXPAND "integral?") (("2" (SKOSIMP*) (("2" (INST -1 "epsi!1/abs(D!1)") (("1" (SKOSIMP*) (("1" (INST + "delta!1") (("1" (SKOSIMP*) (("1" (INST?) (("1" (ASSERT) (("1" (TYPEPRED "R!1") (("1" (EXPAND "Riemann_sum?") (("1" (AUTO-REWRITE "Rie_sum") (("1" (ASSERT) (("1" (SKOSIMP*) (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (CASE-REPLACE "Rie_sum(a!1, b!1, P!1, xis!1, D!1 * f!1) = D!1*Rie_sum(a!1, b!1, P!1, xis!1, f!1)") (("1" (EXPAND "Rie_sum") (("1" (ASSERT) (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (INST - "sigma[below(length(P!1) - 1)]
                                    (0, length(P!1) - 2,
                                     LAMBDA (n: below(length(P!1) - 1)):
                                       P!1`seq(1 + n) * f!1(xis!1(n)) -
                                        P!1`seq(n) * f!1(xis!1(n)))") (("1" (CROSS-MULT -1) (("1" (ASSERT) (("1" (REWRITE "abs_mult " :DIR RL) (("1" (ASSERT) NIL NIL) ("2" (HIDE 3) (("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (EXPAND "Riemann_sum?") (("2" (ASSERT) (("2" (INST + "xis!1") NIL NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (HIDE 2) (("2" (EXPAND "Rie_sum") (("2" (ASSERT) (("2" (LEMMA "sigma_scal[below(length(P!1) - 1)]") (("1" (INST?) (("1" (ASSERT) (("1" (EXPAND "*") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (ASSERT) (("2" (CASE "epsi!1 / abs(D!1) > 0") (("1" (ASSERT) NIL NIL) ("2" (HIDE 2) (("2" (HIDE -2) (("2" (CROSS-MULT 1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE -2 3) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (* CONST-DECL "[T -> real]" |real_fun_ops| |reals|) (T FORMAL-SUBTYPE-DECL NIL |integral_prep| NIL) (|T_pred| CONST-DECL "[real -> boolean]" |integral_prep| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|const_fun| CONST-DECL "[T -> real]" |real_fun_ops| |reals|) (|integral_const_fun| FORMULA-DECL NIL |integral_prep| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|div_mult_pos_gt1| FORMULA-DECL NIL |extra_real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|Rie_sum| CONST-DECL "real" |integral_def| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|xis?| CONST-DECL "bool" |integral_def| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|div_mult_pos_neg_lt2| FORMULA-DECL NIL |extra_real_props| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|abs_mult| FORMULA-DECL NIL |real_props| NIL) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|f!1| SKOLEM-CONST-DECL "[T -> real]" |integral_prep| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|T_low| TYPE-EQ-DECL NIL |sigma| |reals|) (|T_high| TYPE-EQ-DECL NIL |sigma| |reals|) (|sigma| DEF-DECL "real" |sigma| |reals|) (|xis!1| SKOLEM-CONST-DECL "(xis?(a!1, b!1, P!1))" |integral_prep| NIL) (|a!1| SKOLEM-CONST-DECL "T" |integral_prep| NIL) (|b!1| SKOLEM-CONST-DECL "T" |integral_prep| NIL) (P!1 SKOLEM-CONST-DECL "partition[T](a!1, b!1)" |integral_prep| NIL) (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|sigma_scal| FORMULA-DECL NIL |sigma| |reals|) (|Riemann_sum?| CONST-DECL "bool" |integral_def| NIL) (|partition| TYPE-EQ-DECL NIL |integral_def| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|closed_interval| TYPE-EQ-DECL NIL |intervals_real| |reals|) (<= CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|epsi!1| SKOLEM-CONST-DECL "posreal" |integral_prep| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (D!1 SKOLEM-CONST-DECL "real" |integral_prep| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|integral| CONST-DECL "{S: real | integral?(a, b, ff, S)}" |integral_def| NIL) (|integral?| CONST-DECL "bool" |integral_def| NIL) (|integrable?| CONST-DECL "bool" |integral_def| NIL) (< CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|integral_def| FORMULA-DECL NIL |integral_def| NIL)) SHOSTAK) (|integral_scal-3| |nil| 3280253820 ("" (SKOSIMP*) (("" (CASE-REPLACE "D!1 = 0") (("1" (ASSERT) (("1" (EXPAND "*") (("1" (LEMMA "integral_const_fun") (("1" (INST - "0" "a!1" "b!1") (("1" (EXPAND "const_fun") (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "integral_def") (("2" (TYPEPRED "integral(a!1, b!1, f!1)") (("1" (EXPAND "integral?") (("1" (SKOSIMP*) (("1" (INST -1 "epsi!1/abs(D!1)") (("1" (SKOSIMP*) (("1" (INST + "delta!1") (("1" (SKOSIMP*) (("1" (INST?) (("1" (ASSERT) (("1" (TYPEPRED "R!1") (("1" (EXPAND "Riemann_sum?") (("1" (AUTO-REWRITE "Rie_sum") (("1" (ASSERT) (("1" (SKOSIMP*) (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (CASE-REPLACE "Rie_sum(a!1, b!1, P!1, xis!1, D!1 * f!1) = D!1*Rie_sum(a!1, b!1, P!1, xis!1, f!1)") (("1" (EXPAND "Rie_sum") (("1" (ASSERT) (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (INST - "sigma[below(length(P!1) - 1)]
                                    (0, length(P!1) - 2,
                                     LAMBDA (n: below(length(P!1) - 1)):
                                       P!1`seq(1 + n) * f!1(xis!1(n)) -
                                        P!1`seq(n) * f!1(xis!1(n)))") (("1" (CROSS-MULT -1) (("1" (ASSERT) (("1" (SPLIT -1) (("1" (FLATTEN) (("1" (REWRITE "abs_mult " :DIR RL) (("1" (ASSERT) NIL NIL) ("2" (HIDE 3) (("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (HIDE-ALL-BUT (1 2)) (("2" (EXPAND "abs") (("2" (LIFT-IF) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (HIDE-ALL-BUT (1 2)) (("3" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (EXPAND "Riemann_sum?") (("2" (ASSERT) (("2" (INST + "xis!1") NIL NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (HIDE 2) (("2" (EXPAND "Rie_sum") (("2" (ASSERT) (("2" (LEMMA "sigma_scal[below(length(P!1) - 1)]") (("1" (INST?) (("1" (ASSERT) (("1" (EXPAND "*") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (ASSERT) (("2" (CASE "epsi!1 / abs(D!1) > 0") (("1" (ASSERT) NIL NIL) ("2" (HIDE 2) (("2" (HIDE -2) (("2" (CROSS-MULT 1) (("1" (GRIND) NIL NIL) ("2" (ASSERT) (("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE -2 3) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL) ("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) NIL) (|integral_scal-2| |nil| 3278176311 ("" (SKOSIMP*) (("" (CASE-REPLACE "D!1 = 0") (("1" (ASSERT) (("1" (EXPAND "*") (("1" (LEMMA "integral_const_fun") (("1" (INST - "0" "a!1" "b!1") (("1" (EXPAND "const_fun") (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "integral_def") (("2" (TYPEPRED "integral(a!1, b!1, f!1)") (("1" (EXPAND "integral?") (("1" (SKOSIMP*) (("1" (INST -1 "epsi!1/abs(D!1)") (("1" (SKOSIMP*) (("1" (INST + "delta!1") (("1" (SKOSIMP*) (("1" (INST?) (("1" (ASSERT) (("1" (TYPEPRED "R!1") (("1" (EXPAND "Riemann_sum?") (("1" (AUTO-REWRITE "Rie_sum") (("1" (ASSERT) (("1" (SKOSIMP*) (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (CASE-REPLACE "Rie_sum(a!1, b!1, P!1, xis!1, D!1 * f!1) = D!1*Rie_sum(a!1, b!1, P!1, xis!1, f!1)") (("1" (EXPAND "Rie_sum") (("1" (ASSERT) (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (INST - "sigma[below(length(P!1) - 1)]
                          (0, length(P!1) - 2,
                           LAMBDA (n: below(length(P!1) - 1)):
                             P!1`seq(1 + n) * f!1(xis!1`seq(n)) -
                              P!1`seq(n) * f!1(xis!1`seq(n)))") (("1" (CROSS-MULT -1) (("1" (ASSERT) (("1" (SPLIT -1) (("1" (FLATTEN) (("1" (REWRITE "abs_mult " :DIR RL) (("1" (ASSERT) NIL NIL) ("2" (HIDE 3) (("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) (("3" (TYPEPRED "xis!1") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (HIDE-ALL-BUT (1 2)) (("2" (EXPAND "abs") (("2" (LIFT-IF) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) (("3" (TYPEPRED "xis!1") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("4" (HIDE-ALL-BUT (1 2)) (("4" (EXPAND "abs") (("4" (LIFT-IF) (("4" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (EXPAND "Riemann_sum?") (("2" (ASSERT) (("2" (INST + "xis!1") NIL NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL) ("4" (SKOSIMP*) (("4" (ASSERT) (("4" (TYPEPRED "xis!1") (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (HIDE 2) (("2" (EXPAND "Rie_sum") (("2" (ASSERT) (("2" (LEMMA "sigma_scal[below(length(P!1) - 1)]") (("1" (INST?) (("1" (ASSERT) (("1" (EXPAND "*") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (ASSERT) (("2" (TYPEPRED "xis!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (ASSERT) (("2" (CASE "epsi!1 / abs(D!1) > 0") (("1" (ASSERT) NIL NIL) ("2" (HIDE 2) (("2" (HIDE -2) (("2" (CROSS-MULT 1) (("1" (GRIND) NIL NIL) ("2" (ASSERT) (("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE -2 3) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL) ("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) NIL) (|integral_scal-1| |nil| 3253532115 ("" (SKOSIMP*) (("" (CASE-REPLACE "D!1 = 0") (("1" (ASSERT) (("1" (EXPAND "*") (("1" (LEMMA "integral_const_fun") (("1" (INST - "0" "a!1" "b!1") (("1" (EXPAND "const_fun") (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "integral_def") (("2" (TYPEPRED "integral(a!1, b!1, f!1)") (("1" (EXPAND "integral?") (("1" (SKOSIMP*) (("1" (INST -1 "epsi!1/abs(D!1)") (("1" (SKOSIMP*) (("1" (INST + "delta!1") (("1" (SKOSIMP*) (("1" (INST?) (("1" (ASSERT) (("1" (TYPEPRED "R!1") (("1" (EXPAND "Riemann_sum?") (("1" (ASSERT) (("1" (SKOSIMP*) (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (CASE-REPLACE "Rie_sum(a!1, b!1, P!1, xis!1, D!1 * f!1) = D!1*Rie_sum(a!1, b!1, P!1, xis!1, f!1)") (("1" (EXPAND "Rie_sum") (("1" (ASSERT) (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (INST - "sigma[below(length(P!1) - 1)]
                (0, length(P!1) - 2,
                 LAMBDA (n: below(length(P!1) - 1)):
                   P!1`seq(1 + n) * f!1(xis!1`seq(n)) -
                    P!1`seq(n) * f!1(xis!1`seq(n)))") (("1" (CROSS-MULT -1) (("1" (ASSERT) (("1" (SPLIT -1) (("1" (FLATTEN) (("1" (REWRITE "abs_mult " :DIR RL) (("1" (ASSERT) NIL NIL) ("2" (HIDE 3) (("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) (("3" (TYPEPRED "xis!1") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (HIDE-ALL-BUT (1 2)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) (("3" (TYPEPRED "xis!1") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("4" (HIDE-ALL-BUT (1 2)) (("4" (EXPAND "abs") (("4" (LIFT-IF) (("4" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (EXPAND "Riemann_sum?") (("2" (ASSERT) (("2" (INST + "xis!1") NIL NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL) ("4" (SKOSIMP*) (("4" (ASSERT) (("4" (TYPEPRED "xis!1") (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (HIDE 2) (("2" (EXPAND "Rie_sum") (("2" (ASSERT) (("2" (LEMMA "sigma_scal[below(length(P!1) - 1)]") (("1" (INST?) (("1" (ASSERT) (("1" (EXPAND "*") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (ASSERT) (("2" (TYPEPRED "xis!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (ASSERT) (("2" (CASE "epsi!1 / abs(D!1) > 0") (("1" (ASSERT) NIL NIL) ("2" (HIDE 2) (("2" (HIDE -2) (("2" (CROSS-MULT 1) (("1" (GRIND) NIL NIL) ("2" (ASSERT) (("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE -2 3) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL) ("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) NIL)) (|integral_sum| 0 (|integral_sum-2| "" 3790090309 ("" (SKOSIMP*) (("" (REWRITE "integral_def") (("" (TYPEPRED "integral(a!1, b!1, f!1)") (("" (TYPEPRED "integral(a!1, b!1, g!1)") (("" (NAME-REPLACE "I1" "integral(a!1, b!1, f!1)") (("" (NAME-REPLACE "I2" "integral(a!1, b!1, g!1)") (("" (EXPAND "integral?") (("" (SKOSIMP*) (("" (INST -1 "epsi!1/2") (("" (INST - "epsi!1/2") (("" (SKOSIMP*) (("" (INST + "min(delta!1,delta!2)") (("" (SKOSIMP*) (("" (INST - "P!1") (("" (INST - "P!1") (("" (SPLIT -1) (("1" (SPLIT -2) (("1" (HIDE -4 -5 -6) (("1" (TYPEPRED "R!1") (("1" (EXPAND "Riemann_sum?") (("1" (SKOSIMP*) (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (CASE-REPLACE "Rie_sum(a!1, b!1, P!1, xis!1, LAMBDA x: f!1(x) + g!1(x)) =                       Rie_sum(a!1, b!1, P!1, xis!1, f!1) + Rie_sum(a!1, b!1, P!1, xis!1, g!1)") (("1" (HIDE -1) (("1" (INST - "Rie_sum(a!1, b!1, P!1, xis!1, f!1)") (("1" (INST - "Rie_sum(a!1, b!1, P!1, xis!1, g!1)") (("1" (LEMMA "triangle") (("1" (INST -1 "I1 - Rie_sum(a!1, b!1, P!1, xis!1, f!1)" "I2 - Rie_sum(a!1, b!1, P!1, xis!1, g!1)") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "Riemann_sum?") (("2" (INST?) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "Riemann_sum?") (("2" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (HIDE -1 -2) (("2" (EXPAND "Rie_sum") (("2" (ASSERT) (("2" (LEMMA "sigma_sum[below(length(P!1) - 1)]") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 -3 -4 2) (("2" (EXPAND "min") (("2" (LIFT-IF) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 -3 -4 2) (("2" (EXPAND "min") (("2" (LIFT-IF) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((T FORMAL-SUBTYPE-DECL NIL |integral_prep| NIL) (|T_pred| CONST-DECL "[real -> boolean]" |integral_prep| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|integral| CONST-DECL "{S: real | integral?(a, b, ff, S)}" |integral_def| NIL) (|integral?| CONST-DECL "bool" |integral_def| NIL) (|integrable?| CONST-DECL "bool" |integral_def| NIL) (< CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|integral_def| FORMULA-DECL NIL |integral_def| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|posreal_min| APPLICATION-JUDGEMENT "{z: posreal | z <= x AND z <= y}" |real_defs| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|closed_interval| TYPE-EQ-DECL NIL |intervals_real| |reals|) (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|partition| TYPE-EQ-DECL NIL |integral_def| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|xis?| CONST-DECL "bool" |integral_def| NIL) (|Rie_sum| CONST-DECL "real" |integral_def| NIL) (|xis!1| SKOLEM-CONST-DECL "(xis?(a!1, b!1, P!1))" |integral_prep| NIL) (|f!1| SKOLEM-CONST-DECL "[T -> real]" |integral_prep| NIL) (P!1 SKOLEM-CONST-DECL "partition[T](a!1, b!1)" |integral_prep| NIL) (|b!1| SKOLEM-CONST-DECL "T" |integral_prep| NIL) (|a!1| SKOLEM-CONST-DECL "T" |integral_prep| NIL) (|triangle| FORMULA-DECL NIL |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|g!1| SKOLEM-CONST-DECL "[T -> real]" |integral_prep| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|T_high| TYPE-EQ-DECL NIL |sigma| |reals|) (|T_low| TYPE-EQ-DECL NIL |sigma| |reals|) (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|sigma_sum| FORMULA-DECL NIL |sigma| |reals|) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|Riemann_sum?| CONST-DECL "bool" |integral_def| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)) SHOSTAK) (|integral_sum-1| |nil| 3253532115 ("" (SKOSIMP*) (("" (REWRITE "integral_def") (("" (TYPEPRED "integral(a!1, b!1, f!1)") (("1" (TYPEPRED "integral(a!1, b!1, g!1)") (("1" (NAME-REPLACE "I1" "integral(a!1, b!1, f!1)") (("1" (NAME-REPLACE "I2" "integral(a!1, b!1, g!1)") (("1" (EXPAND "integral?") (("1" (SKOSIMP*) (("1" (INST -1 "epsi!1/2") (("1" (INST - "epsi!1/2") (("1" (SKOSIMP*) (("1" (INST + "min(delta!1,delta!2)") (("1" (SKOSIMP*) (("1" (INST - "P!1") (("1" (INST - "P!1") (("1" (SPLIT -1) (("1" (SPLIT -2) (("1" (HIDE -4 -5 -6) (("1" (TYPEPRED "R!1") (("1" (EXPAND "Riemann_sum?") (("1" (SKOSIMP*) (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (CASE-REPLACE "Rie_sum(a!1, b!1, P!1, xis!1, LAMBDA x: f!1(x) + g!1(x)) =                       Rie_sum(a!1, b!1, P!1, xis!1, f!1) + Rie_sum(a!1, b!1, P!1, xis!1, g!1)") (("1" (HIDE -1) (("1" (INST - "Rie_sum(a!1, b!1, P!1, xis!1, f!1)") (("1" (INST - "Rie_sum(a!1, b!1, P!1, xis!1, g!1)") (("1" (LEMMA "triangle") (("1" (INST -1 "I1 - Rie_sum(a!1, b!1, P!1, xis!1, f!1)" "I2 - Rie_sum(a!1, b!1, P!1, xis!1, g!1)") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "Riemann_sum?") (("2" (INST?) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "Riemann_sum?") (("2" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (HIDE -1 -2) (("2" (EXPAND "Rie_sum") (("2" (ASSERT) (("2" (LEMMA "sigma_sum[below(length(P!1) - 1)]") (("1" (INST?) (("1" (ASSERT) NIL NIL) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (TYPEPRED "xis!1") (("2" (ASSERT) (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 -3 -4 2) (("2" (EXPAND "min") (("2" (LIFT-IF) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 -3 -4 2) (("2" (EXPAND "min") (("2" (LIFT-IF) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (ASSERT) (("2" (EXPAND "min") (("2" (LIFT-IF) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL) ("2" (PROPAX) NIL NIL) ("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) NIL)) (|integral?_sum| 0 (|integral?_sum-1| |nil| 3278177576 ("" (SKOSIMP*) (("" (LEMMA "integral_sum") (("" (INST?) (("" (INST?) (("" (ASSERT) (("" (LEMMA "integral_def") (("" (INST - "a!1" "b!1" "f!1" "v1!1") (("" (ASSERT) (("" (LEMMA "integral_def") (("" (INST - "a!1" "b!1" "g!1" "v2!1") (("" (ASSERT) (("" (FLATTEN) (("" (ASSERT) (("" (FLATTEN) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|integral_sum| FORMULA-DECL NIL |integral_prep| NIL) (|integral_def| FORMULA-DECL NIL |integral_def| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (T FORMAL-SUBTYPE-DECL NIL |integral_prep| NIL) (|T_pred| CONST-DECL "[real -> boolean]" |integral_prep| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) SHOSTAK)) (|integral_diff| 0 (|integral_diff-2| "" 3754466198 ("" (SKOSIMP*) (("" (LEMMA "integral_sum") (("" (INST -1 "a!1" "b!1" "f!1" "-g!1") (("" (ASSERT) (("" (SPLIT -1) (("1" (FLATTEN) (("1" (ASSERT) (("1" (EXPAND "-") (("1" (ASSERT) (("1" (ASSERT) (("1" (REPLACE -2) (("1" (ASSERT) (("1" (LEMMA "integral_scal") (("1" (INST?) (("1" (ASSERT) (("1" (FLATTEN) (("1" (CASE-REPLACE "(LAMBDA (x: T): -g!1(x)) = -1 * g!1") (("1" (ASSERT) (("1" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("1" (EXPAND "*") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (LEMMA "integral_scal") (("2" (INST -1 "-1" "a!1" "b!1" "g!1") (("2" (ASSERT) (("2" (FLATTEN) (("2" (ASSERT) (("2" (CASE-REPLACE "-g!1 = -1*g!1") (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("2" (EXPAND "*") (("2" (ASSERT) (("2" (EXPAND "-") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|integral_sum| FORMULA-DECL NIL |integral_prep| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (* CONST-DECL "[T -> real]" |real_fun_ops| |reals|) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|integral_scal| FORMULA-DECL NIL |integral_prep| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (- CONST-DECL "[T -> real]" |real_fun_ops| |reals|) (T FORMAL-SUBTYPE-DECL NIL |integral_prep| NIL) (|T_pred| CONST-DECL "[real -> boolean]" |integral_prep| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) SHOSTAK) (|integral_diff-1| |nil| 3253532115 ("" (SKOSIMP*) (("" (LEMMA "integral_sum") (("" (INST -1 "a!1" "b!1" "f!1" "-g!1") (("" (ASSERT) (("" (SPLIT -1) (("1" (FLATTEN) (("1" (ASSERT) (("1" (EXPAND "-") (("1" (ASSERT) (("1" (ASSERT) (("1" (REPLACE -2) (("1" (ASSERT) (("1" (LEMMA "integral_scal") (("1" (INST?) (("1" (ASSERT) (("1" (FLATTEN) (("1" (CASE-REPLACE "(LAMBDA (x: T): -g!1(x)) = -1 * g!1") (("1" (ASSERT) NIL NIL) ("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("2" (EXPAND "*") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (LEMMA "integral_scal") (("2" (INST -1 "-1" "a!1" "b!1" "g!1") (("2" (ASSERT) (("2" (FLATTEN) (("2" (ASSERT) (("2" (CASE-REPLACE "-g!1 = -1*g!1") (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("2" (EXPAND "*") (("2" (ASSERT) (("2" (EXPAND "-") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL)) (|integral_ge_0| 0 (|integral_ge_0-3| "" 3882421731 ("" (SKOSIMP*) (("" (TYPEPRED "integral(a!1, b!1, f!1)") (("" (EXPAND "integral?") (("" (CASE "FORALL (eps: posreal): integral(a!1, b!1, f!1) >= -eps") (("1" (HIDE -2 -3 -5) (("1" (INST -1 "-integral(a!1, b!1, f!1)/2") (("1" (ASSERT) NIL NIL) ("2" (PROP) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) (("2" (INST -1 "eps!1") (("2" (SKOSIMP*) (("2" (LEMMA "axiom_of_archimedes") (("2" (INST -1 "(b!1-a!1)/delta!1+2") (("2" (SKOSIMP*) (("2" (NAME "NM" "real_defs.max(i!1,2)") (("2" (INST - "eq_partition(a!1,b!1,NM)") (("1" (SPLIT -3) (("1" (INST - "Rie_sum(a!1, b!1, eq_partition(a!1, b!1, NM), gen_xis(a!1, b!1, eq_partition(a!1, b!1, NM)), f!1)") (("1" (NAME-REPLACE "II" "integral(a!1, b!1, f!1)") (("1" (CASE "Rie_sum(a!1, b!1, eq_partition(a!1, b!1, NM), gen_xis(a!1,b!1,eq_partition(a!1, b!1, NM)), f!1) >= 0") (("1" (EXPAND "abs") (("1" (LIFT-IF) (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (HIDE -1 -4 2 3) (("2" (NAME "NN" "eq_partition(a!1, b!1, NM)") (("2" (REPLACE -1) (("2" (EXPAND "Rie_sum") (("2" (LEMMA "sigma_nonneg[below(length(NN) - 1)]") (("1" (ASSERT) (("1" (INST?) (("1" (ASSERT) (("1" (HIDE 2) (("1" (SKOSIMP*) (("1" (FACTOR 1 L) (("1" (INST?) (("1" (CASE "(NN`seq(1 + i!2) - NN`seq(i!2)) > 0") (("1" (MULT-INEQ -1 -6) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (TYPEPRED "NN") (("2" (INST - "i!2") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "Riemann?_Rie") (("2" (ASSERT) (("2" (INST?) NIL NIL)) NIL)) NIL) ("3" (ASSERT) NIL NIL)) NIL) ("2" (REWRITE "width_eq_part") (("2" (HIDE -3 -4 -5 2 3) (("2" (NAME-REPLACE "ba" "b!1-a!1") (("2" (MOVE-TERMS -2 L 2) (("2" (CASE "ba / delta!1 < i!1 - 1") (("1" (HIDE -3) (("1" (MULT-BY -1 "delta!1") (("1" (MULT-BY 1 "NM-1") (("1" (EXPAND "max") (("1" (LIFT-IF) (("1" (GROUND) (("1" (REPLACE -2 * RL) (("1" (HIDE -2) (("1" (ASSERT) (("1" (TYPEPRED "i!1") (("1" (FACTOR -3 R) (("1" (CASE "i!1-1 < 1") (("1" (HIDE -3) (("1" (MULT-BY -1 "delta!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|integral_ge_0-2| "" 3790090314 ("" (SKOSIMP*) (("" (TYPEPRED "integral(a!1, b!1, f!1)") (("" (EXPAND "integral?") (("" (CASE "FORALL (eps: posreal): integral(a!1, b!1, f!1) >= -eps") (("1" (HIDE -2 -3 -5) (("1" (INST -1 "-integral(a!1, b!1, f!1)/2") (("1" (ASSERT) NIL NIL) ("2" (PROP) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) (("2" (INST -1 "eps!1") (("2" (SKOSIMP*) (("2" (LEMMA "axiom_of_archimedes") (("2" (INST -1 "(b!1-a!1)/delta!1+2") (("2" (SKOSIMP*) (("2" (NAME "NM" "real_defs.max(i!1,2)") (("2" (INST - "eq_partition(a!1,b!1,NM)") (("1" (SPLIT -3) (("1" (INST - "Rie_sum(a!1, b!1, eq_partition(a!1, b!1, NM), gen_xis(a!1, b!1, eq_partition(a!1, b!1, NM)), f!1)") (("1" (NAME-REPLACE "II" "integral(a!1, b!1, f!1)") (("1" (CASE "Rie_sum(a!1, b!1, eq_partition(a!1, b!1, NM), gen_xis(a!1,b!1,eq_partition(a!1, b!1, NM)), f!1) >= 0") (("1" (EXPAND "abs") (("1" (LIFT-IF) (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (HIDE -1 -4 2 3) (("2" (NAME "NN" "eq_partition(a!1, b!1, NM)") (("2" (REPLACE -1) (("2" (EXPAND "Rie_sum") (("2" (LEMMA "sigma_nonneg[below(length(NN) - 1)]") (("1" (ASSERT) (("1" (INST?) (("1" (ASSERT) (("1" (HIDE 2) (("1" (SKOSIMP*) (("1" (FACTOR 1 L) (("1" (INST?) (("1" (CASE "(NN`seq(1 + i!2) - NN`seq(i!2)) > 0") (("1" (MULT-INEQ -1 -6) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (TYPEPRED "NN") (("2" (INST - "i!2") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "Riemann?_Rie") (("2" (ASSERT) (("2" (INST?) NIL NIL)) NIL)) NIL) ("3" (ASSERT) NIL NIL)) NIL) ("2" (REWRITE "width_eq_part") (("2" (HIDE -3 -4 -5 2 3) (("2" (NAME-REPLACE BA "b!1-a!1") (("2" (MOVE-TERMS -2 L 2) (("2" (CASE "ba / delta!1 < i!1 - 1") (("1" (HIDE -3) (("1" (MULT-BY -1 "delta!1") (("1" (MULT-BY 1 "NM-1") (("1" (EXPAND "max") (("1" (LIFT-IF) (("1" (GROUND) (("1" (REPLACE -2 * RL) (("1" (HIDE -2) (("1" (ASSERT) (("1" (TYPEPRED "i!1") (("1" (FACTOR -3 R) (("1" (CASE "i!1-1 < 1") (("1" (HIDE -3) (("1" (MULT-BY -1 "delta!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|integral| CONST-DECL "{S: real | integral?(a, b, ff, S)}" |integral_def| NIL) (|integrable?| CONST-DECL "bool" |integral_def| NIL) (|integral?| CONST-DECL "bool" |integral_def| NIL) (< CONST-DECL "bool" |reals| NIL) (T FORMAL-SUBTYPE-DECL NIL |integral_prep| NIL) (|T_pred| CONST-DECL "[real -> boolean]" |integral_prep| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|f!1| SKOLEM-CONST-DECL "[T -> real]" |integral_prep| NIL) (|b!1| SKOLEM-CONST-DECL "T" |integral_prep| NIL) (|a!1| SKOLEM-CONST-DECL "T" |integral_prep| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (<= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|rat_max| APPLICATION-JUDGEMENT "{s: rat | s >= q AND s >= r}" |real_defs| NIL) (|int_max| APPLICATION-JUDGEMENT "{k: int | i <= k AND j <= k}" |real_defs| NIL) (|Riemann?_Rie| FORMULA-DECL NIL |integral_def| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|sigma_nonneg| FORMULA-DECL NIL |sigma| |reals|) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|T_high| TYPE-EQ-DECL NIL |sigma| |reals|) (|T_low| TYPE-EQ-DECL NIL |sigma| |reals|) (|abs_0| FORMULA-DECL NIL |abs_lems| |reals|) (|gt_times_gt_any1| FORMULA-DECL NIL |extra_real_props| NIL) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (|Riemann_sum?| CONST-DECL "bool" |integral_def| NIL) (|xis?| CONST-DECL "bool" |integral_def| NIL) (|Rie_sum| CONST-DECL "real" |integral_def| NIL) (|gen_xis| CONST-DECL "(xis?(a, b, P))" |integral_def| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|both_sides_times_pos_ge1_imp| FORMULA-DECL NIL |extra_real_props| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|div_cancel2| FORMULA-DECL NIL |real_props| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|both_sides_times_pos_lt1| FORMULA-DECL NIL |real_props| NIL) (|width_eq_part| FORMULA-DECL NIL |integral_def| NIL) (|eq_partition| CONST-DECL "partition(a, b)" |integral_def| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|partition| TYPE-EQ-DECL NIL |integral_def| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|closed_interval| TYPE-EQ-DECL NIL |intervals_real| |reals|) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|i!1| SKOLEM-CONST-DECL "int" |integral_prep| NIL) (NM SKOLEM-CONST-DECL "{k: int | i!1 <= k AND 2 <= k}" |integral_prep| NIL) (|axiom_of_archimedes| FORMULA-DECL NIL |real_props| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK) (|integral_ge_0-1| |nil| 3253532115 ("" (SKOSIMP*) (("" (TYPEPRED "integral(a!1, b!1, f!1)") (("" (EXPAND "integral?") (("" (CASE "FORALL (eps: posreal): integral(a!1, b!1, f!1) >= -eps") (("1" (HIDE -2 -3 -5) (("1" (INST -1 "-integral(a!1, b!1, f!1)/2") (("1" (ASSERT) NIL NIL) ("2" (PROP) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) (("2" (INST -1 "eps!1") (("2" (SKOSIMP*) (("2" (LEMMA "axiom_of_archimedes") (("2" (INST -1 "(b!1-a!1)/delta!1+2") (("2" (SKOSIMP*) (("2" (NAME "NM" "real_defs.max(i!1,2)") (("2" (INST - "eq_partition(a!1,b!1,NM)") (("1" (SPLIT -3) (("1" (INST - "Rie_sum(a!1, b!1, eq_partition(a!1, b!1, NM), gen_xis(a!1, b!1, eq_partition(a!1, b!1, NM)), f!1)") (("1" (NAME-REPLACE "II" "integral(a!1, b!1, f!1)") (("1" (CASE "Rie_sum(a!1, b!1, eq_partition(a!1, b!1, NM), gen_xis(a!1,b!1,eq_partition(a!1, b!1, NM)), f!1) >= 0") (("1" (EXPAND "abs") (("1" (LIFT-IF) (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (HIDE -1 -4 2 3) (("2" (NAME "NN" "eq_partition(a!1, b!1, NM)") (("2" (REPLACE -1) (("2" (EXPAND "Rie_sum") (("2" (LEMMA "sigma_nonneg[below(length(NN) - 1)]") (("1" (ASSERT) (("1" (INST?) (("1" (ASSERT) (("1" (HIDE 2) (("1" (SKOSIMP*) (("1" (FACTOR 1 L) (("1" (INST?) (("1" (CASE "(NN`seq(1 + i!2) - NN`seq(i!2)) > 0") (("1" (MULT-INEQ -1 -6) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (TYPEPRED "NN") (("2" (INST - "i!2") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "Riemann?_Rie") (("2" (INST -1 "a!1" "b!1" "f!1") (("2" (ASSERT) (("2" (INST?) (("2" (ASSERT) (("2" (HIDE -3 -4 -5 2 3) (("2" (NAME-REPLACE BA "b!1-a!1") (("2" (LEMMA "Riemann?_Rie") (("2" (INST -1 "a!1" "b!1" "f!1") (("2" (SPLIT -1) (("1" (INST?) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (ASSERT) NIL NIL)) NIL) ("2" (REWRITE "width_eq_part") (("2" (HIDE -3 -4 -5 2 3) (("2" (NAME-REPLACE BA "b!1-a!1") (("2" (MOVE-TERMS -2 L 2) (("2" (CASE "ba / delta!1 < i!1 - 1") (("1" (HIDE -3) (("1" (MULT-BY -1 "delta!1") (("1" (MULT-BY 1 "NM-1") (("1" (EXPAND "max") (("1" (LIFT-IF) (("1" (GROUND) (("1" (REPLACE -2 * RL) (("1" (HIDE -2) (("1" (ASSERT) (("1" (TYPEPRED "i!1") (("1" (FACTOR -3 R) (("1" (CASE "i!1-1 < 1") (("1" (HIDE -3) (("1" (MULT-BY -1 "delta!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) NIL)) (|integral_jmp| 0 (|integral_jmp-13| "" 3790090330 ("" (SKOSIMP*) (("" (LEMMA "integral_def") (("" (INST?) (("" (ASSERT) (("" (FLATTEN) (("" (HIDE -1) (("" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (HIDE 2) (("2" (EXPAND "integral?") (("2" (SKOSIMP*) (("2" (CASE "cc!1 = 0") (("1" (INST + "1") (("1" (SKOSIMP*) (("1" (TYPEPRED "R!1") (("1" (EXPAND "Riemann_sum?") (("1" (SKOSIMP*) (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (CASE-REPLACE "Rie_sum(a!1, b!1, P!1, xis!1, f!1) = 0") (("1" (ASSERT) NIL NIL) ("2" (HIDE 2) (("2" (EXPAND "Rie_sum") (("2" (ASSERT) (("2" (CASE-REPLACE "(LAMBDA (n: below(length(P!1) - 1)):
                                                                                                             P!1`seq(1 + n) * f!1(xis!1(n)) -
                                                                                                              P!1`seq(n) * f!1(xis!1(n)))
                                                                                                 = (LAMBDA (n: below(length(P!1) - 1)): 0)") (("1" (LEMMA "sigma_const[below(length(P!1) - 1)]") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST + "epsi!1/(2*abs(cc!1))") (("1" (SKOSIMP*) (("1" (LEMMA "part_in") (("1" (INST -1 "a!1" "b!1" "z!1" "P!1") (("1" (ASSERT) (("1" (SKOSIMP*) (("1" (TYPEPRED "R!1") (("1" (EXPAND "Riemann_sum?") (("1" (SKOSIMP*) (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (LEMMA "Rie_sum_alt_lem") (("1" (ASSERT) (("1" (INST?) (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (EXPAND "Rie_sum_alt") (("1" (EXPAND "Rie_sec") (("1" (ASSERT) (("1" (NAME "SS1" "sigma(1, length(P!1) - 1,
n: upto(length(P!1) - 1)):
n = 0

seq(P!1)(n) * f!1(xis!1(n - 1)) -
seq(P!1)(n - 1) *
f!1(xis!1(n - 1))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   ENDIF)") (("1" (REPLACE -1) (("1" (NAME "W" "width(a!1, b!1, P!1)") (("1" (REPLACE -1) (("1" (CASE "abs(SS1) <= 2* W * abs(cc!1) ") (("1" (HIDE -2) (("1" (ASSERT) (("1" (CASE-REPLACE "abs(-1 * SS1) = abs(SS1)") (("1" (CROSS-MULT -6) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "abs") (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (GROUND) (("2" (LIFT-IF) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (NAME "Intv" "(LAMBDA (nn: upto[length(P!1)-2]): seq(P!1)(nn+1) - seq(P!1)(nn))") (("2" (CASE-REPLACE "(LAMBDA (n: upto(length(P!1) - 1)):
                                                                                                                                                                           IF n = 0
                                                                                                                                                                             THEN 0
                                                                                                                                                                           ELSE seq(P!1)(n) * f!1(xis!1(n - 1)) -
                                                                                                                                                                                 seq(P!1)(n - 1) *
                                                                                                                                                                                  f!1(xis!1(n - 1))
                                                                                                                                                                           ENDIF) =
                                                                                                                                                                           (LAMBDA (n: upto(length(P!1) - 1)):
                                                                                                                                                                             IF n = 0
                                                                                                                                                                               THEN 0
                                                                                                                                                                             ELSE Intv(n-1) * f!1(xis!1(n - 1))
                                                                                                                                                                             ENDIF)") (("1" (HIDE -1) (("1" (NAME "FF" "(LAMBDA (n: upto(length(P!1) - 1)):
                                                                                                                                                                                                                                                                                                                                     IF n = 0
                                                                                                                                                                                                                                                                                                                                       THEN 0
                                                                                                                                                                                                                                                                                                                                     ELSE Intv(n - 1) * f!1(xis!1(n - 1))
                                                                                                                                                                                                                                                                                                                                     ENDIF)") (("1" (CASE-REPLACE "length(P!1) = 1") (("1" (REWRITE "sigma_rew" -5) (("1" (REPLACE -5 * RL) (("1" (EXPAND "abs" 1 1) (("1" (EXPAND "abs" +) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE-REPLACE "length(P!1) = 2") (("1" (REWRITE "sigma_rew") (("1" (ASSERT) (("1" (HIDE 4) (("1" (REPLACE -5 * RL) (("1" (REWRITE "abs_mult") (("1" (CASE "abs(Intv(0)) <= W") (("1" (CASE "abs(f!1(xis!1(0))) <= abs(cc!1)") (("1" (MULT-INEQ -1 -2 (+ +)) (("1" (ASSERT) NIL NIL) ("2" (REWRITE "abs_abs") (("2" (REWRITE "abs_abs") (("2" (REWRITE "abs_abs") (("2" (ASSERT) (("2" (EXPAND "abs" 1 2) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2 3) (("2" (INST -14 "xis!1(0)") (("2" (ASSERT) (("2" (HIDE-ALL-BUT (-13 -14 1 2)) (("2" (REPLACE -2) (("2" (EXPAND "abs") (("2" (LIFT-IF) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -3 -4 1)) (("2" (REPLACE -2 * RL) (("2" (ASSERT) (("2" (EXPAND "abs") (("2" (LEMMA "width_lem") (("2" (EXPAND "finseq_appl") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (REPLACE -1) (("2" (HIDE 5) (("2" (CASE-REPLACE "(FORALL (nn: upto(length(P!1) - 1)): abs(FF(nn)) <= W*abs(cc!1))") (("1" (HIDE -8 -9 -10 -11 -12 -13) (("1" (CASE "(FORALL (ii: upto(length(P!1)-2)): abs(Intv(ii)) <= W)") (("1" (CASE-REPLACE "ii!1 = 0") (("1" (REWRITE "sigma_first_ge") (("1" (CASE-REPLACE "SS1 = FF(1) + FF(2)") (("1" (HIDE -1) (("1" (HIDE -6) (("1" (INST-CP -3 "1") (("1" (INST-CP -3 "2") (("1" (LEMMA "triangle") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 4) (("2" (REWRITE "sigma_first_ge") (("2" (CASE-REPLACE "sigma(3, length(P!1) - 1, FF) = 0") (("1" (ASSERT) NIL NIL) ("2" (LEMMA "sigma_restrict[upto(length(P!1) - 1)]") (("2" (INST?) (("2" (INST -1 "length(P!1) - 1" "3") (("1" (ASSERT) (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (CASE-REPLACE "restrict(FF, 3, length(P!1) - 1) = (LAMBDA (n: upto(length(P!1) - 1)): 0)") (("1" (HIDE -1) (("1" (LEMMA "sigma_const[upto(length(P!1) - 1)]") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "restrict") (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("2" (LIFT-IF) (("2" (GROUND) (("2" (HIDE -5 -6 -7) (("2" (HIDE 3 4) (("2" (REPLACE -4 * RL) (("2" (ASSERT) (("2" (REVEAL -13) (("2" (INST?) (("2" (ASSERT) (("2" (LEMMA "parts_order") (("2" (INST -1 "a!1" "b!1" "P!1" "1" "x!1-1") (("2" (ASSERT) (("2" (LEMMA "xis_lem") (("2" (ASSERT) (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "sigma") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (HIDE -5) (("2" (LEMMA "sigma_upto[(length(P!1) - 1)].sigma_split_ge") (("2" (INST?) (("2" (INST -1 "ii!1") (("2" (ASSERT) (("2" (REPLACE -1) (("2" (HIDE -1) (("2" (REWRITE "sigma_last_ge") (("2" (CASE-REPLACE "sigma(1, ii!1 - 1, FF) = 0") (("1" (ASSERT) (("1" (HIDE -1) (("1" (CASE "z!1 = seq(P!1)(1+ii!1)") (("1" (CASE "FF(1 + ii!1) + FF(ii!1) = SS1") (("1" (HIDE -7) (("1" (REPLACE -1 * RL) (("1" (HIDE -1) (("1" (LEMMA "triangle") (("1" (INST?) (("1" (INST-CP -4 "1+ii!1") (("1" (INST -4 "ii!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "ii!1 = length(P!1) -2") (("1" (REWRITE "sigma_rew") (("1" (ASSERT) NIL NIL)) NIL) ("2" (REWRITE "sigma_first_ge") (("2" (ASSERT) (("2" (REWRITE "sigma_first_ge") (("2" (ASSERT) (("2" (CASE-REPLACE "sigma(3 + ii!1, length(P!1) - 1, FF) = 0") (("1" (HIDE -1) (("1" (HIDE 2) (("1" (CASE "FF(ii!1) = 0") (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (ASSERT) (("1" (REPLACE -6 * RL) (("1" (HIDE -6) (("1" (LEMMA "triangle") (("1" (INST?) (("1" (INST-CP -4 "1+ii!1") (("1" (INST-CP -4 "2+ii!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -2 -3 -5 -6 6) (("2" (REPLACE -2 * RL) (("2" (ASSERT) (("2" (HIDE -2) (("2" (REVEAL -17) (("2" (INST?) (("2" (ASSERT) (("2" (HIDE 2) (("2" (TYPEPRED "P!1") (("2" (INST -4 "ii!1") (("2" (ASSERT) (("2" (LEMMA "xis_lem") (("2" (ASSERT) (("2" (INST - "a!1" "b!1" "P!1" "xis!1" "ii!1-1") (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "sigma_restrict_to") (("2" (CASE-REPLACE "restrict(FF, 3 + ii!1, length(P!1) - 1) = (LAMBDA (n: upto(length(P!1) - 1)): 0)") (("1" (HIDE -1) (("1" (REWRITE "sigma_const[upto(length(P!1) - 1)]") NIL NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "restrict") (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("2" (HIDE -2 -3 -5 -6 3 7) (("2" (REPLACE -2 * RL) (("2" (ASSERT) (("2" (HIDE -2) (("2" (LIFT-IF) (("2" (GROUND) (("2" (REVEAL -17) (("2" (INST?) (("2" (ASSERT) (("2" (LEMMA "parts_order") (("2" (INST -1 "a!1" "b!1" "P!1" "ii!1+1" "x!1-1") (("2" (ASSERT) (("2" (LEMMA "xis_lem") (("2" (ASSERT) (("2" (INST - "a!1" "b!1" "P!1" "xis!1" "x!1-1") (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "FF(1 + ii!1) + FF(ii!1) = SS1") (("1" (HIDE -6) (("1" (REPLACE -1 * RL) (("1" (HIDE -1) (("1" (INST-CP -2 "ii!1") (("1" (INST-CP -2 "ii!1+1") (("1" (LEMMA "triangle") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "sigma_first_ge") (("2" (CASE-REPLACE "sigma(2 + ii!1, length(P!1) - 1, FF) = 0") (("1" (HIDE -1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE -1 -2 -4 -5 2 7) (("2" (REWRITE "sigma_restrict_to") (("2" (CASE "restrict(FF, 2 + ii!1, length(P!1) - 1) = (LAMBDA (n: upto(length(P!1) - 1)): 0)") (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (REWRITE "sigma_const[upto(length(P!1) - 1)]") NIL NIL)) NIL)) NIL) ("2" (EXPAND "restrict") (("2" (HIDE 2) (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("2" (REPLACE -1 * RL) (("2" (HIDE -1) (("2" (ASSERT) (("2" (LIFT-IF) (("2" (GROUND) (("2" (REVEAL -17) (("2" (INST?) (("2" (ASSERT) (("2" (LEMMA "parts_order") (("2" (INST -1 "a!1" "b!1" "P!1" "ii!1+1" "x!1-1") (("2" (ASSERT) (("2" (TYPEPRED "P!1") (("2" (INST?) (("2" (LEMMA "xis_lem") (("2" (ASSERT) (("2" (INST - "a!1" "b!1" "P!1" "xis!1" "x!1-1") (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "sigma_restrict_to") (("2" (CASE-REPLACE "restrict(FF, 1, ii!1 - 1) = (LAMBDA (n: upto(length(P!1) - 1)): 0)") (("1" (HIDE -1) (("1" (REWRITE "sigma_const[upto(length(P!1) - 1)]") NIL NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "restrict") (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("2" (LIFT-IF) (("2" (GROUND) (("2" (HIDE -4 -5) (("2" (REPLACE -3 * RL) (("2" (HIDE -3) (("2" (HIDE -1 -2) (("2" (ASSERT) (("2" (REVEAL -16) (("2" (INST?) (("2" (ASSERT) (("2" (EXPAND "abs") (("2" (LEMMA "parts_order") (("2" (INST -1 "a!1" "b!1" "P!1" "x!1" "ii!1") (("2" (ASSERT) (("2" (TYPEPRED "P!1") (("2" (INST?) (("2" (ASSERT) (("2" (LEMMA "xis_lem") (("2" (ASSERT) (("2" (INST - "a!1" "b!1" "P!1" "xis!1" "x!1-1") (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (REPLACE -3 * RL) (("2" (ASSERT) (("2" (HIDE 4) (("2" (REPLACE -4 * RL) (("2" (HIDE-ALL-BUT 1) (("2" (LEMMA "width_lem") (("2" (EXPAND "finseq_appl") (("2" (INST?) (("2" (TYPEPRED "P!1") (("2" (INST -4 "ii!2") (("2" (EXPAND "abs") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (REPLACE -1 * RL) (("2" (ASSERT) (("2" (GROUND) (("2" (LIFT-IF) (("2" (GROUND) (("2" (HIDE -1) (("2" (INST - "xis!1(nn!1 - 1)") (("2" (REWRITE "abs_mult") (("2" (CASE "abs(Intv(nn!1 - 1)) <= W") (("1" (CASE "abs(f!1(xis!1(nn!1 - 1))) <= abs(cc!1)") (("1" (MULT-INEQ -1 -2) (("1" (ASSERT) NIL NIL) ("2" (REWRITE "abs_abs") (("2" (REWRITE "abs_abs") (("2" (REWRITE "abs_abs") (("2" (ASSERT) (("2" (HIDE 2 4 7 -1 -5) (("2" (EXPAND "abs" 1 2) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -2 -4 3) (("2" (ASSERT) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "abs" 1 1) (("2" (ASSERT) (("2" (HIDE 3 6 -3 -6 -7 -8 -9 -10 -11) (("2" (REPLACE -1 * RL) (("2" (ASSERT) (("2" (HIDE -1) (("2" (LEMMA "width_lem") (("2" (ASSERT) (("2" (INST?) (("2" (ASSERT) (("2" (TYPEPRED "P!1") (("2" (INST?) (("2" (ASSERT) (("2" (LIFT-IF) (("2" (GROUND) (("2" (TYPEPRED "P!1") (("2" (INST -4 "nn!1-1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2 4) (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("1" (REPLACE -1 * RL) (("1" (LIFT-IF) (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL) ("4" (TYPEPRED "P!1") (("4" (INST?) (("4" (SKOSIMP*) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL) ("4" (SKOSIMP*) (("4" (ASSERT) NIL NIL)) NIL) ("5" (SKOSIMP*) (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL) ("4" (SKOSIMP*) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (PROP) (("1" (CROSS-MULT 1) NIL NIL) ("2" (CROSS-MULT 1) NIL NIL)) NIL)) NIL) ("3" (EXPAND "abs") (("3" (LIFT-IF) (("3" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((T FORMAL-SUBTYPE-DECL NIL |integral_prep| NIL) (|T_pred| CONST-DECL "[real -> boolean]" |integral_prep| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|integral_def| FORMULA-DECL NIL |integral_def| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|epsi!1| SKOLEM-CONST-DECL "posreal" |integral_prep| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (|cc!1| SKOLEM-CONST-DECL "real" |integral_prep| NIL) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|part_in| FORMULA-DECL NIL |integral_def| NIL) (|Rie_sum_alt| CONST-DECL "real" |integral_def| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |nat_types| NIL) (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|odd_minus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|sigma_rew| FORMULA-DECL NIL |sigma| |reals|) (|sigma_split_ge| FORMULA-DECL NIL |sigma_upto| |reals|) (|sigma_last_ge| FORMULA-DECL NIL |sigma_upto| |reals|) (|sigma_restrict_to| FORMULA-DECL NIL |sigma| |reals|) (|sigma_first_ge| FORMULA-DECL NIL |sigma_upto| |reals|) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|odd_plus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|xis_lem| FORMULA-DECL NIL |integral_def| NIL) (|parts_order| FORMULA-DECL NIL |integral_def| NIL) (|sigma_nat| APPLICATION-JUDGEMENT "nat" |sigma_upto| |reals|) (|restrict| CONST-DECL "[T -> real]" |sigma| |reals|) (|a!1| SKOLEM-CONST-DECL "T" |integral_prep| NIL) (|b!1| SKOLEM-CONST-DECL "T" |integral_prep| NIL) (P!1 SKOLEM-CONST-DECL "partition[T](a!1, b!1)" |integral_prep| NIL) (|sigma_restrict| FORMULA-DECL NIL |sigma| |reals|) (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|triangle| FORMULA-DECL NIL |real_props| NIL) (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|abs_nat| FORMULA-DECL NIL |abs_lems| |reals|) (|abs_mult| FORMULA-DECL NIL |real_props| NIL) (|width_lem| FORMULA-DECL NIL |integral_def| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|abs_abs| FORMULA-DECL NIL |real_props| NIL) (|le_times_le_any1| FORMULA-DECL NIL |extra_real_props| NIL) (|div_mult_pos_lt2| FORMULA-DECL NIL |real_props| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|width| CONST-DECL "posreal" |integral_def| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|sigma| DEF-DECL "real" |sigma| |reals|) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (|Rie_sec| CONST-DECL "real" |integral_def| NIL) (|Rie_sum_alt_lem| FORMULA-DECL NIL |integral_def| NIL) (|div_mult_pos_ge1| FORMULA-DECL NIL |real_props| NIL) (|div_mult_pos_gt1| FORMULA-DECL NIL |extra_real_props| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|Riemann_sum?| CONST-DECL "bool" |integral_def| NIL) (|partition| TYPE-EQ-DECL NIL |integral_def| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|closed_interval| TYPE-EQ-DECL NIL |intervals_real| |reals|) (<= CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|sigma_const| FORMULA-DECL NIL |sigma| |reals|) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|sigma_nat| APPLICATION-JUDGEMENT "nat" |sigma_below| |reals|) (|T_low| TYPE-EQ-DECL NIL |sigma| |reals|) (|T_high| TYPE-EQ-DECL NIL |sigma| |reals|) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|int_abs_is_nonneg| APPLICATION-JUDGEMENT "{j: nonneg_int | j >= i}" |real_defs| NIL) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|abs_0| FORMULA-DECL NIL |abs_lems| |reals|) (|Rie_sum| CONST-DECL "real" |integral_def| NIL) (|xis?| CONST-DECL "bool" |integral_def| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|integral?| CONST-DECL "bool" |integral_def| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK) (|integral_jmp-12| "" 3403520684 ("" (SKOSIMP*) (("" (LEMMA "integral_def") (("" (INST?) (("" (ASSERT) (("" (FLATTEN) (("" (HIDE -1) (("" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (HIDE 2) (("2" (EXPAND "integral?") (("2" (SKOSIMP*) (("2" (CASE "cc!1 = 0") (("1" (INST + "1") (("1" (SKOSIMP*) (("1" (TYPEPRED "R!1") (("1" (EXPAND "Riemann_sum?") (("1" (SKOSIMP*) (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (CASE-REPLACE "Rie_sum(a!1, b!1, P!1, xis!1, f!1) = 0") (("1" (ASSERT) NIL NIL) ("2" (HIDE 2) (("2" (EXPAND "Rie_sum") (("2" (ASSERT) (("2" (CASE-REPLACE "(LAMBDA (n: below(length(P!1) - 1)):
                                                                                                             P!1`seq(1 + n) * f!1(xis!1(n)) -
                                                                                                              P!1`seq(n) * f!1(xis!1(n)))
                                                                                                 = (LAMBDA (n: below(length(P!1) - 1)): 0)") (("1" (LEMMA "sigma_const[below(length(P!1) - 1)]") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST + "epsi!1/(2*abs(cc!1))") (("1" (SKOSIMP*) (("1" (LEMMA "part_in") (("1" (INST -1 "a!1" "b!1" "z!1" "P!1") (("1" (ASSERT) (("1" (SKOSIMP*) (("1" (TYPEPRED "R!1") (("1" (EXPAND "Riemann_sum?") (("1" (SKOSIMP*) (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (LEMMA "Rie_sum_alt_lem") (("1" (INST - "a!1" "b!1" "f!1") (("1" (ASSERT) (("1" (INST?) (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (EXPAND "Rie_sum_alt") (("1" (EXPAND "Rie_sec") (("1" (ASSERT) (("1" (NAME "SS1" "sigma(1, length(P!1) - 1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 LAMBDA (n: upto(length(P!1) - 1)):
n = 0

seq(P!1)(n) * f!1(xis!1(n - 1)) -
seq(P!1)(n - 1) *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          f!1(xis!1(n - 1))
width(a!1, b!1, P!1)") (("1" (REPLACE -1) (("1" (CASE "abs(SS1) <= 2* W * abs(cc!1) ") (("1" (HIDE -2) (("1" (ASSERT) (("1" (CASE-REPLACE "abs(-1 * SS1) = abs(SS1)") (("1" (CROSS-MULT -6) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "abs") (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (GROUND) (("2" (LIFT-IF) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (NAME "Intv" "(LAMBDA (nn: upto[length(P!1)-2]): seq(P!1)(nn+1) - seq(P!1)(nn))") (("2" (CASE-REPLACE "(LAMBDA (n: upto(length(P!1) - 1)):
                                                                                                                                                                           IF n = 0
                                                                                                                                                                             THEN 0
                                                                                                                                                                           ELSE seq(P!1)(n) * f!1(xis!1(n - 1)) -
                                                                                                                                                                                 seq(P!1)(n - 1) *
                                                                                                                                                                                  f!1(xis!1(n - 1))
                                                                                                                                                                           ENDIF) =
                                                                                                                                                                           (LAMBDA (n: upto(length(P!1) - 1)):
                                                                                                                                                                             IF n = 0
                                                                                                                                                                               THEN 0
                                                                                                                                                                             ELSE Intv(n-1) * f!1(xis!1(n - 1))
                                                                                                                                                                             ENDIF)") (("1" (HIDE -1) (("1" (NAME "FF" "(LAMBDA (n: upto(length(P!1) - 1)):
                                                                                                                                                                                                                                                                                                                                     IF n = 0
                                                                                                                                                                                                                                                                                                                                       THEN 0
                                                                                                                                                                                                                                                                                                                                     ELSE Intv(n - 1) * f!1(xis!1(n - 1))
                                                                                                                                                                                                                                                                                                                                     ENDIF)") (("1" (CASE-REPLACE "length(P!1) = 1") (("1" (REWRITE "sigma_rew" -5) (("1" (REPLACE -5 * RL) (("1" (EXPAND "abs" 1 1) (("1" (EXPAND "abs" +) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE-REPLACE "length(P!1) = 2") (("1" (REWRITE "sigma_rew") (("1" (ASSERT) (("1" (HIDE 4) (("1" (REPLACE -5 * RL) (("1" (REWRITE "abs_mult") (("1" (CASE "abs(Intv(0)) <= W") (("1" (CASE "abs(f!1(xis!1(0))) <= abs(cc!1)") (("1" (MULT-INEQ -1 -2 (+ +)) (("1" (ASSERT) NIL NIL) ("2" (REWRITE "abs_abs") (("2" (REWRITE "abs_abs") (("2" (REWRITE "abs_abs") (("2" (ASSERT) (("2" (EXPAND "abs" 1 2) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2 3) (("2" (INST -14 "xis!1(0)") (("2" (ASSERT) (("2" (HIDE-ALL-BUT (-13 -14 1 2)) (("2" (REPLACE -2) (("2" (EXPAND "abs") (("2" (LIFT-IF) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -3 -4 1)) (("2" (REPLACE -2 * RL) (("2" (ASSERT) (("2" (EXPAND "abs") (("2" (LEMMA "width_lem") (("2" (EXPAND "finseq_appl") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (REPLACE -1) (("2" (HIDE 5) (("2" (CASE-REPLACE "(FORALL (nn: upto(length(P!1) - 1)): abs(FF(nn)) <= W*abs(cc!1))") (("1" (HIDE -8 -9 -10 -11 -12 -13) (("1" (CASE "(FORALL (ii: upto(length(P!1)-2)): abs(Intv(ii)) <= W)") (("1" (CASE-REPLACE "ii!1 = 0") (("1" (REWRITE "sigma_first_ge") (("1" (CASE-REPLACE "SS1 = FF(1) + FF(2)") (("1" (HIDE -1) (("1" (HIDE -6) (("1" (INST-CP -3 "1") (("1" (INST-CP -3 "2") (("1" (LEMMA "triangle") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 4) (("2" (REWRITE "sigma_first_ge") (("2" (CASE-REPLACE "sigma(3, length(P!1) - 1, FF) = 0") (("1" (ASSERT) NIL NIL) ("2" (LEMMA "sigma_restrict[upto(length(P!1) - 1)]") (("2" (INST?) (("2" (INST -1 "length(P!1) - 1" "3") (("1" (ASSERT) (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (CASE-REPLACE "restrict(FF, 3, length(P!1) - 1) = (LAMBDA (n: upto(length(P!1) - 1)): 0)") (("1" (HIDE -1) (("1" (LEMMA "sigma_const[upto(length(P!1) - 1)]") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "restrict") (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("2" (LIFT-IF) (("2" (GROUND) (("2" (HIDE -5 -6 -7) (("2" (HIDE 3 4) (("2" (REPLACE -4 * RL) (("2" (ASSERT) (("2" (REVEAL -13) (("2" (INST?) (("2" (ASSERT) (("2" (LEMMA "parts_order") (("2" (INST -1 "a!1" "b!1" "P!1" "1" "x!1-1") (("2" (ASSERT) (("2" (LEMMA "xis_lem") (("2" (ASSERT) (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "sigma") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (HIDE -5) (("2" (LEMMA "sigma_upto[(length(P!1) - 1)].sigma_split_ge") (("2" (INST?) (("2" (INST -1 "ii!1") (("2" (ASSERT) (("2" (REPLACE -1) (("2" (HIDE -1) (("2" (REWRITE "sigma_last_ge") (("2" (CASE-REPLACE "sigma(1, ii!1 - 1, FF) = 0") (("1" (ASSERT) (("1" (HIDE -1) (("1" (CASE "z!1 = seq(P!1)(1+ii!1)") (("1" (CASE "FF(1 + ii!1) + FF(ii!1) = SS1") (("1" (HIDE -7) (("1" (REPLACE -1 * RL) (("1" (HIDE -1) (("1" (LEMMA "triangle") (("1" (INST?) (("1" (INST-CP -4 "1+ii!1") (("1" (INST -4 "ii!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "ii!1 = length(P!1) -2") (("1" (REWRITE "sigma_rew") (("1" (ASSERT) NIL NIL)) NIL) ("2" (REWRITE "sigma_first_ge") (("2" (ASSERT) (("2" (REWRITE "sigma_first_ge") (("2" (ASSERT) (("2" (CASE-REPLACE "sigma(3 + ii!1, length(P!1) - 1, FF) = 0") (("1" (HIDE -1) (("1" (HIDE 2) (("1" (CASE "FF(ii!1) = 0") (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (ASSERT) (("1" (REPLACE -6 * RL) (("1" (HIDE -6) (("1" (LEMMA "triangle") (("1" (INST?) (("1" (INST-CP -4 "1+ii!1") (("1" (INST-CP -4 "2+ii!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -2 -3 -5 -6 6) (("2" (REPLACE -2 * RL) (("2" (ASSERT) (("2" (HIDE -2) (("2" (REVEAL -17) (("2" (INST?) (("2" (ASSERT) (("2" (HIDE 2) (("2" (TYPEPRED "P!1") (("2" (INST -4 "ii!1") (("2" (ASSERT) (("2" (LEMMA "xis_lem") (("2" (ASSERT) (("2" (INST - "a!1" "b!1" "P!1" "xis!1" "ii!1-1") (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "sigma_restrict_to") (("2" (CASE-REPLACE "restrict(FF, 3 + ii!1, length(P!1) - 1) = (LAMBDA (n: upto(length(P!1) - 1)): 0)") (("1" (HIDE -1) (("1" (REWRITE "sigma_const[upto(length(P!1) - 1)]") NIL NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "restrict") (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("2" (HIDE -2 -3 -5 -6 3 7) (("2" (REPLACE -2 * RL) (("2" (ASSERT) (("2" (HIDE -2) (("2" (LIFT-IF) (("2" (GROUND) (("2" (REVEAL -17) (("2" (INST?) (("2" (ASSERT) (("2" (LEMMA "parts_order") (("2" (INST -1 "a!1" "b!1" "P!1" "ii!1+1" "x!1-1") (("2" (ASSERT) (("2" (LEMMA "xis_lem") (("2" (ASSERT) (("2" (INST - "a!1" "b!1" "P!1" "xis!1" "x!1-1") (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "FF(1 + ii!1) + FF(ii!1) = SS1") (("1" (HIDE -6) (("1" (REPLACE -1 * RL) (("1" (HIDE -1) (("1" (INST-CP -2 "ii!1") (("1" (INST-CP -2 "ii!1+1") (("1" (LEMMA "triangle") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "sigma_first_ge") (("2" (CASE-REPLACE "sigma(2 + ii!1, length(P!1) - 1, FF) = 0") (("1" (HIDE -1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE -1 -2 -4 -5 2 7) (("2" (REWRITE "sigma_restrict_to") (("2" (CASE "restrict(FF, 2 + ii!1, length(P!1) - 1) = (LAMBDA (n: upto(length(P!1) - 1)): 0)") (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (REWRITE "sigma_const[upto(length(P!1) - 1)]") NIL NIL)) NIL)) NIL) ("2" (EXPAND "restrict") (("2" (HIDE 2) (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("2" (REPLACE -1 * RL) (("2" (HIDE -1) (("2" (ASSERT) (("2" (GROUND) (("2" (LIFT-IF) (("2" (GROUND) (("2" (REVEAL -17) (("2" (INST?) (("2" (ASSERT) (("2" (LEMMA "parts_order") (("2" (INST -1 "a!1" "b!1" "P!1" "ii!1+1" "x!1-1") (("2" (ASSERT) (("2" (TYPEPRED "P!1") (("2" (INST?) (("2" (LEMMA "xis_lem") (("2" (ASSERT) (("2" (INST - "a!1" "b!1" "P!1" "xis!1" "x!1-1") (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "sigma_restrict_to") (("2" (CASE-REPLACE "restrict(FF, 1, ii!1 - 1) = (LAMBDA (n: upto(length(P!1) - 1)): 0)") (("1" (HIDE -1) (("1" (REWRITE "sigma_const[upto(length(P!1) - 1)]") NIL NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "restrict") (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("2" (LIFT-IF) (("2" (GROUND) (("2" (HIDE -4 -5) (("2" (REPLACE -3 * RL) (("2" (HIDE -3) (("2" (HIDE -1 -2) (("2" (ASSERT) (("2" (REVEAL -16) (("2" (INST?) (("2" (ASSERT) (("2" (EXPAND "abs") (("2" (ASSERT) (("2" (LEMMA "parts_order") (("2" (INST -1 "a!1" "b!1" "P!1" "x!1" "ii!1") (("2" (ASSERT) (("2" (TYPEPRED "P!1") (("2" (INST?) (("2" (ASSERT) (("2" (LEMMA "xis_lem") (("2" (ASSERT) (("2" (INST - "a!1" "b!1" "P!1" "xis!1" "x!1-1") (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (REPLACE -3 * RL) (("2" (ASSERT) (("2" (HIDE 4) (("2" (REPLACE -4 * RL) (("2" (HIDE-ALL-BUT 1) (("2" (LEMMA "width_lem") (("2" (EXPAND "finseq_appl") (("2" (INST?) (("2" (TYPEPRED "P!1") (("2" (INST -4 "ii!2") (("2" (EXPAND "abs") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (REPLACE -1 * RL) (("2" (ASSERT) (("2" (GROUND) (("2" (LIFT-IF) (("2" (GROUND) (("2" (HIDE -1) (("2" (INST - "xis!1(nn!1 - 1)") (("2" (REWRITE "abs_mult") (("2" (CASE "abs(Intv(nn!1 - 1)) <= W") (("1" (CASE "abs(f!1(xis!1(nn!1 - 1))) <= abs(cc!1)") (("1" (MULT-INEQ -1 -2) (("1" (ASSERT) NIL NIL) ("2" (REWRITE "abs_abs") (("2" (REWRITE "abs_abs") (("2" (REWRITE "abs_abs") (("2" (ASSERT) (("2" (HIDE 2 4 7 -1 -5) (("2" (EXPAND "abs" 1 2) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -2 -4 3) (("2" (ASSERT) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "abs" 1 1) (("2" (ASSERT) (("2" (HIDE 3 6 -3 -6 -7 -8 -9 -10 -11) (("2" (REPLACE -1 * RL) (("2" (ASSERT) (("2" (HIDE -1) (("2" (LEMMA "width_lem") (("2" (ASSERT) (("2" (INST?) (("2" (ASSERT) (("2" (TYPEPRED "P!1") (("2" (INST?) (("2" (ASSERT) (("2" (LIFT-IF) (("2" (GROUND) (("2" (TYPEPRED "P!1") (("2" (INST -4 "nn!1-1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2 4) (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("1" (REPLACE -1 * RL) (("1" (LIFT-IF) (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL) ("4" (TYPEPRED "P!1") (("4" (INST?) (("4" (SKOSIMP*) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL) ("4" (SKOSIMP*) (("4" (ASSERT) NIL NIL)) NIL) ("5" (SKOSIMP*) (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL) ("4" (SKOSIMP*) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (PROP) (("1" (CROSS-MULT 1) (("1" (GROUND) NIL NIL)) NIL) ("2" (CROSS-MULT 1) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "abs") (("3" (LIFT-IF) (("3" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) NIL) (|integral_jmp-11| "" 3352608695 ("" (SKOSIMP*) (("" (LEMMA "integral_def") (("" (INST?) (("" (ASSERT) (("" (FLATTEN) (("" (HIDE -1) (("" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (HIDE 2) (("2" (EXPAND "integral?") (("2" (SKOSIMP*) (("2" (CASE "cc!1 = 0") (("1" (INST + "1") (("1" (SKOSIMP*) (("1" (TYPEPRED "R!1") (("1" (EXPAND "Riemann_sum?") (("1" (SKOSIMP*) (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (CASE-REPLACE "Rie_sum(a!1, b!1, P!1, xis!1, f!1) = 0") (("1" (ASSERT) (("1" (EXPAND "abs") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "Rie_sum") (("2" (ASSERT) (("2" (CASE-REPLACE "(LAMBDA (n: below(length(P!1) - 1)):
                                                                                                     P!1`seq(1 + n) * f!1(xis!1(n)) -
                                                                                                      P!1`seq(n) * f!1(xis!1(n)))
                                                                                         = (LAMBDA (n: below(length(P!1) - 1)): 0)") (("1" (LEMMA "sigma_const[below(length(P!1) - 1)]") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST + "epsi!1/(2*abs(cc!1))") (("1" (SKOSIMP*) (("1" (LEMMA "part_in") (("1" (INST -1 "a!1" "b!1" "z!1" "P!1") (("1" (ASSERT) (("1" (SKOSIMP*) (("1" (TYPEPRED "R!1") (("1" (EXPAND "Riemann_sum?") (("1" (SKOSIMP*) (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (LEMMA "Rie_sum_alt_lem") (("1" (INST - "a!1" "b!1" "f!1") (("1" (ASSERT) (("1" (INST?) (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (EXPAND "Rie_sum_alt") (("1" (EXPAND "Rie_sec") (("1" (ASSERT) (("1" (NAME "SS1" "sigma(1, length(P!1) - 1,
n: upto(length(P!1) - 1)):
n = 0

seq(P!1)(n) * f!1(xis!1(n - 1)) -
seq(P!1)(n - 1) *
f!1(xis!1(n - 1))
width(a!1, b!1, P!1)") (("1" (REPLACE -1) (("1" (CASE "abs(SS1) <= 2* W * abs(cc!1) ") (("1" (HIDE -2) (("1" (ASSERT) (("1" (CASE-REPLACE "abs(-1 * SS1) = abs(SS1)") (("1" (CROSS-MULT -6) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "abs") (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (NAME "Intv" "(LAMBDA (nn: upto[length(P!1)-2]): seq(P!1)(nn+1) - seq(P!1)(nn))") (("2" (CASE-REPLACE "(LAMBDA (n: upto(length(P!1) - 1)):
                                                                                                                                                               IF n = 0
                                                                                                                                                                 THEN 0
                                                                                                                                                               ELSE seq(P!1)(n) * f!1(xis!1(n - 1)) -
                                                                                                                                                                     seq(P!1)(n - 1) *
                                                                                                                                                                      f!1(xis!1(n - 1))
                                                                                                                                                               ENDIF) =
                                                                                                                                                               (LAMBDA (n: upto(length(P!1) - 1)):
                                                                                                                                                                 IF n = 0
                                                                                                                                                                   THEN 0
                                                                                                                                                                 ELSE Intv(n-1) * f!1(xis!1(n - 1))
                                                                                                                                                                 ENDIF)") (("1" (HIDE -1) (("1" (NAME "FF" "(LAMBDA (n: upto(length(P!1) - 1)):
                                                                                                                                                                                                                                                                                                                  IF n = 0
                                                                                                                                                                                                                                                                                                                    THEN 0
                                                                                                                                                                                                                                                                                                                  ELSE Intv(n - 1) * f!1(xis!1(n - 1))
                                                                                                                                                                                                                                                                                                                  ENDIF)") (("1" (CASE-REPLACE "length(P!1) = 1") (("1" (EXPAND "sigma" -5) (("1" (REPLACE -5 * RL) (("1" (EXPAND "abs" 1 1) (("1" (EXPAND "abs" +) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE-REPLACE "length(P!1) = 2") (("1" (EXPAND "sigma") (("1" (ASSERT) (("1" (HIDE 4) (("1" (REPLACE -5 * RL) (("1" (REWRITE "abs_mult") (("1" (CASE "abs(Intv(0)) <= W") (("1" (CASE "abs(f!1(xis!1(0))) <= abs(cc!1)") (("1" (MULT-INEQ -1 -2 (+ +)) (("1" (ASSERT) NIL NIL) ("2" (REWRITE "abs_abs") (("2" (REWRITE "abs_abs") (("2" (REWRITE "abs_abs") (("2" (ASSERT) (("2" (EXPAND "abs" 1 2) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2 3) (("2" (INST -14 "xis!1(0)") (("2" (ASSERT) (("2" (HIDE-ALL-BUT (-13 -14 1 2)) (("2" (REPLACE -2) (("2" (EXPAND "abs") (("2" (LIFT-IF) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -3 -4 1)) (("2" (REPLACE -2 * RL) (("2" (ASSERT) (("2" (EXPAND "abs") (("2" (LEMMA "width_lem") (("2" (EXPAND "finseq_appl") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -1) (("2" (HIDE 5) (("2" (CASE-REPLACE "(FORALL (nn: upto(length(P!1) - 1)): abs(FF(nn)) <= W*abs(cc!1))") (("1" (HIDE -8 -9 -10 -11 -12 -13) (("1" (CASE "(FORALL (ii: upto(length(P!1)-2)): abs(Intv(ii)) <= W)") (("1" (CASE-REPLACE "ii!1 = 0") (("1" (REWRITE "sigma_first_ge") (("1" (CASE-REPLACE "SS1 = FF(1) + FF(2)") (("1" (HIDE -1) (("1" (HIDE -6) (("1" (INST-CP -3 "1") (("1" (INST-CP -3 "2") (("1" (LEMMA "triangle") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 4) (("2" (REWRITE "sigma_first_ge") (("2" (CASE-REPLACE "sigma(3, length(P!1) - 1, FF) = 0") (("1" (ASSERT) NIL NIL) ("2" (LEMMA "sigma_restrict[upto(length(P!1) - 1)]") (("2" (INST?) (("2" (INST -1 "length(P!1) - 1" "3") (("1" (ASSERT) (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (CASE-REPLACE "restrict(FF, 3, length(P!1) - 1) = (LAMBDA (n: upto(length(P!1) - 1)): 0)") (("1" (HIDE -1) (("1" (LEMMA "sigma_const[upto(length(P!1) - 1)]") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "restrict") (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("2" (LIFT-IF) (("2" (GROUND) (("2" (HIDE -5 -6 -7) (("2" (HIDE 3 4) (("2" (REPLACE -4 * RL) (("2" (ASSERT) (("2" (REVEAL -13) (("2" (INST?) (("2" (ASSERT) (("2" (LEMMA "parts_order") (("2" (INST -1 "a!1" "b!1" "P!1" "1" "x!1-1") (("2" (ASSERT) (("2" (LEMMA "xis_lem") (("2" (ASSERT) (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "sigma") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (HIDE -5) (("2" (LEMMA "sigma_upto[(length(P!1) - 1)].sigma_split_ge") (("2" (INST?) (("2" (INST -1 "ii!1") (("2" (ASSERT) (("2" (REPLACE -1) (("2" (HIDE -1) (("2" (REWRITE "sigma_last_ge") (("2" (CASE-REPLACE "sigma(1, ii!1 - 1, FF) = 0") (("1" (ASSERT) (("1" (HIDE -1) (("1" (CASE "z!1 = seq(P!1)(1+ii!1)") (("1" (CASE "FF(1 + ii!1) + FF(ii!1) = SS1") (("1" (HIDE -7) (("1" (REPLACE -1 * RL) (("1" (HIDE -1) (("1" (LEMMA "triangle") (("1" (INST?) (("1" (INST-CP -4 "1+ii!1") (("1" (INST -4 "ii!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "ii!1 = length(P!1) -2") (("1" (EXPAND "sigma") (("1" (ASSERT) NIL NIL)) NIL) ("2" (REWRITE "sigma_first_ge") (("2" (ASSERT) (("2" (REWRITE "sigma_first_ge") (("2" (ASSERT) (("2" (CASE-REPLACE "sigma(3 + ii!1, length(P!1) - 1, FF) = 0") (("1" (HIDE -1) (("1" (HIDE 2) (("1" (CASE "FF(ii!1) = 0") (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (ASSERT) (("1" (REPLACE -6 * RL) (("1" (HIDE -6) (("1" (LEMMA "triangle") (("1" (INST?) (("1" (INST-CP -4 "1+ii!1") (("1" (INST-CP -4 "2+ii!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -2 -3 -5 -6 6) (("2" (REPLACE -2 * RL) (("2" (ASSERT) (("2" (HIDE -2) (("2" (REVEAL -17) (("2" (INST?) (("2" (ASSERT) (("2" (HIDE 2) (("2" (TYPEPRED "P!1") (("2" (INST -4 "ii!1") (("2" (ASSERT) (("2" (LEMMA "xis_lem") (("2" (ASSERT) (("2" (INST - "a!1" "b!1" "P!1" "xis!1" "ii!1-1") (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "sigma_restrict_to") (("2" (CASE-REPLACE "restrict(FF, 3 + ii!1, length(P!1) - 1) = (LAMBDA (n: upto(length(P!1) - 1)): 0)") (("1" (HIDE -1) (("1" (REWRITE "sigma_const[upto(length(P!1) - 1)]") NIL NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "restrict") (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("2" (HIDE -2 -3 -5 -6 3 7) (("2" (REPLACE -2 * RL) (("2" (ASSERT) (("2" (HIDE -2) (("2" (LIFT-IF) (("2" (GROUND) (("2" (REVEAL -17) (("2" (INST?) (("2" (ASSERT) (("2" (LEMMA "parts_order") (("2" (INST -1 "a!1" "b!1" "P!1" "ii!1+1" "x!1-1") (("2" (ASSERT) (("2" (LEMMA "xis_lem") (("2" (ASSERT) (("2" (INST - "a!1" "b!1" "P!1" "xis!1" "x!1-1") (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "FF(1 + ii!1) + FF(ii!1) = SS1") (("1" (HIDE -6) (("1" (REPLACE -1 * RL) (("1" (HIDE -1) (("1" (INST-CP -2 "ii!1") (("1" (INST-CP -2 "ii!1+1") (("1" (LEMMA "triangle") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "sigma_first_ge") (("2" (CASE-REPLACE "sigma(2 + ii!1, length(P!1) - 1, FF) = 0") (("1" (HIDE -1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE -1 -2 -4 -5 2 7) (("2" (REWRITE "sigma_restrict_to") (("2" (CASE "restrict(FF, 2 + ii!1, length(P!1) - 1) = (LAMBDA (n: upto(length(P!1) - 1)): 0)") (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (REWRITE "sigma_const[upto(length(P!1) - 1)]") NIL NIL)) NIL)) NIL) ("2" (EXPAND "restrict") (("2" (HIDE 2) (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("2" (REPLACE -1 * RL) (("2" (HIDE -1) (("2" (ASSERT) (("2" (GROUND) (("2" (LIFT-IF) (("2" (GROUND) (("2" (REVEAL -17) (("2" (INST?) (("2" (ASSERT) (("2" (LEMMA "parts_order") (("2" (INST -1 "a!1" "b!1" "P!1" "ii!1+1" "x!1-1") (("2" (ASSERT) (("2" (TYPEPRED "P!1") (("2" (INST?) (("2" (LEMMA "xis_lem") (("2" (ASSERT) (("2" (INST - "a!1" "b!1" "P!1" "xis!1" "x!1-1") (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "sigma_restrict_to") (("2" (CASE-REPLACE "restrict(FF, 1, ii!1 - 1) = (LAMBDA (n: upto(length(P!1) - 1)): 0)") (("1" (HIDE -1) (("1" (REWRITE "sigma_const[upto(length(P!1) - 1)]") NIL NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "restrict") (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("2" (LIFT-IF) (("2" (GROUND) (("2" (HIDE -4 -5) (("2" (REPLACE -3 * RL) (("2" (HIDE -3) (("2" (HIDE -1 -2) (("2" (ASSERT) (("2" (REVEAL -16) (("2" (INST?) (("2" (ASSERT) (("2" (EXPAND "abs") (("2" (ASSERT) (("2" (LEMMA "parts_order") (("2" (INST -1 "a!1" "b!1" "P!1" "x!1" "ii!1") (("2" (ASSERT) (("2" (TYPEPRED "P!1") (("2" (INST?) (("2" (ASSERT) (("2" (LEMMA "xis_lem") (("2" (ASSERT) (("2" (INST - "a!1" "b!1" "P!1" "xis!1" "x!1-1") (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (REPLACE -3 * RL) (("2" (ASSERT) (("2" (HIDE 4) (("2" (REPLACE -4 * RL) (("2" (HIDE-ALL-BUT 1) (("2" (LEMMA "width_lem") (("2" (EXPAND "finseq_appl") (("2" (INST?) (("2" (TYPEPRED "P!1") (("2" (INST -4 "ii!2") (("2" (EXPAND "abs") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (REPLACE -1 * RL) (("2" (ASSERT) (("2" (GROUND) (("2" (LIFT-IF) (("2" (GROUND) (("1" (EXPAND "abs" 1 1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE -1) (("2" (INST - "xis!1(nn!1 - 1)") (("2" (REWRITE "abs_mult") (("2" (CASE "abs(Intv(nn!1 - 1)) <= W") (("1" (CASE "abs(f!1(xis!1(nn!1 - 1))) <= abs(cc!1)") (("1" (MULT-INEQ -1 -2) (("1" (ASSERT) NIL NIL) ("2" (REWRITE "abs_abs") (("2" (REWRITE "abs_abs") (("2" (REWRITE "abs_abs") (("2" (ASSERT) (("2" (HIDE 2 4 7 -1 -5) (("2" (EXPAND "abs" 1 2) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -2 -4 3) (("2" (ASSERT) (("2" (GROUND) (("2" (EXPAND "abs" 1 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3 6 -3 -6 -7 -8 -9 -10 -11) (("2" (REPLACE -1 * RL) (("2" (ASSERT) (("2" (HIDE -1) (("2" (LEMMA "width_lem") (("2" (ASSERT) (("2" (INST?) (("2" (EXPAND "abs") (("2" (ASSERT) (("2" (TYPEPRED "P!1") (("2" (INST?) (("2" (ASSERT) (("2" (LIFT-IF) (("2" (GROUND) (("2" (TYPEPRED "P!1") (("2" (INST -4 "nn!1-1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2 4) (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("1" (REPLACE -1 * RL) (("1" (LIFT-IF) (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL) ("4" (TYPEPRED "P!1") (("4" (INST?) (("4" (SKOSIMP*) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL) ("4" (SKOSIMP*) (("4" (ASSERT) NIL NIL)) NIL) ("5" (SKOSIMP*) (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL) ("4" (SKOSIMP*) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (PROP) (("1" (CROSS-MULT 1) (("1" (GROUND) (("1" (LEMMA "abs_eq_0") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CROSS-MULT 1) (("2" (GROUND) (("2" (LEMMA "abs_eq_0") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "abs") (("3" (LIFT-IF) (("3" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) NIL) (|integral_jmp-10| "" 3320060791 ("" (STOP-REWRITE "abs_0") (("" (SKOSIMP*) (("" (LEMMA "integral_def") (("" (INST?) (("" (ASSERT) (("" (FLATTEN) (("" (HIDE -1) (("" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (HIDE 2) (("2" (EXPAND "integral?") (("2" (SKOSIMP*) (("2" (CASE "cc!1 = 0") (("1" (INST + "1") (("1" (SKOSIMP*) (("1" (TYPEPRED "R!1") (("1" (EXPAND "Riemann_sum?") (("1" (SKOSIMP*) (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (CASE-REPLACE "Rie_sum(a!1, b!1, P!1, xis!1, f!1) = 0") (("1" (ASSERT) (("1" (EXPAND "abs") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "Rie_sum") (("2" (ASSERT) (("2" (CASE-REPLACE "(LAMBDA (n: below(length(P!1) - 1)):
                                                                                             P!1`seq(1 + n) * f!1(xis!1(n)) -
                                                                                              P!1`seq(n) * f!1(xis!1(n)))
                                                                                 = (LAMBDA (n: below(length(P!1) - 1)): 0)") (("1" (LEMMA "sigma_const[below(length(P!1) - 1)]") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST + "epsi!1/(2*abs(cc!1))") (("1" (SKOSIMP*) (("1" (LEMMA "part_in") (("1" (INST -1 "a!1" "b!1" "z!1" "P!1") (("1" (ASSERT) (("1" (SKOSIMP*) (("1" (TYPEPRED "R!1") (("1" (EXPAND "Riemann_sum?") (("1" (SKOSIMP*) (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (LEMMA "Rie_sum_alt_lem") (("1" (INST - "a!1" "b!1" "f!1") (("1" (ASSERT) (("1" (INST?) (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (EXPAND "Rie_sum_alt") (("1" (EXPAND "Rie_sec") (("1" (ASSERT) (("1" (NAME "SS1" "sigma(1, length(P!1) - 1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       LAMBDA (n: upto(length(P!1) - 1)):
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         IF n = 0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           THEN 0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         ELSE seq(P!1)(n) * f!1(xis!1(n - 1)) -
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               seq(P!1)(n - 1) *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                f!1(xis!1(n - 1))
width(a!1, b!1, P!1)") (("1" (REPLACE -1) (("1" (CASE "abs(SS1) <= 2* W * abs(cc!1) ") (("1" (HIDE -2) (("1" (ASSERT) (("1" (CASE-REPLACE "abs(-1 * SS1) = abs(SS1)") (("1" (CROSS-MULT -6) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "abs") (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (NAME "Intv" "(LAMBDA (nn: upto[length(P!1)-2]): seq(P!1)(nn+1) - seq(P!1)(nn))") (("2" (CASE-REPLACE "(LAMBDA (n: upto(length(P!1) - 1)):
                                                                                                                                                   IF n = 0
                                                                                                                                                     THEN 0
                                                                                                                                                   ELSE seq(P!1)(n) * f!1(xis!1(n - 1)) -
                                                                                                                                                         seq(P!1)(n - 1) *
                                                                                                                                                          f!1(xis!1(n - 1))
                                                                                                                                                   ENDIF) =
                                                                                                                                                   (LAMBDA (n: upto(length(P!1) - 1)):
                                                                                                                                                     IF n = 0
                                                                                                                                                       THEN 0
                                                                                                                                                     ELSE Intv(n-1) * f!1(xis!1(n - 1))
                                                                                                                                                     ENDIF)") (("1" (HIDE -1) (("1" (NAME "FF" "(LAMBDA (n: upto(length(P!1) - 1)):
                                                                                                                                                                                                                                                                                               IF n = 0
                                                                                                                                                                                                                                                                                                 THEN 0
                                                                                                                                                                                                                                                                                               ELSE Intv(n - 1) * f!1(xis!1(n - 1))
                                                                                                                                                                                                                                                                                               ENDIF)") (("1" (CASE-REPLACE "length(P!1) = 1") (("1" (EXPAND "sigma" -5) (("1" (REPLACE -5 * RL) (("1" (EXPAND "abs" 1 1) (("1" (EXPAND "abs" +) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE-REPLACE "length(P!1) = 2") (("1" (EXPAND "sigma") (("1" (ASSERT) (("1" (HIDE 4) (("1" (REPLACE -5 * RL) (("1" (REWRITE "abs_mult") (("1" (CASE "abs(Intv(0)) <= W") (("1" (CASE "abs(f!1(xis!1(0))) <= abs(cc!1)") (("1" (MULT-INEQ -1 -2 (+ +)) (("1" (ASSERT) NIL NIL) ("2" (REWRITE "abs_abs") (("2" (REWRITE "abs_abs") (("2" (REWRITE "abs_abs") (("2" (ASSERT) (("2" (EXPAND "abs" 1 2) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2 3) (("2" (INST -14 "xis!1(0)") (("2" (ASSERT) (("2" (HIDE-ALL-BUT (-13 -14 1 2)) (("2" (REPLACE -2) (("2" (EXPAND "abs") (("2" (LIFT-IF) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -3 -4 1)) (("2" (REPLACE -2 * RL) (("2" (ASSERT) (("2" (EXPAND "abs") (("2" (LEMMA "width_lem") (("2" (EXPAND "finseq_appl") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -1) (("2" (HIDE 5) (("2" (CASE-REPLACE "(FORALL (nn: upto(length(P!1) - 1)): abs(FF(nn)) <= W*abs(cc!1))") (("1" (HIDE -8 -9 -10 -11 -12 -13) (("1" (CASE "(FORALL (ii: upto(length(P!1)-2)): abs(Intv(ii)) <= W)") (("1" (CASE-REPLACE "ii!1 = 0") (("1" (REWRITE "sigma_first_ge") (("1" (CASE-REPLACE "SS1 = FF(1) + FF(2)") (("1" (HIDE -1) (("1" (HIDE -6) (("1" (INST-CP -3 "1") (("1" (INST-CP -3 "2") (("1" (LEMMA "triangle") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 4) (("2" (REWRITE "sigma_first_ge") (("1" (CASE-REPLACE "sigma(3, length(P!1) - 1, FF) = 0") (("1" (ASSERT) NIL NIL) ("2" (LEMMA "sigma_restrict[upto(length(P!1) - 1)]") (("2" (INST?) (("2" (INST -1 "length(P!1) - 1" "3") (("2" (ASSERT) (("2" (REPLACE -1) (("2" (HIDE -1) (("2" (CASE-REPLACE "restrict(FF, 3, length(P!1) - 1) = (LAMBDA (n: upto(length(P!1) - 1)): 0)") (("1" (HIDE -1) (("1" (LEMMA "sigma_const[upto(length(P!1) - 1)]") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "restrict") (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("2" (LIFT-IF) (("2" (GROUND) (("2" (HIDE -5 -6 -7) (("2" (HIDE 3 4) (("2" (REPLACE -4 * RL) (("2" (ASSERT) (("2" (REVEAL -13) (("2" (INST?) (("2" (ASSERT) (("2" (LEMMA "parts_order") (("2" (INST -1 "a!1" "b!1" "P!1" "1" "x!1-1") (("2" (ASSERT) (("2" (LEMMA "xis_lem") (("2" (ASSERT) (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "sigma") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (HIDE -5) (("2" (LEMMA "sigma_split_ge[(length(P!1) - 1)]") (("2" (INST?) (("2" (INST -1 "ii!1") (("2" (ASSERT) (("2" (REPLACE -1) (("2" (HIDE -1) (("2" (REWRITE "sigma_last_ge") (("2" (CASE-REPLACE "sigma(1, ii!1 - 1, FF) = 0") (("1" (ASSERT) (("1" (HIDE -1) (("1" (CASE "z!1 = seq(P!1)(1+ii!1)") (("1" (CASE "FF(1 + ii!1) + FF(ii!1) = SS1") (("1" (HIDE -7) (("1" (REPLACE -1 * RL) (("1" (HIDE -1) (("1" (LEMMA "triangle") (("1" (INST?) (("1" (INST-CP -4 "1+ii!1") (("1" (INST -4 "ii!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "ii!1 = length(P!1) -2") (("1" (EXPAND "sigma") (("1" (ASSERT) NIL NIL)) NIL) ("2" (REWRITE "sigma_first_ge") (("2" (ASSERT) (("2" (REWRITE "sigma_first_ge") (("1" (ASSERT) (("1" (CASE-REPLACE "sigma(3 + ii!1, length(P!1) - 1, FF) = 0") (("1" (HIDE -1) (("1" (HIDE 2) (("1" (CASE "FF(ii!1) = 0") (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (ASSERT) (("1" (REPLACE -6 * RL) (("1" (HIDE -6) (("1" (LEMMA "triangle") (("1" (INST?) (("1" (INST-CP -4 "1+ii!1") (("1" (INST-CP -4 "2+ii!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -2 -3 -5 -6 6) (("2" (REPLACE -2 * RL) (("2" (ASSERT) (("2" (HIDE -2) (("2" (REVEAL -17) (("2" (INST?) (("2" (ASSERT) (("2" (HIDE 2) (("2" (TYPEPRED "P!1") (("2" (INST -4 "ii!1") (("2" (ASSERT) (("2" (LEMMA "xis_lem") (("2" (ASSERT) (("2" (INST - "a!1" "b!1" "P!1" "xis!1" "ii!1-1") (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "sigma_restrict_to") (("2" (CASE-REPLACE "restrict(FF, 3 + ii!1, length(P!1) - 1) = (LAMBDA (n: upto(length(P!1) - 1)): 0)") (("1" (HIDE -1) (("1" (REWRITE "sigma_const[upto(length(P!1) - 1)]") NIL NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "restrict") (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("2" (HIDE -2 -3 -5 -6 3 7) (("2" (REPLACE -2 * RL) (("2" (ASSERT) (("2" (HIDE -2) (("2" (LIFT-IF) (("2" (GROUND) (("2" (REVEAL -17) (("2" (INST?) (("2" (ASSERT) (("2" (LEMMA "parts_order") (("2" (INST -1 "a!1" "b!1" "P!1" "ii!1+1" "x!1-1") (("2" (ASSERT) (("2" (LEMMA "xis_lem") (("2" (ASSERT) (("2" (INST - "a!1" "b!1" "P!1" "xis!1" "x!1-1") (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "sigma") (("2" (ASSERT) (("2" (HIDE 3) (("2" (CASE-REPLACE "FF(ii!1) = 0") (("1" (ASSERT) (("1" (REPLACE -7 * RL) (("1" (HIDE -7) (("1" (LEMMA "triangle") (("1" (INST?) (("1" (INST-CP -5 "1+ii!1") (("1" (INST-CP -5 "2+ii!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -6 7) (("2" (HIDE -2 -3 -5) (("2" (REPLACE -2 * RL) (("2" (ASSERT) (("2" (HIDE -2) (("2" (REVEAL -16) (("2" (INST?) (("2" (ASSERT) (("2" (LEMMA "parts_order") (("2" (INST -1 "a!1" "b!1" "P!1" "ii!1" "ii!1+1") (("2" (ASSERT) (("2" (TYPEPRED "P!1") (("2" (INST?) (("2" (ASSERT) (("2" (LEMMA "xis_lem") (("2" (ASSERT) (("2" (INST - "a!1" "b!1" "P!1" "xis!1" "ii!1-1") (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "FF(1 + ii!1) + FF(ii!1) = SS1") (("1" (HIDE -6) (("1" (REPLACE -1 * RL) (("1" (HIDE -1) (("1" (INST-CP -2 "ii!1") (("1" (INST-CP -2 "ii!1+1") (("1" (LEMMA "triangle") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "sigma_first_ge") (("1" (CASE-REPLACE "sigma(2 + ii!1, length(P!1) - 1, FF) = 0") (("1" (HIDE -1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE -1 -2 -4 -5 2 7) (("2" (REWRITE "sigma_restrict_to") (("2" (CASE "restrict(FF, 2 + ii!1, length(P!1) - 1) = (LAMBDA (n: upto(length(P!1) - 1)): 0)") (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (REWRITE "sigma_const[upto(length(P!1) - 1)]") NIL NIL)) NIL)) NIL) ("2" (EXPAND "restrict") (("2" (HIDE 2) (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("2" (REPLACE -1 * RL) (("2" (HIDE -1) (("2" (ASSERT) (("2" (GROUND) (("2" (LIFT-IF) (("2" (GROUND) (("2" (REVEAL -17) (("2" (INST?) (("2" (ASSERT) (("2" (LEMMA "parts_order") (("2" (INST -1 "a!1" "b!1" "P!1" "ii!1+1" "x!1-1") (("2" (ASSERT) (("2" (TYPEPRED "P!1") (("2" (INST?) (("2" (LEMMA "xis_lem") (("2" (ASSERT) (("2" (INST - "a!1" "b!1" "P!1" "xis!1" "x!1-1") (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "sigma") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "sigma_restrict_to") (("2" (CASE-REPLACE "restrict(FF, 1, ii!1 - 1) = (LAMBDA (n: upto(length(P!1) - 1)): 0)") (("1" (HIDE -1) (("1" (REWRITE "sigma_const[upto(length(P!1) - 1)]") NIL NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "restrict") (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("2" (LIFT-IF) (("2" (GROUND) (("2" (HIDE -4 -5) (("2" (REPLACE -3 * RL) (("2" (HIDE -3) (("2" (HIDE -1 -2) (("2" (ASSERT) (("2" (REVEAL -16) (("2" (INST?) (("2" (ASSERT) (("2" (EXPAND "abs") (("2" (ASSERT) (("2" (LEMMA "parts_order") (("2" (INST -1 "a!1" "b!1" "P!1" "x!1" "ii!1") (("2" (ASSERT) (("2" (TYPEPRED "P!1") (("2" (INST?) (("2" (ASSERT) (("2" (LEMMA "xis_lem") (("2" (ASSERT) (("2" (INST - "a!1" "b!1" "P!1" "xis!1" "x!1-1") (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (REPLACE -3 * RL) (("2" (ASSERT) (("2" (HIDE 4) (("2" (REPLACE -4 * RL) (("2" (HIDE-ALL-BUT 1) (("2" (LEMMA "width_lem") (("2" (EXPAND "finseq_appl") (("2" (INST?) (("2" (TYPEPRED "P!1") (("2" (INST -4 "ii!2") (("2" (EXPAND "abs") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (REPLACE -1 * RL) (("2" (ASSERT) (("2" (GROUND) (("2" (LIFT-IF) (("2" (GROUND) (("1" (EXPAND "abs" 1 1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE -1) (("2" (INST - "xis!1(nn!1 - 1)") (("2" (REWRITE "abs_mult") (("2" (CASE "abs(Intv(nn!1 - 1)) <= W") (("1" (CASE "abs(f!1(xis!1(nn!1 - 1))) <= abs(cc!1)") (("1" (MULT-INEQ -1 -2) (("1" (ASSERT) NIL NIL) ("2" (REWRITE "abs_abs") (("2" (REWRITE "abs_abs") (("2" (REWRITE "abs_abs") (("2" (ASSERT) (("2" (HIDE 2 4 7 -1 -5) (("2" (EXPAND "abs" 1 2) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -2 -4 3) (("2" (ASSERT) (("2" (GROUND) (("2" (EXPAND "abs" 1 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3 6 -3 -6 -7 -8 -9 -10 -11) (("2" (REPLACE -1 * RL) (("2" (ASSERT) (("2" (HIDE -1) (("2" (LEMMA "width_lem") (("2" (ASSERT) (("2" (INST?) (("2" (EXPAND "abs") (("2" (ASSERT) (("2" (TYPEPRED "P!1") (("2" (INST?) (("2" (ASSERT) (("2" (LIFT-IF) (("2" (GROUND) (("2" (TYPEPRED "P!1") (("2" (INST -4 "nn!1-1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2 4) (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("1" (REPLACE -1 * RL) (("1" (LIFT-IF) (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL) ("4" (TYPEPRED "P!1") (("4" (INST?) (("4" (SKOSIMP*) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL) ("4" (SKOSIMP*) (("4" (ASSERT) NIL NIL)) NIL) ("5" (SKOSIMP*) (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL) ("4" (SKOSIMP*) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (PROP) (("1" (CROSS-MULT 1) (("1" (GROUND) (("1" (LEMMA "abs_eq_0") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CROSS-MULT 1) (("2" (GROUND) (("2" (LEMMA "abs_eq_0") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "abs") (("3" (LIFT-IF) (("3" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) NIL) (|integral_jmp-9| "" 3303226842 ("" (SKOSIMP*) (("" (LEMMA "integral_def") (("" (INST?) (("" (ASSERT) (("" (FLATTEN) (("" (HIDE -1) (("" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (HIDE 2) (("2" (EXPAND "integral?") (("2" (SKOSIMP*) (("2" (CASE "cc!1 = 0") (("1" (INST + "1") (("1" (SKOSIMP*) (("1" (TYPEPRED "R!1") (("1" (EXPAND "Riemann_sum?") (("1" (SKOSIMP*) (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (CASE-REPLACE "Rie_sum(a!1, b!1, P!1, xis!1, f!1) = 0") (("1" (ASSERT) (("1" (EXPAND "abs") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "Rie_sum") (("2" (ASSERT) (("2" (CASE-REPLACE "(LAMBDA (n: below(length(P!1) - 1)):
                                                                                     P!1`seq(1 + n) * f!1(xis!1(n)) -
                                                                                      P!1`seq(n) * f!1(xis!1(n)))
                                                                         = (LAMBDA (n: below(length(P!1) - 1)): 0)") (("1" (LEMMA "sigma_const[below(length(P!1) - 1)]") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST + "epsi!1/(2*abs(cc!1))") (("1" (SKOSIMP*) (("1" (LEMMA "part_in") (("1" (INST -1 "a!1" "b!1" "z!1" "P!1") (("1" (ASSERT) (("1" (SKOSIMP*) (("1" (TYPEPRED "R!1") (("1" (EXPAND "Riemann_sum?") (("1" (SKOSIMP*) (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (LEMMA "Rie_sum_alt_lem") (("1" (INST - "a!1" "b!1" "f!1") (("1" (ASSERT) (("1" (INST?) (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (EXPAND "Rie_sum_alt") (("1" (EXPAND "Rie_sec") (("1" (ASSERT) (("1" (NAME "SS1" "sigma(1, length(P!1) - 1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          LAMBDA (n: upto(length(P!1) - 1)):
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            IF n = 0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              THEN 0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            ELSE seq(P!1)(n) * f!1(xis!1(n - 1)) -
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  seq(P!1)(n - 1) *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   f!1(xis!1(n - 1))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            ENDIF)") (("1" (REPLACE -1) (("1" (NAME "W" "width(a!1, b!1, P!1)") (("1" (REPLACE -1) (("1" (CASE "abs(SS1) <= 2* W * abs(cc!1) ") (("1" (HIDE -2) (("1" (ASSERT) (("1" (CASE-REPLACE "abs(-1 * SS1) = abs(SS1)") (("1" (CROSS-MULT -6) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "abs") (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (NAME "Intv" "(LAMBDA (nn: upto[length(P!1)-2]): seq(P!1)(nn+1) - seq(P!1)(nn))") (("2" (CASE-REPLACE "(LAMBDA (n: upto(length(P!1) - 1)):
                                                                                                                                       IF n = 0
                                                                                                                                         THEN 0
                                                                                                                                       ELSE seq(P!1)(n) * f!1(xis!1(n - 1)) -
                                                                                                                                             seq(P!1)(n - 1) *
                                                                                                                                              f!1(xis!1(n - 1))
                                                                                                                                       ENDIF) =
                                                                                                                                       (LAMBDA (n: upto(length(P!1) - 1)):
                                                                                                                                         IF n = 0
                                                                                                                                           THEN 0
                                                                                                                                         ELSE Intv(n-1) * f!1(xis!1(n - 1))
                                                                                                                                         ENDIF)") (("1" (HIDE -1) (("1" (NAME "FF" "(LAMBDA (n: upto(length(P!1) - 1)):
                                                                                                                                                                                                                                                                            IF n = 0
                                                                                                                                                                                                                                                                              THEN 0
                                                                                                                                                                                                                                                                            ELSE Intv(n - 1) * f!1(xis!1(n - 1))
                                                                                                                                                                                                                                                                            ENDIF)") (("1" (CASE-REPLACE "length(P!1) = 1") (("1" (EXPAND "sigma" -5) (("1" (REPLACE -5 * RL) (("1" (EXPAND "abs" 1 1) (("1" (EXPAND "abs" +) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE-REPLACE "length(P!1) = 2") (("1" (EXPAND "sigma") (("1" (ASSERT) (("1" (HIDE 4) (("1" (REPLACE -5 * RL) (("1" (REWRITE "abs_mult") (("1" (CASE "abs(Intv(0)) <= W") (("1" (CASE "abs(f!1(xis!1(0))) <= abs(cc!1)") (("1" (MULT-INEQ -1 -2 (+ +)) (("1" (ASSERT) NIL NIL) ("2" (REWRITE "abs_abs") (("2" (REWRITE "abs_abs") (("2" (REWRITE "abs_abs") (("2" (ASSERT) (("2" (EXPAND "abs" 1 2) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2 3) (("2" (INST -14 "xis!1(0)") (("2" (ASSERT) (("2" (HIDE-ALL-BUT (-13 -14 1 2)) (("2" (REPLACE -2) (("2" (EXPAND "abs") (("2" (LIFT-IF) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -3 -4 1)) (("2" (REPLACE -2 * RL) (("2" (ASSERT) (("2" (EXPAND "abs") (("2" (LEMMA "width_lem") (("2" (EXPAND "finseq_appl") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -1) (("2" (HIDE 5) (("2" (CASE-REPLACE "(FORALL (nn: upto(length(P!1) - 1)): abs(FF(nn)) <= W*abs(cc!1))") (("1" (HIDE -8 -9 -10 -11 -12 -13) (("1" (CASE "(FORALL (ii: upto(length(P!1)-2)): abs(Intv(ii)) <= W)") (("1" (CASE-REPLACE "ii!1 = 0") (("1" (REWRITE "sigma_first_ge") (("1" (CASE-REPLACE "SS1 = FF(1) + FF(2)") (("1" (HIDE -1) (("1" (HIDE -6) (("1" (INST-CP -3 "1") (("1" (INST-CP -3 "2") (("1" (LEMMA "triangle") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 4) (("2" (REWRITE "sigma_first_ge") (("1" (CASE-REPLACE "sigma(3, length(P!1) - 1, FF) = 0") (("1" (ASSERT) NIL NIL) ("2" (LEMMA "sigma_restrict[upto(length(P!1) - 1)]") (("2" (INST?) (("2" (INST -1 "length(P!1) - 1" "3") (("2" (ASSERT) (("2" (REPLACE -1) (("2" (HIDE -1) (("2" (CASE-REPLACE "restrict(FF, 3, length(P!1) - 1) = (LAMBDA (n: upto(length(P!1) - 1)): 0)") (("1" (HIDE -1) (("1" (LEMMA "sigma_const[upto(length(P!1) - 1)]") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "restrict") (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("2" (LIFT-IF) (("2" (GROUND) (("2" (HIDE -5 -6 -7) (("2" (HIDE 3 4) (("2" (REPLACE -4 * RL) (("2" (ASSERT) (("2" (REVEAL -13) (("2" (INST?) (("2" (ASSERT) (("2" (LEMMA "parts_order") (("2" (INST -1 "a!1" "b!1" "P!1" "1" "x!1-1") (("2" (ASSERT) (("2" (LEMMA "xis_lem") (("2" (ASSERT) (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "sigma") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (HIDE -5) (("2" (LEMMA "sigma_split_ge[(length(P!1) - 1)]") (("2" (INST?) (("2" (INST -1 "ii!1") (("2" (ASSERT) (("2" (REPLACE -1) (("2" (HIDE -1) (("2" (REWRITE "sigma_last_ge") (("2" (CASE-REPLACE "sigma(1, ii!1 - 1, FF) = 0") (("1" (ASSERT) (("1" (HIDE -1) (("1" (CASE "z!1 = seq(P!1)(1+ii!1)") (("1" (CASE "FF(1 + ii!1) + FF(ii!1) = SS1") (("1" (HIDE -7) (("1" (REPLACE -1 * RL) (("1" (HIDE -1) (("1" (LEMMA "triangle") (("1" (INST?) (("1" (INST-CP -4 "1+ii!1") (("1" (INST -4 "ii!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "ii!1 = length(P!1) -2") (("1" (EXPAND "sigma") (("1" (ASSERT) NIL NIL)) NIL) ("2" (REWRITE "sigma_first_ge") (("2" (ASSERT) (("2" (REWRITE "sigma_first_ge") (("1" (ASSERT) (("1" (CASE-REPLACE "sigma(3 + ii!1, length(P!1) - 1, FF) = 0") (("1" (HIDE -1) (("1" (HIDE 2) (("1" (CASE "FF(ii!1) = 0") (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (ASSERT) (("1" (REPLACE -6 * RL) (("1" (HIDE -6) (("1" (LEMMA "triangle") (("1" (INST?) (("1" (INST-CP -4 "1+ii!1") (("1" (INST-CP -4 "2+ii!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -2 -3 -5 -6 6) (("2" (REPLACE -2 * RL) (("2" (ASSERT) (("2" (HIDE -2) (("2" (REVEAL -17) (("2" (INST?) (("2" (ASSERT) (("2" (HIDE 2) (("2" (TYPEPRED "P!1") (("2" (INST -4 "ii!1") (("2" (ASSERT) (("2" (LEMMA "xis_lem") (("2" (ASSERT) (("2" (INST - "a!1" "b!1" "P!1" "xis!1" "ii!1-1") (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "sigma_restrict_to") (("2" (CASE-REPLACE "restrict(FF, 3 + ii!1, length(P!1) - 1) = (LAMBDA (n: upto(length(P!1) - 1)): 0)") (("1" (HIDE -1) (("1" (REWRITE "sigma_const[upto(length(P!1) - 1)]") NIL NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "restrict") (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("2" (HIDE -2 -3 -5 -6 3 7) (("2" (REPLACE -2 * RL) (("2" (ASSERT) (("2" (HIDE -2) (("2" (LIFT-IF) (("2" (GROUND) (("2" (REVEAL -17) (("2" (INST?) (("2" (ASSERT) (("2" (LEMMA "parts_order") (("2" (INST -1 "a!1" "b!1" "P!1" "ii!1+1" "x!1-1") (("2" (ASSERT) (("2" (LEMMA "xis_lem") (("2" (ASSERT) (("2" (INST - "a!1" "b!1" "P!1" "xis!1" "x!1-1") (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "sigma") (("2" (ASSERT) (("2" (HIDE 3) (("2" (CASE-REPLACE "FF(ii!1) = 0") (("1" (ASSERT) (("1" (REPLACE -7 * RL) (("1" (HIDE -7) (("1" (LEMMA "triangle") (("1" (INST?) (("1" (INST-CP -5 "1+ii!1") (("1" (INST-CP -5 "2+ii!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -6 7) (("2" (HIDE -2 -3 -5) (("2" (REPLACE -2 * RL) (("2" (ASSERT) (("2" (HIDE -2) (("2" (REVEAL -16) (("2" (INST?) (("2" (ASSERT) (("2" (LEMMA "parts_order") (("2" (INST -1 "a!1" "b!1" "P!1" "ii!1" "ii!1+1") (("2" (ASSERT) (("2" (TYPEPRED "P!1") (("2" (INST?) (("2" (ASSERT) (("2" (LEMMA "xis_lem") (("2" (ASSERT) (("2" (INST - "a!1" "b!1" "P!1" "xis!1" "ii!1-1") (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "FF(1 + ii!1) + FF(ii!1) = SS1") (("1" (HIDE -6) (("1" (REPLACE -1 * RL) (("1" (HIDE -1) (("1" (INST-CP -2 "ii!1") (("1" (INST-CP -2 "ii!1+1") (("1" (LEMMA "triangle") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "sigma_first_ge") (("1" (CASE-REPLACE "sigma(2 + ii!1, length(P!1) - 1, FF) = 0") (("1" (HIDE -1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE -1 -2 -4 -5 2 7) (("2" (REWRITE "sigma_restrict_to") (("2" (CASE "restrict(FF, 2 + ii!1, length(P!1) - 1) = (LAMBDA (n: upto(length(P!1) - 1)): 0)") (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (REWRITE "sigma_const[upto(length(P!1) - 1)]") NIL NIL)) NIL)) NIL) ("2" (EXPAND "restrict") (("2" (HIDE 2) (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("2" (REPLACE -1 * RL) (("2" (HIDE -1) (("2" (ASSERT) (("2" (GROUND) (("2" (LIFT-IF) (("2" (GROUND) (("2" (REVEAL -17) (("2" (INST?) (("2" (ASSERT) (("2" (LEMMA "parts_order") (("2" (INST -1 "a!1" "b!1" "P!1" "ii!1+1" "x!1-1") (("2" (ASSERT) (("2" (TYPEPRED "P!1") (("2" (INST?) (("2" (LEMMA "xis_lem") (("2" (ASSERT) (("2" (INST - "a!1" "b!1" "P!1" "xis!1" "x!1-1") (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "sigma") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "sigma_restrict_to") (("2" (CASE-REPLACE "restrict(FF, 1, ii!1 - 1) = (LAMBDA (n: upto(length(P!1) - 1)): 0)") (("1" (HIDE -1) (("1" (REWRITE "sigma_const[upto(length(P!1) - 1)]") NIL NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "restrict") (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("2" (LIFT-IF) (("2" (GROUND) (("2" (HIDE -4 -5) (("2" (REPLACE -3 * RL) (("2" (HIDE -3) (("2" (HIDE -1 -2) (("2" (ASSERT) (("2" (REVEAL -16) (("2" (INST?) (("2" (ASSERT) (("2" (EXPAND "abs") (("2" (ASSERT) (("2" (LEMMA "parts_order") (("2" (INST -1 "a!1" "b!1" "P!1" "x!1" "ii!1") (("2" (ASSERT) (("2" (TYPEPRED "P!1") (("2" (INST?) (("2" (ASSERT) (("2" (LEMMA "xis_lem") (("2" (ASSERT) (("2" (INST - "a!1" "b!1" "P!1" "xis!1" "x!1-1") (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (REPLACE -3 * RL) (("2" (ASSERT) (("2" (HIDE 4) (("2" (REPLACE -4 * RL) (("2" (HIDE-ALL-BUT 1) (("2" (LEMMA "width_lem") (("2" (EXPAND "finseq_appl") (("2" (INST?) (("2" (TYPEPRED "P!1") (("2" (INST -4 "ii!2") (("2" (EXPAND "abs") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (REPLACE -1 * RL) (("2" (ASSERT) (("2" (GROUND) (("2" (LIFT-IF) (("2" (GROUND) (("1" (EXPAND "abs" 1 1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE -1) (("2" (INST - "xis!1(nn!1 - 1)") (("2" (REWRITE "abs_mult") (("2" (CASE "abs(Intv(nn!1 - 1)) <= W") (("1" (CASE "abs(f!1(xis!1(nn!1 - 1))) <= abs(cc!1)") (("1" (MULT-INEQ -1 -2) (("1" (ASSERT) NIL NIL) ("2" (REWRITE "abs_abs") (("2" (REWRITE "abs_abs") (("2" (REWRITE "abs_abs") (("2" (ASSERT) (("2" (HIDE 2 4 7 -1 -5) (("2" (EXPAND "abs" 1 2) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -2 -4 3) (("2" (ASSERT) (("2" (GROUND) (("2" (EXPAND "abs" 1 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3 6 -3 -6 -7 -8 -9 -10 -11) (("2" (REPLACE -1 * RL) (("2" (ASSERT) (("2" (HIDE -1) (("2" (LEMMA "width_lem") (("2" (ASSERT) (("2" (INST?) (("2" (EXPAND "abs") (("2" (ASSERT) (("2" (TYPEPRED "P!1") (("2" (INST?) (("2" (ASSERT) (("2" (LIFT-IF) (("2" (GROUND) (("2" (TYPEPRED "P!1") (("2" (INST -4 "nn!1-1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2 4) (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("1" (REPLACE -1 * RL) (("1" (LIFT-IF) (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL) ("4" (TYPEPRED "P!1") (("4" (INST?) (("4" (SKOSIMP*) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL) ("4" (SKOSIMP*) (("4" (ASSERT) NIL NIL)) NIL) ("5" (SKOSIMP*) (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL) ("4" (SKOSIMP*) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (PROP) (("1" (CROSS-MULT 1) (("1" (GROUND) (("1" (LEMMA "abs_eq_0") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CROSS-MULT 1) (("2" (GROUND) (("2" (LEMMA "abs_eq_0") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "abs") (("3" (LIFT-IF) (("3" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) NIL) (|integral_jmp-8| "" 3280253949 ("" (SKOSIMP*) (("" (LEMMA "integral_def") (("" (INST?) (("" (ASSERT) (("" (FLATTEN) (("" (HIDE -1) (("" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (HIDE 2) (("2" (EXPAND "integral?") (("2" (SKOSIMP*) (("2" (CASE "cc!1 = 0") (("1" (INST + "1") (("1" (SKOSIMP*) (("1" (TYPEPRED "R!1") (("1" (EXPAND "Riemann_sum?") (("1" (SKOSIMP*) (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (CASE-REPLACE "Rie_sum(a!1, b!1, P!1, xis!1, f!1) = 0") (("1" (ASSERT) (("1" (EXPAND "abs") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "Rie_sum") (("2" (ASSERT) (("2" (CASE-REPLACE "(LAMBDA (n: below(length(P!1) - 1)):
                                                                             P!1`seq(1 + n) * f!1(xis!1(n)) -
                                                                              P!1`seq(n) * f!1(xis!1(n)))
                                                                 = (LAMBDA (n: below(length(P!1) - 1)): 0)") (("1" (LEMMA "sigma_const[below(length(P!1) - 1)]") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST + "epsi!1/(2*abs(cc!1))") (("1" (SKOSIMP*) (("1" (LEMMA "part_in") (("1" (INST -1 "a!1" "b!1" "z!1" "P!1") (("1" (ASSERT) (("1" (SKOSIMP*) (("1" (TYPEPRED "R!1") (("1" (EXPAND "Riemann_sum?") (("1" (SKOSIMP*) (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (LEMMA "Rie_sum_alt_lem") (("1" (INST - "a!1" "b!1" "f!1") (("1" (ASSERT) (("1" (INST?) (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (EXPAND "Rie_sum_alt") (("1" (EXPAND "Rie_sec") (("1" (ASSERT) (("1" (NAME "SS1" "sigma(1, length(P!1) - 1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                             LAMBDA (n: upto(length(P!1) - 1)):
                                                                                                                                                                                                                                                                                                                                                                                                                                                                               IF n = 0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 THEN 0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                               ELSE seq(P!1)(n) * f!1(xis!1(n - 1)) -
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     seq(P!1)(n - 1) *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      f!1(xis!1(n - 1))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                               ENDIF)") (("1" (REPLACE -1) (("1" (NAME "W" "width(a!1, b!1, P!1)") (("1" (REPLACE -1) (("1" (CASE "abs(SS1) <= 2* W * abs(cc!1) ") (("1" (HIDE -2) (("1" (MULT-BY -5 "(2 * abs(cc!1))") (("1" (ASSERT) (("1" (CASE-REPLACE "abs(-1 * SS1) = abs(SS1)") (("1" (HIDE -1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "abs") (("2" (LIFT-IF) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 2)) (("2" (EXPAND "abs") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (1 2)) (("3" (EXPAND "abs") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (NAME "Intv" "(LAMBDA (nn: upto[length(P!1)-2]): seq(P!1)(nn+1) - seq(P!1)(nn))") (("2" (CASE-REPLACE "(LAMBDA (n: upto(length(P!1) - 1)):
                                                                                                                           IF n = 0
                                                                                                                             THEN 0
                                                                                                                           ELSE seq(P!1)(n) * f!1(xis!1(n - 1)) -
                                                                                                                                 seq(P!1)(n - 1) *
                                                                                                                                  f!1(xis!1(n - 1))
                                                                                                                           ENDIF) =
                                                                                                                           (LAMBDA (n: upto(length(P!1) - 1)):
                                                                                                                             IF n = 0
                                                                                                                               THEN 0
                                                                                                                             ELSE Intv(n-1) * f!1(xis!1(n - 1))
                                                                                                                             ENDIF)") (("1" (HIDE -1) (("1" (NAME "FF" "(LAMBDA (n: upto(length(P!1) - 1)):
                                                                                                                                                                                                                                                         IF n = 0
                                                                                                                                                                                                                                                           THEN 0
                                                                                                                                                                                                                                                         ELSE Intv(n - 1) * f!1(xis!1(n - 1))
                                                                                                                                                                                                                                                         ENDIF)") (("1" (CASE-REPLACE "length(P!1) = 1") (("1" (EXPAND "sigma" -5) (("1" (REPLACE -5 * RL) (("1" (EXPAND "abs" 1 1) (("1" (EXPAND "abs" +) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE-REPLACE "length(P!1) = 2") (("1" (EXPAND "sigma") (("1" (ASSERT) (("1" (HIDE 4) (("1" (REPLACE -5 * RL) (("1" (REWRITE "abs_mult") (("1" (CASE "abs(Intv(0)) <= W") (("1" (CASE "abs(f!1(xis!1(0))) <= abs(cc!1)") (("1" (MULT-INEQ -1 -2 (+ +)) (("1" (ASSERT) NIL NIL) ("2" (REWRITE "abs_abs") (("2" (REWRITE "abs_abs") (("2" (REWRITE "abs_abs") (("2" (ASSERT) (("2" (EXPAND "abs" 1 2) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2 3) (("2" (INST -14 "xis!1(0)") (("2" (ASSERT) (("2" (HIDE-ALL-BUT (-13 -14 1 2)) (("2" (REPLACE -2) (("2" (EXPAND "abs") (("2" (LIFT-IF) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -3 -4 1)) (("2" (REPLACE -2 * RL) (("2" (ASSERT) (("2" (EXPAND "abs") (("2" (LEMMA "width_lem") (("2" (EXPAND "finseq_appl") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -1) (("2" (HIDE 5) (("2" (CASE-REPLACE "(FORALL (nn: upto(length(P!1) - 1)): abs(FF(nn)) <= W*abs(cc!1))") (("1" (HIDE -8 -9 -10 -11 -12 -13) (("1" (CASE "(FORALL (ii: upto(length(P!1)-2)): abs(Intv(ii)) <= W)") (("1" (CASE-REPLACE "ii!1 = 0") (("1" (REWRITE "sigma_first_ge") (("1" (CASE-REPLACE "SS1 = FF(1) + FF(2)") (("1" (HIDE -1) (("1" (HIDE -6) (("1" (INST-CP -3 "1") (("1" (INST-CP -3 "2") (("1" (LEMMA "triangle") (("1" (INST?) (("1" (ASSERT) NIL NIL) ("2" (EXPAND "sigma") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "sigma") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 4) (("2" (REWRITE "sigma_first_ge") (("1" (CASE-REPLACE "sigma(3, length(P!1) - 1, FF) = 0") (("1" (ASSERT) NIL NIL) ("2" (LEMMA "sigma_restrict[upto(length(P!1) - 1)]") (("2" (INST?) (("1" (INST -1 "length(P!1) - 1" "3") (("1" (ASSERT) (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (CASE-REPLACE "restrict(FF, 3, length(P!1) - 1) = (LAMBDA (n: upto(length(P!1) - 1)): 0)") (("1" (HIDE -1) (("1" (LEMMA "sigma_const[upto(length(P!1) - 1)]") (("1" (INST?) (("1" (ASSERT) NIL NIL) ("2" (EXPAND "sigma") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "restrict") (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("2" (LIFT-IF) (("2" (GROUND) (("2" (HIDE -5 -6 -7) (("2" (HIDE 3 4) (("2" (REPLACE -4 * RL) (("2" (ASSERT) (("2" (REVEAL -13) (("2" (INST?) (("2" (ASSERT) (("2" (LEMMA "parts_order") (("2" (INST -1 "a!1" "b!1" "P!1" "1" "x!1-1") (("2" (ASSERT) (("2" (LEMMA "xis_lem") (("2" (ASSERT) (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (ASSERT) (("3" (TYPEPRED "xis!1") (("3" (ASSERT) (("3" (EXPAND "sigma") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "sigma") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "sigma") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (ASSERT) (("3" (EXPAND "sigma" -7) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "sigma") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (HIDE -5) (("2" (LEMMA "sigma_split_ge[(length(P!1) - 1)]") (("2" (INST?) (("2" (INST -1 "ii!1") (("2" (ASSERT) (("2" (REPLACE -1) (("2" (HIDE -1) (("2" (REWRITE "sigma_last_ge") (("2" (CASE-REPLACE "sigma(1, ii!1 - 1, FF) = 0") (("1" (ASSERT) (("1" (HIDE -1) (("1" (CASE "z!1 = seq(P!1)(1+ii!1)") (("1" (CASE "FF(1 + ii!1) + FF(ii!1) = SS1") (("1" (HIDE -7) (("1" (REPLACE -1 * RL) (("1" (HIDE -1) (("1" (LEMMA "triangle") (("1" (INST?) (("1" (INST-CP -4 "1+ii!1") (("1" (INST -4 "ii!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "ii!1 = length(P!1) -2") (("1" (EXPAND "sigma") (("1" (ASSERT) NIL NIL)) NIL) ("2" (REWRITE "sigma_first_ge") (("2" (ASSERT) (("2" (REWRITE "sigma_first_ge") (("1" (ASSERT) (("1" (CASE-REPLACE "sigma(3 + ii!1, length(P!1) - 1, FF) = 0") (("1" (HIDE -1) (("1" (HIDE 2) (("1" (CASE "FF(ii!1) = 0") (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (ASSERT) (("1" (REPLACE -6 * RL) (("1" (HIDE -6) (("1" (LEMMA "triangle") (("1" (INST?) (("1" (INST-CP -4 "1+ii!1") (("1" (INST-CP -4 "2+ii!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -2 -3 -5 -6 6) (("2" (REPLACE -2 * RL) (("2" (ASSERT) (("2" (HIDE -2) (("2" (REVEAL -17) (("2" (INST?) (("2" (ASSERT) (("2" (HIDE 2) (("2" (TYPEPRED "P!1") (("2" (INST -4 "ii!1") (("2" (ASSERT) (("2" (LEMMA "xis_lem") (("2" (ASSERT) (("2" (INST - "a!1" "b!1" "P!1" "xis!1" "ii!1-1") (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "sigma_restrict_to") (("1" (CASE-REPLACE "restrict(FF, 3 + ii!1, length(P!1) - 1) = (LAMBDA (n: upto(length(P!1) - 1)): 0)") (("1" (HIDE -1) (("1" (REWRITE "sigma_const") (("1" (EXPAND "sigma") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "restrict") (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("2" (HIDE -2 -3 -5 -6 3 7) (("2" (REPLACE -2 * RL) (("2" (ASSERT) (("2" (HIDE -2) (("2" (LIFT-IF) (("2" (GROUND) (("2" (REVEAL -17) (("2" (INST?) (("2" (ASSERT) (("2" (LEMMA "parts_order") (("2" (INST -1 "a!1" "b!1" "P!1" "ii!1+1" "x!1-1") (("2" (ASSERT) (("2" (LEMMA "xis_lem") (("2" (ASSERT) (("2" (INST - "a!1" "b!1" "P!1" "xis!1" "x!1-1") (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "sigma") (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (EXPAND "sigma") (("2" (PROPAX) NIL NIL)) NIL)) NIL) ("3" (EXPAND "sigma") (("3" (ASSERT) (("3" (HIDE 3) (("3" (CASE-REPLACE "FF(ii!1) = 0") (("1" (ASSERT) (("1" (REPLACE -7 * RL) (("1" (HIDE -7) (("1" (LEMMA "triangle") (("1" (INST?) (("1" (INST-CP -5 "1+ii!1") (("1" (INST-CP -5 "2+ii!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -2 -3 -5 -6 7) (("2" (REPLACE -2 * RL) (("2" (ASSERT) (("2" (REVEAL -15) (("2" (INST?) (("2" (ASSERT) (("2" (HIDE -2 2) (("2" (LEMMA "parts_order") (("2" (INST -1 "a!1" "b!1" "P!1" "ii!1" "ii!1+1") (("2" (ASSERT) (("2" (TYPEPRED "P!1") (("2" (INST?) (("2" (ASSERT) (("2" (LEMMA "xis_lem") (("2" (ASSERT) (("2" (INST - "a!1" "b!1" "P!1" "xis!1" "ii!1-1") (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "sigma") (("2" (ASSERT) (("2" (HIDE 3) (("2" (CASE-REPLACE "FF(ii!1) = 0") (("1" (ASSERT) (("1" (REPLACE -7 * RL) (("1" (HIDE -7) (("1" (LEMMA "triangle") (("1" (INST?) (("1" (INST-CP -5 "1+ii!1") (("1" (INST-CP -5 "2+ii!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -6 7) (("2" (HIDE -2 -3 -5) (("2" (REPLACE -2 * RL) (("2" (ASSERT) (("2" (HIDE -2) (("2" (REVEAL -16) (("2" (INST?) (("2" (ASSERT) (("2" (LEMMA "parts_order") (("2" (INST -1 "a!1" "b!1" "P!1" "ii!1" "ii!1+1") (("2" (ASSERT) (("2" (TYPEPRED "P!1") (("2" (INST?) (("2" (ASSERT) (("2" (LEMMA "xis_lem") (("2" (ASSERT) (("2" (INST - "a!1" "b!1" "P!1" "xis!1" "ii!1-1") (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "FF(1 + ii!1) + FF(ii!1) = SS1") (("1" (HIDE -6) (("1" (REPLACE -1 * RL) (("1" (HIDE -1) (("1" (INST-CP -2 "ii!1") (("1" (INST-CP -2 "ii!1+1") (("1" (LEMMA "triangle") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "sigma_first_ge") (("1" (CASE-REPLACE "sigma(2 + ii!1, length(P!1) - 1, FF) = 0") (("1" (HIDE -1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE -1 -2 -4 -5 2 7) (("2" (REWRITE "sigma_restrict_to") (("1" (CASE "restrict(FF, 2 + ii!1, length(P!1) - 1) = (LAMBDA (n: upto(length(P!1) - 1)): 0)") (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (REWRITE "sigma_const") NIL NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "restrict") (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("2" (REPLACE -1 * RL) (("2" (HIDE -1) (("2" (ASSERT) (("2" (GROUND) (("2" (LIFT-IF) (("2" (GROUND) (("2" (REVEAL -17) (("2" (INST?) (("2" (ASSERT) (("2" (LEMMA "parts_order") (("2" (INST -1 "a!1" "b!1" "P!1" "ii!1+1" "x!1-1") (("2" (ASSERT) (("2" (TYPEPRED "P!1") (("2" (INST?) (("2" (LEMMA "xis_lem") (("2" (ASSERT) (("2" (INST - "a!1" "b!1" "P!1" "xis!1" "x!1-1") (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "sigma") (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (EXPAND "sigma") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "sigma") (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (EXPAND "sigma") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "sigma_restrict_to") (("2" (CASE-REPLACE "restrict(FF, 1, ii!1 - 1) = (LAMBDA (n: upto(length(P!1) - 1)): 0)") (("1" (HIDE -1) (("1" (REWRITE "sigma_const") NIL NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "restrict") (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("2" (LIFT-IF) (("2" (GROUND) (("2" (HIDE -4 -5) (("2" (REPLACE -3 * RL) (("2" (HIDE -3) (("2" (HIDE -1 -2) (("2" (ASSERT) (("2" (REVEAL -16) (("2" (INST?) (("2" (ASSERT) (("2" (EXPAND "abs") (("2" (ASSERT) (("2" (LEMMA "parts_order") (("2" (INST -1 "a!1" "b!1" "P!1" "x!1" "ii!1") (("2" (ASSERT) (("2" (TYPEPRED "P!1") (("2" (INST?) (("2" (ASSERT) (("2" (LEMMA "xis_lem") (("2" (ASSERT) (("2" (INST - "a!1" "b!1" "P!1" "xis!1" "x!1-1") (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (REPLACE -3 * RL) (("2" (ASSERT) (("2" (HIDE 4) (("2" (REPLACE -4 * RL) (("2" (HIDE-ALL-BUT 1) (("2" (LEMMA "width_lem") (("2" (EXPAND "finseq_appl") (("2" (INST?) (("2" (TYPEPRED "P!1") (("2" (INST -4 "ii!2") (("2" (EXPAND "abs") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (REPLACE -1 * RL) (("2" (ASSERT) (("2" (GROUND) (("2" (LIFT-IF) (("2" (GROUND) (("1" (EXPAND "abs" 1 1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE -1) (("2" (INST - "xis!1(nn!1 - 1)") (("2" (REWRITE "abs_mult") (("2" (CASE "abs(Intv(nn!1 - 1)) <= W") (("1" (CASE "abs(f!1(xis!1(nn!1 - 1))) <= abs(cc!1)") (("1" (MULT-INEQ -1 -2) (("1" (ASSERT) NIL NIL) ("2" (REWRITE "abs_abs") (("2" (REWRITE "abs_abs") (("2" (REWRITE "abs_abs") (("2" (ASSERT) (("2" (HIDE 2 4 7 -1 -5) (("2" (EXPAND "abs" 1 2) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -2 -4 3) (("2" (ASSERT) (("2" (GROUND) (("2" (EXPAND "abs" 1 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3 6 -3 -6 -7 -8 -9 -10 -11) (("2" (REPLACE -1 * RL) (("2" (ASSERT) (("2" (HIDE -1) (("2" (LEMMA "width_lem") (("2" (ASSERT) (("2" (INST?) (("2" (EXPAND "abs") (("2" (ASSERT) (("2" (TYPEPRED "P!1") (("2" (INST?) (("2" (ASSERT) (("2" (LIFT-IF) (("2" (GROUND) (("2" (TYPEPRED "P!1") (("2" (INST -4 "nn!1-1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2 4) (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("1" (REPLACE -1 * RL) (("1" (LIFT-IF) (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL) ("4" (TYPEPRED "P!1") (("4" (INST?) (("4" (SKOSIMP*) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL) ("4" (SKOSIMP*) (("4" (ASSERT) NIL NIL)) NIL) ("5" (SKOSIMP*) (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL) ("4" (SKOSIMP*) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (PROP) (("1" (CROSS-MULT 1) (("1" (GROUND) (("1" (HIDE-ALL-BUT (1 3)) (("1" (EXPAND "abs") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 3)) (("2" (EXPAND "abs") (("2" (LIFT-IF) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CROSS-MULT 1) (("1" (GROUND) (("1" (HIDE-ALL-BUT (1 3)) (("1" (EXPAND "abs") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 3)) (("2" (EXPAND "abs") (("2" (LIFT-IF) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "abs") (("3" (LIFT-IF) (("3" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) NIL) (|integral_jmp-7| "" 3278692133 ("" (SKOSIMP*) (("" (LEMMA "integral_def") (("" (INST?) (("" (ASSERT) (("" (FLATTEN) (("" (HIDE -1) (("" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (HIDE 2) (("2" (EXPAND "integral?") (("2" (SKOSIMP*) (("2" (CASE "cc!1 = 0") (("1" (INST + "1") (("1" (SKOSIMP*) (("1" (TYPEPRED "R!1") (("1" (EXPAND "Riemann_sum?") (("1" (SKOSIMP*) (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (CASE-REPLACE "Rie_sum(a!1, b!1, P!1, xis!1, f!1) = 0") (("1" (ASSERT) (("1" (EXPAND "abs") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "Rie_sum") (("2" (ASSERT) (("2" (CASE-REPLACE "(LAMBDA (n: below(length(P!1) - 1)):
                                                                     P!1`seq(1 + n) * f!1(xis!1`seq(n)) -
                                                                      P!1`seq(n) * f!1(xis!1`seq(n)))
                                                         = (LAMBDA (n: below(length(P!1) - 1)): 0)") (("1" (LEMMA "sigma_const[below(length(P!1) - 1)]") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("1" (INST?) (("1" (ASSERT) NIL NIL) ("2" (HIDE 2) (("2" (TYPEPRED "xis!1") (("2" (ASSERT) (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (TYPEPRED "xis!1") (("2" (EXPAND "xis?") (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) (("3" (TYPEPRED "xis!1") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST + "epsi!1/(2*abs(cc!1))") (("1" (SKOSIMP*) (("1" (LEMMA "part_in") (("1" (INST -1 "a!1" "b!1" "z!1" "P!1") (("1" (ASSERT) (("1" (SKOSIMP*) (("1" (TYPEPRED "R!1") (("1" (EXPAND "Riemann_sum?") (("1" (SKOSIMP*) (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (LEMMA "Rie_sum_alt_lem") (("1" (INST - "a!1" "b!1" "f!1") (("1" (ASSERT) (("1" (INST?) (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (EXPAND "Rie_sum_alt") (("1" (EXPAND "Rie_sec") (("1" (ASSERT) (("1" (NAME "SS1" "sigma(1, length(P!1) - 1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                LAMBDA (n: upto(length(P!1) - 1)):
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  IF n = 0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    THEN 0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  ELSE seq(P!1)(n) * f!1(xis!1`seq(n - 1)) -
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        seq(P!1)(n - 1) *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                         f!1(xis!1`seq(n - 1))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  ENDIF)") (("1" (REPLACE -1) (("1" (NAME "W" "width(a!1, b!1, P!1)") (("1" (REPLACE -1) (("1" (CASE "abs(SS1) <= 2* W * abs(cc!1) ") (("1" (HIDE -2) (("1" (MULT-BY -5 "(2 * abs(cc!1))") (("1" (ASSERT) (("1" (CASE-REPLACE "abs(-1 * SS1) = abs(SS1)") (("1" (HIDE -1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "abs") (("2" (LIFT-IF) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 2)) (("2" (EXPAND "abs") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (1 2)) (("3" (EXPAND "abs") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (NAME "Intv" "(LAMBDA (nn: upto[length(P!1)-2]): seq(P!1)(nn+1) - seq(P!1)(nn))") (("2" (CASE-REPLACE "(LAMBDA (n: upto(length(P!1) - 1)):
                                                                                                               IF n = 0
                                                                                                                 THEN 0
                                                                                                               ELSE seq(P!1)(n) * f!1(xis!1`seq(n - 1)) -
                                                                                                                     seq(P!1)(n - 1) *
                                                                                                                      f!1(xis!1`seq(n - 1))
                                                                                                               ENDIF) =
                                                                                                               (LAMBDA (n: upto(length(P!1) - 1)):
                                                                                                                 IF n = 0
                                                                                                                   THEN 0
                                                                                                                 ELSE Intv(n-1) * f!1(xis!1`seq(n - 1))
                                                                                                                 ENDIF)") (("1" (HIDE -1) (("1" (NAME "FF" "(LAMBDA (n: upto(length(P!1) - 1)):
                                                                                                                                                                                                                                      IF n = 0
                                                                                                                                                                                                                                        THEN 0
                                                                                                                                                                                                                                      ELSE Intv(n - 1) * f!1(xis!1`seq(n - 1))
                                                                                                                                                                                                                                      ENDIF)") (("1" (CASE-REPLACE "length(P!1) = 1") (("1" (EXPAND "sigma" -5) (("1" (REPLACE -5 * RL) (("1" (EXPAND "abs" 1 1) (("1" (EXPAND "abs" +) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE-REPLACE "length(P!1) = 2") (("1" (EXPAND "sigma") (("1" (ASSERT) (("1" (HIDE 4) (("1" (REPLACE -5 * RL) (("1" (REWRITE "abs_mult") (("1" (CASE "abs(Intv(0)) <= W") (("1" (CASE "abs(f!1(xis!1`seq(0))) <= abs(cc!1)") (("1" (MULT-INEQ -1 -2 (+ +)) (("1" (ASSERT) NIL NIL) ("2" (REWRITE "abs_abs") (("2" (REWRITE "abs_abs") (("2" (REWRITE "abs_abs") (("2" (ASSERT) (("2" (EXPAND "abs" 1 2) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2 3) (("2" (INST -14 "xis!1`seq(0)") (("1" (ASSERT) (("1" (HIDE-ALL-BUT (-13 -14 1 2)) (("1" (REPLACE -2) (("1" (EXPAND "abs") (("1" (LIFT-IF) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "xis!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (TYPEPRED "xis!1") (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -3 -4 1)) (("2" (REPLACE -2 * RL) (("2" (ASSERT) (("2" (EXPAND "abs") (("2" (LEMMA "width_lem") (("2" (EXPAND "finseq_appl") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "xis!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -1) (("2" (HIDE 5) (("2" (CASE-REPLACE "(FORALL (nn: upto(length(P!1) - 1)): abs(FF(nn)) <= W*abs(cc!1))") (("1" (HIDE -8 -9 -10 -11 -12 -13) (("1" (CASE "(FORALL (ii: upto(length(P!1)-2)): abs(Intv(ii)) <= W)") (("1" (CASE-REPLACE "ii!1 = 0") (("1" (REWRITE "sigma_first_ge") (("1" (CASE-REPLACE "SS1 = FF(1) + FF(2)") (("1" (HIDE -1) (("1" (HIDE -6) (("1" (INST-CP -3 "1") (("1" (INST-CP -3 "2") (("1" (LEMMA "triangle") (("1" (INST?) (("1" (ASSERT) NIL NIL) ("2" (EXPAND "sigma") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "sigma") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 4) (("2" (REWRITE "sigma_first_ge") (("1" (CASE-REPLACE "sigma(3, length(P!1) - 1, FF) = 0") (("1" (ASSERT) NIL NIL) ("2" (LEMMA "sigma_restrict[upto(length(P!1) - 1)]") (("2" (INST?) (("1" (INST -1 "length(P!1) - 1" "3") (("1" (ASSERT) (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (CASE-REPLACE "restrict(FF, 3, length(P!1) - 1) = (LAMBDA (n: upto(length(P!1) - 1)): 0)") (("1" (HIDE -1) (("1" (LEMMA "sigma_const[upto(length(P!1) - 1)]") (("1" (INST?) (("1" (ASSERT) NIL NIL) ("2" (EXPAND "sigma") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "restrict") (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("2" (LIFT-IF) (("2" (GROUND) (("2" (HIDE -5 -6 -7) (("2" (HIDE 3 4) (("2" (REPLACE -4 * RL) (("2" (ASSERT) (("2" (REVEAL -13) (("2" (INST?) (("1" (ASSERT) (("1" (LEMMA "parts_order") (("1" (INST -1 "a!1" "b!1" "P!1" "1" "x!1-1") (("1" (ASSERT) (("1" (LEMMA "xis_lem") (("1" (ASSERT) (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (TYPEPRED "xis!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (ASSERT) (("3" (TYPEPRED "xis!1") (("3" (ASSERT) (("3" (EXPAND "sigma") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "sigma") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "sigma") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (ASSERT) (("3" (EXPAND "sigma" -7) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "sigma") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (HIDE -5) (("2" (LEMMA "sigma_split_ge[(length(P!1) - 1)]") (("2" (INST?) (("2" (INST -1 "ii!1") (("2" (ASSERT) (("2" (REPLACE -1) (("2" (HIDE -1) (("2" (REWRITE "sigma_last_ge") (("2" (CASE-REPLACE "sigma(1, ii!1 - 1, FF) = 0") (("1" (ASSERT) (("1" (HIDE -1) (("1" (CASE "z!1 = seq(P!1)(1+ii!1)") (("1" (CASE "FF(1 + ii!1) + FF(ii!1) = SS1") (("1" (HIDE -7) (("1" (REPLACE -1 * RL) (("1" (HIDE -1) (("1" (LEMMA "triangle") (("1" (INST?) (("1" (INST-CP -4 "1+ii!1") (("1" (INST -4 "ii!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "ii!1 = length(P!1) -2") (("1" (EXPAND "sigma") (("1" (ASSERT) NIL NIL)) NIL) ("2" (REWRITE "sigma_first_ge") (("2" (ASSERT) (("2" (REWRITE "sigma_first_ge") (("1" (ASSERT) (("1" (CASE-REPLACE "sigma(3 + ii!1, length(P!1) - 1, FF) = 0") (("1" (HIDE -1) (("1" (HIDE 2) (("1" (CASE "FF(ii!1) = 0") (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (ASSERT) (("1" (REPLACE -6 * RL) (("1" (HIDE -6) (("1" (LEMMA "triangle") (("1" (INST?) (("1" (INST-CP -4 "1+ii!1") (("1" (INST-CP -4 "2+ii!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -2 -3 -5 -6 6) (("2" (REPLACE -2 * RL) (("2" (ASSERT) (("2" (HIDE -2) (("2" (REVEAL -17) (("2" (INST?) (("1" (ASSERT) (("1" (HIDE 2) (("1" (TYPEPRED "P!1") (("1" (INST -4 "ii!1") (("1" (ASSERT) (("1" (LEMMA "xis_lem") (("1" (ASSERT) (("1" (INST - "a!1" "b!1" "P!1" "xis!1" "ii!1-1") (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "xis!1") (("2" (ASSERT) (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "sigma_restrict_to") (("1" (CASE-REPLACE "restrict(FF, 3 + ii!1, length(P!1) - 1) = (LAMBDA (n: upto(length(P!1) - 1)): 0)") (("1" (HIDE -1) (("1" (REWRITE "sigma_const") (("1" (EXPAND "sigma") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "restrict") (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("2" (HIDE -2 -3 -5 -6 3 7) (("2" (REPLACE -2 * RL) (("2" (ASSERT) (("2" (HIDE -2) (("2" (LIFT-IF) (("2" (GROUND) (("2" (REVEAL -17) (("2" (INST?) (("1" (ASSERT) (("1" (LEMMA "parts_order") (("1" (INST -1 "a!1" "b!1" "P!1" "ii!1+1" "x!1-1") (("1" (ASSERT) (("1" (LEMMA "xis_lem") (("1" (ASSERT) (("1" (INST - "a!1" "b!1" "P!1" "xis!1" "x!1-1") (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "xis!1") (("2" (ASSERT) (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "sigma") (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (EXPAND "sigma") (("2" (PROPAX) NIL NIL)) NIL)) NIL) ("3" (EXPAND "sigma") (("3" (ASSERT) (("3" (HIDE 3) (("3" (CASE-REPLACE "FF(ii!1) = 0") (("1" (ASSERT) (("1" (REPLACE -7 * RL) (("1" (HIDE -7) (("1" (LEMMA "triangle") (("1" (INST?) (("1" (INST-CP -5 "1+ii!1") (("1" (INST-CP -5 "2+ii!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -2 -3 -5 -6 7) (("2" (REPLACE -2 * RL) (("2" (ASSERT) (("2" (REVEAL -15) (("2" (INST?) (("1" (ASSERT) (("1" (HIDE -2 2) (("1" (LEMMA "parts_order") (("1" (INST -1 "a!1" "b!1" "P!1" "ii!1" "ii!1+1") (("1" (ASSERT) (("1" (TYPEPRED "P!1") (("1" (INST?) (("1" (ASSERT) (("1" (LEMMA "xis_lem") (("1" (ASSERT) (("1" (INST - "a!1" "b!1" "P!1" "xis!1" "ii!1-1") (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "xis!1") (("2" (ASSERT) (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "sigma") (("2" (ASSERT) (("2" (HIDE 3) (("2" (CASE-REPLACE "FF(ii!1) = 0") (("1" (ASSERT) (("1" (REPLACE -7 * RL) (("1" (HIDE -7) (("1" (LEMMA "triangle") (("1" (INST?) (("1" (INST-CP -5 "1+ii!1") (("1" (INST-CP -5 "2+ii!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -6 7) (("2" (HIDE -2 -3 -5) (("2" (REPLACE -2 * RL) (("2" (ASSERT) (("2" (HIDE -2) (("2" (REVEAL -16) (("2" (INST?) (("1" (ASSERT) (("1" (LEMMA "parts_order") (("1" (INST -1 "a!1" "b!1" "P!1" "ii!1" "ii!1+1") (("1" (ASSERT) (("1" (TYPEPRED "P!1") (("1" (INST?) (("1" (ASSERT) (("1" (LEMMA "xis_lem") (("1" (ASSERT) (("1" (INST - "a!1" "b!1" "P!1" "xis!1" "ii!1-1") (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "xis!1") (("2" (ASSERT) (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "FF(1 + ii!1) + FF(ii!1) = SS1") (("1" (HIDE -6) (("1" (REPLACE -1 * RL) (("1" (HIDE -1) (("1" (INST-CP -2 "ii!1") (("1" (INST-CP -2 "ii!1+1") (("1" (LEMMA "triangle") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "sigma_first_ge") (("1" (CASE-REPLACE "sigma(2 + ii!1, length(P!1) - 1, FF) = 0") (("1" (HIDE -1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE -1 -2 -4 -5 2 7) (("2" (REWRITE "sigma_restrict_to") (("1" (CASE "restrict(FF, 2 + ii!1, length(P!1) - 1) = (LAMBDA (n: upto(length(P!1) - 1)): 0)") (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (REWRITE "sigma_const") NIL NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "restrict") (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("2" (REPLACE -1 * RL) (("2" (HIDE -1) (("2" (ASSERT) (("2" (GROUND) (("2" (LIFT-IF) (("2" (GROUND) (("2" (REVEAL -17) (("2" (INST?) (("1" (ASSERT) (("1" (LEMMA "parts_order") (("1" (INST -1 "a!1" "b!1" "P!1" "ii!1+1" "x!1-1") (("1" (ASSERT) (("1" (TYPEPRED "P!1") (("1" (INST?) (("1" (LEMMA "xis_lem") (("1" (ASSERT) (("1" (INST - "a!1" "b!1" "P!1" "xis!1" "x!1-1") (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "xis!1") (("2" (ASSERT) (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "sigma") (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (EXPAND "sigma") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "sigma") (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (EXPAND "sigma") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "sigma_restrict_to") (("2" (CASE-REPLACE "restrict(FF, 1, ii!1 - 1) = (LAMBDA (n: upto(length(P!1) - 1)): 0)") (("1" (HIDE -1) (("1" (REWRITE "sigma_const") NIL NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "restrict") (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("2" (LIFT-IF) (("2" (GROUND) (("2" (HIDE -4 -5) (("2" (REPLACE -3 * RL) (("2" (HIDE -3) (("2" (HIDE -1 -2) (("2" (ASSERT) (("2" (REVEAL -16) (("2" (INST?) (("1" (ASSERT) (("1" (EXPAND "abs") (("1" (ASSERT) (("1" (LEMMA "parts_order") (("1" (INST -1 "a!1" "b!1" "P!1" "x!1" "ii!1") (("1" (ASSERT) (("1" (TYPEPRED "P!1") (("1" (INST?) (("1" (ASSERT) (("1" (LEMMA "xis_lem") (("1" (ASSERT) (("1" (INST - "a!1" "b!1" "P!1" "xis!1" "x!1-1") (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "xis!1") (("2" (ASSERT) (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (REPLACE -3 * RL) (("2" (ASSERT) (("2" (HIDE 4) (("2" (REPLACE -4 * RL) (("2" (HIDE-ALL-BUT 1) (("2" (LEMMA "width_lem") (("2" (EXPAND "finseq_appl") (("2" (INST?) (("2" (TYPEPRED "P!1") (("2" (INST -4 "ii!2") (("2" (EXPAND "abs") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (REPLACE -1 * RL) (("2" (ASSERT) (("2" (GROUND) (("2" (LIFT-IF) (("2" (GROUND) (("1" (EXPAND "abs" 1 1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE -1) (("2" (INST - "xis!1`seq(nn!1 - 1)") (("1" (REWRITE "abs_mult") (("1" (CASE "abs(Intv(nn!1 - 1)) <= W") (("1" (CASE "abs(f!1(xis!1`seq(nn!1 - 1))) <= abs(cc!1)") (("1" (MULT-INEQ -1 -2) (("1" (ASSERT) NIL NIL) ("2" (REWRITE "abs_abs") (("1" (REWRITE "abs_abs") (("1" (REWRITE "abs_abs") (("1" (ASSERT) (("1" (HIDE 2 4 7 -1 -5) (("1" (EXPAND "abs" 1 2) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "xis!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (TYPEPRED "xis!1") (("3" (ASSERT) NIL NIL)) NIL) ("4" (TYPEPRED "xis!1") (("4" (ASSERT) (("4" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE -2 -4 3) (("2" (ASSERT) (("2" (GROUND) (("2" (EXPAND "abs" 1 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (TYPEPRED "xis!1") (("3" (ASSERT) (("3" (FLATTEN) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3 6 -3 -6 -7 -8 -9 -10 -11) (("2" (REPLACE -1 * RL) (("2" (ASSERT) (("2" (HIDE -1) (("2" (LEMMA "width_lem") (("2" (ASSERT) (("2" (INST?) (("2" (EXPAND "abs") (("2" (ASSERT) (("2" (TYPEPRED "P!1") (("2" (INST?) (("2" (ASSERT) (("2" (LIFT-IF) (("2" (GROUND) (("2" (TYPEPRED "P!1") (("2" (INST -4 "nn!1-1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "xis!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (TYPEPRED "xis!1") (("2" (ASSERT) (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2 4) (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("1" (REPLACE -1 * RL) (("1" (LIFT-IF) (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL) ("4" (TYPEPRED "P!1") (("4" (INST?) (("4" (SKOSIMP*) (("4" (ASSERT) (("4" (TYPEPRED "xis!1") (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL) ("4" (SKOSIMP*) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL) ("4" (SKOSIMP*) (("4" (ASSERT) (("4" (TYPEPRED "xis!1") (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (PROP) (("1" (CROSS-MULT 1) (("1" (GROUND) (("1" (HIDE-ALL-BUT (1 3)) (("1" (EXPAND "abs") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 3)) (("2" (EXPAND "abs") (("2" (LIFT-IF) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CROSS-MULT 1) (("1" (GROUND) (("1" (HIDE-ALL-BUT (1 3)) (("1" (EXPAND "abs") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 3)) (("2" (EXPAND "abs") (("2" (LIFT-IF) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "abs") (("3" (LIFT-IF) (("3" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) NIL) (|integral_jmp-6| "" 3278422799 ("" (SKOSIMP*) (("" (LEMMA "integral_def") (("" (INST?) (("" (ASSERT) (("" (FLATTEN) (("" (HIDE -1) (("" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (HIDE 2) (("2" (EXPAND "integral?") (("2" (SKOSIMP*) (("2" (CASE "cc!1 = 0") (("1" (INST + "1") (("1" (SKOSIMP*) (("1" (TYPEPRED "R!1") (("1" (EXPAND "Riemann_sum?") (("1" (SKOSIMP*) (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (CASE-REPLACE "Rie_sum(a!1, b!1, P!1, xis!1, f!1) = 0") (("1" (ASSERT) (("1" (EXPAND "abs") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "Rie_sum") (("2" (ASSERT) (("2" (CASE-REPLACE "(LAMBDA (n: below(length(P!1) - 1)):
                                                             P!1`seq(1 + n) * f!1(xis!1`seq(n)) -
                                                              P!1`seq(n) * f!1(xis!1`seq(n)))
                                                 = (LAMBDA (n: below(length(P!1) - 1)): 0)") (("1" (LEMMA "sigma_const[below(length(P!1) - 1)]") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("1" (INST?) (("1" (ASSERT) NIL NIL) ("2" (HIDE 2) (("2" (TYPEPRED "xis!1") (("2" (ASSERT) (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (TYPEPRED "xis!1") (("2" (EXPAND "xis?") (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) (("3" (TYPEPRED "xis!1") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST + "epsi!1/(2*abs(cc!1))") (("1" (SKOSIMP*) (("1" (LEMMA "part_in") (("1" (INST -1 "a!1" "b!1" "z!1" "P!1") (("1" (ASSERT) (("1" (SKOSIMP*) (("1" (TYPEPRED "R!1") (("1" (EXPAND "Riemann_sum?") (("1" (SKOSIMP*) (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (LEMMA "Rie_sum_alt_lem") (("1" (INST - "a!1" "b!1" "f!1") (("1" (ASSERT) (("1" (INST?) (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (EXPAND "Rie_sum_alt") (("1" (ASSERT) (("1" (NAME "SS1" "sigma(1, length(P!1) - 1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                   LAMBDA (n: upto(length(P!1) - 1)):
                                                                                                                                                                                                                                                                                                                                                                                                                                                     IF n = 0
                                                                                                                                                                                                                                                                                                                                                                                                                                                       THEN 0
                                                                                                                                                                                                                                                                                                                                                                                                                                                     ELSE seq(P!1)(n) * f!1(xis!1`seq(n - 1)) -
                                                                                                                                                                                                                                                                                                                                                                                                                                                           seq(P!1)(n - 1) *
                                                                                                                                                                                                                                                                                                                                                                                                                                                            f!1(xis!1`seq(n - 1))
                                                                                                                                                                                                                                                                                                                                                                                                                                                     ENDIF)") (("1" (REPLACE -1) (("1" (NAME "W" "width(a!1, b!1, P!1)") (("1" (REPLACE -1) (("1" (CASE "abs(SS1) <= 2* W * abs(cc!1) ") (("1" (HIDE -2) (("1" (MULT-BY -5 "(2 * abs(cc!1))") (("1" (ASSERT) (("1" (CASE-REPLACE "abs(-1 * SS1) = abs(SS1)") (("1" (HIDE -1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "abs") (("2" (LIFT-IF) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 2)) (("2" (EXPAND "abs") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (1 2)) (("3" (EXPAND "abs") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (NAME "Intv" "(LAMBDA (nn: upto[length(P!1)-2]): seq(P!1)(nn+1) - seq(P!1)(nn))") (("2" (CASE-REPLACE "(LAMBDA (n: upto(length(P!1) - 1)):
                                                                                                   IF n = 0
                                                                                                     THEN 0
                                                                                                   ELSE seq(P!1)(n) * f!1(xis!1`seq(n - 1)) -
                                                                                                         seq(P!1)(n - 1) *
                                                                                                          f!1(xis!1`seq(n - 1))
                                                                                                   ENDIF) =
                                                                                                   (LAMBDA (n: upto(length(P!1) - 1)):
                                                                                                     IF n = 0
                                                                                                       THEN 0
                                                                                                     ELSE Intv(n-1) * f!1(xis!1`seq(n - 1))
                                                                                                     ENDIF)") (("1" (HIDE -1) (("1" (NAME "FF" "(LAMBDA (n: upto(length(P!1) - 1)):
                                                                                                                                                                                                                   IF n = 0
                                                                                                                                                                                                                     THEN 0
                                                                                                                                                                                                                   ELSE Intv(n - 1) * f!1(xis!1`seq(n - 1))
                                                                                                                                                                                                                   ENDIF)") (("1" (CASE-REPLACE "length(P!1) = 1") (("1" (EXPAND "sigma" -5) (("1" (REPLACE -5 * RL) (("1" (EXPAND "abs" 1 1) (("1" (EXPAND "abs" +) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE-REPLACE "length(P!1) = 2") (("1" (EXPAND "sigma") (("1" (ASSERT) (("1" (HIDE 4) (("1" (REPLACE -5 * RL) (("1" (REWRITE "abs_mult") (("1" (CASE "abs(Intv(0)) <= W") (("1" (CASE "abs(f!1(xis!1`seq(0))) <= abs(cc!1)") (("1" (MULT-INEQ -1 -2 (+ +)) (("1" (ASSERT) NIL NIL) ("2" (REWRITE "abs_abs") (("2" (REWRITE "abs_abs") (("2" (REWRITE "abs_abs") (("2" (ASSERT) (("2" (EXPAND "abs" 1 2) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2 3) (("2" (INST -14 "xis!1`seq(0)") (("1" (ASSERT) (("1" (HIDE-ALL-BUT (-13 -14 1 2)) (("1" (REPLACE -2) (("1" (EXPAND "abs") (("1" (LIFT-IF) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "xis!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (TYPEPRED "xis!1") (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -3 -4 1)) (("2" (REPLACE -2 * RL) (("2" (ASSERT) (("2" (EXPAND "abs") (("2" (LEMMA "width_lem") (("2" (EXPAND "finseq_appl") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "xis!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -1) (("2" (HIDE 5) (("2" (CASE-REPLACE "(FORALL (nn: upto(length(P!1) - 1)): abs(FF(nn)) <= W*abs(cc!1))") (("1" (HIDE -8 -9 -10 -11 -12 -13) (("1" (CASE "(FORALL (ii: upto(length(P!1)-2)): abs(Intv(ii)) <= W)") (("1" (CASE-REPLACE "ii!1 = 0") (("1" (REWRITE "sigma_first_ge") (("1" (CASE-REPLACE "SS1 = FF(1) + FF(2)") (("1" (HIDE -1) (("1" (HIDE -6) (("1" (INST-CP -3 "1") (("1" (INST-CP -3 "2") (("1" (LEMMA "triangle") (("1" (INST?) (("1" (ASSERT) NIL NIL) ("2" (EXPAND "sigma") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "sigma") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 4) (("2" (REWRITE "sigma_first_ge") (("1" (CASE-REPLACE "sigma(3, length(P!1) - 1, FF) = 0") (("1" (ASSERT) NIL NIL) ("2" (LEMMA "sigma_restrict[upto(length(P!1) - 1)]") (("2" (INST?) (("1" (INST -1 "length(P!1) - 1" "3") (("1" (ASSERT) (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (CASE-REPLACE "restrict(FF, 3, length(P!1) - 1) = (LAMBDA (n: upto(length(P!1) - 1)): 0)") (("1" (HIDE -1) (("1" (LEMMA "sigma_const[upto(length(P!1) - 1)]") (("1" (INST?) (("1" (ASSERT) NIL NIL) ("2" (EXPAND "sigma") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "restrict") (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("2" (LIFT-IF) (("2" (GROUND) (("2" (HIDE -5 -6 -7) (("2" (HIDE 3 4) (("2" (REPLACE -4 * RL) (("2" (ASSERT) (("2" (REVEAL -13) (("2" (INST?) (("1" (ASSERT) (("1" (LEMMA "parts_order") (("1" (INST -1 "a!1" "b!1" "P!1" "1" "x!1-1") (("1" (ASSERT) (("1" (LEMMA "xis_lem") (("1" (ASSERT) (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (TYPEPRED "xis!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (ASSERT) (("3" (TYPEPRED "xis!1") (("3" (ASSERT) (("3" (EXPAND "sigma") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "sigma") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "sigma") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (ASSERT) (("3" (EXPAND "sigma" -7) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "sigma") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (HIDE -5) (("2" (LEMMA "sigma_split_ge[(length(P!1) - 1)]") (("2" (INST?) (("2" (INST -1 "ii!1") (("2" (ASSERT) (("2" (REPLACE -1) (("2" (HIDE -1) (("2" (REWRITE "sigma_last_ge") (("2" (CASE-REPLACE "sigma(1, ii!1 - 1, FF) = 0") (("1" (ASSERT) (("1" (HIDE -1) (("1" (CASE "z!1 = seq(P!1)(1+ii!1)") (("1" (CASE "FF(1 + ii!1) + FF(ii!1) = SS1") (("1" (HIDE -7) (("1" (REPLACE -1 * RL) (("1" (HIDE -1) (("1" (LEMMA "triangle") (("1" (INST?) (("1" (INST-CP -4 "1+ii!1") (("1" (INST -4 "ii!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "ii!1 = length(P!1) -2") (("1" (EXPAND "sigma") (("1" (ASSERT) NIL NIL)) NIL) ("2" (REWRITE "sigma_first_ge") (("2" (ASSERT) (("2" (REWRITE "sigma_first_ge") (("1" (ASSERT) (("1" (CASE-REPLACE "sigma(3 + ii!1, length(P!1) - 1, FF) = 0") (("1" (HIDE -1) (("1" (HIDE 2) (("1" (CASE "FF(ii!1) = 0") (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (ASSERT) (("1" (REPLACE -6 * RL) (("1" (HIDE -6) (("1" (LEMMA "triangle") (("1" (INST?) (("1" (INST-CP -4 "1+ii!1") (("1" (INST-CP -4 "2+ii!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -2 -3 -5 -6 6) (("2" (REPLACE -2 * RL) (("2" (ASSERT) (("2" (HIDE -2) (("2" (REVEAL -17) (("2" (INST?) (("1" (ASSERT) (("1" (HIDE 2) (("1" (TYPEPRED "P!1") (("1" (INST -4 "ii!1") (("1" (ASSERT) (("1" (LEMMA "xis_lem") (("1" (ASSERT) (("1" (INST - "a!1" "b!1" "P!1" "xis!1" "ii!1-1") (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "xis!1") (("2" (ASSERT) (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "sigma_restrict_to") (("1" (CASE-REPLACE "restrict(FF, 3 + ii!1, length(P!1) - 1) = (LAMBDA (n: upto(length(P!1) - 1)): 0)") (("1" (HIDE -1) (("1" (REWRITE "sigma_const") (("1" (EXPAND "sigma") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "restrict") (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("2" (HIDE -2 -3 -5 -6 3 7) (("2" (REPLACE -2 * RL) (("2" (ASSERT) (("2" (HIDE -2) (("2" (LIFT-IF) (("2" (GROUND) (("2" (REVEAL -17) (("2" (INST?) (("1" (ASSERT) (("1" (LEMMA "parts_order") (("1" (INST -1 "a!1" "b!1" "P!1" "ii!1+1" "x!1-1") (("1" (ASSERT) (("1" (LEMMA "xis_lem") (("1" (ASSERT) (("1" (INST - "a!1" "b!1" "P!1" "xis!1" "x!1-1") (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "xis!1") (("2" (ASSERT) (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "sigma") (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (EXPAND "sigma") (("2" (PROPAX) NIL NIL)) NIL)) NIL) ("3" (EXPAND "sigma") (("3" (ASSERT) (("3" (HIDE 3) (("3" (CASE-REPLACE "FF(ii!1) = 0") (("1" (ASSERT) (("1" (REPLACE -7 * RL) (("1" (HIDE -7) (("1" (LEMMA "triangle") (("1" (INST?) (("1" (INST-CP -5 "1+ii!1") (("1" (INST-CP -5 "2+ii!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -2 -3 -5 -6 7) (("2" (REPLACE -2 * RL) (("2" (ASSERT) (("2" (REVEAL -15) (("2" (INST?) (("1" (ASSERT) (("1" (HIDE -2 2) (("1" (LEMMA "parts_order") (("1" (INST -1 "a!1" "b!1" "P!1" "ii!1" "ii!1+1") (("1" (ASSERT) (("1" (TYPEPRED "P!1") (("1" (INST?) (("1" (ASSERT) (("1" (LEMMA "xis_lem") (("1" (ASSERT) (("1" (INST - "a!1" "b!1" "P!1" "xis!1" "ii!1-1") (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "xis!1") (("2" (ASSERT) (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "sigma") (("2" (ASSERT) (("2" (HIDE 3) (("2" (CASE-REPLACE "FF(ii!1) = 0") (("1" (ASSERT) (("1" (REPLACE -7 * RL) (("1" (HIDE -7) (("1" (LEMMA "triangle") (("1" (INST?) (("1" (INST-CP -5 "1+ii!1") (("1" (INST-CP -5 "2+ii!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -6 7) (("2" (HIDE -2 -3 -5) (("2" (REPLACE -2 * RL) (("2" (ASSERT) (("2" (HIDE -2) (("2" (REVEAL -16) (("2" (INST?) (("1" (ASSERT) (("1" (LEMMA "parts_order") (("1" (INST -1 "a!1" "b!1" "P!1" "ii!1" "ii!1+1") (("1" (ASSERT) (("1" (TYPEPRED "P!1") (("1" (INST?) (("1" (ASSERT) (("1" (LEMMA "xis_lem") (("1" (ASSERT) (("1" (INST - "a!1" "b!1" "P!1" "xis!1" "ii!1-1") (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "xis!1") (("2" (ASSERT) (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "FF(1 + ii!1) + FF(ii!1) = SS1") (("1" (HIDE -6) (("1" (REPLACE -1 * RL) (("1" (HIDE -1) (("1" (INST-CP -2 "ii!1") (("1" (INST-CP -2 "ii!1+1") (("1" (LEMMA "triangle") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "sigma_first_ge") (("1" (CASE-REPLACE "sigma(2 + ii!1, length(P!1) - 1, FF) = 0") (("1" (HIDE -1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE -1 -2 -4 -5 2 7) (("2" (REWRITE "sigma_restrict_to") (("1" (CASE "restrict(FF, 2 + ii!1, length(P!1) - 1) = (LAMBDA (n: upto(length(P!1) - 1)): 0)") (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (REWRITE "sigma_const") NIL NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "restrict") (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("2" (REPLACE -1 * RL) (("2" (HIDE -1) (("2" (ASSERT) (("2" (GROUND) (("2" (LIFT-IF) (("2" (GROUND) (("2" (REVEAL -17) (("2" (INST?) (("1" (ASSERT) (("1" (LEMMA "parts_order") (("1" (INST -1 "a!1" "b!1" "P!1" "ii!1+1" "x!1-1") (("1" (ASSERT) (("1" (TYPEPRED "P!1") (("1" (INST?) (("1" (LEMMA "xis_lem") (("1" (ASSERT) (("1" (INST - "a!1" "b!1" "P!1" "xis!1" "x!1-1") (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "xis!1") (("2" (ASSERT) (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "sigma") (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (EXPAND "sigma") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "sigma") (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (EXPAND "sigma") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "sigma_restrict_to") (("2" (CASE-REPLACE "restrict(FF, 1, ii!1 - 1) = (LAMBDA (n: upto(length(P!1) - 1)): 0)") (("1" (HIDE -1) (("1" (REWRITE "sigma_const") NIL NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "restrict") (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("2" (LIFT-IF) (("2" (GROUND) (("2" (HIDE -4 -5) (("2" (REPLACE -3 * RL) (("2" (HIDE -3) (("2" (HIDE -1 -2) (("2" (ASSERT) (("2" (REVEAL -16) (("2" (INST?) (("1" (ASSERT) (("1" (EXPAND "abs") (("1" (ASSERT) (("1" (LEMMA "parts_order") (("1" (INST -1 "a!1" "b!1" "P!1" "x!1" "ii!1") (("1" (ASSERT) (("1" (TYPEPRED "P!1") (("1" (INST?) (("1" (ASSERT) (("1" (LEMMA "xis_lem") (("1" (ASSERT) (("1" (INST - "a!1" "b!1" "P!1" "xis!1" "x!1-1") (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "xis!1") (("2" (ASSERT) (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (REPLACE -3 * RL) (("2" (ASSERT) (("2" (HIDE 4) (("2" (REPLACE -4 * RL) (("2" (HIDE-ALL-BUT 1) (("2" (LEMMA "width_lem") (("2" (EXPAND "finseq_appl") (("2" (INST?) (("2" (TYPEPRED "P!1") (("2" (INST -4 "ii!2") (("2" (EXPAND "abs") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (REPLACE -1 * RL) (("2" (ASSERT) (("2" (GROUND) (("2" (LIFT-IF) (("2" (GROUND) (("1" (EXPAND "abs" 1 1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE -1) (("2" (INST - "xis!1`seq(nn!1 - 1)") (("1" (REWRITE "abs_mult") (("1" (CASE "abs(Intv(nn!1 - 1)) <= W") (("1" (CASE "abs(f!1(xis!1`seq(nn!1 - 1))) <= abs(cc!1)") (("1" (MULT-INEQ -1 -2) (("1" (ASSERT) NIL NIL) ("2" (REWRITE "abs_abs") (("1" (REWRITE "abs_abs") (("1" (REWRITE "abs_abs") (("1" (ASSERT) (("1" (HIDE 2 4 7 -1 -5) (("1" (EXPAND "abs" 1 2) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "xis!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (TYPEPRED "xis!1") (("3" (ASSERT) NIL NIL)) NIL) ("4" (TYPEPRED "xis!1") (("4" (ASSERT) (("4" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE -2 -4 3) (("2" (ASSERT) (("2" (GROUND) (("2" (EXPAND "abs" 1 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (TYPEPRED "xis!1") (("3" (ASSERT) (("3" (FLATTEN) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3 6 -3 -6 -7 -8 -9 -10 -11) (("2" (REPLACE -1 * RL) (("2" (ASSERT) (("2" (HIDE -1) (("2" (LEMMA "width_lem") (("2" (ASSERT) (("2" (INST?) (("2" (EXPAND "abs") (("2" (ASSERT) (("2" (TYPEPRED "P!1") (("2" (INST?) (("2" (ASSERT) (("2" (LIFT-IF) (("2" (GROUND) (("2" (TYPEPRED "P!1") (("2" (INST -4 "nn!1-1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "xis!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (TYPEPRED "xis!1") (("2" (ASSERT) (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2 4) (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("1" (REPLACE -1 * RL) (("1" (LIFT-IF) (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL) ("4" (TYPEPRED "P!1") (("4" (INST?) (("4" (SKOSIMP*) (("4" (ASSERT) (("4" (TYPEPRED "xis!1") (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL) ("4" (SKOSIMP*) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL) ("4" (SKOSIMP*) (("4" (ASSERT) (("4" (TYPEPRED "xis!1") (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (PROP) (("1" (CROSS-MULT 1) (("1" (GROUND) (("1" (HIDE-ALL-BUT (1 3)) (("1" (EXPAND "abs") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 3)) (("2" (EXPAND "abs") (("2" (LIFT-IF) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CROSS-MULT 1) (("1" (GROUND) (("1" (HIDE-ALL-BUT (1 3)) (("1" (EXPAND "abs") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 3)) (("2" (EXPAND "abs") (("2" (LIFT-IF) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "abs") (("3" (LIFT-IF) (("3" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) NIL) (|integral_jmp-5| "" 3278422374 ("" (SKOSIMP*) (("" (LEMMA "integral_def") (("" (INST?) (("" (ASSERT) (("" (FLATTEN) (("" (HIDE -1) (("" (SPLIT -1) (("1" (PROPAX) NIL) ("2" (HIDE 2) (("2" (EXPAND "integral?") (("2" (SKOSIMP*) (("2" (CASE "cc!1 = 0") (("1" (INST + "1") (("1" (SKOSIMP*) (("1" (TYPEPRED "R!1") (("1" (EXPAND "Riemann_sum?") (("1" (SKOSIMP*) (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (CASE-REPLACE "Rie_sum(a!1, b!1, P!1, xis!1, f!1) = 0") (("1" (ASSERT) (("1" (EXPAND "abs") (("1" (ASSERT) NIL))))) ("2" (HIDE 2) (("2" (EXPAND "Rie_sum") (("2" (ASSERT) (("2" (CASE-REPLACE "(LAMBDA (n: below(length(P!1) - 1)):
                                             P!1`seq(1 + n) * f!1(xis!1`seq(n)) -
                                              P!1`seq(n) * f!1(xis!1`seq(n)))
                                 = (LAMBDA (n: below(length(P!1) - 1)): 0)") (("1" (LEMMA "sigma_const[below(length(P!1) - 1)]") (("1" (INST?) (("1" (ASSERT) NIL))) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (ASSERT) NIL))))))) ("2" (HIDE 2) (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("1" (INST?) (("1" (ASSERT) NIL) ("2" (HIDE 2) (("2" (TYPEPRED "xis!1") (("2" (ASSERT) (("2" (FLATTEN) (("2" (ASSERT) NIL))))))))))) ("2" (SKOSIMP*) (("2" (TYPEPRED "xis!1") (("2" (EXPAND "xis?") (("2" (FLATTEN) (("2" (ASSERT) NIL))))))))))))) ("3" (SKOSIMP*) (("3" (ASSERT) (("3" (TYPEPRED "xis!1") (("3" (ASSERT) NIL))))))))))))))))))))))))))))))) ("2" (INST + "epsi!1/(2*abs(cc!1))") (("1" (SKOSIMP*) (("1" (LEMMA "part_in") (("1" (INST -1 "a!1" "b!1" "z!1" "P!1") (("1" (ASSERT) (("1" (SKOSIMP*) (("1" (TYPEPRED "R!1") (("1" (EXPAND "Riemann_sum?") (("1" (SKOSIMP*) (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (LEMMA "Rie_sum_alt_lem") (("1" (INST - "a!1" "b!1" "f!1") (("1" (ASSERT) (("1" (INST?) (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (EXPAND "Rie_sum_alt") (("1" (ASSERT) (("1" (NAME "SS1" "sigma(1, length(P!1) - 1,
                                                                                                                                                                                                                                                                                                                                                                                                                         LAMBDA (n: upto(length(P!1) - 1)):
                                                                                                                                                                                                                                                                                                                                                                                                                           IF n = 0
                                                                                                                                                                                                                                                                                                                                                                                                                             THEN 0
                                                                                                                                                                                                                                                                                                                                                                                                                           ELSE seq(P!1)(n) * f!1(xis!1`seq(n - 1)) -
                                                                                                                                                                                                                                                                                                                                                                                                                                 seq(P!1)(n - 1) *
                                                                                                                                                                                                                                                                                                                                                                                                                                  f!1(xis!1`seq(n - 1))
                                                                                                                                                                                                                                                                                                                                                                                                                           ENDIF)") (("1" (REPLACE -1) (("1" (NAME "W" "width(a!1, b!1, P!1)") (("1" (REPLACE -1) (("1" (CASE "abs(SS1) <= 2* W * abs(cc!1) ") (("1" (HIDE -2) (("1" (MULT-BY -5 "(2 * abs(cc!1))") (("1" (ASSERT) (("1" (CASE-REPLACE "abs(-1 * SS1) = abs(SS1)") (("1" (HIDE -1) (("1" (ASSERT) NIL))) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "abs") (("2" (LIFT-IF) (("2" (GROUND) NIL))))))))))) ("2" (HIDE-ALL-BUT (1 2)) (("2" (EXPAND "abs") (("2" (ASSERT) NIL))))) ("3" (HIDE-ALL-BUT (1 2)) (("3" (EXPAND "abs") (("3" (ASSERT) NIL))))))))) ("2" (NAME "Intv" "(LAMBDA (nn: upto[length(P!1)-2]): seq(P!1)(nn+1) - seq(P!1)(nn))") (("2" (CASE-REPLACE "(LAMBDA (n: upto(length(P!1) - 1)):
                                                                           IF n = 0
                                                                             THEN 0
                                                                           ELSE seq(P!1)(n) * f!1(xis!1`seq(n - 1)) -
                                                                                 seq(P!1)(n - 1) *
                                                                                  f!1(xis!1`seq(n - 1))
                                                                           ENDIF) =
                                                                           (LAMBDA (n: upto(length(P!1) - 1)):
                                                                             IF n = 0
                                                                               THEN 0
                                                                             ELSE Intv(n-1) * f!1(xis!1`seq(n - 1))
                                                                             ENDIF)") (("1" (HIDE -1) (("1" (NAME "FF" "(LAMBDA (n: upto(length(P!1) - 1)):
                                                                                                                                                                             IF n = 0
                                                                                                                                                                               THEN 0
                                                                                                                                                                             ELSE Intv(n - 1) * f!1(xis!1`seq(n - 1))
                                                                                                                                                                             ENDIF)") (("1" (CASE-REPLACE "length(P!1) = 1") (("1" (EXPAND "sigma" -5) (("1" (REPLACE -5 * RL) (("1" (EXPAND "abs" 1 1) (("1" (EXPAND "abs" +) (("1" (ASSERT) NIL))))))))) ("2" (CASE-REPLACE "length(P!1) = 2") (("1" (EXPAND "sigma") (("1" (ASSERT) (("1" (HIDE 4) (("1" (REPLACE -5 * RL) (("1" (REWRITE "abs_mult") (("1" (CASE "abs(Intv(0)) <= W") (("1" (CASE "abs(f!1(xis!1`seq(0))) <= abs(cc!1)") (("1" (MULT-INEQ -1 -2 (+ +)) (("1" (ASSERT) NIL) ("2" (REWRITE "abs_abs") (("2" (REWRITE "abs_abs") (("2" (REWRITE "abs_abs") (("2" (ASSERT) (("2" (EXPAND "abs" 1 2) (("2" (PROPAX) NIL))))))))))))) ("2" (HIDE 2 3) (("2" (INST -14 "xis!1`seq(0)") (("1" (ASSERT) (("1" (HIDE-ALL-BUT (-13 -14 1 2)) (("1" (REPLACE -2) (("1" (EXPAND "abs") (("1" (LIFT-IF) (("1" (GROUND) NIL))))))))))) ("2" (TYPEPRED "xis!1") (("2" (ASSERT) NIL))))))) ("3" (TYPEPRED "xis!1") (("3" (ASSERT) NIL))))) ("2" (HIDE-ALL-BUT (-1 -3 -4 1)) (("2" (REPLACE -2 * RL) (("2" (ASSERT) (("2" (EXPAND "abs") (("2" (LEMMA "width_lem") (("2" (EXPAND "finseq_appl") (("2" (INST?) (("2" (ASSERT) NIL))))))))))))))))) ("2" (TYPEPRED "xis!1") (("2" (ASSERT) NIL))))))))))))) ("2" (REPLACE -1) (("2" (HIDE 5) (("2" (CASE-REPLACE "(FORALL (nn: upto(length(P!1) - 1)): abs(FF(nn)) <= W*abs(cc!1))") (("1" (HIDE -8 -9 -10 -11 -12 -13) (("1" (CASE "(FORALL (ii: upto(length(P!1)-2)): abs(Intv(ii)) <= W)") (("1" (CASE-REPLACE "ii!1 = 0") (("1" (REWRITE "sigma_first_ge") (("1" (CASE-REPLACE "SS1 = FF(1) + FF(2)") (("1" (HIDE -1) (("1" (HIDE -6) (("1" (INST-CP -3 "1") (("1" (INST-CP -3 "2") (("1" (LEMMA "triangle") (("1" (INST?) (("1" (ASSERT) NIL) ("2" (EXPAND "sigma") (("2" (ASSERT) NIL))))))) ("2" (EXPAND "sigma") (("2" (ASSERT) NIL))))))))))) ("2" (HIDE 4) (("2" (REWRITE "sigma_first_ge") (("1" (CASE-REPLACE "sigma(3, length(P!1) - 1, FF) = 0") (("1" (ASSERT) NIL) ("2" (LEMMA "sigma_restrict[upto(length(P!1) - 1)]") (("2" (INST?) (("1" (INST -1 "length(P!1) - 1" "3") (("1" (ASSERT) (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (CASE-REPLACE "restrict(FF, 3, length(P!1) - 1) = (LAMBDA (n: upto(length(P!1) - 1)): 0)") (("1" (HIDE -1) (("1" (LEMMA "sigma_const[upto(length(P!1) - 1)]") (("1" (INST?) (("1" (ASSERT) NIL) ("2" (EXPAND "sigma") (("2" (ASSERT) NIL))))))))) ("2" (EXPAND "restrict") (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("2" (LIFT-IF) (("2" (GROUND) (("2" (HIDE -5 -6 -7) (("2" (HIDE 3 4) (("2" (REPLACE -4 * RL) (("2" (ASSERT) (("2" (REVEAL -13) (("2" (INST?) (("1" (ASSERT) (("1" (LEMMA "parts_order") (("1" (INST -1 "a!1" "b!1" "P!1" "1" "x!1-1") (("1" (ASSERT) (("1" (POSTPONE) NIL))))))))) ("2" (ASSERT) (("2" (TYPEPRED "xis!1") (("2" (ASSERT) NIL))))))))))))))))))))))))) ("3" (EXPAND "sigma") (("3" (ASSERT) NIL))))))))))) ("2" (EXPAND "sigma") (("2" (ASSERT) NIL))))) ("2" (EXPAND "sigma") (("2" (ASSERT) NIL))))))) ("3" (EXPAND "sigma" -7) (("3" (ASSERT) NIL))))) ("2" (ASSERT) (("2" (EXPAND "sigma") (("2" (ASSERT) NIL))))))))) ("3" (ASSERT) NIL))))) ("2" (ASSERT) (("2" (HIDE -5) (("2" (LEMMA "sigma_split_ge[(length(P!1) - 1)]") (("2" (INST?) (("2" (INST -1 "ii!1") (("2" (ASSERT) (("2" (REPLACE -1) (("2" (HIDE -1) (("2" (REWRITE "sigma_last_ge") (("2" (CASE-REPLACE "sigma(1, ii!1 - 1, FF) = 0") (("1" (ASSERT) (("1" (HIDE -1) (("1" (CASE "z!1 = seq(P!1)(1+ii!1)") (("1" (CASE "FF(1 + ii!1) + FF(ii!1) = SS1") (("1" (HIDE -7) (("1" (REPLACE -1 * RL) (("1" (HIDE -1) (("1" (LEMMA "triangle") (("1" (INST?) (("1" (INST-CP -4 "1+ii!1") (("1" (INST -4 "ii!1") (("1" (ASSERT) NIL))))))))))))))) ("2" (CASE "ii!1 = length(P!1) -2") (("1" (EXPAND "sigma") (("1" (ASSERT) NIL))) ("2" (REWRITE "sigma_first_ge") (("2" (ASSERT) (("2" (REWRITE "sigma_first_ge") (("1" (ASSERT) (("1" (CASE-REPLACE "sigma(3 + ii!1, length(P!1) - 1, FF) = 0") (("1" (HIDE -1) (("1" (HIDE 2) (("1" (CASE "FF(ii!1) = 0") (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (ASSERT) (("1" (REPLACE -6 * RL) (("1" (HIDE -6) (("1" (LEMMA "triangle") (("1" (INST?) (("1" (INST-CP -4 "1+ii!1") (("1" (INST-CP -4 "2+ii!1") (("1" (ASSERT) NIL))))))))))))))))))) ("2" (HIDE -2 -3 -5 -6 6) (("2" (REPLACE -2 * RL) (("2" (ASSERT) (("2" (HIDE -2) (("2" (REVEAL -17) (("2" (INST?) (("1" (ASSERT) (("1" (HIDE 2) (("1" (TYPEPRED "P!1") (("1" (INST -4 "ii!1") (("1" (ASSERT) (("1" (POSTPONE) NIL))))))))))) ("2" (TYPEPRED "xis!1") (("2" (ASSERT) (("2" (FLATTEN) (("2" (ASSERT) NIL))))))))))))))))))))))))) ("2" (REWRITE "sigma_restrict_to") (("1" (CASE-REPLACE "restrict(FF, 3 + ii!1, length(P!1) - 1) = (LAMBDA (n: upto(length(P!1) - 1)): 0)") (("1" (HIDE -1) (("1" (REWRITE "sigma_const") (("1" (EXPAND "sigma") (("1" (PROPAX) NIL))))))) ("2" (HIDE 2) (("2" (EXPAND "restrict") (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("2" (HIDE -2 -3 -5 -6 3 7) (("2" (REPLACE -2 * RL) (("2" (ASSERT) (("2" (HIDE -2) (("2" (LIFT-IF) (("2" (GROUND) (("2" (REVEAL -17) (("2" (INST?) (("1" (ASSERT) (("1" (LEMMA "parts_order") (("1" (INST -1 "a!1" "b!1" "P!1" "ii!1+1" "x!1-1") (("1" (ASSERT) (("1" (POSTPONE) NIL))))))))) ("2" (TYPEPRED "xis!1") (("2" (ASSERT) (("2" (FLATTEN) (("2" (ASSERT) NIL))))))))))))))))))))))))))))) ("3" (EXPAND "sigma") (("3" (ASSERT) NIL))))) ("2" (EXPAND "sigma") (("2" (PROPAX) NIL))))) ("3" (EXPAND "sigma") (("3" (ASSERT) (("3" (HIDE 3) (("3" (CASE-REPLACE "FF(ii!1) = 0") (("1" (ASSERT) (("1" (REPLACE -7 * RL) (("1" (HIDE -7) (("1" (LEMMA "triangle") (("1" (INST?) (("1" (INST-CP -5 "1+ii!1") (("1" (INST-CP -5 "2+ii!1") (("1" (ASSERT) NIL))))))))))))))) ("2" (HIDE -2 -3 -5 -6 7) (("2" (REPLACE -2 * RL) (("2" (ASSERT) (("2" (REVEAL -15) (("2" (INST?) (("1" (ASSERT) (("1" (HIDE -2 2) (("1" (LEMMA "parts_order") (("1" (INST -1 "a!1" "b!1" "P!1" "ii!1" "ii!1+1") (("1" (ASSERT) (("1" (TYPEPRED "P!1") (("1" (INST?) (("1" (ASSERT) (("1" (POSTPONE) NIL))))))))))))))))) ("2" (TYPEPRED "xis!1") (("2" (ASSERT) (("2" (FLATTEN) (("2" (ASSERT) NIL))))))))))))))))))))))))))))) ("2" (ASSERT) (("2" (EXPAND "sigma") (("2" (ASSERT) (("2" (HIDE 3) (("2" (CASE-REPLACE "FF(ii!1) = 0") (("1" (ASSERT) (("1" (REPLACE -7 * RL) (("1" (HIDE -7) (("1" (LEMMA "triangle") (("1" (INST?) (("1" (INST-CP -5 "1+ii!1") (("1" (INST-CP -5 "2+ii!1") (("1" (ASSERT) NIL))))))))))))))) ("2" (HIDE -6 7) (("2" (HIDE -2 -3 -5) (("2" (REPLACE -2 * RL) (("2" (ASSERT) (("2" (HIDE -2) (("2" (REVEAL -16) (("2" (INST?) (("1" (ASSERT) (("1" (LEMMA "parts_order") (("1" (INST -1 "a!1" "b!1" "P!1" "ii!1" "ii!1+1") (("1" (ASSERT) (("1" (TYPEPRED "P!1") (("1" (INST?) (("1" (ASSERT) (("1" (POSTPONE) NIL))))))))))))))) ("2" (TYPEPRED "xis!1") (("2" (ASSERT) (("2" (FLATTEN) (("2" (ASSERT) NIL))))))))))))))))))))))))))))))))))))))))) ("2" (CASE "FF(1 + ii!1) + FF(ii!1) = SS1") (("1" (HIDE -6) (("1" (REPLACE -1 * RL) (("1" (HIDE -1) (("1" (INST-CP -2 "ii!1") (("1" (INST-CP -2 "ii!1+1") (("1" (LEMMA "triangle") (("1" (INST?) (("1" (ASSERT) NIL))))))))))))))) ("2" (REWRITE "sigma_first_ge") (("1" (CASE-REPLACE "sigma(2 + ii!1, length(P!1) - 1, FF) = 0") (("1" (HIDE -1) (("1" (ASSERT) NIL))) ("2" (HIDE -1 -2 -4 -5 2 7) (("2" (REWRITE "sigma_restrict_to") (("1" (CASE "restrict(FF, 2 + ii!1, length(P!1) - 1) = (LAMBDA (n: upto(length(P!1) - 1)): 0)") (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (REWRITE "sigma_const") NIL))))) ("2" (HIDE 2) (("2" (EXPAND "restrict") (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("2" (REPLACE -1 * RL) (("2" (HIDE -1) (("2" (ASSERT) (("2" (GROUND) (("2" (LIFT-IF) (("2" (GROUND) (("2" (REVEAL -17) (("2" (INST?) (("1" (ASSERT) (("1" (LEMMA "parts_order") (("1" (INST -1 "a!1" "b!1" "P!1" "ii!1+1" "x!1-1") (("1" (ASSERT) (("1" (TYPEPRED "P!1") (("1" (INST?) (("1" (POSTPONE) NIL))))))))))))) ("2" (TYPEPRED "xis!1") (("2" (ASSERT) (("2" (FLATTEN) (("2" (ASSERT) NIL))))))))))))))))))))))))))))) ("3" (EXPAND "sigma") (("3" (ASSERT) NIL))))) ("2" (EXPAND "sigma") (("2" (PROPAX) NIL))))))) ("3" (EXPAND "sigma") (("3" (ASSERT) NIL))))) ("2" (EXPAND "sigma") (("2" (PROPAX) NIL))))))))))))) ("2" (REWRITE "sigma_restrict_to") (("2" (CASE-REPLACE "restrict(FF, 1, ii!1 - 1) = (LAMBDA (n: upto(length(P!1) - 1)): 0)") (("1" (HIDE -1) (("1" (REWRITE "sigma_const") NIL))) ("2" (HIDE 2) (("2" (EXPAND "restrict") (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("2" (LIFT-IF) (("2" (GROUND) (("2" (HIDE -4 -5) (("2" (REPLACE -3 * RL) (("2" (HIDE -3) (("2" (HIDE -1 -2) (("2" (ASSERT) (("2" (REVEAL -16) (("2" (INST?) (("1" (ASSERT) (("1" (EXPAND "abs") (("1" (ASSERT) (("1" (LEMMA "parts_order") (("1" (INST -1 "a!1" "b!1" "P!1" "x!1" "ii!1") (("1" (ASSERT) (("1" (TYPEPRED "P!1") (("1" (INST?) (("1" (ASSERT) (("1" (POSTPONE) NIL))))))))))))))))))) ("2" (TYPEPRED "xis!1") (("2" (ASSERT) (("2" (FLATTEN) (("2" (ASSERT) NIL))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ("2" (SKOSIMP*) (("2" (REPLACE -3 * RL) (("2" (ASSERT) (("2" (HIDE 4) (("2" (REPLACE -4 * RL) (("2" (HIDE-ALL-BUT 1) (("2" (LEMMA "width_lem") (("2" (EXPAND "finseq_appl") (("2" (INST?) (("2" (TYPEPRED "P!1") (("2" (INST -4 "ii!2") (("2" (EXPAND "abs") (("2" (ASSERT) NIL))))))))))))))))))))))))))))) ("2" (SKOSIMP*) (("2" (REPLACE -1 * RL) (("2" (ASSERT) (("2" (GROUND) (("2" (LIFT-IF) (("2" (GROUND) (("1" (EXPAND "abs" 1 1) (("1" (ASSERT) NIL))) ("2" (HIDE -1) (("2" (INST - "xis!1`seq(nn!1 - 1)") (("1" (REWRITE "abs_mult") (("1" (CASE "abs(Intv(nn!1 - 1)) <= W") (("1" (CASE "abs(f!1(xis!1`seq(nn!1 - 1))) <= abs(cc!1)") (("1" (MULT-INEQ -1 -2) (("1" (ASSERT) NIL) ("2" (REWRITE "abs_abs") (("1" (REWRITE "abs_abs") (("1" (REWRITE "abs_abs") (("1" (ASSERT) (("1" (HIDE 2 4 7 -1 -5) (("1" (EXPAND "abs" 1 2) (("1" (PROPAX) NIL))))))))))) ("2" (TYPEPRED "xis!1") (("2" (ASSERT) NIL))))) ("3" (TYPEPRED "xis!1") (("3" (ASSERT) NIL))) ("4" (TYPEPRED "xis!1") (("4" (ASSERT) (("4" (GROUND) NIL))))))) ("2" (HIDE -2 -4 3) (("2" (ASSERT) (("2" (GROUND) (("2" (EXPAND "abs" 1 1) (("2" (ASSERT) NIL))))))))) ("3" (TYPEPRED "xis!1") (("3" (ASSERT) (("3" (FLATTEN) (("3" (ASSERT) NIL))))))))) ("2" (HIDE 3 6 -3 -6 -7 -8 -9 -10 -11) (("2" (REPLACE -1 * RL) (("2" (ASSERT) (("2" (HIDE -1) (("2" (LEMMA "width_lem") (("2" (EXPAND "finseq_appl") (("2" (INST?) (("2" (EXPAND "abs") (("2" (ASSERT) (("2" (TYPEPRED "P!1") (("2" (INST?) (("2" (ASSERT) (("2" (LIFT-IF) (("2" (GROUND) (("2" (POSTPONE) NIL))))))))))))))))))))))))))))))) ("2" (TYPEPRED "xis!1") (("2" (ASSERT) NIL))))) ("2" (TYPEPRED "xis!1") (("2" (ASSERT) (("2" (FLATTEN) (("2" (ASSERT) NIL))))))))))))))))))))))))))))))))) ("2" (SKOSIMP*) (("2" (ASSERT) NIL))))))) ("2" (HIDE 2 4) (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("1" (REPLACE -1 * RL) (("1" (LIFT-IF) (("1" (GROUND) NIL))))) ("2" (SKOSIMP*) (("2" (ASSERT) NIL))) ("3" (SKOSIMP*) (("3" (ASSERT) NIL))) ("4" (TYPEPRED "P!1") (("4" (INST?) (("4" (SKOSIMP*) (("4" (ASSERT) (("4" (TYPEPRED "xis!1") (("4" (ASSERT) NIL))))))))))))))) ("3" (SKOSIMP*) (("3" (ASSERT) NIL))) ("4" (SKOSIMP*) (("4" (ASSERT) NIL))))))))))))))) ("2" (SKOSIMP*) (("2" (ASSERT) NIL))) ("3" (SKOSIMP*) (("3" (ASSERT) NIL))) ("4" (SKOSIMP*) (("4" (ASSERT) (("4" (TYPEPRED "xis!1") (("4" (ASSERT) NIL))))))))))))))))))))))))))))))))))))))))))))) ("2" (ASSERT) (("2" (PROP) (("1" (CROSS-MULT 1) (("1" (GROUND) (("1" (HIDE-ALL-BUT (1 3)) (("1" (EXPAND "abs") (("1" (ASSERT) NIL))))))) ("2" (HIDE-ALL-BUT (1 3)) (("2" (EXPAND "abs") (("2" (LIFT-IF) (("2" (ASSERT) NIL))))))))) ("2" (CROSS-MULT 1) (("1" (GROUND) (("1" (HIDE-ALL-BUT (1 3)) (("1" (EXPAND "abs") (("1" (ASSERT) NIL))))))) ("2" (HIDE-ALL-BUT (1 3)) (("2" (EXPAND "abs") (("2" (LIFT-IF) (("2" (ASSERT) NIL))))))))))))) ("3" (EXPAND "abs") (("3" (LIFT-IF) (("3" (GROUND) NIL)))))))))))))))))))))))))))) NIL) NIL NIL) (|integral_jmp-4| "" 3278266065 ("" (SKOSIMP*) (("" (LEMMA "integral_def") (("" (INST?) (("" (ASSERT) (("" (FLATTEN) (("" (HIDE -1) (("" (SPLIT -1) (("1" (PROPAX) NIL) ("2" (HIDE 2) (("2" (EXPAND "integral?") (("2" (SKOSIMP*) (("2" (CASE "cc!1 = 0") (("1" (INST + "1") (("1" (SKOSIMP*) (("1" (TYPEPRED "R!1") (("1" (EXPAND "Riemann_sum?") (("1" (SKOSIMP*) (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (CASE-REPLACE "Rie_sum(a!1, b!1, P!1, xis!1, f!1) = 0") (("1" (ASSERT) (("1" (EXPAND "abs") (("1" (ASSERT) NIL))))) ("2" (HIDE 2) (("2" (EXPAND "Rie_sum") (("2" (ASSERT) (("2" (CASE-REPLACE "(LAMBDA (n: below(length(P!1) - 1)):
                             P!1`seq(1 + n) * f!1(xis!1`seq(n)) -
                              P!1`seq(n) * f!1(xis!1`seq(n)))
                 = (LAMBDA (n: below(length(P!1) - 1)): 0)") (("1" (LEMMA "sigma_const[below(length(P!1) - 1)]") (("1" (INST?) (("1" (ASSERT) NIL))) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (ASSERT) NIL))))))) ("2" (HIDE 2) (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("1" (INST?) (("1" (ASSERT) NIL) ("2" (HIDE 2) (("2" (TYPEPRED "xis!1") (("2" (ASSERT) (("2" (FLATTEN) (("2" (ASSERT) NIL))))))))))) ("2" (SKOSIMP*) (("2" (TYPEPRED "xis!1") (("2" (EXPAND "xis?") (("2" (FLATTEN) (("2" (ASSERT) NIL))))))))))))) ("3" (SKOSIMP*) (("3" (ASSERT) (("3" (TYPEPRED "xis!1") (("3" (ASSERT) NIL))))))))))))))))))))))))))))))) ("2" (INST + "epsi!1/(2*abs(cc!1))") (("1" (SKOSIMP*) (("1" (LEMMA "part_in") (("1" (INST -1 "a!1" "b!1" "z!1" "P!1") (("1" (ASSERT) (("1" (SKOSIMP*) (("1" (TYPEPRED "R!1") (("1" (EXPAND "Riemann_sum?") (("1" (SKOSIMP*) (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (EXPAND "Rie_sum") (("1" (ASSERT) (("1" (NAME "SS1" "sigma[below(length(P!1) - 1)]
                                         (0, length(P!1) - 2,
                                          LAMBDA (n: below(length(P!1) - 1)):
                                            P!1`seq(1 + n) * f!1(xis!1`seq(n)) -
                                             P!1`seq(n) * f!1(xis!1`seq(n)))") (("1" (REPLACE -1) (("1" (NAME "W" "width(a!1, b!1, P!1)") (("1" (REPLACE -1) (("1" (CASE "abs(SS1) <= 2* W * abs(cc!1) ") (("1" (HIDE -2) (("1" (MULT-BY -5 "(2 * abs(cc!1))") (("1" (ASSERT) (("1" (CASE-REPLACE "abs(-1 * SS1) = abs(SS1)") (("1" (HIDE -1) (("1" (ASSERT) NIL))) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "abs") (("2" (LIFT-IF) (("2" (GROUND) NIL))))))))))) ("2" (HIDE-ALL-BUT (1 2)) (("2" (EXPAND "abs") (("2" (ASSERT) NIL))))) ("3" (HIDE-ALL-BUT (1 2)) (("3" (EXPAND "abs") (("3" (ASSERT) NIL))))))))) ("2" (NAME "Intv" "(LAMBDA (nn: below[length(P!1)-1]): seq(P!1)(nn+1) - seq(P!1)(nn))") (("2" (CASE-REPLACE "(LAMBDA (n: below(length(P!1) - 1)):
                                      P!1`seq(1 + n) * f!1(xis!1`seq(n)) -
                                       P!1`seq(n) * f!1(xis!1`seq(n))) =
                         	                 (LAMBDA (n: below(length(P!1) - 1)):
                                      Intv(n)* f!1(xis!1`seq(n)))") (("1" (NAME "FF" "(LAMBDA (n: below(length(P!1) - 1)): Intv(n) * f!1(xis!1`seq(n)))") (("1" (CASE-REPLACE "length(P!1) = 1") (("1" (HIDE -3) (("1" (EXPAND "sigma" -5) (("1" (REPLACE -5 * RL) (("1" (EXPAND "abs" 1 1) (("1" (ASSERT) NIL))))))))) ("2" (CASE-REPLACE "length(P!1) = 2") (("1" (HIDE -3) (("1" (EXPAND "sigma") (("1" (ASSERT) (("1" (HIDE 4) (("1" (REPLACE -5 * RL) (("1" (REWRITE "abs_mult") (("1" (CASE "abs(Intv(0)) <= W") (("1" (CASE "abs(f!1(xis!1(0))) <= abs(cc!1)") (("1" (ASSERT) (("1" (MULT-INEQ -1 -2 (+ +)) (("1" (ASSERT) NIL) ("2" (REWRITE "abs_abs") (("2" (REWRITE "abs_abs") (("2" (REWRITE "abs_abs") (("2" (ASSERT) (("2" (EXPAND "abs" 1 2) (("2" (PROPAX) NIL))))))))))))))) ("2" (HIDE 2 3) (("2" (ASSERT) (("2" (INST - "xis!1(0)") (("1" (ASSERT) (("1" (HIDE-ALL-BUT (-13 -14 1 2)) (("1" (EXPAND "abs") (("1" (LIFT-IF) (("1" (GROUND) NIL))))))))) ("2" (ASSERT) (("2" (HIDE-ALL-BUT (-1 -3 -4 1)) (("2" (TYPEPRED "xis!1") (("2" (EXPAND "xis?") (("2" (PROPAX) NIL))))))))))))))) ("3" (TYPEPRED "xis!1") (("3" (EXPAND "xis?") (("3" (FLATTEN) (("3" (ASSERT) NIL))))))))) ("2" (HIDE-ALL-BUT (-1 -3 -4 1)) (("2" (REPLACE -2 * RL) (("2" (ASSERT) (("2" (EXPAND "abs") (("2" (LEMMA "width_lem") (("2" (EXPAND "finseq_appl") (("2" (INST?) (("2" (ASSERT) NIL))))))))))))))))) ("2" (TYPEPRED "xis!1") (("2" (EXPAND "xis?") (("2" (PROPAX) NIL))))))))))))))))) ("2" (ASSERT) (("2" (REPLACE -1) (("2" (HIDE 5) (("2" (CASE-REPLACE "(FORALL (nn: upto(length(P!1) - 1)): abs(FF(nn)) <= W*abs(cc!1))") (("1" (HIDE -8 -9 -10 -11 -12 -13) (("1" (CASE "(FORALL (ii: upto(length(P!1)-1)): abs(Intv(ii)) <= W)") (("1" (CASE-REPLACE "ii!1 = 0") (("1" (REWRITE "sigma_first_ge") (("1" (CASE-REPLACE "SS1 = FF(0) + FF(1)") (("1" (HIDE -1) (("1" (HIDE -6) (("1" (INST-CP -3 "0") (("1" (INST-CP -3 "1") (("1" (LEMMA "triangle") (("1" (INST?) (("1" (ASSERT) (("1" (EXPAND "sigma") (("1" (POSTPONE) NIL))))))))))))))))) ("2" (POSTPONE) NIL))))) ("2" (POSTPONE) NIL))) ("2" (POSTPONE) NIL) ("3" (POSTPONE) NIL))))) ("2" (POSTPONE) NIL) ("3" (POSTPONE) NIL))))))))))))))) ("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("1" (EXPAND "Intv") (("1" (PROPAX) NIL))) ("2" (SKOSIMP*) (("2" (ASSERT) (("2" (TYPEPRED "xis!1") (("2" (ASSERT) NIL))))))))))))))))))))) ("2" (SKOSIMP*) (("2" (ASSERT) NIL))) ("3" (SKOSIMP*) (("3" (TYPEPRED "xis!1") (("3" (ASSERT) (("3" (FLATTEN) (("3" (ASSERT) NIL))))))))))))))))))))))))))))))))))) ("2" (POSTPONE) NIL) ("3" (POSTPONE) NIL)))))))))))))))))))))))) NIL) (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) NIL) (|integral_jmp-3| "" 3278265609 ("" (SKOSIMP*) (("" (LEMMA "integral_def") (("" (INST?) (("" (ASSERT) (("" (FLATTEN) (("" (HIDE -1) (("" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (HIDE 2) (("2" (EXPAND "integral?") (("2" (SKOSIMP*) (("2" (CASE "cc!1 = 0") (("1" (INST + "1") (("1" (SKOSIMP*) (("1" (TYPEPRED "R!1") (("1" (EXPAND "Riemann_sum?") (("1" (SKOSIMP*) (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (CASE-REPLACE "Rie_sum(a!1, b!1, P!1, xis!1, f!1) = 0") (("1" (ASSERT) (("1" (EXPAND "abs") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "Rie_sum") (("2" (ASSERT) (("2" (CASE-REPLACE "(LAMBDA (n: below(length(P!1) - 1)):
                     P!1`seq(1 + n) * f!1(xis!1`seq(n)) -
                      P!1`seq(n) * f!1(xis!1`seq(n)))
         = (LAMBDA (n: below(length(P!1) - 1)): 0)") (("1" (LEMMA "sigma_const[below(length(P!1) - 1)]") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("1" (INST?) (("1" (ASSERT) NIL NIL) ("2" (HIDE 2) (("2" (TYPEPRED "xis!1") (("2" (ASSERT) (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (TYPEPRED "xis!1") (("2" (EXPAND "xis?") (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) (("3" (TYPEPRED "xis!1") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST + "epsi!1/(2*abs(cc!1))") (("1" (SKOSIMP*) (("1" (LEMMA "part_in") (("1" (INST -1 "a!1" "b!1" "z!1" "P!1") (("1" (ASSERT) (("1" (SKOSIMP*) (("1" (TYPEPRED "R!1") (("1" (EXPAND "Riemann_sum?") (("1" (SKOSIMP*) (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (EXPAND "Rie_sum") (("1" (ASSERT) (("1" (NAME "SS1" "sigma[below(length(P!1) - 1)]
                            (0, length(P!1) - 2,
                             LAMBDA (n: below(length(P!1) - 1)):
                               P!1`seq(1 + n) * f!1(xis!1`seq(n)) -
                                P!1`seq(n) * f!1(xis!1`seq(n)))") (("1" (REPLACE -1) (("1" (NAME "W" "width(a!1, b!1, P!1)") (("1" (REPLACE -1) (("1" (CASE "abs(SS1) <= 2* W * abs(cc!1) ") (("1" (HIDE -2) (("1" (MULT-BY -5 "(2 * abs(cc!1))") (("1" (ASSERT) (("1" (CASE-REPLACE "abs(-1 * SS1) = abs(SS1)") (("1" (HIDE -1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "abs") (("2" (LIFT-IF) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 2)) (("2" (EXPAND "abs") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (1 2)) (("3" (EXPAND "abs") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (NAME "Intv" "(LAMBDA (nn: below[length(P!1)-1]): seq(P!1)(nn+1) - seq(P!1)(nn))") (("2" (CASE-REPLACE "(LAMBDA (n: below(length(P!1) - 1)):
                          P!1`seq(1 + n) * f!1(xis!1`seq(n)) -
                           P!1`seq(n) * f!1(xis!1`seq(n))) =
             	                 (LAMBDA (n: below(length(P!1) - 1)):
                          Intv(n)* f!1(xis!1`seq(n)))") (("1" (NAME "FF" "(LAMBDA (n: below(length(P!1) - 1)): Intv(n) * f!1(xis!1`seq(n)))") (("1" (CASE-REPLACE "length(P!1) = 1") (("1" (HIDE -3) (("1" (EXPAND "sigma" -5) (("1" (REPLACE -5 * RL) (("1" (EXPAND "abs" 1 1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE-REPLACE "length(P!1) = 2") (("1" (HIDE -3) (("1" (EXPAND "sigma") (("1" (ASSERT) (("1" (HIDE 4) (("1" (REPLACE -5 * RL) (("1" (REWRITE "abs_mult") (("1" (CASE "abs(Intv(0)) <= W") (("1" (CASE "abs(f!1(xis!1(0))) <= abs(cc!1)") (("1" (ASSERT) (("1" (MULT-INEQ -1 -2 (+ +)) (("1" (ASSERT) NIL NIL) ("2" (REWRITE "abs_abs") (("2" (REWRITE "abs_abs") (("2" (REWRITE "abs_abs") (("2" (ASSERT) (("2" (EXPAND "abs" 1 2) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2 3) (("2" (ASSERT) (("2" (INST - "xis!1(0)") (("1" (ASSERT) (("1" (HIDE-ALL-BUT (-13 -14 1 2)) (("1" (EXPAND "abs") (("1" (LIFT-IF) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (HIDE-ALL-BUT (-1 -3 -4 1)) (("2" (TYPEPRED "xis!1") (("2" (EXPAND "xis?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (TYPEPRED "xis!1") (("3" (EXPAND "xis?") (("3" (FLATTEN) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -3 -4 1)) (("2" (REPLACE -2 * RL) (("2" (ASSERT) (("2" (EXPAND "abs") (("2" (LEMMA "width_lem") (("2" (EXPAND "finseq_appl") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "xis!1") (("2" (EXPAND "xis?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (REPLACE -1) (("2" (HIDE 5) (("2" (CASE-REPLACE "(FORALL (nn: upto(length(P!1) - 1)): abs(FF(nn)) <= W*abs(cc!1))") (("1" (HIDE -8 -9 -10 -11 -12 -13) (("1" (CASE "(FORALL (ii: upto(length(P!1)-1)): abs(Intv(ii)) <= W)") (("1" (CASE-REPLACE "ii!1 = 0") (("1" (REWRITE "sigma_first_ge") (("1" (CASE-REPLACE "SS1 = FF(0) + FF(1)") (("1" (HIDE -1) (("1" (HIDE -6) (("1" (INST-CP -3 "1") (("1" (INST-CP -3 "2") (("1" (LEMMA "triangle") (("1" (INST?) (("1" (ASSERT) (("1" (EXPAND "sigma") (("1" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL)) NIL) ("2" (POSTPONE) NIL NIL) ("3" (POSTPONE) NIL NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL) ("3" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("1" (EXPAND "Intv") (("1" (PROPAX) NIL NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) (("2" (TYPEPRED "xis!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (TYPEPRED "xis!1") (("3" (ASSERT) (("3" (FLATTEN) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL) ("3" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL) (|new| "" 3278264391 ("" (SKOSIMP*) (("" (LEMMA "integral_def") (("" (INST?) (("" (ASSERT) (("" (FLATTEN) (("" (HIDE -1) (("" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (HIDE 2) (("2" (EXPAND "integral?") (("2" (SKOSIMP*) (("2" (CASE "cc!1 = 0") (("1" (INST + "1") (("1" (SKOSIMP*) (("1" (TYPEPRED "R!1") (("1" (EXPAND "Riemann_sum?") (("1" (SKOSIMP*) (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (CASE-REPLACE "Rie_sum(a!1, b!1, P!1, xis!1, f!1) = 0") (("1" (ASSERT) (("1" (EXPAND "abs") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "Rie_sum") (("2" (ASSERT) (("2" (CASE-REPLACE "(LAMBDA (n: below(length(P!1) - 1)):
             P!1`seq(1 + n) * f!1(xis!1`seq(n)) -
              P!1`seq(n) * f!1(xis!1`seq(n))) 
 = (LAMBDA (n: below(length(P!1) - 1)): 0)") (("1" (LEMMA "sigma_const[below(length(P!1) - 1)]") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("1" (INST?) (("1" (ASSERT) NIL NIL) ("2" (HIDE 2) (("2" (TYPEPRED "xis!1") (("2" (ASSERT) (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (TYPEPRED "xis!1") (("2" (EXPAND "xis?") (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) (("3" (TYPEPRED "xis!1") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST + "epsi!1/(2*abs(cc!1))") (("1" (SKOSIMP*) (("1" (LEMMA "part_in") (("1" (INST -1 "a!1" "b!1" "z!1" "P!1") (("1" (ASSERT) (("1" (SKOSIMP*) (("1" (TYPEPRED "R!1") (("1" (EXPAND "Riemann_sum?") (("1" (SKOSIMP*) (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (EXPAND "Rie_sum") (("1" (ASSERT) (("1" (NAME "SS1" "sigma[below(length(P!1) - 1)]
               (0, length(P!1) - 2,
                LAMBDA (n: below(length(P!1) - 1)):
                  P!1`seq(1 + n) * f!1(xis!1`seq(n)) -
                   P!1`seq(n) * f!1(xis!1`seq(n)))") (("1" (REPLACE -1) (("1" (NAME "W" "width(a!1, b!1, P!1)") (("1" (REPLACE -1) (("1" (CASE "abs(SS1) <= 2* W * abs(cc!1) ") (("1" (HIDE -2) (("1" (MULT-BY -5 "(2 * abs(cc!1))") (("1" (ASSERT) (("1" (CASE-REPLACE "abs(-1 * SS1) = abs(SS1)") (("1" (HIDE -1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "abs") (("2" (LIFT-IF) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 2)) (("2" (EXPAND "abs") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (1 2)) (("3" (EXPAND "abs") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (NAME "Intv" "(LAMBDA (nn: below[length(P!1)-1]): seq(P!1)(nn+1) - seq(P!1)(nn))") (("2" (CASE-REPLACE "(LAMBDA (n: below(length(P!1) - 1)):
             P!1`seq(1 + n) * f!1(xis!1`seq(n)) -
              P!1`seq(n) * f!1(xis!1`seq(n))) =
	                 (LAMBDA (n: below(length(P!1) - 1)):
             Intv(n)* f!1(xis!1`seq(n)))") (("1" (NAME "FF" "(LAMBDA (n: below(length(P!1) - 1)): Intv(n) * f!1(xis!1`seq(n)))") (("1" (CASE-REPLACE "length(P!1) = 1") (("1" (HIDE -3) (("1" (EXPAND "sigma" -5) (("1" (REPLACE -5 * RL) (("1" (EXPAND "abs" 1 1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE-REPLACE "length(P!1) = 2") (("1" (HIDE -3) (("1" (EXPAND "sigma") (("1" (ASSERT) (("1" (HIDE 4) (("1" (REPLACE -5 * RL) (("1" (REWRITE "abs_mult") (("1" (CASE "abs(Intv(0)) <= W") (("1" (CASE "abs(f!1(xis!1(0))) <= abs(cc!1)") (("1" (ASSERT) (("1" (MULT-INEQ -1 -2 (+ +)) (("1" (ASSERT) NIL NIL) ("2" (REWRITE "abs_abs") (("2" (REWRITE "abs_abs") (("2" (REWRITE "abs_abs") (("2" (ASSERT) (("2" (EXPAND "abs" 1 2) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2 3) (("2" (ASSERT) (("2" (INST - "xis!1(0)") (("1" (ASSERT) (("1" (HIDE-ALL-BUT (-13 -14 1 2)) (("1" (EXPAND "abs") (("1" (LIFT-IF) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (HIDE-ALL-BUT (-1 -3 -4 1)) (("2" (TYPEPRED "xis!1") (("2" (EXPAND "xis?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (TYPEPRED "xis!1") (("3" (EXPAND "xis?") (("3" (FLATTEN) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -3 -4 1)) (("2" (REPLACE -2 * RL) (("2" (ASSERT) (("2" (EXPAND "abs") (("2" (LEMMA "width_lem") (("2" (EXPAND "finseq_appl") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "xis!1") (("2" (EXPAND "xis?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (REPLACE -1) (("2" (HIDE 5) (("2" (CASE-REPLACE "(FORALL (nn: upto(length(P!1) - 1)): abs(FF(nn)) <= W*abs(cc!1))") (("1" (HIDE -8 -9 -10 -11 -12 -13) (("1" (CASE "(FORALL (ii: upto(length(P!1)-2)): abs(Intv(ii)) <= W)") (("1" (CASE-REPLACE "ii!1 = 0") (("1" (REWRITE "sigma_first_ge") (("1" (CASE-REPLACE "SS1 = FF(1) + FF(2)") (("1" (HIDE -1) (("1" (HIDE -6) (("1" (INST-CP -3 "1") (("1" (INST-CP -3 "2") (("1" (LEMMA "triangle") (("1" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL) ("3" (POSTPONE) NIL NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL)) NIL) ("2" (POSTPONE) NIL NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL) ("3" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("1" (EXPAND "Intv") (("1" (PROPAX) NIL NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) (("2" (TYPEPRED "xis!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (TYPEPRED "xis!1") (("3" (ASSERT) (("3" (FLATTEN) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL) ("3" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) SHOSTAK) (|integral_jmp-2| |nil| 3262527342 ("" (SKOSIMP*) (("" (LEMMA "integral_def") (("" (INST?) (("" (ASSERT) (("" (FLATTEN) (("" (HIDE -1) (("" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (EXPAND "is_integral") (("2" (SKOSIMP*) (("2" (CASE "cc!1 = 0") (("1" (INST + "1") (("1" (SKOSIMP*) (("1" (CASE-REPLACE "Riemann_sum(a!1, b!1, P!1, f!1) = 0") (("1" (HIDE -1 2) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE 2 3) (("2" (EXPAND "Riemann_sum") (("2" (CASE-REPLACE "(LAMBDA (n: upto(length(P!1) - 1)):
                                                                                                                                                                                             IF n = 0
                                                                                                                                                                                               THEN 0
                                                                                                                                                                                             ELSE seq(P!1)(n) * f!1(x_in(seq(P!1)(n - 1), seq(P!1)(n))) -
                                                                                                                                                                                                   seq(P!1)(n - 1) *
                                                                                                                                                                                                    f!1(x_in(seq(P!1)(n - 1), seq(P!1)(n)))
                                                                                                                                                                                             ENDIF) = (LAMBDA (n: upto(length(P!1) - 1)): 0)") (("1" (LEMMA "sigma_const[upto(length(P!1) - 1)]") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("1" (LIFT-IF) (("1" (GROUND) (("1" (CASE-REPLACE "f!1(x_in(seq(P!1)(x!1 - 1), seq(P!1)(x!1))) = 0") (("1" (ASSERT) NIL NIL) ("2" (HIDE 3) (("2" (INST -7 "x_in(seq(P!1)(x!1 - 1), seq(P!1)(x!1))") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (TYPEPRED "P!1") (("2" (INST?) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP*) (("3" (TYPEPRED "P!1") (("3" (INST?) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("4" (SKOSIMP*) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST + "epsi!1/(2*abs(cc!1))") (("1" (SKOSIMP*) (("1" (LEMMA "part_in") (("1" (INST -1 "a!1" "b!1" "z!1" "P!1") (("1" (ASSERT) (("1" (SKOSIMP*) (("1" (EXPAND "Riemann_sum") (("1" (NAME "SS1" "sigma(1, length(P!1) - 1,
                                                                                                                                                                                                                                                                                                                                                                                               LAMBDA (n: upto(length(P!1) - 1)):
                                                                                                                                                                                                                                                                                                                                                                                                 IF n = 0
                                                                                                                                                                                                                                                                                                                                                                                                   THEN 0
                                                                                                                                                                                                                                                                                                                                                                                                 ELSE seq(P!1)(n) * f!1(x_in(seq(P!1)(n - 1), seq(P!1)(n))) -
                                                                                                                                                                                                                                                                                                                                                                                                       seq(P!1)(n - 1) *
                                                                                                                                                                                                                                                                                                                                                                                                        f!1(x_in(seq(P!1)(n - 1), seq(P!1)(n)))
                                                                                                                                                                                                                                                                                                                                                                                                 ENDIF)") (("1" (REPLACE -1) (("1" (HIDE 3) (("1" (NAME "W" "width(a!1, b!1, P!1)") (("1" (REPLACE -1) (("1" (CASE "abs(SS1) <= 2* W * abs(cc!1) ") (("1" (HIDE -2) (("1" (MULT-BY -5 "(2 * abs(cc!1))") (("1" (ASSERT) (("1" (CASE-REPLACE "abs(-1 * SS1) = abs(SS1)") (("1" (HIDE -1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "abs") (("2" (LIFT-IF) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 2)) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE-ALL-BUT (1 2)) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (NAME "Intv" "(LAMBDA (nn: upto[length(P!1)-2]): seq(P!1)(nn+1) - seq(P!1)(nn))") (("2" (CASE-REPLACE "(LAMBDA (n: upto(length(P!1) - 1)):
                                                   IF n = 0
                                                     THEN 0
                                                   ELSE seq(P!1)(n) * f!1(x_in(seq(P!1)(n - 1), seq(P!1)(n))) -
                                                         seq(P!1)(n - 1) *
                                                          f!1(x_in(seq(P!1)(n - 1), seq(P!1)(n)))
                                                   ENDIF) =
                                                   (LAMBDA (n: upto(length(P!1) - 1)):
                                                     IF n = 0
                                                       THEN 0
                                                     ELSE Intv(n-1) * f!1(x_in(seq(P!1)(n - 1), seq(P!1)(n)))
                                                     ENDIF)") (("1" (HIDE -1) (("1" (NAME "FF" "(LAMBDA (n: upto(length(P!1) - 1)):
                                                                                                                                       IF n = 0
                                                                                                                                         THEN 0
                                                                                                                                       ELSE Intv(n - 1) * f!1(x_in(seq(P!1)(n - 1), seq(P!1)(n)))
                                                                                                                                       ENDIF)") (("1" (CASE-REPLACE "length(P!1) = 1") (("1" (EXPAND "sigma" -5) (("1" (REPLACE -5 * RL) (("1" (EXPAND "abs" 1 1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (CASE-REPLACE "length(P!1) = 2") (("1" (EXPAND "sigma") (("1" (ASSERT) (("1" (HIDE 4) (("1" (REPLACE -5 * RL) (("1" (REWRITE "abs_mult") (("1" (CASE "abs(Intv(0)) <= W") (("1" (CASE "abs(f!1(x_in(seq(P!1)(0), seq(P!1)(1)))) <= abs(cc!1)") (("1" (MULT-INEQ -1 -2 (+ +)) (("1" (ASSERT) NIL NIL) ("2" (REWRITE "abs_abs") (("2" (REWRITE "abs_abs") (("2" (REWRITE "abs_abs") (("2" (ASSERT) (("2" (EXPAND "abs" 1 2) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2 3) (("2" (INST -14 "x_in(seq(P!1)(0), seq(P!1)(1))") (("2" (ASSERT) (("2" (HIDE-ALL-BUT (-13 -14 1 2)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -3 -4 1)) (("2" (REPLACE -2 * RL) (("2" (ASSERT) (("2" (EXPAND "abs") (("2" (LEMMA "width_lem") (("2" (EXPAND "finseq_appl") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -1) (("2" (HIDE 5) (("2" (CASE-REPLACE "(FORALL (nn: upto(length(P!1) - 1)): abs(FF(nn)) <= W*abs(cc!1))") (("1" (HIDE -8 -9 -10 -11 -12 -13) (("1" (CASE "(FORALL (ii: upto(length(P!1)-2)): abs(Intv(ii)) <= W)") (("1" (CASE-REPLACE "ii!1 = 0") (("1" (REWRITE "sigma_first_ge") (("1" (CASE-REPLACE "SS1 = FF(1) + FF(2)") (("1" (HIDE -1) (("1" (HIDE -6) (("1" (INST-CP -3 "1") (("1" (INST-CP -3 "2") (("1" (LEMMA "triangle") (("1" (INST?) (("1" (ASSERT) NIL NIL) ("2" (EXPAND "sigma") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "sigma") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 4) (("2" (REWRITE "sigma_first_ge") (("1" (CASE-REPLACE "sigma(3, length(P!1) - 1, FF) = 0") (("1" (ASSERT) NIL NIL) ("2" (LEMMA "sigma_restrict[upto(length(P!1) - 1)]") (("2" (INST?) (("1" (INST -1 "length(P!1) - 1" "3") (("1" (ASSERT) (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (CASE-REPLACE "restrict(FF, 3, length(P!1) - 1) = (LAMBDA (n: upto(length(P!1) - 1)): 0)") (("1" (HIDE -1) (("1" (LEMMA "sigma_const[upto(length(P!1) - 1)]") (("1" (INST?) (("1" (ASSERT) NIL NIL) ("2" (EXPAND "sigma") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "restrict") (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("2" (LIFT-IF) (("2" (GROUND) (("2" (HIDE -5 -6 -7) (("2" (HIDE 3 4) (("2" (REPLACE -4 * RL) (("2" (ASSERT) (("2" (REVEAL -13) (("2" (INST?) (("1" (ASSERT) (("1" (LEMMA "parts_order") (("1" (INST -1 "a!1" "b!1" "P!1" "1" "x!1-1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "P!1") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "sigma") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "sigma") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (EXPAND "sigma") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "sigma" -7) (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "sigma") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (HIDE -5) (("2" (LEMMA "sigma_split_ge[(length(P!1) - 1)]") (("2" (INST?) (("2" (INST -1 "ii!1") (("2" (ASSERT) (("2" (REPLACE -1) (("2" (HIDE -1) (("2" (REWRITE "sigma_last_ge") (("2" (CASE-REPLACE "sigma(1, ii!1 - 1, FF) = 0") (("1" (ASSERT) (("1" (HIDE -1) (("1" (CASE "z!1 = seq(P!1)(1+ii!1)") (("1" (CASE "FF(1 + ii!1) + FF(ii!1) = SS1") (("1" (HIDE -7) (("1" (REPLACE -1 * RL) (("1" (HIDE -1) (("1" (LEMMA "triangle") (("1" (INST?) (("1" (INST-CP -4 "1+ii!1") (("1" (INST -4 "ii!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "ii!1 = length(P!1) -2") (("1" (EXPAND "sigma") (("1" (ASSERT) NIL NIL)) NIL) ("2" (REWRITE "sigma_first_ge") (("2" (ASSERT) (("2" (REWRITE "sigma_first_ge") (("1" (ASSERT) (("1" (CASE-REPLACE "sigma(3 + ii!1, length(P!1) - 1, FF) = 0") (("1" (HIDE -1) (("1" (HIDE 2) (("1" (CASE "FF(ii!1) = 0") (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (ASSERT) (("1" (REPLACE -6 * RL) (("1" (HIDE -6) (("1" (LEMMA "triangle") (("1" (INST?) (("1" (INST-CP -4 "1+ii!1") (("1" (INST-CP -4 "2+ii!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -2 -3 -5 -6 6) (("2" (REPLACE -2 * RL) (("2" (ASSERT) (("2" (HIDE -2) (("2" (REVEAL -17) (("2" (INST?) (("1" (ASSERT) (("1" (HIDE 2) (("1" (TYPEPRED "P!1") (("1" (INST -4 "ii!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "P!1") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "sigma_restrict_to") (("1" (CASE-REPLACE "restrict(FF, 3 + ii!1, length(P!1) - 1) = (LAMBDA (n: upto(length(P!1) - 1)): 0)") (("1" (HIDE -1) (("1" (REWRITE "sigma_const") (("1" (EXPAND "sigma") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "restrict") (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("2" (HIDE -2 -3 -5 -6 3 7) (("2" (REPLACE -2 * RL) (("2" (ASSERT) (("2" (HIDE -2) (("2" (LIFT-IF) (("2" (GROUND) (("2" (REVEAL -17) (("2" (INST?) (("1" (ASSERT) (("1" (LEMMA "parts_order") (("1" (INST -1 "a!1" "b!1" "P!1" "ii!1+1" "x!1-1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "P!1") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "sigma") (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (EXPAND "sigma") (("2" (PROPAX) NIL NIL)) NIL)) NIL) ("3" (EXPAND "sigma") (("3" (ASSERT) (("3" (HIDE 3) (("3" (CASE-REPLACE "FF(ii!1) = 0") (("1" (ASSERT) (("1" (REPLACE -7 * RL) (("1" (HIDE -7) (("1" (LEMMA "triangle") (("1" (INST?) (("1" (INST-CP -5 "1+ii!1") (("1" (INST-CP -5 "2+ii!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -2 -3 -5 -6 7) (("2" (REPLACE -2 * RL) (("2" (ASSERT) (("2" (REVEAL -15) (("2" (INST?) (("1" (ASSERT) (("1" (HIDE -2 2) (("1" (LEMMA "parts_order") (("1" (INST -1 "a!1" "b!1" "P!1" "ii!1" "ii!1+1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "P!1") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "sigma") (("2" (HIDE 3) (("2" (CASE-REPLACE "FF(ii!1) = 0") (("1" (ASSERT) (("1" (REPLACE -7 * RL) (("1" (HIDE -7) (("1" (LEMMA "triangle") (("1" (INST?) (("1" (INST-CP -5 "1+ii!1") (("1" (INST-CP -5 "2+ii!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -6 7) (("2" (HIDE -2 -3 -5) (("2" (REPLACE -2 * RL) (("2" (ASSERT) (("2" (HIDE -2) (("2" (REVEAL -16) (("2" (INST?) (("1" (ASSERT) (("1" (LEMMA "parts_order") (("1" (INST -1 "a!1" "b!1" "P!1" "ii!1" "ii!1+1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "P!1") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "FF(1 + ii!1) + FF(ii!1) = SS1") (("1" (HIDE -6) (("1" (REPLACE -1 * RL) (("1" (HIDE -1) (("1" (INST-CP -2 "ii!1") (("1" (INST-CP -2 "ii!1+1") (("1" (LEMMA "triangle") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "sigma_first_ge") (("1" (CASE-REPLACE "sigma(2 + ii!1, length(P!1) - 1, FF) = 0") (("1" (HIDE -1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE -1 -2 -4 -5 2 7) (("2" (REWRITE "sigma_restrict_to") (("1" (CASE "restrict(FF, 2 + ii!1, length(P!1) - 1) = (LAMBDA (n: upto(length(P!1) - 1)): 0)") (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (REWRITE "sigma_const") NIL NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "restrict") (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("2" (REPLACE -1 * RL) (("2" (HIDE -1) (("2" (ASSERT) (("2" (GROUND) (("2" (LIFT-IF) (("2" (GROUND) (("2" (REVEAL -17) (("2" (INST?) (("1" (ASSERT) (("1" (LEMMA "parts_order") (("1" (INST -1 "a!1" "b!1" "P!1" "ii!1+1" "x!1-1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "P!1") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "sigma") (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (EXPAND "sigma") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "sigma") (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (EXPAND "sigma") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "sigma_restrict_to") (("2" (CASE-REPLACE "restrict(FF, 1, ii!1 - 1) = (LAMBDA (n: upto(length(P!1) - 1)): 0)") (("1" (HIDE -1) (("1" (REWRITE "sigma_const") NIL NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "restrict") (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("2" (LIFT-IF) (("2" (GROUND) (("2" (HIDE -4 -5) (("2" (REPLACE -3 * RL) (("2" (HIDE -3) (("2" (HIDE -1 -2) (("2" (ASSERT) (("2" (REVEAL -16) (("2" (INST?) (("1" (ASSERT) (("1" (EXPAND "abs") (("1" (ASSERT) (("1" (LEMMA "parts_order") (("1" (INST -1 "a!1" "b!1" "P!1" "x!1" "ii!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "P!1") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (REPLACE -3 * RL) (("2" (ASSERT) (("2" (HIDE 4) (("2" (REPLACE -4 * RL) (("2" (HIDE-ALL-BUT 1) (("2" (LEMMA "width_lem") (("2" (EXPAND "finseq_appl") (("2" (INST?) (("2" (TYPEPRED "P!1") (("2" (INST -4 "ii!2") (("2" (EXPAND "abs") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (REPLACE -1 * RL) (("2" (ASSERT) (("2" (GROUND) (("2" (LIFT-IF) (("2" (GROUND) (("1" (EXPAND "abs" 1 1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE -1) (("2" (INST - "x_in(seq(P!1)(nn!1 - 1), seq(P!1)(nn!1))") (("1" (REWRITE "abs_mult") (("1" (CASE "abs(Intv(nn!1 - 1)) <= W") (("1" (CASE "abs(f!1(x_in(seq(P!1)(nn!1 - 1), seq(P!1)(nn!1)))) <= abs(cc!1)") (("1" (MULT-INEQ -1 -2) (("1" (ASSERT) NIL NIL) ("2" (REWRITE "abs_abs") (("2" (REWRITE "abs_abs") (("2" (REWRITE "abs_abs") (("2" (ASSERT) (("2" (HIDE 2 4 7 -1 -5) (("2" (EXPAND "abs" 1 2) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -2 -4 3) (("2" (ASSERT) (("2" (GROUND) (("2" (EXPAND "abs" 1 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (TYPEPRED "P!1") (("3" (INST?) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3 6 -3 -6 -7 -8 -9 -10 -11) (("2" (REPLACE -1 * RL) (("2" (ASSERT) (("2" (HIDE -1) (("2" (LEMMA "width_lem") (("2" (EXPAND "finseq_appl") (("2" (INST?) (("2" (EXPAND "abs") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "P!1") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "P!1") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2 4) (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("1" (REPLACE -1 * RL) (("1" (LIFT-IF) (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) (("3" (TYPEPRED "P!1") (("3" (INST?) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKOSIMP*) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL) ("4" (SKOSIMP*) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) (("3" (TYPEPRED "P!1") (("3" (INST?) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKOSIMP*) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (PROP) (("1" (CROSS-MULT 1) (("1" (GROUND) (("1" (HIDE-ALL-BUT (1 3)) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 3)) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (CROSS-MULT 1) (("1" (GROUND) (("1" (HIDE-ALL-BUT (1 3)) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 3)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (1 2)) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) NIL) (|integral_jmp-1| |nil| 3262524627 ("" (SKOSIMP*) (("" (LEMMA "integral_def") (("" (INST?) (("" (ASSERT) (("" (FLATTEN) (("" (HIDE -1) (("" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (EXPAND "is_integral") (("2" (SKOSIMP*) (("2" (CASE "c!1 = 0") (("1" (INST + "1") (("1" (SKOSIMP*) (("1" (CASE-REPLACE "Riemann_sum(a!1, b!1, P!1, f!1) = 0") (("1" (HIDE -1 2) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE 2 3) (("2" (EXPAND "Riemann_sum") (("2" (CASE-REPLACE "(LAMBDA (n: upto(length(P!1) - 1)):
                                                                                                                                                                                     IF n = 0
                                                                                                                                                                                       THEN 0
                                                                                                                                                                                     ELSE seq(P!1)(n) * f!1(x_in(seq(P!1)(n - 1), seq(P!1)(n))) -
                                                                                                                                                                                           seq(P!1)(n - 1) *
                                                                                                                                                                                            f!1(x_in(seq(P!1)(n - 1), seq(P!1)(n)))
                                                                                                                                                                                     ENDIF) = (LAMBDA (n: upto(length(P!1) - 1)): 0)") (("1" (LEMMA "sigma_const[upto(length(P!1) - 1)]") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("1" (LIFT-IF) (("1" (GROUND) (("1" (CASE-REPLACE "f!1(x_in(seq(P!1)(x!1 - 1), seq(P!1)(x!1))) = 0") (("1" (ASSERT) NIL NIL) ("2" (HIDE 3) (("2" (INST -7 "x_in(seq(P!1)(x!1 - 1), seq(P!1)(x!1))") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (TYPEPRED "P!1") (("2" (INST?) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP*) (("3" (TYPEPRED "P!1") (("3" (INST?) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("4" (SKOSIMP*) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST + "epsi!1/(2*abs(c!1))") (("1" (SKOSIMP*) (("1" (LEMMA "part_in") (("1" (INST -1 "a!1" "b!1" "z!1" "P!1") (("1" (ASSERT) (("1" (SKOSIMP*) (("1" (EXPAND "Riemann_sum") (("1" (NAME "SS1" "sigma(1, length(P!1) - 1,
                                                                                                                                                                                                                                                                                                                                                                                  LAMBDA (n: upto(length(P!1) - 1)):
                                                                                                                                                                                                                                                                                                                                                                                    IF n = 0
                                                                                                                                                                                                                                                                                                                                                                                      THEN 0
                                                                                                                                                                                                                                                                                                                                                                                    ELSE seq(P!1)(n) * f!1(x_in(seq(P!1)(n - 1), seq(P!1)(n))) -
                                                                                                                                                                                                                                                                                                                                                                                          seq(P!1)(n - 1) *
                                                                                                                                                                                                                                                                                                                                                                                           f!1(x_in(seq(P!1)(n - 1), seq(P!1)(n)))
                                                                                                                                                                                                                                                                                                                                                                                    ENDIF)") (("1" (REPLACE -1) (("1" (HIDE 3) (("1" (NAME "W" "width(a!1, b!1, P!1)") (("1" (REPLACE -1) (("1" (CASE "abs(SS1) <= 2* W * abs(c!1) ") (("1" (HIDE -2) (("1" (MULT-BY -5 "(2 * abs(c!1))") (("1" (ASSERT) (("1" (CASE-REPLACE "abs(-1 * SS1) = abs(SS1)") (("1" (HIDE -1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "abs") (("2" (LIFT-IF) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 2)) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE-ALL-BUT (1 2)) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (NAME "Intv" "(LAMBDA (nn: upto[length(P!1)-2]): seq(P!1)(nn+1) - seq(P!1)(nn))") (("2" (CASE-REPLACE "(LAMBDA (n: upto(length(P!1) - 1)):
                                       IF n = 0
                                         THEN 0
                                       ELSE seq(P!1)(n) * f!1(x_in(seq(P!1)(n - 1), seq(P!1)(n))) -
                                             seq(P!1)(n - 1) *
                                              f!1(x_in(seq(P!1)(n - 1), seq(P!1)(n)))
                                       ENDIF) =
                                       (LAMBDA (n: upto(length(P!1) - 1)):
                                         IF n = 0
                                           THEN 0
                                         ELSE Intv(n-1) * f!1(x_in(seq(P!1)(n - 1), seq(P!1)(n)))
                                         ENDIF)") (("1" (HIDE -1) (("1" (NAME "FF" "(LAMBDA (n: upto(length(P!1) - 1)):
                                                                                                                    IF n = 0
                                                                                                                      THEN 0
                                                                                                                    ELSE Intv(n - 1) * f!1(x_in(seq(P!1)(n - 1), seq(P!1)(n)))
                                                                                                                    ENDIF)") (("1" (CASE-REPLACE "length(P!1) = 1") (("1" (EXPAND "sigma" -5) (("1" (REPLACE -5 * RL) (("1" (EXPAND "abs" 1 1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (CASE-REPLACE "length(P!1) = 2") (("1" (EXPAND "sigma") (("1" (ASSERT) (("1" (HIDE 4) (("1" (REPLACE -5 * RL) (("1" (REWRITE "abs_mult") (("1" (CASE "abs(Intv(0)) <= W") (("1" (CASE "abs(f!1(x_in(seq(P!1)(0), seq(P!1)(1)))) <= abs(c!1)") (("1" (MULT-INEQ -1 -2 (+ +)) (("1" (ASSERT) NIL NIL) ("2" (REWRITE "abs_abs") (("2" (REWRITE "abs_abs") (("2" (REWRITE "abs_abs") (("2" (ASSERT) (("2" (EXPAND "abs" 1 2) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2 3) (("2" (INST -14 "x_in(seq(P!1)(0), seq(P!1)(1))") (("2" (ASSERT) (("2" (HIDE-ALL-BUT (-13 -14 1 2)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -3 -4 1)) (("2" (REPLACE -2 * RL) (("2" (ASSERT) (("2" (EXPAND "abs") (("2" (LEMMA "width_lem") (("2" (EXPAND "finseq_appl") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -1) (("2" (HIDE 5) (("2" (CASE-REPLACE "(FORALL (nn: upto(length(P!1) - 1)): abs(FF(nn)) <= W*abs(c!1))") (("1" (HIDE -8 -9 -10 -11 -12 -13) (("1" (CASE "(FORALL (ii: upto(length(P!1)-2)): abs(Intv(ii)) <= W)") (("1" (CASE-REPLACE "ii!1 = 0") (("1" (REWRITE "sigma_first_ge") (("1" (CASE-REPLACE "SS1 = FF(1) + FF(2)") (("1" (HIDE -1) (("1" (HIDE -6) (("1" (INST-CP -3 "1") (("1" (INST-CP -3 "2") (("1" (LEMMA "triangle") (("1" (INST?) (("1" (ASSERT) NIL NIL) ("2" (EXPAND "sigma") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "sigma") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 4) (("2" (REWRITE "sigma_first_ge") (("1" (CASE-REPLACE "sigma(3, length(P!1) - 1, FF) = 0") (("1" (ASSERT) NIL NIL) ("2" (LEMMA "sigma_restrict[upto(length(P!1) - 1)]") (("2" (INST?) (("1" (INST -1 "length(P!1) - 1" "3") (("1" (ASSERT) (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (CASE-REPLACE "restrict(FF, 3, length(P!1) - 1) = (LAMBDA (n: upto(length(P!1) - 1)): 0)") (("1" (HIDE -1) (("1" (LEMMA "sigma_const[upto(length(P!1) - 1)]") (("1" (INST?) (("1" (ASSERT) NIL NIL) ("2" (EXPAND "sigma") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "restrict") (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("2" (LIFT-IF) (("2" (GROUND) (("2" (HIDE -5 -6 -7) (("2" (HIDE 3 4) (("2" (REPLACE -4 * RL) (("2" (ASSERT) (("2" (REVEAL -13) (("2" (INST?) (("1" (ASSERT) (("1" (LEMMA "parts_order") (("1" (INST -1 "a!1" "b!1" "P!1" "1" "x!1-1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "P!1") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "sigma") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "sigma") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (EXPAND "sigma") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "sigma" -7) (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "sigma") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (HIDE -5) (("2" (LEMMA "sigma_split_ge[(length(P!1) - 1)]") (("2" (INST?) (("2" (INST -1 "ii!1") (("2" (ASSERT) (("2" (REPLACE -1) (("2" (HIDE -1) (("2" (REWRITE "sigma_last_ge") (("2" (CASE-REPLACE "sigma(1, ii!1 - 1, FF) = 0") (("1" (ASSERT) (("1" (HIDE -1) (("1" (CASE "z!1 = seq(P!1)(1+ii!1)") (("1" (CASE "FF(1 + ii!1) + FF(ii!1) = SS1") (("1" (HIDE -7) (("1" (REPLACE -1 * RL) (("1" (HIDE -1) (("1" (LEMMA "triangle") (("1" (INST?) (("1" (INST-CP -4 "1+ii!1") (("1" (INST -4 "ii!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "ii!1 = length(P!1) -2") (("1" (EXPAND "sigma") (("1" (ASSERT) NIL NIL)) NIL) ("2" (REWRITE "sigma_first_ge") (("2" (ASSERT) (("2" (REWRITE "sigma_first_ge") (("1" (ASSERT) (("1" (CASE-REPLACE "sigma(3 + ii!1, length(P!1) - 1, FF) = 0") (("1" (HIDE -1) (("1" (HIDE 2) (("1" (CASE "FF(ii!1) = 0") (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (ASSERT) (("1" (REPLACE -6 * RL) (("1" (HIDE -6) (("1" (LEMMA "triangle") (("1" (INST?) (("1" (INST-CP -4 "1+ii!1") (("1" (INST-CP -4 "2+ii!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -2 -3 -5 -6 6) (("2" (REPLACE -2 * RL) (("2" (ASSERT) (("2" (HIDE -2) (("2" (REVEAL -17) (("2" (INST?) (("1" (ASSERT) (("1" (HIDE 2) (("1" (TYPEPRED "P!1") (("1" (INST -4 "ii!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "P!1") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "sigma_restrict_to") (("1" (CASE-REPLACE "restrict(FF, 3 + ii!1, length(P!1) - 1) = (LAMBDA (n: upto(length(P!1) - 1)): 0)") (("1" (HIDE -1) (("1" (REWRITE "sigma_const") (("1" (EXPAND "sigma") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "restrict") (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("2" (HIDE -2 -3 -5 -6 3 7) (("2" (REPLACE -2 * RL) (("2" (ASSERT) (("2" (HIDE -2) (("2" (LIFT-IF) (("2" (GROUND) (("2" (REVEAL -17) (("2" (INST?) (("1" (ASSERT) (("1" (LEMMA "parts_order") (("1" (INST -1 "a!1" "b!1" "P!1" "ii!1+1" "x!1-1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "P!1") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "sigma") (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (EXPAND "sigma") (("2" (PROPAX) NIL NIL)) NIL)) NIL) ("3" (EXPAND "sigma") (("3" (ASSERT) (("3" (HIDE 3) (("3" (CASE-REPLACE "FF(ii!1) = 0") (("1" (ASSERT) (("1" (REPLACE -7 * RL) (("1" (HIDE -7) (("1" (LEMMA "triangle") (("1" (INST?) (("1" (INST-CP -5 "1+ii!1") (("1" (INST-CP -5 "2+ii!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -2 -3 -5 -6 7) (("2" (REPLACE -2 * RL) (("2" (ASSERT) (("2" (REVEAL -15) (("2" (INST?) (("1" (ASSERT) (("1" (HIDE -2 2) (("1" (LEMMA "parts_order") (("1" (INST -1 "a!1" "b!1" "P!1" "ii!1" "ii!1+1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "P!1") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "sigma") (("2" (HIDE 3) (("2" (CASE-REPLACE "FF(ii!1) = 0") (("1" (ASSERT) (("1" (REPLACE -7 * RL) (("1" (HIDE -7) (("1" (LEMMA "triangle") (("1" (INST?) (("1" (INST-CP -5 "1+ii!1") (("1" (INST-CP -5 "2+ii!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -6 7) (("2" (HIDE -2 -3 -5) (("2" (REPLACE -2 * RL) (("2" (ASSERT) (("2" (HIDE -2) (("2" (REVEAL -16) (("2" (INST?) (("1" (ASSERT) (("1" (LEMMA "parts_order") (("1" (INST -1 "a!1" "b!1" "P!1" "ii!1" "ii!1+1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "P!1") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "FF(1 + ii!1) + FF(ii!1) = SS1") (("1" (HIDE -6) (("1" (REPLACE -1 * RL) (("1" (HIDE -1) (("1" (INST-CP -2 "ii!1") (("1" (INST-CP -2 "ii!1+1") (("1" (LEMMA "triangle") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "sigma_first_ge") (("1" (CASE-REPLACE "sigma(2 + ii!1, length(P!1) - 1, FF) = 0") (("1" (HIDE -1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE -1 -2 -4 -5 2 7) (("2" (REWRITE "sigma_restrict_to") (("1" (CASE "restrict(FF, 2 + ii!1, length(P!1) - 1) = (LAMBDA (n: upto(length(P!1) - 1)): 0)") (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (REWRITE "sigma_const") NIL NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "restrict") (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("2" (REPLACE -1 * RL) (("2" (HIDE -1) (("2" (ASSERT) (("2" (GROUND) (("2" (LIFT-IF) (("2" (GROUND) (("2" (REVEAL -17) (("2" (INST?) (("1" (ASSERT) (("1" (LEMMA "parts_order") (("1" (INST -1 "a!1" "b!1" "P!1" "ii!1+1" "x!1-1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "P!1") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "sigma") (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (EXPAND "sigma") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "sigma") (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (EXPAND "sigma") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "sigma_restrict_to") (("2" (CASE-REPLACE "restrict(FF, 1, ii!1 - 1) = (LAMBDA (n: upto(length(P!1) - 1)): 0)") (("1" (HIDE -1) (("1" (REWRITE "sigma_const") NIL NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "restrict") (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("2" (LIFT-IF) (("2" (GROUND) (("2" (HIDE -4 -5) (("2" (REPLACE -3 * RL) (("2" (HIDE -3) (("2" (HIDE -1 -2) (("2" (ASSERT) (("2" (REVEAL -16) (("2" (INST?) (("1" (ASSERT) (("1" (EXPAND "abs") (("1" (ASSERT) (("1" (LEMMA "parts_order") (("1" (INST -1 "a!1" "b!1" "P!1" "x!1" "ii!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "P!1") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (REPLACE -3 * RL) (("2" (ASSERT) (("2" (HIDE 4) (("2" (REPLACE -4 * RL) (("2" (HIDE-ALL-BUT 1) (("2" (LEMMA "width_lem") (("2" (EXPAND "finseq_appl") (("2" (INST?) (("2" (TYPEPRED "P!1") (("2" (INST -4 "ii!2") (("2" (EXPAND "abs") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (REPLACE -1 * RL) (("2" (ASSERT) (("2" (GROUND) (("2" (LIFT-IF) (("2" (GROUND) (("1" (EXPAND "abs" 1 1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE -1) (("2" (INST - "x_in(seq(P!1)(nn!1 - 1), seq(P!1)(nn!1))") (("1" (REWRITE "abs_mult") (("1" (CASE "abs(Intv(nn!1 - 1)) <= W") (("1" (CASE "abs(f!1(x_in(seq(P!1)(nn!1 - 1), seq(P!1)(nn!1)))) <= abs(c!1)") (("1" (MULT-INEQ -1 -2) (("1" (ASSERT) NIL NIL) ("2" (REWRITE "abs_abs") (("2" (REWRITE "abs_abs") (("2" (REWRITE "abs_abs") (("2" (ASSERT) (("2" (HIDE 2 4 7 -1 -5) (("2" (EXPAND "abs" 1 2) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -2 -4 3) (("2" (ASSERT) (("2" (GROUND) (("2" (EXPAND "abs" 1 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (TYPEPRED "P!1") (("3" (INST?) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3 6 -3 -6 -7 -8 -9 -10 -11) (("2" (REPLACE -1 * RL) (("2" (ASSERT) (("2" (HIDE -1) (("2" (LEMMA "width_lem") (("2" (EXPAND "finseq_appl") (("2" (INST?) (("2" (EXPAND "abs") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "P!1") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "P!1") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2 4) (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("1" (REPLACE -1 * RL) (("1" (LIFT-IF) (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) (("3" (TYPEPRED "P!1") (("3" (INST?) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKOSIMP*) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL) ("4" (SKOSIMP*) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) (("3" (TYPEPRED "P!1") (("3" (INST?) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKOSIMP*) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (PROP) (("1" (CROSS-MULT 1) (("1" (GROUND) (("1" (HIDE-ALL-BUT (1 3)) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 3)) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (CROSS-MULT 1) (("1" (GROUND) (("1" (HIDE-ALL-BUT (1 3)) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 3)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (1 2)) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) NIL)) (|integral_chg_one_pt| 0 (|integral_chg_one_pt-3| |nil| 3306074384 ("" (SKOSIMP*) (("" (NAME "GG" "(LAMBDA x: IF x = y!1 THEN yv!1 - f!1(y!1)
                                                                               ELSE 0 ENDIF)") (("" (CASE-REPLACE "f!1 WITH [(y!1) := yv!1] = f!1 + GG") (("1" (LEMMA "integral_sum") (("1" (INST?) (("1" (INST - "GG") (("1" (LEMMA "integral_jmp") (("1" (INST - "a!1" "b!1" "yv!1- f!1(y!1)" "(LAMBDA x: IF x = y!1 THEN yv!1 - f!1(y!1) ELSE 0 ENDIF)" "y!1") (("1" (ASSERT) (("1" (SPLIT -1) (("1" (FLATTEN) (("1" (ASSERT) (("1" (CASE-REPLACE "(LAMBDA (x: T): GG(x) + f!1(x)) = f!1 + GG") (("1" (ASSERT) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("2" (EXPAND "+ ") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("2" (REPLACE -1 * RL) (("2" (HIDE -1) (("2" (LIFT-IF) (("2" (EXPAND "+") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|T_pred| CONST-DECL "[real -> boolean]" |integral_prep| NIL) (T FORMAL-SUBTYPE-DECL NIL |integral_prep| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|integral_sum| FORMULA-DECL NIL |integral_prep| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|integral_jmp| FORMULA-DECL NIL |integral_prep| NIL) (+ CONST-DECL "[T -> real]" |real_fun_ops| |reals|)) NIL) (|integral_chg_one_pt-2| |nil| 3306074328 ("" (SKOSIMP*) (("" (NAME "GG" "(LAMBDA x: IF x = y!1 THEN yv!1 - f!1(y!1)
                                                                        ELSE 0 ENDIF)") (("" (CASE-REPLACE "f!1 WITH [(y!1) := yv!1] = f!1 + GG") (("1" (LEMMA "integral_sum[T]") (("1" (INST?) (("1" (INST - "GG") (("1" (LEMMA "integral_jmp") (("1" (INST - "a!1" "b!1" "yv!1- f!1(y!1)" "(LAMBDA x: IF x = y!1 THEN yv!1 - f!1(y!1) ELSE 0 ENDIF)" "y!1") (("1" (ASSERT) (("1" (SPLIT -1) (("1" (FLATTEN) (("1" (ASSERT) (("1" (CASE-REPLACE "(LAMBDA (x: T): GG(x) + f!1(x)) = f!1 + GG") (("1" (ASSERT) (("1" (FLATTEN) (("1" (ASSERT) NIL))))) ("2" (HIDE 2) (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("2" (EXPAND "+ ") (("2" (PROPAX) NIL))))))))))))) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (GROUND) NIL))))))))))))))))))) ("2" (HIDE 2) (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("2" (REPLACE -1 * RL) (("2" (HIDE -1) (("2" (LIFT-IF) (("2" (EXPAND "+") (("2" (PROPAX) NIL)))))))))))))))))) NIL) NIL NIL) (|integral_chg_one_pt-1| |nil| 3281700160 ("" (SKOSIMP*) (("" (NAME "GG" "(LAMBDA x: IF x = y!1 THEN yv!1 - f!1(y!1)
                                                                 ELSE 0 ENDIF)") (("" (CASE-REPLACE "f!1 WITH [(y!1) := yv!1] = f!1 + GG") (("1" (LEMMA "integral_sum[T]") (("1" (INST?) (("1" (INST - "GG") (("1" (LEMMA "integral_jmp[T]") (("1" (INST - "a!1" "b!1" "yv!1- f!1(y!1)" "(LAMBDA x: IF x = y!1 THEN yv!1 - f!1(y!1) ELSE 0 ENDIF)" "y!1") (("1" (ASSERT) (("1" (SPLIT -1) (("1" (FLATTEN) (("1" (ASSERT) (("1" (CASE-REPLACE "(LAMBDA (x: T): GG(x) + f!1(x)) = f!1 + GG") (("1" (ASSERT) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("2" (EXPAND "+ ") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("2" (REPLACE -1 * RL) (("2" (HIDE -1) (("2" (LIFT-IF) (("2" (EXPAND "+") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL)) (|integral_restr_eq| 0 (|integral_restr_eq-1| |nil| 3281700217 ("" (SKOSIMP*) (("" (LEMMA "integral_chg_one_pt") (("" (INST - "a!1" "b!1" "f!1" "g!1(a!1)") (("" (ASSERT) (("" (INST?) (("" (ASSERT) (("" (FLATTEN) (("" (LEMMA "integral_chg_one_pt") (("" (INST - "a!1" "b!1" "f!1 WITH [(a!1) := g!1(a!1)]" "g!1(b!1)") (("" (ASSERT) (("" (INST - "b!1") (("" (ASSERT) (("" (FLATTEN) (("" (HIDE -3 -4) (("" (LEMMA "integral_restrict_eq[T]") (("" (INST - "a!1" "b!1" "f!1 WITH [(a!1) := g!1(a!1), (b!1) := g!1(b!1)]" "g!1") (("" (ASSERT) (("" (SPLIT -1) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (LIFT-IF) (("2" (GROUND) (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|integral_chg_one_pt| FORMULA-DECL NIL |integral_prep| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|integral_restrict_eq| FORMULA-DECL NIL |integral_def| NIL) (T FORMAL-SUBTYPE-DECL NIL |integral_prep| NIL) (|T_pred| CONST-DECL "[real -> boolean]" |integral_prep| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) NIL)) (|integral_bound| 0 (|integral_bound-1| |nil| 3253532115 ("" (SKOSIMP*) (("" (LEMMA "integral_const_fun") (("" (INST -1 "_" "a!1" "b!1") (("" (LEMMA "integral_diff") (("" (INST -1 "a!1" "b!1" "_" "_") (("" (LEMMA "integral_ge_0") (("" (PROP) (("1" (INST -1 "a!1" "b!1" "(LAMBDA (t:T): f!1(t) - m!1)") (("1" (ASSERT) (("1" (CASE "integrable?(a!1, b!1, (LAMBDA (t: T): f!1(t) - m!1))") (("1" (ASSERT) (("1" (INST -4 "m!1") (("1" (FLATTEN) (("1" (INST -3 "f!1" "const_fun(m!1)") (("1" (ASSERT) (("1" (EXPAND "const_fun") (("1" (REPLACE -5) (("1" (HIDE -5) (("1" (SPLIT -2) (("1" (ASSERT) NIL NIL) ("2" (HIDE -1 -2 -3 -5 2) (("2" (SKOSIMP*) (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -2 "f!1" "const_fun(m!1)") (("2" (ASSERT) (("2" (INST -3 "m!1") (("2" (EXPAND "const_fun") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -1 "a!1" "b!1" "(LAMBDA (t:T): M!1 - f!1(t))") (("2" (ASSERT) (("2" (CASE "integrable?(a!1, b!1, (LAMBDA (t: T): M!1 - f!1(t)))") (("1" (ASSERT) (("1" (INST -4 "M!1") (("1" (FLATTEN) (("1" (EXPAND "const_fun") (("1" (INST -3 "(LAMBDA (x: T): M!1)" "f!1") (("1" (ASSERT) (("1" (SPLIT -2) (("1" (REPLACE -5) (("1" (HIDE -5) (("1" (REPLACE -3) (("1" (HIDE -3) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 -3 -4 -6 2) (("2" (SKOSIMP*) (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -2 "(LAMBDA (x: T): M!1)" "f!1") (("2" (ASSERT) (("2" (HIDE -1 -4 -5 1 2) (("2" (INST -1 "M!1") (("2" (FLATTEN) (("2" (ASSERT) (("2" (EXPAND "const_fun") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|integral_const_fun| FORMULA-DECL NIL |integral_prep| NIL) (|integral_diff| FORMULA-DECL NIL |integral_prep| NIL) (|integral_ge_0| FORMULA-DECL NIL |integral_prep| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|integrable?| CONST-DECL "bool" |integral_def| NIL) (< CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|const_fun| CONST-DECL "[T -> real]" |real_fun_ops| |reals|) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|closed_interval| TYPE-EQ-DECL NIL |intervals_real| |reals|) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|const_fun_continuous| APPLICATION-JUDGEMENT "continuous_fun[T]" |integral_prep| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (T FORMAL-SUBTYPE-DECL NIL |integral_prep| NIL) (|T_pred| CONST-DECL "[real -> boolean]" |integral_prep| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) NIL)) (|integral_bound_abs| 0 (|integral_bound_abs-2| "" 3790090332 ("" (SKOSIMP*) (("" (LEMMA "integral_bound") (("" (INST -1 "M!1" "a!1" "b!1" "f!1" "-M!1") (("" (ASSERT) (("" (SPLIT -1) (("1" (EXPAND "abs") (("1" (LIFT-IF) (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|integral_bound| FORMULA-DECL NIL |integral_prep| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|closed_interval| TYPE-EQ-DECL NIL |intervals_real| |reals|) (<= CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (T FORMAL-SUBTYPE-DECL NIL |integral_prep| NIL) (|T_pred| CONST-DECL "[real -> boolean]" |integral_prep| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) SHOSTAK) (|integral_bound_abs-1| |nil| 3253532115 ("" (SKOSIMP*) (("" (LEMMA "integral_bound") (("" (INST -1 "M!1" "a!1" "b!1" "f!1" "-M!1") (("" (ASSERT) (("" (SPLIT -1) (("1" (EXPAND "abs") (("1" (LIFT-IF) (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (INST?) (("2" (ASSERT) (("2" (EXPAND "abs") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (NIL) NIL)) (|integral_le| 0 (|integral_le-1| |nil| 3297781017 ("" (SKOSIMP*) (("" (MOVE-TERMS 1 L 1) (("" (ASSERT) (("" (LEMMA "integral_diff") (("" (INST?) (("" (ASSERT) (("" (FLATTEN) (("" (ASSERT) (("" (REPLACE -2 * RL) (("" (HIDE -2) (("" (LEMMA "integral_ge_0") (("" (INST?) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|integral| CONST-DECL "{S: real | integral?(a, b, ff, S)}" |integral_def| NIL) (|integral?| CONST-DECL "bool" |integral_def| NIL) (|integrable?| CONST-DECL "bool" |integral_def| NIL) (< CONST-DECL "bool" |reals| NIL) (T FORMAL-SUBTYPE-DECL NIL |integral_prep| NIL) (|T_pred| CONST-DECL "[real -> boolean]" |integral_prep| NIL) (<= CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|integral_diff| FORMULA-DECL NIL |integral_prep| NIL) (|integral_ge_0| FORMULA-DECL NIL |integral_prep| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) SHOSTAK)) (|Lemma_1| 0 (|Lemma_1-2| |nil| 3282496507 ("" (SKOSIMP*) (("" (EXPAND "integrable?") (("" (SKOSIMP*) (("" (EXPAND "integral?") (("" (INST - "eps!1/2") (("" (SKOSIMP*) (("" (INST + "delta!1") (("" (SKOSIMP*) (("" (COPY -2) (("" (INST - "P1!1") (("" (INST - "P2!1") (("" (ASSERT) (("" (FLATTEN) (("" (ASSERT) (("" (NAME "R1" "Rie_sum(a!1, b!1, P1!1, xis1!1, f!1)") (("" (REPLACE -1) (("" (NAME "R2" "Rie_sum(a!1, b!1, P2!1, xis2!1, f!1)") (("" (REPLACE -1) (("" (CASE-REPLACE "R1 - R2 = (R1 - S!1) - (R2 - S!1)") (("1" (LEMMA "triangle") (("1" (INST - "R1-S!1" "-(R2 - S!1)") (("1" (ASSERT) (("1" (CASE-REPLACE "abs(S!1 - R2) = abs(R2 - S!1)") (("1" (CASE-REPLACE "abs(S!1 - R1) = abs(R1 - S!1)") (("1" (ASSERT) (("1" (INST - "R1") (("1" (INST - "R2") (("1" (ASSERT) NIL NIL) ("2" (LEMMA "Riemann?_Rie[T]") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "Riemann?_Rie[T]") (("2" (INST - "f!1" "a!1" "b!1" "_" "_") (("2" (INST - "P1!1" "xis1!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|integrable?| CONST-DECL "bool" |integral_def| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|integral?| CONST-DECL "bool" |integral_def| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|T_pred| CONST-DECL "[real -> boolean]" |integral_prep| NIL) (T FORMAL-SUBTYPE-DECL NIL |integral_prep| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|closed_interval| TYPE-EQ-DECL NIL |intervals_real| |reals|) (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|partition| TYPE-EQ-DECL NIL |integral_def| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|triangle| FORMULA-DECL NIL |real_props| NIL) (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (R1 SKOLEM-CONST-DECL "real" |integral_prep| NIL) (|f!1| SKOLEM-CONST-DECL "[T -> real]" |integral_prep| NIL) (P1!1 SKOLEM-CONST-DECL "partition[T](a!1, b!1)" |integral_prep| NIL) (|b!1| SKOLEM-CONST-DECL "T" |integral_prep| NIL) (|a!1| SKOLEM-CONST-DECL "T" |integral_prep| NIL) (|Riemann_sum?| CONST-DECL "bool" |integral_def| NIL) (|Riemann?_Rie| FORMULA-DECL NIL |integral_def| NIL) (P2!1 SKOLEM-CONST-DECL "partition[T](a!1, b!1)" |integral_prep| NIL) (R2 SKOLEM-CONST-DECL "real" |integral_prep| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|xis?| CONST-DECL "bool" |integral_def| NIL) (|Rie_sum| CONST-DECL "real" |integral_def| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL) (|Lemma_1-1| |nil| 3282496495 ("" (POSTPONE) NIL NIL) NIL SHOSTAK)) (|integrable_lem| 0 (|integrable_lem-3| "" 3786965909 ("" (SKOSIMP*) (("" (PROP) (("1" (SKOSIMP*) (("1" (EXPAND "integrable?") (("1" (SKOSIMP*) (("1" (EXPAND "integral?") (("1" (INST -1 "epsi!1/2") (("1" (SKOSIMP*) (("1" (INST + "delta!1") (("1" (SKOSIMP*) (("1" (INST-CP -1 "P1!1") (("1" (INST -1 "P2!1") (("1" (ASSERT) (("1" (INST -1 "RS2!1") (("1" (INST -2 "RS1!1") (("1" (CASE-REPLACE "RS1!1 - RS2!1 = (RS1!1 - S!1) - (RS2!1 - S!1)") (("1" (LEMMA "triangle") (("1" (INST -1 "RS1!1-S!1" "-(RS2!1-S!1)") (("1" (CASE-REPLACE "abs(-(RS2!1 - S!1)) = abs(S!1 - RS2!1)") (("1" (CASE-REPLACE "abs(RS1!1 - S!1) = abs(S!1 - RS1!1)") (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "abs") (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (GROUND) (("2" (LIFT-IF) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "abs") (("2" (LIFT-IF) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "  FORALL (n: nat): nonempty?[real]({S: real |  EXISTS (P: partition[T](a!1, b!1),xis:(xis?(a!1,b!1,P))):  width[T](a!1, b!1, P) < 1 / (1 + n) AND  S = Rie_sum[T](a!1, b!1, P, xis, f!1)})") (("1" (NAME "SS" "(LAMBDA (n: nat): choose({S:real| EXISTS (P: partition(a!1,b!1),
                                                                                                                    xis: (xis?(a!1, b!1, P))):
                                                                                 width(a!1,b!1,P) < 1/(n+1) AND
                                                                                        S = Rie_sum(a!1, b!1, P, xis, f!1)})                                    )") (("1" (CASE "cauchy(SS)") (("1" (LEMMA "convergence_cauchy2") (("1" (INST?) (("1" (ASSERT) (("1" (EXPAND "convergent?") (("1" (SKOSIMP*) (("1" (EXPAND "integrable?") (("1" (INST + "l!1") (("1" (EXPAND "integral?") (("1" (SKOSIMP*) (("1" (INST -5 "epsi!1/2") (("1" (SKOSIMP*) (("1" (INST + "delta!1") (("1" (SKOSIMP*) (("1" (TYPEPRED "R!1") (("1" (EXPAND "Riemann_sum?") (("1" (SKOSIMP*) (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (EXPAND "convergence") (("1" (INST - "epsi!1/2") (("1" (SKOSIMP*) (("1" (NAME "NN" "choose({nn: nat | nn > n!1 AND nn > 1/delta!1})") (("1" (INST - "NN") (("1" (ASSERT) (("1" (TYPEPRED "choose({S: real | EXISTS (P: partition(a!1, b!1),
                                                                                                       xis: (xis?(a!1, b!1, P))):
                                                                                                  width(a!1, b!1, P) < 1 / (NN+1) AND  S = Rie_sum(a!1, b!1, P, xis, f!1)})") (("1" (SKOSIMP*) (("1" (INST -8 "P!1" "P!2") (("1" (ASSERT) (("1" (CASE "width(a!1, b!1, P!2) < delta!1") (("1" (ASSERT) (("1" (NAME "S" "Rie_sum(a!1, b!1, P!1, xis!1, f!1)") (("1" (REPLACE -1) (("1" (CASE-REPLACE "abs(l!1 - S) = abs(S - l!1)") (("1" (CASE-REPLACE "S - l!1 = (S - SS(NN))  + (SS(NN) - l!1)") (("1" (LEMMA "triangle") (("1" (INST - "S - SS(NN)" "SS(NN) - l!1") (("1" (INST -13 "S" "SS(NN)") (("1" (ASSERT) NIL NIL) ("2" (HIDE 2) (("2" (CASE "SS(NN) = Rie_sum(a!1, b!1, P!2, xis!2, f!1)") (("1" (REPLACE -1) (("1" (HIDE-ALL-BUT 1) (("1" (LEMMA "Riemann?_Rie") (("1" (INST?) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (HIDE 2) (("2" (REPLACE -11 + RL) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (REPLACE -4 + RL) (("3" (HIDE-ALL-BUT 1) (("3" (LEMMA "Riemann?_Rie") (("3" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "abs") (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (GROUND) (("2" (LIFT-IF) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (HIDE 2) (("2" (CASE "1 / (1 + NN) < delta!1") (("1" (ASSERT) NIL NIL) ("2" (HIDE 2) (("2" (CROSS-MULT 1) (("2" (TYPEPRED "NN") (("2" (CROSS-MULT -2) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "nonempty?") (("2" (EXPAND "empty?") (("2" (EXPAND "member") (("2" (LEMMA "axiom_of_archimedes") (("2" (CASE "n!1 > 1/delta!1") (("1" (INST -2 "n!1") (("1" (SKOSIMP*) (("1" (INST -3 "i!1") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (INST -1 "1/delta!1") (("2" (SKOSIMP*) (("2" (INST -2 "i!1") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "cauchy") (("2" (SKOSIMP*) (("2" (INST -3 "epsilon!1") (("2" (SKOSIMP*) (("2" (NAME "NN" "choose({n: posnat | 1/n < delta!1})") (("1" (INST + "NN") (("1" (SKOSIMP*) (("1" (TYPEPRED "choose({S: real | EXISTS (P: partition(a!1, b!1),
                                                                                                               xis: (xis?(a!1, b!1, P))):
                                                                                               width(a!1, b!1, P) < 1 / (i!1 + 1) AND
                                                                                        S = Rie_sum(a!1, b!1, P, xis, f!1)})") (("1" (SKOSIMP*) (("1" (TYPEPRED "choose({S: real |  EXISTS (P: partition(a!1, b!1),
                                                                                                                             xis: (xis?(a!1, b!1, P))):
                                                                                          width(a!1, b!1, P) < 1 / (j!1 + 1) AND
                                                                                              S = Rie_sum(a!1, b!1, P, xis, f!1)})") (("1" (SKOSIMP*) (("1" (ASSERT) (("1" (INST - "P!1" "P!2") (("1" (SPLIT -10) (("1" (ASSERT) (("1" (REPLACE -9 :DIR RL :HIDE? T) (("1" (BETA) (("1" (REPLACE -3 :HIDE? T) (("1" (REPLACE -4 :HIDE? T) (("1" (ASSERT) (("1" (INST?) (("1" (ASSERT) (("1" (REWRITE "Riemann_sum?") (("1" (INST?) NIL NIL)) NIL)) NIL) ("2" (REWRITE "Riemann_sum?") (("2" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -2 -4 -8) (("2" (CASE "1 / NN < delta!1") (("1" (CASE "1 / (1 + i!1) <= 1/NN") (("1" (ASSERT) NIL NIL) ("2" (HIDE 2 3) (("2" (HIDE -1 -2 -3 -7) (("2" (NAME "ip1" "i!1+1") (("2" (REPLACE -1) (("2" (CROSS-MULT 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (CASE-REPLACE "1 / (1 + j!1) <= 1/NN") (("1" (ASSERT) NIL NIL) ("2" (HIDE 2 3) (("2" (HIDE -1 -2 -3 -4 -5 -8 -9) (("2" (NAME "jp1" "j!1+1") (("2" (REPLACE -1) (("2" (CROSS-MULT 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -7 "j!1") NIL NIL)) NIL)) NIL) ("2" (INST -5 "i!1") NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (HIDE 2) (("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "nonempty?") (("2" (EXPAND "empty?") (("2" (EXPAND "member") (("2" (LEMMA "axiom_of_archimedes") (("2" (INST -1 "1/delta!1") (("2" (SKOSIMP*) (("2" (INST -2 "i!1") (("1" (CASE "i!1 >= 0") (("1" (LEMMA "div_mult_pos_lt1") (("1" (INST?) (("1" (LEMMA "div_mult_pos_lt1") (("1" (INST -1 "i!1" "delta!1" "1") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CROSS-MULT 2) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL) ("2" (SKOSIMP*) (("2" (HIDE -1 2) (("2" (EXPAND "nonempty?") (("2" (EXPAND "empty?") (("2" (EXPAND "member") (("2" (ASSERT) (("2" (NAME "BMA" "b!1-a!1") (("2" (NAME "NP" "choose({n: above(1) | BMA/(n-1) < 1/(1+n!1)})") (("1" (INST - "Rie_sum[T](a!1, b!1, eq_partition(a!1,b!1,NP), gen_xis(a!1,b!1,eq_partition(a!1,b!1,NP)), f!1)") (("1" (INST?) (("1" (REWRITE "width_eq_part") (("1" (ASSERT) (("1" (REPLACE -2 :DIR RL) (("1" (HIDE -2) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "nonempty?") (("2" (EXPAND "empty?") (("2" (EXPAND "member") (("2" (LEMMA "axiom_of_archimedes") (("2" (INST -1 "2 + BMA*(n!1+1)") (("2" (SKOSIMP*) (("2" (LEMMA "pos_times_lt") (("2" (INST?) (("2" (ASSERT) (("2" (INST - "i!1") (("2" (CASE "BMA / (i!1 - 1) < BMA / (1 + BMA * (n!1 + 1) )") (("1" (NAME "np1" "n!1+1") (("1" (CASE-REPLACE "BMA / (1 + BMA * np1) < 1/np1") (("1" (ASSERT) NIL NIL) ("2" (HIDE 2) (("2" (HIDE -6) (("2" (CROSS-MULT 1) NIL NIL)) NIL)) NIL) ("3" (GROUND) NIL NIL)) NIL)) NIL) ("2" (HIDE -4) (("2" (HIDE 2) (("2" (ASSERT) (("2" (CASE-REPLACE "1 + BMA + BMA * n!1 < i!1 -1") (("1" (HIDE -3) (("1" (NAME "TT" "1 + BMA + BMA * n!1") (("1" (NAME "im1" "i!1-1") (("1" (CANCEL 1) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|integrable?| CONST-DECL "bool" |integral_def| NIL) (|integral?| CONST-DECL "bool" |integral_def| NIL) (|Riemann_sum?| CONST-DECL "bool" |integral_def| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (|triangle| FORMULA-DECL NIL |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|partition| TYPE-EQ-DECL NIL |integral_def| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|closed_interval| TYPE-EQ-DECL NIL |intervals_real| |reals|) (< CONST-DECL "bool" |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (T FORMAL-SUBTYPE-DECL NIL |integral_prep| NIL) (|T_pred| CONST-DECL "[real -> boolean]" |integral_prep| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|pos_times_lt| FORMULA-DECL NIL |real_props| NIL) (|np1| SKOLEM-CONST-DECL "posint" |integral_prep| NIL) (BMA SKOLEM-CONST-DECL "real" |integral_prep| NIL) (|div_mult_pos_lt2| FORMULA-DECL NIL |real_props| NIL) (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|both_sides_div_pos_lt2| FORMULA-DECL NIL |real_props| NIL) (|eq_partition| CONST-DECL "partition(a, b)" |integral_def| NIL) (|gen_xis| CONST-DECL "(xis?(a, b, P))" |integral_def| NIL) (|width_eq_part| FORMULA-DECL NIL |integral_def| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|choose| CONST-DECL "(p)" |sets| NIL) (|nzrat_div_nzrat_is_nzrat| APPLICATION-JUDGEMENT "nzrat" |rationals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|i!1| SKOLEM-CONST-DECL "int" |integral_prep| NIL) (P!2 SKOLEM-CONST-DECL "partition[T](a!1, b!1)" |integral_prep| NIL) (|xis!2| SKOLEM-CONST-DECL "(xis?(a!1, b!1, P!2))" |integral_prep| NIL) (P!1 SKOLEM-CONST-DECL "partition[T](a!1, b!1)" |integral_prep| NIL) (|xis!1| SKOLEM-CONST-DECL "(xis?(a!1, b!1, P!1))" |integral_prep| NIL) (|posint| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|div_mult_pos_le1| FORMULA-DECL NIL |real_props| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|times_div2| FORMULA-DECL NIL |real_props| NIL) (|div_mult_pos_le2| FORMULA-DECL NIL |real_props| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|rat_minus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|convergence_cauchy2| FORMULA-DECL NIL |convergence_sequences| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|convergence| CONST-DECL "bool" |convergence_sequences| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|i!1| SKOLEM-CONST-DECL "int" |integral_prep| NIL) (|i!1| SKOLEM-CONST-DECL "int" |integral_prep| NIL) (|axiom_of_archimedes| FORMULA-DECL NIL |real_props| NIL) (|empty?| CONST-DECL "bool" |sets| NIL) (S SKOLEM-CONST-DECL "real" |integral_prep| NIL) (|f!1| SKOLEM-CONST-DECL "[T -> real]" |integral_prep| NIL) (P!1 SKOLEM-CONST-DECL "partition[T](a!1, b!1)" |integral_prep| NIL) (|b!1| SKOLEM-CONST-DECL "{x: T | a!1 < x}" |integral_prep| NIL) (|a!1| SKOLEM-CONST-DECL "T" |integral_prep| NIL) (NN SKOLEM-CONST-DECL "({nn: nat | nn > n!1 AND nn > 1 / delta!1})" |integral_prep| NIL) (|delta!1| SKOLEM-CONST-DECL "posreal" |integral_prep| NIL) (|n!1| SKOLEM-CONST-DECL "nat" |integral_prep| NIL) (SS SKOLEM-CONST-DECL "[n: nat ->
   ({S: real |
       EXISTS (P: partition(a!1, b!1), xis: (xis?(a!1, b!1, P))):
         width(a!1, b!1, P) < 1 / (n + 1) AND
          S = Rie_sum(a!1, b!1, P, xis, f!1)})]" |integral_prep| NIL) (P!2 SKOLEM-CONST-DECL "partition[T](a!1, b!1)" |integral_prep| NIL) (|Riemann?_Rie| FORMULA-DECL NIL |integral_def| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|div_mult_pos_gt2| FORMULA-DECL NIL |extra_real_props| NIL) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|div_mult_pos_lt1| FORMULA-DECL NIL |real_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|convergent?| CONST-DECL "bool" |convergence_sequences| NIL) (|sequence| TYPE-EQ-DECL NIL |sequences| NIL) (|cauchy| CONST-DECL "bool" |convergence_sequences| NIL) (|Rie_sum| CONST-DECL "real" |integral_def| NIL) (|width| CONST-DECL "posreal" |integral_def| NIL) (|xis?| CONST-DECL "bool" |integral_def| NIL) (|nonempty?| CONST-DECL "bool" |sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK) (|debug3p2| "DEbugging PVS 3.2" 3303227557 ("" (SKOSIMP*) (("" (PROP) (("1" (SKOSIMP*) (("1" (EXPAND "integrable?") (("1" (SKOSIMP*) (("1" (EXPAND "integral?") (("1" (INST -1 "epsi!1/2") (("1" (SKOSIMP*) (("1" (INST + "delta!1") (("1" (SKOSIMP*) (("1" (INST-CP -1 "P1!1") (("1" (INST -1 "P2!1") (("1" (ASSERT) (("1" (INST -1 "RS2!1") (("1" (INST -2 "RS1!1") (("1" (CASE-REPLACE "RS1!1 - RS2!1 = (RS1!1 - S!1) - (RS2!1 - S!1)") (("1" (LEMMA "triangle") (("1" (INST -1 "RS1!1-S!1" "-(RS2!1-S!1)") (("1" (CASE-REPLACE "abs(-(RS2!1 - S!1)) = abs(S!1 - RS2!1)") (("1" (CASE-REPLACE "abs(RS1!1 - S!1) = abs(S!1 - RS1!1)") (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "abs") (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (GROUND) (("2" (LIFT-IF) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "abs") (("2" (LIFT-IF) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "  FORALL (n: nat): nonempty?[real]({S: real |  EXISTS (P: partition[T](a!1, b!1),xis:(xis?(a!1,b!1,P))):  width[T](a!1, b!1, P) < 1 / (1 + n) AND  S = Rie_sum[T](a!1, b!1, P, xis, f!1)})") (("1" (NAME "SS" "(LAMBDA (n: nat): choose({S:real| EXISTS (P: partition(a!1,b!1),
                                                                                                                    xis: (xis?(a!1, b!1, P))):
                                                                                 width(a!1,b!1,P) < 1/(n+1) AND
                                                                                        S = Rie_sum(a!1, b!1, P, xis, f!1)})                                    )") (("1" (CASE "cauchy(SS)") (("1" (LEMMA "convergence_cauchy2") (("1" (INST?) (("1" (ASSERT) (("1" (EXPAND "convergent?") (("1" (SKOSIMP*) (("1" (EXPAND "integrable?") (("1" (INST + "l!1") (("1" (EXPAND "integral?") (("1" (SKOSIMP*) (("1" (INST -5 "epsi!1/2") (("1" (SKOSIMP*) (("1" (INST + "delta!1") (("1" (SKOSIMP*) (("1" (TYPEPRED "R!1") (("1" (EXPAND "Riemann_sum?") (("1" (SKOSIMP*) (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (EXPAND "convergence") (("1" (INST - "epsi!1/2") (("1" (SKOSIMP*) (("1" (NAME "NN" "choose({nn: nat | nn > n!1 AND nn > 1/delta!1})") (("1" (INST - "NN") (("1" (ASSERT) (("1" (TYPEPRED "choose({S: real | EXISTS (P: partition(a!1, b!1),
                                                                                                       xis: (xis?(a!1, b!1, P))):
                                                                                                  width(a!1, b!1, P) < 1 / (NN+1) AND  S = Rie_sum(a!1, b!1, P, xis, f!1)})") (("1" (SKOSIMP*) (("1" (INST -8 "P!1" "P!2") (("1" (ASSERT) (("1" (CASE "width(a!1, b!1, P!2) < delta!1") (("1" (ASSERT) (("1" (NAME "S" "Rie_sum(a!1, b!1, P!1, xis!1, f!1)") (("1" (REPLACE -1) (("1" (CASE-REPLACE "abs(l!1 - S) = abs(S - l!1)") (("1" (CASE-REPLACE "S - l!1 = (S - SS(NN))  + (SS(NN) - l!1)") (("1" (LEMMA "triangle") (("1" (INST - "S - SS(NN)" "SS(NN) - l!1") (("1" (INST -13 "S" "SS(NN)") (("1" (ASSERT) NIL NIL) ("2" (HIDE 2) (("2" (CASE "SS(NN) = Rie_sum(a!1, b!1, P!2, xis!2, f!1)") (("1" (REPLACE -1) (("1" (HIDE-ALL-BUT 1) (("1" (LEMMA "Riemann?_Rie") (("1" (INST - "a!1" "b!1" "f!1") (("1" (SPLIT -1) (("1" (INST?) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (HIDE 2) (("2" (REPLACE -11 + RL) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (REPLACE -4 + RL) (("3" (HIDE-ALL-BUT 1) (("3" (LEMMA "Riemann?_Rie") (("3" (INST - "a!1" "b!1" "f!1") (("3" (SPLIT -1) (("1" (INST?) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "abs") (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (GROUND) (("2" (LIFT-IF) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (HIDE 2) (("2" (CASE "1 / (1 + NN) < delta!1") (("1" (ASSERT) NIL NIL) ("2" (HIDE 2) (("2" (CROSS-MULT 1) (("2" (TYPEPRED "NN") (("2" (CROSS-MULT -2) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "nonempty?") (("2" (EXPAND "empty?") (("2" (EXPAND "member") (("2" (LEMMA "axiom_of_archimedes") (("2" (CASE "n!1 > 1/delta!1") (("1" (INST -2 "n!1") (("1" (SKOSIMP*) (("1" (INST -3 "i!1") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (INST -1 "1/delta!1") (("2" (SKOSIMP*) (("2" (INST -2 "i!1") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "cauchy") (("2" (SKOSIMP*) (("2" (INST -3 "epsilon!1") (("2" (SKOSIMP*) (("2" (NAME "NN" "choose({n: posnat | 1/n < delta!1})") (("1" (INST + "NN") (("1" (SKOSIMP*) (("1" (TYPEPRED "choose({S: real | EXISTS (P: partition(a!1, b!1),
                                                                                                               xis: (xis?(a!1, b!1, P))):
                                                                                               width(a!1, b!1, P) < 1 / (i!1 + 1) AND
                                                                                        S = Rie_sum(a!1, b!1, P, xis, f!1)})") (("1" (SKOSIMP*) (("1" (TYPEPRED "choose({S: real |  EXISTS (P: partition(a!1, b!1),
                                                                                                                             xis: (xis?(a!1, b!1, P))):
                                                                                          width(a!1, b!1, P) < 1 / (j!1 + 1) AND
                                                                                              S = Rie_sum(a!1, b!1, P, xis, f!1)})") (("1" (SKOSIMP*) (("1" (ASSERT) (("1" (INST - "P!1" "P!2") (("1" (SPLIT -10) (("1" (ASSERT) (("1" (REPLACE -9 :DIR RL :HIDE? T) (("1" (BETA) (("1" (REPLACE -3 :HIDE? T) (("1" (REPLACE -4 :HIDE? T) (("1" (ASSERT) (("1" (INST?) (("1" (ASSERT) (("1" (REWRITE "Riemann_sum?") (("1" (INST?) NIL NIL)) NIL)) NIL) ("2" (REWRITE "Riemann_sum?") (("2" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -2 -4 -8) (("2" (CASE "1 / NN < delta!1") (("1" (CASE "1 / (1 + i!1) <= 1/NN") (("1" (ASSERT) NIL NIL) ("2" (HIDE 2 3) (("2" (HIDE -1 -2 -3 -7) (("2" (NAME "ip1" "i!1+1") (("2" (REPLACE -1) (("2" (CROSS-MULT 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (CASE-REPLACE "1 / (1 + j!1) <= 1/NN") (("1" (ASSERT) NIL NIL) ("2" (HIDE 2 3) (("2" (HIDE -1 -2 -3 -4 -5 -8 -9) (("2" (NAME "jp1" "j!1+1") (("2" (REPLACE -1) (("2" (CROSS-MULT 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -7 "j!1") NIL NIL)) NIL)) NIL) ("2" (INST -5 "i!1") NIL NIL) ("3" (SKOSIMP*) NIL NIL) ("4" (SKOSIMP*) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (HIDE 2) (("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "nonempty?") (("2" (EXPAND "empty?") (("2" (EXPAND "member") (("2" (LEMMA "axiom_of_archimedes") (("2" (INST -1 "1/delta!1") (("2" (SKOSIMP*) (("2" (INST -2 "i!1") (("1" (CASE "i!1 >= 0") (("1" (LEMMA "div_mult_pos_lt1") (("1" (INST?) (("1" (LEMMA "div_mult_pos_lt1") (("1" (INST -1 "i!1" "delta!1" "1") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CROSS-MULT 2) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL) ("2" (SKOSIMP*) (("2" (HIDE -1 2) (("2" (EXPAND "nonempty?") (("2" (EXPAND "empty?") (("2" (EXPAND "member") (("2" (ASSERT) (("2" (NAME "BMA" "b!1-a!1") (("2" (NAME "NP" "choose({n: above(1) | BMA/(n-1) < 1/(1+n!1)})") (("1" (INST - "Rie_sum[T](a!1, b!1, eq_partition(a!1,b!1,NP), gen_xis(a!1,b!1,eq_partition(a!1,b!1,NP)), f!1)") (("1" (INST?) (("1" (REWRITE "width_eq_part") (("1" (ASSERT) (("1" (REPLACE -2 :DIR RL) (("1" (HIDE -2) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "nonempty?") (("2" (EXPAND "empty?") (("2" (EXPAND "member") (("2" (LEMMA "axiom_of_archimedes") (("2" (INST -1 "2 + BMA*(n!1+1)") (("2" (SKOSIMP*) (("2" (LEMMA "pos_times_lt") (("2" (INST?) (("2" (ASSERT) (("2" (INST - "i!1") (("2" (CASE "BMA / (i!1 - 1) < BMA / (1 + BMA * (n!1 + 1) )") (("1" (NAME "np1" "n!1+1") (("1" (CASE-REPLACE "BMA / (1 + BMA * np1) < 1/np1") (("1" (ASSERT) NIL NIL) ("2" (HIDE 2) (("2" (HIDE -6) (("2" (CROSS-MULT 1) NIL NIL)) NIL)) NIL) ("3" (GROUND) NIL NIL)) NIL)) NIL) ("2" (HIDE -4) (("2" (HIDE 2) (("2" (ASSERT) (("2" (CASE-REPLACE "1 + BMA + BMA * n!1 < i!1 -1") (("1" (HIDE -3) (("1" (NAME "TT" "1 + BMA + BMA * n!1") (("1" (NAME "im1" "i!1-1") (("1" (CANCEL 1) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) SHOSTAK) (|integrable_lem-2| |nil| 3282558759 ("" (SKOSIMP*) (("" (PROP) (("1" (SKOSIMP*) (("1" (EXPAND "integrable?") (("1" (SKOSIMP*) (("1" (EXPAND "integral?") (("1" (INST -1 "epsi!1/2") (("1" (SKOSIMP*) (("1" (INST + "delta!1") (("1" (SKOSIMP*) (("1" (INST-CP -1 "P1!1") (("1" (INST -1 "P2!1") (("1" (ASSERT) (("1" (INST -1 "RS2!1") (("1" (INST -2 "RS1!1") (("1" (CASE-REPLACE "RS1!1 - RS2!1 = (RS1!1 - S!1) - (RS2!1 - S!1)") (("1" (LEMMA "triangle") (("1" (INST -1 "RS1!1-S!1" "-(RS2!1-S!1)") (("1" (CASE-REPLACE "abs(-(RS2!1 - S!1)) = abs(S!1 - RS2!1)") (("1" (CASE-REPLACE "abs(RS1!1 - S!1) = abs(S!1 - RS1!1)") (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "abs") (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "abs") (("2" (LIFT-IF) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "  FORALL (n: nat): nonempty?[real]({S: real |  EXISTS (P: partition[T](a!1, b!1),xis:(xis?(a!1,b!1,P))):  width[T](a!1, b!1, P) < 1 / (1 + n) AND  S = Rie_sum[T](a!1, b!1, P, xis, f!1)})") (("1" (NAME "SS" "(LAMBDA (n: nat): choose({S:real| EXISTS (P: partition(a!1,b!1),
                                                                                   xis: (xis?(a!1, b!1, P))):
                                                width(a!1,b!1,P) < 1/(n+1) AND
                                                       S = Rie_sum(a!1, b!1, P, xis, f!1)})                                    )") (("1" (CASE "cauchy(SS)") (("1" (LEMMA "convergence_cauchy2") (("1" (INST?) (("1" (ASSERT) (("1" (EXPAND "convergent?") (("1" (SKOSIMP*) (("1" (EXPAND "integrable?") (("1" (INST + "l!1") (("1" (EXPAND "integral?") (("1" (SKOSIMP*) (("1" (INST -5 "epsi!1/2") (("1" (SKOSIMP*) (("1" (INST + "delta!1") (("1" (SKOSIMP*) (("1" (TYPEPRED "R!1") (("1" (EXPAND "Riemann_sum?") (("1" (SKOSIMP*) (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (EXPAND "convergence") (("1" (INST - "epsi!1/2") (("1" (SKOSIMP*) (("1" (NAME "NN" "choose({nn: nat | nn > n!1 AND nn > 1/delta!1})") (("1" (INST - "NN") (("1" (ASSERT) (("1" (TYPEPRED "choose({S: real | EXISTS (P: partition(a!1, b!1),
                                                                   xis: (xis?(a!1, b!1, P))):
                                                              width(a!1, b!1, P) < 1 / (NN+1) AND  S = Rie_sum(a!1, b!1, P, xis, f!1)})") (("1" (SKOSIMP*) (("1" (INST -8 "P!1" "P!2") (("1" (ASSERT) (("1" (CASE "width(a!1, b!1, P!2) < delta!1") (("1" (ASSERT) (("1" (NAME "S" "Rie_sum(a!1, b!1, P!1, xis!1, f!1)") (("1" (REPLACE -1) (("1" (CASE-REPLACE "abs(l!1 - S) = abs(S - l!1)") (("1" (CASE-REPLACE "S - l!1 = (S - SS(NN))  + (SS(NN) - l!1)") (("1" (LEMMA "triangle") (("1" (INST - "S - SS(NN)" "SS(NN) - l!1") (("1" (INST -13 "S" "SS(NN)") (("1" (ASSERT) NIL NIL) ("2" (HIDE 2) (("2" (CASE "SS(NN) = Rie_sum(a!1, b!1, P!2, xis!2, f!1)") (("1" (REPLACE -1) (("1" (HIDE-ALL-BUT 1) (("1" (LEMMA "Riemann?_Rie") (("1" (INST - "a!1" "b!1" "f!1") (("1" (ASSERT) (("1" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (HIDE 2) (("2" (REPLACE -11 + RL) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (REPLACE -4 + RL) (("3" (HIDE-ALL-BUT 1) (("3" (LEMMA "Riemann?_Rie") (("3" (INST - "a!1" "b!1" "f!1") (("3" (ASSERT) (("3" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "abs") (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (HIDE 2) (("2" (CASE "1 / (1 + NN) < delta!1") (("1" (ASSERT) NIL NIL) ("2" (HIDE 2) (("2" (CROSS-MULT 1) (("2" (TYPEPRED "NN") (("2" (CROSS-MULT -2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -5 "NN") NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "nonempty?") (("2" (EXPAND "empty?") (("2" (EXPAND "member") (("2" (LEMMA "axiom_of_archimedes") (("2" (CASE "n!1 > 1/delta!1") (("1" (INST -2 "n!1") (("1" (SKOSIMP*) (("1" (INST -3 "i!1") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (INST -1 "1/delta!1") (("2" (SKOSIMP*) (("2" (INST -2 "i!1") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "cauchy") (("2" (SKOSIMP*) (("2" (INST -3 "epsilon!1") (("2" (SKOSIMP*) (("2" (NAME "NN" "choose({n: posnat | 1/n < delta!1})") (("1" (INST + "NN") (("1" (SKOSIMP*) (("1" (TYPEPRED "choose({S: real | EXISTS (P: partition(a!1, b!1),
                                                                           xis: (xis?(a!1, b!1, P))):
                                                           width(a!1, b!1, P) < 1 / (i!1 + 1) AND
                                                    S = Rie_sum(a!1, b!1, P, xis, f!1)})") (("1" (SKOSIMP*) (("1" (TYPEPRED "choose({S: real |  EXISTS (P: partition(a!1, b!1),
                                                                                   xis: (xis?(a!1, b!1, P))):
                                                width(a!1, b!1, P) < 1 / (j!1 + 1) AND
                                                    S = Rie_sum(a!1, b!1, P, xis, f!1)})") (("1" (SKOSIMP*) (("1" (ASSERT) (("1" (INST - "P!1" "P!2") (("1" (SPLIT -10) (("1" (ASSERT) (("1" (INST - "Rie_sum(a!1, b!1, P!1, xis!1, f!1)" "Rie_sum(a!1, b!1, P!2, xis!2, f!1)") (("1" (REPLACE -9 + RL) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (LEMMA "Riemann?_Rie") (("2" (INST - "a!1" "b!1" "f!1") (("2" (ASSERT) (("2" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (LEMMA "Riemann?_Rie") (("3" (INST - "a!1" "b!1" "f!1") (("3" (ASSERT) (("3" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -2 -4 -8) (("2" (CASE "1 / NN < delta!1") (("1" (CASE "1 / (1 + i!1) <= 1/NN") (("1" (ASSERT) NIL NIL) ("2" (HIDE 2 3) (("2" (HIDE -1 -2 -3 -7) (("2" (NAME "ip1" "i!1+1") (("2" (REPLACE -1) (("2" (MULT-BY 1 "NN") (("2" (MULT-BY 1 "ip1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (CASE-REPLACE "1 / (1 + j!1) <= 1/NN") (("1" (ASSERT) NIL NIL) ("2" (HIDE 2 3) (("2" (HIDE -1 -2 -3 -4 -5 -8 -9) (("2" (NAME "jp1" "j!1+1") (("2" (REPLACE -1) (("2" (MULT-BY 1 "jp1") (("2" (MULT-BY 1 "NN") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -7 "j!1") NIL NIL) ("3" (SKOSIMP*) NIL NIL)) NIL)) NIL) ("2" (INST -5 "i!1") NIL NIL) ("3" (SKOSIMP*) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (HIDE 2) (("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "nonempty?") (("2" (EXPAND "empty?") (("2" (EXPAND "member") (("2" (LEMMA "axiom_of_archimedes") (("2" (INST -1 "1/delta!1") (("2" (SKOSIMP*) (("2" (INST -2 "i!1") (("1" (CASE "i!1 >= 0") (("1" (LEMMA "div_mult_pos_lt1") (("1" (INST?) (("1" (LEMMA "div_mult_pos_lt1") (("1" (INST -1 "i!1" "delta!1" "1") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CROSS-MULT 2) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL) ("3" (SKOSIMP*) NIL NIL)) NIL) ("2" (SKOSIMP*) (("2" (HIDE -1 2) (("2" (EXPAND "nonempty?") (("2" (EXPAND "empty?") (("2" (EXPAND "member") (("2" (ASSERT) (("2" (NAME "BMA" "b!1-a!1") (("2" (NAME "NP" "choose({n: above(1) | BMA/(n-1) < 1/(1+n!1)})") (("1" (INST - "Rie_sum[T](a!1, b!1, eq_partition(a!1,b!1,NP), gen_xis(a!1,b!1,eq_partition(a!1,b!1,NP)), f!1)") (("1" (INST?) (("1" (REWRITE "width_eq_part") (("1" (ASSERT) (("1" (REPLACE -2 :DIR RL) (("1" (HIDE -2) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "nonempty?") (("2" (EXPAND "empty?") (("2" (EXPAND "member") (("2" (LEMMA "axiom_of_archimedes") (("2" (INST -1 "2 + BMA*(n!1+1)") (("2" (SKOSIMP*) (("2" (LEMMA "pos_times_lt") (("2" (INST?) (("2" (ASSERT) (("2" (INST - "i!1") (("2" (CASE "BMA / (i!1 - 1) < BMA / (1 + BMA * (n!1 + 1) )") (("1" (NAME "np1" "n!1+1") (("1" (CASE-REPLACE "BMA / (1 + BMA * np1) < 1/np1") (("1" (ASSERT) NIL NIL) ("2" (HIDE 2) (("2" (HIDE -6) (("2" (CROSS-MULT 1) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (HIDE -4) (("2" (HIDE 2) (("2" (ASSERT) (("2" (CASE-REPLACE "1 + BMA + BMA * n!1 < i!1 -1") (("1" (HIDE -3) (("1" (NAME "TT" "1 + BMA + BMA * n!1") (("1" (NAME "im1" "i!1-1") (("1" (CANCEL 1) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP*) NIL NIL) ("4" (SKOSIMP*) NIL NIL)) NIL)) NIL)) NIL) (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) NIL) (|integrable_lem-1| |nil| 3282558391 ("" (SKOSIMP*) (("" (LEMMA "Lemma_1") (("" (POSTPONE) NIL NIL)) NIL)) NIL) NIL SHOSTAK)) (|gxis_TCC1| 0 (|gxis_TCC5-2| "" 3790090350 ("" (SKOSIMP*) (("" (ASSERT) NIL NIL)) NIL) ((|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK (|gxis| SUBTYPE "integral_prep.ii" "below[length(P)]")) (|gxis_TCC5-1| |nil| 3282497721 ("" (SKOSIMP*) (("" (ASSERT) (("" (SKOSIMP*) (("" (TYPEPRED "ii!1") (("" (ASSERT) (("" (LIFT-IF) (("" (TYPEPRED "P!1") (("" (INST - "ii!1") (("" (TYPEPRED "xx!1") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK (|gxis| SUBTYPE "integral_prep.ii" "below[length(P)]"))) (|gxis_TCC2| 0 (|gxis_TCC2-1| |nil| 3282497721 ("" (SKOSIMP*) (("" (ASSERT) NIL NIL)) NIL) ((|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK (|gxis| SUBTYPE "integral_prep.j" "below[length(P)]"))) (|gxis_TCC3| 0 (|gxis_TCC6-1| |nil| 3447433252 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|T_pred| CONST-DECL "[real -> boolean]" |integral_prep| NIL) (T FORMAL-SUBTYPE-DECL NIL |integral_prep| NIL) (< CONST-DECL "bool" |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|closed_interval| TYPE-EQ-DECL NIL |intervals_real| |reals|) (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|partition| TYPE-EQ-DECL NIL |integral_def| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|gxis| SUBTYPE "integral_prep.xx" "closed_interval[T](integral_prep.a, integral_prep.b)"))) (|gxis_TCC4| 0 (|gxis_TCC4-1| "" 3882422493 ("" (SKOSIMP*) (("" (EXPAND "xis?") (("" (SKOSIMP*) (("" (ASSERT) (("" (TYPEPRED "xx!1") (("" (ASSERT) (("" (TYPEPRED "P!1") (("" (LIFT-IF) (("" (GROUND) (("" (INST?) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK (|gxis| SUBTYPE "(LAMBDA (ii: naturalnumbers.below((number_fields.-)(length(integral_prep.P), 1))): finite_sequences[closed_interval[T](integral_prep.a, integral_prep.b)].finseq_appl(integral_prep.P)(ii)) WITH [(integral_prep.j) := IF integral_prep.flag THEN finite_sequences[closed_interval[T](integral_prep.a, integral_prep.b)].finseq_appl(integral_prep.P)(integral_prep.j) ELSE integral_prep.xx ENDIF]" "(integral_def[T].xis?(integral_prep.a, integral_prep.b, integral_prep.P))")) (|gxis_TCC1-1| |nil| 3282497721 ("" (SKOSIMP*) (("" (ASSERT) NIL NIL)) NIL) ((|xis?| CONST-DECL "bool" |integral_def| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|partition| TYPE-EQ-DECL NIL |integral_def| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (> CONST-DECL "bool" |reals| NIL) (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|closed_interval| TYPE-EQ-DECL NIL |intervals_real| |reals|) (< CONST-DECL "bool" |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (T FORMAL-SUBTYPE-DECL NIL |integral_prep| NIL) (|T_pred| CONST-DECL "[real -> boolean]" |integral_prep| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) SHOSTAK (|gxis| SUBTYPE "(LAMBDA (ii: naturalnumbers.below((number_fields.-)(length(integral_prep.P), 1))): finite_sequences[closed_interval[T](integral_prep.a, integral_prep.b)].finseq_appl(integral_prep.P)(ii)) WITH [(integral_prep.j) := IF integral_prep.flag THEN finite_sequences[closed_interval[T](integral_prep.a, integral_prep.b)].finseq_appl(integral_prep.P)(integral_prep.j) ELSE integral_prep.xx ENDIF]" "(integral_def[T].xis?(integral_prep.a, integral_prep.b, integral_prep.P))"))))
