derivative_props [ T : TYPE FROM real ] : THEORY
BEGIN

  ASSUMING
     IMPORTING deriv_domain_def

     connected_domain : ASSUMPTION connected?[T]

     not_one_element : ASSUMPTION not_one_element?[T]

  ENDASSUMING

  deriv_domain: LEMMA deriv_domain?[T]

  IMPORTING derivatives_alt[T], continuous_functions_props

% AUTO_REWRITE-  abs_0
  AUTO_REWRITE-  abs_neg

  f, fp : VAR [T -> real]
  x, y, a, b, c : VAR T
  D : VAR real

  %--------------------------------------

  deriv_maximum : LEMMA
        a < c AND c < b AND derivable?(f, c) AND
        (FORALL x : a < x AND x < b IMPLIES f(x) <= f(c))
    IMPLIES deriv(f, c) = 0

  deriv_minimum : LEMMA
        a < c AND c < b AND derivable?(f, c) AND
        (FORALL x : a < x AND x < b  IMPLIES f(c) <= f(x))
    IMPLIES deriv(f, c) = 0

  %-----------------------
  %  Mean value theorem
  %-----------------------

  mean_value_aux : LEMMA derivable?(f) AND a < b AND f(a) = f(b) IMPLIES
                           EXISTS c : a < c AND c < b AND deriv(f, c) = 0

  mean_value : THEOREM derivable?(f) AND a < b IMPLIES
                           EXISTS c : a < c AND c < b AND 
                                      deriv(f, c) * (b - a) = f(b) - f(a)


  mean_value_abs : THEOREM derivable?(f) AND a /= b IMPLIES  % BUTLER
                           EXISTS c: min(a,b) < c AND c < max(a,b) AND 
                              abs(deriv(f, c)) * abs(b - a) = abs(f(b) - f(a))

  mean_value_bound : THEOREM
   (derivable?(f) AND FORALL(x:T): a <= deriv(f)(x) AND deriv(f)(x) <= b) IMPLIES
         FORALL(x0: T, x: T | x >= x0):
	  a*(x-x0) <= f(x) - f(x0) <= b*(x-x0)

  %------------------------------------------
  %  Applications of the mean value theorem
  %------------------------------------------

  g : VAR deriv_fun[T]

  nonneg_derivative : LEMMA increasing?(g) IFF (FORALL x : deriv(g, x) >= 0)

  nonpos_derivative : LEMMA decreasing?(g) IFF (FORALL x : deriv(g, x) <= 0)

  positive_derivative : LEMMA (FORALL x: deriv(g, x) > 0) 
                                  IMPLIES strict_increasing?(g)

  negative_derivative : LEMMA (FORALL x : deriv(g, x) < 0) 
                                  IMPLIES strict_decreasing?(g)

  null_derivative : LEMMA constant?(g) IFF (FORALL x : deriv(g, x) = 0)

%% --- David Lester Additions ---

  minimum_derivative: LEMMA deriv(g)(x) = 0 AND x /= y AND
                          (FORALL (y:T): y /= x IMPLIES deriv(g)(y)*(y-x) > 0) 
                             IMPLIES g(x) < g(y)

  maximum_derivative: LEMMA deriv(g)(x) = 0 AND x /= y AND
                          (FORALL (y:T): y /= x IMPLIES deriv(g)(y)*(y-x) < 0) 
                             IMPLIES g(y) < g(x)

  strict_minimum_derivative: LEMMA strict_increasing?(deriv(g)) AND 
                                   deriv(g)(x) = 0 AND x /= y
                                      IMPLIES g(x) < g(y)

  strict_maximum_derivative: LEMMA strict_decreasing?(deriv(g)) AND 
                                   deriv(g)(x) = 0 AND x /= y
                                      IMPLIES g(y) < g(x)

  deriv_zero_const_fun: LEMMA FORALL (a,b: T, f: continuous_fun[T]):
            a < b AND derivable?(f) AND (FORALL (x:T): deriv(f)(x) = 0)
       IMPLIES 
              (EXISTS (c:real): f = const_fun(c))

  derivs_equal: LEMMA FORALL (a, b: T, f, g: deriv_fun[T]):
       a < b AND
       (FORALL (x:T): deriv(f)(x) = deriv(g)(x))
       IMPLIES
           (EXISTS (c:real): f = g + const_fun(c))

  derivs_funs_equal: LEMMA FORALL (a, b: T, f, g: deriv_fun[T]):
       a < b AND
       (FORALL (x:T): deriv(f)(x) = deriv(g)(x))
       AND (EXISTS (dd:T): f(dd)=g(dd))
       IMPLIES
           f=g

  monotonic_antideriv: LEMMA FORALL (a, b: T, f, g: deriv_fun[T]):
    (FORALL (x:T): deriv(f)(x) >= deriv(g)(x)) AND
    a <= b =>
    f(b) - f(a) >= g(b) - g(a)

  monotonic_antideriv_gt: LEMMA FORALL (a, b: T, f, g: deriv_fun[T]):
      (FORALL (x:T): deriv(f)(x) > deriv(g)(x)) AND
      a < b =>
        f(b) - f(a) > g(b) - g(a)


  derivative_alt : LEMMA FORALL (D: real, ff: [T -> real], x: T):
	convergence(NQ(ff, x), 0, D)
    IFF convergence(LAMBDA  (y: {yy:T|yy/=x}): (ff(y) - ff(x))/(y - x), x, D)

  derivative_fun_alt : LEMMA FORALL (ff, gg: [T -> real]):
	derivable?(ff) AND deriv(ff) = gg
    IFF (FORALL x: convergence(LAMBDA  (y: {yy:T|yy/=x}):
                       (ff(y) - ff(x))/(y - x), x, gg(x)))

  epsi_lt_le: LEMMA (FORALL (epsilon: posreal): x < epsilon) IFF
               (FORALL (epsilon: posreal): x <= epsilon) 

	   
%% --- J. Tanner Slagel Additions, 4/2020 ---


%-------------------------------------------------------------------------
%% If two functions are not the same at an initial point, but they have
%  the same derivative, they are not the same anywhere
%-------------------------------------------------------------------------

  derivs_funs_neq: LEMMA FORALL (a, b: T, f, g: deriv_fun[T]):
       a < b AND
       (FORALL (x:T): deriv(f)(x) = deriv(g)(x))
       AND (EXISTS (dd:T): f(dd) /= g(dd))
       IMPLIES
          (FORALL (x:T):  f(x) /= g(x))

%-------------------------------------------------------------------------
%%Inequalities at some initial point and of the derivatives of two
% functions on a domain,  preserve the inequality of the two functions
% through to the whole domain 
%-------------------------------------------------------------------------

  %Less than or equal to 
  derivs_funs_leq: LEMMA FORALL (a, b: T, f, g: deriv_fun[T]):
       a < b AND
       (FORALL (x:T): deriv(f)(x) <= deriv(g)(x))
       IMPLIES 
       (FORALL(d:{dd:T| f(dd) <= g(dd) AND FORALL(xx:T): dd<=xx}):
         (FORALL (x:T):  f(x) <= g(x)))

  %Less than
  derivs_funs_lt: LEMMA FORALL (a, b: T, f, g: deriv_fun[T]):
       a < b AND
       (FORALL (x:T): deriv(f)(x) <= deriv(g)(x))
       IMPLIES 
       (FORALL(d:{dd:T| f(dd) < g(dd) AND FORALL(xx:T): dd <= xx}):
         (FORALL (x:T):  f(x) < g(x)))

  %Greater than or equal to
  derivs_funs_geq: LEMMA FORALL (a, b: T, f, g: deriv_fun[T]):
       a < b AND
       (FORALL (x:T): deriv(f)(x) >= deriv(g)(x))
       IMPLIES 
       (FORALL(d:{dd:T| f(dd) >= g(dd) AND FORALL(xx:T): dd <= xx}):
         (FORALL (x:T):  f(x) >= g(x)))
	 
  %Greater than
  derivs_funs_gt: LEMMA FORALL (a, b: T, f, g: deriv_fun[T]):
        a < b AND
       (FORALL (x:T): deriv(f)(x) >= deriv(g)(x))
       IMPLIES 
       (FORALL(d:{dd:T| f(dd) > g(dd) AND FORALL(xx:T): dd <= xx}):
         (FORALL (x:T):  f(x) > g(x)))

%-------------------------------------------------------------------------
%% If a function has a derivative that is negative and bounded away from
%  zero, then eventually that function becomes negative. 
%-------------------------------------------------------------------------

  deriv_neg_neg: LEMMA
    FORALL (a, b: T, f: deriv_fun[T], eps:posreal):
        a < b AND
       (EXISTS(d:
       {dd:T| FORALL(xx:real): dd <= xx
       IFF member[real](xx,fullset[T])}):
        (FORALL (x:T): -eps >= deriv(f)(x)))
         IMPLIES 
         (FORALL(d:
          {dd:T| FORALL(xx:real): dd <= xx
	  IFF member[real](xx,fullset[T])}):
            FORALL(x:{xx:T| xx>(d+f(d)/eps)}):  f(x)<0)

   neg_spot(eps:posreal,
   d: {dd:T| FORALL(xx:real): dd <= xx
    IFF member[real](xx,fullset[T])},
   f:{ff:deriv_fun[T] | (FORALL (x:T): -eps >= deriv(ff)(x))}):
   {r:real | FORALL(x:{xx:T | xx> r}): f(x)<0} =
    (d+f(d)/eps)

  deriv_neg_root: LEMMA
      FORALL (a, b: T, f: deriv_fun[T], eps:posreal):
        (a < b AND
       EXISTS(d:
       {dd:T| FORALL(xx:real): dd <= xx
       IFF member[real](xx,fullset[T])}):
       (FORALL (x:T): -eps >= deriv(f)(x)))
       IMPLIES 
	(FORALL(d:
          {dd:T| FORALL(xx:real): dd <= xx
	  IFF member[real](xx,fullset[T])}):
	  (f(d)<0 IMPLIES FORALL(x:{xx:T| xx>=d}):
	  f(x)<0)
	  AND
	  (f(d)>=0 IMPLIES EXISTS(r:{rr:T | f(rr)=0}):
	  (FORALL(r1:{rr:T |f(rr) = 0}):
	  r=r1)
	  AND
	  ((FORALL (t:{rr:T| r<rr}):
	  f(t)<0)
	  AND
	  (FORALL (t:{rr:T| r>rr}):
	  f(t)>0))))
   
%~~~      END   ~~~%
END derivative_props
