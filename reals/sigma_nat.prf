(|sigma_nat| (|IMP_sigma_TCC1| 0 (|IMP_sigma_TCC1-1| |nil| 3620720752 ("" (ASSUMING-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL)) NIL (|IMP_sigma| ASSUMING "sigma[nat].sigma" "connected_domain: ASSUMPTION (FORALL (x, y: sigma.T), (z: integers.integer): booleans.IMPLIES(booleans.AND(reals.<=(x, z), reals.<=(z, y)), sigma.T_pred(z)))"))) (|int_is_T_high| 0 (|int_is_T_high-2| "" 3790088480 ("" (SKOSIMP*) (("" (INST-CP + 0) (("" (ASSERT) NIL NIL)) NIL)) NIL) ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL)) SHOSTAK (|int_is_T_high| SUBTYPE "sigma_nat.x" "T_high[nat]")) (|int_is_T_high-1| |nil| 3352138082 ("" (SKOSIMP*) (("" (INST-CP + 0) (("" (INST + "x!1") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) NIL NIL (|int_is_T_high| SUBTYPE "sigma_nat.x" "T_high[nat]"))) (|nat_is_T_low| 0 (|nat_is_T_low-1| |nil| 3352138082 ("" (JUDGEMENT-TCC) NIL NIL) NIL NIL (|nat_is_T_low| SUBTYPE "sigma_nat.x" "T_low[nat]"))) (|sigma_shift| 0 (|sigma_shift-1| |nil| 3308675684 ("" (SKOSIMP*) (("" (REWRITE "sigma_shift_T") NIL NIL)) NIL) ((|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|sigma_shift_T| FORMULA-DECL NIL |sigma| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|T_high| TYPE-EQ-DECL NIL |sigma| NIL) (|T_low| TYPE-EQ-DECL NIL |sigma| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)) NIL)) (|sigma_shift_neg_TCC1| 0 (|sigma_shift_neg_TCC1-2| "" 3790088481 ("" (SKOSIMP*) NIL NIL) NIL SHOSTAK (|sigma_shift_neg| SUBTYPE "(number_fields.-)(sigma_nat.low, sigma_nat.m)" "T_low[nat]")) (|sigma_shift_neg_TCC1-1| |nil| 3308675684 ("" (SKOSIMP*) (("" (INST + 0) (("" (ASSERT) NIL NIL)) NIL)) NIL) NIL NIL (|sigma_shift_neg| SUBTYPE "(number_fields.-)(sigma_nat.low, sigma_nat.m)" "T_low[nat]"))) (|sigma_shift_neg_TCC2| 0 (|sigma_shift_neg_TCC2-1| |nil| 3352138082 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL)) NIL (|sigma_shift_neg| SUBTYPE "(number_fields.-)(sigma_nat.n, sigma_nat.m)" "nat"))) (|sigma_shift_neg| 0 (|sigma_shift_neg-1| |nil| 3308675684 ("" (SKOSIMP*) (("" (LEMMA "sigma_shift_T2") (("" (INST?) (("" (INST - "high!1" "low!1" "0 - m!1") (("" (ASSERT) (("" (PROP) (("1" (REPLACE -1 :HIDE? T) (("1" (REWRITE "sigma_eq") (("1" (SKOSIMP*) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (CASE "high!1<low!1") (("1" (EXPAND "sigma") (("1" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|sigma_shift_T2| FORMULA-DECL NIL |sigma| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|T_high| TYPE-EQ-DECL NIL |sigma| NIL) (|T_low| TYPE-EQ-DECL NIL |sigma| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|sigma_eq| FORMULA-DECL NIL |sigma| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (< CONST-DECL "bool" |reals| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|sigma| DEF-DECL "real" |sigma| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) NIL)) (|sigma_shift_ng2| 0 (|sigma_shift_ng2-1| |nil| 3308675684 ("" (SKOSIMP*) (("" (LEMMA "sigma_shift_T2") (("" (INST?) (("" (INST - "high!1" "low!1" "0-m!1") (("" (ASSERT) (("" (PROP) (("1" (REPLACE -1 :HIDE? T) (("1" (REWRITE "sigma_eq") (("1" (EXPAND "~") (("1" (ASSERT) (("1" (SKOSIMP*) (("1" (ASSERT) (("1" (LIFT-IF) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "high!1<low!1") (("1" (EXPAND "sigma") (("1" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|sigma_shift_T2| FORMULA-DECL NIL |sigma| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|T_high| TYPE-EQ-DECL NIL |sigma| NIL) (|T_low| TYPE-EQ-DECL NIL |sigma| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|sigma_eq| FORMULA-DECL NIL |sigma| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (~ CONST-DECL "nat" |naturalnumbers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|sigma| DEF-DECL "real" |sigma| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (< CONST-DECL "bool" |reals| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) NIL)) (|sigma_shift_i_TCC1| 0 (|sigma_shift_i_TCC1-1| |nil| 3410183793 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) NIL (|sigma_shift_i| SUBTYPE "(number_fields.+)(sigma_nat.low, sigma_nat.i)" "T_low[nat]"))) (|sigma_shift_i_TCC2| 0 (|sigma_shift_i_TCC2-1| |nil| 3410183793 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL)) NIL (|sigma_shift_i| SUBTYPE "(number_fields.+)(sigma_nat.n, sigma_nat.i)" "nat"))) (|sigma_shift_i| 0 (|sigma_shift_i-1| |nil| 3410183811 ("" (SKOSIMP*) (("" (REWRITE "sigma_shift_T2") (("1" (REWRITE "sigma_restrict_eq") (("1" (HIDE 2) (("1" (EXPAND "restrict") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (CASE "low!1 <= high!1") (("1" (ASSERT) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|sigma_shift_T2| FORMULA-DECL NIL |sigma| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|T_high| TYPE-EQ-DECL NIL |sigma| NIL) (|T_low| TYPE-EQ-DECL NIL |sigma| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|restrict| CONST-DECL "[T -> real]" |sigma| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (< CONST-DECL "bool" |reals| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (|sigma_restrict_eq| FORMULA-DECL NIL |sigma| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|sigma| DEF-DECL "real" |sigma| NIL)) NIL)) (|sigma_shift_to_zero| 0 (|sigma_shift_to_zero-2| "" 3790088482 ("" (INDUCT "n") (("1" (SKEEP) (("1" (ASSERT) (("1" (REWRITE "sigma_restrict_eq") (("1" (DECOMPOSE-EQUALITY 1) (("1" (EXPAND "restrict") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (INDUCT "m") (("1" (ASSERT) NIL NIL) ("2" (SKOLEM 1 "kk") (("2" (FLATTEN) (("2" (ASSERT) (("2" (SKEEP) (("2" (ASSERT) (("2" (INST - "F") (("2" (CASE "NOT 1+j <=kk") (("1" (CASE "NOT kk=j") (("1" (ASSERT) NIL NIL) ("2" (REPLACE -1) (("2" (ASSERT) (("2" (EXPAND "sigma" +) (("2" (EXPAND "sigma" +) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "sigma" 1 1) (("2" (REPLACE -2 +) (("2" (ASSERT) (("2" (EXPAND "sigma" 1 2) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|sigma_restrict_eq| FORMULA-DECL NIL |sigma| NIL) (|restrict| CONST-DECL "[T -> real]" |sigma| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|sigma| DEF-DECL "real" |sigma| NIL) (|T_high| TYPE-EQ-DECL NIL |sigma| NIL) (|T_low| TYPE-EQ-DECL NIL |sigma| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (<= CONST-DECL "bool" |reals| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) SHOSTAK) (|sigma_shift_to_zero-1| |nil| 3594380186 ("" (INDUCT "n") (("1" (SKEEP) (("1" (ASSERT) (("1" (REWRITE "sigma_restrict_eq") (("1" (DECOMPOSE-EQUALITY 1) (("1" (EXPAND "restrict") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (INDUCT "m") (("1" (ASSERT) NIL NIL) ("2" (SKOLEM 1 "kk") (("2" (FLATTEN) (("2" (ASSERT) (("2" (SKEEP) (("2" (ASSERT) (("2" (INST - "F") (("2" (CASE "NOT 1+j <=kk") (("1" (CASE "NOT kk=j") (("1" (ASSERT) NIL NIL) ("2" (REPLACE -1) (("2" (ASSERT) (("2" (EXPAND "sigma" +) (("2" (EXPAND "sigma" +) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "sigma" 1 1) (("2" (REPLACE -2 +) (("2" (ASSERT) (("2" (EXPAND "sigma" 1 2) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL)) NIL) NIL SHOSTAK)) (|sigma_first_ge| 0 (|sigma_first_ge-1| |nil| 3308675684 ("" (SKOSIMP*) (("" (REWRITE "sigma_first") NIL NIL)) NIL) ((|sigma_first| FORMULA-DECL NIL |sigma| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|T_high| TYPE-EQ-DECL NIL |sigma| NIL) (|T_low| TYPE-EQ-DECL NIL |sigma| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)) NIL)) (|sigma_split_ge_TCC1| 0 (|sigma_split_ge_TCC1-1| |nil| 3352162210 ("" (SKOSIMP*) (("" (INST + 0) (("" (ASSERT) NIL NIL)) NIL)) NIL) ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL)) NIL (|sigma_split_ge| SUBTYPE "(number_fields.+)(sigma_nat.i, 1)" "T_low[nat]"))) (|sigma_split_ge| 0 (|sigma_split_ge-1| |nil| 3308675684 ("" (SKOSIMP*) (("" (REWRITE "sigma_split") NIL NIL)) NIL) ((|sigma_split| FORMULA-DECL NIL |sigma| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|T_high| TYPE-EQ-DECL NIL |sigma| NIL) (|T_low| TYPE-EQ-DECL NIL |sigma| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)) NIL)) (|sigma_reverse_TCC1| 0 (|sigma_reverse_TCC1-1| |nil| 3481027293 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) NIL (|sigma_reverse| SUBTYPE "(number_fields.-)((number_fields.+)(sigma_nat.high, sigma_nat.low), sigma_nat.n)" "nat"))) (|sigma_reverse| 0 (|sigma_reverse-1| |nil| 3481027293 ("" (CASE "FORALL (F: [nat -> real], k: nat, low: nat):
        sigma(low, low+k, F) =
         sigma(low, low+k,
               LAMBDA (n: nat):
                 IF n > k + 2*low THEN 0 ELSE F(2*low+k - n) ENDIF)") (("1" (SKEEP) (("1" (CASE "high < low") (("1" (EXPAND "sigma" +) (("1" (ASSERT) NIL NIL)) NIL) ("2" (INST - "F" "high-low" "low") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (INDUCT "k") (("1" (SKEEP) (("1" (EXPAND "sigma") (("1" (EXPAND "sigma") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (SKEEP) (("2" (INST - "F" "low") (("2" (EXPAND "sigma" 1 1) (("2" (LEMMA "sigma_split") (("2" (INST - "LAMBDA (n: nat):
               IF n > 1 + j + 2 * low THEN 0
               ELSE F(1 - n + j + 2 * low)
               ENDIF" "1+j+low" "low" "low") (("1" (ASSERT) (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (EXPAND "sigma" + 3) (("1" (EXPAND "sigma" + 3) (("1" (LEMMA "sigma_shift") (("1" (INST - "LAMBDA (n: nat):
               IF n > 1 + j + 2 * low THEN 0
               ELSE F(1 - n + j + 2 * low)
               ENDIF" "low+j" "low" "1") (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (ASSERT) (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (REWRITE "sigma_restrict_eq") (("1" (HIDE 2) (("1" (DECOMPOSE-EQUALITY) (("1" (EXPAND "restrict") (("1" (PROPAX) NIL NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL)) NIL) ((|sigma_split| FORMULA-DECL NIL |sigma| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|sigma_restrict_eq| FORMULA-DECL NIL |sigma| NIL) (|restrict| CONST-DECL "[T -> real]" |sigma| NIL) (|sigma_shift| FORMULA-DECL NIL |sigma_nat| NIL) (|j| SKOLEM-CONST-DECL "nat" |sigma_nat| NIL) (|low| SKOLEM-CONST-DECL "nat" |sigma_nat| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|low| SKOLEM-CONST-DECL "nat" |sigma_nat| NIL) (|high| SKOLEM-CONST-DECL "int" |sigma_nat| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (< CONST-DECL "bool" |reals| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (> CONST-DECL "bool" |reals| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|sigma| DEF-DECL "real" |sigma| NIL) (|T_high| TYPE-EQ-DECL NIL |sigma| NIL) (|T_low| TYPE-EQ-DECL NIL |sigma| NIL) (<= CONST-DECL "bool" |reals| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL)) SHOSTAK)) (|sigma_product_TCC1| 0 (|sigma_product_TCC1-1| |nil| 3541327761 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) NIL (|sigma_product| SUBTYPE "(number_fields.-)(sigma_nat.k, sigma_nat.i)" "nat"))) (|sigma_product| 0 (|sigma_product-2| "" 3790088487 ("" (CASE "FORALL (F, G: [nat -> real], high1, high2: int, low1, low2,rn: nat):
                      rn = high1-low1 IMPLIES
                      sigma(low1, high1, F) * sigma(low2, high2, G) =
                       sigma(low1 + low2, high1 + high2,
                             LAMBDA (k: nat):
                               sigma(low1, high1,
                                     LAMBDA (i: nat):
                                       IF (i < k - high2 OR i > k - low2) THEN 0
                                       ELSE F(i) * G(k - i)
                                       ENDIF))") (("1" (SKEEP) (("1" (CASE "high1 >= low1") (("1" (INST?) (("1" (INST - "high1-low1") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (HIDE -) (("2" (EXPAND "sigma" + 1) (("2" (ASSERT) (("2" (CASE "FORALL (eg1:real): 0*eg1 = 0") (("1" (REWRITE -1) (("1" (HIDE -1) (("1" (REWRITE "sigma_restrict_eq_0") (("1" (HIDE 3) (("1" (SKOSIMP*) (("1" (EXPAND "sigma") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (INDUCT "rn") (("1" (SKEEP) (("1" (CASE "high1 = low1") (("1" (REPLACE -1) (("1" (ASSERT) (("1" (EXPAND "sigma" + 1) (("1" (EXPAND "sigma" + 2) (("1" (REWRITE "sigma_scal" :DIR RL) (("1" (EXPAND "sigma" + 3) (("1" (EXPAND "sigma" + 3) (("1" (ASSERT) (("1" (LEMMA "sigma_shift") (("1" (INVOKE (INST - "%1" _ _ _) (! 1 2 3)) (("1" (INST - "high2" "low2" "low1") (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (REWRITE "sigma_eq") NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (SKEEP) (("2" (CASE "high1 >= low1 AND high2 >= low2") (("1" (FLATTEN) (("1" (INST - "F" "G" "high1-1" "high2" "low1" "low2") (("1" (ASSERT) (("1" (EXPAND "sigma" + 1) (("1" (REPLACE -3) (("1" (HIDE -3) (("1" (EXPAND "sigma" + 5) (("1" (LEMMA "sigma_sum") (("1" (INST - "LAMBDA (k: nat):
               IF (high1 < k - high2 OR high1 > k - low2) THEN 0
               ELSE F(high1) * G(k - high1)
               ENDIF" "LAMBDA (k: nat):
                sigma(low1, high1 - 1,
                      LAMBDA (i: nat):
                        IF (i < k - high2 OR i > k - low2) THEN 0
                        ELSE F(i) * G(k - i)
                        ENDIF)" "high1+high2" "low1+low2") (("1" (REPLACE -1 :DIR RL) (("1" (HIDE -1) (("1" (CASE "FORALL (a1,a2,b1,b2:real): a1=b1 AND a2=b2 IMPLIES a1+a2=b2+b1") (("1" (INST?) (("1" (ASSERT) (("1" (HIDE 2) (("1" (SPLIT +) (("1" (EXPAND "sigma" + 3) (("1" (LEMMA "sigma_restrict_eq_0") (("1" (INST?) (("1" (ASSERT) NIL NIL) ("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "sigma_split") (("2" (INST - "LAMBDA (k: nat):
               IF (high1 < k - high2 OR high1 > k - low2) THEN 0
               ELSE F(high1) * G(k - high1)
               ENDIF" "high1+high2" "low1+low2" "high1+low2-1") (("1" (ASSERT) (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (CASE "NOT sigma(low1 + low2, high1 - 1 + low2,
              LAMBDA (k: nat):
                IF (high1 < k - high2 OR high1 > k - low2) THEN 0
                ELSE F(high1) * G(k - high1)
                ENDIF)
 = 0") (("1" (HIDE 2) (("1" (REWRITE "sigma_restrict_eq_0") NIL NIL)) NIL) ("2" (REPLACES -1) (("2" (ASSERT) (("2" (LEMMA "sigma_shift") (("2" (INST - "LAMBDA (k: nat):
               IF (high1 < k - high2 OR high1 > k - low2) THEN 0
               ELSE F(high1) * G(k - high1)
               ENDIF" "high2" "low2" "high1") (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (REWRITE "sigma_scal" :DIR RL) (("1" (REWRITE "sigma_eq") NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1) (("2" (GROUND) (("2" (EXPAND "sigma" + 2) (("2" (REWRITE "sigma_restrict_eq_0") (("1" (HIDE 3) (("1" (SKOSIMP*) (("1" (REWRITE "sigma_restrict_eq_0") (("1" (HIDE 2) (("1" (SKOSIMP*) (("1" (ASSERT) (("1" (LIFT-IF) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((|sigma_sum| FORMULA-DECL NIL |sigma| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|sigma_split| FORMULA-DECL NIL |sigma| NIL) (|high1| SKOLEM-CONST-DECL "int" |sigma_nat| NIL) (|high2| SKOLEM-CONST-DECL "int" |sigma_nat| NIL) (|low2| SKOLEM-CONST-DECL "nat" |sigma_nat| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|subrange| TYPE-EQ-DECL NIL |integers| NIL) (|sigma_scal| FORMULA-DECL NIL |sigma| NIL) (|sigma_shift| FORMULA-DECL NIL |sigma_nat| NIL) (|sigma_eq| FORMULA-DECL NIL |sigma| NIL) (|low2| SKOLEM-CONST-DECL "nat" |sigma_nat| NIL) (|high2| SKOLEM-CONST-DECL "int" |sigma_nat| NIL) (|low1| SKOLEM-CONST-DECL "nat" |sigma_nat| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|sigma_restrict_eq_0| FORMULA-DECL NIL |sigma| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|high1| SKOLEM-CONST-DECL "int" |sigma_nat| NIL) (|low1| SKOLEM-CONST-DECL "nat" |sigma_nat| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (> CONST-DECL "bool" |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|sigma| DEF-DECL "real" |sigma| NIL) (|T_high| TYPE-EQ-DECL NIL |sigma| NIL) (|T_low| TYPE-EQ-DECL NIL |sigma| NIL) (<= CONST-DECL "bool" |reals| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) SHOSTAK) (|sigma_product-1| |nil| 3541327793 ("" (CASE "FORALL (F, G: [nat -> real], high1, high2: int, low1, low2,rn: nat):
                      rn = high1-low1 IMPLIES
                      sigma(low1, high1, F) * sigma(low2, high2, G) =
                       sigma(low1 + low2, high1 + high2,
                             LAMBDA (k: nat):
                               sigma(low1, high1,
                                     LAMBDA (i: nat):
                                       IF (i < k - high2 OR i > k - low2) THEN 0
                                       ELSE F(i) * G(k - i)
                                       ENDIF))") (("1" (SKEEP) (("1" (CASE "high1 >= low1") (("1" (INST?) (("1" (INST - "high1-low1") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (HIDE -) (("2" (EXPAND "sigma" + 1) (("2" (ASSERT) (("2" (ASSERT) (("2" (CASE "FORALL (eg1:real): 0*eg1 = 0") (("1" (REWRITE -1) (("1" (HIDE -1) (("1" (REWRITE "sigma_restrict_eq_0") (("1" (HIDE 3) (("1" (SKOSIMP*) (("1" (EXPAND "sigma") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE 3) (("3" (FLATTEN) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (INDUCT "rn") (("1" (SKEEP) (("1" (CASE "high1 = low1") (("1" (REPLACE -1) (("1" (ASSERT) (("1" (EXPAND "sigma" + 1) (("1" (EXPAND "sigma" + 2) (("1" (REWRITE "sigma_scal" :DIR RL) (("1" (EXPAND "sigma" + 3) (("1" (EXPAND "sigma" + 3) (("1" (ASSERT) (("1" (LEMMA "sigma_shift") (("1" (INVOKE (INST - "%1" _ _ _) (! 1 2 3)) (("1" (INST - "high2" "low2" "low1") (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (REWRITE "sigma_eq") NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (SKEEP) (("2" (CASE "high1 >= low1 AND high2 >= low2") (("1" (FLATTEN) (("1" (INST - "F" "G" "high1-1" "high2" "low1" "low2") (("1" (ASSERT) (("1" (EXPAND "sigma" + 1) (("1" (REPLACE -3) (("1" (HIDE -3) (("1" (EXPAND "sigma" + 5) (("1" (LEMMA "sigma_sum") (("1" (INST - "LAMBDA (k: nat):
               IF (high1 < k - high2 OR high1 > k - low2) THEN 0
               ELSE F(high1) * G(k - high1)
               ENDIF" "LAMBDA (k: nat):
                sigma(low1, high1 - 1,
                      LAMBDA (i: nat):
                        IF (i < k - high2 OR i > k - low2) THEN 0
                        ELSE F(i) * G(k - i)
                        ENDIF)" "high1+high2" "low1+low2") (("1" (REPLACE -1 :DIR RL) (("1" (HIDE -1) (("1" (CASE "FORALL (a1,a2,b1,b2:real): a1=b1 AND a2=b2 IMPLIES a1+a2=b2+b1") (("1" (INST?) (("1" (ASSERT) (("1" (HIDE 2) (("1" (SPLIT +) (("1" (EXPAND "sigma" + 3) (("1" (LEMMA "sigma_restrict_eq_0") (("1" (INST?) (("1" (ASSERT) NIL NIL) ("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "sigma_split") (("2" (INST - "LAMBDA (k: nat):
               IF (high1 < k - high2 OR high1 > k - low2) THEN 0
               ELSE F(high1) * G(k - high1)
               ENDIF" "high1+high2" "low1+low2" "high1+low2-1") (("1" (ASSERT) (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (CASE "NOT sigma(low1 + low2, high1 - 1 + low2,
              LAMBDA (k: nat):
                IF (high1 < k - high2 OR high1 > k - low2) THEN 0
                ELSE F(high1) * G(k - high1)
                ENDIF)
 = 0") (("1" (HIDE 2) (("1" (REWRITE "sigma_restrict_eq_0") NIL NIL)) NIL) ("2" (REPLACES -1) (("2" (ASSERT) (("2" (LEMMA "sigma_shift") (("2" (INST - "LAMBDA (k: nat):
               IF (high1 < k - high2 OR high1 > k - low2) THEN 0
               ELSE F(high1) * G(k - high1)
               ENDIF" "high2" "low2" "high1") (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (REWRITE "sigma_scal" :DIR RL) (("1" (REWRITE "sigma_eq") NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1) (("2" (GROUND) (("2" (EXPAND "sigma" + 2) (("2" (REWRITE "sigma_restrict_eq_0") (("1" (HIDE 3) (("1" (SKOSIMP*) (("1" (REWRITE "sigma_restrict_eq_0") (("1" (HIDE 2) (("1" (SKOSIMP*) (("1" (ASSERT) (("1" (LIFT-IF) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("4" (HIDE 2) (("4" (SKOSIMP*) (("4" (ASSERT) NIL NIL)) NIL)) NIL) ("5" (HIDE 2) (("5" (SKOSIMP*) (("5" (ASSERT) NIL NIL)) NIL)) NIL) ("6" (HIDE 2) (("6" (SKOSIMP*) (("6" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("4" (HIDE 2) (("4" (SKOSIMP*) (("4" (ASSERT) NIL NIL)) NIL)) NIL) ("5" (HIDE 2) (("5" (SKOSIMP*) (("5" (ASSERT) NIL NIL)) NIL)) NIL) ("6" (HIDE 2) (("6" (SKOSIMP*) (("6" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|sigma_by2s| 0 (|sigma_by2s-1| |nil| 3707646673 ("" (SKOLEM + ("F!1" "G!1" "_")) (("" (INDUCT "n") (("1" (ASSERT) (("1" (SKOSIMP*) (("1" (EXPAND "sigma") (("1" (EXPAND "sigma") (("1" (EXPAND "sigma") (("1" (INST -1 "0") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (SKOSIMP*) (("2" (EXPAND "sigma" 1) (("2" (EXPAND "sigma" 1) (("2" (SPLIT -1) (("1" (ASSERT) (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (EXPAND "sigma" 1 1) (("1" (INST -1 "j!1+1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (INST - "k!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|T_low| TYPE-EQ-DECL NIL |sigma| NIL) (|T_high| TYPE-EQ-DECL NIL |sigma| NIL) (|sigma| DEF-DECL "real" |sigma| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)) NIL)) (|sigma_tolambda| 0 (|sigma_tolambda-1| |nil| 3620720753 ("" (SKEEP) (("" (REWRITE "sigma_eq") NIL NIL)) NIL) ((|sigma_eq| FORMULA-DECL NIL |sigma| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|T_high| TYPE-EQ-DECL NIL |sigma| NIL) (|T_low| TYPE-EQ-DECL NIL |sigma| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)) SHOSTAK)) (|sigma_bij_TCC1| 0 (|sigma_bij_TCC1-1| |nil| 3620667440 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|sigma_bij| SUBTYPE "sigma_nat.i" "nat"))) (|sigma_bij_TCC2| 0 (|sigma_bij_TCC2-1| |nil| 3620667440 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|sigma_bij| SUBTYPE "sigma_nat.j" "nat"))) (|sigma_bij| 0 (|sigma_bij-2| "" 3790088489 ("" (SKEEP) (("" (LABEL "ontoz" -2) (("" (LABEL "rangez" -1) (("" (LABEL "injz" -3) (("" (CASE "NOT low<=high") (("1" (EXPAND "sigma" +) (("1" (ASSERT) NIL NIL)) NIL) ("2" (NAME "FF" "LAMBDA (k:nat): (LAMBDA (i:nat): IF low<=i AND i<=low+k THEN F(i) ELSE 0 ENDIF)") (("2" (CASE "FORALL (k:nat): low+k<=high IMPLIES sigma(low,high, FF(k)) = sigma(low,high,FF(k) o sig)") (("1" (INST - "high-low") (("1" (ASSERT) (("1" (CASE "sigma(low, high, FF(high - low)) = sigma(low, high,F) AND  sigma(low, high, FF(high - low) o sig) = sigma(low, high, F o sig)") (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL) ("2" (SPLIT 1) (("1" (REWRITE "sigma_eq" 1) (("1" (SKOSIMP*) (("1" (TYPEPRED "n!1") (("1" (EXPAND "FF" 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "sigma_eq" 1) (("2" (EXPAND "o") (("2" (SKOSIMP*) (("2" (EXPAND "FF" 1) (("2" (LIFT-IF) (("2" (INST - "n!1") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (INDUCT "k") (("1" (ASSERT) (("1" (INST -4 "low") (("1" (SKOSIMP*) (("1" (LEMMA "sigma_eq_one_arg") (("1" (INST?) (("1" (INST - "low") (("1" (ASSERT) (("1" (SPLIT -) (("1" (REPLACES -1) (("1" (LEMMA "sigma_eq_one_arg") (("1" (INST?) (("1" (INST - "j!1") (("1" (ASSERT) (("1" (SPLIT -) (("1" (REPLACES -1) (("1" (EXPAND "o") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (EXPAND "o" 1) (("2" (EXPAND "FF" 1) (("2" (INST - "j!1" "i!1") (("2" (LIFT-IF) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP*) (("3" (INST - "i!1" "j!1") (("3" (EXPAND "o" 1) (("3" (ASSERT) (("3" (EXPAND "FF" 1) (("3" (LIFT-IF) (("3" (INST - "i!1") (("3" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) NIL NIL) ("3" (SKOSIMP*) (("3" (INST - "i!1" "j!1") (("3" (EXPAND "FF" 1) (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOLEM 1 "k") (("2" (FLATTEN) (("2" (NAME "GG" "LAMBDA (i:nat): IF i=low+k+1 THEN F(i) ELSE 0 ENDIF") (("2" (ASSERT) (("2" (CASE "NOT (FF(k+1) = (LAMBDA (d:nat): FF(k)(d) + GG(d)))") (("1" (DECOMPOSE-EQUALITY 1) (("1" (EXPAND "FF" 1) (("1" (EXPAND "GG" 1) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (ASSERT) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (NAME "HH" "LAMBDA (i:nat): IF sig(i)=(low+k+1) THEN F(sig(i)) ELSE 0 ENDIF") (("2" (CASE "NOT ((FF(k+1) o sig) = (LAMBDA (d:nat): (FF(k) o sig)(d) + HH(d)))") (("1" (DECOMPOSE-EQUALITY 1) (("1" (EXPAND "o" 1) (("1" (EXPAND "FF" 1) (("1" (EXPAND "HH" 1) (("1" (LIFT-IF) (("1" (ASSERT) (("1" (LIFT-IF) (("1" (ASSERT) (("1" (LIFT-IF) (("1" (ASSERT) (("1" (LIFT-IF) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACES -1 +) (("2" (REPLACES -2 +) (("2" (REWRITE "sigma_sum" :DIR RL) (("2" (REWRITE "sigma_sum" :DIR RL) (("2" (CASE "sigma(low,high,GG) = sigma(low,high,HH)") (("1" (REPLACES -1) (("1" (ASSERT) (("1" (REWRITE "sigma_tolambda" -3) (("1" (REPLACES -3) (("1" (REWRITE "sigma_tolambda" 1) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (LEMMA "sigma_eq_one_arg2") (("2" (INST - "GG" "high" "low" "low+k+1") (("2" (ASSERT) (("2" (SPLIT -) (("1" (REPLACES -1) (("1" (LEMMA "sigma_eq_one_arg2") (("1" (INST "ontoz" "low+k+1") (("1" (SKOSIMP*) (("1" (INST - "HH" "high" "low" "j!1") (("1" (ASSERT) (("1" (SPLIT -) (("1" (REPLACES -1) (("1" (EXPAND "GG" 1) (("1" (EXPAND "HH" 1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (EXPAND "HH" 2) (("2" (LIFT-IF) (("2" (GROUND) (("2" (INST - "i!1" "j!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (EXPAND "GG" +) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (GG SKOLEM-CONST-DECL "[nat -> real]" |sigma_nat| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (HH SKOLEM-CONST-DECL "[nat -> real]" |sigma_nat| NIL) (|sigma_eq_one_arg2| FORMULA-DECL NIL |sigma| NIL) (|sigma_tolambda| FORMULA-DECL NIL |sigma_nat| NIL) (|sigma_sum| FORMULA-DECL NIL |sigma| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|sigma_eq_one_arg| FORMULA-DECL NIL |sigma| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|low| SKOLEM-CONST-DECL "nat" |sigma_nat| NIL) (|high| SKOLEM-CONST-DECL "int" |sigma_nat| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|sigma_eq| FORMULA-DECL NIL |sigma| NIL) (|subrange| TYPE-EQ-DECL NIL |integers| NIL) (FF SKOLEM-CONST-DECL "[nat -> [nat -> real]]" |sigma_nat| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|T_low| TYPE-EQ-DECL NIL |sigma| NIL) (|T_high| TYPE-EQ-DECL NIL |sigma| NIL) (O CONST-DECL "T3" |function_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|sigma| DEF-DECL "real" |sigma| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)) SHOSTAK) (|sigma_bij-1| |nil| 3620667441 ("" (SKEEP) (("" (LABEL "ontoz" -2) (("" (LABEL "rangez" -1) (("" (LABEL "injz" -3) (("" (CASE "NOT low<=high") (("1" (EXPAND "sigma" +) (("1" (ASSERT) NIL NIL)) NIL) ("2" (NAME "FF" "LAMBDA (k:nat): (LAMBDA (i:nat): IF low<=i AND i<=low+k THEN F(i) ELSE 0 ENDIF)") (("2" (CASE "FORALL (k:nat): low+k<=high IMPLIES sigma(low,high, FF(k)) = sigma(low,high,FF(k) o sig)") (("1" (INST - "high-low") (("1" (ASSERT) (("1" (CASE "sigma(low, high, FF(high - low)) = sigma(low, high,F) AND  sigma(low, high, FF(high - low) o sig) = sigma(low, high, F o sig)") (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL) ("2" (SPLIT 1) (("1" (REWRITE "sigma_eq" 1) (("1" (SKOSIMP*) (("1" (TYPEPRED "n!1") (("1" (EXPAND "FF" 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "sigma_eq" 1) (("2" (EXPAND "o") (("2" (SKOSIMP*) (("2" (EXPAND "FF" 1) (("2" (LIFT-IF) (("2" (INST - "n!1") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (INDUCT "k") (("1" (ASSERT) (("1" (INST -4 "low") (("1" (SKOSIMP*) (("1" (LEMMA "sigma_eq_one_arg") (("1" (INST?) (("1" (INST - "low") (("1" (ASSERT) (("1" (SPLIT -) (("1" (REPLACES -1) (("1" (LEMMA "sigma_eq_one_arg") (("1" (INST?) (("1" (INST - "j!1") (("1" (ASSERT) (("1" (SPLIT -) (("1" (REPLACES -1) (("1" (EXPAND "o") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (EXPAND "o" 1) (("2" (EXPAND "FF" 1) (("2" (INST - "j!1" "i!1") (("2" (LIFT-IF) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP*) (("3" (INST - "i!1" "j!1") (("3" (EXPAND "o" 1) (("3" (ASSERT) (("3" (EXPAND "FF" 1) (("3" (LIFT-IF) (("3" (INST - "i!1") (("3" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) NIL NIL) ("3" (SKOSIMP*) (("3" (INST - "i!1" "j!1") (("3" (EXPAND "FF" 1) (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOLEM 1 "k") (("2" (FLATTEN) (("2" (NAME "GG" "LAMBDA (i:nat): IF i=low+k+1 THEN F(i) ELSE 0 ENDIF") (("2" (ASSERT) (("2" (CASE "NOT (FF(k+1) = (LAMBDA (d:nat): FF(k)(d) + GG(d)))") (("1" (DECOMPOSE-EQUALITY 1) (("1" (EXPAND "FF" 1) (("1" (EXPAND "GG" 1) (("1" (ASSERT) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (ASSERT) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (NAME "HH" "LAMBDA (i:nat): IF sig(i)=(low+k+1) THEN F(sig(i)) ELSE 0 ENDIF") (("2" (CASE "NOT ((FF(k+1) o sig) = (LAMBDA (d:nat): (FF(k) o sig)(d) + HH(d)))") (("1" (DECOMPOSE-EQUALITY 1) (("1" (EXPAND "o" 1) (("1" (EXPAND "FF" 1) (("1" (EXPAND "HH" 1) (("1" (LIFT-IF) (("1" (ASSERT) (("1" (LIFT-IF) (("1" (ASSERT) (("1" (LIFT-IF) (("1" (ASSERT) (("1" (LIFT-IF) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACES -1 +) (("2" (REPLACES -2 +) (("2" (REWRITE "sigma_sum" :DIR RL) (("2" (REWRITE "sigma_sum" :DIR RL) (("2" (CASE "sigma(low,high,GG) = sigma(low,high,HH)") (("1" (REPLACES -1) (("1" (ASSERT) (("1" (REWRITE "sigma_tolambda" -3) (("1" (REPLACES -3) (("1" (REWRITE "sigma_tolambda" 1) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (LEMMA "sigma_eq_one_arg2") (("2" (INST - "GG" "high" "low" "low+k+1") (("2" (ASSERT) (("2" (SPLIT -) (("1" (REPLACES -1) (("1" (LEMMA "sigma_eq_one_arg2") (("1" (INST "ontoz" "low+k+1") (("1" (SKOSIMP*) (("1" (INST - "HH" "high" "low" "j!1") (("1" (ASSERT) (("1" (SPLIT -) (("1" (REPLACES -1) (("1" (EXPAND "GG" 1) (("1" (EXPAND "HH" 1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (EXPAND "HH" 2) (("2" (LIFT-IF) (("2" (GROUND) (("2" (INST - "i!1" "j!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (EXPAND "GG" +) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL) ("4" (SKOSIMP*) (("4" (ASSERT) NIL NIL)) NIL) ("5" (SKOSIMP*) (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|sigma_inj_TCC1| 0 (|sigma_inj_TCC1-1| |nil| 3621161667 ("" (SUBTYPE-TCC) NIL NIL) ((/= CONST-DECL "boolean" |notequal| NIL)) NIL (|sigma_inj| SUBTYPE "sigma_nat.j" "nat"))) (|sigma_inj_TCC2| 0 (|sigma_inj_TCC2-1| |nil| 3621161667 ("" (SUBTYPE-TCC) NIL NIL) ((/= CONST-DECL "boolean" |notequal| NIL)) NIL (|sigma_inj| SUBTYPE "sigma_nat.i" "nat"))) (|sigma_inj| 0 (|sigma_inj-3| "" 3790088492 ("" (SKEEP) (("" (LABEL "Gdef" -4) (("" (LABEL "ontoz" -3) (("" (LABEL "rangez" -1) (("" (LABEL "injz" -2) (("" (CASE "NOT low1<=high1") (("1" (EXPAND "sigma" + 1) (("1" (ASSERT) (("1" (REWRITE "sigma_restrict_eq_0" +) (("1" (SKOSIMP*) (("1" (INST "ontoz" "i!1") (("1" (ASSERT) (("1" (SKOSIMP*) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "NOT low2<=high2") (("1" (ASSERT) (("1" (INST - "low1") (("1" (ASSERT) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (NAME "FF" "LAMBDA (k:nat): (LAMBDA (i:nat): IF low1<=i AND i<=low1+k THEN F(i) ELSE 0 ENDIF)") (("2" (NAME "GG" "LAMBDA (k:nat): (LAMBDA (i:nat): IF (EXISTS (j:nat): low1<=j AND j<=low1+k AND sig(j)=i) THEN G(i) ELSE 0 ENDIF)") (("2" (CASE "FORALL (k:nat): low1+k<=high1 IMPLIES sigma(low1,high1, FF(k)) = sigma(low2,high2,GG(k))") (("1" (INST - "high1-low1") (("1" (ASSERT) (("1" (CASE "sigma(low1, high1, FF(high1 - low1)) = sigma(low1, high1,F) AND  sigma(low2, high2, GG(high1 - low1)) = sigma(low2, high2, G)") (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL) ("2" (SPLIT 1) (("1" (REWRITE "sigma_eq" 1) (("1" (SKOSIMP*) (("1" (EXPAND "FF" 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "sigma_eq" 1) (("2" (SKOSIMP*) (("2" (EXPAND "GG" 1) (("2" (LIFT-IF) (("2" (GROUND) (("2" (COPY "ontoz") (("2" (INST - "n!1") (("2" (ASSERT) (("2" (SKEEP -) (("2" (INST + "j") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (INDUCT "k") (("1" (ASSERT) (("1" (LEMMA "sigma_eq_one_arg2") (("1" (INST?) (("1" (INST - "low1") (("1" (ASSERT) (("1" (SPLIT -) (("1" (REPLACES -1) (("1" (LEMMA "sigma_eq_one_arg2") (("1" (INST?) (("1" (INST - "sig(low1)") (("1" (ASSERT) (("1" (SPLIT -) (("1" (REPLACES -1) (("1" (EXPAND "FF" 1) (("1" (EXPAND "GG" 1) (("1" (LIFT-IF) (("1" (GROUND) (("1" (INST? "Gdef") NIL NIL) ("2" (INST + "low1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST "rangez" "low1") (("2" (ASSERT) NIL NIL)) NIL) ("3" (INST "rangez" "low1") (("3" (ASSERT) NIL NIL)) NIL) ("4" (SKOSIMP*) (("4" (EXPAND "GG" 2) (("4" (LIFT-IF) (("4" (GROUND) (("4" (SKOSIMP*) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (EXPAND "FF" 2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOLEM 1 "k") (("2" (ASSERT) (("2" (FLATTEN) (("2" (ASSERT) (("2" (CASE "sigma(low1, high1, FF(1 + k)) = sigma(low1, high1, FF(k))+F(low1+k+1)") (("1" (CASE "sigma(low2, high2, GG(1 + k)) = sigma(low2, high2, GG(k)) + G(sig(low1+k+1))") (("1" (COPY "Gdef") (("1" (INST - "low1+k+1") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (HIDE (-1 2)) (("2" (NAME "RD5" "LAMBDA (i:nat): IF i = sig(low1 + k + 1) THEN G(i) ELSE 0 ENDIF") (("2" (CASE "GG(1+k) = (LAMBDA (pz:nat): GG(k)(pz) + RD5(pz))") (("1" (REPLACES -1 +) (("1" (REWRITE "sigma_sum" :DIR RL) (("1" (LEMMA "sigma_tolambda") (("1" (INST - "GG(k)" "high2" "low2") (("1" (REPLACES -1 :DIR RL) (("1" (LEMMA "sigma_eq_one_arg2") (("1" (INST - "RD5" "high2" "low2" "sig(low1+k+1)") (("1" (ASSERT) (("1" (SPLIT -) (("1" (EXPAND "RD5" -1 2) (("1" (PROPAX) NIL NIL)) NIL) ("2" (INST? "rangez") (("2" (ASSERT) NIL NIL)) NIL) ("3" (INST? "rangez") (("3" (ASSERT) NIL NIL)) NIL) ("4" (SKOSIMP*) (("4" (EXPAND "RD5" 2) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (DECOMPOSE-EQUALITY 1) (("2" (EXPAND "GG" 1) (("2" (EXPAND "RD5" +) (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (ASSERT) (("2" (GROUND) (("1" (SKEEP -2) (("1" (COPY "injz") (("1" (INST - "j" "1+k+low1") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (INST + "j") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (INST + "1+k+low1") (("3" (ASSERT) NIL NIL)) NIL) ("4" (SKEEP -1) (("4" (INST + "j") (("4" (ASSERT) NIL NIL)) NIL)) NIL) ("5" (INST + "1+k+low1") (("5" (INST + "1+k+low1") (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (NAME "R2D2" "LAMBDA (i:nat): IF i = low1+k+1 THEN F(i) ELSE 0 ENDIF") (("2" (CASE "FF(1+k) = (LAMBDA (j:nat): FF(k)(j) + R2D2(j))") (("1" (REPLACE -1) (("1" (HIDE 2) (("1" (REWRITE "sigma_sum" :DIR RL) (("1" (LEMMA "sigma_tolambda") (("1" (INST - "FF(k)" "high1" "low1") (("1" (REPLACES -1 :DIR RL) (("1" (ASSERT) (("1" (LEMMA "sigma_eq_one_arg2") (("1" (INST?) (("1" (INST - "1+k+low1") (("1" (ASSERT) (("1" (SPLIT -) (("1" (REPLACES -1) (("1" (EXPAND "R2D2" +) (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (EXPAND "R2D2" 2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE (2 3)) (("2" (DECOMPOSE-EQUALITY 1) (("2" (EXPAND "FF" 1) (("2" (EXPAND "R2D2" +) (("2" (LIFT-IF) (("2" (ASSERT) (("2" (LIFT-IF) (("2" (ASSERT) (("2" (LIFT-IF) (("2" (ASSERT) (("2" (LIFT-IF) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|subrange| TYPE-EQ-DECL NIL |integers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|sigma_restrict_eq_0| FORMULA-DECL NIL |sigma| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|T_high| TYPE-EQ-DECL NIL |sigma| NIL) (|T_low| TYPE-EQ-DECL NIL |sigma| NIL) (|sigma| DEF-DECL "real" |sigma| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (FF SKOLEM-CONST-DECL "[nat -> [nat -> real]]" |sigma_nat| NIL) (|sigma_eq| FORMULA-DECL NIL |sigma| NIL) (GG SKOLEM-CONST-DECL "[nat -> [nat -> real]]" |sigma_nat| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|high1| SKOLEM-CONST-DECL "int" |sigma_nat| NIL) (|low1| SKOLEM-CONST-DECL "nat" |sigma_nat| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|sigma_eq_one_arg2| FORMULA-DECL NIL |sigma| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (R2D2 SKOLEM-CONST-DECL "[nat -> real]" |sigma_nat| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|j| SKOLEM-CONST-DECL "nat" |sigma_nat| NIL) (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|sigma_tolambda| FORMULA-DECL NIL |sigma_nat| NIL) (RD5 SKOLEM-CONST-DECL "[nat -> real]" |sigma_nat| NIL) (|sigma_sum| FORMULA-DECL NIL |sigma| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) SHOSTAK) (|sigma_inj-2| |nil| 3621161684 ("" (SKEEP) (("" (LABEL "Gdef" -4) (("" (LABEL "ontoz" -3) (("" (LABEL "rangez" -1) (("" (LABEL "injz" -2) (("" (CASE "NOT low1<=high1") (("1" (EXPAND "sigma" + 1) (("1" (ASSERT) (("1" (REWRITE "sigma_restrict_eq_0" +) (("1" (SKOSIMP*) (("1" (INST "ontoz" "i!1") (("1" (ASSERT) (("1" (SKOSIMP*) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "NOT low2<=high2") (("1" (ASSERT) (("1" (INST - "low1") (("1" (ASSERT) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (NAME "FF" "LAMBDA (k:nat): (LAMBDA (i:nat): IF low1<=i AND i<=low1+k THEN F(i) ELSE 0 ENDIF)") (("2" (NAME "GG" "LAMBDA (k:nat): (LAMBDA (i:nat): IF (EXISTS (j:nat): low1<=j AND j<=low1+k AND sig(j)=i) THEN G(i) ELSE 0 ENDIF)") (("2" (CASE "FORALL (k:nat): low1+k<=high1 IMPLIES sigma(low1,high1, FF(k)) = sigma(low2,high2,GG(k))") (("1" (INST - "high1-low1") (("1" (ASSERT) (("1" (CASE "sigma(low1, high1, FF(high1 - low1)) = sigma(low1, high1,F) AND  sigma(low2, high2, GG(high1 - low1)) = sigma(low2, high2, G)") (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL) ("2" (SPLIT 1) (("1" (REWRITE "sigma_eq" 1) (("1" (SKOSIMP*) (("1" (EXPAND "FF" 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "sigma_eq" 1) (("2" (SKOSIMP*) (("2" (EXPAND "GG" 1) (("2" (LIFT-IF) (("2" (GROUND) (("2" (COPY "ontoz") (("2" (INST - "n!1") (("2" (ASSERT) (("2" (SKEEP -) (("2" (INST + "j") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (INDUCT "k") (("1" (ASSERT) (("1" (LEMMA "sigma_eq_one_arg2") (("1" (INST?) (("1" (INST - "low1") (("1" (ASSERT) (("1" (SPLIT -) (("1" (REPLACES -1) (("1" (LEMMA "sigma_eq_one_arg2") (("1" (INST?) (("1" (INST - "sig(low1)") (("1" (ASSERT) (("1" (SPLIT -) (("1" (REPLACES -1) (("1" (EXPAND "FF" 1) (("1" (EXPAND "GG" 1) (("1" (LIFT-IF) (("1" (GROUND) (("1" (INST? "Gdef") NIL NIL) ("2" (INST + "low1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST "rangez" "low1") (("2" (ASSERT) NIL NIL)) NIL) ("3" (INST "rangez" "low1") (("3" (ASSERT) NIL NIL)) NIL) ("4" (SKOSIMP*) (("4" (EXPAND "GG" 2) (("4" (LIFT-IF) (("4" (GROUND) (("4" (SKOSIMP*) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (EXPAND "FF" 2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOLEM 1 "k") (("2" (ASSERT) (("2" (FLATTEN) (("2" (ASSERT) (("2" (CASE "sigma(low1, high1, FF(1 + k)) = sigma(low1, high1, FF(k))+F(low1+k+1)") (("1" (CASE "sigma(low2, high2, GG(1 + k)) = sigma(low2, high2, GG(k)) + G(sig(low1+k+1))") (("1" (COPY "Gdef") (("1" (INST - "low1+k+1") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (HIDE (-1 2)) (("2" (NAME "RD5" "LAMBDA (i:nat): IF i = sig(low1 + k + 1) THEN G(i) ELSE 0 ENDIF") (("2" (CASE "GG(1+k) = (LAMBDA (pz:nat): GG(k)(pz) + RD5(pz))") (("1" (REPLACES -1 +) (("1" (REWRITE "sigma_sum" :DIR RL) (("1" (LEMMA "sigma_tolambda") (("1" (INST - "GG(k)" "high2" "low2") (("1" (REPLACES -1 :DIR RL) (("1" (LEMMA "sigma_eq_one_arg2") (("1" (INST - "RD5" "high2" "low2" "sig(low1+k+1)") (("1" (ASSERT) (("1" (SPLIT -) (("1" (EXPAND "RD5" -1 2) (("1" (PROPAX) NIL NIL)) NIL) ("2" (INST? "rangez") (("2" (ASSERT) NIL NIL)) NIL) ("3" (INST? "rangez") (("3" (ASSERT) NIL NIL)) NIL) ("4" (SKOSIMP*) (("4" (EXPAND "RD5" 2) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (DECOMPOSE-EQUALITY 1) (("2" (EXPAND "GG" 1) (("2" (EXPAND "RD5" +) (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (ASSERT) (("2" (GROUND) (("1" (SKEEP -2) (("1" (COPY "injz") (("1" (INST - "j" "1+k+low1") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (INST + "j") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (INST + "1+k+low1") (("3" (ASSERT) NIL NIL)) NIL) ("4" (SKEEP -1) (("4" (INST + "j") (("4" (ASSERT) NIL NIL)) NIL)) NIL) ("5" (INST + "1+k+low1") (("5" (INST + "1+k+low1") (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (NAME "R2D2" "LAMBDA (i:nat): IF i = low1+k+1 THEN F(i) ELSE 0 ENDIF") (("2" (CASE "FF(1+k) = (LAMBDA (j:nat): FF(k)(j) + R2D2(j))") (("1" (REPLACE -1) (("1" (HIDE 2) (("1" (REWRITE "sigma_sum" :DIR RL) (("1" (LEMMA "sigma_tolambda") (("1" (INST - "FF(k)" "high1" "low1") (("1" (REPLACES -1 :DIR RL) (("1" (ASSERT) (("1" (LEMMA "sigma_eq_one_arg2") (("1" (INST?) (("1" (INST - "1+k+low1") (("1" (ASSERT) (("1" (SPLIT -) (("1" (REPLACES -1) (("1" (EXPAND "R2D2" +) (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (EXPAND "R2D2" 2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE (2 3)) (("2" (DECOMPOSE-EQUALITY 1) (("2" (EXPAND "FF" 1) (("2" (EXPAND "R2D2" +) (("2" (LIFT-IF) (("2" (ASSERT) (("2" (LIFT-IF) (("2" (ASSERT) (("2" (LIFT-IF) (("2" (ASSERT) (("2" (LIFT-IF) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL) ("4" (SKOSIMP*) (("4" (ASSERT) NIL NIL)) NIL) ("5" (SKOSIMP*) (("5" (ASSERT) NIL NIL)) NIL) ("6" (SKOSIMP*) (("6" (ASSERT) NIL NIL)) NIL) ("7" (SKOSIMP*) (("7" (ASSERT) NIL NIL)) NIL) ("8" (SKOSIMP*) (("8" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL) (|sigma_inj-1| |nil| 3621161674 ("" (POSTPONE) NIL NIL) NIL SHOSTAK)) (|sigma_0_neg| 0 (|sigma_0_neg-1| |nil| 3403521650 ("" (SKOSIMP*) (("" (EXPAND "sigma") (("" (PROPAX) NIL NIL)) NIL)) NIL) ((|sigma| DEF-DECL "real" |sigma| NIL)) SHOSTAK)) (|sigma_product2_TCC1| 0 (|sigma_product2_TCC1-1| |nil| 3615631562 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|mod| CONST-DECL "{k | abs(k) < abs(j)}" |mod| NIL) (|nonneg_floor_is_nat| APPLICATION-JUDGEMENT "nat" |floor_ceil| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|nnrat_div_posrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals| NIL)) NIL (|sigma_product2| SUBTYPE "number_fields./(((number_fields.-)(sigma_nat.k, mod.mod(sigma_nat.k, sigma_nat.N))), sigma_nat.N)" "nat"))) (|sigma_product2| 0 (|sigma_product2-3| "" 3882375928 ("" (INDUCT "M") (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL) ("3" (SKEEP) (("3" (SKEEP) (("3" (LEMMA "sigma_split_ge") (("3" (INST-CP -1 "F" "j" "j-1" "0") (("3" (INST -1 "LAMBDA (k: nat): F((k - mod(k, N)) / N) * G(mod(k, N))" "(j+1)*N-1" "j*N-1" "0") (("1" (SPLIT -2) (("1" (SPLIT -2) (("1" (CASE-REPLACE "j+1-1=j") (("1" (HIDE -1) (("1" (REPLACE -2) (("1" (REPLACE -1) (("1" (CASE-REPLACE "j*N-1+1 = j*N") (("1" (SIMPLIFY 1) (("1" (SPLIT -4) (("1" (INST -1 "F" "G" "N") (("1" (REPLACE -1) (("1" (SIMPLIFY 1) (("1" (HIDE -) (("1" (LEMMA "sigma_shift_to_zero") (("1" (INST -1 "LAMBDA (k: nat): F((k - mod(k, N)) / N) * G(mod(k, N))" "N-1 +N*j" "j*N") (("1" (SPLIT -1) (("1" (REPLACE -1) (("1" (CASE-REPLACE "N-1+N*j-j*N = N-1") (("1" (HIDE -) (("1" (LEMMA "sigma_eq") (("1" (INST -1 "LAMBDA (i: nat):
               F((i + j * N - mod(i + j * N, N)) / N) *
                G(mod(i + j * N, N))" "LAMBDA (i: nat): G(i)*F(j)" "N-1" "0") (("1" (SPLIT -1) (("1" (REPLACE -1) (("1" (LEMMA "sigma_scal_right") (("1" (INST -1 "G" "F(j)" "N-1" "0") (("1" (REPLACE -1) (("1" (LEMMA "sigma_eq_arg") (("1" (INST -1 "F" "j") (("1" (REPLACE -1) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKEEP) (("2" (CASE-REPLACE "mod(n+j*N, N) = n") (("1" (GROUND) NIL NIL) ("2" (HIDE 2) (("2" (EXPAND "mod") (("2" (CASE-REPLACE "(j*N+n)/N = n/N + j") (("1" (LEMMA "floor_plus_int") (("1" (INST -1 "j" "n/N") (("1" (REPLACE -1) (("1" (SIMPLIFY 1) (("1" (LEMMA "floor_0") (("1" (INST -1 "n/N") (("1" (FLATTEN) (("1" (HIDE -1) (("1" (SPLIT -1) (("1" (REPLACE -1) (("1" (GROUND) NIL NIL)) NIL) ("2" (CROSS-MULT 1) NIL NIL) ("3" (CROSS-MULT 1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED ("j")) (("2" (SPLIT-INEQ -1) (("2" (REPLACE -1) (("2" (LEMMA "sigma_eq_arg") (("2" (INST -1 "F" "0") (("2" (REPLACE -1) (("2" (LEMMA "sigma_eq") (("2" (INST -1 "LAMBDA (k: nat): F((k - mod(k, N)) / N) * G(mod(k, N))" "LAMBDA (k:nat): F(0)*G(k)" "N-1" "0") (("1" (SPLIT -1) (("1" (REPLACE -1) (("1" (LEMMA "sigma_scal_right") (("1" (INST -1 "G" "F(0)" "N-1" "0") (("1" (REPLACE -1) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SKEEP) (("2" (CASE-REPLACE "mod(n, N) = n") (("1" (GROUND) NIL NIL) ("2" (HIDE 2) (("2" (TYPEPRED ("n")) (("2" (GRIND) (("2" (CASE-REPLACE "floor(n/N)=0") (("1" (GROUND) NIL NIL) ("2" (HIDE 2) (("2" (GRIND) (("2" (TYPEPRED ("N")) (("2" (GRIND) (("2" (LEMMA "floor_0") (("2" (INST -1 "n/N") (("2" (FLATTEN) (("2" (HIDE -1) (("2" (CASE "n/N<1") (("1" (DIV-BY -4 "N") (("1" (GRIND) NIL NIL)) NIL) ("2" (CROSS-MULT 1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SKOSIMP*) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL) ("3" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL) ("3" (GROUND) NIL NIL)) NIL) ("2" (SKEEP) (("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE 2) (("4" (SKEEP) (("4" (SKEEP) (("4" (LEMMA "mod_pos") (("4" (INST -1 "k" "N") (("4" (FLATTEN) (("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|sigma_product2-2| "" 3790088495 ("" (INDUCT "M") (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL) ("3" (SKEEP) (("3" (SKEEP) (("3" (LEMMA "sigma_split_ge") (("3" (INST-CP -1 "F" "j" "j-1" "0") (("3" (INST -1 "LAMBDA (k: nat): F((k - mod(k, N)) / N) * G(mod(k, N))" "(j+1)*N-1" "j*N-1" "0") (("1" (SPLIT -2) (("1" (SPLIT -2) (("1" (CASE-REPLACE "j+1-1=j") (("1" (HIDE -1) (("1" (REPLACE -2) (("1" (REPLACE -1) (("1" (CASE-REPLACE "j*N-1+1 = j*N") (("1" (SIMPLIFY 1) (("1" (SPLIT -4) (("1" (INST -1 "F" "G" "N") (("1" (REPLACE -1) (("1" (SIMPLIFY 1) (("1" (HIDE -) (("1" (LEMMA "sigma_shift_to_zero") (("1" (INST -1 "LAMBDA (k: nat): F((k - mod(k, N)) / N) * G(mod(k, N))" "N-1 +N*j" "j*N") (("1" (SPLIT -1) (("1" (REPLACE -1) (("1" (CASE-REPLACE "N-1+N*j-j*N = N-1") (("1" (HIDE -) (("1" (LEMMA "sigma_eq") (("1" (INST -1 "LAMBDA (i: nat):
               F((i + j * N - mod(i + j * N, N)) / N) *
                G(mod(i + j * N, N))" "LAMBDA (i: nat): G(i)*F(j)" "N-1" "0") (("1" (SPLIT -1) (("1" (REPLACE -1) (("1" (LEMMA "sigma_scal_right") (("1" (INST -1 "G" "F(j)" "N-1" "0") (("1" (REPLACE -1) (("1" (LEMMA "sigma_eq_arg") (("1" (INST -1 "F" "j") (("1" (REPLACE -1) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKEEP) (("2" (CASE-REPLACE "mod(n+j*N, N) = n") (("1" (GROUND) NIL NIL) ("2" (HIDE 2) (("2" (EXPAND "mod") (("2" (CASE-REPLACE "(j*N+n)/N = n/N + j") (("1" (LEMMA "floor_plus_int") (("1" (INST -1 "j" "n/N") (("1" (REPLACE -1) (("1" (SIMPLIFY 1) (("1" (LEMMA "floor_0") (("1" (INST -1 "n/N") (("1" (FLATTEN) (("1" (HIDE -1) (("1" (SPLIT -1) (("1" (REPLACE -1) (("1" (GROUND) NIL NIL)) NIL) ("2" (CROSS-MULT 1) NIL NIL) ("3" (CROSS-MULT 1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED (J)) (("2" (SPLIT-INEQ -1) (("2" (REPLACE -1) (("2" (LEMMA "sigma_eq_arg") (("2" (INST -1 "F" "0") (("2" (REPLACE -1) (("2" (LEMMA "sigma_eq") (("2" (INST -1 "LAMBDA (k: nat): F((k - mod(k, N)) / N) * G(mod(k, N))" "LAMBDA (k:nat): F(0)*G(k)" "N-1" "0") (("1" (SPLIT -1) (("1" (REPLACE -1) (("1" (LEMMA "sigma_scal_right") (("1" (INST -1 "G" "F(0)" "N-1" "0") (("1" (REPLACE -1) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SKEEP) (("2" (CASE-REPLACE "mod(n, N) = n") (("1" (GROUND) NIL NIL) ("2" (HIDE 2) (("2" (TYPEPRED (N)) (("2" (GRIND) (("2" (CASE-REPLACE "floor(n/N)=0") (("1" (GROUND) NIL NIL) ("2" (HIDE 2) (("2" (GRIND) (("2" (TYPEPRED (N)) (("2" (GRIND) (("2" (LEMMA "floor_0") (("2" (INST -1 "n/N") (("2" (FLATTEN) (("2" (HIDE -1) (("2" (CASE "n/N<1") (("1" (DIV-BY -4 "N") (("1" (GRIND) NIL NIL)) NIL) ("2" (CROSS-MULT 1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SKOSIMP*) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL) ("3" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL) ("3" (GROUND) NIL NIL)) NIL) ("2" (SKEEP) (("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE 2) (("4" (SKEEP) (("4" (SKEEP) (("4" (LEMMA "mod_pos") (("4" (INST -1 "k" "N") (("4" (FLATTEN) (("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|mod_pos| FORMULA-DECL NIL |mod| NIL) (|sigma_split_ge| FORMULA-DECL NIL |sigma_nat| NIL) (N SKOLEM-CONST-DECL "posnat" |sigma_nat| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|both_sides_div_pos_le1| FORMULA-DECL NIL |real_props| NIL) (|floor| CONST-DECL "{i | i <= x & x < i + 1}" |floor_ceil| NIL) (|sigma_0_neg| FORMULA-DECL NIL |sigma_nat| NIL) (|sigma_shift_to_zero| FORMULA-DECL NIL |sigma_nat| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|sigma_eq| FORMULA-DECL NIL |sigma| NIL) (|nonneg_floor_is_nat| APPLICATION-JUDGEMENT "nat" |floor_ceil| NIL) (|nnrat_div_posrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals| NIL) (|sigma_scal_right| FORMULA-DECL NIL |sigma| NIL) (|sigma_eq_arg| FORMULA-DECL NIL |sigma| NIL) (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL) (|div_mult_pos_lt1| FORMULA-DECL NIL |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|div_mult_pos_le2| FORMULA-DECL NIL |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|floor_0| FORMULA-DECL NIL |floor_ceil| NIL) (|floor_plus_int| FORMULA-DECL NIL |floor_ceil| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|subrange| TYPE-EQ-DECL NIL |integers| NIL) (|j| SKOLEM-CONST-DECL "nat" |sigma_nat| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|odd_plus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|rat_minus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|rat_plus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|odd_minus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (NIL APPLICATION-JUDGEMENT "below(m)" |mod| NIL) (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonzero_integer| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (< CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (|mod| CONST-DECL "{k | abs(k) < abs(j)}" |mod| NIL) (|sigma| DEF-DECL "real" |sigma| NIL) (|T_high| TYPE-EQ-DECL NIL |sigma| NIL) (|T_low| TYPE-EQ-DECL NIL |sigma| NIL) (<= CONST-DECL "bool" |reals| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)) SHOSTAK) (|sigma_product2-1| |nil| 3615631614 ("" (INDUCT "M") (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL) ("3" (SKEEP) (("3" (SKEEP) (("3" (LEMMA "sigma_split_ge") (("3" (INST-CP -1 "F" "j" "j-1" "0") (("3" (INST -1 "LAMBDA (k: nat): F((k - mod(k, N)) / N) * G(mod(k, N))" "(j+1)*N-1" "j*N-1" "0") (("1" (SPLIT -2) (("1" (SPLIT -2) (("1" (CASE-REPLACE "j+1-1=j") (("1" (HIDE -1) (("1" (REPLACE -2) (("1" (REPLACE -1) (("1" (CASE-REPLACE "j*N-1+1 = j*N") (("1" (SIMPLIFY 1) (("1" (SPLIT -4) (("1" (INST -1 "F" "G" "N") (("1" (REPLACE -1) (("1" (SIMPLIFY 1) (("1" (HIDE -) (("1" (LEMMA "sigma_shift_to_zero") (("1" (INST -1 "LAMBDA (k: nat): F((k - mod(k, N)) / N) * G(mod(k, N))" "N-1 +N*j" "j*N") (("1" (SPLIT -1) (("1" (REPLACE -1) (("1" (CASE-REPLACE "N-1+N*j-j*N = N-1") (("1" (HIDE -) (("1" (LEMMA "sigma_eq") (("1" (INST -1 "LAMBDA (i: nat):
               F((i + j * N - mod(i + j * N, N)) / N) *
                G(mod(i + j * N, N))" "LAMBDA (i: nat): G(i)*F(j)" "N-1" "0") (("1" (SPLIT -1) (("1" (REPLACE -1) (("1" (LEMMA "sigma_scal_right") (("1" (INST -1 "G" "F(j)" "N-1" "0") (("1" (REPLACE -1) (("1" (LEMMA "sigma_eq_arg") (("1" (INST -1 "F" "j") (("1" (REPLACE -1) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKEEP) (("2" (CASE-REPLACE "mod(n+j*N, N) = n") (("1" (GROUND) NIL NIL) ("2" (HIDE 2) (("2" (EXPAND "mod") (("2" (CASE-REPLACE "(j*N+n)/N = n/N + j") (("1" (LEMMA "floor_plus_int") (("1" (INST -1 "j" "n/N") (("1" (REPLACE -1) (("1" (SIMPLIFY 1) (("1" (LEMMA "floor_0") (("1" (INST -1 "n/N") (("1" (FLATTEN) (("1" (HIDE -1) (("1" (SPLIT -1) (("1" (REPLACE -1) (("1" (GROUND) NIL NIL)) NIL) ("2" (CROSS-MULT 1) NIL NIL) ("3" (CROSS-MULT 1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED (J)) (("2" (SPLIT-INEQ -1) (("2" (REPLACE -1) (("2" (LEMMA "sigma_eq_arg") (("2" (INST -1 "F" "0") (("2" (REPLACE -1) (("2" (LEMMA "sigma_eq") (("2" (INST -1 "LAMBDA (k: nat): F((k - mod(k, N)) / N) * G(mod(k, N))" "LAMBDA (k:nat): F(0)*G(k)" "N-1" "0") (("1" (SPLIT -1) (("1" (REPLACE -1) (("1" (LEMMA "sigma_scal_right") (("1" (INST -1 "G" "F(0)" "N-1" "0") (("1" (REPLACE -1) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SKEEP) (("2" (CASE-REPLACE "mod(n, N) = n") (("1" (GROUND) NIL NIL) ("2" (HIDE 2) (("2" (TYPEPRED (N)) (("2" (GRIND) (("2" (CASE-REPLACE "floor(n/N)=0") (("1" (GROUND) NIL NIL) ("2" (HIDE 2) (("2" (GRIND) (("2" (TYPEPRED (N)) (("2" (GRIND) (("2" (LEMMA "floor_0") (("2" (INST -1 "n/N") (("2" (FLATTEN) (("2" (HIDE -1) (("2" (CASE "n/N<1") (("1" (DIV-BY -4 "N") (("1" (SIMPLIFY -4) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (CROSS-MULT 1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SKOSIMP*) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL) ("3" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL) ("3" (GROUND) NIL NIL)) NIL) ("2" (SKEEP) (("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE 2) (("4" (SKEEP) (("4" (SKEEP) (("4" (LEMMA "mod_pos") (("4" (INST -1 "k" "N") (("4" (FLATTEN) (("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("5" (HIDE 2) (("5" (SKOSIMP*) (("5" (GRIND) NIL NIL)) NIL)) NIL) ("6" (SKEEP 1) (("6" (GRIND) NIL NIL)) NIL)) NIL) NIL SHOSTAK)) (|sigma_geometric_TCC1| 0 (|sigma_geometric_TCC1-1| |nil| 3609924876 ("" (SUBTYPE-TCC) NIL NIL) ((/= CONST-DECL "boolean" |notequal| NIL)) NIL (|sigma_geometric| SUBTYPE "sigma_nat.k" "{i: integers.int | booleans.OR(sigma_nat.r /= 0, reals.>=(i, 0))}"))) (|sigma_geometric_TCC2| 0 (|sigma_geometric_TCC2-1| |nil| 3609924876 ("" (SUBTYPE-TCC) NIL NIL) ((/= CONST-DECL "boolean" |notequal| NIL)) NIL (|sigma_geometric| SUBTYPE "sigma_nat.n" "{i: integers.int | booleans.OR(sigma_nat.r /= 0, reals.>=(i, 0))}"))) (|sigma_geometric_TCC3| 0 (|sigma_geometric_TCC3-1| |nil| 3609924876 ("" (SUBTYPE-TCC) NIL NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (/= CONST-DECL "boolean" |notequal| NIL)) NIL (|sigma_geometric| SUBTYPE "((number_fields.+)(sigma_nat.m, 1))" "{i: integers.int | booleans.OR(sigma_nat.r /= 0, reals.>=(i, 0))}"))) (|sigma_geometric_TCC4| 0 (|sigma_geometric_TCC4-1| |nil| 3609924876 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL (|sigma_geometric| SUBTYPE "((number_fields.-)(1, sigma_nat.r))" "nznum"))) (|sigma_geometric| 0 (|sigma_geometric-1| |nil| 3609924878 ("" (CASE "FORALL (m, n: nat, r: real):
        r /= 1 IMPLIES
         (1-r)*sigma(n, n+m, LAMBDA (k: nat): r ^ k) =
          (r ^ n - r ^ (n+m + 1))") (("1" (SKEEP) (("1" (INST - "m-n" "n" "r") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (INDUCT "m") (("1" (SKEEP) (("1" (ASSERT) (("1" (EXPAND "sigma") (("1" (EXPAND "sigma") (("1" (ASSERT) (("1" (EXPAND "^") (("1" (EXPAND "expt" + 2) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOLEM 1 "m") (("2" (FLATTEN) (("2" (ASSERT) (("2" (SKEEP) (("2" (INST - "n" "r") (("2" (ASSERT) (("2" (EXPAND "sigma" +) (("2" (ASSERT) (("2" (NAME "A" "sigma(n, m + n, LAMBDA (k: nat): r ^ k)") (("2" (REPLACE -1) (("2" (HIDE -1) (("2" (BOTH-SIDES "+" "r ^ (1 + m + n) - (r ^ (1 + m + n)) * r" -1) (("2" (REPLACE -1) (("2" (HIDE -1) (("2" (ASSERT) (("2" (EXPAND "^") (("2" (EXPAND "expt" + 2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|m| SKOLEM-CONST-DECL "nat" |sigma_nat| NIL) (|n| SKOLEM-CONST-DECL "nat" |sigma_nat| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|sigma| DEF-DECL "real" |sigma| NIL) (|T_high| TYPE-EQ-DECL NIL |sigma| NIL) (|T_low| TYPE-EQ-DECL NIL |sigma| NIL) (<= CONST-DECL "bool" |reals| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL)) SHOSTAK)))
