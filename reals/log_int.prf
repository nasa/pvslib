(|log_int| (|log_int_TCC1| 0 (|log_int_TCC1-1| |nil| 3626601277 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|log_int| SUBTYPE "z" "{i: integers.int | booleans.OR(log_int.p /= 0, reals.>=(i, 0))}"))) (|log_int_TCC2| 0 (|log_int_TCC2-1| |nil| 3626601277 ("" (SKEEP) (("" (FIELD) NIL NIL)) NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|div_mult_pos_ge1| FORMULA-DECL NIL |real_props| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL)) NIL (|log_int| SUBTYPE "number_fields./(1, log_int.x)" "{x: reals.real | reals.>=(x, 1)}"))) (|log_int_TCC3| 0 (|log_int_TCC3-2| "" 3790089015 ("" (SKEEP) (("" (SKEEP) (("" (TYPEPRED "LN`2") (("" (GROUND) (("" (REPLACES -4) (("" (GROUND) (("" (EXPAND "^") (("" (GROUND) (("" (TYPEPRED "LN`1") (("" (LIFT-IF 1) (("" (GROUND) (("1" (CASE "LN`1 = 0") (("1" (REPLACES -1) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -2 1)) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (CROSS-MULT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posrat_times_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|posrat_exp| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL) (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nnrat_exp| APPLICATION-JUDGEMENT "nnrat" |exponentiation| NIL) (|posnat_expt| APPLICATION-JUDGEMENT "posnat" |exponentiation| NIL) (|div_cancel4| FORMULA-DECL NIL |real_props| NIL) (|div_cancel3| FORMULA-DECL NIL |real_props| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|log_nat| DEF-DECL "[n: nat, {y | y < p AND x = p ^ n * y}]" |log_nat| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (< CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL)) SHOSTAK (|log_int| SUBTYPE "1" "{y: reals.real | booleans.AND(reals.<(y, log_int.p), booleans.AND(reals.>=(y, 1), log_int.x = number_fields.*(exponentiation.^(log_int.p, (number_fields.-)(log_int.LN`1)), y)))}")) (|log_int_TCC3-1| |nil| 3626601277 ("" (SKEEP) (("" (SKEEP) (("" (TYPEPRED "LN`2") (("" (GROUND) (("" (REPLACES -4) (("" (GROUND) (("" (EXPAND "^") (("" (GROUND) (("" (TYPEPRED "LN`1") (("" (LIFT-IF 1) (("" (GROUND) (("1" (CASE "LN`1 = 0") (("1" (REPLACES -1) (("1" (GROUND) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -2 1)) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (CROSS-MULT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|log_int| SUBTYPE "1" "{y: reals.real | booleans.AND(reals.<(y, log_int.p), booleans.AND(reals.>=(y, 1), log_int.x = number_fields.*(exponentiation.^(log_int.p, (number_fields.-)(log_int.LN`1)), y)))}"))) (|log_int_TCC4| 0 (|log_int_TCC4-1| |nil| 3626601277 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnrat_exp| APPLICATION-JUDGEMENT "nnrat" |exponentiation| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|log_int| SUBTYPE "log_int.LN`2" "nznum"))) (|log_int_TCC5| 0 (|log_int_TCC5-3| "" 3882375530 ("" (SKEEP) (("" (SKEEP) (("" (CASE "FORALL (ll:{ z:real| z>1 AND z<p}): p/ll<p AND p/ll>=1") (("1" (INST -1 "LN`2") (("1" (GROUND) (("1" (TYPEPRED "LN`2") (("1" (EXPAND "^") (("1" (EXPAND "expt" 1) (("1" (SIMPLIFY 1) (("1" (CASE-REPLACE "-(-LN`1 - 1) - 1 = LN`1") (("1" (CROSS-MULT) NIL NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "LN`2") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (HIDE-ALL-BUT 1) (("2" (TYPEPRED "ll") (("2" (GRIND-REALS) (("2" (TYPEPRED ("p")) (("2" (BOTH-SIDES "*" "p" -2) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK (|log_int| SUBTYPE "number_fields./(log_int.p, log_int.LN`2)" "{y: reals.real | booleans.AND(reals.<(y, log_int.p), booleans.AND(reals.>=(y, 1), log_int.x = number_fields.*(exponentiation.^(log_int.p, (number_fields.-)((number_fields.-)(log_int.LN`1), 1)), y)))}")) (|log_int_TCC5-2| "" 3803800237 ("" (SKEEP) (("" (SKEEP) (("" (CASE "FORALL (ll:{ z:real| z>1 AND z<p}): p/ll<p AND p/ll>=1") (("1" (INST -1 "LN`2") (("1" (GROUND) (("1" (TYPEPRED "LN`2") (("1" (EXPAND "^") (("1" (EXPAND "expt" 1) (("1" (SIMPLIFY 1) (("1" (CASE-REPLACE "-(-LN`1 - 1) - 1 = LN`1") (("1" (CROSS-MULT) NIL NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "LN`2") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (HIDE-ALL-BUT 1) (("2" (TYPEPRED "ll") (("2" (GRIND-REALS) (("2" (TYPEPRED (P)) (("2" (BOTH-SIDES "*" "p" -2) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|gt_times_gt_pos2| FORMULA-DECL NIL |real_props| NIL) (|both_sides_times_pos_gt1| FORMULA-DECL NIL |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (LN SKOLEM-CONST-DECL "[n: nat, {y | y < p AND 1 / x = p ^ n * y}]" |log_int| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|x| SKOLEM-CONST-DECL "posreal" |log_int| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|p| SKOLEM-CONST-DECL "above(1)" |log_int| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|div_cancel4| FORMULA-DECL NIL |real_props| NIL) (|div_mult_pos_lt1| FORMULA-DECL NIL |real_props| NIL) (|div_mult_pos_ge1| FORMULA-DECL NIL |real_props| NIL) (|div_cancel3| FORMULA-DECL NIL |real_props| NIL) (|times_div2| FORMULA-DECL NIL |real_props| NIL) (|posrat_times_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|times_div1| FORMULA-DECL NIL |real_props| NIL) (|posnat_expt| APPLICATION-JUDGEMENT "posnat" |exponentiation| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|nnrat_exp| APPLICATION-JUDGEMENT "nnrat" |exponentiation| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|posrat_exp| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL) (|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (< CONST-DECL "bool" |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL)) SHOSTAK (|log_int| SUBTYPE "number_fields./(log_int.p, log_int.LN`2)" "{y: reals.real | booleans.AND(reals.<(y, log_int.p), booleans.AND(reals.>=(y, 1), log_int.x = number_fields.*(exponentiation.^(log_int.p, (number_fields.-)((number_fields.-)(log_int.LN`1), 1)), y)))}")) (|log_int_TCC5-1| |nil| 3626601277 ("" (SKEEP) (("" (SKEEP) (("" (CASE "FORALL (ll:{ z:real| z>1 AND z<p}): p/ll<p AND p/ll>=1") (("1" (INST -1 "LN`2") (("1" (GROUND) (("1" (TYPEPRED "LN`2") (("1" (EXPAND "^") (("1" (EXPAND "expt" 1) (("1" (SIMPLIFY 1) (("1" (CASE-REPLACE "-(-LN`1 - 1) - 1 = LN`1") (("1" (CROSS-MULT) NIL NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "LN`2") (("2" (GROUND) NIL NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (HIDE-ALL-BUT 1) (("2" (TYPEPRED "ll") (("2" (GRIND-REALS) (("2" (TYPEPRED (P)) (("2" (BOTH-SIDES "*" "p" -2) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|log_int| SUBTYPE "number_fields./(log_int.p, log_int.LN`2)" "{y: reals.real | booleans.AND(reals.<(y, log_int.p), booleans.AND(reals.>=(y, 1), log_int.x = number_fields.*(exponentiation.^(log_int.p, (number_fields.-)((number_fields.-)(log_int.LN`1), 1)), y)))}"))) (|log_int_bounds_TCC1| 0 (|log_int_bounds_TCC1-1| |nil| 3626602204 ("" (SUBTYPE-TCC) NIL NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posrat_exp| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL)) NIL (|log_int_bounds| SUBTYPE "log_int.z" "{i: integers.int | booleans.OR(log_int.p /= 0, reals.>=(i, 0))}"))) (|log_int_bounds_TCC2| 0 (|log_int_bounds_TCC2-1| |nil| 3626602204 ("" (SUBTYPE-TCC) NIL NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posrat_exp| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL)) NIL (|log_int_bounds| SUBTYPE "((number_fields.+)(log_int.z, 1))" "{i: integers.int | booleans.OR(log_int.p /= 0, reals.>=(i, 0))}"))) (|log_int_bounds| 0 (|log_int_bounds-1| |nil| 3626603383 ("" (SKEEP) (("" (BETA) (("" (TYPEPRED "log_int(x,p)`2") (("" (NAME-REPLACE "yy" "log_int(x,p)`2") (("" (NAME-REPLACE "zz" "log_int(x,p)`1") (("" (REPLACE -3) (("" (SPLIT) (("1" (CANCEL-BY 1 "p^zz") NIL NIL) ("2" (REWRITE "expt_plus") (("2" (REWRITE "expt_x1") (("2" (CANCEL-BY 1 "p^zz") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|expt_plus| FORMULA-DECL NIL |exponentiation| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|both_sides_times_pos_ge1_imp| FORMULA-DECL NIL |extra_real_props| NIL) (|expt_x1| FORMULA-DECL NIL |exponentiation| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|posrat_times_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|both_sides_times_pos_le1| FORMULA-DECL NIL |real_props| NIL) (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|nonneg_rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|posrat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|log_int| CONST-DECL "[z: int, {y: real | y < p AND y >= 1 AND x = p ^ z * y}]" |log_int| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posrat_exp| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL)) SHOSTAK)) (|log_int_incr| 0 (|log_int_incr-2| |nil| 3626603737 ("" (SKEEP :PREDS? T) (("" (LEMMA "log_int_bounds") (("" (INST-CP -1 "p" "x") (("" (INST -1 "p" "y") (("" (BETA) (("" (FLATTEN) (("" (NAME-REPLACE "xx" "log_int(x, p)`1") (("" (NAME-REPLACE "yy" "log_int(y, p)`1") (("" (LEMMA "both_sides_expt_gt1_lt") (("" (INST -1 "p" "xx" "yy") (("" (ASSERT) (("" (HIDE 2) (("" (MULT-BY -3 "p") (("" (REWRITE "expt_plus" -3) (("" (REWRITE "expt_x1" -3) (("" (MULT-BY 1 "p") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|log_int_bounds| FORMULA-DECL NIL |log_int| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|expt_plus| FORMULA-DECL NIL |exponentiation| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL) (|posrat_times_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|both_sides_times_pos_ge1_imp| FORMULA-DECL NIL |extra_real_props| NIL) (|expt_x1| FORMULA-DECL NIL |exponentiation| NIL) (|both_sides_times_pos_le1_imp| FORMULA-DECL NIL |extra_real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|both_sides_expt_gt1_lt| FORMULA-DECL NIL |exponentiation| NIL) (|log_int| CONST-DECL "[z: int, {y: real | y < p AND y >= 1 AND x = p ^ z * y}]" |log_int| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (< CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posrat_exp| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL)) NIL) (|log_int_incr-1| |nil| 3626603664 ("" (POSTPONE) NIL NIL) NIL SHOSTAK)) (|log_int_le| 0 (|log_int_le-1| |nil| 3626603768 ("" (SKEEP :PREDS? T) (("" (LEMMA "log_int_bounds") (("" (INST-CP -1 "p" "x") (("" (INST -1 "p" "y") (("" (BETA) (("" (NAME-REPLACE "zx" "log_int(x, p)`1") (("" (NAME-REPLACE "zy" "log_int(y, p)`1") (("" (FLIP-INEQ 1) (("" (CASE "zx>=zy+1") (("1" (HIDE -2) (("1" (LEMMA "both_sides_expt_gt1_le") (("1" (INST -1 "p" "zy+1" "zx") (("1" (FLATTEN) (("1" (HIDE -1) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|log_int_bounds| FORMULA-DECL NIL |log_int| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (< CONST-DECL "bool" |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|log_int| CONST-DECL "[z: int, {y: real | y < p AND y >= 1 AND x = p ^ z * y}]" |log_int| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|both_sides_expt_gt1_le| FORMULA-DECL NIL |exponentiation| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posrat_exp| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL)) SHOSTAK)))
