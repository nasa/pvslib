(|stirling| (|IMP_sigma_TCC1| 0 (|IMP_sigma_TCC1-1| |nil| 3714492335 ("" (ASSUMING-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL)) NIL (|IMP_sigma| ASSUMING "sigma[nat].sigma" "connected_domain: ASSUMPTION (FORALL (x, y: sigma.T), (z: integers.integer): booleans.IMPLIES(booleans.AND(reals.<=(x, z), reals.<=(z, y)), sigma.T_pred(z)))"))) (|S2_recur_TCC1| 0 (|S2_recur_TCC1-1| |nil| 3709996521 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL)) NIL (|S2_recur| SUBTYPE "(number_fields.-)(stirling.m, 1)" "nat"))) (|S2_recur_TCC2| 0 (|S2_recur_TCC2-1| |nil| 3709996521 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL)) NIL (|S2_recur| SUBTYPE "(number_fields.-)(stirling.n, 1)" "nat"))) (|S2_recur_TCC3| 0 (|S2_recur_TCC3-1| |nil| 3709996521 ("" (TERMINATION-TCC) NIL NIL) NIL NIL (|S2_recur| TERMINATION "stirling.S2_recur((number_fields.-)(stirling.m, 1), (number_fields.-)(stirling.n, 1))" "NIL"))) (|S2_recur_00| 0 (|S2_recur_00-1| |nil| 3709996847 ("" (EXPAND "S2_recur") (("" (PROPAX) NIL NIL)) NIL) ((|S2_recur| DEF-DECL "nat" |stirling| NIL)) SHOSTAK)) (|S2_recur_0n| 0 (|S2_recur_0n-1| |nil| 3709996861 ("" (SKEEP) (("" (EXPAND "S2_recur") (("" (PROPAX) NIL NIL)) NIL)) NIL) ((|S2_recur| DEF-DECL "nat" |stirling| NIL)) SHOSTAK)) (|S2_recur_n0| 0 (|S2_recur_n0-1| |nil| 3710501838 ("" (SKEEP) (("" (ASSERT) (("" (EXPAND "S2_recur") (("" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ((|S2_recur| DEF-DECL "nat" |stirling| NIL)) SHOSTAK)) (|S2_recur_n0_1| 0 (|S2_recur_n0_1-1| |nil| 3710501855 ("" (SKEEP) (("" (SPLIT) (("1" (FLATTEN) (("1" (EXPAND "S2_recur") (("1" (LIFT-IF) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (REPLACE -1) (("2" (LEMMA "S2_recur_00") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|S2_recur| DEF-DECL "nat" |stirling| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|S2_recur_00| FORMULA-DECL NIL |stirling| NIL)) SHOSTAK)) (|S2_recur_0n_1| 0 (|S2_recur_0n_1-1| |nil| 3710501956 ("" (SKEEP) (("" (SPLIT) (("1" (FLATTEN) (("1" (EXPAND "S2_recur") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (REPLACE -1) (("2" (ASSERT) (("2" (LEMMA "S2_recur_00") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|S2_recur| DEF-DECL "nat" |stirling| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|S2_recur_00| FORMULA-DECL NIL |stirling| NIL)) SHOSTAK)) (|S2_recur_nn| 0 (|S2_recur_nn-1| |nil| 3709996874 ("" (INDUCT "n") (("1" (EXPAND "S2_recur") (("1" (PROPAX) NIL NIL)) NIL) ("2" (SKEEP) (("2" (GRIND) NIL NIL)) NIL)) NIL) ((|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|S2_recur| DEF-DECL "nat" |stirling| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) SHOSTAK)) (|S2_recur_n1| 0 (|S2_recur_n1-1| |nil| 3709997388 ("" (INDUCT "m") (("1" (EXPAND "S2_recur") (("1" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (SKEEP) (("3" (GRIND) NIL NIL)) NIL)) NIL) ((|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|odd_times_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|odd_minus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|S2_recur| DEF-DECL "nat" |stirling| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (> CONST-DECL "bool" |reals| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) SHOSTAK)) (|S2_recur_n2| 0 (|S2_recur_n2-1| |nil| 3710075937 ("" (INDUCT "m") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL) ("3" (SKEEP) (("3" (EXPAND "S2_recur" 1) (("3" (LIFT-IF) (("3" (ASSERT) (("3" (SPLIT) (("1" (REPLACE -1) (("1" (LEMMA "S2_recur_n1") (("1" (INST -1 "j") (("1" (REPLACE -1) (("1" (FIELD) (("1" (CASE "NOT  (2 * (2 ^ j - 1)) = 2*2^j-2") (("1" (FIELD) NIL NIL) ("2" (REPLACE -1) (("2" (LEMMA "expt_plus") (("2" (INST -1 "1" "j" "2") (("2" (REPLACE -1) (("2" (ASSERT) (("2" (LEMMA "expt_x1") (("2" (INST -1 "2") (("2" (REPLACE -1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (TYPEPRED "j") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|S2_recur_n1| FORMULA-DECL NIL |stirling| NIL) (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|even_minus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|expt_plus| FORMULA-DECL NIL |exponentiation| NIL) (|expt_x1| FORMULA-DECL NIL |exponentiation| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|both_sides_times1| FORMULA-DECL NIL |real_props| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|div_cancel2| FORMULA-DECL NIL |real_props| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|rat_plus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (|posnat_expt| APPLICATION-JUDGEMENT "posnat" |exponentiation| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|S2_recur| DEF-DECL "nat" |stirling| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) SHOSTAK)) (|S2_recur_n2_alt| 0 (|S2_recur_n2_alt-2| "" 3882296302 ("" (INDUCT "m") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL) ("3" (SKEEP) (("3" (EXPAND "S2_recur" 1) (("3" (LIFT-IF) (("3" (ASSERT) (("3" (SPLIT) (("1" (REPLACE -1) (("1" (LEMMA "S2_recur_n1") (("1" (INST -1 "j") (("1" (REPLACE -1) (("1" (FIELD) (("1" (CASE "NOT  2 * (2 ^ (j - 1) - 1) = 2^j -2") (("1" (CASE "NOT 2 * (2 ^ (j - 1) - 1) = 2*2^(j-1) - 2") (("1" (FIELD) NIL NIL) ("2" (REPLACE -1) (("2" (LEMMA "expt_plus") (("2" (INST -1 "1" "j-1" "2") (("2" (REPLACE -1) (("2" (LEMMA "expt_x1") (("2" (INST -1 "2") (("2" (REPLACE -1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|S2_recur_n2_alt-1| |nil| 3710077947 ("" (INDUCT M) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL) ("3" (SKEEP) (("3" (EXPAND "S2_recur" 1) (("3" (LIFT-IF) (("3" (ASSERT) (("3" (SPLIT) (("1" (REPLACE -1) (("1" (LEMMA "S2_recur_n1") (("1" (INST -1 "j") (("1" (REPLACE -1) (("1" (FIELD) (("1" (CASE "NOT  2 * (2 ^ (j - 1) - 1) = 2^j -2") (("1" (CASE "NOT 2 * (2 ^ (j - 1) - 1) = 2*2^(j-1) - 2") (("1" (FIELD) NIL NIL) ("2" (REPLACE -1) (("2" (LEMMA "expt_plus") (("2" (INST -1 "1" "j-1" "2") (("2" (REPLACE -1) (("2" (LEMMA "expt_x1") (("2" (INST -1 "2") (("2" (REPLACE -1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|S2_recur_n1| FORMULA-DECL NIL |stirling| NIL) (|rat_minus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|expt_x1| FORMULA-DECL NIL |exponentiation| NIL) (|odd_minus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|expt_plus| FORMULA-DECL NIL |exponentiation| NIL) (|posrat_times_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|rat_plus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|posnat_expt| APPLICATION-JUDGEMENT "posnat" |exponentiation| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL) (|posrat_exp| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|S2_recur| DEF-DECL "nat" |stirling| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) SHOSTAK)) (|S2_recur_n3| 0 (|S2_recur_n3-1| |nil| 3710080297 ("" (INDUCT "m") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL) ("3" (SKEEP) (("3" (EXPAND "S2_recur" 1) (("3" (LIFT-IF) (("3" (ASSERT) (("3" (SPLIT -1) (("1" (REPLACE -1) (("1" (LEMMA "S2_recur_n2") (("1" (INST -1 "j") (("1" (REPLACE -1) (("1" (FIELD) (("1" (MULT-BY 1 "3") (("1" (CASE "NOT (((1 * (3 ^ (1 + j))) / 3 - (2 ^ (1 + j))) * 3) = 3^(1+j) -  (2 ^ (1 + j)) * 3") (("1" (FIELD) NIL NIL) ("2" (REPLACE -1) (("2" (LEMMA "expt_plus") (("2" (INST -1 "j" "1" "2") (("2" (REPLACE -1) (("2" (LEMMA "expt_x1") (("2" (INST -1 "2") (("2" (REPLACE -1) (("2" (LEMMA "expt_plus") (("2" (INST -1 "1" "j" "3") (("2" (REPLACE -1) (("2" (LEMMA "expt_x1") (("2" (INST -1 "3") (("2" (REPLACE -1) (("2" (FIELD) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|S2_recur_n2| FORMULA-DECL NIL |stirling| NIL) (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|expt_x1| FORMULA-DECL NIL |exponentiation| NIL) (|minus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|expt_plus| FORMULA-DECL NIL |exponentiation| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|times_div2| FORMULA-DECL NIL |real_props| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|both_sides_times1| FORMULA-DECL NIL |real_props| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|minus_nzrat_is_nzrat| APPLICATION-JUDGEMENT "nzrat" |rationals| NIL) (|nzrat_times_nzrat_is_nzrat| APPLICATION-JUDGEMENT "nzrat" |rationals| NIL) (|rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (|posnat_expt| APPLICATION-JUDGEMENT "posnat" |exponentiation| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|rat_plus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|rat_minus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|posrat_times_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|S2_recur| DEF-DECL "nat" |stirling| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) SHOSTAK)) (|S2_recur_n_nminus1_TCC1| 0 (|S2_recur_n_nminus1_TCC1-1| |nil| 3710074687 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|S2_recur_n_nminus1| SUBTYPE "(number_fields.-)(stirling.n, 1)" "nat"))) (|S2_recur_n_nminus1_TCC2| 0 (|S2_recur_n_nminus1_TCC2-1| |nil| 3710074687 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|S2_recur_n_nminus1| SUBTYPE "2" "{i: naturalnumbers.nat | reals.<=(i, stirling.n)}"))) (|S2_recur_n_nminus1| 0 (|S2_recur_n_nminus1-1| |nil| 3710076518 ("" (INDUCT "n") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL) ("3" (SKEEP) (("3" (EXPAND "S2_recur" 1) (("3" (LIFT-IF) (("3" (ASSERT) (("3" (SPLIT) (("1" (REPLACE -1) (("1" (LEMMA "S2_recur_nn") (("1" (INST -1 "j") (("1" (REPLACE -1) (("1" (LEMMA "C_1") (("1" (INST -1 "j") (("1" (CASE "NOT C(j,1) = j*1") (("1" (ASSERT) NIL NIL) ("2" (CASE "NOT C(j,2) + j*1 = C(j,2) + C(j,1)") (("1" (ASSERT) NIL NIL) ("2" (REPLACE -1) (("2" (LEMMA "C_n_plus_1") (("2" (INST -1 "j" "2") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKEEP) (("4" (ASSERT) NIL NIL)) NIL) ("5" (SKEEP) (("5" (ASSERT) NIL NIL)) NIL)) NIL) ((|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|S2_recur_nn| FORMULA-DECL NIL |stirling| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|C_n_plus_1| FORMULA-DECL NIL |binomial| NIL) (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (C_1 FORMULA-DECL NIL |binomial| NIL) (|factorial| DEF-DECL "posnat" |factorial| |ints|) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (<= CONST-DECL "bool" |reals| NIL) (C CONST-DECL "posnat" |binomial| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|S2_recur| DEF-DECL "nat" |stirling| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)) SHOSTAK)) (S2_TCC1 0 (S2_TCC1-1 |nil| 3709655946 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (<= CONST-DECL "bool" |reals| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) NIL (S2 SUBTYPE "stirling.i" "{i: naturalnumbers.nat | reals.<=(i, stirling.n)}"))) (S2_TCC2 0 (S2_TCC2-1 |nil| 3709655946 ("" (SUBTYPE-TCC) NIL NIL) ((|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (/= CONST-DECL "boolean" |notequal| NIL)) NIL (S2 SUBTYPE "stirling.m" "{i_1: integers.int | booleans.OR(((number_fields.-)(stirling.n, stirling.i)) /= 0, reals.>=(i_1, 0))}"))) (|St2_TCC1| 0 (|St2_TCC1-1| |nil| 3710003319 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL)) NIL (|St2| SUBTYPE "stirling.i" "{i: naturalnumbers.nat | reals.<=(i, stirling.n)}"))) (|St2_TCC2| 0 (|St2_TCC2-1| |nil| 3710003319 ("" (SUBTYPE-TCC) NIL NIL) ((|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (/= CONST-DECL "boolean" |notequal| NIL)) NIL (|St2| SUBTYPE "stirling.m" "{i_1: integers.int | booleans.OR(((number_fields.-)(stirling.n, stirling.i)) /= 0, reals.>=(i_1, 0))}"))) (S2_00 0 (S2_00-1 |nil| 3709997541 ("" (EXPAND "S2") (("" (ASSERT) (("" (GRIND) NIL NIL)) NIL)) NIL) ((|factorial_0| FORMULA-DECL NIL |factorial| |ints|) (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|sigma_int| APPLICATION-JUDGEMENT "int" |sigma_nat| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|factorial| DEF-DECL "posnat" |factorial| |ints|) (C CONST-DECL "posnat" |binomial| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|sigma| DEF-DECL "real" |sigma| NIL) (|sigma_nat| APPLICATION-JUDGEMENT "nat" |sigma_nat| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (S2 CONST-DECL "rat" |stirling| NIL)) SHOSTAK)) (|S2_n1_TCC1| 0 (|S2_n1_TCC1-1| |nil| 3709997517 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|S2_n1| SUBTYPE "1" "{i: naturalnumbers.nat | reals.<=(i, stirling.m)}"))) (|S2_n1| 0 (|S2_n1-1| |nil| 3709999279 ("" (SKEEP) (("" (EXPAND "S2") (("" (ASSERT) (("" (LEMMA "sigma_first") (("" (INST?) (("1" (SPLIT) (("1" (REPLACE -1) (("1" (ASSERT) (("1" (LEMMA "sigma_eq_arg") (("1" (INST?) (("1" (REPLACE -1) (("1" (ASSERT) (("1" (LEMMA "C_0") (("1" (INST?) (("1" (REPLACE -1) (("1" (LEMMA "C_1") (("1" (INST?) (("1" (REPLACE -1) (("1" (ASSERT) (("1" (LEMMA "expt_eq_0") (("1" (INST?) (("1" (FLATTEN) (("1" (REPLACE -1) (("1" (LEMMA "expt_x0") (("1" (INST?) (("1" (REPLACE -1) (("1" (ASSERT) (("1" (LEMMA "expt_1i") (("1" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (SKEEP) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (S2 CONST-DECL "rat" |stirling| NIL) (|sigma_first| FORMULA-DECL NIL |sigma| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|odd_minus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|nzreal_exp| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL) (|int_exp| APPLICATION-JUDGEMENT "int" |exponentiation| NIL) (|nzint_times_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|nat_exp| APPLICATION-JUDGEMENT "nat" |exponentiation| NIL) (|odd_minus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (C_1 FORMULA-DECL NIL |binomial| NIL) (|expt_eq_0| FORMULA-DECL NIL |exponentiation| NIL) (|expt_x0| FORMULA-DECL NIL |exponentiation| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|expt_1i| FORMULA-DECL NIL |exponentiation| NIL) (C_0 FORMULA-DECL NIL |binomial| NIL) (|sigma_eq_arg| FORMULA-DECL NIL |sigma| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|T_low| TYPE-EQ-DECL NIL |sigma| NIL) (|T_high| TYPE-EQ-DECL NIL |sigma| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (C CONST-DECL "posnat" |binomial| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (> CONST-DECL "bool" |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|sigma_int| APPLICATION-JUDGEMENT "int" |sigma_nat| NIL) (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|factorial_1| FORMULA-DECL NIL |factorial| |ints|)) SHOSTAK)) (|St2_00| 0 (|St2_00-1| |nil| 3710081989 ("" (ASSERT) (("" (EXPAND "St2") (("" (ASSERT) (("" (LEMMA "sigma_eq_arg") (("" (INST?) (("1" (REPLACE -1) (("1" (ASSERT) (("1" (LEMMA "C_0") (("1" (INST -1 "0") (("1" (REPLACE -1) (("1" (LEMMA "expt_x0") (("1" (INST -1 "0") (("1" (REPLACE -1) (("1" (LEMMA "expt_x0") (("1" (INST -1 "-1") (("1" (REPLACE -1) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|St2| CONST-DECL "rat" |stirling| NIL) (|sigma_eq_arg| FORMULA-DECL NIL |sigma| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (C_0 FORMULA-DECL NIL |binomial| NIL) (|expt_x0| FORMULA-DECL NIL |exponentiation| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nzint_times_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_exp| APPLICATION-JUDGEMENT "int" |exponentiation| NIL) (|nzreal_exp| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nat_exp| APPLICATION-JUDGEMENT "nat" |exponentiation| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (C CONST-DECL "posnat" |binomial| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (> CONST-DECL "bool" |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|sigma_int| APPLICATION-JUDGEMENT "int" |sigma_nat| NIL) (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|factorial_0| FORMULA-DECL NIL |factorial| |ints|)) SHOSTAK)) (|St2_n1| 0 (|St2_n1-1| |nil| 3710082151 ("" (SKEEP) (("" (EXPAND "St2") (("" (ASSERT) (("" (LEMMA "sigma_first") (("" (INST?) (("1" (SPLIT) (("1" (REPLACE -1) (("1" (ASSERT) (("1" (LEMMA "sigma_eq_arg") (("1" (INST?) (("1" (REPLACE -1) (("1" (ASSERT) (("1" (LEMMA "C_0") (("1" (INST -1 "1") (("1" (REPLACE -1) (("1" (LEMMA "C_1") (("1" (INST -1 "1") (("1" (REPLACE -1) (("1" (LEMMA "expt_1i") (("1" (INST -1 "m") (("1" (REPLACE -1) (("1" (LEMMA "expt_x0") (("1" (INST -1 "-1") (("1" (REPLACE -1) (("1" (LEMMA "expt_eq_0") (("1" (INST -1 "m" "0") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (SKEEP) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|St2| CONST-DECL "rat" |stirling| NIL) (|sigma_first| FORMULA-DECL NIL |sigma| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|odd_minus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|nzreal_exp| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL) (|int_exp| APPLICATION-JUDGEMENT "int" |exponentiation| NIL) (|nzint_times_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|nat_exp| APPLICATION-JUDGEMENT "nat" |exponentiation| NIL) (|odd_minus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (C_1 FORMULA-DECL NIL |binomial| NIL) (|expt_x0| FORMULA-DECL NIL |exponentiation| NIL) (|expt_eq_0| FORMULA-DECL NIL |exponentiation| NIL) (|expt_1i| FORMULA-DECL NIL |exponentiation| NIL) (C_0 FORMULA-DECL NIL |binomial| NIL) (|sigma_eq_arg| FORMULA-DECL NIL |sigma| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|T_low| TYPE-EQ-DECL NIL |sigma| NIL) (|T_high| TYPE-EQ-DECL NIL |sigma| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (C CONST-DECL "posnat" |binomial| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (> CONST-DECL "bool" |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|sigma_int| APPLICATION-JUDGEMENT "int" |sigma_nat| NIL) (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|factorial_1| FORMULA-DECL NIL |factorial| |ints|)) SHOSTAK)) (|SS1_recur_00| 0 (|SS1_recur_00-1| |nil| 3710177513 ("" (EXPAND "SS1_recur") (("" (PROPAX) NIL NIL)) NIL) ((|SS1_recur| DEF-DECL "int" |stirling| NIL)) SHOSTAK)) (|SS1_recur_0n| 0 (|SS1_recur_0n-1| |nil| 3710177525 ("" (INDUCT "n") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL) ("3" (SKEEP) (("3" (EXPAND "SS1_recur" 1) (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ((|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|SS1_recur| DEF-DECL "int" |stirling| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (> CONST-DECL "bool" |reals| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) SHOSTAK)) (|SS1_recur_nn| 0 (|SS1_recur_nn-1| |nil| 3710177550 ("" (INDUCT "n") (("1" (LEMMA "SS1_recur_00") (("1" (PROPAX) NIL NIL)) NIL) ("2" (SKEEP) (("2" (EXPAND "SS1_recur" 1) (("2" (REPLACE -1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|SS1_recur_00| FORMULA-DECL NIL |stirling| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|SS1_recur| DEF-DECL "int" |stirling| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) SHOSTAK)) (|SS1_recur_n0| 0 (|SS1_recur_n0-1| |nil| 3710502395 ("" (SKEEP) (("" (EXPAND "SS1_recur") (("" (PROPAX) NIL NIL)) NIL)) NIL) ((|SS1_recur| DEF-DECL "int" |stirling| NIL)) SHOSTAK)) (|SS1_recur_n0_1| 0 (|SS1_recur_n0_1-1| |nil| 3710502412 ("" (SKEEP) (("" (SPLIT) (("1" (FLATTEN) (("1" (EXPAND "SS1_recur") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (REPLACE -1) (("2" (LEMMA "SS1_recur_00") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|SS1_recur| DEF-DECL "int" |stirling| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|SS1_recur_00| FORMULA-DECL NIL |stirling| NIL)) SHOSTAK)) (|SS1_recur_0n_1| 0 (|SS1_recur_0n_1-1| |nil| 3710502460 ("" (SKEEP) (("" (SPLIT) (("1" (FLATTEN) (("1" (EXPAND "SS1_recur") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (REPLACE -1) (("2" (LEMMA "SS1_recur_00") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|SS1_recur| DEF-DECL "int" |stirling| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|SS1_recur_00| FORMULA-DECL NIL |stirling| NIL)) SHOSTAK)) (|S1_recur_TCC1| 0 (|S1_recur_TCC1-1| |nil| 3710178962 ("" (SKEEP) (("" (CASE "m=0") (("1" (GRIND) NIL NIL) ("2" (LEMMA "nnint_times_nnint_is_nnint") (("2" (INST -1 "(m-1)" "v(m-1,n)") (("1" (LEMMA "nnint_plus_nnint_is_nnint") (("1" (INST -1 "v(m-1,n-1)" " (m - 1) * v(m - 1, n) ") (("1" (FIELD) NIL NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (< CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|m| SKOLEM-CONST-DECL "nat" |stirling| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|n| SKOLEM-CONST-DECL "nat" |stirling| NIL) (|v| SKOLEM-CONST-DECL "[{z: [nat, nat] | z`1 < m} -> nat]" |stirling| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|nnint_plus_nnint_is_nnint| JUDGEMENT-TCC NIL |integers| NIL) (|nnint_times_nnint_is_nnint| JUDGEMENT-TCC NIL |integers| NIL)) NIL (|S1_recur| SUBTYPE "(number_fields.+)(stirling.S1_recur((number_fields.-)(stirling.m, 1), (number_fields.-)(stirling.n, 1)), number_fields.*(((number_fields.-)(stirling.m, 1)), stirling.S1_recur((number_fields.-)(stirling.m, 1), stirling.n)))" "nat"))) (|S1_recur_00| 0 (|S1_recur_00-1| |nil| 3710172730 ("" (EXPAND "S1_recur") (("" (PROPAX) NIL NIL)) NIL) ((|S1_recur| DEF-DECL "nat" |stirling| NIL)) SHOSTAK)) (|S1_recur_0n| 0 (|S1_recur_0n-1| |nil| 3710172742 ("" (INDUCT "n") (("1" (EXPAND "S1_recur") (("1" (PROPAX) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (SKEEP) (("3" (EXPAND "S1_recur") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ((|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|S1_recur| DEF-DECL "nat" |stirling| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (> CONST-DECL "bool" |reals| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) SHOSTAK)) (|S1_recur_n0| 0 (|S1_recur_n0-1| |nil| 3710502493 ("" (SKEEP) (("" (EXPAND "S1_recur") (("" (PROPAX) NIL NIL)) NIL)) NIL) ((|S1_recur| DEF-DECL "nat" |stirling| NIL)) SHOSTAK)) (|S1_recur_n0_1| 0 (|S1_recur_n0_1-1| |nil| 3710502507 ("" (SKEEP) (("" (SPLIT) (("1" (FLATTEN) (("1" (EXPAND "S1_recur") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (REPLACE -1) (("2" (LEMMA "S1_recur_00") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|S1_recur| DEF-DECL "nat" |stirling| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|S1_recur_00| FORMULA-DECL NIL |stirling| NIL)) SHOSTAK)) (|S1_recur_0n_1| 0 (|S1_recur_0n_1-1| |nil| 3710502531 ("" (SKEEP) (("" (SPLIT) (("1" (FLATTEN) (("1" (EXPAND "S1_recur") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (REPLACE -1) (("2" (LEMMA "S1_recur_00") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|S1_recur| DEF-DECL "nat" |stirling| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|S1_recur_00| FORMULA-DECL NIL |stirling| NIL)) SHOSTAK)) (|S1_recur_nn| 0 (|S1_recur_nn-1| |nil| 3710172773 ("" (INDUCT "n") (("1" (ASSERT) (("1" (EXPAND "S1_recur") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (EXPAND "S1_recur" 1) (("2" (REPLACE -1) (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|S1_recur| DEF-DECL "nat" |stirling| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) SHOSTAK)) (|S1_recur_n1_TCC1| 0 (|S1_recur_n1_TCC1-1| |nil| 3710665383 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|S1_recur_n1| SUBTYPE "(number_fields.-)(stirling.n, 1)" "nat"))) (|S1_recur_n1| 0 (|S1_recur_n1-1| |nil| 3710179193 ("" (INDUCT "n") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL) ("3" (SKEEP) (("3" (ASSERT) (("3" (EXPAND "S1_recur" 1) (("3" (CASE "j=0") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL) ("2" (SPLIT) (("1" (LEMMA "factorial_n") (("1" (INST -1 "j") (("1" (SPLIT) (("1" (REPLACE -1) (("1" (REPLACE -2) (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKEEP) (("4" (ASSERT) NIL NIL)) NIL)) NIL) ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|factorial_n| FORMULA-DECL NIL |factorial| |ints|) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (> CONST-DECL "bool" |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|factorial| DEF-DECL "posnat" |factorial| |ints|) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|S1_recur| DEF-DECL "nat" |stirling| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)) SHOSTAK)) (|S1_recur_n_nminus1| 0 (|S1_recur_n_nminus1-1| |nil| 3710179305 ("" (INDUCT "n") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL) ("3" (SKEEP) (("3" (ASSERT) (("3" (CASE "j=2") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL) ("2" (SPLIT) (("1" (EXPAND "S1_recur" 2) (("1" (REPLACE -1) (("1" (LEMMA "S1_recur_nn") (("1" (INST -1 "j") (("1" (REPLACE -1) (("1" (CASE "NOT C(j,2) +j*1 = C(j,2) + C(j,1)") (("1" (LEMMA "C_1") (("1" (INST -1 "j") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (REPLACE -1) (("2" (LEMMA "C_n_plus_1") (("2" (INST -1 "j" "2") (("2" (REPLACE -1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKEEP) (("4" (ASSERT) NIL NIL)) NIL) ("5" (SKEEP) (("5" (ASSERT) NIL NIL)) NIL)) NIL) ((|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|even_minus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|factorial| DEF-DECL "posnat" |factorial| |ints|) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|S1_recur_nn| FORMULA-DECL NIL |stirling| NIL) (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|C_n_plus_1| FORMULA-DECL NIL |binomial| NIL) (C_1 FORMULA-DECL NIL |binomial| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (<= CONST-DECL "bool" |reals| NIL) (C CONST-DECL "posnat" |binomial| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|S1_recur| DEF-DECL "nat" |stirling| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)) SHOSTAK)) (|S1_recur_n_nminus2_TCC1| 0 (|S1_recur_n_nminus2_TCC1-1| |nil| 3710179771 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|S1_recur_n_nminus2| SUBTYPE "(number_fields.-)(stirling.n, 2)" "nat"))) (|S1_recur_n_nminus2_TCC2| 0 (|S1_recur_n_nminus2_TCC2-1| |nil| 3710179771 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|S1_recur_n_nminus2| SUBTYPE "3" "{i: naturalnumbers.nat | reals.<=(i, stirling.n)}"))) (|S1_recur_n_nminus2| 0 (|S1_recur_n_nminus2-1| |nil| 3710179988 ("" (INDUCT "n") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL) ("3" (SKEEP) (("3" (ASSERT) (("3" (EXPAND "S1_recur" 1) (("3" (SPLIT) (("1" (REPLACE -1) (("1" (LEMMA "S1_recur_n_nminus1") (("1" (INST -1 "j") (("1" (REPLACE -1) (("1" (LEMMA "C_n_plus_1") (("1" (INST -1 "j" "3") (("1" (REPLACE -1) (("1" (ASSERT) (("1" (FIELD) (("1" (LEMMA "C_2") (("1" (INST -1 "j") (("1" (REPLACE -1) (("1" (FIELD) (("1" (BOTH-SIDES "+" "(2*C(j,3))" 1) (("1" (ASSERT) (("1" (CASE "NOT 6 * C(j, 3) = 2 * (3*C(j,3))") (("1" (ASSERT) NIL NIL) ("2" (REPLACE -1) (("2" (CASE "NOT 3*C(j,3) = j*C(j-1,2)") (("1" (LEMMA "binom_absorption") (("1" (INST -1 "3" "j") (("1" (ASSERT) (("1" (CASE "j=3") (("1" (REPLACE -1) (("1" (GRIND) NIL NIL)) NIL) ("2" (TYPEPRED "j") (("2" (CASE "j<3") (("1" (CASE "j=2") (("1" (ASSERT) (("1" (REPLACE -1) (("1" (HIDE-ALL-BUT -5) (("1" (ASSERT) (("1" (EXPAND "C") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (CASE "j=1") (("1" (REPLACE -1) (("1" (GRIND) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -1) (("2" (LEMMA "C_2") (("2" (INST -1 "j-1") (("1" (REPLACE -1) (("1" (FIELD) NIL NIL)) NIL) ("2" (ASSERT) (("2" (CASE "j=2") (("1" (REPLACE -1) (("1" (ASSERT) (("1" (EXPAND "C") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (ASSERT) (("3" (CASE "j=2") (("1" (REPLACE -1) (("1" (EXPAND "C") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (CASE "j=2") (("1" (REPLACE -1) (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKEEP) (("4" (ASSERT) NIL NIL)) NIL) ("5" (SKEEP) (("5" (ASSERT) NIL NIL)) NIL)) NIL) ((|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|factorial| DEF-DECL "posnat" |factorial| |ints|) (|C_n_plus_1| FORMULA-DECL NIL |binomial| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnrat_div_posrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals| NIL) (|div_cancel4| FORMULA-DECL NIL |real_props| NIL) (|add_div| FORMULA-DECL NIL |real_props| NIL) (|div_distributes| FORMULA-DECL NIL |real_props| NIL) (|times_div2| FORMULA-DECL NIL |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|div_cancel2| FORMULA-DECL NIL |real_props| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|both_sides_times1| FORMULA-DECL NIL |real_props| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|even_minus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|j| SKOLEM-CONST-DECL "nat" |stirling| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|odd_minus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|odd_plus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|nzint_times_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|factorial_1| FORMULA-DECL NIL |factorial| |ints|) (|binom_absorption| FORMULA-DECL NIL |binomial_identities| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|factorial_0| FORMULA-DECL NIL |factorial| |ints|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (< CONST-DECL "bool" |reals| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|even?| CONST-DECL "bool" |integers| NIL) (C_2 FORMULA-DECL NIL |binomial| NIL) (|odd_minus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|rat_plus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|posrat_plus_nnrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|nnrat_plus_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|rat_minus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|S1_recur_n_nminus1| FORMULA-DECL NIL |stirling| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|posrat_times_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|nnrat_times_nnrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (<= CONST-DECL "bool" |reals| NIL) (C CONST-DECL "posnat" |binomial| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|S1_recur| DEF-DECL "nat" |stirling| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)) SHOSTAK)) (|S1_recur_sum| 0 (|S1_recur_sum-1| |nil| 3710252714 ("" (INDUCT "m") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL) ("2" (SKEEP) (("2" (CASE "j=0") (("1" (ASSERT) (("1" (REPLACE -1) (("1" (LEMMA "sigma_first") (("1" (LEMMA "sigma_eq_arg") (("1" (INST?) (("1" (ASSERT) (("1" (REPLACE -1) (("1" (INST -2 "LAMBDA (k: nat): S1_recur(1, k)" "1" "0") (("1" (SPLIT) (("1" (REPLACE -1) (("1" (ASSERT) (("1" (LEMMA "sigma_eq_arg") (("1" (INST -1 "LAMBDA (k: nat): S1_recur(1, k)" "1") (("1" (REPLACE -1) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "S1_recur" 2) (("2" (ASSERT) (("2" (LEMMA "sigma_first") (("2" (INST -1 "LAMBDA (k: nat):
              IF (k > 1 + j OR k = 0) THEN 0
              ELSE S1_recur(j, k - 1) + j * S1_recur(j, k) ENDIF" "1+j" "0") (("1" (SPLIT) (("1" (REPLACE -1) (("1" (ASSERT) (("1" (LEMMA "sigma_sum") (("1" (INST -1 "LAMBDA (k:nat): IF (k> 1+j OR k=0) THEN 0 ELSE S1_recur(j,k-1) ENDIF" "LAMBDA (k:nat): IF (k>1+j OR k=0) THEN 0 ELSE j*S1_recur(j,k) ENDIF" "1+j" "1") (("1" (CASE "NOT  sigma(1, 1 + j,
            LAMBDA (k: nat):
              IF (k > 1 + j OR k = 0) THEN 0
              ELSE S1_recur(j, k - 1) + j * S1_recur(j, k)
              ENDIF) =  sigma(1, 1 + j,
             LAMBDA (i: nat):
               IF (i > 1 + j OR i = 0) THEN 0 ELSE S1_recur(j, i - 1) ENDIF
                +
                IF (i > 1 + j OR i = 0) THEN 0
                ELSE j * S1_recur(j, i)
                ENDIF)") (("1" (HIDE-ALL-BUT 1) (("1" (LEMMA "sigma_eq") (("1" (INST?) (("1" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) (("2" (SKEEP) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -1) (("2" (REPLACE -2 :DIR RL) (("2" (LEMMA "sigma_scal") (("2" (INST -1 "LAMBDA (k:nat): IF (k>1+j OR k=0) THEN 0 ELSE S1_recur(j,k) ENDIF" "j" "1+j" "1") (("2" (CASE "NOT  sigma(1, 1 + j,
             LAMBDA (k: nat):
               IF (k > 1 + j OR k = 0) THEN 0
               ELSE j * S1_recur(j, k)
               ENDIF) =  sigma(1, 1 + j,
            LAMBDA (i: nat):
              j * IF (i > 1 + j OR i = 0) THEN 0 ELSE S1_recur(j, i) ENDIF)") (("1" (HIDE-ALL-BUT 1) (("1" (LEMMA "sigma_eq") (("1" (INST?) (("1" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (SKEEP) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -1) (("2" (REPLACE -2) (("2" (CASE "NOT  sigma(0, j, LAMBDA (k: nat): S1_recur(j, k)) = sigma(1, 1 + j,
              LAMBDA (k: nat):
                IF (k > 1 + j OR k = 0) THEN 0 ELSE S1_recur(j, k) ENDIF)") (("1" (HIDE-ALL-BUT 1) (("1" (LEMMA "sigma_first") (("1" (INST?) (("1" (ASSERT) (("1" (REPLACE -1) (("1" (ASSERT) (("1" (CASE "NOT S1_recur(j,0) = 0") (("1" (EXPAND "S1_recur" 1) (("1" (PROPAX) NIL NIL)) NIL) ("2" (REPLACE -1) (("2" (ASSERT) (("2" (LEMMA "sigma_last") (("2" (INST -1 "LAMBDA (k: nat):
               IF (k > 1 + j OR k = 0) THEN 0 ELSE S1_recur(j, k) ENDIF" "1+j" "1") (("2" (ASSERT) (("2" (REPLACE -1) (("2" (CASE "NOT S1_recur(j,1+j) = 0") (("1" (HIDE-ALL-BUT 1) (("1" (EXPAND "S1_recur") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (REPLACE -1) (("2" (ASSERT) (("2" (LEMMA "sigma_eq") (("2" (INST?) (("2" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (SKEEP) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -1 :DIR RL) (("2" (REPLACE -7) (("2" (CASE "NOT sigma(1, 1 + j,
            LAMBDA (k: nat):
              IF (k > 1 + j OR k = 0) THEN 0 ELSE S1_recur(j, k - 1) ENDIF) =  sigma(0, j, LAMBDA (k: nat): S1_recur(j, k))") (("1" (HIDE-ALL-BUT 1) (("1" (LEMMA "sigma_shift_fun_eq") (("1" (INST?) (("1" (ASSERT) NIL NIL) ("2" (SKEEP) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -1) (("2" (REPLACE -8) (("2" (LEMMA "factorial_n") (("2" (INST -1 "1+j") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (SKEEP) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|sigma_scal| FORMULA-DECL NIL |sigma| NIL) (|sigma_shift_fun_eq| FORMULA-DECL NIL |sigma| NIL) (|factorial_n| FORMULA-DECL NIL |factorial| |ints|) (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|sigma_last| FORMULA-DECL NIL |sigma| NIL) (|sigma_eq| FORMULA-DECL NIL |sigma| NIL) (|sigma_sum| FORMULA-DECL NIL |sigma| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|j| SKOLEM-CONST-DECL "nat" |stirling| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|sigma_first| FORMULA-DECL NIL |sigma| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|factorial_1| FORMULA-DECL NIL |factorial| |ints|) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|sigma_eq_arg| FORMULA-DECL NIL |sigma| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|sigma_nat| APPLICATION-JUDGEMENT "nat" |sigma_nat| NIL) (|factorial_0| FORMULA-DECL NIL |factorial| |ints|) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|factorial| DEF-DECL "posnat" |factorial| |ints|) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|S1_recur| DEF-DECL "nat" |stirling| NIL) (|sigma| DEF-DECL "real" |sigma| NIL) (|T_high| TYPE-EQ-DECL NIL |sigma| NIL) (|T_low| TYPE-EQ-DECL NIL |sigma| NIL) (<= CONST-DECL "bool" |reals| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) SHOSTAK)) (|Bell_0| 0 (|Bell_0-1| |nil| 3710585938 ("" (EXPAND "Bell") (("" (LEMMA "sigma_eq_arg") (("" (INST?) (("" (REPLACE -1) (("" (LEMMA "S2_recur_00") (("" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|sigma_eq_arg| FORMULA-DECL NIL |sigma| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|S2_recur_00| FORMULA-DECL NIL |stirling| NIL) (|S2_recur| DEF-DECL "nat" |stirling| NIL) (|Bell| CONST-DECL "nat" |stirling| NIL)) SHOSTAK)) (|Bell_1| 0 (|Bell_1-1| |nil| 3710586076 ("" (EXPAND "Bell") (("" (LEMMA "sigma_first") (("" (INST?) (("" (SPLIT) (("1" (REPLACE -1) (("1" (ASSERT) (("1" (HIDE -1) (("1" (LEMMA "sigma_eq_arg") (("1" (INST?) (("1" (REPLACE -1) (("1" (LEMMA "S2_recur_n0") (("1" (INST -1 "1") (("1" (REPLACE -1) (("1" (LEMMA "S2_recur_nn") (("1" (INST -1 "1") (("1" (REPLACE -1) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|sigma_first| FORMULA-DECL NIL |sigma| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|sigma_eq_arg| FORMULA-DECL NIL |sigma| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|S2_recur_nn| FORMULA-DECL NIL |stirling| NIL) (|S2_recur_n0| FORMULA-DECL NIL |stirling| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|T_low| TYPE-EQ-DECL NIL |sigma| NIL) (|T_high| TYPE-EQ-DECL NIL |sigma| NIL) (<= CONST-DECL "bool" |reals| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|S2_recur| DEF-DECL "nat" |stirling| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|sigma_nat| APPLICATION-JUDGEMENT "nat" |sigma_nat| NIL) (|Bell| CONST-DECL "nat" |stirling| NIL)) SHOSTAK)) (|Bell_2| 0 (|Bell_2-1| |nil| 3710586215 ("" (EXPAND "Bell") (("" (LEMMA "sigma_first") (("" (INST?) (("" (SPLIT) (("1" (REPLACE -1) (("1" (LEMMA "sigma_first") (("1" (HIDE -2) (("1" (INST?) (("1" (SPLIT) (("1" (REPLACE -1) (("1" (ASSERT) (("1" (LEMMA "sigma_eq_arg") (("1" (INST?) (("1" (REPLACE -1) (("1" (LEMMA "S2_recur_n0") (("1" (INST -1 "2") (("1" (REPLACE -1) (("1" (LEMMA "S2_recur_nn") (("1" (INST -1 "2") (("1" (REPLACE -1) (("1" (EXPAND "S2_recur" 1) (("1" (LEMMA "S2_recur_n0") (("1" (INST -1 "1") (("1" (REPLACE -1) (("1" (LEMMA "S2_recur_nn") (("1" (INST -1 "1") (("1" (REPLACE -1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|sigma_first| FORMULA-DECL NIL |sigma| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|sigma_eq_arg| FORMULA-DECL NIL |sigma| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|S2_recur_nn| FORMULA-DECL NIL |stirling| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|S2_recur_n0| FORMULA-DECL NIL |stirling| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|odd_plus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|T_low| TYPE-EQ-DECL NIL |sigma| NIL) (|T_high| TYPE-EQ-DECL NIL |sigma| NIL) (<= CONST-DECL "bool" |reals| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|S2_recur| DEF-DECL "nat" |stirling| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|sigma_nat| APPLICATION-JUDGEMENT "nat" |sigma_nat| NIL) (|Bell| CONST-DECL "nat" |stirling| NIL)) SHOSTAK)) (|Bell_3| 0 (|Bell_3-1| |nil| 3710586419 ("" (EXPAND "Bell") (("" (LEMMA "sigma_first") (("" (COPY -1) (("" (INST?) (("" (SPLIT) (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (COPY -1) (("1" (INST?) (("1" (SPLIT) (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (INST?) (("1" (SPLIT) (("1" (REPLACE -1) (("1" (ASSERT) (("1" (HIDE -1) (("1" (LEMMA "sigma_eq_arg") (("1" (INST?) (("1" (REPLACE -1) (("1" (LEMMA "S2_recur_n0") (("1" (COPY -1) (("1" (INST?) (("1" (REPLACE -1) (("1" (LEMMA "S2_recur_nn") (("1" (INST-CP -1 "3") (("1" (REPLACE -2) (("1" (EXPAND "S2_recur" 1) (("1" (INST-CP -4 "2") (("1" (REPLACE -5) (("1" (INST-CP -1 "2") (("1" (REPLACE -2) (("1" (EXPAND "S2_recur" 1) (("1" (INST -1 "1") (("1" (REPLACE -1) (("1" (INST -5 "1") (("1" (REPLACE -5) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|sigma_first| FORMULA-DECL NIL |sigma| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|sigma_nat| APPLICATION-JUDGEMENT "nat" |sigma_nat| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|S2_recur| DEF-DECL "nat" |stirling| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|T_high| TYPE-EQ-DECL NIL |sigma| NIL) (|T_low| TYPE-EQ-DECL NIL |sigma| NIL) (|sigma_eq_arg| FORMULA-DECL NIL |sigma| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|S2_recur_nn| FORMULA-DECL NIL |stirling| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|S2_recur_n0| FORMULA-DECL NIL |stirling| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|odd_plus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|Bell| CONST-DECL "nat" |stirling| NIL)) SHOSTAK)) (|Bell_4| 0 (|Bell_4-1| |nil| 3710586735 ("" (GRIND) NIL NIL) ((|S2_recur| DEF-DECL "nat" |stirling| NIL) (|sigma| DEF-DECL "real" |sigma| NIL) (|Bell| CONST-DECL "nat" |stirling| NIL) (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|sigma_nat| APPLICATION-JUDGEMENT "nat" |sigma_nat| NIL)) SHOSTAK)) (|Bell_5| 0 (|Bell_5-1| |nil| 3710586768 ("" (GRIND) NIL NIL) ((|S2_recur| DEF-DECL "nat" |stirling| NIL) (|sigma| DEF-DECL "real" |sigma| NIL) (|Bell| CONST-DECL "nat" |stirling| NIL) (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|sigma_nat| APPLICATION-JUDGEMENT "nat" |sigma_nat| NIL)) SHOSTAK)) (|Bell_recur_TCC1| 0 (|Bell_recur_TCC1-1| |nil| 3710588697 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|Bell_recur| SUBTYPE "(number_fields.-)(stirling.n, 1)" "nat"))) (|Bell_recur_TCC2| 0 (|Bell_recur_TCC2-1| |nil| 3710588697 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|Bell_recur| SUBTYPE "stirling.k" "{i: naturalnumbers.nat | reals.<=(i, (number_fields.-)(stirling.n, 1))}"))) (|Bell_recur_TCC3| 0 (|Bell_recur_TCC3-1| |nil| 3710588697 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL)) NIL (|Bell_recur| TERMINATION "stirling.Bell_recur(stirling.k)" "NIL"))) (|Bell_recur_0| 0 (|Bell_recur_0-1| |nil| 3710591894 ("" (EXPAND "Bell_recur") (("" (PROPAX) NIL NIL)) NIL) ((|Bell_recur| DEF-DECL "nat" |stirling| NIL)) SHOSTAK)) (|Bell_recur_1| 0 (|Bell_recur_1-1| |nil| 3710591905 ("" (EXPAND "Bell_recur") (("" (LEMMA "sigma_eq_arg") (("" (INST?) (("1" (REPLACE -1) (("1" (ASSERT) (("1" (LEMMA "C_n") (("1" (INST -1 "0") (("1" (REPLACE -1) (("1" (LEMMA "Bell_recur_0") (("1" (REPLACE -1) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|sigma_eq_arg| FORMULA-DECL NIL |sigma| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|C_n| FORMULA-DECL NIL |binomial| NIL) (|Bell_recur_0| FORMULA-DECL NIL |stirling| NIL) (|sigma_nat| APPLICATION-JUDGEMENT "nat" |sigma_nat| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (> CONST-DECL "bool" |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (C CONST-DECL "posnat" |binomial| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|Bell_recur| DEF-DECL "nat" |stirling| NIL)) SHOSTAK)) (|Bell_recur_2| 0 (|Bell_recur_2-1| |nil| 3710591983 ("" (GRIND) NIL NIL) ((|factorial| DEF-DECL "posnat" |factorial| |ints|) (C CONST-DECL "posnat" |binomial| NIL) (|Bell_recur| DEF-DECL "nat" |stirling| NIL) (|sigma| DEF-DECL "real" |sigma| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|nnrat_times_nnrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals| NIL) (|rat_plus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|sigma_nat| APPLICATION-JUDGEMENT "nat" |sigma_nat| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK)) (|Bell_recur_3| 0 (|Bell_recur_3-1| |nil| 3710591999 ("" (GRIND) NIL NIL) ((|factorial| DEF-DECL "posnat" |factorial| |ints|) (C CONST-DECL "posnat" |binomial| NIL) (|Bell_recur| DEF-DECL "nat" |stirling| NIL) (|sigma| DEF-DECL "real" |sigma| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|nnrat_times_nnrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals| NIL) (|rat_plus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|sigma_nat| APPLICATION-JUDGEMENT "nat" |sigma_nat| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK)) (|Bell_recur_4| 0 (|Bell_recur_4-1| |nil| 3710592007 ("" (GRIND) NIL NIL) ((|factorial| DEF-DECL "posnat" |factorial| |ints|) (C CONST-DECL "posnat" |binomial| NIL) (|Bell_recur| DEF-DECL "nat" |stirling| NIL) (|sigma| DEF-DECL "real" |sigma| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|nnrat_times_nnrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals| NIL) (|rat_plus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|sigma_nat| APPLICATION-JUDGEMENT "nat" |sigma_nat| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK)) (|Bell_recur_5| 0 (|Bell_recur_5-1| |nil| 3710592011 ("" (GRIND) NIL NIL) ((|factorial| DEF-DECL "posnat" |factorial| |ints|) (C CONST-DECL "posnat" |binomial| NIL) (|Bell_recur| DEF-DECL "nat" |stirling| NIL) (|sigma| DEF-DECL "real" |sigma| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|nnrat_times_nnrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals| NIL) (|rat_plus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|sigma_nat| APPLICATION-JUDGEMENT "nat" |sigma_nat| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK)))
