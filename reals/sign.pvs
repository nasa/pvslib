%% Sign definition

%% Created by Cesar Munoz
%% Updated by Alfons Geser

sign : THEORY
BEGIN

  IMPORTING sq,
            abs_lems

  Sign : TYPE = {i:nzint|i=1 OR i=-1} 
  sign(x:real): Sign = IF x >= 0 THEN 1 ELSE -1 ENDIF

  eps,
  eps1,eps2 : VAR Sign
  x,y,z     : VAR real
  nnx       : VAR nnreal
  nx        : VAR negreal
  n         : VAR nat
  nz        : VAR nzreal

  sign_mult_clos: JUDGEMENT *(eps1,eps2) HAS_TYPE Sign

  sign_div_clos : JUDGEMENT  /(eps1,eps2) HAS_TYPE Sign

  sign_neg_clos : JUDGEMENT  -(eps1) HAS_TYPE Sign

  sign_sq_clos  : JUDGEMENT   sq(eps1) HAS_TYPE Sign

  sign_id       : LEMMA sign(eps) = eps

  sign_pos      : LEMMA sign(x)*x >= 0

  sign_eq_1     : LEMMA sign(nnx) = 1
 
  sign_eq_neg1  : LEMMA sign(nx) = -1

  sign_nat      : LEMMA sign(n) = 1

  sign_abs      : LEMMA abs(x) = sign(x)*x

  sign_nneg     : LEMMA sign(x)*x >= 0

  square_eps    : LEMMA eps*eps = 1

  sq_eps        : LEMMA sq(eps) = 1

  sq_eq_sign    : LEMMA sq(x) = sq(y)  IFF (EXISTS eps: x = eps*y)
  
  sq_sign       : LEMMA sq(sign(x)) = 1

  sign_sign     : LEMMA sign(x)*sign(x) = 1

  sign_sign_neg : LEMMA sign(nz)*sign(-nz) = -1

  sign_times_abs: LEMMA sign(x)*abs(x) = x

  abs_sign      : LEMMA eps*x >= 0 IMPLIES eps*x = abs(x)

  sign_neg      : LEMMA x /= 0 IMPLIES  sign(-x) = -sign(x)

  sign_minus    : LEMMA x /= y IMPLIES  -sign(x-y) = sign(y-x)

  sign_mult     : LEMMA x /= 0 and y/=0 IMPLIES  sign(x*y) = sign(x)*sign(y)

  sign_mult_1   : LEMMA x*y > 0 IMPLIES sign(x*y) = 1

  sign_mult_n1  : LEMMA x*y < 0 IMPLIES sign(x*y) = -1

  sign_div      : LEMMA y /= 0 AND x /= 0 IMPLIES sign(x/y) = sign(x)*sign(y)

  sign_div_1   : LEMMA x/nz > 0 IMPLIES sign(x/nz) = 1

  sign_div_n1  : LEMMA x/nz < 0 IMPLIES sign(x/nz) = -1

  sign_mult_pos : LEMMA x > 0 IMPLIES sign(x*y) = sign(y)

  sign_div_pos1 : LEMMA x > 0 AND y /= 0 IMPLIES sign(x/y) = sign(y)

  sign_div_pos2 : LEMMA y > 0 IMPLIES sign(x/y) = sign(x)

  sign_mult_neg : LEMMA x < 0 IMPLIES sign(x*y) = sign(-y)

  sign_div_neg1 : LEMMA x < 0 AND y /= 0 IMPLIES sign(x/y) = -sign(y)

  sign_div_neg2 : LEMMA y < 0 IMPLIES sign(x/y) = sign(-x)

  sign_div_mult : LEMMA sign(x)/sign(y) = sign(x)*sign(y)

  sign_and_abs  : LEMMA sign(x) = sign(y) AND abs(x) = abs(y) IFF x = y

  sign_le : LEMMA
     x <= y IMPLIES sign(x) <= sign(y)

  sign_ge : LEMMA
     x >= y IMPLIES sign(x) >= sign(y)

  sign_dichotomy : LEMMA
     sign(x)=sign(y) OR sign(x)=-sign(y)

  AUTO_REWRITE+ sign_nat

  sign_ext(x): {sig:real|(sig=-1 OR sig=1 OR sig=0) AND sig*x=abs(x)} =
    IF x<0 THEN -1
    ELSIF x>0 THEN 1
    ELSE 0 ENDIF

  sign_ext_nz : LEMMA sign_ext(nz) = sign(nz)

  sign_ext_mult: LEMMA sign_ext(x*y) = sign_ext(x)*sign_ext(y)

  sign_ext_mult_1   : LEMMA x*y > 0 IMPLIES sign_ext(x*y) = 1

  sign_ext_mult_n1  : LEMMA x*y < 0 IMPLIES sign_ext(x*y) = -1

  sign_ext_div: LEMMA sign_ext(x/nz) = sign_ext(x)*sign(nz)

  sign_ext_div_1   : LEMMA x/nz > 0 IMPLIES sign_ext(x/nz) = 1

  sign_ext_div_n1  : LEMMA x/nz < 0 IMPLIES sign_ext(x/nz) = -1

END sign
