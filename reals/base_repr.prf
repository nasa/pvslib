(|base_repr| (|base_n_TCC1| 0 (|base_n_TCC1-1| |nil| 3617026679 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|base_n| SUBTYPE "base_repr.n" "nonzero_integer"))) (|base_n_TCC2| 0 (|base_n_TCC2-2| "" 3790089018 ("" (SKEEP) (("" (LEMMA "mod_pos") (("" (INST?) (("" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL) ((|mod_pos| FORMULA-DECL NIL |mod| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) SHOSTAK (|base_n| SUBTYPE "mod.mod(base_repr.k, base_repr.n)" "nat")) (|base_n_TCC2-1| |nil| 3617026679 ("" (SKEEP) (("" (SKEEP) (("" (LEMMA "mod_pos") (("" (INST?) (("" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|base_n| SUBTYPE "mod.mod(base_repr.k, base_repr.n)" "nat"))) (|base_n_TCC3| 0 (|base_n_TCC3-1| |nil| 3617026679 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|base_n| SUBTYPE "base_repr.n" "nonzero_integer"))) (|base_n_TCC4| 0 (|base_n_TCC4-2| "" 3790089018 ("" (SKEEP) (("" (SPLIT) (("1" (EXPAND "mod") (("1" (GROUND) NIL NIL)) NIL) ("2" (GROUND) (("2" (LEMMA "mod_pos") (("2" (INST?) (("2" (FLATTEN) (("2" (CROSS-MULT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|mod| CONST-DECL "{k | abs(k) < abs(j)}" |mod| NIL) (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|mod_pos| FORMULA-DECL NIL |mod| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nonzero_integer| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (< CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|div_mult_pos_ge1| FORMULA-DECL NIL |real_props| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL)) SHOSTAK (|base_n| SUBTYPE "number_fields./(((number_fields.-)(base_repr.k, mod.mod(base_repr.k, base_repr.n))), base_repr.n)" "nat")) (|base_n_TCC4-1| |nil| 3617026679 ("" (SKEEP) (("" (SKEEP) (("" (SPLIT) (("1" (EXPAND "mod") (("1" (GROUND) NIL NIL)) NIL) ("2" (GROUND) (("2" (LEMMA "mod_pos") (("2" (INST?) (("2" (FLATTEN) (("2" (CROSS-MULT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|base_n| SUBTYPE "number_fields./(((number_fields.-)(base_repr.k, mod.mod(base_repr.k, base_repr.n))), base_repr.n)" "nat"))) (|base_n_TCC5| 0 (|base_n_TCC5-2| "" 3790089019 ("" (SKEEP) (("" (LEMMA "mod_pos") (("" (INST?) (("" (FLATTEN) (("" (CROSS-MULT) (("" (BOTH-SIDES "-" "k" 3) (("" (SIMPLIFY) (("" (CASE-REPLACE "k*n-k= k*(n-1)") (("1" (CASE "n-1>0") (("1" (CASE "k>0") (("1" (MULT-INEQ -1 -2) (("1" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|mod_pos| FORMULA-DECL NIL |mod| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|both_sides_minus_lt1| FORMULA-DECL NIL |real_props| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|gt_times_gt_any1| FORMULA-DECL NIL |extra_real_props| NIL) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|div_mult_pos_lt1| FORMULA-DECL NIL |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nonzero_integer| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (< CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (|mod| CONST-DECL "{k | abs(k) < abs(j)}" |mod| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) SHOSTAK (|base_n| TERMINATION "base_repr.base_n(base_repr.n, number_fields./(((number_fields.-)(base_repr.k, mod.mod(base_repr.k, base_repr.n))), base_repr.n))" "NIL")) (|base_n_TCC5-1| |nil| 3617026679 ("" (SKEEP) (("" (SKEEP) (("" (LEMMA "mod_pos") (("" (INST?) (("" (FLATTEN) (("" (CROSS-MULT) (("" (BOTH-SIDES "-" "k" 3) (("" (SIMPLIFY) (("" (CASE-REPLACE "k*n-k= k*(n-1)") (("1" (CASE "n-1>0") (("1" (CASE "k>0") (("1" (MULT-INEQ -1 -2) (("1" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|base_n| TERMINATION "base_repr.base_n(base_repr.n, number_fields./(((number_fields.-)(base_repr.k, mod.mod(base_repr.k, base_repr.n))), base_repr.n))" "NIL"))) (|base_n_TCC6| 0 (|base_n_TCC6-1| |nil| 3617026679 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) NIL (|base_n| SUBTYPE "(number_fields.-)(base_repr.i, 1)" "nat"))) (|upper_index_TCC1| 0 (|upper_index_TCC1-1| |nil| 3617354263 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL)) NIL (|upper_index| SUBTYPE "base_repr.k" "{x: reals.real | reals.>=(x, 1)}"))) (|base_n_lt_n| 0 (|base_n_lt_n-3| "" 3882371985 ("" (SKOLEM 1 ("n" "_" "_")) (("" (INDUCT "i" 1 "NAT_induction") (("" (SKEEP) (("" (SKEEP) (("" (EXPAND "base_n" 1) (("" (LIFT-IF 1) (("" (SPLIT 1) (("1" (FLATTEN) (("1" (SPLIT 1) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (LEMMA "mod_pos") (("1" (INST?) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (INST -1 "j-1") (("1" (SPLIT -1) (("1" (INST -1 "(k-mod(k,n))/n") (("1" (HIDE-ALL-BUT 1) (("1" (SPLIT 1) (("1" (GRIND) NIL NIL) ("2" (CROSS-MULT) (("2" (EXPAND "mod") (("2" (CANCEL-BY 1 "n") (("2" (GROUND) (("2" (GRIND) (("2" (TYPEPRED ("k")) (("2" (DIV-BY -1 "n") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|base_n_lt_n-2| "" 3790089019 ("" (SKOLEM 1 ("n" "_" "_")) (("" (INDUCT "i" 1 NAT_INDUCTION) (("" (SKEEP) (("" (SKEEP) (("" (EXPAND "base_n" 1) (("" (LIFT-IF 1) (("" (SPLIT 1) (("1" (FLATTEN) (("1" (SPLIT 1) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (LEMMA "mod_pos") (("1" (INST?) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (INST -1 "j-1") (("1" (SPLIT -1) (("1" (INST -1 "(k-mod(k,n))/n") (("1" (HIDE-ALL-BUT 1) (("1" (SPLIT 1) (("1" (GRIND) NIL NIL) ("2" (CROSS-MULT) (("2" (EXPAND "mod") (("2" (CANCEL-BY 1 "n") (("2" (GROUND) (("2" (GRIND) (("2" (TYPEPRED (K)) (("2" (DIV-BY -1 "n") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (< CONST-DECL "bool" |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|base_n| DEF-DECL "nat" |base_repr| NIL) (|NAT_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|div_mult_pos_ge1| FORMULA-DECL NIL |real_props| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (DIV_192 SKOLEM-CONST-DECL "{x: nat | x > 1}" |base_repr| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL) (<= CONST-DECL "bool" |reals| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|floor| CONST-DECL "{i | i <= x & x < i + 1}" |floor_ceil| NIL) (|both_sides_times_pos_ge1| FORMULA-DECL NIL |real_props| NIL) (|nzrat_div_nzrat_is_nzrat| APPLICATION-JUDGEMENT "nzrat" |rationals| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|zero_times1| FORMULA-DECL NIL |real_props| NIL) (|pos_div_gt| FORMULA-DECL NIL |real_props| NIL) (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|both_sides_div_pos_ge1| FORMULA-DECL NIL |real_props| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|k| SKOLEM-CONST-DECL "nat" |base_repr| NIL) (|n| SKOLEM-CONST-DECL "{x: nat | x > 1}" |base_repr| NIL) (|mod| CONST-DECL "{k | abs(k) < abs(j)}" |mod| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|nonzero_integer| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|j| SKOLEM-CONST-DECL "nat" |base_repr| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|mod_pos| FORMULA-DECL NIL |mod| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) SHOSTAK) (|base_n_lt_n-1| |nil| 3620120286 ("" (SKOLEM 1 ("n" "_" "_")) (("" (INDUCT "i" 1 NAT_INDUCTION) (("" (SKEEP) (("" (SKEEP) (("" (EXPAND "base_n" 1) (("" (LIFT-IF 1) (("" (SPLIT 1) (("1" (FLATTEN) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (LEMMA "mod_pos") (("1" (INST?) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (INST -1 "j-1") (("1" (SPLIT -1) (("1" (INST -1 "(k-mod(k,n))/n") (("1" (HIDE-ALL-BUT 1) (("1" (SPLIT 1) (("1" (GRIND) NIL NIL) ("2" (CROSS-MULT) (("2" (EXPAND "mod") (("2" (CANCEL-BY 1 "n") (("2" (GROUND) (("2" (GRIND) (("2" (TYPEPRED (K)) (("2" (DIV-BY -1 "n") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|upper_is_bound| 0 (|upper_is_bound-7| "" 3882372173 ("" (SKOLEM 1 ("n" "_" "_")) (("" (INDUCT "k" 1 "NAT_induction") (("" (SKEEP) (("" (SKEEP) (("" (CASE "j<n") (("1" (EXPAND "base_n" 1) (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (SPLIT) (("1" (FLATTEN) (("1" (EXPAND "upper_index") (("1" (LIFT-IF -5) (("1" (SPLIT -5) (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) (("2" (TYPEPRED ("log_nat(j, n)`1")) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "upper_index" -2) (("2" (LIFT-IF -2) (("2" (SPLIT -2) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (FLIP-INEQ 2) (("2" (EXPAND "base_n" 2) (("2" (LIFT-IF 2) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (HIDE 1) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (HIDE 1) (("2" (INST -3 "(j-mod(j,n))/n") (("1" (SPLIT -3) (("1" (INST -1 "m-1") (("1" (LEMMA "log_nat_incr") (("1" (CASE "(j-mod(j,n))/n = 0") (("1" (REPLACE -1) (("1" (EXPAND "base_n") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (LEMMA "base_n_TCC4") (("2" (INST -1 "n" "j" "1") (("2" (SPLIT -1) (("1" (CASE "(j-mod(j,n))/n<1") (("1" (FLATTEN) (("1" (GROUND) (("1" (ASSERT) (("1" (NAME-REPLACE "N" "(j-mod(j,n))/n") (("1" (HIDE-ALL-BUT (-1 -2 -3 2)) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLIP-INEQ 1) (("2" (LEMMA "log_nat_incr") (("2" (INST -1 "n" "(j-mod(j,n))/n" "j") (("2" (SPLIT -1) (("1" (CASE "m-1>log_nat((j - mod(j, n)) / n, n)`1") (("1" (SPLIT -6) (("1" (PROPAX) NIL NIL) ("2" (EXPAND "upper_index") (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL) ("2" (SIMPLIFY 1) (("2" (CASE-REPLACE "n * ((j - mod(j, n)) / n) = j-mod(j,n)") (("1" (BOTH-SIDES "-" "j" 1) (("1" (SIMPLIFY 1) (("1" (LEMMA "mod_pos") (("1" (INST?) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL) ("3" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED ("log_nat(j, n)`1")) (("2" (GROUND) NIL NIL)) NIL)) NIL) ("2" (LEMMA "mod_pos") (("2" (INST -1 "j" "n") (("2" (FLATTEN) (("2" (CROSS-MULT 1) (("2" (GROUND) (("2" (BOTH-SIDES "-" "j" 1) (("2" (SIMPLIFY 1) (("2" (CASE "0<j") (("1" (CASE "0<n-1") (("1" (MULT-INEQ -1 -2) (("1" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "base_n_TCC4") (("2" (INST -1 "n" "j" "1") (("2" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (GROUND) NIL NIL) ("3" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|upper_is_bound-6| |nil| 3617357240 ("" (SKOLEM 1 ("n" "_" "_")) (("" (INDUCT "k" 1 NAT_INDUCTION) (("" (SKEEP) (("" (SKEEP) (("" (CASE "j<n") (("1" (EXPAND "base_n" 1) (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (SPLIT) (("1" (FLATTEN) (("1" (EXPAND "upper_index") (("1" (LIFT-IF -5) (("1" (SPLIT -5) (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) (("2" (TYPEPRED ("log_nat(j, n)`1")) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "upper_index" -2) (("2" (LIFT-IF -2) (("2" (SPLIT -2) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (FLIP-INEQ 2) (("2" (EXPAND "base_n" 2) (("2" (LIFT-IF 2) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (HIDE 1) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (HIDE 1) (("2" (INST -3 "(j-mod(j,n))/n") (("1" (SPLIT -3) (("1" (INST -1 "m-1") (("1" (LEMMA "log_nat_incr") (("1" (CASE "(j-mod(j,n))/n = 0") (("1" (REPLACE -1) (("1" (EXPAND "base_n") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (LEMMA "base_n_TCC4") (("2" (INST -1 "n" "j" "1") (("2" (SPLIT -1) (("1" (CASE "(j-mod(j,n))/n<1") (("1" (FLATTEN) (("1" (GROUND) (("1" (ASSERT) (("1" (NAME-REPLACE "N" "(j-mod(j,n))/n") (("1" (HIDE-ALL-BUT (-1 -2 -3 2)) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLIP-INEQ 1) (("2" (LEMMA "log_nat_incr") (("2" (INST -1 "n" "(j-mod(j,n))/n" "j") (("2" (SPLIT -1) (("1" (CASE "m-1>log_nat((j - mod(j, n)) / n, n)`1") (("1" (SPLIT -6) (("1" (PROPAX) NIL NIL) ("2" (EXPAND "upper_index") (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL) ("2" (SIMPLIFY 1) (("2" (CASE-REPLACE "n * ((j - mod(j, n)) / n) = j-mod(j,n)") (("1" (BOTH-SIDES "-" "j" 1) (("1" (SIMPLIFY 1) (("1" (LEMMA "mod_pos") (("1" (INST?) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL) ("3" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED ("log_nat(j, n)`1")) (("2" (GROUND) NIL NIL)) NIL)) NIL) ("2" (LEMMA "mod_pos") (("2" (INST -1 "j" "n") (("2" (FLATTEN) (("2" (CROSS-MULT 1) (("2" (GROUND) (("2" (BOTH-SIDES "-" "j" 1) (("2" (SIMPLIFY 1) (("2" (CASE "0<j") (("1" (CASE "0<n-1") (("1" (MULT-INEQ -1 -2) (("1" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "base_n_TCC4") (("2" (INST -1 "n" "j" "1") (("2" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (GROUND) NIL NIL) ("3" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (> CONST-DECL "bool" |reals| NIL) (|upper_index| CONST-DECL "nat" |base_repr| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|base_n| DEF-DECL "nat" |base_repr| NIL) (|NAT_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|log_nat_incr| FORMULA-DECL NIL |log_nat| NIL) (|base_n_TCC4| SUBTYPE-TCC NIL |base_repr| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|both_sides_minus_le1| FORMULA-DECL NIL |real_props| NIL) (|mod_pos| FORMULA-DECL NIL |mod| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|m| SKOLEM-CONST-DECL "nat" |base_repr| NIL) (|div_mult_pos_lt1| FORMULA-DECL NIL |real_props| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|both_sides_minus_lt1| FORMULA-DECL NIL |real_props| NIL) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|lt_times_lt_any1| FORMULA-DECL NIL |extra_real_props| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|j| SKOLEM-CONST-DECL "nat" |base_repr| NIL) (|nonzero_integer| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (|mod| CONST-DECL "{k | abs(k) < abs(j)}" |mod| NIL) (|n| SKOLEM-CONST-DECL "{x: nat | x > 1}" |base_repr| NIL) (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nat_exp| APPLICATION-JUDGEMENT "nat" |exponentiation| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|log_nat| DEF-DECL "[n: nat, {y | y < p AND x = p ^ n * y}]" |log_nat| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL) (|nnrat_exp| APPLICATION-JUDGEMENT "nnrat" |exponentiation| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (< CONST-DECL "bool" |reals| NIL)) NIL) (|upper_is_bound-5| |nil| 3617357192 ("" (INDUCT "k" NAT_INDUCTION) (("1" (SKEEP) (("1" (TYPEPRED (N)) (("1" (EXPAND "base_n") (("1" (GROUND) NIL))))))) ("2" (SKEEP) (("2" (SKEEP) (("2" (EXPAND "base_n" 1) (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (EXPAND "upper_index") (("1" (TYPEPRED ("log_nat(1+j, n)`1")) (("1" (GROUND) NIL))))))) ("2" (PROPAX) NIL))))) ("2" (FLATTEN) (("2" (SPLIT) (("1" (FLATTEN) (("1" (EXPAND "upper_index") (("1" (TYPEPRED ("log_nat(1+j, n)`1")) (("1" (GROUND) NIL))))))) ("2" (FLATTEN) (("2" (POSTPONE) NIL)))))))))))))))))) NIL) NIL NIL) (|upper_is_bound-4| |nil| 3617357053 ("" (INDUCT "k") (("1" (SKEEP) (("1" (TYPEPRED (N)) (("1" (EXPAND "base_n") (("1" (GROUND) NIL))))))) ("2" (SKEEP) (("2" (SKEEP) (("2" (EXPAND "base_n" 1) (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (EXPAND "upper_index") (("1" (TYPEPRED ("log_nat(1+j, n)`1")) (("1" (GROUND) NIL))))))) ("2" (PROPAX) NIL))))) ("2" (FLATTEN) (("2" (SPLIT) (("1" (FLATTEN) (("1" (EXPAND "upper_index") (("1" (TYPEPRED ("log_nat(1+j, n)`1")) (("1" (GROUND) NIL))))))) ("2" (FLATTEN) (("2" (POSTPONE) NIL)))))))))))))))))) NIL) NIL NIL) (|upper_is_bound-3| |nil| 3617356979 ("" (INDUCT "k" "NAT_induction") (("1" (SKEEP) (("1" (TYPEPRED (N)) (("1" (EXPAND "base_n") (("1" (GROUND) NIL))))))) ("2" (SKEEP) (("2" (SKEEP) (("2" (EXPAND "base_n" 1) (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (EXPAND "upper_index") (("1" (TYPEPRED ("log_nat(1+j, n)`1")) (("1" (GROUND) NIL))))))) ("2" (PROPAX) NIL))))) ("2" (FLATTEN) (("2" (SPLIT) (("1" (FLATTEN) (("1" (EXPAND "upper_index") (("1" (TYPEPRED ("log_nat(1+j, n)`1")) (("1" (GROUND) NIL))))))) ("2" (FLATTEN) (("2" (POSTPONE) NIL)))))))))))))))))) NIL) NIL NIL) (|upper_is_bound-2| |nil| 3617356437 ("" (INDUCT "k") (("1" (SKEEP) (("1" (TYPEPRED (N)) (("1" (EXPAND "base_n") (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (SKEEP) (("2" (EXPAND "base_n" 1) (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (EXPAND "upper_index") (("1" (TYPEPRED ("log_nat(1+j, n)`1")) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT) (("1" (FLATTEN) (("1" (EXPAND "upper_index") (("1" (TYPEPRED ("log_nat(1+j, n)`1")) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL) (|upper_is_bound-1| |nil| 3617354266 ("" (INDUCT "k") (("1" (SKEEP) (("1" (TYPEPRED (N)) (("1" (EXPAND "base_n") (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (SKEEP) (("2" (EXPAND "base_n") (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (EXPAND "upper_index") (("1" (TYPEPRED ("log_nat(1+j, n)`1")) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT) (("1" (FLATTEN) (("1" (EXPAND "upper_index") (("1" (TYPEPRED ("log_nat(1+j, n)`1")) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "upper_index") (("2" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|base_n_is_n_TCC1| 0 (|base_n_is_n_TCC2-1| |nil| 3617354263 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|base_n_is_n| SUBTYPE "base_repr.s" "{i: integers.int | booleans.OR(base_repr.n /= 0, reals.>=(i, 0))}"))) (|base_n_is_n| 0 (|base_n_is_n-3| "" 3882373273 ("" (SKOLEM 1 ("n" "_")) (("" (INDUCT "k" 1 "NAT_induction") (("" (SKOLEM 1 "k") (("" (CASE "k<n") (("1" (FLATTEN) (("1" (CASE-REPLACE "upper_index(n,k) = 0") (("1" (LEMMA "sigma_eq_arg[nat]") (("1" (INST?) (("1" (REPLACE -1) (("1" (HIDE (-1 -4)) (("1" (EXPAND "base_n") (("1" (EXPAND "^") (("1" (EXPAND "expt") (("1" (LIFT-IF 1) (("1" (SPLIT) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL) ("2" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "upper_index") (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (EXPAND "log_nat") (("2" (LIFT-IF 2) (("2" (SPLIT 2) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLIP-INEQ 1) (("2" (FLATTEN) (("2" (REWRITE "sigma_first_ge") (("2" (CASE-REPLACE "n^0*base_n(n,k)(0) = mod(k,n)") (("1" (BOTH-SIDES "-" "mod(k,n)" 1) (("1" (SIMPLIFY 1) (("1" (REWRITE "sigma_shift_to_zero") (("1" (BOTH-SIDES "*" "1/n" 1) (("1" (LEMMA "sigma_scal_right") (("1" (INST?) (("1" (REPLACE -1 :DIR RL) (("1" (CASE-REPLACE "(LAMBDA (i_1: nat):
                             (n ^ (1 + i_1)) * base_n(n, k)(1 + i_1) * (1 / n)) = LAMBDA (i: nat):
                             n ^ i * base_n(n, k)(1 + i)") (("1" (EXPAND "base_n" 1) (("1" (LEMMA "base_n_TCC4") (("1" (INST -1 "n" "k" "1") (("1" (SPLIT -1) (("1" (CASE-REPLACE "(LAMBDA(i:nat): n^i*IF k < n THEN 0
                                    ELSE base_n(n, (k - mod(k, n)) / n)(i)
                                    ENDIF) = LAMBDA(i:nat): n^i*base_n(n, (k - mod(k, n)) / n)(i)") (("1" (NAME "K" "(k-mod(k,n))/n") (("1" (CASE-REPLACE "upper_index(n,K) = upper_index(n,k)-1") (("1" (HIDE (-5 -6)) (("1" (INST -7 "K") (("1" (SPLIT -7) (("1" (REPLACE -3 :DIR RL) (("1" (GROUND) NIL NIL)) NIL) ("2" (EXPAND "K") (("2" (CROSS-MULT 1) (("2" (BOTH-SIDES "-" "k" 1) (("2" (SIMPLIFY 1) (("2" (CASE "0<k") (("1" (CASE "0<n-1") (("1" (MULT-INEQ -1 -2) (("1" (LEMMA "mod_pos") (("1" (INST?) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "K") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "upper_index") (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (CASE "k=n") (("1" (REPLACE -1) (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "log_nat") (("2" (EXPAND "log_nat") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -1) (("2" (CROSS-MULT -2) (("2" (CASE "k=mod(k,n)") (("1" (LEMMA "mod_pos") (("1" (INST?) (("1" (FLATTEN) (("1" (REPLACE -3 :DIR RL) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (LIFT-IF 2) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (HIDE (-2 -5 -6 -7 -9 4)) (("2" (LEMMA "log_nat_incr") (("2" (INST -1 "n" "K" "k") (("2" (SPLIT -1) (("1" (CASE "log_nat(K,n)`1<=log_nat(k,n)`1-1") (("1" (BOTH-SIDES "+" "1" -1) (("1" (SIMPLIFY -1) (("1" (BOTH-SIDES "+" "1" 2) (("1" (SIMPLIFY 2) (("1" (CASE-REPLACE "1+log_nat(K, n)`1 = log_nat(n*K, n)`1") (("1" (LEMMA "log_nat_incr") (("1" (CASE "log_nat(n*K, n)`1< log_nat(k,n)`1") (("1" (CASE "log_nat(n*K, n)`1+1 <= log_nat(k,n)`1") (("1" (CASE-REPLACE "log_nat(n*K, n)`1+1 = log_nat(n*n*K, n)`1") (("1" (LEMMA "log_nat_bounds") (("1" (INST-CP -1 "n" "n*K") (("1" (CASE "n*K<n^(log_nat(n*K,n)`1+1)") (("1" (INST -2 "n" "k") (("1" (CASE "n^log_nat(k,n)`1<=k") (("1" (REPLACE -5 -2) (("1" (DIV-BY -1 "n") (("1" (CASE-REPLACE "n ^ log_nat(k, n)`1 / n = n^(log_nat(k,n)`1-1)") (("1" (CASE "n^(log_nat(k,n)`1-1)<=floor(k/n)") (("1" (MULT-BY -1 "n") (("1" (CROSS-MULT -2) (("1" (REPLACE -2 -1 :DIR RL) (("1" (CASE-REPLACE "floor(k/n)*n = k-mod(k,n)") (("1" (CASE-REPLACE "k-mod(k,n) = n*K") (("1" (CASE "n^log_nat(k,n)`1<n^log_nat(n*n*K, n)`1") (("1" (LEMMA "both_sides_expt_gt1_lt") (("1" (INST -1 "n" "log_nat(k, n)`1 " " log_nat(n * n * K, n)`1") (("1" (FLATTEN) (("1" (SPLIT -1) (("1" (GROUND) (("1" (HIDE-ALL-BUT (-2 -13)) (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) (("2" (SPLIT-INEQ -3) NIL NIL)) NIL)) NIL) ("2" (EXPAND "K") (("2" (GROUND) NIL NIL)) NIL)) NIL) ("2" (EXPAND "mod") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "FORALL (nn1:nat,xx1:nnreal): nn1<=xx1 IMPLIES nn1<=floor(xx1)") (("1" (INST?) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) (("3" (EXPAND "^") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SKEEP) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CROSS-MULT 1) (("2" (EXPAND "^") (("2" (LIFT-IF 1) (("2" (SPLIT) (("1" (FLATTEN) (("1" (EXPAND "expt" 1 1) (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (NAME-REPLACE "lgnK" "log_nat(n*K, n)`1") (("2" (HIDE (-1 -2 -3 -4 -5 -6 3)) (("2" (EXPAND "log_nat") (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (GROUND) (("1" (CANCEL-BY -1 "n") (("1" (CASE "K>=1") (("1" (TYPEPRED ("n")) (("1" (MULT-INEQ -1 -2) (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (EXPAND "K") (("2" (GROUND) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (CASE-REPLACE "K * n * n / n = K*n") (("1" (EXPAND "lgnK") (("1" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (CASE "K>=1") (("1" (TYPEPRED ("n")) (("1" (MULT-INEQ -1 -2) (("1" (GROUND) (("1" (MULT-INEQ -1 -2) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-8 -9 1 5)) (("2" (EXPAND "K") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL) ("2" (NAME-REPLACE "lgK" "log_nat(K,n)`1") (("2" (EXPAND "log_nat") (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (CANCEL-BY -1 "n") (("1" (EXPAND "K") (("1" (GROUND) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (CASE-REPLACE "n*K/n = K") (("1" (EXPAND "lgK") (("1" (PROPAX) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (CASE "K>=1") (("1" (TYPEPRED ("n")) (("1" (MULT-INEQ -1 -2) (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (REPLACE -3) (("2" (GROUND) (("2" (SPLIT-INEQ -5) (("2" (HIDE-ALL-BUT (-3 -4 -5 1 2)) (("2" (EXPAND "K") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL) ("2" (EXPAND "K") (("2" (CASE-REPLACE "n * ((k - mod(k, n)) / n) = k-mod(k,n)") (("1" (BOTH-SIDES "-" "k" 1) (("1" (SIMPLIFY 1) (("1" (LEMMA "mod_pos") (("1" (INST?) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "K") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (DECOMPOSE-EQUALITY 1) NIL NIL) ("3" (FLATTEN) (("3" (GROUND) NIL NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL) ("3" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (DECOMPOSE-EQUALITY 1) (("2" (EXPAND "^") (("2" (NAME-REPLACE "EN" "expt(n, x!1)") (("2" (EXPAND "expt") (("2" (GROUND) (("2" (CASE-REPLACE " base_n(n, k)(1 + x!1) * expt(n, x!1) * (1 / n) * n  =  base_n(n, k)(1 + x!1) * expt(n, x!1)") (("1" (EXPAND "EN") (("1" (GROUND) NIL NIL)) NIL) ("2" (EXPAND "EN") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED ("n")) (("2" (GROUND) (("2" (ASSERT) (("2" (CANCEL-BY -2 "n") NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE (-3 2)) (("2" (EXPAND "upper_index") (("2" (EXPAND "log_nat") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL) ("2" (HIDE (2 -2)) (("2" (EXPAND "^") (("2" (EXPAND "expt") (("2" (EXPAND "base_n") (("2" (LIFT-IF 1) (("2" (SPLIT) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|base_n_is_n-2| "" 3790089030 ("" (SKOLEM 1 ("n" "_")) (("" (INDUCT "k" 1 NAT_INDUCTION) (("" (SKOLEM 1 "k") (("" (CASE "k<n") (("1" (FLATTEN) (("1" (CASE-REPLACE "upper_index(n,k) = 0") (("1" (LEMMA "sigma_eq_arg[nat]") (("1" (INST?) (("1" (REPLACE -1) (("1" (HIDE (-1 -4)) (("1" (EXPAND "base_n") (("1" (EXPAND "^") (("1" (EXPAND "expt") (("1" (LIFT-IF 1) (("1" (SPLIT) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL) ("2" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "upper_index") (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (EXPAND "log_nat") (("2" (LIFT-IF 2) (("2" (SPLIT 2) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLIP-INEQ 1) (("2" (FLATTEN) (("2" (REWRITE "sigma_first_ge") (("2" (CASE-REPLACE "n^0*base_n(n,k)(0) = mod(k,n)") (("1" (BOTH-SIDES "-" "mod(k,n)" 1) (("1" (SIMPLIFY 1) (("1" (REWRITE "sigma_shift_to_zero") (("1" (BOTH-SIDES "*" "1/n" 1) (("1" (LEMMA "sigma_scal_right") (("1" (INST?) (("1" (REPLACE -1 :DIR RL) (("1" (CASE-REPLACE "(LAMBDA (i_1: nat):
                             (n ^ (1 + i_1)) * base_n(n, k)(1 + i_1) * (1 / n)) = LAMBDA (i: nat):
                             n ^ i * base_n(n, k)(1 + i)") (("1" (EXPAND "base_n" 1) (("1" (LEMMA "base_n_TCC4") (("1" (INST -1 "n" "k" "1") (("1" (SPLIT -1) (("1" (CASE-REPLACE "(LAMBDA(i:nat): n^i*IF k < n THEN 0
                                    ELSE base_n(n, (k - mod(k, n)) / n)(i)
                                    ENDIF) = LAMBDA(i:nat): n^i*base_n(n, (k - mod(k, n)) / n)(i)") (("1" (NAME "K" "(k-mod(k,n))/n") (("1" (CASE-REPLACE "upper_index(n,K) = upper_index(n,k)-1") (("1" (HIDE (-5 -6)) (("1" (INST -7 "K") (("1" (SPLIT -7) (("1" (REPLACE -3 :DIR RL) (("1" (GROUND) NIL NIL)) NIL) ("2" (EXPAND "K") (("2" (CROSS-MULT 1) (("2" (BOTH-SIDES "-" "k" 1) (("2" (SIMPLIFY 1) (("2" (CASE "0<k") (("1" (CASE "0<n-1") (("1" (MULT-INEQ -1 -2) (("1" (LEMMA "mod_pos") (("1" (INST?) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "K") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "upper_index") (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (CASE "k=n") (("1" (REPLACE -1) (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "log_nat") (("2" (EXPAND "log_nat") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -1) (("2" (CROSS-MULT -2) (("2" (CASE "k=mod(k,n)") (("1" (LEMMA "mod_pos") (("1" (INST?) (("1" (FLATTEN) (("1" (REPLACE -3 :DIR RL) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (LIFT-IF 2) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (HIDE (-2 -5 -6 -7 -9 4)) (("2" (LEMMA "log_nat_incr") (("2" (INST -1 "n" "K" "k") (("2" (SPLIT -1) (("1" (CASE "log_nat(K,n)`1<=log_nat(k,n)`1-1") (("1" (BOTH-SIDES "+" "1" -1) (("1" (SIMPLIFY -1) (("1" (BOTH-SIDES "+" "1" 2) (("1" (SIMPLIFY 2) (("1" (CASE-REPLACE "1+log_nat(K, n)`1 = log_nat(n*K, n)`1") (("1" (LEMMA "log_nat_incr") (("1" (CASE "log_nat(n*K, n)`1< log_nat(k,n)`1") (("1" (CASE "log_nat(n*K, n)`1+1 <= log_nat(k,n)`1") (("1" (CASE-REPLACE "log_nat(n*K, n)`1+1 = log_nat(n*n*K, n)`1") (("1" (LEMMA "log_nat_bounds") (("1" (INST-CP -1 "n" "n*K") (("1" (CASE "n*K<n^(log_nat(n*K,n)`1+1)") (("1" (INST -2 "n" "k") (("1" (CASE "n^log_nat(k,n)`1<=k") (("1" (REPLACE -5 -2) (("1" (DIV-BY -1 "n") (("1" (CASE-REPLACE "n ^ log_nat(k, n)`1 / n = n^(log_nat(k,n)`1-1)") (("1" (CASE "n^(log_nat(k,n)`1-1)<=floor(k/n)") (("1" (MULT-BY -1 "n") (("1" (CROSS-MULT -2) (("1" (REPLACE -2 -1 :DIR RL) (("1" (CASE-REPLACE "floor(k/n)*n = k-mod(k,n)") (("1" (CASE-REPLACE "k-mod(k,n) = n*K") (("1" (CASE "n^log_nat(k,n)`1<n^log_nat(n*n*K, n)`1") (("1" (LEMMA "both_sides_expt_gt1_lt") (("1" (INST -1 "n" "log_nat(k, n)`1 " " log_nat(n * n * K, n)`1") (("1" (FLATTEN) (("1" (SPLIT -1) (("1" (GROUND) (("1" (HIDE-ALL-BUT (-2 -13)) (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) (("2" (SPLIT-INEQ -3) NIL NIL)) NIL)) NIL) ("2" (EXPAND "K") (("2" (GROUND) NIL NIL)) NIL)) NIL) ("2" (EXPAND "mod") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "FORALL (nn1:nat,xx1:nnreal): nn1<=xx1 IMPLIES nn1<=floor(xx1)") (("1" (INST?) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) (("3" (EXPAND "^") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SKEEP) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CROSS-MULT 1) (("2" (EXPAND "^") (("2" (LIFT-IF 1) (("2" (SPLIT) (("1" (FLATTEN) (("1" (EXPAND "expt" 1 1) (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (NAME-REPLACE "lgnK" "log_nat(n*K, n)`1") (("2" (HIDE (-1 -2 -3 -4 -5 -6 3)) (("2" (EXPAND "log_nat") (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (GROUND) (("1" (CANCEL-BY -1 "n") (("1" (CASE "K>=1") (("1" (TYPEPRED (N)) (("1" (MULT-INEQ -1 -2) (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (EXPAND "K") (("2" (GROUND) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (CASE-REPLACE "K * n * n / n = K*n") (("1" (EXPAND "lgnK") (("1" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (CASE "K>=1") (("1" (TYPEPRED (N)) (("1" (MULT-INEQ -1 -2) (("1" (GROUND) (("1" (MULT-INEQ -1 -2) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-8 -9 1 5)) (("2" (EXPAND "K") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL) ("2" (NAME-REPLACE "lgK" "log_nat(K,n)`1") (("2" (EXPAND "log_nat") (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (CANCEL-BY -1 "n") (("1" (EXPAND "K") (("1" (GROUND) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (CASE-REPLACE "n*K/n = K") (("1" (EXPAND "lgK") (("1" (PROPAX) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (CASE "K>=1") (("1" (TYPEPRED (N)) (("1" (MULT-INEQ -1 -2) (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (REPLACE -3) (("2" (GROUND) (("2" (SPLIT-INEQ -5) (("2" (HIDE-ALL-BUT (-3 -4 -5 1 2)) (("2" (EXPAND "K") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL) ("2" (EXPAND "K") (("2" (CASE-REPLACE "n * ((k - mod(k, n)) / n) = k-mod(k,n)") (("1" (BOTH-SIDES "-" "k" 1) (("1" (SIMPLIFY 1) (("1" (LEMMA "mod_pos") (("1" (INST?) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "K") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (DECOMPOSE-EQUALITY 1) NIL NIL) ("3" (FLATTEN) (("3" (GROUND) NIL NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL) ("3" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (DECOMPOSE-EQUALITY 1) (("2" (EXPAND "^") (("2" (NAME-REPLACE "EN" "expt(n, x!1)") (("2" (EXPAND "expt") (("2" (GROUND) (("2" (CASE-REPLACE " base_n(n, k)(1 + x!1) * expt(n, x!1) * (1 / n) * n  =  base_n(n, k)(1 + x!1) * expt(n, x!1)") (("1" (EXPAND "EN") (("1" (GROUND) NIL NIL)) NIL) ("2" (EXPAND "EN") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED (N)) (("2" (GROUND) (("2" (ASSERT) (("2" (CANCEL-BY -2 "n") NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE (-3 2)) (("2" (EXPAND "upper_index") (("2" (EXPAND "log_nat") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL) ("2" (HIDE (2 -2)) (("2" (EXPAND "^") (("2" (EXPAND "expt") (("2" (EXPAND "base_n") (("2" (LIFT-IF 1) (("2" (SPLIT) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|T_low| TYPE-EQ-DECL NIL |sigma| NIL) (|T_high| TYPE-EQ-DECL NIL |sigma| NIL) (|sigma| DEF-DECL "real" |sigma| NIL) (> CONST-DECL "bool" |reals| NIL) (|upper_index| CONST-DECL "nat" |base_repr| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|base_n| DEF-DECL "nat" |base_repr| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|NAT_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|nat_exp| APPLICATION-JUDGEMENT "nat" |exponentiation| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (|sigma_eq_arg| FORMULA-DECL NIL |sigma| NIL) (|log_nat| DEF-DECL "[n: nat, {y | y < p AND x = p ^ n * y}]" |log_nat| NIL) (|nonzero_integer| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (|mod| CONST-DECL "{k | abs(k) < abs(j)}" |mod| NIL) (|nzrat_div_nzrat_is_nzrat| APPLICATION-JUDGEMENT "nzrat" |rationals| NIL) (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|times_div1| FORMULA-DECL NIL |real_props| NIL) (|cross_mult| FORMULA-DECL NIL |real_props| NIL) (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|base_n_TCC4| SUBTYPE-TCC NIL |base_repr| NIL) (|rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|div_cancel3| FORMULA-DECL NIL |real_props| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|log_nat_incr| FORMULA-DECL NIL |log_nat| NIL) (|odd?| CONST-DECL "bool" |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|both_sides_plus_le1| FORMULA-DECL NIL |real_props| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (|nat_expt| APPLICATION-JUDGEMENT "nat" |exponentiation| NIL) (|n| SKOLEM-CONST-DECL "{x: nat | x > 1}" |base_repr| NIL) (|k| SKOLEM-CONST-DECL "nat" |base_repr| NIL) (|nonneg_floor_is_nat| APPLICATION-JUDGEMENT "nat" |floor_ceil| NIL) (|both_sides_times_pos_le1_imp| FORMULA-DECL NIL |extra_real_props| NIL) (|minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|both_sides_expt_gt1_lt| FORMULA-DECL NIL |exponentiation| NIL) (|nnrat_times_nnrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals| NIL) (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL) (|floor| CONST-DECL "{i | i <= x & x < i + 1}" |floor_ceil| NIL) (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|both_sides_div_pos_le1| FORMULA-DECL NIL |real_props| NIL) (|log_nat_bounds| FORMULA-DECL NIL |log_nat| NIL) (|lgnK| SKOLEM-CONST-DECL "nat" |base_repr| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (DIV_193 SKOLEM-CONST-DECL "{x: nat | x > 1}" |base_repr| NIL) (|both_sides_times_pos_lt1| FORMULA-DECL NIL |real_props| NIL) (|div_mult_pos_ge1| FORMULA-DECL NIL |real_props| NIL) (|zero_times1| FORMULA-DECL NIL |real_props| NIL) (|pos_div_gt| FORMULA-DECL NIL |real_props| NIL) (|gt_times_gt_any1| FORMULA-DECL NIL |extra_real_props| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|odd_times_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (DIV_194 SKOLEM-CONST-DECL "{x: nat | x > 1}" |base_repr| NIL) (|lgK| SKOLEM-CONST-DECL "nat" |base_repr| NIL) (|both_sides_minus_le1| FORMULA-DECL NIL |real_props| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL) (|nnrat_exp| APPLICATION-JUDGEMENT "nnrat" |exponentiation| NIL) (|rat_minus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|div_mult_pos_lt1| FORMULA-DECL NIL |real_props| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|mod_pos| FORMULA-DECL NIL |mod| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|lt_times_lt_any1| FORMULA-DECL NIL |extra_real_props| NIL) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|both_sides_minus_lt1| FORMULA-DECL NIL |real_props| NIL) (K SKOLEM-CONST-DECL "rat" |base_repr| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|sigma_rat| APPLICATION-JUDGEMENT "rational" |sigma_nat| NIL) (EN SKOLEM-CONST-DECL "nat" |base_repr| NIL) (|sigma_scal_right| FORMULA-DECL NIL |sigma| NIL) (|both_sides_times1_imp| FORMULA-DECL NIL |extra_real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|sigma_shift_to_zero| FORMULA-DECL NIL |sigma_nat| NIL) (|int_abs_is_nonneg| APPLICATION-JUDGEMENT "{j: nonneg_int | j >= i}" |real_defs| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|sigma_nat| APPLICATION-JUDGEMENT "nat" |sigma_nat| NIL) (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|sigma_first_ge| FORMULA-DECL NIL |sigma_nat| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL)) SHOSTAK) (|base_n_is_n-1| |nil| 3617365860 ("" (SKOLEM 1 ("n" "_")) (("" (INDUCT "k" 1 NAT_INDUCTION) (("1" (SKOLEM 1 "k") (("1" (CASE "k<n") (("1" (FLATTEN) (("1" (CASE-REPLACE "upper_index(n,k) = 0") (("1" (LEMMA "sigma_eq_arg[nat]") (("1" (INST?) (("1" (REPLACE -1) (("1" (HIDE (-1 -4)) (("1" (EXPAND "base_n") (("1" (EXPAND "^") (("1" (EXPAND "expt") (("1" (LIFT-IF 1) (("1" (SPLIT) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL) ("2" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "upper_index") (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (EXPAND "log_nat") (("2" (LIFT-IF 2) (("2" (SPLIT 2) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLIP-INEQ 1) (("2" (FLATTEN) (("2" (REWRITE "sigma_first_ge") (("2" (CASE-REPLACE "n^0*base_n(n,k)(0) = mod(k,n)") (("1" (BOTH-SIDES "-" "mod(k,n)" 1) (("1" (SIMPLIFY 1) (("1" (REWRITE "sigma_shift_to_zero") (("1" (BOTH-SIDES "*" "1/n" 1) (("1" (LEMMA "sigma_scal_right") (("1" (INST?) (("1" (REPLACE -1 :DIR RL) (("1" (CASE-REPLACE "(LAMBDA (i_1: nat):
                             (n ^ (1 + i_1)) * base_n(n, k)(1 + i_1) * (1 / n)) = LAMBDA (i: nat):
                             n ^ i * base_n(n, k)(1 + i)") (("1" (EXPAND "base_n" 1) (("1" (LEMMA "base_n_TCC4") (("1" (INST -1 "n" "k" "1") (("1" (SPLIT -1) (("1" (CASE-REPLACE "(LAMBDA(i:nat): n^i*IF k < n THEN 0
                                    ELSE base_n(n, (k - mod(k, n)) / n)(i)
                                    ENDIF) = LAMBDA(i:nat): n^i*base_n(n, (k - mod(k, n)) / n)(i)") (("1" (NAME "K" "(k-mod(k,n))/n") (("1" (CASE-REPLACE "upper_index(n,K) = upper_index(n,k)-1") (("1" (HIDE (-5 -6)) (("1" (INST -7 "K") (("1" (SPLIT -7) (("1" (REPLACE -3 :DIR RL) (("1" (GROUND) NIL NIL)) NIL) ("2" (EXPAND "K") (("2" (CROSS-MULT 1) (("2" (BOTH-SIDES "-" "k" 1) (("2" (SIMPLIFY 1) (("2" (CASE "0<k") (("1" (CASE "0<n-1") (("1" (MULT-INEQ -1 -2) (("1" (LEMMA "mod_pos") (("1" (INST?) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "K") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "upper_index") (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (CASE "k=n") (("1" (REPLACE -1) (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "log_nat") (("2" (EXPAND "log_nat") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -1) (("2" (CROSS-MULT -2) (("2" (CASE "k=mod(k,n)") (("1" (LEMMA "mod_pos") (("1" (INST?) (("1" (FLATTEN) (("1" (REPLACE -3 :DIR RL) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (LIFT-IF 2) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (HIDE (-2 -5 -6 -7 -9 4)) (("2" (LEMMA "log_nat_incr") (("2" (INST -1 "n" "K" "k") (("2" (SPLIT -1) (("1" (CASE "log_nat(K,n)`1<=log_nat(k,n)`1-1") (("1" (BOTH-SIDES "+" "1" -1) (("1" (SIMPLIFY -1) (("1" (BOTH-SIDES "+" "1" 2) (("1" (SIMPLIFY 2) (("1" (CASE-REPLACE "1+log_nat(K, n)`1 = log_nat(n*K, n)`1") (("1" (LEMMA "log_nat_incr") (("1" (CASE "log_nat(n*K, n)`1< log_nat(k,n)`1") (("1" (CASE "log_nat(n*K, n)`1+1 <= log_nat(k,n)`1") (("1" (CASE-REPLACE "log_nat(n*K, n)`1+1 = log_nat(n*n*K, n)`1") (("1" (LEMMA "log_nat_bounds") (("1" (INST-CP -1 "n" "n*K") (("1" (CASE "n*K<n^(log_nat(n*K,n)`1+1)") (("1" (INST -2 "n" "k") (("1" (CASE "n^log_nat(k,n)`1<=k") (("1" (REPLACE -5 -2) (("1" (DIV-BY -1 "n") (("1" (CASE-REPLACE "n ^ log_nat(k, n)`1 / n = n^(log_nat(k,n)`1-1)") (("1" (CASE "n^(log_nat(k,n)`1-1)<=floor(k/n)") (("1" (MULT-BY -1 "n") (("1" (CROSS-MULT -2) (("1" (REPLACE -2 -1 :DIR RL) (("1" (CASE-REPLACE "floor(k/n)*n = k-mod(k,n)") (("1" (CASE-REPLACE "k-mod(k,n) = n*K") (("1" (CASE "n^log_nat(k,n)`1<n^log_nat(n*n*K, n)`1") (("1" (LEMMA "both_sides_expt_gt1_lt") (("1" (INST -1 "n" "log_nat(k, n)`1 " " log_nat(n * n * K, n)`1") (("1" (FLATTEN) (("1" (SPLIT -1) (("1" (GROUND) (("1" (HIDE-ALL-BUT (-2 -13)) (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) (("2" (SPLIT-INEQ -3) NIL NIL)) NIL)) NIL) ("2" (EXPAND "K") (("2" (GROUND) NIL NIL)) NIL)) NIL) ("2" (EXPAND "mod") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "FORALL (nn1:nat,xx1:nnreal): nn1<=xx1 IMPLIES nn1<=floor(xx1)") (("1" (INST?) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) (("3" (EXPAND "^") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SKEEP) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CROSS-MULT 1) (("2" (EXPAND "^") (("2" (LIFT-IF 1) (("2" (SPLIT) (("1" (FLATTEN) (("1" (EXPAND "expt" 1 1) (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (NAME-REPLACE "lgnK" "log_nat(n*K, n)`1") (("2" (HIDE (-1 -2 -3 -4 -5 -6 3)) (("2" (EXPAND "log_nat") (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (GROUND) (("1" (CANCEL-BY -1 "n") (("1" (CASE "K>=1") (("1" (TYPEPRED (N)) (("1" (MULT-INEQ -1 -2) (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (EXPAND "K") (("2" (GROUND) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (CASE-REPLACE "K * n * n / n = K*n") (("1" (EXPAND "lgnK") (("1" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (CASE "K>=1") (("1" (TYPEPRED (N)) (("1" (MULT-INEQ -1 -2) (("1" (GROUND) (("1" (MULT-INEQ -1 -2) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-8 -9 1 5)) (("2" (EXPAND "K") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL) ("2" (NAME-REPLACE "lgK" "log_nat(K,n)`1") (("2" (EXPAND "log_nat") (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (CANCEL-BY -1 "n") (("1" (EXPAND "K") (("1" (GROUND) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (CASE-REPLACE "n*K/n = K") (("1" (EXPAND "lgK") (("1" (PROPAX) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (CASE "K>=1") (("1" (TYPEPRED (N)) (("1" (MULT-INEQ -1 -2) (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (REPLACE -3) (("2" (GROUND) (("2" (SPLIT-INEQ -5) (("2" (HIDE-ALL-BUT (-3 -4 -5 1 2)) (("2" (EXPAND "K") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL) ("2" (EXPAND "K") (("2" (CASE-REPLACE "n * ((k - mod(k, n)) / n) = k-mod(k,n)") (("1" (BOTH-SIDES "-" "k" 1) (("1" (SIMPLIFY 1) (("1" (LEMMA "mod_pos") (("1" (INST?) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "K") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (DECOMPOSE-EQUALITY 1) NIL NIL) ("3" (FLATTEN) (("3" (GROUND) NIL NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL) ("3" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (DECOMPOSE-EQUALITY 1) (("2" (EXPAND "^") (("2" (NAME-REPLACE "EN" "expt(n, x!1)") (("2" (EXPAND "expt") (("2" (GROUND) (("2" (CASE-REPLACE " base_n(n, k)(1 + x!1) * expt(n, x!1) * (1 / n) * n  =  base_n(n, k)(1 + x!1) * expt(n, x!1)") (("1" (EXPAND "EN") (("1" (GROUND) NIL NIL)) NIL) ("2" (EXPAND "EN") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED (N)) (("2" (GROUND) (("2" (ASSERT) (("2" (CANCEL-BY -2 "n") NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE (-3 2)) (("2" (EXPAND "upper_index") (("2" (EXPAND "log_nat") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL) ("2" (HIDE (2 -2)) (("2" (EXPAND "^") (("2" (EXPAND "expt") (("2" (EXPAND "base_n") (("2" (LIFT-IF 1) (("2" (SPLIT) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP 1) (("2" (EXPAND "upper_index") (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (TYPEPRED ("log_nat(k, n)`1")) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|base_n_is_n_alt_TCC1| 0 (|base_n_is_n_alt_TCC1-1| |nil| 3621094617 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|base_n_is_n_alt| SUBTYPE "((number_fields.+)(base_repr.m, 1))" "{i: integers.int | booleans.OR(base_repr.n /= 0, reals.>=(i, 0))}"))) (|base_n_is_n_alt| 0 (|base_n_is_n_alt-1| |nil| 3620393240 ("" (SKEEP) (("" (EXPAND "base_n_to_nat") (("" (LEMMA "base_n_is_n") (("" (INST?) (("" (LEMMA "upper_is_bound") (("" (LEMMA "log_nat_bounds") (("" (CASE "upper_index(n,k)<=m") (("1" (CASE-REPLACE "upper_index(n,k) = m") (("1" (LEMMA "sigma_split") (("1" (INST -1 "LAMBDA (s: nat): n ^ s * base_n(n, k)(s)" "m" "0" "upper_index(n,k)") (("1" (SPLIT -1) (("1" (GROUND) (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (REPLACE -4 :DIR RL) (("1" (SIMPLIFY 2) (("1" (LEMMA "sigma_const_restrict_eq_0") (("1" (INST -1 "LAMBDA (s: nat): n ^ s * base_n(n, k)(s)" "m" "1+upper_index(n,k)" "1") (("1" (SPLIT -1) (("1" (GROUND) NIL NIL) ("2" (SKEEP) (("2" (INST -3 "n" "k" "i") (("2" (SPLIT -3) (("1" (GROUND) NIL NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL) ("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "upper_index") (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (HIDE (-3 3)) (("2" (INST -1 "n" "k") (("2" (FLIP-INEQ -3) (("2" (FLIP-INEQ 3) (("2" (CASE "log_nat(k,n)`1>=m+1") (("1" (LEMMA "both_sides_expt_gt1_le") (("1" (INST -1 "n" "m+1" "log_nat(k,n)`1") (("1" (FLATTEN) (("1" (HIDE -1) (("1" (SPLIT -1) (("1" (GROUND) NIL NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|base_n_to_nat| CONST-DECL "nat" |base_repr| NIL) (|nat_exp| APPLICATION-JUDGEMENT "nat" |exponentiation| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (> CONST-DECL "bool" |reals| NIL) (|log_nat_bounds| FORMULA-DECL NIL |log_nat| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|both_sides_expt_gt1_le| FORMULA-DECL NIL |exponentiation| NIL) (|log_nat| DEF-DECL "[n: nat, {y | y < p AND x = p ^ n * y}]" |log_nat| NIL) (< CONST-DECL "bool" |reals| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|base_n| DEF-DECL "nat" |base_repr| NIL) (|T_high| TYPE-EQ-DECL NIL |sigma| NIL) (|T_low| TYPE-EQ-DECL NIL |sigma| NIL) (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|sigma_nat| APPLICATION-JUDGEMENT "nat" |sigma_nat| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nnrat_exp| APPLICATION-JUDGEMENT "nnrat" |exponentiation| NIL) (|nnrat_times_nnrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|subrange| TYPE-EQ-DECL NIL |integers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|sigma_const_restrict_eq_0| FORMULA-DECL NIL |sigma| NIL) (|sigma_split| FORMULA-DECL NIL |sigma| NIL) (<= CONST-DECL "bool" |reals| NIL) (|upper_index| CONST-DECL "nat" |base_repr| NIL) (|upper_is_bound| FORMULA-DECL NIL |base_repr| NIL) (|base_n_is_n| FORMULA-DECL NIL |base_repr| NIL)) SHOSTAK)) (|base_n_to_nat_lt| 0 (|base_n_to_nat_lt-1| |nil| 3620468885 ("" (SKEEP) (("" (EXPAND "base_n_to_nat") (("" (LEMMA "sigma_le") (("" (NAME "kz" "n-1") (("" (INST - "LAMBDA (s: nat): n ^ s * F(s)" "LAMBDA (s:nat): (n-1)*n^s" "m" "0") (("" (REPLACE -1) (("" (ASSERT) (("" (SPLIT) (("1" (REWRITE "sigma_scal") (("1" (LEMMA "sigma_geometric") (("1" (INST - "m" "0" "n") (("1" (ASSERT) (("1" (REWRITE "expt_x0") (("1" (REPLACES -1) (("1" (ASSERT) (("1" (INVOKE (CASE "%1 = n^(1+m)-1") (! -1 2)) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) (("2" (CROSS-MULT 1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (INST - "n!1") (("2" (CASE "NOT F(n!1)<=kz") (("1" (ASSERT) NIL NIL) ("2" (MULT-BY -1 "n^n!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|base_n_to_nat| CONST-DECL "nat" |base_repr| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (> CONST-DECL "bool" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nat_exp| APPLICATION-JUDGEMENT "nat" |exponentiation| NIL) (|sigma_nat| APPLICATION-JUDGEMENT "nat" |sigma_nat| NIL) (|sigma_int| APPLICATION-JUDGEMENT "int" |sigma_nat| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|sigma_geometric| FORMULA-DECL NIL |sigma_nat| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|times_div1| FORMULA-DECL NIL |real_props| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|div_cancel3| FORMULA-DECL NIL |real_props| NIL) (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|expt_x0| FORMULA-DECL NIL |exponentiation| NIL) (|sigma_scal| FORMULA-DECL NIL |sigma| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|subrange| TYPE-EQ-DECL NIL |integers| NIL) (|both_sides_times_pos_le1_imp| FORMULA-DECL NIL |extra_real_props| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (<= CONST-DECL "bool" |reals| NIL) (|T_high| TYPE-EQ-DECL NIL |sigma| NIL) (|T_low| TYPE-EQ-DECL NIL |sigma| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|sigma_le| FORMULA-DECL NIL |sigma| NIL)) SHOSTAK)) (|base_n_0| 0 (|base_n_0-1| |nil| 3621093915 ("" (SKEEP) (("" (LEMMA "upper_is_bound") (("" (INST?) (("" (ASSERT) (("" (LEMMA "base_n_is_n") (("" (INST?) (("" (LEMMA "sigma_split") (("" (INST?) (("" (INST - "m") (("" (ASSERT) (("" (REPLACES -1) (("" (EXPAND "sigma" - 1) (("" (CASE "base_n(n,k)(m)>=1") (("1" (MULT-BY -1 "n^(m)") (("1" (LEMMA "sigma_ge_0") (("1" (INST-CP - _ "upper_index(n,k)" "1+m") (("1" (INST-CP - _ "m-1" "0") (("1" (HIDE -1) (("1" (INST?) (("1" (INST?) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|upper_is_bound| FORMULA-DECL NIL |base_repr| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nat_exp| APPLICATION-JUDGEMENT "nat" |exponentiation| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|base_n| DEF-DECL "nat" |base_repr| NIL) (<= CONST-DECL "bool" |reals| NIL) (|T_high| TYPE-EQ-DECL NIL |sigma| NIL) (|upper_index| CONST-DECL "nat" |base_repr| NIL) (|T_low| TYPE-EQ-DECL NIL |sigma| NIL) (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|sigma_nat| APPLICATION-JUDGEMENT "nat" |sigma_nat| NIL) (|sigma| DEF-DECL "real" |sigma| NIL) (|both_sides_times_pos_ge1_imp| FORMULA-DECL NIL |extra_real_props| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|sigma_ge_0| FORMULA-DECL NIL |sigma| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|sigma_split| FORMULA-DECL NIL |sigma| NIL) (|base_n_is_n| FORMULA-DECL NIL |base_repr| NIL) (> CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) SHOSTAK)) (|base_n_unique| 0 (|base_n_unique-1| |nil| 3620035552 ("" (SKEEP) (("" (SKOLETIN 1) (("" (SKEEP) (("" (CASE "NOT upper_index(n,k)<=d") (("1" (EXPAND "upper_index") (("1" (ASSERT) (("1" (LIFT-IF) (("1" (GROUND) (("1" (LEMMA "log_nat_bounds") (("1" (INST?) (("1" (ASSERT) (("1" (FLATTEN) (("1" (CASE "k < n^(d+1)") (("1" (LEMMA "both_sides_expt_gt1_lt_aux") (("1" (INST - "n" "log_nat(k,n)`1-1" "d") (("1" (ASSERT) (("1" (EXPAND "^") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "sigma_le") (("2" (INST - "LAMBDA (s: nat): n ^ s * numseq(s)" "LAMBDA (s: nat): n ^ s * (n-1)" "d" "0") (("2" (SPLIT -) (("1" (INVOKE (CASE "%1 < n^(d+1)") (! -1 2)) (("1" (ASSERT) NIL NIL) ("2" (HIDE -1) (("2" (LEMMA "sigma_scal") (("2" (INST - "LAMBDA (s:nat): n^s" "n-1" "d" "0") (("2" (REPLACE -1) (("2" (LEMMA "sigma_geometric") (("2" (INST?) (("2" (SPLIT -1) (("1" (REPLACE -1) (("1" (REWRITE "expt_x0") (("1" (HIDE-ALL-BUT 1) (("1" (GRIND-REALS) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SKOSIMP*) (("2" (CASE "numseq(n!1)<=n-1") (("1" (MULT-BY -1 "n^n!1") (("1" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "base_n_is_n") (("2" (INST?) (("2" (CASE "NOT k =
       sigma(0, d, LAMBDA (s: nat): n ^ s * base_n(n, k)(s))") (("1" (LEMMA "sigma_split") (("1" (INST?) (("1" (INST - "upper_index(n,k)") (("1" (ASSERT) (("1" (REPLACES -1) (("1" (INVOKE (CASE "%1 = 0") (! 1 2 2)) (("1" (ASSERT) NIL NIL) ("2" (HIDE 2) (("2" (REWRITE "sigma_restrict_eq_0") (("2" (SKOSIMP*) (("2" (LEMMA "upper_is_bound") (("2" (INST - "n" "k" "i!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -2) (("2" (NAME "F" "LAMBDA (z:nat): numseq(z)-base_n(n,k)(z)") (("2" (CASE "F = (LAMBDA (i:nat): 0)") (("1" (DECOMPOSE-EQUALITY -1) (("1" (INST - "j") (("1" (EXPAND "F" -1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (CASE "NOT sigma(0,d,LAMBDA (s:nat): n^s*F(s))=0") (("1" (EXPAND "F" 1) (("1" (REWRITE "sigma_minus" :DIR RL) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (CASE "NOT FORALL (s:nat): abs(F(s))<n") (("1" (SKEEP) (("1" (EXPAND "F" 1) (("1" (CASE "abs(numseq(s))<n AND abs(base_n(n,k)(s))<n") (("1" (FLATTEN) (("1" (HIDE-ALL-BUT (-1 -2 1)) (("1" (GRIND :EXCLUDE "base_n") NIL NIL)) NIL)) NIL) ("2" (EXPAND "abs" 1) (("2" (ASSERT) (("2" (LEMMA "base_n_lt_n") (("2" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "EXISTS (dd:nat): dd<=d  AND F(dd)/=0 AND (FORALL (s:nat): s>dd AND s<=d IMPLIES F(s)=0)") (("1" (SKEEP -1) (("1" (CASE "sigma(0, d, LAMBDA (s: nat): n ^ s * F(s)) = sigma(0, dd, LAMBDA (s: nat): n ^ s * F(s))") (("1" (ASSERT) (("1" (REPLACE -1) (("1" (EXPAND "sigma" -5) (("1" (CASE "abs(n^dd*F(dd)) >= n^dd AND abs(sigma(0, dd - 1, LAMBDA (s: nat): n ^ s * F(s)))<n^dd") (("1" (FLATTEN) (("1" (EXPAND "abs") (("1" (LIFT-IF) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (SPLIT 1) (("1" (REWRITE "abs_mult") (("1" (EXPAND "abs" + 1) (("1" (CASE "NOT abs(F(dd))>=1") (("1" (EXPAND "abs" 1) (("1" (LIFT-IF) (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (MULT-BY -1 "n^dd") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "sigma_triangle") (("2" (INST?) (("2" (INVOKE (CASE "%1<n^dd") (! -1 2)) (("1" (ASSERT) NIL NIL) ("2" (LEMMA "sigma_le") (("2" (INST - "LAMBDA (n_1: nat): abs(n ^ n_1 * F(n_1))" "LAMBDA (n_1: nat): n ^ n_1 * (n-1)" "dd-1" "0") (("2" (SPLIT -1) (("1" (INVOKE (CASE "%1<n^dd") (! -1 2)) (("1" (ASSERT) NIL NIL) ("2" (CASE "NOT dd-1>=0") (("1" (ASSERT) (("1" (EXPAND "abs" +) (("1" (ASSERT) (("1" (EXPAND "^" +) (("1" (LEMMA "posnat_expt") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "sigma_scal") (("2" (INST - "LAMBDA (s:nat): n^s" "n-1" "dd-1" "0") (("2" (REPLACES -1) (("2" (LEMMA "sigma_geometric") (("2" (INST?) (("2" (SPLIT -1) (("1" (REPLACES -1) (("1" (REWRITE "expt_x0") (("1" (GRIND-REALS) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (REWRITE "abs_mult") (("2" (EXPAND "abs" + 1) (("2" (INST -5 "n!1") (("2" (CASE "abs(F(n!1))<=n-1") (("1" (MULT-BY -1 "n^n!1") (("1" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "abs") (("2" (LIFT-IF) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "sigma_split") (("2" (INST?) (("2" (INST - "dd") (("2" (ASSERT) (("2" (REPLACES -1) (("2" (ASSERT) (("2" (REWRITE "sigma_restrict_eq_0" 1) (("2" (SKOSIMP*) (("2" (INST - "i!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "FORALL (kz:nat): (EXISTS (j:nat): j<=kz AND F(j)/=0) IMPLIES EXISTS (dd: nat): dd <= kz AND
         F(dd) /= 0 AND
          (FORALL (s: nat): s > dd AND s <= kz IMPLIES F(s) = 0)") (("1" (INST - "d") (("1" (REPLACE 1) (("1" (INST + "j") (("1" (ASSERT) (("1" (EXPAND "F" 1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (INDUCT "kz") (("1" (GRIND) NIL NIL) ("2" (SKOLEM 1 "kz") (("2" (FLATTEN) (("2" (ASSERT) (("2" (CASE "(EXISTS (j: nat): j <= kz AND F(j) /= 0)") (("1" (ASSERT) (("1" (REPLACE -1) (("1" (CASE "F(1+kz)=0") (("1" (SKEEP -3) (("1" (INST + "dd") (("1" (ASSERT) (("1" (SKEEP) (("1" (INST -4 "s") (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST + "1+kz") (("2" (ASSERT) (("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP -2) (("2" (INST + "j!1") (("2" (ASSERT) (("2" (INST + "1+kz") (("2" (ASSERT) (("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (> CONST-DECL "bool" |reals| NIL) (|sigma_nat| APPLICATION-JUDGEMENT "nat" |sigma_nat| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|nat_exp| APPLICATION-JUDGEMENT "nat" |exponentiation| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (<= CONST-DECL "bool" |reals| NIL) (|T_low| TYPE-EQ-DECL NIL |sigma| NIL) (|T_high| TYPE-EQ-DECL NIL |sigma| NIL) (|sigma| DEF-DECL "real" |sigma| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|base_n| DEF-DECL "nat" |base_repr| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|upper_index| CONST-DECL "nat" |base_repr| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|nnrat_exp| APPLICATION-JUDGEMENT "nnrat" |exponentiation| NIL) (|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|sigma_le| FORMULA-DECL NIL |sigma| NIL) (|sigma_geometric| FORMULA-DECL NIL |sigma_nat| NIL) (|expt_x0| FORMULA-DECL NIL |exponentiation| NIL) (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|rat_minus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|div_mult_neg_lt1| FORMULA-DECL NIL |real_props| NIL) (|div_distributes_minus| FORMULA-DECL NIL |real_props| NIL) (|times_div2| FORMULA-DECL NIL |real_props| NIL) (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|sigma_scal| FORMULA-DECL NIL |sigma| NIL) (|sigma_int| APPLICATION-JUDGEMENT "int" |sigma_nat| NIL) (|both_sides_times_pos_le1_imp| FORMULA-DECL NIL |extra_real_props| NIL) (|subrange| TYPE-EQ-DECL NIL |integers| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|both_sides_expt_gt1_lt_aux| FORMULA-DECL NIL |exponentiation| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nat_expt| APPLICATION-JUDGEMENT "nat" |exponentiation| NIL) (|log_nat| DEF-DECL "[n: nat, {y | y < p AND x = p ^ n * y}]" |log_nat| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|log_nat_bounds| FORMULA-DECL NIL |log_nat| NIL) (F SKOLEM-CONST-DECL "[nat -> int]" |base_repr| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|base_n_lt_n| FORMULA-DECL NIL |base_repr| NIL) (|int_abs_is_nonneg| APPLICATION-JUDGEMENT "{j: nonneg_int | j >= i}" |real_defs| NIL) (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|both_sides_times_pos_ge1_imp| FORMULA-DECL NIL |extra_real_props| NIL) (|abs_mult| FORMULA-DECL NIL |real_props| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|posnat_expt| JUDGEMENT-TCC NIL |exponentiation| NIL) (|sigma_0_neg| FORMULA-DECL NIL |sigma_nat| NIL) (|minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|dd| SKOLEM-CONST-DECL "nat" |base_repr| NIL) (|rat_abs_is_nonneg| APPLICATION-JUDGEMENT "{r: nonneg_rat | r >= q}" |real_defs| NIL) (|sigma_triangle| FORMULA-DECL NIL |sigma| NIL) (|sigma_minus| FORMULA-DECL NIL |sigma| NIL) (|sigma_split| FORMULA-DECL NIL |sigma| NIL) (|nnrat_times_nnrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals| NIL) (|upper_is_bound| FORMULA-DECL NIL |base_repr| NIL) (|sigma_restrict_eq_0| FORMULA-DECL NIL |sigma| NIL) (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|base_n_is_n| FORMULA-DECL NIL |base_repr| NIL)) SHOSTAK)) (|base_n_base_n_to_nat| 0 (|base_n_base_n_to_nat-1| |nil| 3620554653 ("" (SKEEP) (("" (SKEEP) (("" (TYPEPRED "i") (("" (LEMMA "base_n_unique") (("" (NAME "numseq" "LAMBDA (i:nat): IF i<=m THEN F(i) ELSE 0 ENDIF") (("" (INST - "m" "n" "numseq") (("1" (ASSERT) (("1" (INST - "i") (("1" (ASSERT) (("1" (EXPAND "numseq" -2) (("1" (EXPAND "base_n_to_nat" +) (("1" (CASE "sigma(0, m, LAMBDA (s: nat): n ^ s * F(s)) = sigma(0, m,
                    LAMBDA (s: nat):
                      n ^ s * IF s <= m THEN F(s) ELSE 0 ENDIF)") (("1" (ASSERT) NIL NIL) ("2" (REWRITE "sigma_eq") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (EXPAND "numseq") (("2" (LIFT-IF) (("2" (GROUND) (("2" (INST - "x1!1") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|base_n_unique| FORMULA-DECL NIL |base_repr| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|numseq| SKOLEM-CONST-DECL "[nat -> nat]" |base_repr| NIL) (> CONST-DECL "bool" |reals| NIL) (|n| SKOLEM-CONST-DECL "{x: nat | x > 1}" |base_repr| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|sigma| DEF-DECL "real" |sigma| NIL) (|T_high| TYPE-EQ-DECL NIL |sigma| NIL) (|T_low| TYPE-EQ-DECL NIL |sigma| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|sigma_eq| FORMULA-DECL NIL |sigma| NIL) (|base_n_to_nat| CONST-DECL "nat" |base_repr| NIL) (|sigma_nat| APPLICATION-JUDGEMENT "nat" |sigma_nat| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nat_exp| APPLICATION-JUDGEMENT "nat" |exponentiation| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)) SHOSTAK)) (|base_n_to_nat_eq| 0 (|base_n_to_nat_eq-1| |nil| 3620747774 ("" (SKEEP) (("" (EXPAND "base_n_to_nat") (("" (REWRITE "sigma_eq") (("" (SKOSIMP*) (("" (INST - "n!1") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|base_n_to_nat| CONST-DECL "nat" |base_repr| NIL) (|subrange| TYPE-EQ-DECL NIL |integers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|T_low| TYPE-EQ-DECL NIL |sigma| NIL) (|T_high| TYPE-EQ-DECL NIL |sigma| NIL) (<= CONST-DECL "bool" |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|sigma_eq| FORMULA-DECL NIL |sigma| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|nat_exp| APPLICATION-JUDGEMENT "nat" |exponentiation| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|sigma_nat| APPLICATION-JUDGEMENT "nat" |sigma_nat| NIL)) SHOSTAK)) (|base_n_to_nat_unique| 0 (|base_n_to_nat_unique-1| |nil| 3620749981 ("" (SKEEP) (("" (EXPAND "base_n_to_nat" - 2) (("" (LEMMA "base_n_unique") (("" (EXPAND "base_n_to_nat") (("" (INST - "m" "n" "LAMBDA (i:nat): IF i<=m THEN G(i) ELSE 0 ENDIF") (("1" (LEMMA "base_n_unique") (("1" (INST - "m" "n" "LAMBDA (i:nat): IF i<=m THEN F(i) ELSE 0 ENDIF") (("1" (ASSERT) (("1" (SKEEP) (("1" (INST - "i") (("1" (INST - "i") (("1" (ASSERT) (("1" (CASE "sigma(0, m,
                    LAMBDA (s: nat):
                      n ^ s * IF s <= m THEN F(s) ELSE 0 ENDIF) = sigma(0, m, LAMBDA (s: nat): n ^ s * F(s))") (("1" (CASE "sigma(0, m,
                    LAMBDA (s: nat):
                      n ^ s * IF s <= m THEN G(s) ELSE 0 ENDIF) = sigma(0, m, LAMBDA (s: nat): n ^ s * G(s))") (("1" (ASSERT) NIL NIL) ("2" (REWRITE "sigma_eq") NIL NIL)) NIL) ("2" (REWRITE "sigma_eq") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (INST - "i") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (INST - "i") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|base_n_to_nat| CONST-DECL "nat" |base_repr| NIL) (|i| SKOLEM-CONST-DECL "nat" |base_repr| NIL) (|i| SKOLEM-CONST-DECL "nat" |base_repr| NIL) (|nat_exp| APPLICATION-JUDGEMENT "nat" |exponentiation| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|sigma_nat| APPLICATION-JUDGEMENT "nat" |sigma_nat| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|sigma_eq| FORMULA-DECL NIL |sigma| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|T_low| TYPE-EQ-DECL NIL |sigma| NIL) (|T_high| TYPE-EQ-DECL NIL |sigma| NIL) (|sigma| DEF-DECL "real" |sigma| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (F SKOLEM-CONST-DECL "[nat -> nat]" |base_repr| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|m| SKOLEM-CONST-DECL "nat" |base_repr| NIL) (< CONST-DECL "bool" |reals| NIL) (G SKOLEM-CONST-DECL "[nat -> nat]" |base_repr| NIL) (> CONST-DECL "bool" |reals| NIL) (|n| SKOLEM-CONST-DECL "{x: nat | x > 1}" |base_repr| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|base_n_unique| FORMULA-DECL NIL |base_repr| NIL)) SHOSTAK)) (|base_list_TCC1| 0 (|base_list_TCC1-2| "" 3882373542 ("" (SKOLEM 1 ("n" "_")) (("" (INDUCT "k" 1 "NAT_induction") (("" (SKEEP) (("" (SKEEP) (("" (EXPAND "base_n" 1) (("" (LIFT-IF 1) (("" (SPLIT 1) (("1" (FLATTEN) (("1" (SPLIT 1) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (LEMMA "mod_pos") (("1" (INST?) (("1" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (INST -1 "(j-mod(j, n))/n") (("1" (SPLIT -1) (("1" (INST -1 "x1-1") (("1" (GROUND) NIL NIL)) NIL) ("2" (GROUND) (("2" (CROSS-MULT) (("2" (BOTH-SIDES "-" "j" 1) (("2" (SIMPLIFY 1) (("2" (CASE-REPLACE "j*n-j = (n-1)*j") (("1" (TYPEPRED ("j")) (("1" (TYPEPRED ("n")) (("1" (CASE "j>0") (("1" (CASE "n-1>0") (("1" (MULT-INEQ -1 -2) (("1" (LEMMA "mod_pos") (("1" (INST?) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL) ("2" (CASE-REPLACE "j=0") (("1" (GROUND) NIL NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SPLIT) (("1" (GROUND) (("1" (EXPAND "mod") (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (CROSS-MULT) (("2" (GRIND) (("2" (GRIND) (("2" (CANCEL-BY 1 "n") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK (|base_list| SUBTYPE "base_repr.base_n(base_repr.n, base_repr.k)" "[nat -> below(base_repr.n)]")) (|base_list_TCC1-1| |nil| 3617546684 ("" (SKOLEM 1 ("n" "_")) (("" (INDUCT "k" 1 NAT_INDUCTION) (("" (SKEEP) (("" (SKEEP) (("" (EXPAND "base_n" 1) (("" (LIFT-IF 1) (("" (SPLIT 1) (("1" (FLATTEN) (("1" (SPLIT 1) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (LEMMA "mod_pos") (("1" (INST?) (("1" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (INST -1 "(j-mod(j, n))/n") (("1" (SPLIT -1) (("1" (INST -1 "x1-1") (("1" (GROUND) NIL NIL)) NIL) ("2" (GROUND) (("2" (CROSS-MULT) (("2" (BOTH-SIDES "-" "j" 1) (("2" (SIMPLIFY 1) (("2" (CASE-REPLACE "j*n-j = (n-1)*j") (("1" (TYPEPRED (J)) (("1" (TYPEPRED (N)) (("1" (CASE "j>0") (("1" (CASE "n-1>0") (("1" (MULT-INEQ -1 -2) (("1" (LEMMA "mod_pos") (("1" (INST?) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL) ("2" (CASE-REPLACE "j=0") (("1" (GROUND) NIL NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SPLIT) (("1" (GROUND) (("1" (EXPAND "mod") (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (CROSS-MULT) (("2" (GRIND) (("2" (GRIND) (("2" (CANCEL-BY 1 "n") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (< CONST-DECL "bool" |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|base_n| DEF-DECL "nat" |base_repr| NIL) (|NAT_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|floor| CONST-DECL "{i | i <= x & x < i + 1}" |floor_ceil| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (<= CONST-DECL "bool" |reals| NIL) (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|div_mult_pos_ge1| FORMULA-DECL NIL |real_props| NIL) (|x1| SKOLEM-CONST-DECL "nat" |base_repr| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|div_mult_pos_lt1| FORMULA-DECL NIL |real_props| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|gt_times_gt_any1| FORMULA-DECL NIL |extra_real_props| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|both_sides_minus_lt1| FORMULA-DECL NIL |real_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|n| SKOLEM-CONST-DECL "{x: nat | x > 1}" |base_repr| NIL) (|mod| CONST-DECL "{k | abs(k) < abs(j)}" |mod| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|nonzero_integer| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|j| SKOLEM-CONST-DECL "nat" |base_repr| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|mod_pos| FORMULA-DECL NIL |mod| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) NIL (|base_list| SUBTYPE "base_repr.base_n(base_repr.n, base_repr.k)" "[nat -> below(base_repr.n)]"))) (|base_list_TCC2| 0 (|base_list_TCC2-1| |nil| 3618061812 ("" (SKEEP) (("" (INST 1 "0") NIL NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (> CONST-DECL "bool" |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) NIL (|base_list| EXISTENCE "" "below(base_repr.n)"))) (|base_list_cdr_TCC1| 0 (|base_list_cdr_TCC1-1| |nil| 3618133482 ("" (SKEEP) (("" (GROUND) (("" (GROUND) (("" (EXPAND "base_list") (("" (GROUND) (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|base_list| CONST-DECL "listn[below(n)](digits)" |base_repr| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|array2list| CONST-DECL "{l: listn(n) | FORALL (i: below(n)): a(i) = nth(l, i)}" |array2list| |structures|) (|array2list_it| DEF-DECL "{l: listn(n - i) | FORALL (j: subrange(i, n - 1)): a(j) = nth(l, j - i)}" |array2list| |structures|)) NIL (|base_list_cdr| SUBTYPE "base_repr.base_list(base_repr.n, base_repr.k, (number_fields.+)(base_repr.j, 1))" "(list_adt[below(base_repr.n)].cons?)"))) (|base_list_cdr_TCC2| 0 (|base_list_cdr_TCC2-1| |nil| 3618133482 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|base_list_cdr| SUBTYPE "base_repr.n" "nonzero_integer"))) (|base_list_cdr_TCC3| 0 (|base_list_cdr_TCC3-2| "" 3882373581 ("" (SKEEP) (("" (SPLIT) (("1" (EXPAND "mod") (("1" (GRIND) NIL NIL)) NIL) ("2" (CROSS-MULT) (("2" (EXPAND "mod") (("2" (CANCEL-BY 1 "n") (("2" (GROUND) (("2" (GRIND) (("2" (TYPEPRED ("k")) (("2" (DIV-BY -1 "n") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK (|base_list_cdr| SUBTYPE "number_fields./(((number_fields.-)(base_repr.k, mod.mod(base_repr.k, base_repr.n))), base_repr.n)" "nat")) (|base_list_cdr_TCC3-1| |nil| 3618133482 ("" (SKEEP) (("" (SPLIT) (("1" (EXPAND "mod") (("1" (GRIND) NIL NIL)) NIL) ("2" (CROSS-MULT) (("2" (EXPAND "mod") (("2" (CANCEL-BY 1 "n") (("2" (GROUND) (("2" (GRIND) (("2" (TYPEPRED (K)) (("2" (DIV-BY -1 "n") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|mod| CONST-DECL "{k | abs(k) < abs(j)}" |mod| NIL) (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|both_sides_div_pos_ge1| FORMULA-DECL NIL |real_props| NIL) (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|pos_div_gt| FORMULA-DECL NIL |real_props| NIL) (|zero_times1| FORMULA-DECL NIL |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nzrat_div_nzrat_is_nzrat| APPLICATION-JUDGEMENT "nzrat" |rationals| NIL) (|both_sides_times_pos_ge1| FORMULA-DECL NIL |real_props| NIL) (|floor| CONST-DECL "{i | i <= x & x < i + 1}" |floor_ceil| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (<= CONST-DECL "bool" |reals| NIL) (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (DIV_197 SKOLEM-CONST-DECL "{x: nat | x > 1}" |base_repr| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nonzero_integer| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (< CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|div_mult_pos_ge1| FORMULA-DECL NIL |real_props| NIL)) NIL (|base_list_cdr| SUBTYPE "number_fields./(((number_fields.-)(base_repr.k, mod.mod(base_repr.k, base_repr.n))), base_repr.n)" "nat"))) (|base_list_cdr| 0 (|base_list_cdr-3| "" 3882373853 ("" (SKEEP) (("" (CASE "integer_pred((k-mod(k,n))/n) AND (k-mod(k,n))/n>=0") (("1" (LEMMA "more_list_props[below(n)].list_extensionality") (("1" (INST?) (("1" (FLATTEN -1) (("1" (HIDE -1) (("1" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (GRIND) NIL NIL) ("3" (SKEEP) (("3" (HIDE 2) (("3" (EXPAND "base_list") (("3" (TYPEPRED "array2list[below(n)](j)(base_n(n, (k - mod(k, n)) / n))") (("1" (INST -3 "n_1") (("1" (REPLACE -3 :DIR RL) (("1" (HIDE (-1 -2 -3)) (("1" (CASE-REPLACE "nth(cdr(array2list[below(n)](1 + j)(base_n(n, k))), n_1) = nth( array2list[below(n)](1 + j)(base_n(n, k)), n_1+1)") (("1" (TYPEPRED "array2list[below(n)](1 + j)(base_n(n, k))") (("1" (INST -3 "n_1+1") (("1" (REPLACE -3 :DIR RL) (("1" (NAME-REPLACE "bnk_mod" "base_n(n, (k - mod(k, n)) / n)(n_1)") (("1" (HIDE (-1 -2 -3 -4)) (("1" (EXPAND "base_n") (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (CASE-REPLACE "mod(k,n)=k") (("1" (EXPAND "bnk_mod") (("1" (REPLACE -1) (("1" (EXPAND "base_n") (("1" (LIFT-IF 1) (("1" (SPLIT) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "mod") (("2" (DIV-BY -1 "n") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (GROUND) (("2" (EXPAND "bnk_mod") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED ("n_1")) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (NAME-REPLACE "CDL" "nth(cdr(array2list[below(n)](1 + j)(base_n(n, k))), n_1)") (("2" (EXPAND "nth") (("2" (EXPAND "CDL") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("3" (TYPEPRED ("n_1")) (("3" (GROUND) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) (("2" (TYPEPRED ("n_1")) (("2" (GROUND) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) (("2" (INST 1 "0") NIL NIL)) NIL) ("3" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SPLIT 1) (("1" (EXPAND "mod") (("1" (GROUND) NIL NIL)) NIL) ("2" (CROSS-MULT) (("2" (EXPAND "mod") (("2" (CANCEL-BY 1 "n") (("2" (TYPEPRED ("k")) (("2" (DIV-BY -1 "n") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|base_list_cdr-2| "" 3744695325 ("" (SKEEP) (("" (CASE "integer_pred((k-mod(k,n))/n) AND (k-mod(k,n))/n>=0") (("1" (LEMMA "more_list_props[below(n)].list_extensionality") (("1" (INST?) (("1" (FLATTEN -1) (("1" (HIDE -1) (("1" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (GRIND) NIL NIL) ("3" (SKEEP) (("3" (HIDE 2) (("3" (EXPAND "base_list") (("3" (TYPEPRED "array2list[below(n)](j)(base_n(n, (k - mod(k, n)) / n))") (("1" (INST -3 "n_1") (("1" (REPLACE -3 :DIR RL) (("1" (HIDE (-1 -2 -3)) (("1" (CASE-REPLACE "nth(cdr(array2list[below(n)](1 + j)(base_n(n, k))), n_1) = nth( array2list[below(n)](1 + j)(base_n(n, k)), n_1+1)") (("1" (TYPEPRED "array2list[below(n)](1 + j)(base_n(n, k))") (("1" (INST -3 "n_1+1") (("1" (REPLACE -3 :DIR RL) (("1" (NAME-REPLACE "bnk_mod" "base_n(n, (k - mod(k, n)) / n)(n_1)") (("1" (HIDE (-1 -2 -3 -4)) (("1" (EXPAND "base_n") (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (CASE-REPLACE "mod(k,n)=k") (("1" (EXPAND "bnk_mod") (("1" (REPLACE -1) (("1" (EXPAND "base_n") (("1" (LIFT-IF 1) (("1" (SPLIT) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "mod") (("2" (DIV-BY -1 "n") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (GROUND) (("2" (EXPAND "bnk_mod") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED (N_1)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (NAME-REPLACE "CDL" "nth(cdr(array2list[below(n)](1 + j)(base_n(n, k))), n_1)") (("2" (EXPAND "nth") (("2" (EXPAND "CDL") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("3" (TYPEPRED (N_1)) (("3" (GROUND) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) (("2" (TYPEPRED (N_1)) (("2" (GROUND) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) (("2" (INST 1 "0") NIL NIL)) NIL) ("3" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SPLIT 1) (("1" (EXPAND "mod") (("1" (GROUND) NIL NIL)) NIL) ("2" (CROSS-MULT) (("2" (EXPAND "mod") (("2" (CANCEL-BY 1 "n") (("2" (TYPEPRED (K)) (("2" (DIV-BY -1 "n") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|nonzero_integer| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (< CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (|mod| CONST-DECL "{k | abs(k) < abs(j)}" |mod| NIL) (> CONST-DECL "bool" |reals| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|n| SKOLEM-CONST-DECL "{x: nat | x > 1}" |base_repr| NIL) (|k| SKOLEM-CONST-DECL "nat" |base_repr| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|listn| TYPE-EQ-DECL NIL |listn| |structures|) (|base_list| CONST-DECL "listn[below(n)](digits)" |base_repr| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|n_1| SKOLEM-CONST-DECL "below(length(cdr(base_list(n, k, 1 + j))))" |base_repr| NIL) (|j| SKOLEM-CONST-DECL "posnat" |base_repr| NIL) (CDL SKOLEM-CONST-DECL "below(n)" |base_repr| NIL) (|div_simp| FORMULA-DECL NIL |real_props| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|both_sides_div_pos_lt1| FORMULA-DECL NIL |real_props| NIL) (|bnk_mod| SKOLEM-CONST-DECL "nat" |base_repr| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|base_n| DEF-DECL "nat" |base_repr| NIL) (|array2list_it| DEF-DECL "{l: listn(n - i) | FORALL (j: subrange(i, n - 1)): a(j) = nth(l, j - i)}" |array2list| |structures|) (|array2list| CONST-DECL "{l: listn(n) | FORALL (i: below(n)): a(i) = nth(l, i)}" |array2list| |structures|) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|list_extensionality| FORMULA-DECL NIL |more_list_props| |structures|) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|both_sides_div_pos_ge1| FORMULA-DECL NIL |real_props| NIL) (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|pos_div_gt| FORMULA-DECL NIL |real_props| NIL) (|zero_times1| FORMULA-DECL NIL |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nzrat_div_nzrat_is_nzrat| APPLICATION-JUDGEMENT "nzrat" |rationals| NIL) (|both_sides_times_pos_ge1| FORMULA-DECL NIL |real_props| NIL) (|floor| CONST-DECL "{i | i <= x & x < i + 1}" |floor_ceil| NIL) (<= CONST-DECL "bool" |reals| NIL) (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (DIV_198 SKOLEM-CONST-DECL "{x: nat | x > 1}" |base_repr| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|div_mult_pos_ge1| FORMULA-DECL NIL |real_props| NIL)) SHOSTAK) (|base_list_cdr-1| |nil| 3618133505 ("" (SKEEP) (("" (CASE "integer_pred((k-mod(k,n))/n) AND (k-mod(k,n))/n>=0") (("1" (LEMMA "more_list_props[below(n)].list_extensionality") (("1" (INST?) (("1" (FLATTEN -1) (("1" (HIDE -1) (("1" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (GRIND) NIL NIL) ("3" (SKEEP) (("3" (HIDE 2) (("3" (EXPAND "base_list") (("3" (TYPEPRED "array2list[below(n)](j)(base_n(n, (k - mod(k, n)) / n))") (("1" (INST -3 "n_1") (("1" (REPLACE -3 :DIR RL) (("1" (HIDE (-1 -2 -3)) (("1" (CASE-REPLACE "nth(cdr(array2list[below(n)](1 + j)(base_n(n, k))), n_1) = nth( array2list[below(n)](1 + j)(base_n(n, k)), n_1+1)") (("1" (TYPEPRED "array2list[below(n)](1 + j)(base_n(n, k))") (("1" (INST -3 "n_1+1") (("1" (REPLACE -3 :DIR RL) (("1" (NAME-REPLACE "bnk_mod" "base_n(n, (k - mod(k, n)) / n)(n_1)") (("1" (HIDE (-1 -2 -3 -4)) (("1" (EXPAND "base_n") (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (CASE-REPLACE "mod(k,n)=k") (("1" (EXPAND "bnk_mod") (("1" (REPLACE -1) (("1" (EXPAND "base_n") (("1" (LIFT-IF 1) (("1" (SPLIT) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "mod") (("2" (DIV-BY -1 "n") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (GROUND) (("2" (EXPAND "bnk_mod") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED (N_1)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (NAME-REPLACE "CDL" "nth(cdr(array2list[below(n)](1 + j)(base_n(n, k))), n_1)") (("2" (EXPAND "nth") (("2" (EXPAND "CDL") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("3" (TYPEPRED (N_1)) (("3" (GROUND) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) (("2" (TYPEPRED (N_1)) (("2" (GROUND) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SPLIT 1) (("1" (EXPAND "mod") (("1" (GROUND) NIL NIL)) NIL) ("2" (CROSS-MULT) (("2" (EXPAND "mod") (("2" (CANCEL-BY 1 "n") (("2" (TYPEPRED (K)) (("2" (DIV-BY -1 "n") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|base_list_faster_TCC1| 0 (|base_list_faster_TCC1-1| |nil| 3621612652 ("" (SKEEP) (("" (REWRITE "mod_pos") NIL NIL)) NIL) ((|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|mod_pos| FORMULA-DECL NIL |mod| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)) NIL (|base_list_faster| SUBTYPE "mod.mod(base_repr.k, base_repr.n)" "below(base_repr.n)"))) (|base_list_faster_TCC2| 0 (|base_list_faster_TCC2-1| |nil| 3621612652 ("" (SKEEP) (("" (GROUND) (("" (GRIND) NIL NIL)) NIL)) NIL) ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|mod| CONST-DECL "{k | abs(k) < abs(j)}" |mod| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) NIL (|base_list_faster| SUBTYPE "(: mod.mod(base_repr.k, base_repr.n) :)" "listn[below(base_repr.n)](base_repr.digits)"))) (|base_list_faster_TCC3| 0 (|base_list_faster_TCC3-2| "" 3744695564 ("" (SKEEP) (("" (REWRITE "mod_pos") NIL NIL)) NIL) ((|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|mod_pos| FORMULA-DECL NIL |mod| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)) SHOSTAK (|base_list_faster| SUBTYPE "mod.mod(base_repr.k, base_repr.n)" "below(base_repr.n)")) (|base_list_faster_TCC3-1| |nil| 3621612652 ("" (SKEEP) (("" (GROUND) (("" (GRIND) NIL NIL)) NIL)) NIL) NIL NIL (|base_list_faster| SUBTYPE "mod.mod(base_repr.k, base_repr.n)" "below(base_repr.n)"))) (|base_list_faster_TCC4| 0 (|base_list_faster_TCC4-2| "" 3744695590 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK (|base_list_faster| SUBTYPE "(number_fields.-)(base_repr.digits, 1)" "posnat")) (|base_list_faster_TCC4-1| |nil| 3621612652 ("" (SKEEP) (("" (REWRITE "mod_pos") NIL NIL)) NIL) NIL NIL (|base_list_faster| SUBTYPE "(number_fields.-)(base_repr.digits, 1)" "posnat"))) (|base_list_faster_TCC5| 0 (|base_list_faster_TCC5-1| |nil| 3621612652 ("" (SUBTYPE-TCC) NIL NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|base_list_faster| TERMINATION "base_repr.base_list_faster(base_repr.n, number_fields./(((number_fields.-)(base_repr.k, mod.mod(base_repr.k, base_repr.n))), base_repr.n), (number_fields.-)(base_repr.digits, 1))" "NIL"))) (|base_list_faster_TCC6| 0 (|base_list_faster_TCC6-1| |nil| 3621612652 ("" (TERMINATION-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|mod| CONST-DECL "{k | abs(k) < abs(j)}" |mod| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|base_list_faster| SUBTYPE "list_adt[below(base_repr.n)].cons(mod.mod(base_repr.k, base_repr.n), base_repr.base_list_faster(base_repr.n, number_fields./(((number_fields.-)(base_repr.k, mod.mod(base_repr.k, base_repr.n))), base_repr.n), (number_fields.-)(base_repr.digits, 1)))" "listn[below(base_repr.n)](base_repr.digits)"))) (|base_list_same| 0 (|base_list_same-2| "" 3882374057 ("" (INDUCT "digits") (("1" (GROUND) NIL NIL) ("2" (GROUND) NIL NIL) ("3" (SKEEP) (("3" (SKEEP) (("3" (EXPAND "base_list_faster" 1) (("3" (LIFT-IF 1) (("3" (SPLIT 1) (("1" (FLATTEN) (("1" (EXPAND "base_list") (("1" (EXPAND "base_n") (("1" (REPLACE -1) (("1" (GROUND) (("1" (HIDE -1) (("1" (GRIND) (("1" (DIV-BY -2 "n") (("1" (GROUND) (("1" (CASE "floor(k/n) = 0") (("1" (REPLACE -1) (("1" (GROUND) NIL NIL)) NIL) ("2" (TYPEPRED ("k")) (("2" (GROUND) (("2" (GRIND) (("2" (DIV-BY -1 "n") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) (("2" (GRIND) (("2" (TYPEPRED ("k")) (("2" (DIV-BY -1 "n") (("2" (DIV-BY -3 "n") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (INST -1 "n" "(k-mod(k,n))/n") (("1" (REWRITE "base_list_cdr" :DIR RL) (("1" (REPLACE -1) (("1" (GROUND) (("1" (CASE-REPLACE "mod(k,n)= car(base_list(n,k,1+j))") (("1" (GROUND) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE (-1 3)) (("2" (EXPAND "base_list") (("2" (EXPAND "base_n") (("2" (GRIND) (("2" (DIV-BY -1 "n") (("2" (TYPEPRED ("k")) (("2" (DIV-BY -1 "n") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SPLIT 1) (("1" (EXPAND "mod") (("1" (GRIND) NIL NIL)) NIL) ("2" (CROSS-MULT 1) (("2" (LEMMA "mod_pos") (("2" (INST?) (("2" (GRIND) (("2" (CANCEL-BY 1 "n") (("2" (TYPEPRED ("k")) (("2" (GRIND) (("2" (GRIND) (("2" (GRIND) (("2" (DIV-BY -1 "n") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|base_list_same-1| |nil| 3621612875 ("" (INDUCT "digits") (("1" (GROUND) NIL NIL) ("2" (GROUND) NIL NIL) ("3" (SKEEP) (("3" (SKEEP) (("3" (EXPAND "base_list_faster" 1) (("3" (LIFT-IF 1) (("3" (SPLIT 1) (("1" (FLATTEN) (("1" (EXPAND "base_list") (("1" (EXPAND "base_n") (("1" (REPLACE -1) (("1" (GROUND) (("1" (HIDE -1) (("1" (GRIND) (("1" (DIV-BY -2 "n") (("1" (GROUND) (("1" (CASE "floor(k/n) = 0") (("1" (REPLACE -1) (("1" (GROUND) NIL NIL)) NIL) ("2" (TYPEPRED (K)) (("2" (GROUND) (("2" (GRIND) (("2" (DIV-BY -1 "n") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) (("2" (GRIND) (("2" (TYPEPRED (K)) (("2" (DIV-BY -1 "n") (("2" (DIV-BY -3 "n") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (INST -1 "n" "(k-mod(k,n))/n") (("1" (REWRITE "base_list_cdr" :DIR RL) (("1" (REPLACE -1) (("1" (GROUND) (("1" (CASE-REPLACE "mod(k,n)= car(base_list(n,k,1+j))") (("1" (GROUND) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE (-1 3)) (("2" (EXPAND "base_list") (("2" (EXPAND "base_n") (("2" (GRIND) (("2" (DIV-BY -1 "n") (("2" (TYPEPRED (K)) (("2" (DIV-BY -1 "n") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SPLIT 1) (("1" (EXPAND "mod") (("1" (GRIND) NIL NIL)) NIL) ("2" (CROSS-MULT 1) (("2" (LEMMA "mod_pos") (("2" (INST?) (("2" (GRIND) (("2" (CANCEL-BY 1 "n") (("2" (TYPEPRED (K)) (("2" (GRIND) (("2" (GRIND) (("2" (GRIND) (("2" (DIV-BY -1 "n") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|both_sides_div_pos_lt1| FORMULA-DECL NIL |real_props| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|div_simp| FORMULA-DECL NIL |real_props| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|floor| CONST-DECL "{i | i <= x & x < i + 1}" |floor_ceil| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (<= CONST-DECL "bool" |reals| NIL) (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|both_sides_div_pos_ge1| FORMULA-DECL NIL |real_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|array2list| CONST-DECL "{l: listn(n) | FORALL (i: below(n)): a(i) = nth(l, i)}" |array2list| |structures|) (|array2list_it| DEF-DECL "{l: listn(n - i) | FORALL (j: subrange(i, n - 1)): a(j) = nth(l, j - i)}" |array2list| |structures|) (|mod| CONST-DECL "{k | abs(k) < abs(j)}" |mod| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|base_n| DEF-DECL "nat" |base_repr| NIL) (|mod_pos| FORMULA-DECL NIL |mod| NIL) (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|pos_div_gt| FORMULA-DECL NIL |real_props| NIL) (|zero_times1| FORMULA-DECL NIL |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nzrat_div_nzrat_is_nzrat| APPLICATION-JUDGEMENT "nzrat" |rationals| NIL) (|both_sides_times_pos_ge1| FORMULA-DECL NIL |real_props| NIL) (DIV_199 SKOLEM-CONST-DECL "{x: nat | x > 1}" |base_repr| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|div_mult_pos_ge1| FORMULA-DECL NIL |real_props| NIL) (|base_list_cdr| FORMULA-DECL NIL |base_repr| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|k| SKOLEM-CONST-DECL "nat" |base_repr| NIL) (|nonzero_integer| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (|n| SKOLEM-CONST-DECL "{x: nat | x > 1}" |base_repr| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|base_list| CONST-DECL "listn[below(n)](digits)" |base_repr| NIL) (|base_list_faster| DEF-DECL "listn[below(n)](digits)" |base_repr| NIL) (|listn| TYPE-EQ-DECL NIL |listn| |structures|) (|length| DEF-DECL "nat" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (> CONST-DECL "bool" |reals| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) SHOSTAK)) (|base_to_array_TCC1| 0 (|base_to_array_TCC1-1| |nil| 3621588317 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|base_to_array| SUBTYPE "0" "below(base_repr.n)"))) (|base_to_array_TCC2| 0 (|base_to_array_TCC2-1| |nil| 3621588317 ("" (SKEEP) (("" (INST 1 "0") NIL NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (< CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) NIL (|base_to_array| EXISTENCE "" "below(base_repr.n)"))) (|base_to_array_sound_TCC1| 0 (|base_to_array_sound_TCC1-1| |nil| 3621588317 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|base_to_array_sound| SUBTYPE "base_repr.n" "posnat"))) (|base_to_array_sound| 0 (|base_to_array_sound-3| "" 3882374201 ("" (SKEEP) (("" (DECOMPOSE-EQUALITY 1) (("" (CASE "x!1<j") (("1" (EXPAND "base_to_array") (("1" (EXPAND "base_list") (("1" (LEMMA "array2list_inv[below(n)]") (("1" (INST -1 "base_n(n, k)" "0" "j" "x!1") NIL NIL) ("2" (INST 1 "0") NIL NIL)) NIL)) NIL)) NIL) ("2" (FLIP-INEQ 1) (("2" (TYPEPRED ("j")) (("2" (EXPAND "base_to_array") (("2" (REWRITE "upper_is_bound") (("2" (GROUND) (("2" (REWRITE "list2array_sound[below(n)]") (("2" (INST 1 "0") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|base_to_array_sound-2| "" 3744695667 ("" (SKEEP) (("" (DECOMPOSE-EQUALITY 1) (("1" (CASE "x!1<j") (("1" (EXPAND "base_to_array") (("1" (EXPAND "base_list") (("1" (LEMMA "array2list_inv[below(n)]") (("1" (INST -1 "base_n(n, k)" "0" "j" "x!1") NIL NIL) ("2" (INST 1 "0") NIL NIL)) NIL)) NIL)) NIL) ("2" (FLIP-INEQ 1) (("2" (TYPEPRED (J)) (("2" (EXPAND "base_to_array") (("2" (REWRITE "upper_is_bound") (("2" (GROUND) (("2" (REWRITE "list2array_sound[below(n)]") (("2" (INST 1 "0") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (REWRITE "base_n_lt_n") NIL NIL)) NIL)) NIL)) NIL) ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|base_n| DEF-DECL "nat" |base_repr| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|upper_index| CONST-DECL "nat" |base_repr| NIL) (|base_list| CONST-DECL "listn[below(n)](digits)" |base_repr| NIL) (|listn| TYPE-EQ-DECL NIL |listn| |structures|) (|length| DEF-DECL "nat" |list_props| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|base_to_array| CONST-DECL "[nat -> below(n)]" |base_repr| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (< CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|list2array_sound| FORMULA-DECL NIL |array2list| |structures|) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|upper_is_bound| FORMULA-DECL NIL |base_repr| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|array2list_inv| FORMULA-DECL NIL |array2list| |structures|) (TRUE CONST-DECL "bool" |booleans| NIL) (|x!1| SKOLEM-CONST-DECL "nat" |base_repr| NIL) (|n| SKOLEM-CONST-DECL "{x: nat | x > 1}" |base_repr| NIL) (|k| SKOLEM-CONST-DECL "nat" |base_repr| NIL) (|j| SKOLEM-CONST-DECL "above(upper_index(n, k))" |base_repr| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK) (|base_to_array_sound-1| |nil| 3621588391 ("" (SKEEP) (("" (DECOMPOSE-EQUALITY 1) (("1" (CASE "x!1<j") (("1" (EXPAND "base_to_array") (("1" (EXPAND "base_list") (("1" (LEMMA "array2list_inv[below(n)]") (("1" (INST -1 "base_n(n, k)" "0" "j" "x!1") NIL NIL)) NIL)) NIL)) NIL) ("2" (FLIP-INEQ 1) (("2" (TYPEPRED (J)) (("2" (EXPAND "base_to_array") (("2" (REWRITE "upper_is_bound") (("2" (GROUND) (("2" (REWRITE "list2array_sound[below(n)]") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (REWRITE "base_n_lt_n") NIL NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)))
