(|ieee754_domain|
 (|emin_TCC1| 0
  (|emin_TCC1-1| |nil| 3790101901 ("" (SUBTYPE-TCC) NIL NIL)
   ((|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL))
   NIL (|emin| SUBTYPE "(number_fields.-)(1, ieee754_domain.emax)" "negint")))
 (|lesseqp_TCC1| 0
  (|lesseqp_TCC1-1| |nil| 3764935826 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|lesseqp| SUBTYPE "ieee754_domain.j" "below(ieee754_domain.p)")))
 (|significand_lt_first_discrepancy| 0
  (|significand_lt_first_discrepancy-1| |nil| 3764946996
   ("" (SKEEP)
    ((""
      (CASE
          "EXISTS(k: below(p)): (FORALL (j: below(k)): m1(j) = m2(j)) AND NOT m1(k) = m2(k)")
      (("1" (SKEEP :PREDS? T)
        (("1" (INST 3 "k")
          (("1" (SPLIT 3)
            (("1" (PROPAX) NIL NIL)
             ("2" (EXPAND "<=" -3)
              (("2" (INST -3 "k") (("2" (ASSERT) NIL NIL)) NIL)) NIL))
            NIL))
          NIL))
        NIL)
       ("2" (HIDE 3)
        (("2" (HIDE -1)
          (("2" (INST 1 "min({k: below(p) | NOT m1(k) = m2(k)})")
            (("1" (SPLIT 1)
              (("1" (SKEEP :PREDS? T)
                (("1" (TYPEPRED "min({k: below(p) | NOT m1(k) = m2(k)})")
                  (("1" (INST -2 "j") (("1" (ASSERT) NIL NIL)) NIL)
                   ("2" (EXPAND "nonempty?")
                    (("2" (EXPAND "empty?")
                      (("2" (APPLY-EXTENSIONALITY 2)
                        (("2" (INST -1 "x!1")
                          (("2" (ASSERT)
                            (("2" (EXPAND "member") (("2" (PROPAX) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (TYPEPRED "min({k: below(p) | NOT m1(k) = m2(k)})")
                (("1" (PROPAX) NIL NIL)
                 ("2" (EXPAND "nonempty?")
                  (("2" (EXPAND "empty?")
                    (("2" (APPLY-EXTENSIONALITY) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (EXPAND "nonempty?")
              (("2" (EXPAND "empty?")
                (("2" (EXPAND "member") (("2" (APPLY-EXTENSIONALITY) NIL NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|significand| TYPE-EQ-DECL NIL |ieee754_domain| NIL)
    (|b| FORMAL-CONST-DECL "above(1)" |ieee754_domain| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|p| FORMAL-CONST-DECL "above(1)" |ieee754_domain| NIL)
    (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL) (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (<= CONST-DECL "bool" |ieee754_domain| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|k| SKOLEM-CONST-DECL "below(p)" |ieee754_domain| NIL)
    (|m1| SKOLEM-CONST-DECL "significand" |ieee754_domain| NIL)
    (|m2| SKOLEM-CONST-DECL "significand" |ieee754_domain| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|min| CONST-DECL "{a | S(a) AND (FORALL x: S(x) IMPLIES a <= x)}"
     |min_nat| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL))
   SHOSTAK))
 (|smax_TCC1| 0
  (|smax_TCC1-2| "" 3790102416 ("" (TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|p| FORMAL-CONST-DECL "above(1)" |ieee754_domain| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL))
   SHOSTAK
   (|smax| SUBTYPE "(number_fields.-)(ieee754_domain.b, 1)"
    "below(ieee754_domain.b)"))
  (|smax_TCC1-1| |nil| 3763809037 ("" (TCC)) NIL NIL
   (|smax| SUBTYPE "(number_fields.-)(ieee754_domain.b, 1)"
    "below(ieee754_domain.b)")))
 (|smin_TCC1| 0
  (|smin_TCC1-1| |nil| 3764674754
   ("" (SKEEP :PREDS? T) (("" (TYPEPRED "b") (("" (ASSERT) NIL NIL)) NIL)) NIL)
   ((|b| FORMAL-CONST-DECL "above(1)" |ieee754_domain| NIL)
    (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL))
   NIL (|smin| SUBTYPE "1" "below(ieee754_domain.b)")))
 (|smin_TCC2| 0
  (|smin_TCC2-1| |nil| 3764674754 ("" (SUBTYPE-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|p| FORMAL-CONST-DECL "above(1)" |ieee754_domain| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL))
   NIL (|smin| SUBTYPE "0" "below(ieee754_domain.b)")))
 (|smax_is_max| 0
  (|smax_is_max-1| |nil| 3764935833
   ("" (SKEEP :PREDS? T)
    (("" (EXPAND "<=")
      (("" (SKEEP :PREDS? T) (("" (EXPAND "smax") (("" (ASSERT) NIL NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((<= CONST-DECL "bool" |ieee754_domain| NIL)
    (|smax| CONST-DECL "significand" |ieee754_domain| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL))
   SHOSTAK))
 (|smin_is_min| 0
  (|smin_is_min-1| |nil| 3764935889
   ("" (SKEEP :PREDS? T)
    (("" (CASE "EXISTS (k: below(p)): NOT m(k) = 0")
      (("1" (HIDE 1)
        (("1" (SKEEP -1 :PREDS? T)
          (("1" (EXPAND "<=")
            (("1" (SKEEP 2 :PREDS? T)
              (("1" (EXPAND "smin")
                (("1" (LIFT-IF 2)
                  (("1" (SPLIT 2)
                    (("1" (FLATTEN)
                      (("1" (CASE "k < i")
                        (("1" (INST -4 "k") (("1" (ASSERT) NIL NIL)) NIL)
                         ("2" (CASE "k=i")
                          (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL))
                        NIL))
                      NIL)
                     ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (APPLY-EXTENSIONALITY 2)
        (("2" (INST? 2)
          (("2" (ASSERT) (("2" (EXPAND "szero") (("2" (PROPAX) NIL NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|szero| CONST-DECL "significand" |ieee754_domain| NIL)
    (|significand| TYPE-EQ-DECL NIL |ieee754_domain| NIL)
    (|b| FORMAL-CONST-DECL "above(1)" |ieee754_domain| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|p| FORMAL-CONST-DECL "above(1)" |ieee754_domain| NIL)
    (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL) (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|i| SKOLEM-CONST-DECL
     "{i: below(p) | FORALL (j: below(i)): smin(j) = m(j)}" |ieee754_domain|
     NIL)
    (|m| SKOLEM-CONST-DECL "{m: significand | NOT m = szero}" |ieee754_domain|
     NIL)
    (|k| SKOLEM-CONST-DECL "below(p)" |ieee754_domain| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|smin| CONST-DECL "significand" |ieee754_domain| NIL)
    (<= CONST-DECL "bool" |ieee754_domain| NIL))
   SHOSTAK))
 (|IMP_sigma_TCC1| 0
  (|IMP_sigma_TCC1-1| |nil| 3883848888 ("" (ASSUMING-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL))
   NIL
   (|IMP_sigma| ASSUMING "reals@sigma[nat].sigma"
    "connected_domain: ASSUMPTION (FORALL (x, y: sigma.T), (z: integers.integer): booleans.IMPLIES(booleans.AND(reals.<=(x, z), reals.<=(z, y)), sigma.T_pred(z)))")))
 (|value_TCC1| 0
  (|value_TCC1-2| "" 3790102420 ("" (TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|sign| TYPE-EQ-DECL NIL |ieee754_domain| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|nonpos_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|negint| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|emin| CONST-DECL "negint" |ieee754_domain| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|emax| FORMAL-CONST-DECL "above(1)" |ieee754_domain| NIL)
    (|exponent| TYPE-EQ-DECL NIL |ieee754_domain| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL))
   SHOSTAK
   (|value| SUBTYPE "ieee754_domain.e"
    "{i: integers.int | booleans.OR(ieee754_domain.b /= 0, reals.>=(i, 0))}"))
  (|value_TCC1-1| |nil| 3763809037 ("" (TCC)) NIL NIL
   (|value| SUBTYPE "ieee754_domain.e"
    "{i: integers.int | booleans.OR(ieee754_domain.b /= 0, reals.>=(i, 0))}")))
 (|value_TCC2| 0
  (|value_TCC2-1| |nil| 3765440807 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|value| SUBTYPE "0" "T_low[nat]")))
 (|value_TCC3| 0
  (|value_TCC3-2| "" 3790102422 ("" (TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|sign| TYPE-EQ-DECL NIL |ieee754_domain| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|nonpos_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|negint| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|emin| CONST-DECL "negint" |ieee754_domain| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|emax| FORMAL-CONST-DECL "above(1)" |ieee754_domain| NIL)
    (|exponent| TYPE-EQ-DECL NIL |ieee754_domain| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL))
   SHOSTAK
   (|value| SUBTYPE "(number_fields.-)(ieee754_domain.p, 1)" "T_high[nat]"))
  (|value_TCC3-1| |nil| 3763809037 ("" (TCC)) NIL NIL
   (|value| SUBTYPE "(number_fields.-)(ieee754_domain.p, 1)" "T_high[nat]")))
 (|value_TCC4| 0
  (|value_TCC4-2| "" 3790102422 ("" (TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|sign| TYPE-EQ-DECL NIL |ieee754_domain| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|nonpos_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|negint| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|emin| CONST-DECL "negint" |ieee754_domain| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|emax| FORMAL-CONST-DECL "above(1)" |ieee754_domain| NIL)
    (|exponent| TYPE-EQ-DECL NIL |ieee754_domain| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL))
   SHOSTAK
   (|value| SUBTYPE "((number_fields.-)(ieee754_domain.i))"
    "{i: integers.int | booleans.OR(ieee754_domain.b /= 0, reals.>=(i, 0))}"))
  (|value_TCC4-1| |nil| 3763809037 ("" (TCC)) NIL NIL
   (|value| SUBTYPE "((number_fields.-)(ieee754_domain.i))"
    "{i: integers.int | booleans.OR(ieee754_domain.b /= 0, reals.>=(i, 0))}")))
 (|significand_zero_value_zero| 0
  (|significand_zero_value_zero-1| |nil| 3764936883
   ("" (SKEEP :PREDS? T)
    (("" (EXPAND "value")
      (("" (REPLACE -4 :HIDE? T)
        ((""
          (CASE
              "sigma(0, p - 1, LAMBDA (i: nat): IF i<p THEN szero(i) * b ^ (-i) ELSE 0 ENDIF) = 0")
          (("1" (ASSERT) NIL NIL)
           ("2" (HIDE 2)
            (("2" (USE "sigma_zero")
              (("2" (LEMMA "sigma_eq")
                (("2"
                  (INST -1 "LAMBDA (i: nat): 0"
                   "LAMBDA (i: nat): IF i < p THEN szero(i) * b ^ (-i) ELSE 0 ENDIF"
                   "p-1" "0")
                  (("1" (ASSERT)
                    (("1" (HIDE-ALL-BUT 1)
                      (("1" (SKEEP :PREDS? T)
                        (("1" (EXPAND "szero") (("1" (ASSERT) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (SKEEP)
                    (("2" (TYPEPRED "b") (("2" (ASSERT) NIL NIL)) NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("3" (ASSERT) NIL NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|value| CONST-DECL "real" |ieee754_domain| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|nnrat_times_nnrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat"
     |rationals| NIL)
    (|sigma_rat| APPLICATION-JUDGEMENT "rational" |ieee754_domain| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|T_low| TYPE-EQ-DECL NIL |sigma| |reals|)
    (|T_high| TYPE-EQ-DECL NIL |sigma| |reals|)
    (|sigma| DEF-DECL "real" |sigma| |reals|)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|p| FORMAL-CONST-DECL "above(1)" |ieee754_domain| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|b| FORMAL-CONST-DECL "above(1)" |ieee754_domain| NIL)
    (|significand| TYPE-EQ-DECL NIL |ieee754_domain| NIL)
    (|szero| CONST-DECL "significand" |ieee754_domain| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|nzrat_times_nzrat_is_nzrat| APPLICATION-JUDGEMENT "nzrat" |rationals|
     NIL)
    (|rat_exp| APPLICATION-JUDGEMENT "rat" |exponentiation| NIL)
    (|nzreal_exp| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL)
    (|posrat_exp| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL)
    (|sigma_zero| FORMULA-DECL NIL |sigma| |reals|)
    (|sigma_nat| APPLICATION-JUDGEMENT "nat" |ieee754_domain| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|sigma_eq| FORMULA-DECL NIL |sigma| |reals|)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   SHOSTAK))
 (|significand_le_value_le_TCC1| 0
  (|significand_le_value_le_TCC3-1| |nil| 3764944735 ("" (SUBTYPE-TCC) NIL NIL)
   ((|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (<= CONST-DECL "bool" |ieee754_domain| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL))
   NIL
   (|significand_le_value_le| SUBTYPE "((number_fields.-)(ieee754_domain.i))"
    "{i: integers.int | booleans.OR(ieee754_domain.b /= 0, reals.>=(i, 0))}")))
 (|significand_le_value_le| 0
  (|significand_le_value_le-2| "" 3790102429
   ("" (SKEEP)
    (("" (CASE "m1 = m2")
      (("1" (REPLACE -1 :HIDE? T)
        (("1" (HIDE -1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)
       ("2" (USE "significand_lt_first_discrepancy")
        (("2" (ASSERT)
          (("2" (SKEEP :PREDS? T)
            (("2"
              (WITH-TCCS
               (CASE
                   "sigma(0, p - 1, LAMBDA (i: nat): IF i<p THEN m1(i) * b ^ (-i) ELSE 0 ENDIF) = sigma(0, k - 1, LAMBDA (i: nat): IF i<p THEN m1(i) * b ^ (-i) ELSE 0 ENDIF) + m1(k) * b^(-k) + sigma(k+1, p - 1, LAMBDA (i: nat): IF i<p THEN m1(i) * b ^ (-i) ELSE 0 ENDIF)"))
              (("1"
                (WITH-TCCS
                 (CASE
                     "sigma(0, p - 1, LAMBDA (i: nat): IF i<p THEN m2(i) * b ^ (-i) ELSE 0 ENDIF) = sigma(0, k - 1, LAMBDA (i: nat): IF i<p THEN m2(i) * b ^ (-i) ELSE 0 ENDIF) + m2(k) * b ^ (-k) + sigma(k + 1, p - 1, LAMBDA (i: nat): IF i<p THEN m2(i) * b ^ (-i) ELSE 0 ENDIF)"))
                (("1" (REPLACE -1 :HIDE? T)
                  (("1" (REPLACE -1 :HIDE? T)
                    (("1"
                      (CASE
                          "sigma(0, k - 1, LAMBDA (i: nat): IF i<p THEN m1(i) * b ^ (-i) ELSE 0 ENDIF) = sigma(0, k - 1, LAMBDA (i: nat): IF i<p THEN m2(i) * b ^ (-i) ELSE 0 ENDIF)")
                      (("1" (REPLACE -1 :HIDE? T)
                        (("1"
                          (CASE
                              "m1(k) * b ^ (-k) + sigma(k + 1, p - 1, LAMBDA (i: nat): IF i<p THEN m1(i) * b ^ (-i) ELSE 0 ENDIF) <= m2(k) * b ^ (-k) + sigma(k + 1, p - 1, LAMBDA (i: nat): IF i<p THEN m2(i) * b ^ (-i) ELSE 0 ENDIF)")
                          (("1" (ASSERT) NIL NIL)
                           ("2" (HIDE 3)
                            (("2"
                              (CASE
                                  "m1(k) * b ^ (-k) + sigma(k + 1, p - 1, LAMBDA (i: nat): IF i<p THEN m1(i) * b ^ (-i) ELSE 0 ENDIF) <= m1(k) * b ^ (-k) + (b-1) * sigma(k + 1, p - 1, LAMBDA (i: nat): b ^ (-i))")
                              (("1"
                                (CASE
                                    "m2(k) * b ^ (-k) <= m2(k) * b ^ (-k) + sigma(k + 1, p - 1, LAMBDA (i: nat): IF i<p THEN m2(i) * b ^ (-i) ELSE 0 ENDIF)")
                                (("1"
                                  (CASE
                                      " m1(k) * b ^ (-k) + (b - 1) * sigma(k + 1, p - 1, LAMBDA (i: nat): b ^ (-i)) <= m2(k) * b ^ (-k)")
                                  (("1" (ASSERT) NIL NIL)
                                   ("2" (HIDE 2)
                                    (("2" (HIDE -1 -2)
                                      (("2" (CASE "k+1 > p-1")
                                        (("1" (EXPAND "sigma")
                                          (("1" (ASSERT)
                                            (("1" (MULT-BY -4 "b ^ (-k)")
                                              (("1" (ASSERT) NIL NIL)) NIL))
                                            NIL))
                                          NIL)
                                         ("2" (LEMMA "sigma_geometric")
                                          (("2" (INST -1 "p-1" "k+1" "1/b")
                                            (("2" (SPLIT -1)
                                              (("1"
                                                (CASE
                                                    "sigma(k + 1, p - 1, LAMBDA (k: nat): (1 / b) ^ k) = sigma(k + 1, p - 1, LAMBDA (i: nat): b ^ (-i))")
                                                (("1" (REPLACE -1 :HIDE? T)
                                                  (("1" (REPLACE -1 :HIDE? T)
                                                    (("1"
                                                      (CASE
                                                          "(1 - 1 / b) = (b-1)/b")
                                                      (("1"
                                                        (REPLACE -1 :HIDE? T)
                                                        (("1"
                                                          (CASE
                                                              "(b - 1) * (((1 / b) ^ (k + 1) - (1 / b) ^ (p - 1 + 1)) / ((b - 1) / b)) = b * (((1 / b) ^ (k + 1) - (1 / b) ^ (p - 1 + 1)))")
                                                          (("1"
                                                            (REPLACE -1 :HIDE?
                                                                     T)
                                                            (("1" (GRIND-REALS)
                                                              (("1"
                                                                (CASE
                                                                    "((1 / b) ^ (1 + k)) * b = b ^ (-k)")
                                                                (("1"
                                                                  (REPLACE -1
                                                                           :HIDE?
                                                                           T)
                                                                  (("1"
                                                                    (CASE
                                                                        "m1(k) * b ^ (-k) + b ^ (-k) = (m1(k)+1) * b ^ (-k)")
                                                                    (("1"
                                                                      (REPLACE
                                                                       -1
                                                                       :HIDE?
                                                                       T)
                                                                      (("1"
                                                                        (CASE
                                                                            "m1(k)+1 <= m2(k)")
                                                                        (("1"
                                                                          (MULT-BY
                                                                           -1
                                                                           "b ^ (-k)")
                                                                          (("1"
                                                                            (ASSERT)
                                                                            NIL
                                                                            NIL))
                                                                          NIL)
                                                                         ("2"
                                                                          (ASSERT)
                                                                          NIL
                                                                          NIL))
                                                                        NIL))
                                                                      NIL)
                                                                     ("2"
                                                                      (ASSERT)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL)
                                                                 ("2"
                                                                  (REWRITE
                                                                   "div_expt"
                                                                   1)
                                                                  (("2"
                                                                    (ASSERT)
                                                                    (("2"
                                                                      (REWRITE
                                                                       "expt_plus"
                                                                       1 :DIR
                                                                       RL)
                                                                      (("2"
                                                                        (REWRITE
                                                                         "expt_1i"
                                                                         1)
                                                                        (("2"
                                                                          (CASE
                                                                              "1 + (-k) + k = 1")
                                                                          (("1"
                                                                            (REPLACE
                                                                             -1
                                                                             :HIDE?
                                                                             T)
                                                                            (("1"
                                                                              (USE
                                                                               "expt_x1")
                                                                              (("1"
                                                                                (ASSERT)
                                                                                NIL
                                                                                NIL))
                                                                              NIL))
                                                                            NIL)
                                                                           ("2"
                                                                            (ASSERT)
                                                                            NIL
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL)
                                                           ("2"
                                                            (NAME-REPLACE "bla"
                                                             "((1 / b) ^ (k + 1) - (1 / b) ^ (p - 1 + 1))")
                                                            (("2"
                                                              (NAME-REPLACE
                                                               "ble" "b-1")
                                                              (("2"
                                                                (GRIND-REALS)
                                                                NIL NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL)
                                                       ("2" (ASSERT) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2"
                                                  (CASE
                                                      "FORALL(n:nat,m:upfrom(n) | m < p) : sigma(n, m, LAMBDA (k: nat): (1 / b) ^ k) = sigma(n, m, LAMBDA (i: nat): b ^ (-i))")
                                                  (("1" (INST? -1)
                                                    (("1" (ASSERT) NIL NIL))
                                                    NIL)
                                                   ("2" (HIDE-ALL-BUT 1)
                                                    (("2" (SKEEP :PREDS? T)
                                                      (("2"
                                                        (GENERALIZE "m" "m_"
                                                         "nat" (1 -2 -3))
                                                        (("1"
                                                          (WITH-TCCS
                                                           (INDUCT "m_"))
                                                          (("1" (FLATTEN)
                                                            (("1"
                                                              (EXPAND "sigma")
                                                              (("1" (ASSERT)
                                                                (("1"
                                                                  (EXPAND
                                                                   "sigma")
                                                                  (("1"
                                                                    (ASSERT)
                                                                    (("1"
                                                                      (USE
                                                                       "expt_x0")
                                                                      (("1"
                                                                        (REPLACE
                                                                         -1
                                                                         :HIDE?
                                                                         T)
                                                                        (("1"
                                                                          (USE
                                                                           "expt_x0")
                                                                          (("1"
                                                                            (REPLACE
                                                                             -1
                                                                             :HIDE?
                                                                             T)
                                                                            (("1"
                                                                              (PROPAX)
                                                                              NIL
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL)
                                                           ("2" (SKEEP)
                                                            (("2"
                                                              (EXPAND "sigma"
                                                                      1)
                                                              (("2" (LIFT-IF 1)
                                                                (("2" (SPLIT 1)
                                                                  (("1"
                                                                    (PROPAX)
                                                                    NIL NIL)
                                                                   ("2"
                                                                    (FLATTEN)
                                                                    (("2"
                                                                      (ASSERT)
                                                                      (("2"
                                                                        (SPLIT
                                                                         -1)
                                                                        (("1"
                                                                          (REPLACE
                                                                           -1
                                                                           :HIDE?
                                                                           T)
                                                                          (("1"
                                                                            (ASSERT)
                                                                            (("1"
                                                                              (REWRITE
                                                                               "expt_inverse")
                                                                              (("1"
                                                                                (REWRITE
                                                                                 "div_expt"
                                                                                 2)
                                                                                (("1"
                                                                                  (REWRITE
                                                                                   "expt_1i"
                                                                                   2)
                                                                                  NIL
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL)
                                                                         ("2"
                                                                          (CASE
                                                                              "j=n-1")
                                                                          (("1"
                                                                            (REPLACE
                                                                             -1
                                                                             :HIDE?
                                                                             T)
                                                                            (("1"
                                                                              (EXPAND
                                                                               "sigma")
                                                                              (("1"
                                                                                (ASSERT)
                                                                                (("1"
                                                                                  (REWRITE
                                                                                   "expt_inverse")
                                                                                  (("1"
                                                                                    (REWRITE
                                                                                     "div_expt"
                                                                                     3)
                                                                                    (("1"
                                                                                      (REWRITE
                                                                                       "expt_1i"
                                                                                       3)
                                                                                      NIL
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL)
                                                                           ("2"
                                                                            (ASSERT)
                                                                            NIL
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL)
                                                         ("2" (TYPEPRED "b")
                                                          (("2" (ASSERT) NIL
                                                            NIL))
                                                          NIL)
                                                         ("3" (TYPEPRED "b")
                                                          (("3" (ASSERT) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("3" (TYPEPRED "b")
                                                    (("3" (ASSERT) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (ASSERT) NIL NIL)
                                               ("3" (ASSERT) NIL NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (HIDE -1 2)
                                  (("2"
                                    (CASE
                                        "0 <= sigma(k + 1, p - 1, LAMBDA (i: nat): IF i<p THEN m2(i) * b ^ (-i) ELSE 0 ENDIF)")
                                    (("1" (ASSERT) NIL NIL)
                                     ("2" (USE "sigma_Fnnr")
                                      (("1" (EXPAND ">=")
                                        (("1" (ASSERT) NIL NIL)) NIL)
                                       ("2" (ASSERT) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (HIDE 2)
                                (("2"
                                  (CASE
                                      "sigma(k + 1, p - 1, LAMBDA (i: nat): IF i<p THEN m1(i) * b ^ (-i) ELSE 0 ENDIF) <= (b - 1) * sigma(k + 1, p - 1, LAMBDA (i: nat): b ^ (-i))")
                                  (("1" (ASSERT) NIL NIL)
                                   ("2" (HIDE 2)
                                    (("2" (USE "sigma_scal[nat]")
                                      (("1" (REPLACE -1 :HIDE? T :DIR RL)
                                        (("1" (WITH-TCCS (USE "sigma_le[nat]"))
                                          (("1" (ASSERT)
                                            (("1" (HIDE 2)
                                              (("1" (SKEEP)
                                                (("1" (CASE "m1(n) <= b-1")
                                                  (("1" (MULT-BY -1 "b ^ (-n)")
                                                    (("1" (ASSERT) NIL NIL))
                                                    NIL)
                                                   ("2" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (TYPEPRED "b")
                                        (("2" (ASSERT) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("3" (TYPEPRED "b") (("3" (ASSERT) NIL NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (HIDE 3)
                        (("2" (WITH-TCCS (USE "sigma_eq[nat]"))
                          (("2" (SPLIT -1)
                            (("1" (PROPAX) NIL NIL)
                             ("2" (SKEEP 1)
                              (("2" (INST -2 "n") (("2" (ASSERT) NIL NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("3" (TYPEPRED "b") (("3" (ASSERT) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (HIDE 3)
                  (("2" (LEMMA "sigma_split[nat]")
                    (("2"
                      (INST -1
                       "LAMBDA (i: nat): IF i<p THEN m2(i) * b ^ (-i) ELSE 0 ENDIF"
                       "p-1" "0" "k-1")
                      (("1" (HIDE -2)
                        (("1" (ASSERT)
                          (("1" (REPLACE -1 :HIDE? T)
                            (("1" (ASSERT)
                              (("1" (LEMMA "sigma_split[nat]")
                                (("1"
                                  (INST -1
                                   "LAMBDA (i: nat): IF i<p THEN m2(i) * b ^ (-i) ELSE 0 ENDIF"
                                   "p-1" "k" "k")
                                  (("1" (ASSERT)
                                    (("1" (REPLACE -1 :HIDE? T)
                                      (("1" (ASSERT)
                                        (("1" (EXPAND "sigma")
                                          (("1" (EXPAND "sigma")
                                            (("1" (PROPAX) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (TYPEPRED "b") (("2" (ASSERT) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (HIDE 3)
                (("2" (LEMMA "sigma_split[nat]")
                  (("2"
                    (INST -1
                     "LAMBDA (i: nat): IF i<p THEN m1(i) * b ^ (-i) ELSE 0 ENDIF"
                     "p-1" "0" "k-1")
                    (("1" (ASSERT)
                      (("1" (REPLACE -1 :HIDE? T)
                        (("1" (ASSERT)
                          (("1" (LEMMA "sigma_split[nat]")
                            (("1"
                              (INST -1
                               "LAMBDA (i: nat): IF i<p THEN m1(i) * b ^ (-i) ELSE 0 ENDIF"
                               "p-1" "k" "k")
                              (("1" (ASSERT)
                                (("1" (REPLACE -1 :HIDE? T)
                                  (("1" (ASSERT)
                                    (("1" (EXPAND "sigma")
                                      (("1" (EXPAND "sigma")
                                        (("1" (PROPAX) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (TYPEPRED "b") (("2" (ASSERT) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|significand| TYPE-EQ-DECL NIL |ieee754_domain| NIL)
    (|b| FORMAL-CONST-DECL "above(1)" |ieee754_domain| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|p| FORMAL-CONST-DECL "above(1)" |ieee754_domain| NIL)
    (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL) (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|sigma_rat| APPLICATION-JUDGEMENT "rational" |ieee754_domain| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|nnrat_times_nnrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat"
     |rationals| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|T_low| TYPE-EQ-DECL NIL |sigma| |reals|)
    (|T_high| TYPE-EQ-DECL NIL |sigma| |reals|)
    (|sigma| DEF-DECL "real" |sigma| |reals|)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|rat_plus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|sigma_split| FORMULA-DECL NIL |sigma| |reals|)
    (|posrat_exp| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL)
    (|sigma_Fnnr| FORMULA-DECL NIL |sigma| |reals|)
    (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|sigma_nnreal| APPLICATION-JUDGEMENT "nnreal" |ieee754_domain| NIL)
    (|nnrat_plus_nnrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals|
     NIL)
    (|sigma_geometric| FORMULA-DECL NIL |sigma_nat| |reals|)
    (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|k| SKOLEM-CONST-DECL "below(p)" |ieee754_domain| NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|n| SKOLEM-CONST-DECL "nat" |ieee754_domain| NIL)
    (|expt_x0| FORMULA-DECL NIL |exponentiation| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|expt_inverse| FORMULA-DECL NIL |exponentiation| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|posrat_times_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|nnrat_plus_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|div_expt| FORMULA-DECL NIL |exponentiation| NIL)
    (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL)
    (|expt_plus| FORMULA-DECL NIL |exponentiation| NIL)
    (|expt_x1| FORMULA-DECL NIL |exponentiation| NIL)
    (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|minus_i16_u16| APPLICATION-JUDGEMENT "int32" |integertypes| NIL)
    (|minus_i32_u32| APPLICATION-JUDGEMENT "int64" |integertypes| NIL)
    (|minus_u8_u8| APPLICATION-JUDGEMENT "int16" |integertypes| NIL)
    (|expt_1i| FORMULA-DECL NIL |exponentiation| NIL)
    (|times_div2| FORMULA-DECL NIL |real_props| NIL)
    (|div_cancel3| FORMULA-DECL NIL |real_props| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|both_sides_times_pos_le1_imp| FORMULA-DECL NIL |extra_real_props| NIL)
    (|posrat_plus_nnrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|both_sides_times_pos_lt1| FORMULA-DECL NIL |real_props| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|rat_minus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|sigma_scal| FORMULA-DECL NIL |sigma| |reals|)
    (|sigma_le| FORMULA-DECL NIL |sigma| |reals|)
    (|subrange| TYPE-EQ-DECL NIL |integers| NIL)
    (|sigma_eq| FORMULA-DECL NIL |sigma| |reals|)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|significand_lt_first_discrepancy| FORMULA-DECL NIL |ieee754_domain| NIL))
   SHOSTAK)
  (|significand_le_value_le-1| |nil| 3764945183
   ("" (SKEEP)
    (("" (CASE "m1 = m2")
      (("1" (REPLACE -1 :HIDE? T)
        (("1" (HIDE -1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)
       ("2" (USE "significand_lt_first_discrepancy")
        (("2" (ASSERT)
          (("2" (SKEEP :PREDS? T)
            (("2"
              (WITH-TCCS
               (CASE
                   "sigma(0, p - 1, LAMBDA (i: nat): IF i<p THEN m1(i) * b ^ (-i) ELSE 0 ENDIF) = sigma(0, k - 1, LAMBDA (i: nat): IF i<p THEN m1(i) * b ^ (-i) ELSE 0 ENDIF) + m1(k) * b^(-k) + sigma(k+1, p - 1, LAMBDA (i: nat): IF i<p THEN m1(i) * b ^ (-i) ELSE 0 ENDIF)"))
              (("1"
                (WITH-TCCS
                 (CASE
                     "sigma(0, p - 1, LAMBDA (i: nat): IF i<p THEN m2(i) * b ^ (-i) ELSE 0 ENDIF) =
                               sigma(0, k - 1, LAMBDA (i: nat): IF i<p THEN m2(i) * b ^ (-i) ELSE 0 ENDIF) +
                                m2(k) * b ^ (-k)
                                + sigma(k + 1, p - 1, LAMBDA (i: nat): IF i<p THEN m2(i) * b ^ (-i) ELSE 0 ENDIF)"))
                (("1" (REPLACE -1 :HIDE? T)
                  (("1" (REPLACE -1 :HIDE? T)
                    (("1"
                      (CASE
                          "sigma(0, k - 1, LAMBDA (i: nat): IF i<p THEN m1(i) * b ^ (-i)  ELSE 0 ENDIF) = sigma(0, k - 1, LAMBDA (i: nat): IF i<p THEN m2(i) * b ^ (-i)  ELSE 0 ENDIF)")
                      (("1" (REPLACE -1 :HIDE? T)
                        (("1"
                          (CASE "m1(k) * b ^ (-k)
                                     + sigma(k + 1, p - 1, LAMBDA (i: nat):  IF i<p THEN m1(i) * b ^ (-i) ELSE 0 ENDIF)
                                     <=
                                      m2(k) * b ^ (-k)
                                      + sigma(k + 1, p - 1, LAMBDA (i: nat): IF i<p THEN m2(i) * b ^ (-i) ELSE 0 ENDIF)")
                          (("1" (ASSERT) NIL NIL)
                           ("2" (HIDE 3)
                            (("2"
                              (CASE "m1(k) * b ^ (-k) +
                                         sigma(k + 1, p - 1, LAMBDA (i: nat): IF i<p THEN m1(i) * b ^ (-i) ELSE 0 ENDIF) <= m1(k) * b ^ (-k) + (b-1) *
                                         sigma(k + 1, p - 1, LAMBDA (i: nat): b ^ (-i))")
                              (("1"
                                (CASE "m2(k) * b ^ (-k)  <= m2(k) * b ^ (-k) +
                                              sigma(k + 1, p - 1, LAMBDA (i: nat): IF i<p THEN m2(i) * b ^ (-i) ELSE 0 ENDIF)")
                                (("1"
                                  (CASE " m1(k) * b ^ (-k) +
                                                  (b - 1) * sigma(k + 1, p - 1, LAMBDA (i: nat): b ^ (-i)) <= m2(k) * b ^ (-k)")
                                  (("1" (ASSERT) NIL NIL)
                                   ("2" (HIDE 2)
                                    (("2" (HIDE -1 -2)
                                      (("2" (CASE "k+1 > p-1")
                                        (("1" (EXPAND "sigma")
                                          (("1" (ASSERT)
                                            (("1" (MULT-BY -4 "b ^ (-k)")
                                              (("1" (ASSERT) NIL NIL)) NIL))
                                            NIL))
                                          NIL)
                                         ("2" (LEMMA "sigma_geometric")
                                          (("2" (INST -1 "p-1" "k+1" "1/b")
                                            (("2" (SPLIT -1)
                                              (("1"
                                                (CASE
                                                    "sigma(k + 1, p - 1, LAMBDA (k: nat): (1 / b) ^ k) = sigma(k + 1, p - 1, LAMBDA (i: nat): b ^ (-i))")
                                                (("1" (REPLACE -1 :HIDE? T)
                                                  (("1" (REPLACE -1 :HIDE? T)
                                                    (("1"
                                                      (CASE
                                                          "(1 - 1 / b) = (b-1)/b")
                                                      (("1"
                                                        (REPLACE -1 :HIDE? T)
                                                        (("1"
                                                          (CASE "(b - 1) *
                                       (((1 / b) ^ (k + 1) - (1 / b) ^ (p - 1 + 1)) / ((b - 1) / b)) = b *
                                       (((1 / b) ^ (k + 1) - (1 / b) ^ (p - 1 + 1)))")
                                                          (("1"
                                                            (REPLACE -1 :HIDE?
                                                                     T)
                                                            (("1" (GRIND-REALS)
                                                              (("1"
                                                                (CASE
                                                                    "((1 / b) ^ (1 + k)) * b = b ^ (-k)")
                                                                (("1"
                                                                  (REPLACE -1
                                                                           :HIDE?
                                                                           T)
                                                                  (("1"
                                                                    (CASE
                                                                        "m1(k) * b ^ (-k) + b ^ (-k) = (m1(k)+1) * b ^ (-k)")
                                                                    (("1"
                                                                      (REPLACE
                                                                       -1
                                                                       :HIDE?
                                                                       T)
                                                                      (("1"
                                                                        (CASE
                                                                            "m1(k)+1 <= m2(k)")
                                                                        (("1"
                                                                          (MULT-BY
                                                                           -1
                                                                           "b ^ (-k)")
                                                                          (("1"
                                                                            (ASSERT)
                                                                            NIL
                                                                            NIL))
                                                                          NIL)
                                                                         ("2"
                                                                          (ASSERT)
                                                                          NIL
                                                                          NIL))
                                                                        NIL))
                                                                      NIL)
                                                                     ("2"
                                                                      (ASSERT)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL)
                                                                 ("2"
                                                                  (REWRITE
                                                                   "div_expt"
                                                                   1)
                                                                  (("2"
                                                                    (ASSERT)
                                                                    (("2"
                                                                      (REWRITE
                                                                       "expt_plus"
                                                                       1 :DIR
                                                                       RL)
                                                                      (("2"
                                                                        (REWRITE
                                                                         "expt_1i"
                                                                         1)
                                                                        (("2"
                                                                          (CASE
                                                                              "1 + (-k) + k = 1")
                                                                          (("1"
                                                                            (REPLACE
                                                                             -1
                                                                             :HIDE?
                                                                             T)
                                                                            (("1"
                                                                              (USE
                                                                               "expt_x1")
                                                                              (("1"
                                                                                (ASSERT)
                                                                                NIL
                                                                                NIL))
                                                                              NIL))
                                                                            NIL)
                                                                           ("2"
                                                                            (ASSERT)
                                                                            NIL
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL)
                                                           ("2"
                                                            (NAME-REPLACE "bla"
                                                             "((1 / b) ^ (k + 1) - (1 / b) ^ (p - 1 + 1))")
                                                            (("2"
                                                              (NAME-REPLACE
                                                               "ble" "b-1")
                                                              (("2"
                                                                (GRIND-REALS)
                                                                NIL NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL)
                                                       ("2" (ASSERT) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2"
                                                  (CASE
                                                      "FORALL(n:nat,m:upfrom(n) | m < p) : sigma(n, m, LAMBDA (k: nat): (1 / b) ^ k) = sigma(n, m, LAMBDA (i: nat): b ^ (-i))")
                                                  (("1" (INST? -1)
                                                    (("1" (ASSERT) NIL NIL))
                                                    NIL)
                                                   ("2" (HIDE-ALL-BUT 1)
                                                    (("2" (SKEEP :PREDS? T)
                                                      (("2"
                                                        (GENERALIZE "m" "m_"
                                                         "nat" (1 -2 -3))
                                                        (("1"
                                                          (WITH-TCCS
                                                           (INDUCT "m_"))
                                                          (("1" (FLATTEN)
                                                            (("1"
                                                              (EXPAND "sigma")
                                                              (("1" (ASSERT)
                                                                (("1"
                                                                  (EXPAND
                                                                   "sigma")
                                                                  (("1"
                                                                    (ASSERT)
                                                                    (("1"
                                                                      (USE
                                                                       "expt_x0")
                                                                      (("1"
                                                                        (REPLACE
                                                                         -1
                                                                         :HIDE?
                                                                         T)
                                                                        (("1"
                                                                          (USE
                                                                           "expt_x0")
                                                                          (("1"
                                                                            (REPLACE
                                                                             -1
                                                                             :HIDE?
                                                                             T)
                                                                            (("1"
                                                                              (PROPAX)
                                                                              NIL
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL)
                                                           ("2" (SKEEP)
                                                            (("2"
                                                              (EXPAND "sigma"
                                                                      1)
                                                              (("2" (LIFT-IF 1)
                                                                (("2" (SPLIT 1)
                                                                  (("1"
                                                                    (PROPAX)
                                                                    NIL NIL)
                                                                   ("2"
                                                                    (FLATTEN)
                                                                    (("2"
                                                                      (ASSERT)
                                                                      (("2"
                                                                        (SPLIT
                                                                         -1)
                                                                        (("1"
                                                                          (REPLACE
                                                                           -1
                                                                           :HIDE?
                                                                           T)
                                                                          (("1"
                                                                            (ASSERT)
                                                                            (("1"
                                                                              (REWRITE
                                                                               "expt_inverse")
                                                                              (("1"
                                                                                (REWRITE
                                                                                 "div_expt"
                                                                                 2)
                                                                                (("1"
                                                                                  (REWRITE
                                                                                   "expt_1i"
                                                                                   2)
                                                                                  NIL
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL)
                                                                         ("2"
                                                                          (CASE
                                                                              "j=n-1")
                                                                          (("1"
                                                                            (REPLACE
                                                                             -1
                                                                             :HIDE?
                                                                             T)
                                                                            (("1"
                                                                              (EXPAND
                                                                               "sigma")
                                                                              (("1"
                                                                                (ASSERT)
                                                                                (("1"
                                                                                  (REWRITE
                                                                                   "expt_inverse")
                                                                                  (("1"
                                                                                    (REWRITE
                                                                                     "div_expt"
                                                                                     3)
                                                                                    (("1"
                                                                                      (REWRITE
                                                                                       "expt_1i"
                                                                                       3)
                                                                                      NIL
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL)
                                                                           ("2"
                                                                            (ASSERT)
                                                                            NIL
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL)
                                                         ("2" (TYPEPRED "b")
                                                          (("2" (ASSERT) NIL
                                                            NIL))
                                                          NIL)
                                                         ("3" (TYPEPRED "b")
                                                          (("3" (ASSERT) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("3" (TYPEPRED "b")
                                                    (("3" (ASSERT) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (ASSERT) NIL NIL)
                                               ("3" (ASSERT) NIL NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (HIDE -1 2)
                                  (("2"
                                    (CASE
                                        "0 <= sigma(k + 1, p - 1, LAMBDA (i: nat): IF i<p THEN m2(i) * b ^ (-i) ELSE 0 ENDIF)")
                                    (("1" (ASSERT) NIL NIL)
                                     ("2" (USE "sigma_Fnnr")
                                      (("1" (EXPAND ">=")
                                        (("1" (ASSERT) NIL NIL)) NIL)
                                       ("2" (ASSERT) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (HIDE 2)
                                (("2"
                                  (CASE
                                      "sigma(k + 1, p - 1, LAMBDA (i: nat): IF i<p THEN m1(i) * b ^ (-i) ELSE 0 ENDIF) <= (b - 1) * sigma(k + 1, p - 1, LAMBDA (i: nat): b ^ (-i))")
                                  (("1" (ASSERT) NIL NIL)
                                   ("2" (HIDE 2)
                                    (("2" (USE "sigma_scal[nat]")
                                      (("1" (REPLACE -1 :HIDE? T :DIR RL)
                                        (("1" (WITH-TCCS (USE "sigma_le[nat]"))
                                          (("1" (ASSERT)
                                            (("1" (HIDE 2)
                                              (("1" (SKEEP)
                                                (("1" (CASE "m1(n) <= b-1")
                                                  (("1" (MULT-BY -1 "b ^ (-n)")
                                                    (("1" (ASSERT) NIL NIL))
                                                    NIL)
                                                   ("2" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (TYPEPRED "b")
                                        (("2" (ASSERT) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("3" (TYPEPRED "b") (("3" (ASSERT) NIL NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (HIDE 3)
                        (("2" (WITH-TCCS (USE "sigma_eq[nat]"))
                          (("2" (SPLIT -1)
                            (("1" (PROPAX) NIL NIL)
                             ("2" (SKEEP 1)
                              (("2" (INST -2 "n") (("2" (ASSERT) NIL NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("3" (TYPEPRED "b") (("3" (ASSERT) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (HIDE 3)
                  (("2" (LEMMA "sigma_split[nat]")
                    (("2"
                      (INST -1
                       "LAMBDA (i: nat): IF i<p THEN m2(i) * b ^ (-i) ELSE 0 ENDIF"
                       "p-1" "0" "k-1")
                      (("1" (HIDE -2)
                        (("1" (ASSERT)
                          (("1" (REPLACE -1 :HIDE? T)
                            (("1" (ASSERT)
                              (("1" (LEMMA "sigma_split[nat]")
                                (("1"
                                  (INST -1
                                   "LAMBDA (i: nat): IF i<p THEN m2(i) * b ^ (-i) ELSE 0 ENDIF"
                                   "p-1" "k" "k")
                                  (("1" (ASSERT)
                                    (("1" (REPLACE -1 :HIDE? T)
                                      (("1" (ASSERT)
                                        (("1" (EXPAND "sigma")
                                          (("1" (EXPAND "sigma")
                                            (("1" (PROPAX) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (TYPEPRED "b") (("2" (ASSERT) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (HIDE 3)
                (("2" (LEMMA "sigma_split[nat]")
                  (("2"
                    (INST -1
                     "LAMBDA (i: nat): IF i<p THEN m1(i) * b ^ (-i) ELSE 0 ENDIF"
                     "p-1" "0" "k-1")
                    (("1" (ASSERT)
                      (("1" (REPLACE -1 :HIDE? T)
                        (("1" (ASSERT)
                          (("1" (LEMMA "sigma_split[nat]")
                            (("1"
                              (INST -1
                               "LAMBDA (i: nat): IF i<p THEN m1(i) * b ^ (-i) ELSE 0 ENDIF"
                               "p-1" "k" "k")
                              (("1" (ASSERT)
                                (("1" (REPLACE -1 :HIDE? T)
                                  (("1" (ASSERT)
                                    (("1" (EXPAND "sigma")
                                      (("1" (EXPAND "sigma")
                                        (("1" (PROPAX) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (TYPEPRED "b") (("2" (ASSERT) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL)
               ("3" (ASSERT) NIL NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|sigma| DEF-DECL "real" |sigma| |reals|)
    (|T_high| TYPE-EQ-DECL NIL |sigma| |reals|)
    (|T_low| TYPE-EQ-DECL NIL |sigma| |reals|)
    (|sigma_split| FORMULA-DECL NIL |sigma| |reals|)
    (|sigma_Fnnr| FORMULA-DECL NIL |sigma| |reals|)
    (|sigma_geometric| FORMULA-DECL NIL |sigma_nat| |reals|)
    (|sigma_scal| FORMULA-DECL NIL |sigma| |reals|)
    (|sigma_le| FORMULA-DECL NIL |sigma| |reals|)
    (|sigma_eq| FORMULA-DECL NIL |sigma| |reals|))
   SHOSTAK))
 (|value_monotonicity| 0
  (|value_monotonicity-1| |nil| 3764941524
   ("" (SKEEP :PREDS? T)
    (("" (SPLIT -7)
      (("1" (EXPAND "value")
        (("1" (GRIND-REALS)
          (("1" (CASE "(-1) ^ 0 = 1")
            (("1" (REPLACE -1 :HIDE? T)
              (("1" (CASE "(-1) ^ 1 = -1")
                (("1" (REPLACE -1 :HIDE? T)
                  (("1" (ASSERT)
                    (("1" (INVOKE (NAME-REPLACE "a__" "%1") (!! 1 1 2))
                      (("1" (INVOKE (NAME-REPLACE "b__" "%1") (! 1 2))
                        (("1" (CASE "0<=a__")
                          (("1" (CASE "0<=b__")
                            (("1" (ASSERT) NIL NIL)
                             ("2" (EXPAND "b__")
                              (("2" (USE "sigma_Fnnr") (("2" (ASSERT) NIL NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (EXPAND "a__")
                            (("2" (USE "sigma_Fnnr") (("2" (ASSERT) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (EVAL-FORMULA) NIL NIL))
                NIL))
              NIL)
             ("2" (EVAL-FORMULA) NIL NIL))
            NIL))
          NIL))
        NIL)
       ("2" (FLATTEN)
        (("2" (REPLACE -1 :HIDE? T)
          (("2" (REPLACE -1 :HIDE? T :DIR RL)
            (("2" (EXPAND "value")
              (("2" (CASE "(-1) ^ 0 = 1")
                (("1" (REPLACE -1 :HIDE? T)
                  (("1" (ASSERT)
                    (("1" (INVOKE (NAME-REPLACE "a__" "%1") (! 1 1 1))
                      (("1" (INVOKE (NAME-REPLACE "b__" "%1") (! 1 1 2))
                        (("1" (INVOKE (NAME-REPLACE "c__" "%1") (! 1 2 1))
                          (("1" (INVOKE (NAME-REPLACE "d__" "%1") (! 1 2 2))
                            (("1" (CASE "a__ <= c__")
                              (("1" (CASE "b__ <= d__")
                                (("1" (CASE "a__ * b__ <= c__* b__ ")
                                  (("1" (CASE "c__* b__ <= c__ * d__")
                                    (("1" (ASSERT) NIL NIL)
                                     ("2" (GRIND-REALS) NIL NIL))
                                    NIL)
                                   ("2" (HIDE-ALL-BUT (1 -2))
                                    (("2" (USE "both_sides_times_pos_le1_imp")
                                      (("1" (ASSERT) NIL NIL)
                                       ("2" (EXPAND "b__")
                                        (("2" (HIDE-ALL-BUT 1)
                                          (("2" (EXPAND ">=")
                                            (("2" (USE "sigma_Fnnr")
                                              (("2" (EXPAND ">=")
                                                (("2" (PROPAX) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (HIDE 2)
                                  (("2" (EXPAND "b__")
                                    (("2" (EXPAND "d__")
                                      (("2" (USE "significand_le_value_le")
                                        (("2" (ASSERT) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (HIDE 2)
                                (("2" (EXPAND "a__")
                                  (("2" (EXPAND "c__")
                                    (("2" (REWRITE "both_sides_expt_gt1_le")
                                      NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (EVAL-FORMULA) NIL NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("3" (FLATTEN)
        (("3" (REPLACE -2 :HIDE? T)
          (("3" (REPLACE -1 :HIDE? T)
            (("3" (EXPAND "value")
              (("3" (CASE "(-1) ^ 1 = -1")
                (("1" (REPLACE -1 :HIDE? T)
                  (("1" (ASSERT)
                    (("1" (MULT-BY 1 "-1" "-")
                      (("1" (SPLIT 1)
                        (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)
                         ("2" (FLATTEN)
                          (("2" (ASSERT)
                            (("2" (INVOKE (NAME-REPLACE "a__" "%1") (! 2 1 1))
                              (("2"
                                (INVOKE (NAME-REPLACE "b__" "%1") (! 2 1 2))
                                (("2"
                                  (INVOKE (NAME-REPLACE "c__" "%1") (! 2 2 1))
                                  (("2"
                                    (INVOKE (NAME-REPLACE "d__" "%1")
                                     (! 2 2 2))
                                    (("2" (CASE "a__ <= c__")
                                      (("1" (CASE "b__ <= d__")
                                        (("1" (CASE "a__ * b__ <= c__* b__ ")
                                          (("1" (CASE "c__* b__ <= c__ * d__")
                                            (("1" (ASSERT) NIL NIL)
                                             ("2" (GRIND-REALS) NIL NIL))
                                            NIL)
                                           ("2" (HIDE-ALL-BUT (1 -2))
                                            (("2"
                                              (USE
                                               "both_sides_times_pos_le1_imp")
                                              (("1" (ASSERT) NIL NIL)
                                               ("2" (EXPAND "b__")
                                                (("2" (USE "sigma_Fnnr") NIL
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (HIDE 2 3)
                                          (("2" (EXPAND "b__")
                                            (("2" (EXPAND "d__")
                                              (("2"
                                                (USE "significand_le_value_le")
                                                (("2" (ASSERT) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (EXPAND "a__")
                                        (("2" (EXPAND "c__")
                                          (("2"
                                            (REWRITE "both_sides_expt_gt1_le")
                                            NIL NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (HIDE-ALL-BUT 1)
                  (("2" (EXPAND "^")
                    (("2" (EXPAND "expt")
                      (("2" (EXPAND "expt") (("2" (PROPAX) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((TRUE CONST-DECL "bool" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|int_exp| APPLICATION-JUDGEMENT "int" |exponentiation| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|nzrat_times_nzrat_is_nzrat| APPLICATION-JUDGEMENT "nzrat" |rationals|
     NIL)
    (|rat_exp| APPLICATION-JUDGEMENT "rat" |exponentiation| NIL)
    (|nzreal_exp| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL)
    (|posrat_exp| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL)
    (|sigma_rat| APPLICATION-JUDGEMENT "rational" |ieee754_domain| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|posrat_times_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|nnrat_times_nnrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat"
     |rationals| NIL)
    (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|significand| TYPE-EQ-DECL NIL |ieee754_domain| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|p| FORMAL-CONST-DECL "above(1)" |ieee754_domain| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|sigma| DEF-DECL "real" |sigma| |reals|)
    (|T_high| TYPE-EQ-DECL NIL |sigma| |reals|)
    (|T_low| TYPE-EQ-DECL NIL |sigma| |reals|)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|exponent| TYPE-EQ-DECL NIL |ieee754_domain| NIL)
    (|emax| FORMAL-CONST-DECL "above(1)" |ieee754_domain| NIL)
    (|emin| CONST-DECL "negint" |ieee754_domain| NIL)
    (|negint| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nonpos_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|b| FORMAL-CONST-DECL "above(1)" |ieee754_domain| NIL)
    (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|b__| SKOLEM-CONST-DECL "rat" |ieee754_domain| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|pos_times_le| FORMULA-DECL NIL |real_props| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|sigma_Fnnr| FORMULA-DECL NIL |sigma| |reals|)
    (|a__| SKOLEM-CONST-DECL "rat" |ieee754_domain| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (>= CONST-DECL "bool" |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|value| CONST-DECL "real" |ieee754_domain| NIL)
    (|posrat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL)
    (|nonneg_rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL)
    (|d__| SKOLEM-CONST-DECL "rational" |ieee754_domain| NIL)
    (|significand_le_value_le| FORMULA-DECL NIL |ieee754_domain| NIL)
    (|both_sides_times_pos_le2| FORMULA-DECL NIL |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|both_sides_times_pos_le1_imp| FORMULA-DECL NIL |extra_real_props| NIL)
    (|b__| SKOLEM-CONST-DECL "rational" |ieee754_domain| NIL)
    (|a__| SKOLEM-CONST-DECL "posrat" |ieee754_domain| NIL)
    (|both_sides_expt_gt1_le| FORMULA-DECL NIL |exponentiation| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|c__| SKOLEM-CONST-DECL "posrat" |ieee754_domain| NIL)
    (|expt| DEF-DECL "real" |exponentiation| NIL)
    (|both_sides_times_pos_neg_le1| FORMULA-DECL NIL |extra_real_props| NIL)
    (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|d__| SKOLEM-CONST-DECL "rational" |ieee754_domain| NIL)
    (|b__| SKOLEM-CONST-DECL "rational" |ieee754_domain| NIL)
    (|c__| SKOLEM-CONST-DECL "posrat" |ieee754_domain| NIL)
    (|a__| SKOLEM-CONST-DECL "posrat" |ieee754_domain| NIL))
   SHOSTAK))
 (|exactly_representable_symm_0| 0
  (|exactly_representable_symm_0-1| |nil| 3764933125
   ("" (SKEEP)
    (("" (EXPAND "exactly_representable?")
      (("" (IFF)
        (("" (SPLIT 1)
          (("1" (FLATTEN)
            (("1" (SKEEP :PREDS? T)
              (("1" (SPLIT -1)
                (("1" (INST 1 "1" "e" "m")
                  (("1" (EXPAND "value")
                    (("1" (REPLACE -1 :HIDE? T)
                      (("1" (CASE "(-1) ^ 0 = 1")
                        (("1" (REPLACE -1 :HIDE? T)
                          (("1" (CASE "(-1) ^ 1 = -1")
                            (("1" (REPLACE -1 :HIDE? T)
                              (("1" (ASSERT) NIL NIL)) NIL)
                             ("2" (EVAL-FORMULA) NIL NIL))
                            NIL))
                          NIL)
                         ("2" (EVAL-FORMULA) NIL NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (INST 1 "0" "e" "m")
                  (("2" (EXPAND "value")
                    (("2" (REPLACE -1 :HIDE? T)
                      (("2" (CASE "(-1) ^ 0 = 1")
                        (("1" (CASE "(-1) ^ 1 = -1")
                          (("1" (REPLACE -1 :HIDE? T)
                            (("1" (REPLACE -1 :HIDE? T)
                              (("1" (ASSERT) NIL NIL)) NIL))
                            NIL)
                           ("2" (EVAL-FORMULA) NIL NIL))
                          NIL)
                         ("2" (EVAL-FORMULA) NIL NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (FLATTEN)
            (("2" (SKEEP :PREDS? T)
              (("2" (SPLIT -1)
                (("1" (REPLACE -1 :HIDE? T)
                  (("1" (INST 1 "1" "e" "m")
                    (("1" (EXPAND "value")
                      (("1" (CASE "(-1) ^ 1 = -1")
                        (("1" (CASE "(-1) ^ 0 = 1")
                          (("1" (REPLACE -1 :HIDE? T)
                            (("1" (REPLACE -1 :HIDE? T)
                              (("1" (ASSERT) NIL NIL)) NIL))
                            NIL)
                           ("2" (EVAL-FORMULA) NIL NIL))
                          NIL)
                         ("2" (EVAL-FORMULA) NIL NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (REPLACE -1 :HIDE? T)
                  (("2" (INST 1 "0" "e" "m")
                    (("2" (EXPAND "value")
                      (("2" (CASE "(-1) ^ 1 = -1")
                        (("1" (CASE "(-1) ^ 0 = 1")
                          (("1" (REPLACE -1 :HIDE? T)
                            (("1" (REPLACE -1 :HIDE? T)
                              (("1" (ASSERT) NIL NIL)) NIL))
                            NIL)
                           ("2" (EVAL-FORMULA) NIL NIL))
                          NIL)
                         ("2" (EVAL-FORMULA) NIL NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|exactly_representable?| CONST-DECL "bool" |ieee754_domain| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|sign| TYPE-EQ-DECL NIL |ieee754_domain| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|nonpos_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|negint| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|emin| CONST-DECL "negint" |ieee754_domain| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|emax| FORMAL-CONST-DECL "above(1)" |ieee754_domain| NIL)
    (|exponent| TYPE-EQ-DECL NIL |ieee754_domain| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|p| FORMAL-CONST-DECL "above(1)" |ieee754_domain| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|b| FORMAL-CONST-DECL "above(1)" |ieee754_domain| NIL)
    (|significand| TYPE-EQ-DECL NIL |ieee754_domain| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|rat_exp| APPLICATION-JUDGEMENT "rat" |exponentiation| NIL)
    (|nzreal_exp| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL)
    (|posrat_exp| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL)
    (|nzrat_times_nzrat_is_nzrat| APPLICATION-JUDGEMENT "nzrat" |rationals|
     NIL)
    (|sigma_rat| APPLICATION-JUDGEMENT "rational" |ieee754_domain| NIL)
    (|int_exp| APPLICATION-JUDGEMENT "int" |exponentiation| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|posrat_times_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (|value| CONST-DECL "real" |ieee754_domain| NIL))
   SHOSTAK))
 (|er_real_value| 0
  (|er_real_value-1| |nil| 3763809763
   ("" (SKEEP)
    (("" (EXPAND "exactly_representable?") (("" (INST?) NIL NIL)) NIL)) NIL)
   ((|exactly_representable?| CONST-DECL "bool" |ieee754_domain| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|sign| TYPE-EQ-DECL NIL |ieee754_domain| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|nonpos_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|negint| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|emin| CONST-DECL "negint" |ieee754_domain| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|emax| FORMAL-CONST-DECL "above(1)" |ieee754_domain| NIL)
    (|exponent| TYPE-EQ-DECL NIL |ieee754_domain| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|p| FORMAL-CONST-DECL "above(1)" |ieee754_domain| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|b| FORMAL-CONST-DECL "above(1)" |ieee754_domain| NIL)
    (|significand| TYPE-EQ-DECL NIL |ieee754_domain| NIL))
   SHOSTAK))
 (|zero_is_er| 0
  (|zero_is_er-1| |nil| 3763809141
   ("" (CASE "0 < b")
    (("1" (EXPAND "exactly_representable?")
      (("1" (INST 1 "0" "1" "LAMBDA(i:below(p)): 0")
        (("1" (EXPAND "value")
          (("1"
            (CASE
                "(LAMBDA (i_1: nat): IF i_1 < p THEN 0 * b ^ (-i_1) ELSE 0 ENDIF) = LAMBDA (i_1: nat): 0 ")
            (("1" (REPLACE -1 :HIDE? T)
              (("1" (REWRITE "sigma_zero") (("1" (GRIND-REALS) NIL NIL)) NIL))
              NIL)
             ("2" (HIDE 2)
              (("2" (APPLY-EXTENSIONALITY)
                (("2" (LIFT-IF)
                  (("2" (SPLIT 1)
                    (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)
                     ("2" (PROPAX) NIL NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("3" (ASSERT) NIL NIL))
            NIL))
          NIL)
         ("2" (TYPEPRED "emax") (("2" (ASSERT) NIL NIL)) NIL))
        NIL))
      NIL)
     ("2" (ASSERT) NIL NIL))
    NIL)
   ((|exactly_representable?| CONST-DECL "bool" |ieee754_domain| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|value| CONST-DECL "real" |ieee754_domain| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|sigma_rat| APPLICATION-JUDGEMENT "rational" |ieee754_domain| NIL)
    (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|posrat_exp| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL)
    (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|sigma_nat| APPLICATION-JUDGEMENT "nat" |ieee754_domain| NIL)
    (|nzint_times_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL)
    (|nzreal_exp| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL)
    (|int_exp| APPLICATION-JUDGEMENT "int" |exponentiation| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|T_low| TYPE-EQ-DECL NIL |sigma| |reals|)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|T_high| TYPE-EQ-DECL NIL |sigma| |reals|)
    (|sigma_zero| FORMULA-DECL NIL |sigma| |reals|)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|nnrat_times_nnrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat"
     |rationals| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|nonpos_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|negint| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|emin| CONST-DECL "negint" |ieee754_domain| NIL)
    (|emax| FORMAL-CONST-DECL "above(1)" |ieee754_domain| NIL)
    (|significand| TYPE-EQ-DECL NIL |ieee754_domain| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|p| FORMAL-CONST-DECL "above(1)" |ieee754_domain| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|exponent| TYPE-EQ-DECL NIL |ieee754_domain| NIL)
    (|sign| TYPE-EQ-DECL NIL |ieee754_domain| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|b| FORMAL-CONST-DECL "above(1)" |ieee754_domain| NIL))
   NIL))
 (|er_real_TCC1| 0
  (|er_real_TCC1-2| |nil| 3763809197 ("" (ASSERT) NIL NIL)
   ((|zero_is_er| FORMULA-DECL NIL |ieee754_domain| NIL)) SHOSTAK
   (|er_real| SUBTYPE "0" "er_real"))
  (|er_real_TCC1-1| |nil| 3763809037 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|er_real| SUBTYPE "0" "er_real")))
 (|er_lb_TCC1| 0
  (|er_lb_TCC1-1| "" 3790102436 ("" (TCC) NIL NIL)
   ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|emin| CONST-DECL "negint" |ieee754_domain| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL))
   SHOSTAK (|er_lb| SUBTYPE "ieee754_domain.emax" "exponent"))
  (|er_lb_TCC2-1| |nil| 3763809037 ("" (TCC)) NIL NIL
   (|er_lb| SUBTYPE "ieee754_domain.emax" "exponent")))
 (|er_lb_TCC2| 0
  (|er_lb_TCC1-1| |nil| 3763809037 ("" (ASSERT) NIL NIL)
   ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|er_real_value| FORMULA-DECL NIL |ieee754_domain| NIL))
   SHOSTAK
   (|er_lb| SUBTYPE
    "ieee754_domain.value(1, ieee754_domain.emax, ieee754_domain.smax)"
    "er_real")))
 (|er_lower_bound| 0
  (|er_lower_bound-1| |nil| 3764934156
   ("" (SKEEP :PREDS? T)
    (("" (EXPAND "exactly_representable?")
      (("" (SKEEP :PREDS? T)
        (("" (REPLACE -4 :HIDE? T :DIR RL)
          (("" (EXPAND "er_lb")
            (("" (USE "value_monotonicity")
              (("" (ASSERT)
                (("" (FLATTEN)
                  (("" (SPLIT -1)
                    (("1" (ASSERT) NIL NIL)
                     ("2" (REPLACE -1 :HIDE? T) (("2" (PROPAX) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|exactly_representable?| CONST-DECL "bool" |ieee754_domain| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|sign| TYPE-EQ-DECL NIL |ieee754_domain| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|nonpos_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|negint| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|emin| CONST-DECL "negint" |ieee754_domain| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|emax| FORMAL-CONST-DECL "above(1)" |ieee754_domain| NIL)
    (|exponent| TYPE-EQ-DECL NIL |ieee754_domain| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|p| FORMAL-CONST-DECL "above(1)" |ieee754_domain| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|b| FORMAL-CONST-DECL "above(1)" |ieee754_domain| NIL)
    (|significand| TYPE-EQ-DECL NIL |ieee754_domain| NIL)
    (|smax| CONST-DECL "significand" |ieee754_domain| NIL)
    (|value_monotonicity| FORMULA-DECL NIL |ieee754_domain| NIL)
    (|smax_is_max| FORMULA-DECL NIL |ieee754_domain| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|er_lb| CONST-DECL "er_real" |ieee754_domain| NIL))
   SHOSTAK))
 (|er_ub_TCC1| 0
  (|er_ub_TCC1-1| |nil| 3763809037 ("" (ASSERT) NIL NIL)
   ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|er_real_value| FORMULA-DECL NIL |ieee754_domain| NIL))
   SHOSTAK
   (|er_ub| SUBTYPE
    "ieee754_domain.value(0, ieee754_domain.emax, ieee754_domain.smax)"
    "er_real")))
 (|er_upper_bound| 0
  (|er_upper_bound-1| |nil| 3764934933
   ("" (SKEEP :PREDS? T)
    (("" (EXPAND "exactly_representable?")
      (("" (SKEEP :PREDS? T)
        (("" (REPLACE -4 :HIDE? T :DIR RL)
          (("" (EXPAND "er_ub")
            (("" (USE "value_monotonicity")
              (("" (ASSERT)
                (("" (FLATTEN)
                  (("" (SPLIT -1)
                    (("1" (REPLACE -1 :HIDE? T) (("1" (PROPAX) NIL NIL)) NIL)
                     ("2" (ASSERT) NIL NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|exactly_representable?| CONST-DECL "bool" |ieee754_domain| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|sign| TYPE-EQ-DECL NIL |ieee754_domain| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|nonpos_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|negint| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|emin| CONST-DECL "negint" |ieee754_domain| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|emax| FORMAL-CONST-DECL "above(1)" |ieee754_domain| NIL)
    (|exponent| TYPE-EQ-DECL NIL |ieee754_domain| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|p| FORMAL-CONST-DECL "above(1)" |ieee754_domain| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|b| FORMAL-CONST-DECL "above(1)" |ieee754_domain| NIL)
    (|significand| TYPE-EQ-DECL NIL |ieee754_domain| NIL)
    (|smax| CONST-DECL "significand" |ieee754_domain| NIL)
    (|value_monotonicity| FORMULA-DECL NIL |ieee754_domain| NIL)
    (|smax_is_max| FORMULA-DECL NIL |ieee754_domain| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|er_ub| CONST-DECL "er_real" |ieee754_domain| NIL))
   SHOSTAK))
 (|er_min_pos_TCC1| 0
  (|er_min_pos_TCC1-1| |nil| 3764932924 ("" (SUBTYPE-TCC) NIL NIL)
   ((|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|emin| CONST-DECL "negint" |ieee754_domain| NIL))
   NIL (|er_min_pos| SUBTYPE "ieee754_domain.emin" "exponent")))
 (|er_min_pos_TCC2| 0
  (|er_min_pos_TCC2-1| |nil| 3764932924 ("" (ASSERT) NIL NIL)
   ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|er_real_value| FORMULA-DECL NIL |ieee754_domain| NIL))
   NIL
   (|er_min_pos| SUBTYPE
    "ieee754_domain.value(0, ieee754_domain.emin, ieee754_domain.smin)"
    "er_real")))
 (|er_min_pos_prop| 0
  (|er_min_pos_prop-1| |nil| 3764935147
   ("" (SKEEP :PREDS? T)
    (("" (EXPAND "exactly_representable?")
      (("" (SKEEP :PREDS? T)
        (("" (REPLACE -4 :HIDE? T :DIR RL)
          (("" (EXPAND "er_min_pos")
            (("" (USE "value_monotonicity")
              (("" (ASSERT)
                (("" (SPLIT -1)
                  (("1" (ASSERT)
                    (("1" (USE "smin_is_min")
                      (("1" (USE "significand_zero_value_zero")
                        (("1" (ASSERT) NIL NIL)) NIL))
                      NIL))
                    NIL)
                   ("2" (REPLACE -1 :HIDE? T)
                    (("2" (EXPAND "value" -)
                      (("2" (CASE "(-1) ^ 1 = -1")
                        (("1" (REPLACE -1 :HIDE? T)
                          (("1"
                            (CASE
                                "0<= b ^ e * sigma(0, p - 1, LAMBDA (i: nat): IF i < p THEN m(i) * b ^ (-i) ELSE 0 ENDIF)")
                            (("1" (ASSERT) NIL NIL)
                             ("2" (HIDE-ALL-BUT 1)
                              (("2" (CASE "0<=b^e")
                                (("1" (USE "sigma_Fnnr")
                                  (("1" (EXPAND ">=")
                                    (("1" (ASSERT)
                                      (("1" (GRIND-REALS) NIL NIL)) NIL))
                                    NIL)
                                   ("2" (TYPEPRED "b") (("2" (ASSERT) NIL NIL))
                                    NIL))
                                  NIL)
                                 ("2" (ASSERT) NIL NIL))
                                NIL))
                              NIL)
                             ("3" (TYPEPRED "b") (("3" (ASSERT) NIL NIL)) NIL))
                            NIL))
                          NIL)
                         ("2" (EXPAND "^")
                          (("2" (EXPAND "expt")
                            (("2" (EXPAND "expt") (("2" (PROPAX) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|exactly_representable?| CONST-DECL "bool" |ieee754_domain| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|sign| TYPE-EQ-DECL NIL |ieee754_domain| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|nonpos_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|negint| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|emin| CONST-DECL "negint" |ieee754_domain| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|emax| FORMAL-CONST-DECL "above(1)" |ieee754_domain| NIL)
    (|exponent| TYPE-EQ-DECL NIL |ieee754_domain| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|p| FORMAL-CONST-DECL "above(1)" |ieee754_domain| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|b| FORMAL-CONST-DECL "above(1)" |ieee754_domain| NIL)
    (|significand| TYPE-EQ-DECL NIL |ieee754_domain| NIL)
    (|smin| CONST-DECL "significand" |ieee754_domain| NIL)
    (|value_monotonicity| FORMULA-DECL NIL |ieee754_domain| NIL)
    (|smin_is_min| FORMULA-DECL NIL |ieee754_domain| NIL)
    (|m| SKOLEM-CONST-DECL "significand" |ieee754_domain| NIL)
    (|szero| CONST-DECL "significand" |ieee754_domain| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|significand_zero_value_zero| FORMULA-DECL NIL |ieee754_domain| NIL)
    (|value| CONST-DECL "real" |ieee754_domain| NIL)
    (|posnat_expt| APPLICATION-JUDGEMENT "posnat" |exponentiation| NIL)
    (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|expt| DEF-DECL "real" |exponentiation| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nzreal_expt| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL)
    (|int_expt| APPLICATION-JUDGEMENT "int" |exponentiation| NIL)
    (|posrat_exp| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL)
    (|nzrat_times_nzrat_is_nzrat| APPLICATION-JUDGEMENT "nzrat" |rationals|
     NIL)
    (|sigma_rat| APPLICATION-JUDGEMENT "rational" |ieee754_domain| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|sigma_Fnnr| FORMULA-DECL NIL |sigma| |reals|)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|pos_times_le| FORMULA-DECL NIL |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|T_low| TYPE-EQ-DECL NIL |sigma| |reals|)
    (|T_high| TYPE-EQ-DECL NIL |sigma| |reals|)
    (|sigma| DEF-DECL "real" |sigma| |reals|)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|nnrat_times_nnrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat"
     |rationals| NIL)
    (|int_exp| APPLICATION-JUDGEMENT "int" |exponentiation| NIL)
    (|nzreal_exp| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|er_min_pos| CONST-DECL "er_real" |ieee754_domain| NIL))
   SHOSTAK))
 (|er_max_neg_TCC1| 0
  (|er_max_neg_TCC1-1| |nil| 3764932924 ("" (ASSERT) NIL NIL)
   ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|er_real_value| FORMULA-DECL NIL |ieee754_domain| NIL))
   NIL
   (|er_max_neg| SUBTYPE
    "ieee754_domain.value(1, ieee754_domain.emin, ieee754_domain.smin)"
    "er_real")))
 (|er_max_neg_prop| 0
  (|er_max_neg_prop-1| |nil| 3764935333
   ("" (SKEEP :PREDS? T)
    (("" (EXPAND "exactly_representable?")
      (("" (SKEEP :PREDS? T)
        (("" (REPLACE -4 :HIDE? T :DIR RL)
          (("" (EXPAND "er_max_neg")
            (("" (USE "value_monotonicity")
              (("" (ASSERT)
                (("" (SPLIT -1)
                  (("1" (REPLACE -1 :HIDE? T)
                    (("1" (EXPAND "value" -)
                      (("1" (CASE "(-1) ^ 0 = 1")
                        (("1" (REPLACE -1 :HIDE? T)
                          (("1" (HIDE-ALL-BUT -3)
                            (("1" (ASSERT)
                              (("1" (USE "sigma_Fnnr")
                                (("1" (GRIND-REALS) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (EXPAND "^")
                          (("2" (EXPAND "expt") (("2" (PROPAX) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (ASSERT)
                    (("2" (USE "smin_is_min")
                      (("2" (USE "significand_zero_value_zero")
                        (("2" (ASSERT) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|exactly_representable?| CONST-DECL "bool" |ieee754_domain| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|sign| TYPE-EQ-DECL NIL |ieee754_domain| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|nonpos_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|negint| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|emin| CONST-DECL "negint" |ieee754_domain| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|emax| FORMAL-CONST-DECL "above(1)" |ieee754_domain| NIL)
    (|exponent| TYPE-EQ-DECL NIL |ieee754_domain| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|p| FORMAL-CONST-DECL "above(1)" |ieee754_domain| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|b| FORMAL-CONST-DECL "above(1)" |ieee754_domain| NIL)
    (|significand| TYPE-EQ-DECL NIL |ieee754_domain| NIL)
    (|smin| CONST-DECL "significand" |ieee754_domain| NIL)
    (|value_monotonicity| FORMULA-DECL NIL |ieee754_domain| NIL)
    (|value| CONST-DECL "real" |ieee754_domain| NIL)
    (|posnat_expt| APPLICATION-JUDGEMENT "posnat" |exponentiation| NIL)
    (|expt| DEF-DECL "real" |exponentiation| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|posrat_exp| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL)
    (|nzrat_times_nzrat_is_nzrat| APPLICATION-JUDGEMENT "nzrat" |rationals|
     NIL)
    (|sigma_rat| APPLICATION-JUDGEMENT "rational" |ieee754_domain| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|posrat_times_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|neg_times_lt| FORMULA-DECL NIL |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nnrat_times_nnrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat"
     |rationals| NIL)
    (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|T_high| TYPE-EQ-DECL NIL |sigma| |reals|)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|T_low| TYPE-EQ-DECL NIL |sigma| |reals|)
    (|sigma_Fnnr| FORMULA-DECL NIL |sigma| |reals|)
    (|int_exp| APPLICATION-JUDGEMENT "int" |exponentiation| NIL)
    (|nzreal_exp| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (|smin_is_min| FORMULA-DECL NIL |ieee754_domain| NIL)
    (|m| SKOLEM-CONST-DECL "significand" |ieee754_domain| NIL)
    (|szero| CONST-DECL "significand" |ieee754_domain| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|significand_zero_value_zero| FORMULA-DECL NIL |ieee754_domain| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|er_max_neg| CONST-DECL "er_real" |ieee754_domain| NIL))
   SHOSTAK))
 (|r_real_TCC1| 0
  (|r_real_TCC1-1| |nil| 3875778569
   ("" (USE "zero_is_er")
    (("" (EXPAND "representable?")
      (("" (USE "er_lower_bound" ("x" "0"))
        (("" (USE "er_upper_bound" ("x" "0")) (("" (ASSERT) NIL NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|representable?| CONST-DECL "bool" |ieee754_domain| NIL)
    (|er_upper_bound| FORMULA-DECL NIL |ieee754_domain| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|er_real| NONEMPTY-TYPE-EQ-DECL NIL |ieee754_domain| NIL)
    (|exactly_representable?| CONST-DECL "bool" |ieee754_domain| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|er_lower_bound| FORMULA-DECL NIL |ieee754_domain| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|zero_is_er| FORMULA-DECL NIL |ieee754_domain| NIL))
   NIL (|r_real| SUBTYPE "0" "r_real")))
 (|ulp_TCC1| 0
  (|ulp_TCC1-1| |nil| 3875778569 ("" (SUBTYPE-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL))
   NIL (|ulp| SUBTYPE "real_defs.abs(ieee754_domain.x)" "posreal")))
 (|ulp_TCC2| 0
  (|ulp_TCC2-1| |nil| 3875778569 ("" (SUBTYPE-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL))
   NIL (|ulp| SUBTYPE "ieee754_domain.b" "{r | log.r /= 1}")))
 (|ulp_TCC3| 0
  (|ulp_TCC3-1| |nil| 3875778569 ("" (SUBTYPE-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|rat_max| APPLICATION-JUDGEMENT "{s: rat | s >= q AND s >= r}" |real_defs|
     NIL)
    (|int_max| APPLICATION-JUDGEMENT "{k: int | i <= k AND j <= k}" |real_defs|
     NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|emin| CONST-DECL "negint" |ieee754_domain| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL))
   NIL
   (|ulp| SUBTYPE
    "((number_fields.+)((number_fields.-)(ieee754_domain.e_x, ieee754_domain.p), 1))"
    "{i: integers.int | booleans.OR(ieee754_domain.b /= 0, reals.>=(i, 0))}")))
 (|ulp_TCC4| 0
  (|ulp_TCC4-1| |nil| 3907938811 ("" (SUBTYPE-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|posnat_expt| APPLICATION-JUDGEMENT "posnat" |exponentiation| NIL)
    (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|posrat_exp| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|rat_max| APPLICATION-JUDGEMENT "{s: rat | s >= q AND s >= r}" |real_defs|
     NIL)
    (|int_max| APPLICATION-JUDGEMENT "{k: int | i <= k AND j <= k}" |real_defs|
     NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|nnrat_exp| APPLICATION-JUDGEMENT "nnrat" |exponentiation| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|emin| CONST-DECL "negint" |ieee754_domain| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL))
   NIL
   (|ulp| SUBTYPE
    "(exponentiation.^(ieee754_domain.b, ((number_fields.+)((number_fields.-)(ieee754_domain.e_x, ieee754_domain.p), 1))))"
    "posreal")))
 (|ulp_monotone_abs| 0
  (|ulp_monotone_abs-1| |nil| 3909493259
   ("" (SKEEP :PREDS? TRUE)
    (("" (EXPAND "ulp")
      (("" (LIFT-IF)
        (("" (SPLIT)
          (("1" (FLATTEN)
            (("1" (LIFT-IF)
              (("1" (SPLIT)
                (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)
                 ("2" (FLATTEN)
                  (("2" (TYPEPRED "b")
                    (("2" (USE "both_sides_expt_gt1_le")
                      (("2" (REPLACE -1 :HIDE? T) (("2" (FIELD) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (FLATTEN)
            (("2" (LIFT-IF)
              (("2" (SPLIT)
                (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)
                 ("2" (FLATTEN)
                  (("2" (USE "both_sides_expt_gt1_le")
                    (("1" (REPLACE -1)
                      (("1" (HIDE -1)
                        (("1" (ASSERT)
                          (("1" (BOTH-SIDES "-" "1 -p" 2)
                            (("1" (ASSERT)
                              (("1"
                                (CASE
                                    "floor(log(b)(abs(r1))) <= floor(log(b)(abs(r2)))")
                                (("1" (EXPAND "max")
                                  (("1" (LIFT-IF)
                                    (("1" (PROP)
                                      (("1" (LIFT-IF)
                                        (("1" (PROP)
                                          (("1" (ASSERT) NIL NIL)
                                           ("2" (ASSERT) NIL NIL))
                                          NIL))
                                        NIL)
                                       ("2" (LIFT-IF) (("2" (ASSERT) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (HIDE 3 -1 -2)
                                  (("2" (USE "floor_monotone")
                                    (("2" (SPLIT -1)
                                      (("1" (PROPAX) NIL NIL)
                                       ("2" (HIDE 2)
                                        (("2" (USE "both_sides_log_gt1_le")
                                          (("2" (ASSERT) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (TYPEPRED "b") (("2" (PROPAX) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|ulp| CONST-DECL "posreal" |ieee754_domain| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|nonpos_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|negint| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|emin| CONST-DECL "negint" |ieee754_domain| NIL)
    (|p| FORMAL-CONST-DECL "above(1)" |ieee754_domain| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL)
    (|floor| CONST-DECL "{i | i <= x & x < i + 1}" |floor_ceil| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|log| CONST-DECL "real" |log| |power|)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (|both_sides_expt_gt1_le| FORMULA-DECL NIL |exponentiation| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|rat_max| APPLICATION-JUDGEMENT "{s: rat | s >= q AND s >= r}" |real_defs|
     NIL)
    (|int_max| APPLICATION-JUDGEMENT "{k: int | i <= k AND j <= k}" |real_defs|
     NIL)
    (|b| FORMAL-CONST-DECL "above(1)" |ieee754_domain| NIL)
    (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|posrat_exp| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|both_sides_log_gt1_le| FORMULA-DECL NIL |log| |power|)
    (|floor_monotone| FORMULA-DECL NIL |floor_ceiling_ineq| |fault_tolerance|)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|both_sides_minus_le2| FORMULA-DECL NIL |real_props| NIL)
    (|both_sides_minus_le1| FORMULA-DECL NIL |real_props| NIL)
    (|both_sides_plus_le2| FORMULA-DECL NIL |real_props| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|abs_nat| FORMULA-DECL NIL |abs_lems| |reals|))
   SHOSTAK))
 (|ulp_monotone| 0
  (|ulp_monotone-1| |nil| 3909492166
   ("" (SKEEP)
    (("" (USE " ulp_monotone_abs")
      (("" (ASSERT) (("" (EXPAND "abs") (("" (PROPAX) NIL NIL)) NIL)) NIL))
      NIL))
    NIL)
   ((|ulp_monotone_abs| FORMULA-DECL NIL |ieee754_domain| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL))
   SHOSTAK))
 (|ulp_min| 0
  (|ulp_min-1| |nil| 3909491879
   ("" (SKEEP)
    (("" (EXPAND "min_ulp")
      (("" (USE "ulp_monotone_abs") (("" (ASSERT) NIL NIL)) NIL)) NIL))
    NIL)
   ((|min_ulp| CONST-DECL "posreal" |ieee754_domain| NIL)
    (|abs_0| FORMULA-DECL NIL |abs_lems| |reals|)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_abs_is_nonneg| APPLICATION-JUDGEMENT "{j: nonneg_int | j >= i}"
     |real_defs| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|ulp_monotone_abs| FORMULA-DECL NIL |ieee754_domain| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   SHOSTAK)))

