(|domain_equivalence|
 (|axm_ulp_fnd_ulp_pos_TCC1| 0
  (|axm_ulp_fnd_ulp_pos_TCC1-1| |nil| 3878983376 ("" (SUBTYPE-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL))
   NIL
   (|axm_ulp_fnd_ulp_pos| SUBTYPE "real_defs.abs(domain_equivalence.x)"
    "posreal")))
 (|axm_ulp_fnd_ulp_pos_TCC2| 0
  (|axm_ulp_fnd_ulp_pos_TCC2-1| |nil| 3878983376 ("" (SUBTYPE-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL))
   NIL
   (|axm_ulp_fnd_ulp_pos| SUBTYPE "domain_equivalence.radix"
    "{r | log.r /= 1}")))
 (|axm_ulp_fnd_ulp_pos| 0
  (|axm_ulp_fnd_ulp_pos-1| |nil| 3878983387
   ("" (SKEEP)
    (("" (BETA)
      (("" (CASE "NOT x=0 AND x>=0")
        (("1" (HIDE -2)
          (("1" (FLATTEN)
            (("1" (EXPAND "RND_Min")
              (("1" (USE "RND_aux_alt_def")
                (("1" (REPLACE -1)
                  (("1" (HIDE -1)
                    (("1" (ASSERT)
                      (("1" (EXPAND "RND_aux_alt")
                        (("1" (USE "log_def")
                          (("1" (EXPAND "vNum")
                            (("1" (REPLACE -1 :DIR RL)
                              (("1" (HIDE -1)
                                (("1" (LIFT-IF)
                                  (("1" (SPLIT)
                                    (("1" (FLATTEN)
                                      (("1" (EXPAND "emin")
                                        (("1"
                                          (CASE
                                              "floor(log(radix)(abs(x))) < emin[radix, precision,
 e_max]")
                                          (("1" (EXPAND "max")
                                            (("1" (ASSERT)
                                              (("1" (EXPAND "emin")
                                                (("1" (ASSERT)
                                                  (("1" (USE "dExp_emax")
                                                    (("1" (REPLACE -1)
                                                      (("1" (ASSERT) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("2" (EXPAND "emin")
                                            (("2" (USE "dExp_emax")
                                              (("2" (REPLACE -1)
                                                (("2" (HIDE -1)
                                                  (("2" (ASSERT)
                                                    (("2"
                                                      (CASE
                                                          "exponentiation.^(radix, (-(e_max - 2 + precision) - 1)) * exponentiation.^(radix, precision) = exponentiation.^(radix, (1 - e_max))")
                                                      (("1" (REPLACE -1)
                                                        (("1" (HIDE -1)
                                                          (("1" (EXPAND "abs")
                                                            (("1"
                                                              (LEMMA
                                                               "floor_def")
                                                              (("1"
                                                                (INST -1
                                                                 "log(radix)(x)")
                                                                (("1" (FLATTEN)
                                                                  (("1"
                                                                    (HIDE -2)
                                                                    (("1"
                                                                      (BOTH-SIDES-F
                                                                       -2
                                                                       "log(radix)")
                                                                      (("1"
                                                                        (LEMMA
                                                                         "log_expt")
                                                                        (("1"
                                                                          (INST
                                                                           -1
                                                                           "radix"
                                                                           "1 - e_max")
                                                                          (("1"
                                                                            (USE
                                                                             "real_expt_int_rew")
                                                                            (("1"
                                                                              (REPLACE
                                                                               -1)
                                                                              (("1"
                                                                                (ASSERT)
                                                                                NIL
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL)
                                                                       ("2"
                                                                        (REWRITE
                                                                         "both_sides_log_gt1_lt")
                                                                        NIL
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL)
                                                       ("2" (LEMMA "expt_plus")
                                                        (("2"
                                                          (INST -1
                                                           "(-(e_max - 2 + precision) - 1)"
                                                           "precision" "radix")
                                                          (("2" (REPLACE -1)
                                                            (("2" (PROPAX) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (FLATTEN)
                                      (("2" (LEMMA "log_mult")
                                        (("2" (EXPAND "log" 2 1)
                                          (("2"
                                            (INST -1 "radix" "x"
                                             "radix / exponentiation.^(radix, precision)")
                                            (("2" (REPLACE -1)
                                              (("2" (USE "log_div")
                                                (("2" (REPLACE -1)
                                                  (("2" (HIDE -1)
                                                    (("2" (USE "log_ne1x")
                                                      (("2" (REPLACE -1)
                                                        (("2" (HIDE -1)
                                                          (("2" (HIDE -1)
                                                            (("2"
                                                              (LEMMA
                                                               "log_expt")
                                                              (("2"
                                                                (INST -1
                                                                 "radix"
                                                                 "precision")
                                                                (("2"
                                                                  (USE
                                                                   "real_expt_int_rew")
                                                                  (("2"
                                                                    (REPLACE
                                                                     -1)
                                                                    (("2"
                                                                      (REPLACE
                                                                       -2)
                                                                      (("2"
                                                                        (CASE
                                                                            "floor(log(radix)(abs(x))) >= emin[radix, precision, e_max]")
                                                                        (("1"
                                                                          (EXPAND
                                                                           "max")
                                                                          (("1"
                                                                            (ASSERT)
                                                                            (("1"
                                                                              (EXPAND
                                                                               "abs")
                                                                              (("1"
                                                                                (HIDE-ALL-BUT
                                                                                 2)
                                                                                (("1"
                                                                                  (LEMMA
                                                                                   "floor_plus_int")
                                                                                  (("1"
                                                                                    (INST
                                                                                     -1
                                                                                     "-precision"
                                                                                     "1 + log(radix)(x)")
                                                                                    (("1"
                                                                                      (REPLACE
                                                                                       -1)
                                                                                      (("1"
                                                                                        (HIDE
                                                                                         -1)
                                                                                        (("1"
                                                                                          (LEMMA
                                                                                           "floor_plus_int")
                                                                                          (("1"
                                                                                            (INST
                                                                                             -1
                                                                                             "1"
                                                                                             "
 log(radix)(x)")
                                                                                            (("1"
                                                                                              (REPLACE
                                                                                               -1)
                                                                                              (("1"
                                                                                                (ASSERT)
                                                                                                NIL
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL)
                                                                         ("2"
                                                                          (HIDE-ALL-BUT
                                                                           (-3
                                                                            1 2
                                                                            4))
                                                                          (("2"
                                                                            (EXPAND
                                                                             "abs")
                                                                            (("2"
                                                                              (CASE
                                                                                  "(x >= exponentiation.^(radix, (-dExp - 1)) * exponentiation.^(radix, precision))")
                                                                              (("1"
                                                                                (HIDE
                                                                                 2)
                                                                                (("1"
                                                                                  (EXPAND
                                                                                   "emin")
                                                                                  (("1"
                                                                                    (USE
                                                                                     "dExp_emax")
                                                                                    (("1"
                                                                                      (REPLACE
                                                                                       -1)
                                                                                      (("1"
                                                                                        (HIDE
                                                                                         -1)
                                                                                        (("1"
                                                                                          (BOTH-SIDES-F
                                                                                           -1
                                                                                           "log(radix)")
                                                                                          (("1"
                                                                                            (CASE
                                                                                                "log(radix) (exponentiation.^(radix,
 (-(e_max - 1 + precision - 1) - 1)) * exponentiation.^(radix, precision))
 = 1 - e_max")
                                                                                            (("1"
                                                                                              (REPLACE
                                                                                               -1)
                                                                                              (("1"
                                                                                                (HIDE
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (BOTH-SIDES-F
                                                                                                   -1
                                                                                                   "floor")
                                                                                                  NIL
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL)
                                                                                             ("2"
                                                                                              (HIDE-ALL-BUT
                                                                                               1)
                                                                                              (("2"
                                                                                                (REWRITE
                                                                                                 "log_mult")
                                                                                                (("2"
                                                                                                  (USE
                                                                                                   "real_expt_int_rew")
                                                                                                  (("2"
                                                                                                    (REPLACE
                                                                                                     -1
                                                                                                     :DIR
                                                                                                     RL)
                                                                                                    (("2"
                                                                                                      (HIDE
                                                                                                       -1)
                                                                                                      (("2"
                                                                                                        (REWRITE
                                                                                                         "real_expt_int_rew"
                                                                                                         :DIR
                                                                                                         RL)
                                                                                                        (("2"
                                                                                                          (REWRITE
                                                                                                           "log_expt")
                                                                                                          (("2"
                                                                                                            (REWRITE
                                                                                                             "log_expt")
                                                                                                            (("2"
                                                                                                              (ASSERT)
                                                                                                              NIL
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL)
                                                                                           ("2"
                                                                                            (REWRITE
                                                                                             "both_sides_log_gt1_ge")
                                                                                            (("2"
                                                                                              (ASSERT)
                                                                                              NIL
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL)
                                                                               ("2"
                                                                                (ASSERT)
                                                                                NIL
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (HIDE 2)
                            (("2" (EXPAND "vNum")
                              (("2" (ASSERT)
                                (("2" (TYPEPRED "radix")
                                  (("2" (TYPEPRED "precision")
                                    (("2" (CASE "radix ^ precision > 0")
                                      (("1" (CASE "x*radix > 0")
                                        (("1" (ASSERT)
                                          (("1" (GRIND-REALS) NIL NIL)) NIL)
                                         ("2" (GRIND-REALS) NIL NIL))
                                        NIL)
                                       ("2" (GRIND-REALS) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (ASSERT) NIL NIL))
        NIL))
      NIL))
    NIL)
   ((>= CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|RND_aux_alt_def| FORMULA-DECL NIL |float| |float_unbounded|)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|radix| FORMAL-CONST-DECL "above(1)" |domain_equivalence| NIL)
    (|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL)
    (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal"
     |real_types| NIL)
    (|posrat_exp| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|RND_aux_alt| CONST-DECL "(Fcanonic?(b))" |float| |float_unbounded|)
    (|pos_times_ge| FORMULA-DECL NIL |real_props| NIL)
    (|neg_times_gt| FORMULA-DECL NIL |real_props| NIL)
    (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|div_mult_pos_ge1| FORMULA-DECL NIL |real_props| NIL)
    (|zero_times1| FORMULA-DECL NIL |real_props| NIL)
    (|pos_div_gt| FORMULA-DECL NIL |real_props| NIL)
    (|pos_times_gt| FORMULA-DECL NIL |real_props| NIL)
    (^ CONST-DECL "nnreal" |real_expt| |power|)
    (|emin| CONST-DECL "negint" |ieee754_domain| |float_bounded_axiomatic|)
    (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|expt_plus| FORMULA-DECL NIL |exponentiation| NIL)
    (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|both_sides_log_gt1_lt| FORMULA-DECL NIL |log| |power|)
    (|log_expt| FORMULA-DECL NIL |log| |power|)
    (|real_expt_int_rew| FORMULA-DECL NIL |real_expt| |power|)
    (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|floor_def| FORMULA-DECL NIL |floor_ceil| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|dExp_emax| FORMULA-DECL NIL |domain_equivalence| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|posrat_times_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|floor| CONST-DECL "{i | i <= x & x < i + 1}" |floor_ceil| NIL)
    (|log| CONST-DECL "real" |log| |power|)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (|nonpos_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|negint| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|e_max| FORMAL-CONST-DECL "above(1)" |domain_equivalence| NIL)
    (|log_mult| FORMULA-DECL NIL |log| |power|)
    (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|log_div| FORMULA-DECL NIL |log| |power|)
    (|floor_plus_int| FORMULA-DECL NIL |floor_ceil| NIL)
    (|both_sides_log_gt1_ge| FORMULA-DECL NIL |log| |power|)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|log_ne1x| FORMULA-DECL NIL |log| |power|)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|log| CONST-DECL "real" |log| |power|)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|dExp| FORMAL-CONST-DECL "{d: posnat | d > 2 * (precision - 1) - 1}"
     |domain_equivalence| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|precision| FORMAL-CONST-DECL "above(1)" |domain_equivalence| NIL)
    (|vNum| CONST-DECL "posnat" |float| |float_unbounded|)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|Format| TYPE-EQ-DECL NIL |float| |float_unbounded|)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|x| SKOLEM-CONST-DECL "real" |domain_equivalence| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|log_def| FORMULA-DECL NIL |ln_exp_def| |power|)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|rat_max| APPLICATION-JUDGEMENT "{s: rat | s >= q AND s >= r}" |real_defs|
     NIL)
    (|int_max| APPLICATION-JUDGEMENT "{k: int | i <= k AND j <= k}" |real_defs|
     NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|RND_Min| CONST-DECL "(Fcanonic?(b))" |float| |float_unbounded|)
    (|rndminismin_j| APPLICATION-JUDGEMENT "CanonicRoundingFun(b, isMin?(b))"
     |domain_equivalence| NIL))
   SHOSTAK))
 (|axm_ulp_fnd_ulp| 0
  (|axm_ulp_fnd_ulp-1| |nil| 3876929245
   ("" (SKEEP)
    (("" (EXPAND "ulp")
      (("" (EXPAND "ulp")
        (("" (EXPAND "Fulp")
          ((""
            (CASE
                "(Fexp (Fnormalize((# Prec := precision, dExp := dExp #)) (RND_ToZero[radix]((# Prec := precision, dExp := dExp #))(x))) ) = IF x = 0 THEN emin[radix, precision, e_max] ELSE (max(floor(log(radix )(abs(x))), emin[radix, precision, e_max])) ENDIF - precision + 1")
            (("1" (REPLACE -1 1) (("1" (PROPAX) NIL NIL)) NIL)
             ("2" (HIDE 2)
              (("2" (USE "FnormalizeCorrect")
                (("2" (SPLIT)
                  (("1" (USE "FcanonicUnique")
                    (("1" (ASSERT)
                      (("1" (HIDE -2)
                        (("1" (REPLACE -1 1 :HIDE? TRUE)
                          (("1" (LIFT-IF)
                            (("1" (SPLIT)
                              (("1" (FLATTEN)
                                (("1" (REPLACE -1 1)
                                  (("1" (EXPAND "emin")
                                    (("1" (CASE "2 - e_max - precision= -dExp")
                                      (("1" (REPLACE -1 1)
                                        (("1" (HIDE -1)
                                          (("1" (EXPAND "RND_ToZero")
                                            (("1" (EXPAND "RND_Min")
                                              (("1" (EXPAND "RND_aux")
                                                (("1" (GRIND) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (HIDE 2)
                                        (("2" (USE "dExp_emax")
                                          (("2" (ASSERT) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (FLATTEN)
                                (("2" (EXPAND "RND_ToZero")
                                  (("2" (LIFT-IF)
                                    (("2" (SPLIT)
                                      (("1" (FLATTEN)
                                        (("1" (USE "axm_ulp_fnd_ulp_pos")
                                          (("1" (ASSERT) NIL NIL)) NIL))
                                        NIL)
                                       ("2" (FLATTEN)
                                        (("2" (EXPAND "RND_Max")
                                          (("2" (EXPAND "Fopp")
                                            (("2" (NAME "y" "-x")
                                              (("2" (CASE "y>0")
                                                (("1" (CASE "abs(x)=abs(-x)")
                                                  (("1" (REPLACE -1)
                                                    (("1" (REPLACE -3)
                                                      (("1"
                                                        (USE
                                                         "axm_ulp_fnd_ulp_pos")
                                                        (("1" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (EXPAND "abs")
                                                    (("2" (ASSERT) NIL NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (ASSERT) NIL NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (HIDE 2)
                    (("2" (USE "FcanonicBounded") (("2" (ASSERT) NIL NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("3" (TYPEPRED "radix") (("3" (ASSERT) NIL NIL)) NIL)
             ("4" (HIDE-ALL-BUT 1) (("4" (GRIND) NIL NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|ulp| CONST-DECL "posreal" |ieee754_domain| |float_bounded_axiomatic|) NIL
    (|Fulp| CONST-DECL "real" |float| |float_unbounded|)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|RND_Min| CONST-DECL "(Fcanonic?(b))" |float| |float_unbounded|)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|posnat_expt| APPLICATION-JUDGEMENT "posnat" |exponentiation| NIL)
    (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|posrat_times_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|expt| DEF-DECL "real" |exponentiation| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (|vNum| CONST-DECL "posnat" |float| |float_unbounded|)
    (|log_nat| DEF-DECL "[n: nat, {y | y < p AND x = p ^ n * y}]" |log_nat|
     |reals|)
    (|RND_aux| CONST-DECL "(Fcanonic?(b))" |float| |float_unbounded|)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|posrat_exp| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL)
    (|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL)
    (|dExp_emax| FORMULA-DECL NIL |domain_equivalence| NIL)
    (|axm_ulp_fnd_ulp_pos| FORMULA-DECL NIL |domain_equivalence| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|RND_Max| CONST-DECL "(Fcanonic?(b))" |float| |float_unbounded|)
    (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|Fopp| CONST-DECL "float" |float| |float_unbounded|)
    (|FcanonicUnique| FORMULA-DECL NIL |float| |float_unbounded|)
    (|FcanonicBounded| FORMULA-DECL NIL |float| |float_unbounded|)
    (|FnormalizeCorrect| FORMULA-DECL NIL |float| |float_unbounded|)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_max| APPLICATION-JUDGEMENT "{k: int | i <= k AND j <= k}" |real_defs|
     NIL)
    (|rat_max| APPLICATION-JUDGEMENT "{s: rat | s >= q AND s >= r}" |real_defs|
     NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|radix| FORMAL-CONST-DECL "above(1)" |domain_equivalence| NIL)
    (|Format| TYPE-EQ-DECL NIL |float| |float_unbounded|)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|float| TYPE-EQ-DECL NIL |float| |float_unbounded|)
    (|Fbounded?| CONST-DECL "bool" |float| |float_unbounded|)
    (|Fcanonic?| CONST-DECL "bool" |float| |float_unbounded|)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|FtoR| CONST-DECL "real" |float| |float_unbounded|)
    (<= CONST-DECL "bool" |reals| NIL)
    (|Fnormalize| DEF-DECL
     "{x: (Fcanonic?(b)) | FtoR(x) = FtoR(f):: real AND Fexp(x) <= Fexp(f)}"
     |float| |float_unbounded|)
    (|precision| FORMAL-CONST-DECL "above(1)" |domain_equivalence| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|dExp| FORMAL-CONST-DECL "{d: posnat | d > 2 * (precision - 1) - 1}"
     |domain_equivalence| NIL)
    (|RND_ToZero| CONST-DECL "(Fcanonic?(b))" |float| |float_unbounded|)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|nonpos_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|negint| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|e_max| FORMAL-CONST-DECL "above(1)" |domain_equivalence| NIL)
    (|emin| CONST-DECL "negint" |ieee754_domain| |float_bounded_axiomatic|)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL)
    (|floor| CONST-DECL "{i | i <= x & x < i + 1}" |floor_ceil| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL) NIL
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    NIL)
   SHOSTAK)))

