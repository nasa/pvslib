(aerr754dp_div
 (IMP_accum_err_div_TCC1 0
  (IMP_accum_err_div_TCC1-2 nil 3682160971 ("" (assert) nil nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak
   (IMP_accum_err_div subtype "ieee754dp.ieee754radix"
    "integers.above(1)"))
  (IMP_accum_err_div_TCC1-1 nil 3682160529 ("" (subtype-tcc) nil nil)
   nil nil
   (IMP_accum_err_div subtype "ieee754dp.ieee754radix"
    "integers.above(1)")))
 (IMP_accum_err_div_TCC2 0
  (IMP_accum_err_div_TCC2-1 nil 3698316251 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float nil)
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float nil)
    (Fbounded? const-decl "bool" float nil)
    (double_precision_format const-decl "Format" ieee754dp nil)
    (FtoR const-decl "real" float nil)
    (Closest? const-decl "bool" float nil)
    (even? const-decl "bool" integers nil)
    (EvenClosest? const-decl "bool" float nil)
    (dp_closest? const-decl "bool" ieee754dp nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak
   (IMP_accum_err_div assuming
    "accum_err_div[2, ieee754dp.double_precision_format, ieee754dp.dp_closest?, ieee754dp.RtoD].accum_err_div"
    "round_even_closest: ASSUMPTION FORALL (x: reals.real, f: (float[accum_err_div.radix].Fbounded?(accum_err_div.b))): booleans.IMPLIES(accum_err_div.round(x, f), float[accum_err_div.radix].EvenClosest?(accum_err_div.b)(x, f))")))
 (IMP_accum_err_div_TCC3 0
  (IMP_accum_err_div_TCC3-2 "" 3790103638
   ("" (typepred "dp_closest?") (("" (propax) nil nil)) nil)
   ((dp_closest?_closestroundingpred_j name-judgement
     "ClosestRoundingPred[2](double_precision_format)" ieee754dp nil)
    (dp_closest?_j name-judgement
     "{round: RestrictedRounding[2](double_precision_format, EvenClosest?) | rounded_mode?(double_precision_format)(round)}"
     ieee754dp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float nil)
    (Fbounded? const-decl "bool" float nil)
    (double_precision_format const-decl "Format" ieee754dp nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (dp_closest? const-decl "bool" ieee754dp nil)
    (Closest? const-decl "bool" float nil)
    (EvenClosest? const-decl "bool" float nil)
    (Rounding type-eq-decl nil float nil)
    (rounded_mode? const-decl "bool" float nil))
   shostak
   (IMP_accum_err_div assuming
    "accum_err_div[2, ieee754dp.double_precision_format, ieee754dp.dp_closest?, ieee754dp.RtoD].accum_err_div"
    "round_rounded_mode: ASSUMPTION float[accum_err_div.radix].rounded_mode?(accum_err_div.b)(accum_err_div.round)"))
  (IMP_accum_err_div_TCC3-1 nil 3698316251
   ("" (typepred "dp_closest?"))
   ((dp_closest?_closestroundingpred_j name-judgement
     "ClosestRoundingPred[2](double_precision_format)" ieee754dp nil)
    (dp_closest?_j name-judgement
     "{round: RestrictedRounding[2](double_precision_format, EvenClosest?) | rounded_mode?(double_precision_format)(round)}"
     ieee754dp nil)
    (float type-eq-decl nil float nil)
    (Format type-eq-decl nil float nil)
    (Fbounded? const-decl "bool" float nil)
    (double_precision_format const-decl "Format" ieee754dp nil)
    (dp_closest? const-decl "bool" ieee754dp nil)
    (Closest? const-decl "bool" float nil)
    (EvenClosest? const-decl "bool" float nil)
    (Rounding type-eq-decl nil float nil)
    (rounded_mode? const-decl "bool" float nil))
   nil
   (IMP_accum_err_div assuming
    "accum_err_div[2, ieee754dp.double_precision_format, ieee754dp.dp_closest?, ieee754dp.RtoD].accum_err_div"
    "round_rounded_mode: ASSUMPTION float[accum_err_div.radix].rounded_mode?(accum_err_div.b)(accum_err_div.round)")))
 (aebounddp_div_TCC1 0
  (aebounddp_div_TCC1-1 nil 3682252143 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil))
   shostak
   (aebounddp_div subtype "aerr754dp_div.e2"
    "{e2 | booleans.OR(reals.<(0, (number_fields.-)(aerr754dp_div.r2, accum_err_div.e2)), reals.<((number_fields.+)(accum_err_div.e2, aerr754dp_div.r2), 0))}")))
 (Ddiv_aerr_rest_on_reals_TCC1 0
  (Ddiv_aerr_rest_on_reals_TCC1-1 nil 3877474038
   ("" (subtype-tcc) nil nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float nil)
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float nil)
    (Fcanonic? const-decl "bool" float nil)
    (double_precision_format const-decl "Format" ieee754dp nil)
    (unb_double nonempty-type-eq-decl nil ieee754dp nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (Fsubnormal? const-decl "bool" float nil)
    (Fnormal? const-decl "bool" float nil)
    (Fbounded? const-decl "bool" float nil)
    (vNum const-decl "posnat" float nil)
    (^ const-decl "real" exponentiation nil)
    (DtoR const-decl "real" ieee754dp nil)
    (FtoR const-decl "real" float nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil))
   nil
   (Ddiv_aerr_rest_on_reals subtype "aerr754dp_div.f2"
    "{f2 | ieee754dp.DtoR(ieee754dp_div.f2) /= 0}")))
 (Ddiv_aerr_rest_on_reals_TCC2 0
  (Ddiv_aerr_rest_on_reals_TCC2-1 nil 3877474038
   ("" (subtype-tcc) nil nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float nil)
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float nil)
    (Fcanonic? const-decl "bool" float nil)
    (double_precision_format const-decl "Format" ieee754dp nil)
    (unb_double nonempty-type-eq-decl nil ieee754dp nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (rat_abs_is_nonneg application-judgement "{r: nonneg_rat | r >= q}"
     real_defs nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (Fsubnormal? const-decl "bool" float nil)
    (Fnormal? const-decl "bool" float nil)
    (Fbounded? const-decl "bool" float nil)
    (vNum const-decl "posnat" float nil)
    (^ const-decl "real" exponentiation nil)
    (FtoR const-decl "real" float nil)
    (DtoR const-decl "real" ieee754dp nil)
    (/= const-decl "boolean" notequal nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil))
   nil (Ddiv_aerr_rest_on_reals subtype "aerr754dp_div.r2" "nznum")))
 (Ddiv_aerr_rest_on_reals 0
  (Ddiv_aerr_rest_on_reals-1 nil 3877474676
   ("" (expand "aebounddp_div")
    (("" (skeep)
      (("" (lift-if)
        (("" (split 1)
          (("1" (flatten)
            (("1" (lemma "accum_err_bound")
              (("1" (expand "DtoR")
                (("1" (expand "Ddiv" 1)
                  (("1" (expand "ulp_dp")
                    (("1" (inst?)
                      (("1" (split -1)
                        (("1" (propax) nil nil) ("2" (propax) nil nil)
                         ("3" (propax) nil nil) ("4" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (flatten) (("2" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (RtoD const-decl "{f: unb_double | closest_double?(x1)(f)}"
     ieee754dp nil)
    (closest_double? const-decl "bool" ieee754dp nil)
    (unb_double nonempty-type-eq-decl nil ieee754dp nil)
    (Fcanonic? const-decl "bool" float nil)
    (dp_closest? const-decl "bool" ieee754dp nil)
    (Fbounded? const-decl "bool" float nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (float type-eq-decl nil float nil)
    (int nonempty-type-eq-decl nil integers nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (double_precision_format const-decl "Format" ieee754dp nil)
    (Format type-eq-decl nil float nil)
    (above nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (accum_err_bound formula-decl nil accum_err_div nil)
    (Ddiv const-decl
     "{f: unb_double | closest_double?(FtoR(f1) / FtoR(f2))(f)}"
     ieee754dp_div nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ulp_dp const-decl "nonneg_real" ieee754dp nil)
    (DtoR const-decl "real" ieee754dp nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (aebounddp_div const-decl "nonneg_real" aerr754dp_div nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   shostak))
 (Ddiv_aerr_TCC1 0
  (Ddiv_aerr_TCC1-1 nil 3682160529
   ("" (skeep)
    (("" (assert)
      (("" (replace -3 :dir rl) (("" (rewrite "RtoD_DtoR") nil nil))
        nil))
      nil))
    nil)
   ((rtod_canonicroundfun_exactrepconservation_j name-judgement
     "{RtoF: CanonicRoundingFun(double_precision_format, dp_closest?) | exact_rep_conservation[2](double_precision_format, dp_closest?)(RtoF)}"
     ieee754dp nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (RtoD_DtoR formula-decl nil ieee754dp nil)
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Fcanonic? const-decl "bool" float nil)
    (double_precision_format const-decl "Format" ieee754dp nil)
    (unb_double nonempty-type-eq-decl nil ieee754dp nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak
   (Ddiv_aerr subtype "aerr754dp_div.f2"
    "{f2 | ieee754dp.DtoR(ieee754dp_div.f2) /= 0}")))
 (Ddiv_aerr_TCC2 0
  (Ddiv_aerr_TCC2-1 nil 3682160529 ("" (subtype-tcc) nil nil)
   ((unb_double nonempty-type-eq-decl nil ieee754dp nil)
    (Fcanonic? const-decl "bool" float nil)
    (float type-eq-decl nil float nil)
    (int nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float nil)
    (above nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (FtoR const-decl "real" float nil)
    (DtoR const-decl "real" ieee754dp nil)
    (double_precision_format const-decl "Format" ieee754dp nil)
    (^ const-decl "real" exponentiation nil)
    (vNum const-decl "posnat" float nil)
    (RND_Min const-decl "(Fcanonic?(b))" float nil)
    (Fopp const-decl "float" float nil)
    (RND_Max const-decl "(Fcanonic?(b))" float nil)
    (RtoD const-decl "{f: unb_double | closest_double?(x1)(f)}"
     ieee754dp nil)
    (/= const-decl "boolean" notequal nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak (Ddiv_aerr subtype "aerr754dp_div.r2" "nznum")))
 (Ddiv_aerr 0
  (Ddiv_aerr-2 nil 3682252166
   ("" (expand "aebounddp_div")
    (("" (skeep)
      (("" (lift-if)
        (("" (split 1)
          (("1" (flatten)
            (("1" (lemma "accum_err_bound")
              (("1" (expand "DtoR")
                (("1" (expand "Ddiv" 1)
                  (("1" (expand "ulp_dp")
                    (("1" (inst?)
                      (("1" (split -1)
                        (("1" (propax) nil nil) ("2" (propax) nil nil)
                         ("3" (propax) nil nil) ("4" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (flatten) (("2" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (RtoD const-decl "{f: unb_double | closest_double?(x1)(f)}"
     ieee754dp nil)
    (closest_double? const-decl "bool" ieee754dp nil)
    (unb_double nonempty-type-eq-decl nil ieee754dp nil)
    (Fcanonic? const-decl "bool" float nil)
    (dp_closest? const-decl "bool" ieee754dp nil)
    (Fbounded? const-decl "bool" float nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (float type-eq-decl nil float nil)
    (int nonempty-type-eq-decl nil integers nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (double_precision_format const-decl "Format" ieee754dp nil)
    (Format type-eq-decl nil float nil)
    (above nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (accum_err_bound formula-decl nil accum_err_div nil)
    (Ddiv const-decl
     "{f: unb_double | closest_double?(FtoR(f1) / FtoR(f2))(f)}"
     ieee754dp_div nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (rtod_canonicroundfun_exactrepconservation_j name-judgement
     "{RtoF: CanonicRoundingFun(double_precision_format, dp_closest?) | exact_rep_conservation[2](double_precision_format, dp_closest?)(RtoF)}"
     ieee754dp nil)
    (dp_closest?_j name-judgement
     "{round: RestrictedRounding[2](double_precision_format, EvenClosest?) | rounded_mode?(double_precision_format)(round)}"
     ieee754dp nil)
    (dp_closest?_closestroundingpred_j name-judgement
     "ClosestRoundingPred[2](double_precision_format)" ieee754dp nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ulp_dp const-decl "nonneg_real" ieee754dp nil)
    (DtoR const-decl "real" ieee754dp nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (aebounddp_div const-decl "nonneg_real" aerr754dp_div nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   nil)
  (Ddiv_aerr-1 nil 3682160563
   ("" (skeep)
    (("" (lemma "accum_err_bound")
      (("" (expand "DtoR")
        (("" (expand "Ddiv" 1)
          (("" (expand "ulp_dp")
            (("" (inst?)
              (("" (split -1)
                (("1" (propax) nil nil) ("2" (propax) nil nil)
                 ("3" (propax) nil nil) ("4" (propax) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((RtoD const-decl "{f: unb_double | closest_double?(x1)(f)}"
     ieee754dp nil)
    (closest_double? const-decl "bool" ieee754dp nil)
    (Fcanonic? const-decl "bool" float nil)
    (dp_closest? const-decl "bool" ieee754dp nil)
    (Fbounded? const-decl "bool" float nil)
    (float type-eq-decl nil float nil)
    (double_precision_format const-decl "Format" ieee754dp nil)
    (Format type-eq-decl nil float nil)
    (accum_err_bound formula-decl nil accum_err_div nil)
    (ulp_dp const-decl "nonneg_real" ieee754dp nil)
    (DtoR const-decl "real" ieee754dp nil))
   shostak)))

