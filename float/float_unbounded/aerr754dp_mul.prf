(aerr754dp_mul
 (IMP_accum_err_mul_TCC1 0
  (IMP_accum_err_mul_TCC1-2 nil 3682174086 ("" (assert) nil nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak
   (IMP_accum_err_mul subtype "ieee754dp.ieee754radix" "integers.above(1)"))
  (IMP_accum_err_mul_TCC1-1 nil 3682019787 ("" (multype-tcc) nil nil) nil nil
   (IMP_accum_err_mul subtype "ieee754dp.ieee754radix" "integers.above(1)")))
 (IMP_accum_err_mul_TCC2 0
  (IMP_accum_err_mul_TCC2-1 nil 3698088086 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float nil)
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float nil) (Fbounded? const-decl "bool" float nil)
    (double_precision_format const-decl "Format" ieee754dp nil)
    (FtoR const-decl "real" float nil) (Closest? const-decl "bool" float nil)
    (even? const-decl "bool" integers nil)
    (EvenClosest? const-decl "bool" float nil)
    (dp_closest? const-decl "bool" ieee754dp nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak
   (IMP_accum_err_mul assuming
    "accum_err_mul[2, ieee754dp.double_precision_format, ieee754dp.dp_closest?, ieee754dp.RtoD].accum_err_mul"
    "round_even_closest: ASSUMPTION FORALL (x: reals.real, f: (float[accum_err_mul.radix].Fbounded?(accum_err_mul.b))): booleans.IMPLIES(accum_err_mul.round(x, f), float[accum_err_mul.radix].EvenClosest?(accum_err_mul.b)(x, f))")))
 (IMP_accum_err_mul_TCC3 0
  (IMP_accum_err_mul_TCC3-2 "" 3790103632
   ("" (typepred "dp_closest?") (("" (propax) nil nil)) nil)
   ((dp_closest?_closestroundingpred_j name-judgement
     "ClosestRoundingPred[2](double_precision_format)" ieee754dp nil)
    (dp_closest?_j name-judgement
     "{round: RestrictedRounding[2](double_precision_format, EvenClosest?) |
   rounded_mode?(double_precision_format)(round)}" ieee754dp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float nil)
    (Fbounded? const-decl "bool" float nil)
    (double_precision_format const-decl "Format" ieee754dp nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (dp_closest? const-decl "bool" ieee754dp nil)
    (Closest? const-decl "bool" float nil)
    (EvenClosest? const-decl "bool" float nil)
    (Rounding type-eq-decl nil float nil)
    (rounded_mode? const-decl "bool" float nil))
   shostak
   (IMP_accum_err_mul assuming
    "accum_err_mul[2, ieee754dp.double_precision_format, ieee754dp.dp_closest?, ieee754dp.RtoD].accum_err_mul"
    "round_rounded_mode: ASSUMPTION float[accum_err_mul.radix].rounded_mode?(accum_err_mul.b)(accum_err_mul.round)"))
  (IMP_accum_err_mul_TCC3-1 nil 3698088086 ("" (typepred "dp_closest?"))
   ((dp_closest?_closestroundingpred_j name-judgement
     "ClosestRoundingPred[2](double_precision_format)" ieee754dp nil)
    (dp_closest?_j name-judgement
     "{round: RestrictedRounding[2](double_precision_format, EvenClosest?) |
   rounded_mode?(double_precision_format)(round)}" ieee754dp nil)
    (float type-eq-decl nil float nil) (Format type-eq-decl nil float nil)
    (Fbounded? const-decl "bool" float nil)
    (double_precision_format const-decl "Format" ieee754dp nil)
    (dp_closest? const-decl "bool" ieee754dp nil)
    (Closest? const-decl "bool" float nil)
    (EvenClosest? const-decl "bool" float nil)
    (Rounding type-eq-decl nil float nil)
    (rounded_mode? const-decl "bool" float nil))
   nil
   (IMP_accum_err_mul assuming
    "accum_err_mul[2, ieee754dp.double_precision_format, ieee754dp.dp_closest?, ieee754dp.RtoD].accum_err_mul"
    "round_rounded_mode: ASSUMPTION float[accum_err_mul.radix].rounded_mode?(accum_err_mul.b)(accum_err_mul.round)")))
 (Dmul_aerr 0
  (Dmul_aerr-2 nil 3682263989
   ("" (expand "aebounddp_mul")
    (("" (skeep)
      (("" (lemma "accum_err_bound")
        (("" (expand "DtoR")
          (("" (expand "Dmul" 1)
            (("" (expand "ulp_dp")
              (("" (inst?)
                (("" (split -1)
                  (("1" (propax) nil nil) ("2" (propax) nil nil)
                   ("3" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (DtoR const-decl "real" ieee754dp nil)
    (ulp_dp const-decl "nonneg_real" ieee754dp nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (Dmul const-decl
     "{f: unb_double | closest_double?(FtoR(f1) * FtoR(f2))(f)}" ieee754dp_mul
     nil)
    (accum_err_bound formula-decl nil accum_err_mul nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float nil)
    (double_precision_format const-decl "Format" ieee754dp nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Fbounded? const-decl "bool" float nil)
    (dp_closest? const-decl "bool" ieee754dp nil)
    (Fcanonic? const-decl "bool" float nil)
    (unb_double type-eq-decl nil ieee754dp nil)
    (closest_double? const-decl "bool" ieee754dp nil)
    (RtoD const-decl "{f: unb_double | closest_double?(x1)(f)}" ieee754dp nil)
    (aebounddp_mul const-decl "nonneg_real" aerr754dp_mul nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil)
  (Dmul_aerr-1 nil 3682019964
   ("" (skeep)
    (("" (lemma "accum_err_bound")
      (("" (expand "DtoR")
        (("" (expand "Dmul" 1)
          (("" (expand "ulp_dp")
            (("" (inst?)
              (("" (inst?)
                (("" (split -1)
                  (("1" (assert) nil nil) ("2" (propax) nil nil)
                   ("3" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((RtoD const-decl "{f: unb_double | closest_double?(x1)(f)}" ieee754dp nil)
    (closest_double? const-decl "bool" ieee754dp nil)
    (unb_double type-eq-decl nil ieee754dp nil)
    (Fcanonic? const-decl "bool" float nil)
    (dp_closest? const-decl "bool" ieee754dp nil)
    (Fbounded? const-decl "bool" float nil) (float type-eq-decl nil float nil)
    (double_precision_format const-decl "Format" ieee754dp nil)
    (Format type-eq-decl nil float nil)
    (accum_err_bound formula-decl nil accum_err_mul nil)
    (ulp_dp const-decl "nonneg_real" ieee754dp nil)
    (DtoR const-decl "real" ieee754dp nil))
   shostak))
 (IMP_aerr_mul_props_TCC1 0
  (IMP_aerr_mul_props_TCC1-1 nil 3698087980 ("" (subtype-tcc) nil nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak
   (IMP_aerr_mul_props subtype "ieee754dp.ieee754radix" "integers.above(1)")))
 (Dmulpow2l_aerr 0
  (Dmulpow2l_aerr-1 nil 3698087981
   ("" (skeep)
    (("" (lemma "accum_err_bound_exact_l")
      (("" (expand "aebounddp_mul_p2l")
        (("" (inst -1 "e!1" "n" "r" "f")
          (("1" (expand "mul_aerr_bound")
            (("1" (expand "DtoR")
              (("1" (assert)
                (("1" (expand "Dmul")
                  (("1" (case "abs(2^n) = 2^n")
                    (("1" (assert) nil nil)
                     ("2" (assert)
                      (("2" (expand "abs" 1) (("2" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (typepred "n")
            (("2" (expand "double_precision_format") (("2" (propax) nil nil))
              nil))
            nil)
           ("3" (typepred "n")
            (("3" (expand "double_precision_format") (("3" (propax) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((RtoD const-decl "{f: unb_double | closest_double?(x1)(f)}" ieee754dp nil)
    (closest_double? const-decl "bool" ieee754dp nil)
    (unb_double type-eq-decl nil ieee754dp nil)
    (Fcanonic? const-decl "bool" float nil)
    (dp_closest? const-decl "bool" ieee754dp nil)
    (Fbounded? const-decl "bool" float nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (float type-eq-decl nil float nil)
    (int nonempty-type-eq-decl nil integers nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (double_precision_format const-decl "Format" ieee754dp nil)
    (Format type-eq-decl nil float nil)
    (above nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (accum_err_bound_exact_l formula-decl nil aerr_mul_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}" real_defs
     nil)
    (mul_aerr_bound const-decl "nonneg_real" accum_err_mul nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (rtod_canonicroundfun_exactrepconservation_j name-judgement
     "{RtoF: CanonicRoundingFun(double_precision_format, dp_closest?) |
   exact_rep_conservation[2](double_precision_format, dp_closest?)(RtoF)}"
     ieee754dp nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Dmul const-decl
     "{f: unb_double | closest_double?(FtoR(f1) * FtoR(f2))(f)}" ieee754dp_mul
     nil)
    (DtoR const-decl "real" ieee754dp nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (n skolem-const-decl "{n: below(53) | n < 53 - Fexp(f)}" aerr754dp_mul
     nil)
    (f skolem-const-decl "unb_double" aerr754dp_mul nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (aebounddp_mul_p2l const-decl "nonneg_real" aerr754dp_mul nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   shostak))
 (Dmulpow2r_aerr 0
  (Dmulpow2r_aerr-1 nil 3698091520
   ("" (skeep)
    (("" (expand "aebounddp_mul_p2r")
      (("" (use "Dmul_commutative")
        (("" (replace -1 :hide? t)
          (("" (lemma "Dmulpow2l_aerr")
            (("" (expand "aebounddp_mul_p2l")
              (("" (inst? -1 :where -2)
                (("" (inst? -1 :where 1) (("" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((aebounddp_mul_p2r const-decl "nonneg_real" aerr754dp_mul nil)
    (aebounddp_mul_p2l const-decl "nonneg_real" aerr754dp_mul nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (rtod_canonicroundfun_exactrepconservation_j name-judgement
     "{RtoF: CanonicRoundingFun(double_precision_format, dp_closest?) |
   exact_rep_conservation[2](double_precision_format, dp_closest?)(RtoF)}"
     ieee754dp nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (Dmulpow2l_aerr formula-decl nil aerr754dp_mul nil)
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Fcanonic? const-decl "bool" float nil)
    (double_precision_format const-decl "Format" ieee754dp nil)
    (unb_double type-eq-decl nil ieee754dp nil)
    (real nonempty-type-from-decl nil reals nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (Fbounded? const-decl "bool" float nil)
    (closest_double? const-decl "bool" ieee754dp nil)
    (RtoD const-decl "{f: unb_double | closest_double?(x1)(f)}" ieee754dp nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil) (>= const-decl "bool" reals nil)
    (^ const-decl "real" exponentiation nil) (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Dmul_commutative formula-decl nil ieee754dp_mul nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   shostak)))

